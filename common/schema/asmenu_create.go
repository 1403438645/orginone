// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/asmenu"
	"orginone/common/schema/asrole"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsMenuCreate is the builder for creating a AsMenu entity.
type AsMenuCreate struct {
	config
	mutation *AsMenuMutation
	hooks    []Hook
}

// SetParentID sets the "parent_id" field.
func (amc *AsMenuCreate) SetParentID(i int64) *AsMenuCreate {
	amc.mutation.SetParentID(i)
	return amc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (amc *AsMenuCreate) SetNillableParentID(i *int64) *AsMenuCreate {
	if i != nil {
		amc.SetParentID(*i)
	}
	return amc
}

// SetName sets the "name" field.
func (amc *AsMenuCreate) SetName(s string) *AsMenuCreate {
	amc.mutation.SetName(s)
	return amc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (amc *AsMenuCreate) SetNillableName(s *string) *AsMenuCreate {
	if s != nil {
		amc.SetName(*s)
	}
	return amc
}

// SetAlias sets the "alias" field.
func (amc *AsMenuCreate) SetAlias(s string) *AsMenuCreate {
	amc.mutation.SetAlias(s)
	return amc
}

// SetNillableAlias sets the "alias" field if the given value is not nil.
func (amc *AsMenuCreate) SetNillableAlias(s *string) *AsMenuCreate {
	if s != nil {
		amc.SetAlias(*s)
	}
	return amc
}

// SetPath sets the "path" field.
func (amc *AsMenuCreate) SetPath(s string) *AsMenuCreate {
	amc.mutation.SetPath(s)
	return amc
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (amc *AsMenuCreate) SetNillablePath(s *string) *AsMenuCreate {
	if s != nil {
		amc.SetPath(*s)
	}
	return amc
}

// SetIcon sets the "icon" field.
func (amc *AsMenuCreate) SetIcon(s string) *AsMenuCreate {
	amc.mutation.SetIcon(s)
	return amc
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (amc *AsMenuCreate) SetNillableIcon(s *string) *AsMenuCreate {
	if s != nil {
		amc.SetIcon(*s)
	}
	return amc
}

// SetSort sets the "sort" field.
func (amc *AsMenuCreate) SetSort(i int64) *AsMenuCreate {
	amc.mutation.SetSort(i)
	return amc
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (amc *AsMenuCreate) SetNillableSort(i *int64) *AsMenuCreate {
	if i != nil {
		amc.SetSort(*i)
	}
	return amc
}

// SetCategory sets the "category" field.
func (amc *AsMenuCreate) SetCategory(i int64) *AsMenuCreate {
	amc.mutation.SetCategory(i)
	return amc
}

// SetIsOpen sets the "is_open" field.
func (amc *AsMenuCreate) SetIsOpen(i int64) *AsMenuCreate {
	amc.mutation.SetIsOpen(i)
	return amc
}

// SetNillableIsOpen sets the "is_open" field if the given value is not nil.
func (amc *AsMenuCreate) SetNillableIsOpen(i *int64) *AsMenuCreate {
	if i != nil {
		amc.SetIsOpen(*i)
	}
	return amc
}

// SetRemark sets the "remark" field.
func (amc *AsMenuCreate) SetRemark(s string) *AsMenuCreate {
	amc.mutation.SetRemark(s)
	return amc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (amc *AsMenuCreate) SetNillableRemark(s *string) *AsMenuCreate {
	if s != nil {
		amc.SetRemark(*s)
	}
	return amc
}

// SetReformStatus sets the "reform_status" field.
func (amc *AsMenuCreate) SetReformStatus(i int64) *AsMenuCreate {
	amc.mutation.SetReformStatus(i)
	return amc
}

// SetNillableReformStatus sets the "reform_status" field if the given value is not nil.
func (amc *AsMenuCreate) SetNillableReformStatus(i *int64) *AsMenuCreate {
	if i != nil {
		amc.SetReformStatus(*i)
	}
	return amc
}

// SetIsDeleted sets the "is_deleted" field.
func (amc *AsMenuCreate) SetIsDeleted(i int64) *AsMenuCreate {
	amc.mutation.SetIsDeleted(i)
	return amc
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (amc *AsMenuCreate) SetNillableIsDeleted(i *int64) *AsMenuCreate {
	if i != nil {
		amc.SetIsDeleted(*i)
	}
	return amc
}

// SetStatus sets the "status" field.
func (amc *AsMenuCreate) SetStatus(i int64) *AsMenuCreate {
	amc.mutation.SetStatus(i)
	return amc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (amc *AsMenuCreate) SetNillableStatus(i *int64) *AsMenuCreate {
	if i != nil {
		amc.SetStatus(*i)
	}
	return amc
}

// SetCreateUser sets the "create_user" field.
func (amc *AsMenuCreate) SetCreateUser(i int64) *AsMenuCreate {
	amc.mutation.SetCreateUser(i)
	return amc
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (amc *AsMenuCreate) SetNillableCreateUser(i *int64) *AsMenuCreate {
	if i != nil {
		amc.SetCreateUser(*i)
	}
	return amc
}

// SetUpdateUser sets the "update_user" field.
func (amc *AsMenuCreate) SetUpdateUser(i int64) *AsMenuCreate {
	amc.mutation.SetUpdateUser(i)
	return amc
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (amc *AsMenuCreate) SetNillableUpdateUser(i *int64) *AsMenuCreate {
	if i != nil {
		amc.SetUpdateUser(*i)
	}
	return amc
}

// SetCreateTime sets the "create_time" field.
func (amc *AsMenuCreate) SetCreateTime(dt date.DateTime) *AsMenuCreate {
	amc.mutation.SetCreateTime(dt)
	return amc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (amc *AsMenuCreate) SetNillableCreateTime(dt *date.DateTime) *AsMenuCreate {
	if dt != nil {
		amc.SetCreateTime(*dt)
	}
	return amc
}

// SetUpdateTime sets the "update_time" field.
func (amc *AsMenuCreate) SetUpdateTime(dt date.DateTime) *AsMenuCreate {
	amc.mutation.SetUpdateTime(dt)
	return amc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (amc *AsMenuCreate) SetNillableUpdateTime(dt *date.DateTime) *AsMenuCreate {
	if dt != nil {
		amc.SetUpdateTime(*dt)
	}
	return amc
}

// SetID sets the "id" field.
func (amc *AsMenuCreate) SetID(i int64) *AsMenuCreate {
	amc.mutation.SetID(i)
	return amc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (amc *AsMenuCreate) SetNillableID(i *int64) *AsMenuCreate {
	if i != nil {
		amc.SetID(*i)
	}
	return amc
}

// SetParentxID sets the "parentx" edge to the AsMenu entity by ID.
func (amc *AsMenuCreate) SetParentxID(id int64) *AsMenuCreate {
	amc.mutation.SetParentxID(id)
	return amc
}

// SetNillableParentxID sets the "parentx" edge to the AsMenu entity by ID if the given value is not nil.
func (amc *AsMenuCreate) SetNillableParentxID(id *int64) *AsMenuCreate {
	if id != nil {
		amc = amc.SetParentxID(*id)
	}
	return amc
}

// SetParentx sets the "parentx" edge to the AsMenu entity.
func (amc *AsMenuCreate) SetParentx(a *AsMenu) *AsMenuCreate {
	return amc.SetParentxID(a.ID)
}

// AddChildrenIDs adds the "childrens" edge to the AsMenu entity by IDs.
func (amc *AsMenuCreate) AddChildrenIDs(ids ...int64) *AsMenuCreate {
	amc.mutation.AddChildrenIDs(ids...)
	return amc
}

// AddChildrens adds the "childrens" edges to the AsMenu entity.
func (amc *AsMenuCreate) AddChildrens(a ...*AsMenu) *AsMenuCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amc.AddChildrenIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the AsRole entity by IDs.
func (amc *AsMenuCreate) AddRoleIDs(ids ...int64) *AsMenuCreate {
	amc.mutation.AddRoleIDs(ids...)
	return amc
}

// AddRoles adds the "roles" edges to the AsRole entity.
func (amc *AsMenuCreate) AddRoles(a ...*AsRole) *AsMenuCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amc.AddRoleIDs(ids...)
}

// Mutation returns the AsMenuMutation object of the builder.
func (amc *AsMenuCreate) Mutation() *AsMenuMutation {
	return amc.mutation
}

// Save creates the AsMenu in the database.
func (amc *AsMenuCreate) Save(ctx context.Context) (*AsMenu, error) {
	var (
		err  error
		node *AsMenu
	)
	amc.defaults()
	if len(amc.hooks) == 0 {
		if err = amc.check(); err != nil {
			return nil, err
		}
		node, err = amc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsMenuMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = amc.check(); err != nil {
				return nil, err
			}
			amc.mutation = mutation
			if node, err = amc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(amc.hooks) - 1; i >= 0; i-- {
			if amc.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = amc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, amc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (amc *AsMenuCreate) SaveX(ctx context.Context) *AsMenu {
	v, err := amc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (amc *AsMenuCreate) Exec(ctx context.Context) error {
	_, err := amc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amc *AsMenuCreate) ExecX(ctx context.Context) {
	if err := amc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amc *AsMenuCreate) defaults() {
	if _, ok := amc.mutation.IsDeleted(); !ok {
		v := asmenu.DefaultIsDeleted
		amc.mutation.SetIsDeleted(v)
	}
	if _, ok := amc.mutation.Status(); !ok {
		v := asmenu.DefaultStatus
		amc.mutation.SetStatus(v)
	}
	if _, ok := amc.mutation.CreateTime(); !ok {
		v := asmenu.DefaultCreateTime()
		amc.mutation.SetCreateTime(v)
	}
	if _, ok := amc.mutation.UpdateTime(); !ok {
		v := asmenu.DefaultUpdateTime()
		amc.mutation.SetUpdateTime(v)
	}
	if _, ok := amc.mutation.ID(); !ok {
		v := asmenu.DefaultID()
		amc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (amc *AsMenuCreate) check() error {
	if _, ok := amc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`schema: missing required field "AsMenu.category"`)}
	}
	if _, ok := amc.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "is_deleted", err: errors.New(`schema: missing required field "AsMenu.is_deleted"`)}
	}
	return nil
}

func (amc *AsMenuCreate) sqlSave(ctx context.Context) (*AsMenu, error) {
	_node, _spec := amc.createSpec()
	if err := sqlgraph.CreateNode(ctx, amc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (amc *AsMenuCreate) createSpec() (*AsMenu, *sqlgraph.CreateSpec) {
	var (
		_node = &AsMenu{config: amc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: asmenu.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asmenu.FieldID,
			},
		}
	)
	if id, ok := amc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := amc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmenu.FieldName,
		})
		_node.Name = value
	}
	if value, ok := amc.mutation.Alias(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmenu.FieldAlias,
		})
		_node.Alias = value
	}
	if value, ok := amc.mutation.Path(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmenu.FieldPath,
		})
		_node.Path = value
	}
	if value, ok := amc.mutation.Icon(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmenu.FieldIcon,
		})
		_node.Icon = value
	}
	if value, ok := amc.mutation.Sort(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmenu.FieldSort,
		})
		_node.Sort = value
	}
	if value, ok := amc.mutation.Category(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmenu.FieldCategory,
		})
		_node.Category = value
	}
	if value, ok := amc.mutation.IsOpen(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmenu.FieldIsOpen,
		})
		_node.IsOpen = value
	}
	if value, ok := amc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmenu.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := amc.mutation.ReformStatus(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmenu.FieldReformStatus,
		})
		_node.ReformStatus = value
	}
	if value, ok := amc.mutation.IsDeleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmenu.FieldIsDeleted,
		})
		_node.IsDeleted = value
	}
	if value, ok := amc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmenu.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := amc.mutation.CreateUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmenu.FieldCreateUser,
		})
		_node.CreateUser = value
	}
	if value, ok := amc.mutation.UpdateUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmenu.FieldUpdateUser,
		})
		_node.UpdateUser = value
	}
	if value, ok := amc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmenu.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := amc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmenu.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if nodes := amc.mutation.ParentxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmenu.ParentxTable,
			Columns: []string{asmenu.ParentxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := amc.mutation.ChildrensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmenu.ChildrensTable,
			Columns: []string{asmenu.ChildrensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := amc.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asmenu.RolesTable,
			Columns: asmenu.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AsMenuCreateBulk is the builder for creating many AsMenu entities in bulk.
type AsMenuCreateBulk struct {
	config
	builders []*AsMenuCreate
}

// Save creates the AsMenu entities in the database.
func (amcb *AsMenuCreateBulk) Save(ctx context.Context) ([]*AsMenu, error) {
	specs := make([]*sqlgraph.CreateSpec, len(amcb.builders))
	nodes := make([]*AsMenu, len(amcb.builders))
	mutators := make([]Mutator, len(amcb.builders))
	for i := range amcb.builders {
		func(i int, root context.Context) {
			builder := amcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AsMenuMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, amcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, amcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, amcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (amcb *AsMenuCreateBulk) SaveX(ctx context.Context) []*AsMenu {
	v, err := amcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (amcb *AsMenuCreateBulk) Exec(ctx context.Context) error {
	_, err := amcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amcb *AsMenuCreateBulk) ExecX(ctx context.Context) {
	if err := amcb.Exec(ctx); err != nil {
		panic(err)
	}
}
