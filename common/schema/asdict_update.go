// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/asdict"
	"orginone/common/schema/predicate"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsDictUpdate is the builder for updating AsDict entities.
type AsDictUpdate struct {
	config
	hooks    []Hook
	mutation *AsDictMutation
}

// Where appends a list predicates to the AsDictUpdate builder.
func (adu *AsDictUpdate) Where(ps ...predicate.AsDict) *AsDictUpdate {
	adu.mutation.Where(ps...)
	return adu
}

// SetParentID sets the "parent_id" field.
func (adu *AsDictUpdate) SetParentID(i int64) *AsDictUpdate {
	adu.mutation.SetParentID(i)
	return adu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (adu *AsDictUpdate) SetNillableParentID(i *int64) *AsDictUpdate {
	if i != nil {
		adu.SetParentID(*i)
	}
	return adu
}

// ClearParentID clears the value of the "parent_id" field.
func (adu *AsDictUpdate) ClearParentID() *AsDictUpdate {
	adu.mutation.ClearParentID()
	return adu
}

// SetCode sets the "code" field.
func (adu *AsDictUpdate) SetCode(s string) *AsDictUpdate {
	adu.mutation.SetCode(s)
	return adu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (adu *AsDictUpdate) SetNillableCode(s *string) *AsDictUpdate {
	if s != nil {
		adu.SetCode(*s)
	}
	return adu
}

// ClearCode clears the value of the "code" field.
func (adu *AsDictUpdate) ClearCode() *AsDictUpdate {
	adu.mutation.ClearCode()
	return adu
}

// SetDictKey sets the "dict_key" field.
func (adu *AsDictUpdate) SetDictKey(i int64) *AsDictUpdate {
	adu.mutation.ResetDictKey()
	adu.mutation.SetDictKey(i)
	return adu
}

// SetNillableDictKey sets the "dict_key" field if the given value is not nil.
func (adu *AsDictUpdate) SetNillableDictKey(i *int64) *AsDictUpdate {
	if i != nil {
		adu.SetDictKey(*i)
	}
	return adu
}

// AddDictKey adds i to the "dict_key" field.
func (adu *AsDictUpdate) AddDictKey(i int64) *AsDictUpdate {
	adu.mutation.AddDictKey(i)
	return adu
}

// ClearDictKey clears the value of the "dict_key" field.
func (adu *AsDictUpdate) ClearDictKey() *AsDictUpdate {
	adu.mutation.ClearDictKey()
	return adu
}

// SetDictValue sets the "dict_value" field.
func (adu *AsDictUpdate) SetDictValue(s string) *AsDictUpdate {
	adu.mutation.SetDictValue(s)
	return adu
}

// SetNillableDictValue sets the "dict_value" field if the given value is not nil.
func (adu *AsDictUpdate) SetNillableDictValue(s *string) *AsDictUpdate {
	if s != nil {
		adu.SetDictValue(*s)
	}
	return adu
}

// ClearDictValue clears the value of the "dict_value" field.
func (adu *AsDictUpdate) ClearDictValue() *AsDictUpdate {
	adu.mutation.ClearDictValue()
	return adu
}

// SetSort sets the "sort" field.
func (adu *AsDictUpdate) SetSort(i int64) *AsDictUpdate {
	adu.mutation.ResetSort()
	adu.mutation.SetSort(i)
	return adu
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (adu *AsDictUpdate) SetNillableSort(i *int64) *AsDictUpdate {
	if i != nil {
		adu.SetSort(*i)
	}
	return adu
}

// AddSort adds i to the "sort" field.
func (adu *AsDictUpdate) AddSort(i int64) *AsDictUpdate {
	adu.mutation.AddSort(i)
	return adu
}

// ClearSort clears the value of the "sort" field.
func (adu *AsDictUpdate) ClearSort() *AsDictUpdate {
	adu.mutation.ClearSort()
	return adu
}

// SetRemark sets the "remark" field.
func (adu *AsDictUpdate) SetRemark(s string) *AsDictUpdate {
	adu.mutation.SetRemark(s)
	return adu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (adu *AsDictUpdate) SetNillableRemark(s *string) *AsDictUpdate {
	if s != nil {
		adu.SetRemark(*s)
	}
	return adu
}

// ClearRemark clears the value of the "remark" field.
func (adu *AsDictUpdate) ClearRemark() *AsDictUpdate {
	adu.mutation.ClearRemark()
	return adu
}

// SetCurrversion sets the "currversion" field.
func (adu *AsDictUpdate) SetCurrversion(i int64) *AsDictUpdate {
	adu.mutation.ResetCurrversion()
	adu.mutation.SetCurrversion(i)
	return adu
}

// SetNillableCurrversion sets the "currversion" field if the given value is not nil.
func (adu *AsDictUpdate) SetNillableCurrversion(i *int64) *AsDictUpdate {
	if i != nil {
		adu.SetCurrversion(*i)
	}
	return adu
}

// AddCurrversion adds i to the "currversion" field.
func (adu *AsDictUpdate) AddCurrversion(i int64) *AsDictUpdate {
	adu.mutation.AddCurrversion(i)
	return adu
}

// ClearCurrversion clears the value of the "currversion" field.
func (adu *AsDictUpdate) ClearCurrversion() *AsDictUpdate {
	adu.mutation.ClearCurrversion()
	return adu
}

// SetVersion sets the "version" field.
func (adu *AsDictUpdate) SetVersion(i int64) *AsDictUpdate {
	adu.mutation.ResetVersion()
	adu.mutation.SetVersion(i)
	return adu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (adu *AsDictUpdate) SetNillableVersion(i *int64) *AsDictUpdate {
	if i != nil {
		adu.SetVersion(*i)
	}
	return adu
}

// AddVersion adds i to the "version" field.
func (adu *AsDictUpdate) AddVersion(i int64) *AsDictUpdate {
	adu.mutation.AddVersion(i)
	return adu
}

// ClearVersion clears the value of the "version" field.
func (adu *AsDictUpdate) ClearVersion() *AsDictUpdate {
	adu.mutation.ClearVersion()
	return adu
}

// SetDictparentID sets the "dictparent_id" field.
func (adu *AsDictUpdate) SetDictparentID(i int64) *AsDictUpdate {
	adu.mutation.ResetDictparentID()
	adu.mutation.SetDictparentID(i)
	return adu
}

// SetNillableDictparentID sets the "dictparent_id" field if the given value is not nil.
func (adu *AsDictUpdate) SetNillableDictparentID(i *int64) *AsDictUpdate {
	if i != nil {
		adu.SetDictparentID(*i)
	}
	return adu
}

// AddDictparentID adds i to the "dictparent_id" field.
func (adu *AsDictUpdate) AddDictparentID(i int64) *AsDictUpdate {
	adu.mutation.AddDictparentID(i)
	return adu
}

// ClearDictparentID clears the value of the "dictparent_id" field.
func (adu *AsDictUpdate) ClearDictparentID() *AsDictUpdate {
	adu.mutation.ClearDictparentID()
	return adu
}

// SetIsDeleted sets the "is_deleted" field.
func (adu *AsDictUpdate) SetIsDeleted(i int64) *AsDictUpdate {
	adu.mutation.ResetIsDeleted()
	adu.mutation.SetIsDeleted(i)
	return adu
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (adu *AsDictUpdate) SetNillableIsDeleted(i *int64) *AsDictUpdate {
	if i != nil {
		adu.SetIsDeleted(*i)
	}
	return adu
}

// AddIsDeleted adds i to the "is_deleted" field.
func (adu *AsDictUpdate) AddIsDeleted(i int64) *AsDictUpdate {
	adu.mutation.AddIsDeleted(i)
	return adu
}

// SetStatus sets the "status" field.
func (adu *AsDictUpdate) SetStatus(i int64) *AsDictUpdate {
	adu.mutation.ResetStatus()
	adu.mutation.SetStatus(i)
	return adu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (adu *AsDictUpdate) SetNillableStatus(i *int64) *AsDictUpdate {
	if i != nil {
		adu.SetStatus(*i)
	}
	return adu
}

// AddStatus adds i to the "status" field.
func (adu *AsDictUpdate) AddStatus(i int64) *AsDictUpdate {
	adu.mutation.AddStatus(i)
	return adu
}

// ClearStatus clears the value of the "status" field.
func (adu *AsDictUpdate) ClearStatus() *AsDictUpdate {
	adu.mutation.ClearStatus()
	return adu
}

// SetCreateUser sets the "create_user" field.
func (adu *AsDictUpdate) SetCreateUser(i int64) *AsDictUpdate {
	adu.mutation.ResetCreateUser()
	adu.mutation.SetCreateUser(i)
	return adu
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (adu *AsDictUpdate) SetNillableCreateUser(i *int64) *AsDictUpdate {
	if i != nil {
		adu.SetCreateUser(*i)
	}
	return adu
}

// AddCreateUser adds i to the "create_user" field.
func (adu *AsDictUpdate) AddCreateUser(i int64) *AsDictUpdate {
	adu.mutation.AddCreateUser(i)
	return adu
}

// ClearCreateUser clears the value of the "create_user" field.
func (adu *AsDictUpdate) ClearCreateUser() *AsDictUpdate {
	adu.mutation.ClearCreateUser()
	return adu
}

// SetUpdateUser sets the "update_user" field.
func (adu *AsDictUpdate) SetUpdateUser(i int64) *AsDictUpdate {
	adu.mutation.ResetUpdateUser()
	adu.mutation.SetUpdateUser(i)
	return adu
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (adu *AsDictUpdate) SetNillableUpdateUser(i *int64) *AsDictUpdate {
	if i != nil {
		adu.SetUpdateUser(*i)
	}
	return adu
}

// AddUpdateUser adds i to the "update_user" field.
func (adu *AsDictUpdate) AddUpdateUser(i int64) *AsDictUpdate {
	adu.mutation.AddUpdateUser(i)
	return adu
}

// ClearUpdateUser clears the value of the "update_user" field.
func (adu *AsDictUpdate) ClearUpdateUser() *AsDictUpdate {
	adu.mutation.ClearUpdateUser()
	return adu
}

// SetUpdateTime sets the "update_time" field.
func (adu *AsDictUpdate) SetUpdateTime(dt date.DateTime) *AsDictUpdate {
	adu.mutation.SetUpdateTime(dt)
	return adu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (adu *AsDictUpdate) ClearUpdateTime() *AsDictUpdate {
	adu.mutation.ClearUpdateTime()
	return adu
}

// SetParentxID sets the "parentx" edge to the AsDict entity by ID.
func (adu *AsDictUpdate) SetParentxID(id int64) *AsDictUpdate {
	adu.mutation.SetParentxID(id)
	return adu
}

// SetNillableParentxID sets the "parentx" edge to the AsDict entity by ID if the given value is not nil.
func (adu *AsDictUpdate) SetNillableParentxID(id *int64) *AsDictUpdate {
	if id != nil {
		adu = adu.SetParentxID(*id)
	}
	return adu
}

// SetParentx sets the "parentx" edge to the AsDict entity.
func (adu *AsDictUpdate) SetParentx(a *AsDict) *AsDictUpdate {
	return adu.SetParentxID(a.ID)
}

// AddChildrenIDs adds the "childrens" edge to the AsDict entity by IDs.
func (adu *AsDictUpdate) AddChildrenIDs(ids ...int64) *AsDictUpdate {
	adu.mutation.AddChildrenIDs(ids...)
	return adu
}

// AddChildrens adds the "childrens" edges to the AsDict entity.
func (adu *AsDictUpdate) AddChildrens(a ...*AsDict) *AsDictUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return adu.AddChildrenIDs(ids...)
}

// Mutation returns the AsDictMutation object of the builder.
func (adu *AsDictUpdate) Mutation() *AsDictMutation {
	return adu.mutation
}

// ClearParentx clears the "parentx" edge to the AsDict entity.
func (adu *AsDictUpdate) ClearParentx() *AsDictUpdate {
	adu.mutation.ClearParentx()
	return adu
}

// ClearChildrens clears all "childrens" edges to the AsDict entity.
func (adu *AsDictUpdate) ClearChildrens() *AsDictUpdate {
	adu.mutation.ClearChildrens()
	return adu
}

// RemoveChildrenIDs removes the "childrens" edge to AsDict entities by IDs.
func (adu *AsDictUpdate) RemoveChildrenIDs(ids ...int64) *AsDictUpdate {
	adu.mutation.RemoveChildrenIDs(ids...)
	return adu
}

// RemoveChildrens removes "childrens" edges to AsDict entities.
func (adu *AsDictUpdate) RemoveChildrens(a ...*AsDict) *AsDictUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return adu.RemoveChildrenIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (adu *AsDictUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	adu.defaults()
	if len(adu.hooks) == 0 {
		affected, err = adu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsDictMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			adu.mutation = mutation
			affected, err = adu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(adu.hooks) - 1; i >= 0; i-- {
			if adu.hooks[i] == nil {
				return 0, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = adu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, adu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (adu *AsDictUpdate) SaveX(ctx context.Context) int {
	affected, err := adu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (adu *AsDictUpdate) Exec(ctx context.Context) error {
	_, err := adu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (adu *AsDictUpdate) ExecX(ctx context.Context) {
	if err := adu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (adu *AsDictUpdate) defaults() {
	if _, ok := adu.mutation.UpdateTime(); !ok && !adu.mutation.UpdateTimeCleared() {
		v := asdict.UpdateDefaultUpdateTime()
		adu.mutation.SetUpdateTime(v)
	}
}

func (adu *AsDictUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asdict.Table,
			Columns: asdict.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asdict.FieldID,
			},
		},
	}
	if ps := adu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := adu.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asdict.FieldCode,
		})
	}
	if adu.mutation.CodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asdict.FieldCode,
		})
	}
	if value, ok := adu.mutation.DictKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asdict.FieldDictKey,
		})
	}
	if value, ok := adu.mutation.AddedDictKey(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asdict.FieldDictKey,
		})
	}
	if adu.mutation.DictKeyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asdict.FieldDictKey,
		})
	}
	if value, ok := adu.mutation.DictValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asdict.FieldDictValue,
		})
	}
	if adu.mutation.DictValueCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asdict.FieldDictValue,
		})
	}
	if value, ok := adu.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asdict.FieldSort,
		})
	}
	if value, ok := adu.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asdict.FieldSort,
		})
	}
	if adu.mutation.SortCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asdict.FieldSort,
		})
	}
	if value, ok := adu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asdict.FieldRemark,
		})
	}
	if adu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asdict.FieldRemark,
		})
	}
	if value, ok := adu.mutation.Currversion(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asdict.FieldCurrversion,
		})
	}
	if value, ok := adu.mutation.AddedCurrversion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asdict.FieldCurrversion,
		})
	}
	if adu.mutation.CurrversionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asdict.FieldCurrversion,
		})
	}
	if value, ok := adu.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asdict.FieldVersion,
		})
	}
	if value, ok := adu.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asdict.FieldVersion,
		})
	}
	if adu.mutation.VersionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asdict.FieldVersion,
		})
	}
	if value, ok := adu.mutation.DictparentID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asdict.FieldDictparentID,
		})
	}
	if value, ok := adu.mutation.AddedDictparentID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asdict.FieldDictparentID,
		})
	}
	if adu.mutation.DictparentIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asdict.FieldDictparentID,
		})
	}
	if value, ok := adu.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asdict.FieldIsDeleted,
		})
	}
	if value, ok := adu.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asdict.FieldIsDeleted,
		})
	}
	if value, ok := adu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asdict.FieldStatus,
		})
	}
	if value, ok := adu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asdict.FieldStatus,
		})
	}
	if adu.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asdict.FieldStatus,
		})
	}
	if value, ok := adu.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asdict.FieldCreateUser,
		})
	}
	if value, ok := adu.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asdict.FieldCreateUser,
		})
	}
	if adu.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asdict.FieldCreateUser,
		})
	}
	if value, ok := adu.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asdict.FieldUpdateUser,
		})
	}
	if value, ok := adu.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asdict.FieldUpdateUser,
		})
	}
	if adu.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asdict.FieldUpdateUser,
		})
	}
	if adu.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asdict.FieldCreateTime,
		})
	}
	if value, ok := adu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asdict.FieldUpdateTime,
		})
	}
	if adu.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asdict.FieldUpdateTime,
		})
	}
	if adu.mutation.ParentxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asdict.ParentxTable,
			Columns: []string{asdict.ParentxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asdict.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := adu.mutation.ParentxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asdict.ParentxTable,
			Columns: []string{asdict.ParentxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asdict.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if adu.mutation.ChildrensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asdict.ChildrensTable,
			Columns: []string{asdict.ChildrensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asdict.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := adu.mutation.RemovedChildrensIDs(); len(nodes) > 0 && !adu.mutation.ChildrensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asdict.ChildrensTable,
			Columns: []string{asdict.ChildrensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asdict.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := adu.mutation.ChildrensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asdict.ChildrensTable,
			Columns: []string{asdict.ChildrensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asdict.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, adu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asdict.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AsDictUpdateOne is the builder for updating a single AsDict entity.
type AsDictUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AsDictMutation
}

// SetParentID sets the "parent_id" field.
func (aduo *AsDictUpdateOne) SetParentID(i int64) *AsDictUpdateOne {
	aduo.mutation.SetParentID(i)
	return aduo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (aduo *AsDictUpdateOne) SetNillableParentID(i *int64) *AsDictUpdateOne {
	if i != nil {
		aduo.SetParentID(*i)
	}
	return aduo
}

// ClearParentID clears the value of the "parent_id" field.
func (aduo *AsDictUpdateOne) ClearParentID() *AsDictUpdateOne {
	aduo.mutation.ClearParentID()
	return aduo
}

// SetCode sets the "code" field.
func (aduo *AsDictUpdateOne) SetCode(s string) *AsDictUpdateOne {
	aduo.mutation.SetCode(s)
	return aduo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (aduo *AsDictUpdateOne) SetNillableCode(s *string) *AsDictUpdateOne {
	if s != nil {
		aduo.SetCode(*s)
	}
	return aduo
}

// ClearCode clears the value of the "code" field.
func (aduo *AsDictUpdateOne) ClearCode() *AsDictUpdateOne {
	aduo.mutation.ClearCode()
	return aduo
}

// SetDictKey sets the "dict_key" field.
func (aduo *AsDictUpdateOne) SetDictKey(i int64) *AsDictUpdateOne {
	aduo.mutation.ResetDictKey()
	aduo.mutation.SetDictKey(i)
	return aduo
}

// SetNillableDictKey sets the "dict_key" field if the given value is not nil.
func (aduo *AsDictUpdateOne) SetNillableDictKey(i *int64) *AsDictUpdateOne {
	if i != nil {
		aduo.SetDictKey(*i)
	}
	return aduo
}

// AddDictKey adds i to the "dict_key" field.
func (aduo *AsDictUpdateOne) AddDictKey(i int64) *AsDictUpdateOne {
	aduo.mutation.AddDictKey(i)
	return aduo
}

// ClearDictKey clears the value of the "dict_key" field.
func (aduo *AsDictUpdateOne) ClearDictKey() *AsDictUpdateOne {
	aduo.mutation.ClearDictKey()
	return aduo
}

// SetDictValue sets the "dict_value" field.
func (aduo *AsDictUpdateOne) SetDictValue(s string) *AsDictUpdateOne {
	aduo.mutation.SetDictValue(s)
	return aduo
}

// SetNillableDictValue sets the "dict_value" field if the given value is not nil.
func (aduo *AsDictUpdateOne) SetNillableDictValue(s *string) *AsDictUpdateOne {
	if s != nil {
		aduo.SetDictValue(*s)
	}
	return aduo
}

// ClearDictValue clears the value of the "dict_value" field.
func (aduo *AsDictUpdateOne) ClearDictValue() *AsDictUpdateOne {
	aduo.mutation.ClearDictValue()
	return aduo
}

// SetSort sets the "sort" field.
func (aduo *AsDictUpdateOne) SetSort(i int64) *AsDictUpdateOne {
	aduo.mutation.ResetSort()
	aduo.mutation.SetSort(i)
	return aduo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (aduo *AsDictUpdateOne) SetNillableSort(i *int64) *AsDictUpdateOne {
	if i != nil {
		aduo.SetSort(*i)
	}
	return aduo
}

// AddSort adds i to the "sort" field.
func (aduo *AsDictUpdateOne) AddSort(i int64) *AsDictUpdateOne {
	aduo.mutation.AddSort(i)
	return aduo
}

// ClearSort clears the value of the "sort" field.
func (aduo *AsDictUpdateOne) ClearSort() *AsDictUpdateOne {
	aduo.mutation.ClearSort()
	return aduo
}

// SetRemark sets the "remark" field.
func (aduo *AsDictUpdateOne) SetRemark(s string) *AsDictUpdateOne {
	aduo.mutation.SetRemark(s)
	return aduo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (aduo *AsDictUpdateOne) SetNillableRemark(s *string) *AsDictUpdateOne {
	if s != nil {
		aduo.SetRemark(*s)
	}
	return aduo
}

// ClearRemark clears the value of the "remark" field.
func (aduo *AsDictUpdateOne) ClearRemark() *AsDictUpdateOne {
	aduo.mutation.ClearRemark()
	return aduo
}

// SetCurrversion sets the "currversion" field.
func (aduo *AsDictUpdateOne) SetCurrversion(i int64) *AsDictUpdateOne {
	aduo.mutation.ResetCurrversion()
	aduo.mutation.SetCurrversion(i)
	return aduo
}

// SetNillableCurrversion sets the "currversion" field if the given value is not nil.
func (aduo *AsDictUpdateOne) SetNillableCurrversion(i *int64) *AsDictUpdateOne {
	if i != nil {
		aduo.SetCurrversion(*i)
	}
	return aduo
}

// AddCurrversion adds i to the "currversion" field.
func (aduo *AsDictUpdateOne) AddCurrversion(i int64) *AsDictUpdateOne {
	aduo.mutation.AddCurrversion(i)
	return aduo
}

// ClearCurrversion clears the value of the "currversion" field.
func (aduo *AsDictUpdateOne) ClearCurrversion() *AsDictUpdateOne {
	aduo.mutation.ClearCurrversion()
	return aduo
}

// SetVersion sets the "version" field.
func (aduo *AsDictUpdateOne) SetVersion(i int64) *AsDictUpdateOne {
	aduo.mutation.ResetVersion()
	aduo.mutation.SetVersion(i)
	return aduo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (aduo *AsDictUpdateOne) SetNillableVersion(i *int64) *AsDictUpdateOne {
	if i != nil {
		aduo.SetVersion(*i)
	}
	return aduo
}

// AddVersion adds i to the "version" field.
func (aduo *AsDictUpdateOne) AddVersion(i int64) *AsDictUpdateOne {
	aduo.mutation.AddVersion(i)
	return aduo
}

// ClearVersion clears the value of the "version" field.
func (aduo *AsDictUpdateOne) ClearVersion() *AsDictUpdateOne {
	aduo.mutation.ClearVersion()
	return aduo
}

// SetDictparentID sets the "dictparent_id" field.
func (aduo *AsDictUpdateOne) SetDictparentID(i int64) *AsDictUpdateOne {
	aduo.mutation.ResetDictparentID()
	aduo.mutation.SetDictparentID(i)
	return aduo
}

// SetNillableDictparentID sets the "dictparent_id" field if the given value is not nil.
func (aduo *AsDictUpdateOne) SetNillableDictparentID(i *int64) *AsDictUpdateOne {
	if i != nil {
		aduo.SetDictparentID(*i)
	}
	return aduo
}

// AddDictparentID adds i to the "dictparent_id" field.
func (aduo *AsDictUpdateOne) AddDictparentID(i int64) *AsDictUpdateOne {
	aduo.mutation.AddDictparentID(i)
	return aduo
}

// ClearDictparentID clears the value of the "dictparent_id" field.
func (aduo *AsDictUpdateOne) ClearDictparentID() *AsDictUpdateOne {
	aduo.mutation.ClearDictparentID()
	return aduo
}

// SetIsDeleted sets the "is_deleted" field.
func (aduo *AsDictUpdateOne) SetIsDeleted(i int64) *AsDictUpdateOne {
	aduo.mutation.ResetIsDeleted()
	aduo.mutation.SetIsDeleted(i)
	return aduo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (aduo *AsDictUpdateOne) SetNillableIsDeleted(i *int64) *AsDictUpdateOne {
	if i != nil {
		aduo.SetIsDeleted(*i)
	}
	return aduo
}

// AddIsDeleted adds i to the "is_deleted" field.
func (aduo *AsDictUpdateOne) AddIsDeleted(i int64) *AsDictUpdateOne {
	aduo.mutation.AddIsDeleted(i)
	return aduo
}

// SetStatus sets the "status" field.
func (aduo *AsDictUpdateOne) SetStatus(i int64) *AsDictUpdateOne {
	aduo.mutation.ResetStatus()
	aduo.mutation.SetStatus(i)
	return aduo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (aduo *AsDictUpdateOne) SetNillableStatus(i *int64) *AsDictUpdateOne {
	if i != nil {
		aduo.SetStatus(*i)
	}
	return aduo
}

// AddStatus adds i to the "status" field.
func (aduo *AsDictUpdateOne) AddStatus(i int64) *AsDictUpdateOne {
	aduo.mutation.AddStatus(i)
	return aduo
}

// ClearStatus clears the value of the "status" field.
func (aduo *AsDictUpdateOne) ClearStatus() *AsDictUpdateOne {
	aduo.mutation.ClearStatus()
	return aduo
}

// SetCreateUser sets the "create_user" field.
func (aduo *AsDictUpdateOne) SetCreateUser(i int64) *AsDictUpdateOne {
	aduo.mutation.ResetCreateUser()
	aduo.mutation.SetCreateUser(i)
	return aduo
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (aduo *AsDictUpdateOne) SetNillableCreateUser(i *int64) *AsDictUpdateOne {
	if i != nil {
		aduo.SetCreateUser(*i)
	}
	return aduo
}

// AddCreateUser adds i to the "create_user" field.
func (aduo *AsDictUpdateOne) AddCreateUser(i int64) *AsDictUpdateOne {
	aduo.mutation.AddCreateUser(i)
	return aduo
}

// ClearCreateUser clears the value of the "create_user" field.
func (aduo *AsDictUpdateOne) ClearCreateUser() *AsDictUpdateOne {
	aduo.mutation.ClearCreateUser()
	return aduo
}

// SetUpdateUser sets the "update_user" field.
func (aduo *AsDictUpdateOne) SetUpdateUser(i int64) *AsDictUpdateOne {
	aduo.mutation.ResetUpdateUser()
	aduo.mutation.SetUpdateUser(i)
	return aduo
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (aduo *AsDictUpdateOne) SetNillableUpdateUser(i *int64) *AsDictUpdateOne {
	if i != nil {
		aduo.SetUpdateUser(*i)
	}
	return aduo
}

// AddUpdateUser adds i to the "update_user" field.
func (aduo *AsDictUpdateOne) AddUpdateUser(i int64) *AsDictUpdateOne {
	aduo.mutation.AddUpdateUser(i)
	return aduo
}

// ClearUpdateUser clears the value of the "update_user" field.
func (aduo *AsDictUpdateOne) ClearUpdateUser() *AsDictUpdateOne {
	aduo.mutation.ClearUpdateUser()
	return aduo
}

// SetUpdateTime sets the "update_time" field.
func (aduo *AsDictUpdateOne) SetUpdateTime(dt date.DateTime) *AsDictUpdateOne {
	aduo.mutation.SetUpdateTime(dt)
	return aduo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (aduo *AsDictUpdateOne) ClearUpdateTime() *AsDictUpdateOne {
	aduo.mutation.ClearUpdateTime()
	return aduo
}

// SetParentxID sets the "parentx" edge to the AsDict entity by ID.
func (aduo *AsDictUpdateOne) SetParentxID(id int64) *AsDictUpdateOne {
	aduo.mutation.SetParentxID(id)
	return aduo
}

// SetNillableParentxID sets the "parentx" edge to the AsDict entity by ID if the given value is not nil.
func (aduo *AsDictUpdateOne) SetNillableParentxID(id *int64) *AsDictUpdateOne {
	if id != nil {
		aduo = aduo.SetParentxID(*id)
	}
	return aduo
}

// SetParentx sets the "parentx" edge to the AsDict entity.
func (aduo *AsDictUpdateOne) SetParentx(a *AsDict) *AsDictUpdateOne {
	return aduo.SetParentxID(a.ID)
}

// AddChildrenIDs adds the "childrens" edge to the AsDict entity by IDs.
func (aduo *AsDictUpdateOne) AddChildrenIDs(ids ...int64) *AsDictUpdateOne {
	aduo.mutation.AddChildrenIDs(ids...)
	return aduo
}

// AddChildrens adds the "childrens" edges to the AsDict entity.
func (aduo *AsDictUpdateOne) AddChildrens(a ...*AsDict) *AsDictUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aduo.AddChildrenIDs(ids...)
}

// Mutation returns the AsDictMutation object of the builder.
func (aduo *AsDictUpdateOne) Mutation() *AsDictMutation {
	return aduo.mutation
}

// ClearParentx clears the "parentx" edge to the AsDict entity.
func (aduo *AsDictUpdateOne) ClearParentx() *AsDictUpdateOne {
	aduo.mutation.ClearParentx()
	return aduo
}

// ClearChildrens clears all "childrens" edges to the AsDict entity.
func (aduo *AsDictUpdateOne) ClearChildrens() *AsDictUpdateOne {
	aduo.mutation.ClearChildrens()
	return aduo
}

// RemoveChildrenIDs removes the "childrens" edge to AsDict entities by IDs.
func (aduo *AsDictUpdateOne) RemoveChildrenIDs(ids ...int64) *AsDictUpdateOne {
	aduo.mutation.RemoveChildrenIDs(ids...)
	return aduo
}

// RemoveChildrens removes "childrens" edges to AsDict entities.
func (aduo *AsDictUpdateOne) RemoveChildrens(a ...*AsDict) *AsDictUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aduo.RemoveChildrenIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aduo *AsDictUpdateOne) Select(field string, fields ...string) *AsDictUpdateOne {
	aduo.fields = append([]string{field}, fields...)
	return aduo
}

// Save executes the query and returns the updated AsDict entity.
func (aduo *AsDictUpdateOne) Save(ctx context.Context) (*AsDict, error) {
	var (
		err  error
		node *AsDict
	)
	aduo.defaults()
	if len(aduo.hooks) == 0 {
		node, err = aduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsDictMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aduo.mutation = mutation
			node, err = aduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aduo.hooks) - 1; i >= 0; i-- {
			if aduo.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = aduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aduo *AsDictUpdateOne) SaveX(ctx context.Context) *AsDict {
	node, err := aduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aduo *AsDictUpdateOne) Exec(ctx context.Context) error {
	_, err := aduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aduo *AsDictUpdateOne) ExecX(ctx context.Context) {
	if err := aduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aduo *AsDictUpdateOne) defaults() {
	if _, ok := aduo.mutation.UpdateTime(); !ok && !aduo.mutation.UpdateTimeCleared() {
		v := asdict.UpdateDefaultUpdateTime()
		aduo.mutation.SetUpdateTime(v)
	}
}

func (aduo *AsDictUpdateOne) sqlSave(ctx context.Context) (_node *AsDict, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asdict.Table,
			Columns: asdict.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asdict.FieldID,
			},
		},
	}
	id, ok := aduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`schema: missing "AsDict.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asdict.FieldID)
		for _, f := range fields {
			if !asdict.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("schema: invalid field %q for query", f)}
			}
			if f != asdict.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aduo.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asdict.FieldCode,
		})
	}
	if aduo.mutation.CodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asdict.FieldCode,
		})
	}
	if value, ok := aduo.mutation.DictKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asdict.FieldDictKey,
		})
	}
	if value, ok := aduo.mutation.AddedDictKey(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asdict.FieldDictKey,
		})
	}
	if aduo.mutation.DictKeyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asdict.FieldDictKey,
		})
	}
	if value, ok := aduo.mutation.DictValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asdict.FieldDictValue,
		})
	}
	if aduo.mutation.DictValueCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asdict.FieldDictValue,
		})
	}
	if value, ok := aduo.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asdict.FieldSort,
		})
	}
	if value, ok := aduo.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asdict.FieldSort,
		})
	}
	if aduo.mutation.SortCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asdict.FieldSort,
		})
	}
	if value, ok := aduo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asdict.FieldRemark,
		})
	}
	if aduo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asdict.FieldRemark,
		})
	}
	if value, ok := aduo.mutation.Currversion(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asdict.FieldCurrversion,
		})
	}
	if value, ok := aduo.mutation.AddedCurrversion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asdict.FieldCurrversion,
		})
	}
	if aduo.mutation.CurrversionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asdict.FieldCurrversion,
		})
	}
	if value, ok := aduo.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asdict.FieldVersion,
		})
	}
	if value, ok := aduo.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asdict.FieldVersion,
		})
	}
	if aduo.mutation.VersionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asdict.FieldVersion,
		})
	}
	if value, ok := aduo.mutation.DictparentID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asdict.FieldDictparentID,
		})
	}
	if value, ok := aduo.mutation.AddedDictparentID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asdict.FieldDictparentID,
		})
	}
	if aduo.mutation.DictparentIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asdict.FieldDictparentID,
		})
	}
	if value, ok := aduo.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asdict.FieldIsDeleted,
		})
	}
	if value, ok := aduo.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asdict.FieldIsDeleted,
		})
	}
	if value, ok := aduo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asdict.FieldStatus,
		})
	}
	if value, ok := aduo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asdict.FieldStatus,
		})
	}
	if aduo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asdict.FieldStatus,
		})
	}
	if value, ok := aduo.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asdict.FieldCreateUser,
		})
	}
	if value, ok := aduo.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asdict.FieldCreateUser,
		})
	}
	if aduo.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asdict.FieldCreateUser,
		})
	}
	if value, ok := aduo.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asdict.FieldUpdateUser,
		})
	}
	if value, ok := aduo.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asdict.FieldUpdateUser,
		})
	}
	if aduo.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asdict.FieldUpdateUser,
		})
	}
	if aduo.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asdict.FieldCreateTime,
		})
	}
	if value, ok := aduo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asdict.FieldUpdateTime,
		})
	}
	if aduo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asdict.FieldUpdateTime,
		})
	}
	if aduo.mutation.ParentxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asdict.ParentxTable,
			Columns: []string{asdict.ParentxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asdict.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aduo.mutation.ParentxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asdict.ParentxTable,
			Columns: []string{asdict.ParentxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asdict.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aduo.mutation.ChildrensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asdict.ChildrensTable,
			Columns: []string{asdict.ChildrensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asdict.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aduo.mutation.RemovedChildrensIDs(); len(nodes) > 0 && !aduo.mutation.ChildrensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asdict.ChildrensTable,
			Columns: []string{asdict.ChildrensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asdict.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aduo.mutation.ChildrensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asdict.ChildrensTable,
			Columns: []string{asdict.ChildrensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asdict.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AsDict{config: aduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asdict.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
