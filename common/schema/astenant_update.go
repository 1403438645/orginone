// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/asgrouptenantrelations"
	"orginone/common/schema/aspropertiesdistribution"
	"orginone/common/schema/astenant"
	"orginone/common/schema/asunit"
	"orginone/common/schema/predicate"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsTenantUpdate is the builder for updating AsTenant entities.
type AsTenantUpdate struct {
	config
	hooks    []Hook
	mutation *AsTenantMutation
}

// Where appends a list predicates to the AsTenantUpdate builder.
func (atu *AsTenantUpdate) Where(ps ...predicate.AsTenant) *AsTenantUpdate {
	atu.mutation.Where(ps...)
	return atu
}

// SetTenantType sets the "tenant_type" field.
func (atu *AsTenantUpdate) SetTenantType(i int64) *AsTenantUpdate {
	atu.mutation.ResetTenantType()
	atu.mutation.SetTenantType(i)
	return atu
}

// AddTenantType adds i to the "tenant_type" field.
func (atu *AsTenantUpdate) AddTenantType(i int64) *AsTenantUpdate {
	atu.mutation.AddTenantType(i)
	return atu
}

// SetTenantName sets the "tenant_name" field.
func (atu *AsTenantUpdate) SetTenantName(s string) *AsTenantUpdate {
	atu.mutation.SetTenantName(s)
	return atu
}

// SetTenantCode sets the "tenant_code" field.
func (atu *AsTenantUpdate) SetTenantCode(s string) *AsTenantUpdate {
	atu.mutation.SetTenantCode(s)
	return atu
}

// SetTheme sets the "theme" field.
func (atu *AsTenantUpdate) SetTheme(s string) *AsTenantUpdate {
	atu.mutation.SetTheme(s)
	return atu
}

// SetNillableTheme sets the "theme" field if the given value is not nil.
func (atu *AsTenantUpdate) SetNillableTheme(s *string) *AsTenantUpdate {
	if s != nil {
		atu.SetTheme(*s)
	}
	return atu
}

// ClearTheme clears the value of the "theme" field.
func (atu *AsTenantUpdate) ClearTheme() *AsTenantUpdate {
	atu.mutation.ClearTheme()
	return atu
}

// SetIsVirtual sets the "is_virtual" field.
func (atu *AsTenantUpdate) SetIsVirtual(i int64) *AsTenantUpdate {
	atu.mutation.ResetIsVirtual()
	atu.mutation.SetIsVirtual(i)
	return atu
}

// SetNillableIsVirtual sets the "is_virtual" field if the given value is not nil.
func (atu *AsTenantUpdate) SetNillableIsVirtual(i *int64) *AsTenantUpdate {
	if i != nil {
		atu.SetIsVirtual(*i)
	}
	return atu
}

// AddIsVirtual adds i to the "is_virtual" field.
func (atu *AsTenantUpdate) AddIsVirtual(i int64) *AsTenantUpdate {
	atu.mutation.AddIsVirtual(i)
	return atu
}

// SetIsDeleted sets the "is_deleted" field.
func (atu *AsTenantUpdate) SetIsDeleted(i int64) *AsTenantUpdate {
	atu.mutation.ResetIsDeleted()
	atu.mutation.SetIsDeleted(i)
	return atu
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (atu *AsTenantUpdate) SetNillableIsDeleted(i *int64) *AsTenantUpdate {
	if i != nil {
		atu.SetIsDeleted(*i)
	}
	return atu
}

// AddIsDeleted adds i to the "is_deleted" field.
func (atu *AsTenantUpdate) AddIsDeleted(i int64) *AsTenantUpdate {
	atu.mutation.AddIsDeleted(i)
	return atu
}

// SetStatus sets the "status" field.
func (atu *AsTenantUpdate) SetStatus(i int64) *AsTenantUpdate {
	atu.mutation.ResetStatus()
	atu.mutation.SetStatus(i)
	return atu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (atu *AsTenantUpdate) SetNillableStatus(i *int64) *AsTenantUpdate {
	if i != nil {
		atu.SetStatus(*i)
	}
	return atu
}

// AddStatus adds i to the "status" field.
func (atu *AsTenantUpdate) AddStatus(i int64) *AsTenantUpdate {
	atu.mutation.AddStatus(i)
	return atu
}

// ClearStatus clears the value of the "status" field.
func (atu *AsTenantUpdate) ClearStatus() *AsTenantUpdate {
	atu.mutation.ClearStatus()
	return atu
}

// SetCreateUser sets the "create_user" field.
func (atu *AsTenantUpdate) SetCreateUser(i int64) *AsTenantUpdate {
	atu.mutation.ResetCreateUser()
	atu.mutation.SetCreateUser(i)
	return atu
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (atu *AsTenantUpdate) SetNillableCreateUser(i *int64) *AsTenantUpdate {
	if i != nil {
		atu.SetCreateUser(*i)
	}
	return atu
}

// AddCreateUser adds i to the "create_user" field.
func (atu *AsTenantUpdate) AddCreateUser(i int64) *AsTenantUpdate {
	atu.mutation.AddCreateUser(i)
	return atu
}

// ClearCreateUser clears the value of the "create_user" field.
func (atu *AsTenantUpdate) ClearCreateUser() *AsTenantUpdate {
	atu.mutation.ClearCreateUser()
	return atu
}

// SetUpdateUser sets the "update_user" field.
func (atu *AsTenantUpdate) SetUpdateUser(i int64) *AsTenantUpdate {
	atu.mutation.ResetUpdateUser()
	atu.mutation.SetUpdateUser(i)
	return atu
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (atu *AsTenantUpdate) SetNillableUpdateUser(i *int64) *AsTenantUpdate {
	if i != nil {
		atu.SetUpdateUser(*i)
	}
	return atu
}

// AddUpdateUser adds i to the "update_user" field.
func (atu *AsTenantUpdate) AddUpdateUser(i int64) *AsTenantUpdate {
	atu.mutation.AddUpdateUser(i)
	return atu
}

// ClearUpdateUser clears the value of the "update_user" field.
func (atu *AsTenantUpdate) ClearUpdateUser() *AsTenantUpdate {
	atu.mutation.ClearUpdateUser()
	return atu
}

// SetUpdateTime sets the "update_time" field.
func (atu *AsTenantUpdate) SetUpdateTime(dt date.DateTime) *AsTenantUpdate {
	atu.mutation.SetUpdateTime(dt)
	return atu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (atu *AsTenantUpdate) ClearUpdateTime() *AsTenantUpdate {
	atu.mutation.ClearUpdateTime()
	return atu
}

// SetUnitID sets the "unit" edge to the AsUnit entity by ID.
func (atu *AsTenantUpdate) SetUnitID(id int64) *AsTenantUpdate {
	atu.mutation.SetUnitID(id)
	return atu
}

// SetNillableUnitID sets the "unit" edge to the AsUnit entity by ID if the given value is not nil.
func (atu *AsTenantUpdate) SetNillableUnitID(id *int64) *AsTenantUpdate {
	if id != nil {
		atu = atu.SetUnitID(*id)
	}
	return atu
}

// SetUnit sets the "unit" edge to the AsUnit entity.
func (atu *AsTenantUpdate) SetUnit(a *AsUnit) *AsTenantUpdate {
	return atu.SetUnitID(a.ID)
}

// AddAllGroupIDs adds the "allGroups" edge to the AsGroupTenantRelations entity by IDs.
func (atu *AsTenantUpdate) AddAllGroupIDs(ids ...int64) *AsTenantUpdate {
	atu.mutation.AddAllGroupIDs(ids...)
	return atu
}

// AddAllGroups adds the "allGroups" edges to the AsGroupTenantRelations entity.
func (atu *AsTenantUpdate) AddAllGroups(a ...*AsGroupTenantRelations) *AsTenantUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return atu.AddAllGroupIDs(ids...)
}

// AddAllpropertyIDs adds the "allproperties" edge to the AsPropertiesDistribution entity by IDs.
func (atu *AsTenantUpdate) AddAllpropertyIDs(ids ...int64) *AsTenantUpdate {
	atu.mutation.AddAllpropertyIDs(ids...)
	return atu
}

// AddAllproperties adds the "allproperties" edges to the AsPropertiesDistribution entity.
func (atu *AsTenantUpdate) AddAllproperties(a ...*AsPropertiesDistribution) *AsTenantUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return atu.AddAllpropertyIDs(ids...)
}

// Mutation returns the AsTenantMutation object of the builder.
func (atu *AsTenantUpdate) Mutation() *AsTenantMutation {
	return atu.mutation
}

// ClearUnit clears the "unit" edge to the AsUnit entity.
func (atu *AsTenantUpdate) ClearUnit() *AsTenantUpdate {
	atu.mutation.ClearUnit()
	return atu
}

// ClearAllGroups clears all "allGroups" edges to the AsGroupTenantRelations entity.
func (atu *AsTenantUpdate) ClearAllGroups() *AsTenantUpdate {
	atu.mutation.ClearAllGroups()
	return atu
}

// RemoveAllGroupIDs removes the "allGroups" edge to AsGroupTenantRelations entities by IDs.
func (atu *AsTenantUpdate) RemoveAllGroupIDs(ids ...int64) *AsTenantUpdate {
	atu.mutation.RemoveAllGroupIDs(ids...)
	return atu
}

// RemoveAllGroups removes "allGroups" edges to AsGroupTenantRelations entities.
func (atu *AsTenantUpdate) RemoveAllGroups(a ...*AsGroupTenantRelations) *AsTenantUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return atu.RemoveAllGroupIDs(ids...)
}

// ClearAllproperties clears all "allproperties" edges to the AsPropertiesDistribution entity.
func (atu *AsTenantUpdate) ClearAllproperties() *AsTenantUpdate {
	atu.mutation.ClearAllproperties()
	return atu
}

// RemoveAllpropertyIDs removes the "allproperties" edge to AsPropertiesDistribution entities by IDs.
func (atu *AsTenantUpdate) RemoveAllpropertyIDs(ids ...int64) *AsTenantUpdate {
	atu.mutation.RemoveAllpropertyIDs(ids...)
	return atu
}

// RemoveAllproperties removes "allproperties" edges to AsPropertiesDistribution entities.
func (atu *AsTenantUpdate) RemoveAllproperties(a ...*AsPropertiesDistribution) *AsTenantUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return atu.RemoveAllpropertyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (atu *AsTenantUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	atu.defaults()
	if len(atu.hooks) == 0 {
		affected, err = atu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsTenantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			atu.mutation = mutation
			affected, err = atu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(atu.hooks) - 1; i >= 0; i-- {
			if atu.hooks[i] == nil {
				return 0, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = atu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, atu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (atu *AsTenantUpdate) SaveX(ctx context.Context) int {
	affected, err := atu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (atu *AsTenantUpdate) Exec(ctx context.Context) error {
	_, err := atu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atu *AsTenantUpdate) ExecX(ctx context.Context) {
	if err := atu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atu *AsTenantUpdate) defaults() {
	if _, ok := atu.mutation.UpdateTime(); !ok && !atu.mutation.UpdateTimeCleared() {
		v := astenant.UpdateDefaultUpdateTime()
		atu.mutation.SetUpdateTime(v)
	}
}

func (atu *AsTenantUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   astenant.Table,
			Columns: astenant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: astenant.FieldID,
			},
		},
	}
	if ps := atu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atu.mutation.TenantType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenant.FieldTenantType,
		})
	}
	if value, ok := atu.mutation.AddedTenantType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenant.FieldTenantType,
		})
	}
	if value, ok := atu.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: astenant.FieldTenantName,
		})
	}
	if value, ok := atu.mutation.TenantCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: astenant.FieldTenantCode,
		})
	}
	if value, ok := atu.mutation.Theme(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: astenant.FieldTheme,
		})
	}
	if atu.mutation.ThemeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: astenant.FieldTheme,
		})
	}
	if value, ok := atu.mutation.IsVirtual(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenant.FieldIsVirtual,
		})
	}
	if value, ok := atu.mutation.AddedIsVirtual(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenant.FieldIsVirtual,
		})
	}
	if value, ok := atu.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenant.FieldIsDeleted,
		})
	}
	if value, ok := atu.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenant.FieldIsDeleted,
		})
	}
	if value, ok := atu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenant.FieldStatus,
		})
	}
	if value, ok := atu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenant.FieldStatus,
		})
	}
	if atu.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: astenant.FieldStatus,
		})
	}
	if value, ok := atu.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenant.FieldCreateUser,
		})
	}
	if value, ok := atu.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenant.FieldCreateUser,
		})
	}
	if atu.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: astenant.FieldCreateUser,
		})
	}
	if value, ok := atu.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenant.FieldUpdateUser,
		})
	}
	if value, ok := atu.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenant.FieldUpdateUser,
		})
	}
	if atu.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: astenant.FieldUpdateUser,
		})
	}
	if atu.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: astenant.FieldCreateTime,
		})
	}
	if value, ok := atu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: astenant.FieldUpdateTime,
		})
	}
	if atu.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: astenant.FieldUpdateTime,
		})
	}
	if atu.mutation.UnitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   astenant.UnitTable,
			Columns: []string{astenant.UnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asunit.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.UnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   astenant.UnitTable,
			Columns: []string{astenant.UnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asunit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.AllGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   astenant.AllGroupsTable,
			Columns: []string{astenant.AllGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asgrouptenantrelations.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.RemovedAllGroupsIDs(); len(nodes) > 0 && !atu.mutation.AllGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   astenant.AllGroupsTable,
			Columns: []string{astenant.AllGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asgrouptenantrelations.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.AllGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   astenant.AllGroupsTable,
			Columns: []string{astenant.AllGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asgrouptenantrelations.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.AllpropertiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   astenant.AllpropertiesTable,
			Columns: []string{astenant.AllpropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: aspropertiesdistribution.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.RemovedAllpropertiesIDs(); len(nodes) > 0 && !atu.mutation.AllpropertiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   astenant.AllpropertiesTable,
			Columns: []string{astenant.AllpropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: aspropertiesdistribution.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.AllpropertiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   astenant.AllpropertiesTable,
			Columns: []string{astenant.AllpropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: aspropertiesdistribution.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, atu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{astenant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AsTenantUpdateOne is the builder for updating a single AsTenant entity.
type AsTenantUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AsTenantMutation
}

// SetTenantType sets the "tenant_type" field.
func (atuo *AsTenantUpdateOne) SetTenantType(i int64) *AsTenantUpdateOne {
	atuo.mutation.ResetTenantType()
	atuo.mutation.SetTenantType(i)
	return atuo
}

// AddTenantType adds i to the "tenant_type" field.
func (atuo *AsTenantUpdateOne) AddTenantType(i int64) *AsTenantUpdateOne {
	atuo.mutation.AddTenantType(i)
	return atuo
}

// SetTenantName sets the "tenant_name" field.
func (atuo *AsTenantUpdateOne) SetTenantName(s string) *AsTenantUpdateOne {
	atuo.mutation.SetTenantName(s)
	return atuo
}

// SetTenantCode sets the "tenant_code" field.
func (atuo *AsTenantUpdateOne) SetTenantCode(s string) *AsTenantUpdateOne {
	atuo.mutation.SetTenantCode(s)
	return atuo
}

// SetTheme sets the "theme" field.
func (atuo *AsTenantUpdateOne) SetTheme(s string) *AsTenantUpdateOne {
	atuo.mutation.SetTheme(s)
	return atuo
}

// SetNillableTheme sets the "theme" field if the given value is not nil.
func (atuo *AsTenantUpdateOne) SetNillableTheme(s *string) *AsTenantUpdateOne {
	if s != nil {
		atuo.SetTheme(*s)
	}
	return atuo
}

// ClearTheme clears the value of the "theme" field.
func (atuo *AsTenantUpdateOne) ClearTheme() *AsTenantUpdateOne {
	atuo.mutation.ClearTheme()
	return atuo
}

// SetIsVirtual sets the "is_virtual" field.
func (atuo *AsTenantUpdateOne) SetIsVirtual(i int64) *AsTenantUpdateOne {
	atuo.mutation.ResetIsVirtual()
	atuo.mutation.SetIsVirtual(i)
	return atuo
}

// SetNillableIsVirtual sets the "is_virtual" field if the given value is not nil.
func (atuo *AsTenantUpdateOne) SetNillableIsVirtual(i *int64) *AsTenantUpdateOne {
	if i != nil {
		atuo.SetIsVirtual(*i)
	}
	return atuo
}

// AddIsVirtual adds i to the "is_virtual" field.
func (atuo *AsTenantUpdateOne) AddIsVirtual(i int64) *AsTenantUpdateOne {
	atuo.mutation.AddIsVirtual(i)
	return atuo
}

// SetIsDeleted sets the "is_deleted" field.
func (atuo *AsTenantUpdateOne) SetIsDeleted(i int64) *AsTenantUpdateOne {
	atuo.mutation.ResetIsDeleted()
	atuo.mutation.SetIsDeleted(i)
	return atuo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (atuo *AsTenantUpdateOne) SetNillableIsDeleted(i *int64) *AsTenantUpdateOne {
	if i != nil {
		atuo.SetIsDeleted(*i)
	}
	return atuo
}

// AddIsDeleted adds i to the "is_deleted" field.
func (atuo *AsTenantUpdateOne) AddIsDeleted(i int64) *AsTenantUpdateOne {
	atuo.mutation.AddIsDeleted(i)
	return atuo
}

// SetStatus sets the "status" field.
func (atuo *AsTenantUpdateOne) SetStatus(i int64) *AsTenantUpdateOne {
	atuo.mutation.ResetStatus()
	atuo.mutation.SetStatus(i)
	return atuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (atuo *AsTenantUpdateOne) SetNillableStatus(i *int64) *AsTenantUpdateOne {
	if i != nil {
		atuo.SetStatus(*i)
	}
	return atuo
}

// AddStatus adds i to the "status" field.
func (atuo *AsTenantUpdateOne) AddStatus(i int64) *AsTenantUpdateOne {
	atuo.mutation.AddStatus(i)
	return atuo
}

// ClearStatus clears the value of the "status" field.
func (atuo *AsTenantUpdateOne) ClearStatus() *AsTenantUpdateOne {
	atuo.mutation.ClearStatus()
	return atuo
}

// SetCreateUser sets the "create_user" field.
func (atuo *AsTenantUpdateOne) SetCreateUser(i int64) *AsTenantUpdateOne {
	atuo.mutation.ResetCreateUser()
	atuo.mutation.SetCreateUser(i)
	return atuo
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (atuo *AsTenantUpdateOne) SetNillableCreateUser(i *int64) *AsTenantUpdateOne {
	if i != nil {
		atuo.SetCreateUser(*i)
	}
	return atuo
}

// AddCreateUser adds i to the "create_user" field.
func (atuo *AsTenantUpdateOne) AddCreateUser(i int64) *AsTenantUpdateOne {
	atuo.mutation.AddCreateUser(i)
	return atuo
}

// ClearCreateUser clears the value of the "create_user" field.
func (atuo *AsTenantUpdateOne) ClearCreateUser() *AsTenantUpdateOne {
	atuo.mutation.ClearCreateUser()
	return atuo
}

// SetUpdateUser sets the "update_user" field.
func (atuo *AsTenantUpdateOne) SetUpdateUser(i int64) *AsTenantUpdateOne {
	atuo.mutation.ResetUpdateUser()
	atuo.mutation.SetUpdateUser(i)
	return atuo
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (atuo *AsTenantUpdateOne) SetNillableUpdateUser(i *int64) *AsTenantUpdateOne {
	if i != nil {
		atuo.SetUpdateUser(*i)
	}
	return atuo
}

// AddUpdateUser adds i to the "update_user" field.
func (atuo *AsTenantUpdateOne) AddUpdateUser(i int64) *AsTenantUpdateOne {
	atuo.mutation.AddUpdateUser(i)
	return atuo
}

// ClearUpdateUser clears the value of the "update_user" field.
func (atuo *AsTenantUpdateOne) ClearUpdateUser() *AsTenantUpdateOne {
	atuo.mutation.ClearUpdateUser()
	return atuo
}

// SetUpdateTime sets the "update_time" field.
func (atuo *AsTenantUpdateOne) SetUpdateTime(dt date.DateTime) *AsTenantUpdateOne {
	atuo.mutation.SetUpdateTime(dt)
	return atuo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (atuo *AsTenantUpdateOne) ClearUpdateTime() *AsTenantUpdateOne {
	atuo.mutation.ClearUpdateTime()
	return atuo
}

// SetUnitID sets the "unit" edge to the AsUnit entity by ID.
func (atuo *AsTenantUpdateOne) SetUnitID(id int64) *AsTenantUpdateOne {
	atuo.mutation.SetUnitID(id)
	return atuo
}

// SetNillableUnitID sets the "unit" edge to the AsUnit entity by ID if the given value is not nil.
func (atuo *AsTenantUpdateOne) SetNillableUnitID(id *int64) *AsTenantUpdateOne {
	if id != nil {
		atuo = atuo.SetUnitID(*id)
	}
	return atuo
}

// SetUnit sets the "unit" edge to the AsUnit entity.
func (atuo *AsTenantUpdateOne) SetUnit(a *AsUnit) *AsTenantUpdateOne {
	return atuo.SetUnitID(a.ID)
}

// AddAllGroupIDs adds the "allGroups" edge to the AsGroupTenantRelations entity by IDs.
func (atuo *AsTenantUpdateOne) AddAllGroupIDs(ids ...int64) *AsTenantUpdateOne {
	atuo.mutation.AddAllGroupIDs(ids...)
	return atuo
}

// AddAllGroups adds the "allGroups" edges to the AsGroupTenantRelations entity.
func (atuo *AsTenantUpdateOne) AddAllGroups(a ...*AsGroupTenantRelations) *AsTenantUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return atuo.AddAllGroupIDs(ids...)
}

// AddAllpropertyIDs adds the "allproperties" edge to the AsPropertiesDistribution entity by IDs.
func (atuo *AsTenantUpdateOne) AddAllpropertyIDs(ids ...int64) *AsTenantUpdateOne {
	atuo.mutation.AddAllpropertyIDs(ids...)
	return atuo
}

// AddAllproperties adds the "allproperties" edges to the AsPropertiesDistribution entity.
func (atuo *AsTenantUpdateOne) AddAllproperties(a ...*AsPropertiesDistribution) *AsTenantUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return atuo.AddAllpropertyIDs(ids...)
}

// Mutation returns the AsTenantMutation object of the builder.
func (atuo *AsTenantUpdateOne) Mutation() *AsTenantMutation {
	return atuo.mutation
}

// ClearUnit clears the "unit" edge to the AsUnit entity.
func (atuo *AsTenantUpdateOne) ClearUnit() *AsTenantUpdateOne {
	atuo.mutation.ClearUnit()
	return atuo
}

// ClearAllGroups clears all "allGroups" edges to the AsGroupTenantRelations entity.
func (atuo *AsTenantUpdateOne) ClearAllGroups() *AsTenantUpdateOne {
	atuo.mutation.ClearAllGroups()
	return atuo
}

// RemoveAllGroupIDs removes the "allGroups" edge to AsGroupTenantRelations entities by IDs.
func (atuo *AsTenantUpdateOne) RemoveAllGroupIDs(ids ...int64) *AsTenantUpdateOne {
	atuo.mutation.RemoveAllGroupIDs(ids...)
	return atuo
}

// RemoveAllGroups removes "allGroups" edges to AsGroupTenantRelations entities.
func (atuo *AsTenantUpdateOne) RemoveAllGroups(a ...*AsGroupTenantRelations) *AsTenantUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return atuo.RemoveAllGroupIDs(ids...)
}

// ClearAllproperties clears all "allproperties" edges to the AsPropertiesDistribution entity.
func (atuo *AsTenantUpdateOne) ClearAllproperties() *AsTenantUpdateOne {
	atuo.mutation.ClearAllproperties()
	return atuo
}

// RemoveAllpropertyIDs removes the "allproperties" edge to AsPropertiesDistribution entities by IDs.
func (atuo *AsTenantUpdateOne) RemoveAllpropertyIDs(ids ...int64) *AsTenantUpdateOne {
	atuo.mutation.RemoveAllpropertyIDs(ids...)
	return atuo
}

// RemoveAllproperties removes "allproperties" edges to AsPropertiesDistribution entities.
func (atuo *AsTenantUpdateOne) RemoveAllproperties(a ...*AsPropertiesDistribution) *AsTenantUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return atuo.RemoveAllpropertyIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (atuo *AsTenantUpdateOne) Select(field string, fields ...string) *AsTenantUpdateOne {
	atuo.fields = append([]string{field}, fields...)
	return atuo
}

// Save executes the query and returns the updated AsTenant entity.
func (atuo *AsTenantUpdateOne) Save(ctx context.Context) (*AsTenant, error) {
	var (
		err  error
		node *AsTenant
	)
	atuo.defaults()
	if len(atuo.hooks) == 0 {
		node, err = atuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsTenantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			atuo.mutation = mutation
			node, err = atuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(atuo.hooks) - 1; i >= 0; i-- {
			if atuo.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = atuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, atuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (atuo *AsTenantUpdateOne) SaveX(ctx context.Context) *AsTenant {
	node, err := atuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (atuo *AsTenantUpdateOne) Exec(ctx context.Context) error {
	_, err := atuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atuo *AsTenantUpdateOne) ExecX(ctx context.Context) {
	if err := atuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atuo *AsTenantUpdateOne) defaults() {
	if _, ok := atuo.mutation.UpdateTime(); !ok && !atuo.mutation.UpdateTimeCleared() {
		v := astenant.UpdateDefaultUpdateTime()
		atuo.mutation.SetUpdateTime(v)
	}
}

func (atuo *AsTenantUpdateOne) sqlSave(ctx context.Context) (_node *AsTenant, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   astenant.Table,
			Columns: astenant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: astenant.FieldID,
			},
		},
	}
	id, ok := atuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`schema: missing "AsTenant.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := atuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, astenant.FieldID)
		for _, f := range fields {
			if !astenant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("schema: invalid field %q for query", f)}
			}
			if f != astenant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := atuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atuo.mutation.TenantType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenant.FieldTenantType,
		})
	}
	if value, ok := atuo.mutation.AddedTenantType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenant.FieldTenantType,
		})
	}
	if value, ok := atuo.mutation.TenantName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: astenant.FieldTenantName,
		})
	}
	if value, ok := atuo.mutation.TenantCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: astenant.FieldTenantCode,
		})
	}
	if value, ok := atuo.mutation.Theme(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: astenant.FieldTheme,
		})
	}
	if atuo.mutation.ThemeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: astenant.FieldTheme,
		})
	}
	if value, ok := atuo.mutation.IsVirtual(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenant.FieldIsVirtual,
		})
	}
	if value, ok := atuo.mutation.AddedIsVirtual(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenant.FieldIsVirtual,
		})
	}
	if value, ok := atuo.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenant.FieldIsDeleted,
		})
	}
	if value, ok := atuo.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenant.FieldIsDeleted,
		})
	}
	if value, ok := atuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenant.FieldStatus,
		})
	}
	if value, ok := atuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenant.FieldStatus,
		})
	}
	if atuo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: astenant.FieldStatus,
		})
	}
	if value, ok := atuo.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenant.FieldCreateUser,
		})
	}
	if value, ok := atuo.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenant.FieldCreateUser,
		})
	}
	if atuo.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: astenant.FieldCreateUser,
		})
	}
	if value, ok := atuo.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenant.FieldUpdateUser,
		})
	}
	if value, ok := atuo.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenant.FieldUpdateUser,
		})
	}
	if atuo.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: astenant.FieldUpdateUser,
		})
	}
	if atuo.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: astenant.FieldCreateTime,
		})
	}
	if value, ok := atuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: astenant.FieldUpdateTime,
		})
	}
	if atuo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: astenant.FieldUpdateTime,
		})
	}
	if atuo.mutation.UnitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   astenant.UnitTable,
			Columns: []string{astenant.UnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asunit.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.UnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   astenant.UnitTable,
			Columns: []string{astenant.UnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asunit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.AllGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   astenant.AllGroupsTable,
			Columns: []string{astenant.AllGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asgrouptenantrelations.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.RemovedAllGroupsIDs(); len(nodes) > 0 && !atuo.mutation.AllGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   astenant.AllGroupsTable,
			Columns: []string{astenant.AllGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asgrouptenantrelations.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.AllGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   astenant.AllGroupsTable,
			Columns: []string{astenant.AllGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asgrouptenantrelations.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.AllpropertiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   astenant.AllpropertiesTable,
			Columns: []string{astenant.AllpropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: aspropertiesdistribution.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.RemovedAllpropertiesIDs(); len(nodes) > 0 && !atuo.mutation.AllpropertiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   astenant.AllpropertiesTable,
			Columns: []string{astenant.AllpropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: aspropertiesdistribution.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.AllpropertiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   astenant.AllpropertiesTable,
			Columns: []string{astenant.AllpropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: aspropertiesdistribution.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AsTenant{config: atuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, atuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{astenant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
