// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/asinneragency"
	"orginone/common/schema/asjob"
	"orginone/common/schema/asmarketapprole"
	"orginone/common/schema/asmarketroledistribution"
	"orginone/common/schema/asuser"
	"orginone/common/schema/predicate"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsMarketRoleDistributionUpdate is the builder for updating AsMarketRoleDistribution entities.
type AsMarketRoleDistributionUpdate struct {
	config
	hooks    []Hook
	mutation *AsMarketRoleDistributionMutation
}

// Where appends a list predicates to the AsMarketRoleDistributionUpdate builder.
func (amrdu *AsMarketRoleDistributionUpdate) Where(ps ...predicate.AsMarketRoleDistribution) *AsMarketRoleDistributionUpdate {
	amrdu.mutation.Where(ps...)
	return amrdu
}

// SetRoleID sets the "role_id" field.
func (amrdu *AsMarketRoleDistributionUpdate) SetRoleID(i int64) *AsMarketRoleDistributionUpdate {
	amrdu.mutation.SetRoleID(i)
	return amrdu
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (amrdu *AsMarketRoleDistributionUpdate) SetNillableRoleID(i *int64) *AsMarketRoleDistributionUpdate {
	if i != nil {
		amrdu.SetRoleID(*i)
	}
	return amrdu
}

// ClearRoleID clears the value of the "role_id" field.
func (amrdu *AsMarketRoleDistributionUpdate) ClearRoleID() *AsMarketRoleDistributionUpdate {
	amrdu.mutation.ClearRoleID()
	return amrdu
}

// SetUserID sets the "user_id" field.
func (amrdu *AsMarketRoleDistributionUpdate) SetUserID(i int64) *AsMarketRoleDistributionUpdate {
	amrdu.mutation.SetUserID(i)
	return amrdu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (amrdu *AsMarketRoleDistributionUpdate) SetNillableUserID(i *int64) *AsMarketRoleDistributionUpdate {
	if i != nil {
		amrdu.SetUserID(*i)
	}
	return amrdu
}

// ClearUserID clears the value of the "user_id" field.
func (amrdu *AsMarketRoleDistributionUpdate) ClearUserID() *AsMarketRoleDistributionUpdate {
	amrdu.mutation.ClearUserID()
	return amrdu
}

// SetAgencyID sets the "agency_id" field.
func (amrdu *AsMarketRoleDistributionUpdate) SetAgencyID(i int64) *AsMarketRoleDistributionUpdate {
	amrdu.mutation.SetAgencyID(i)
	return amrdu
}

// SetNillableAgencyID sets the "agency_id" field if the given value is not nil.
func (amrdu *AsMarketRoleDistributionUpdate) SetNillableAgencyID(i *int64) *AsMarketRoleDistributionUpdate {
	if i != nil {
		amrdu.SetAgencyID(*i)
	}
	return amrdu
}

// ClearAgencyID clears the value of the "agency_id" field.
func (amrdu *AsMarketRoleDistributionUpdate) ClearAgencyID() *AsMarketRoleDistributionUpdate {
	amrdu.mutation.ClearAgencyID()
	return amrdu
}

// SetJobID sets the "job_id" field.
func (amrdu *AsMarketRoleDistributionUpdate) SetJobID(i int64) *AsMarketRoleDistributionUpdate {
	amrdu.mutation.SetJobID(i)
	return amrdu
}

// SetNillableJobID sets the "job_id" field if the given value is not nil.
func (amrdu *AsMarketRoleDistributionUpdate) SetNillableJobID(i *int64) *AsMarketRoleDistributionUpdate {
	if i != nil {
		amrdu.SetJobID(*i)
	}
	return amrdu
}

// ClearJobID clears the value of the "job_id" field.
func (amrdu *AsMarketRoleDistributionUpdate) ClearJobID() *AsMarketRoleDistributionUpdate {
	amrdu.mutation.ClearJobID()
	return amrdu
}

// SetTenantCode sets the "tenant_code" field.
func (amrdu *AsMarketRoleDistributionUpdate) SetTenantCode(s string) *AsMarketRoleDistributionUpdate {
	amrdu.mutation.SetTenantCode(s)
	return amrdu
}

// SetNillableTenantCode sets the "tenant_code" field if the given value is not nil.
func (amrdu *AsMarketRoleDistributionUpdate) SetNillableTenantCode(s *string) *AsMarketRoleDistributionUpdate {
	if s != nil {
		amrdu.SetTenantCode(*s)
	}
	return amrdu
}

// ClearTenantCode clears the value of the "tenant_code" field.
func (amrdu *AsMarketRoleDistributionUpdate) ClearTenantCode() *AsMarketRoleDistributionUpdate {
	amrdu.mutation.ClearTenantCode()
	return amrdu
}

// SetIsDeleted sets the "is_deleted" field.
func (amrdu *AsMarketRoleDistributionUpdate) SetIsDeleted(i int64) *AsMarketRoleDistributionUpdate {
	amrdu.mutation.ResetIsDeleted()
	amrdu.mutation.SetIsDeleted(i)
	return amrdu
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (amrdu *AsMarketRoleDistributionUpdate) SetNillableIsDeleted(i *int64) *AsMarketRoleDistributionUpdate {
	if i != nil {
		amrdu.SetIsDeleted(*i)
	}
	return amrdu
}

// AddIsDeleted adds i to the "is_deleted" field.
func (amrdu *AsMarketRoleDistributionUpdate) AddIsDeleted(i int64) *AsMarketRoleDistributionUpdate {
	amrdu.mutation.AddIsDeleted(i)
	return amrdu
}

// SetStatus sets the "status" field.
func (amrdu *AsMarketRoleDistributionUpdate) SetStatus(i int64) *AsMarketRoleDistributionUpdate {
	amrdu.mutation.ResetStatus()
	amrdu.mutation.SetStatus(i)
	return amrdu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (amrdu *AsMarketRoleDistributionUpdate) SetNillableStatus(i *int64) *AsMarketRoleDistributionUpdate {
	if i != nil {
		amrdu.SetStatus(*i)
	}
	return amrdu
}

// AddStatus adds i to the "status" field.
func (amrdu *AsMarketRoleDistributionUpdate) AddStatus(i int64) *AsMarketRoleDistributionUpdate {
	amrdu.mutation.AddStatus(i)
	return amrdu
}

// ClearStatus clears the value of the "status" field.
func (amrdu *AsMarketRoleDistributionUpdate) ClearStatus() *AsMarketRoleDistributionUpdate {
	amrdu.mutation.ClearStatus()
	return amrdu
}

// SetCreateUser sets the "create_user" field.
func (amrdu *AsMarketRoleDistributionUpdate) SetCreateUser(i int64) *AsMarketRoleDistributionUpdate {
	amrdu.mutation.ResetCreateUser()
	amrdu.mutation.SetCreateUser(i)
	return amrdu
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (amrdu *AsMarketRoleDistributionUpdate) SetNillableCreateUser(i *int64) *AsMarketRoleDistributionUpdate {
	if i != nil {
		amrdu.SetCreateUser(*i)
	}
	return amrdu
}

// AddCreateUser adds i to the "create_user" field.
func (amrdu *AsMarketRoleDistributionUpdate) AddCreateUser(i int64) *AsMarketRoleDistributionUpdate {
	amrdu.mutation.AddCreateUser(i)
	return amrdu
}

// ClearCreateUser clears the value of the "create_user" field.
func (amrdu *AsMarketRoleDistributionUpdate) ClearCreateUser() *AsMarketRoleDistributionUpdate {
	amrdu.mutation.ClearCreateUser()
	return amrdu
}

// SetUpdateUser sets the "update_user" field.
func (amrdu *AsMarketRoleDistributionUpdate) SetUpdateUser(i int64) *AsMarketRoleDistributionUpdate {
	amrdu.mutation.ResetUpdateUser()
	amrdu.mutation.SetUpdateUser(i)
	return amrdu
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (amrdu *AsMarketRoleDistributionUpdate) SetNillableUpdateUser(i *int64) *AsMarketRoleDistributionUpdate {
	if i != nil {
		amrdu.SetUpdateUser(*i)
	}
	return amrdu
}

// AddUpdateUser adds i to the "update_user" field.
func (amrdu *AsMarketRoleDistributionUpdate) AddUpdateUser(i int64) *AsMarketRoleDistributionUpdate {
	amrdu.mutation.AddUpdateUser(i)
	return amrdu
}

// ClearUpdateUser clears the value of the "update_user" field.
func (amrdu *AsMarketRoleDistributionUpdate) ClearUpdateUser() *AsMarketRoleDistributionUpdate {
	amrdu.mutation.ClearUpdateUser()
	return amrdu
}

// SetUpdateTime sets the "update_time" field.
func (amrdu *AsMarketRoleDistributionUpdate) SetUpdateTime(dt date.DateTime) *AsMarketRoleDistributionUpdate {
	amrdu.mutation.SetUpdateTime(dt)
	return amrdu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (amrdu *AsMarketRoleDistributionUpdate) ClearUpdateTime() *AsMarketRoleDistributionUpdate {
	amrdu.mutation.ClearUpdateTime()
	return amrdu
}

// SetUserxID sets the "userx" edge to the AsUser entity by ID.
func (amrdu *AsMarketRoleDistributionUpdate) SetUserxID(id int64) *AsMarketRoleDistributionUpdate {
	amrdu.mutation.SetUserxID(id)
	return amrdu
}

// SetNillableUserxID sets the "userx" edge to the AsUser entity by ID if the given value is not nil.
func (amrdu *AsMarketRoleDistributionUpdate) SetNillableUserxID(id *int64) *AsMarketRoleDistributionUpdate {
	if id != nil {
		amrdu = amrdu.SetUserxID(*id)
	}
	return amrdu
}

// SetUserx sets the "userx" edge to the AsUser entity.
func (amrdu *AsMarketRoleDistributionUpdate) SetUserx(a *AsUser) *AsMarketRoleDistributionUpdate {
	return amrdu.SetUserxID(a.ID)
}

// SetAgencyxID sets the "agencyx" edge to the AsInnerAgency entity by ID.
func (amrdu *AsMarketRoleDistributionUpdate) SetAgencyxID(id int64) *AsMarketRoleDistributionUpdate {
	amrdu.mutation.SetAgencyxID(id)
	return amrdu
}

// SetNillableAgencyxID sets the "agencyx" edge to the AsInnerAgency entity by ID if the given value is not nil.
func (amrdu *AsMarketRoleDistributionUpdate) SetNillableAgencyxID(id *int64) *AsMarketRoleDistributionUpdate {
	if id != nil {
		amrdu = amrdu.SetAgencyxID(*id)
	}
	return amrdu
}

// SetAgencyx sets the "agencyx" edge to the AsInnerAgency entity.
func (amrdu *AsMarketRoleDistributionUpdate) SetAgencyx(a *AsInnerAgency) *AsMarketRoleDistributionUpdate {
	return amrdu.SetAgencyxID(a.ID)
}

// SetJobxID sets the "jobx" edge to the AsJob entity by ID.
func (amrdu *AsMarketRoleDistributionUpdate) SetJobxID(id int64) *AsMarketRoleDistributionUpdate {
	amrdu.mutation.SetJobxID(id)
	return amrdu
}

// SetNillableJobxID sets the "jobx" edge to the AsJob entity by ID if the given value is not nil.
func (amrdu *AsMarketRoleDistributionUpdate) SetNillableJobxID(id *int64) *AsMarketRoleDistributionUpdate {
	if id != nil {
		amrdu = amrdu.SetJobxID(*id)
	}
	return amrdu
}

// SetJobx sets the "jobx" edge to the AsJob entity.
func (amrdu *AsMarketRoleDistributionUpdate) SetJobx(a *AsJob) *AsMarketRoleDistributionUpdate {
	return amrdu.SetJobxID(a.ID)
}

// SetRolexID sets the "rolex" edge to the AsMarketAppRole entity by ID.
func (amrdu *AsMarketRoleDistributionUpdate) SetRolexID(id int64) *AsMarketRoleDistributionUpdate {
	amrdu.mutation.SetRolexID(id)
	return amrdu
}

// SetNillableRolexID sets the "rolex" edge to the AsMarketAppRole entity by ID if the given value is not nil.
func (amrdu *AsMarketRoleDistributionUpdate) SetNillableRolexID(id *int64) *AsMarketRoleDistributionUpdate {
	if id != nil {
		amrdu = amrdu.SetRolexID(*id)
	}
	return amrdu
}

// SetRolex sets the "rolex" edge to the AsMarketAppRole entity.
func (amrdu *AsMarketRoleDistributionUpdate) SetRolex(a *AsMarketAppRole) *AsMarketRoleDistributionUpdate {
	return amrdu.SetRolexID(a.ID)
}

// Mutation returns the AsMarketRoleDistributionMutation object of the builder.
func (amrdu *AsMarketRoleDistributionUpdate) Mutation() *AsMarketRoleDistributionMutation {
	return amrdu.mutation
}

// ClearUserx clears the "userx" edge to the AsUser entity.
func (amrdu *AsMarketRoleDistributionUpdate) ClearUserx() *AsMarketRoleDistributionUpdate {
	amrdu.mutation.ClearUserx()
	return amrdu
}

// ClearAgencyx clears the "agencyx" edge to the AsInnerAgency entity.
func (amrdu *AsMarketRoleDistributionUpdate) ClearAgencyx() *AsMarketRoleDistributionUpdate {
	amrdu.mutation.ClearAgencyx()
	return amrdu
}

// ClearJobx clears the "jobx" edge to the AsJob entity.
func (amrdu *AsMarketRoleDistributionUpdate) ClearJobx() *AsMarketRoleDistributionUpdate {
	amrdu.mutation.ClearJobx()
	return amrdu
}

// ClearRolex clears the "rolex" edge to the AsMarketAppRole entity.
func (amrdu *AsMarketRoleDistributionUpdate) ClearRolex() *AsMarketRoleDistributionUpdate {
	amrdu.mutation.ClearRolex()
	return amrdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (amrdu *AsMarketRoleDistributionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	amrdu.defaults()
	if len(amrdu.hooks) == 0 {
		affected, err = amrdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsMarketRoleDistributionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			amrdu.mutation = mutation
			affected, err = amrdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(amrdu.hooks) - 1; i >= 0; i-- {
			if amrdu.hooks[i] == nil {
				return 0, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = amrdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, amrdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (amrdu *AsMarketRoleDistributionUpdate) SaveX(ctx context.Context) int {
	affected, err := amrdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (amrdu *AsMarketRoleDistributionUpdate) Exec(ctx context.Context) error {
	_, err := amrdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amrdu *AsMarketRoleDistributionUpdate) ExecX(ctx context.Context) {
	if err := amrdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amrdu *AsMarketRoleDistributionUpdate) defaults() {
	if _, ok := amrdu.mutation.UpdateTime(); !ok && !amrdu.mutation.UpdateTimeCleared() {
		v := asmarketroledistribution.UpdateDefaultUpdateTime()
		amrdu.mutation.SetUpdateTime(v)
	}
}

func (amrdu *AsMarketRoleDistributionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asmarketroledistribution.Table,
			Columns: asmarketroledistribution.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asmarketroledistribution.FieldID,
			},
		},
	}
	if ps := amrdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amrdu.mutation.TenantCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketroledistribution.FieldTenantCode,
		})
	}
	if amrdu.mutation.TenantCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketroledistribution.FieldTenantCode,
		})
	}
	if value, ok := amrdu.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketroledistribution.FieldIsDeleted,
		})
	}
	if value, ok := amrdu.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketroledistribution.FieldIsDeleted,
		})
	}
	if value, ok := amrdu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketroledistribution.FieldStatus,
		})
	}
	if value, ok := amrdu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketroledistribution.FieldStatus,
		})
	}
	if amrdu.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketroledistribution.FieldStatus,
		})
	}
	if value, ok := amrdu.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketroledistribution.FieldCreateUser,
		})
	}
	if value, ok := amrdu.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketroledistribution.FieldCreateUser,
		})
	}
	if amrdu.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketroledistribution.FieldCreateUser,
		})
	}
	if value, ok := amrdu.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketroledistribution.FieldUpdateUser,
		})
	}
	if value, ok := amrdu.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketroledistribution.FieldUpdateUser,
		})
	}
	if amrdu.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketroledistribution.FieldUpdateUser,
		})
	}
	if amrdu.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketroledistribution.FieldCreateTime,
		})
	}
	if value, ok := amrdu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketroledistribution.FieldUpdateTime,
		})
	}
	if amrdu.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketroledistribution.FieldUpdateTime,
		})
	}
	if amrdu.mutation.UserxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketroledistribution.UserxTable,
			Columns: []string{asmarketroledistribution.UserxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amrdu.mutation.UserxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketroledistribution.UserxTable,
			Columns: []string{asmarketroledistribution.UserxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amrdu.mutation.AgencyxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketroledistribution.AgencyxTable,
			Columns: []string{asmarketroledistribution.AgencyxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asinneragency.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amrdu.mutation.AgencyxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketroledistribution.AgencyxTable,
			Columns: []string{asmarketroledistribution.AgencyxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asinneragency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amrdu.mutation.JobxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketroledistribution.JobxTable,
			Columns: []string{asmarketroledistribution.JobxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asjob.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amrdu.mutation.JobxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketroledistribution.JobxTable,
			Columns: []string{asmarketroledistribution.JobxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asjob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amrdu.mutation.RolexCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketroledistribution.RolexTable,
			Columns: []string{asmarketroledistribution.RolexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapprole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amrdu.mutation.RolexIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketroledistribution.RolexTable,
			Columns: []string{asmarketroledistribution.RolexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapprole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, amrdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asmarketroledistribution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AsMarketRoleDistributionUpdateOne is the builder for updating a single AsMarketRoleDistribution entity.
type AsMarketRoleDistributionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AsMarketRoleDistributionMutation
}

// SetRoleID sets the "role_id" field.
func (amrduo *AsMarketRoleDistributionUpdateOne) SetRoleID(i int64) *AsMarketRoleDistributionUpdateOne {
	amrduo.mutation.SetRoleID(i)
	return amrduo
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (amrduo *AsMarketRoleDistributionUpdateOne) SetNillableRoleID(i *int64) *AsMarketRoleDistributionUpdateOne {
	if i != nil {
		amrduo.SetRoleID(*i)
	}
	return amrduo
}

// ClearRoleID clears the value of the "role_id" field.
func (amrduo *AsMarketRoleDistributionUpdateOne) ClearRoleID() *AsMarketRoleDistributionUpdateOne {
	amrduo.mutation.ClearRoleID()
	return amrduo
}

// SetUserID sets the "user_id" field.
func (amrduo *AsMarketRoleDistributionUpdateOne) SetUserID(i int64) *AsMarketRoleDistributionUpdateOne {
	amrduo.mutation.SetUserID(i)
	return amrduo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (amrduo *AsMarketRoleDistributionUpdateOne) SetNillableUserID(i *int64) *AsMarketRoleDistributionUpdateOne {
	if i != nil {
		amrduo.SetUserID(*i)
	}
	return amrduo
}

// ClearUserID clears the value of the "user_id" field.
func (amrduo *AsMarketRoleDistributionUpdateOne) ClearUserID() *AsMarketRoleDistributionUpdateOne {
	amrduo.mutation.ClearUserID()
	return amrduo
}

// SetAgencyID sets the "agency_id" field.
func (amrduo *AsMarketRoleDistributionUpdateOne) SetAgencyID(i int64) *AsMarketRoleDistributionUpdateOne {
	amrduo.mutation.SetAgencyID(i)
	return amrduo
}

// SetNillableAgencyID sets the "agency_id" field if the given value is not nil.
func (amrduo *AsMarketRoleDistributionUpdateOne) SetNillableAgencyID(i *int64) *AsMarketRoleDistributionUpdateOne {
	if i != nil {
		amrduo.SetAgencyID(*i)
	}
	return amrduo
}

// ClearAgencyID clears the value of the "agency_id" field.
func (amrduo *AsMarketRoleDistributionUpdateOne) ClearAgencyID() *AsMarketRoleDistributionUpdateOne {
	amrduo.mutation.ClearAgencyID()
	return amrduo
}

// SetJobID sets the "job_id" field.
func (amrduo *AsMarketRoleDistributionUpdateOne) SetJobID(i int64) *AsMarketRoleDistributionUpdateOne {
	amrduo.mutation.SetJobID(i)
	return amrduo
}

// SetNillableJobID sets the "job_id" field if the given value is not nil.
func (amrduo *AsMarketRoleDistributionUpdateOne) SetNillableJobID(i *int64) *AsMarketRoleDistributionUpdateOne {
	if i != nil {
		amrduo.SetJobID(*i)
	}
	return amrduo
}

// ClearJobID clears the value of the "job_id" field.
func (amrduo *AsMarketRoleDistributionUpdateOne) ClearJobID() *AsMarketRoleDistributionUpdateOne {
	amrduo.mutation.ClearJobID()
	return amrduo
}

// SetTenantCode sets the "tenant_code" field.
func (amrduo *AsMarketRoleDistributionUpdateOne) SetTenantCode(s string) *AsMarketRoleDistributionUpdateOne {
	amrduo.mutation.SetTenantCode(s)
	return amrduo
}

// SetNillableTenantCode sets the "tenant_code" field if the given value is not nil.
func (amrduo *AsMarketRoleDistributionUpdateOne) SetNillableTenantCode(s *string) *AsMarketRoleDistributionUpdateOne {
	if s != nil {
		amrduo.SetTenantCode(*s)
	}
	return amrduo
}

// ClearTenantCode clears the value of the "tenant_code" field.
func (amrduo *AsMarketRoleDistributionUpdateOne) ClearTenantCode() *AsMarketRoleDistributionUpdateOne {
	amrduo.mutation.ClearTenantCode()
	return amrduo
}

// SetIsDeleted sets the "is_deleted" field.
func (amrduo *AsMarketRoleDistributionUpdateOne) SetIsDeleted(i int64) *AsMarketRoleDistributionUpdateOne {
	amrduo.mutation.ResetIsDeleted()
	amrduo.mutation.SetIsDeleted(i)
	return amrduo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (amrduo *AsMarketRoleDistributionUpdateOne) SetNillableIsDeleted(i *int64) *AsMarketRoleDistributionUpdateOne {
	if i != nil {
		amrduo.SetIsDeleted(*i)
	}
	return amrduo
}

// AddIsDeleted adds i to the "is_deleted" field.
func (amrduo *AsMarketRoleDistributionUpdateOne) AddIsDeleted(i int64) *AsMarketRoleDistributionUpdateOne {
	amrduo.mutation.AddIsDeleted(i)
	return amrduo
}

// SetStatus sets the "status" field.
func (amrduo *AsMarketRoleDistributionUpdateOne) SetStatus(i int64) *AsMarketRoleDistributionUpdateOne {
	amrduo.mutation.ResetStatus()
	amrduo.mutation.SetStatus(i)
	return amrduo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (amrduo *AsMarketRoleDistributionUpdateOne) SetNillableStatus(i *int64) *AsMarketRoleDistributionUpdateOne {
	if i != nil {
		amrduo.SetStatus(*i)
	}
	return amrduo
}

// AddStatus adds i to the "status" field.
func (amrduo *AsMarketRoleDistributionUpdateOne) AddStatus(i int64) *AsMarketRoleDistributionUpdateOne {
	amrduo.mutation.AddStatus(i)
	return amrduo
}

// ClearStatus clears the value of the "status" field.
func (amrduo *AsMarketRoleDistributionUpdateOne) ClearStatus() *AsMarketRoleDistributionUpdateOne {
	amrduo.mutation.ClearStatus()
	return amrduo
}

// SetCreateUser sets the "create_user" field.
func (amrduo *AsMarketRoleDistributionUpdateOne) SetCreateUser(i int64) *AsMarketRoleDistributionUpdateOne {
	amrduo.mutation.ResetCreateUser()
	amrduo.mutation.SetCreateUser(i)
	return amrduo
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (amrduo *AsMarketRoleDistributionUpdateOne) SetNillableCreateUser(i *int64) *AsMarketRoleDistributionUpdateOne {
	if i != nil {
		amrduo.SetCreateUser(*i)
	}
	return amrduo
}

// AddCreateUser adds i to the "create_user" field.
func (amrduo *AsMarketRoleDistributionUpdateOne) AddCreateUser(i int64) *AsMarketRoleDistributionUpdateOne {
	amrduo.mutation.AddCreateUser(i)
	return amrduo
}

// ClearCreateUser clears the value of the "create_user" field.
func (amrduo *AsMarketRoleDistributionUpdateOne) ClearCreateUser() *AsMarketRoleDistributionUpdateOne {
	amrduo.mutation.ClearCreateUser()
	return amrduo
}

// SetUpdateUser sets the "update_user" field.
func (amrduo *AsMarketRoleDistributionUpdateOne) SetUpdateUser(i int64) *AsMarketRoleDistributionUpdateOne {
	amrduo.mutation.ResetUpdateUser()
	amrduo.mutation.SetUpdateUser(i)
	return amrduo
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (amrduo *AsMarketRoleDistributionUpdateOne) SetNillableUpdateUser(i *int64) *AsMarketRoleDistributionUpdateOne {
	if i != nil {
		amrduo.SetUpdateUser(*i)
	}
	return amrduo
}

// AddUpdateUser adds i to the "update_user" field.
func (amrduo *AsMarketRoleDistributionUpdateOne) AddUpdateUser(i int64) *AsMarketRoleDistributionUpdateOne {
	amrduo.mutation.AddUpdateUser(i)
	return amrduo
}

// ClearUpdateUser clears the value of the "update_user" field.
func (amrduo *AsMarketRoleDistributionUpdateOne) ClearUpdateUser() *AsMarketRoleDistributionUpdateOne {
	amrduo.mutation.ClearUpdateUser()
	return amrduo
}

// SetUpdateTime sets the "update_time" field.
func (amrduo *AsMarketRoleDistributionUpdateOne) SetUpdateTime(dt date.DateTime) *AsMarketRoleDistributionUpdateOne {
	amrduo.mutation.SetUpdateTime(dt)
	return amrduo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (amrduo *AsMarketRoleDistributionUpdateOne) ClearUpdateTime() *AsMarketRoleDistributionUpdateOne {
	amrduo.mutation.ClearUpdateTime()
	return amrduo
}

// SetUserxID sets the "userx" edge to the AsUser entity by ID.
func (amrduo *AsMarketRoleDistributionUpdateOne) SetUserxID(id int64) *AsMarketRoleDistributionUpdateOne {
	amrduo.mutation.SetUserxID(id)
	return amrduo
}

// SetNillableUserxID sets the "userx" edge to the AsUser entity by ID if the given value is not nil.
func (amrduo *AsMarketRoleDistributionUpdateOne) SetNillableUserxID(id *int64) *AsMarketRoleDistributionUpdateOne {
	if id != nil {
		amrduo = amrduo.SetUserxID(*id)
	}
	return amrduo
}

// SetUserx sets the "userx" edge to the AsUser entity.
func (amrduo *AsMarketRoleDistributionUpdateOne) SetUserx(a *AsUser) *AsMarketRoleDistributionUpdateOne {
	return amrduo.SetUserxID(a.ID)
}

// SetAgencyxID sets the "agencyx" edge to the AsInnerAgency entity by ID.
func (amrduo *AsMarketRoleDistributionUpdateOne) SetAgencyxID(id int64) *AsMarketRoleDistributionUpdateOne {
	amrduo.mutation.SetAgencyxID(id)
	return amrduo
}

// SetNillableAgencyxID sets the "agencyx" edge to the AsInnerAgency entity by ID if the given value is not nil.
func (amrduo *AsMarketRoleDistributionUpdateOne) SetNillableAgencyxID(id *int64) *AsMarketRoleDistributionUpdateOne {
	if id != nil {
		amrduo = amrduo.SetAgencyxID(*id)
	}
	return amrduo
}

// SetAgencyx sets the "agencyx" edge to the AsInnerAgency entity.
func (amrduo *AsMarketRoleDistributionUpdateOne) SetAgencyx(a *AsInnerAgency) *AsMarketRoleDistributionUpdateOne {
	return amrduo.SetAgencyxID(a.ID)
}

// SetJobxID sets the "jobx" edge to the AsJob entity by ID.
func (amrduo *AsMarketRoleDistributionUpdateOne) SetJobxID(id int64) *AsMarketRoleDistributionUpdateOne {
	amrduo.mutation.SetJobxID(id)
	return amrduo
}

// SetNillableJobxID sets the "jobx" edge to the AsJob entity by ID if the given value is not nil.
func (amrduo *AsMarketRoleDistributionUpdateOne) SetNillableJobxID(id *int64) *AsMarketRoleDistributionUpdateOne {
	if id != nil {
		amrduo = amrduo.SetJobxID(*id)
	}
	return amrduo
}

// SetJobx sets the "jobx" edge to the AsJob entity.
func (amrduo *AsMarketRoleDistributionUpdateOne) SetJobx(a *AsJob) *AsMarketRoleDistributionUpdateOne {
	return amrduo.SetJobxID(a.ID)
}

// SetRolexID sets the "rolex" edge to the AsMarketAppRole entity by ID.
func (amrduo *AsMarketRoleDistributionUpdateOne) SetRolexID(id int64) *AsMarketRoleDistributionUpdateOne {
	amrduo.mutation.SetRolexID(id)
	return amrduo
}

// SetNillableRolexID sets the "rolex" edge to the AsMarketAppRole entity by ID if the given value is not nil.
func (amrduo *AsMarketRoleDistributionUpdateOne) SetNillableRolexID(id *int64) *AsMarketRoleDistributionUpdateOne {
	if id != nil {
		amrduo = amrduo.SetRolexID(*id)
	}
	return amrduo
}

// SetRolex sets the "rolex" edge to the AsMarketAppRole entity.
func (amrduo *AsMarketRoleDistributionUpdateOne) SetRolex(a *AsMarketAppRole) *AsMarketRoleDistributionUpdateOne {
	return amrduo.SetRolexID(a.ID)
}

// Mutation returns the AsMarketRoleDistributionMutation object of the builder.
func (amrduo *AsMarketRoleDistributionUpdateOne) Mutation() *AsMarketRoleDistributionMutation {
	return amrduo.mutation
}

// ClearUserx clears the "userx" edge to the AsUser entity.
func (amrduo *AsMarketRoleDistributionUpdateOne) ClearUserx() *AsMarketRoleDistributionUpdateOne {
	amrduo.mutation.ClearUserx()
	return amrduo
}

// ClearAgencyx clears the "agencyx" edge to the AsInnerAgency entity.
func (amrduo *AsMarketRoleDistributionUpdateOne) ClearAgencyx() *AsMarketRoleDistributionUpdateOne {
	amrduo.mutation.ClearAgencyx()
	return amrduo
}

// ClearJobx clears the "jobx" edge to the AsJob entity.
func (amrduo *AsMarketRoleDistributionUpdateOne) ClearJobx() *AsMarketRoleDistributionUpdateOne {
	amrduo.mutation.ClearJobx()
	return amrduo
}

// ClearRolex clears the "rolex" edge to the AsMarketAppRole entity.
func (amrduo *AsMarketRoleDistributionUpdateOne) ClearRolex() *AsMarketRoleDistributionUpdateOne {
	amrduo.mutation.ClearRolex()
	return amrduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (amrduo *AsMarketRoleDistributionUpdateOne) Select(field string, fields ...string) *AsMarketRoleDistributionUpdateOne {
	amrduo.fields = append([]string{field}, fields...)
	return amrduo
}

// Save executes the query and returns the updated AsMarketRoleDistribution entity.
func (amrduo *AsMarketRoleDistributionUpdateOne) Save(ctx context.Context) (*AsMarketRoleDistribution, error) {
	var (
		err  error
		node *AsMarketRoleDistribution
	)
	amrduo.defaults()
	if len(amrduo.hooks) == 0 {
		node, err = amrduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsMarketRoleDistributionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			amrduo.mutation = mutation
			node, err = amrduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(amrduo.hooks) - 1; i >= 0; i-- {
			if amrduo.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = amrduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, amrduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (amrduo *AsMarketRoleDistributionUpdateOne) SaveX(ctx context.Context) *AsMarketRoleDistribution {
	node, err := amrduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (amrduo *AsMarketRoleDistributionUpdateOne) Exec(ctx context.Context) error {
	_, err := amrduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amrduo *AsMarketRoleDistributionUpdateOne) ExecX(ctx context.Context) {
	if err := amrduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amrduo *AsMarketRoleDistributionUpdateOne) defaults() {
	if _, ok := amrduo.mutation.UpdateTime(); !ok && !amrduo.mutation.UpdateTimeCleared() {
		v := asmarketroledistribution.UpdateDefaultUpdateTime()
		amrduo.mutation.SetUpdateTime(v)
	}
}

func (amrduo *AsMarketRoleDistributionUpdateOne) sqlSave(ctx context.Context) (_node *AsMarketRoleDistribution, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asmarketroledistribution.Table,
			Columns: asmarketroledistribution.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asmarketroledistribution.FieldID,
			},
		},
	}
	id, ok := amrduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`schema: missing "AsMarketRoleDistribution.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := amrduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asmarketroledistribution.FieldID)
		for _, f := range fields {
			if !asmarketroledistribution.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("schema: invalid field %q for query", f)}
			}
			if f != asmarketroledistribution.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := amrduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amrduo.mutation.TenantCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketroledistribution.FieldTenantCode,
		})
	}
	if amrduo.mutation.TenantCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketroledistribution.FieldTenantCode,
		})
	}
	if value, ok := amrduo.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketroledistribution.FieldIsDeleted,
		})
	}
	if value, ok := amrduo.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketroledistribution.FieldIsDeleted,
		})
	}
	if value, ok := amrduo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketroledistribution.FieldStatus,
		})
	}
	if value, ok := amrduo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketroledistribution.FieldStatus,
		})
	}
	if amrduo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketroledistribution.FieldStatus,
		})
	}
	if value, ok := amrduo.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketroledistribution.FieldCreateUser,
		})
	}
	if value, ok := amrduo.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketroledistribution.FieldCreateUser,
		})
	}
	if amrduo.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketroledistribution.FieldCreateUser,
		})
	}
	if value, ok := amrduo.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketroledistribution.FieldUpdateUser,
		})
	}
	if value, ok := amrduo.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketroledistribution.FieldUpdateUser,
		})
	}
	if amrduo.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketroledistribution.FieldUpdateUser,
		})
	}
	if amrduo.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketroledistribution.FieldCreateTime,
		})
	}
	if value, ok := amrduo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketroledistribution.FieldUpdateTime,
		})
	}
	if amrduo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketroledistribution.FieldUpdateTime,
		})
	}
	if amrduo.mutation.UserxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketroledistribution.UserxTable,
			Columns: []string{asmarketroledistribution.UserxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amrduo.mutation.UserxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketroledistribution.UserxTable,
			Columns: []string{asmarketroledistribution.UserxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amrduo.mutation.AgencyxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketroledistribution.AgencyxTable,
			Columns: []string{asmarketroledistribution.AgencyxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asinneragency.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amrduo.mutation.AgencyxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketroledistribution.AgencyxTable,
			Columns: []string{asmarketroledistribution.AgencyxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asinneragency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amrduo.mutation.JobxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketroledistribution.JobxTable,
			Columns: []string{asmarketroledistribution.JobxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asjob.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amrduo.mutation.JobxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketroledistribution.JobxTable,
			Columns: []string{asmarketroledistribution.JobxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asjob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amrduo.mutation.RolexCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketroledistribution.RolexTable,
			Columns: []string{asmarketroledistribution.RolexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapprole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amrduo.mutation.RolexIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketroledistribution.RolexTable,
			Columns: []string{asmarketroledistribution.RolexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapprole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AsMarketRoleDistribution{config: amrduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, amrduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asmarketroledistribution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
