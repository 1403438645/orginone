// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/baseinfoadministrativeareaall"
	"orginone/common/schema/predicate"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BaseinfoadministrativeareaallUpdate is the builder for updating Baseinfoadministrativeareaall entities.
type BaseinfoadministrativeareaallUpdate struct {
	config
	hooks    []Hook
	mutation *BaseinfoadministrativeareaallMutation
}

// Where appends a list predicates to the BaseinfoadministrativeareaallUpdate builder.
func (bu *BaseinfoadministrativeareaallUpdate) Where(ps ...predicate.Baseinfoadministrativeareaall) *BaseinfoadministrativeareaallUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetPid sets the "pid" field.
func (bu *BaseinfoadministrativeareaallUpdate) SetPid(i int64) *BaseinfoadministrativeareaallUpdate {
	bu.mutation.SetPid(i)
	return bu
}

// SetNillablePid sets the "pid" field if the given value is not nil.
func (bu *BaseinfoadministrativeareaallUpdate) SetNillablePid(i *int64) *BaseinfoadministrativeareaallUpdate {
	if i != nil {
		bu.SetPid(*i)
	}
	return bu
}

// ClearPid clears the value of the "pid" field.
func (bu *BaseinfoadministrativeareaallUpdate) ClearPid() *BaseinfoadministrativeareaallUpdate {
	bu.mutation.ClearPid()
	return bu
}

// SetCode sets the "code" field.
func (bu *BaseinfoadministrativeareaallUpdate) SetCode(s string) *BaseinfoadministrativeareaallUpdate {
	bu.mutation.SetCode(s)
	return bu
}

// SetName sets the "name" field.
func (bu *BaseinfoadministrativeareaallUpdate) SetName(s string) *BaseinfoadministrativeareaallUpdate {
	bu.mutation.SetName(s)
	return bu
}

// SetProvince sets the "province" field.
func (bu *BaseinfoadministrativeareaallUpdate) SetProvince(s string) *BaseinfoadministrativeareaallUpdate {
	bu.mutation.SetProvince(s)
	return bu
}

// SetCity sets the "city" field.
func (bu *BaseinfoadministrativeareaallUpdate) SetCity(s string) *BaseinfoadministrativeareaallUpdate {
	bu.mutation.SetCity(s)
	return bu
}

// SetArea sets the "area" field.
func (bu *BaseinfoadministrativeareaallUpdate) SetArea(s string) *BaseinfoadministrativeareaallUpdate {
	bu.mutation.SetArea(s)
	return bu
}

// SetTown sets the "town" field.
func (bu *BaseinfoadministrativeareaallUpdate) SetTown(s string) *BaseinfoadministrativeareaallUpdate {
	bu.mutation.SetTown(s)
	return bu
}

// SetAllName sets the "all_name" field.
func (bu *BaseinfoadministrativeareaallUpdate) SetAllName(s string) *BaseinfoadministrativeareaallUpdate {
	bu.mutation.SetAllName(s)
	return bu
}

// SetType sets the "type" field.
func (bu *BaseinfoadministrativeareaallUpdate) SetType(i int32) *BaseinfoadministrativeareaallUpdate {
	bu.mutation.ResetType()
	bu.mutation.SetType(i)
	return bu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (bu *BaseinfoadministrativeareaallUpdate) SetNillableType(i *int32) *BaseinfoadministrativeareaallUpdate {
	if i != nil {
		bu.SetType(*i)
	}
	return bu
}

// AddType adds i to the "type" field.
func (bu *BaseinfoadministrativeareaallUpdate) AddType(i int32) *BaseinfoadministrativeareaallUpdate {
	bu.mutation.AddType(i)
	return bu
}

// ClearType clears the value of the "type" field.
func (bu *BaseinfoadministrativeareaallUpdate) ClearType() *BaseinfoadministrativeareaallUpdate {
	bu.mutation.ClearType()
	return bu
}

// SetTsVersion sets the "ts_version" field.
func (bu *BaseinfoadministrativeareaallUpdate) SetTsVersion(i int32) *BaseinfoadministrativeareaallUpdate {
	bu.mutation.ResetTsVersion()
	bu.mutation.SetTsVersion(i)
	return bu
}

// SetNillableTsVersion sets the "ts_version" field if the given value is not nil.
func (bu *BaseinfoadministrativeareaallUpdate) SetNillableTsVersion(i *int32) *BaseinfoadministrativeareaallUpdate {
	if i != nil {
		bu.SetTsVersion(*i)
	}
	return bu
}

// AddTsVersion adds i to the "ts_version" field.
func (bu *BaseinfoadministrativeareaallUpdate) AddTsVersion(i int32) *BaseinfoadministrativeareaallUpdate {
	bu.mutation.AddTsVersion(i)
	return bu
}

// ClearTsVersion clears the value of the "ts_version" field.
func (bu *BaseinfoadministrativeareaallUpdate) ClearTsVersion() *BaseinfoadministrativeareaallUpdate {
	bu.mutation.ClearTsVersion()
	return bu
}

// SetIsDeleted sets the "is_deleted" field.
func (bu *BaseinfoadministrativeareaallUpdate) SetIsDeleted(i int64) *BaseinfoadministrativeareaallUpdate {
	bu.mutation.ResetIsDeleted()
	bu.mutation.SetIsDeleted(i)
	return bu
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (bu *BaseinfoadministrativeareaallUpdate) SetNillableIsDeleted(i *int64) *BaseinfoadministrativeareaallUpdate {
	if i != nil {
		bu.SetIsDeleted(*i)
	}
	return bu
}

// AddIsDeleted adds i to the "is_deleted" field.
func (bu *BaseinfoadministrativeareaallUpdate) AddIsDeleted(i int64) *BaseinfoadministrativeareaallUpdate {
	bu.mutation.AddIsDeleted(i)
	return bu
}

// SetStatus sets the "status" field.
func (bu *BaseinfoadministrativeareaallUpdate) SetStatus(i int64) *BaseinfoadministrativeareaallUpdate {
	bu.mutation.ResetStatus()
	bu.mutation.SetStatus(i)
	return bu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bu *BaseinfoadministrativeareaallUpdate) SetNillableStatus(i *int64) *BaseinfoadministrativeareaallUpdate {
	if i != nil {
		bu.SetStatus(*i)
	}
	return bu
}

// AddStatus adds i to the "status" field.
func (bu *BaseinfoadministrativeareaallUpdate) AddStatus(i int64) *BaseinfoadministrativeareaallUpdate {
	bu.mutation.AddStatus(i)
	return bu
}

// ClearStatus clears the value of the "status" field.
func (bu *BaseinfoadministrativeareaallUpdate) ClearStatus() *BaseinfoadministrativeareaallUpdate {
	bu.mutation.ClearStatus()
	return bu
}

// SetCreateUser sets the "create_user" field.
func (bu *BaseinfoadministrativeareaallUpdate) SetCreateUser(i int64) *BaseinfoadministrativeareaallUpdate {
	bu.mutation.ResetCreateUser()
	bu.mutation.SetCreateUser(i)
	return bu
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (bu *BaseinfoadministrativeareaallUpdate) SetNillableCreateUser(i *int64) *BaseinfoadministrativeareaallUpdate {
	if i != nil {
		bu.SetCreateUser(*i)
	}
	return bu
}

// AddCreateUser adds i to the "create_user" field.
func (bu *BaseinfoadministrativeareaallUpdate) AddCreateUser(i int64) *BaseinfoadministrativeareaallUpdate {
	bu.mutation.AddCreateUser(i)
	return bu
}

// ClearCreateUser clears the value of the "create_user" field.
func (bu *BaseinfoadministrativeareaallUpdate) ClearCreateUser() *BaseinfoadministrativeareaallUpdate {
	bu.mutation.ClearCreateUser()
	return bu
}

// SetUpdateUser sets the "update_user" field.
func (bu *BaseinfoadministrativeareaallUpdate) SetUpdateUser(i int64) *BaseinfoadministrativeareaallUpdate {
	bu.mutation.ResetUpdateUser()
	bu.mutation.SetUpdateUser(i)
	return bu
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (bu *BaseinfoadministrativeareaallUpdate) SetNillableUpdateUser(i *int64) *BaseinfoadministrativeareaallUpdate {
	if i != nil {
		bu.SetUpdateUser(*i)
	}
	return bu
}

// AddUpdateUser adds i to the "update_user" field.
func (bu *BaseinfoadministrativeareaallUpdate) AddUpdateUser(i int64) *BaseinfoadministrativeareaallUpdate {
	bu.mutation.AddUpdateUser(i)
	return bu
}

// ClearUpdateUser clears the value of the "update_user" field.
func (bu *BaseinfoadministrativeareaallUpdate) ClearUpdateUser() *BaseinfoadministrativeareaallUpdate {
	bu.mutation.ClearUpdateUser()
	return bu
}

// SetUpdateTime sets the "update_time" field.
func (bu *BaseinfoadministrativeareaallUpdate) SetUpdateTime(dt date.DateTime) *BaseinfoadministrativeareaallUpdate {
	bu.mutation.SetUpdateTime(dt)
	return bu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (bu *BaseinfoadministrativeareaallUpdate) ClearUpdateTime() *BaseinfoadministrativeareaallUpdate {
	bu.mutation.ClearUpdateTime()
	return bu
}

// SetParentxID sets the "parentx" edge to the Baseinfoadministrativeareaall entity by ID.
func (bu *BaseinfoadministrativeareaallUpdate) SetParentxID(id int64) *BaseinfoadministrativeareaallUpdate {
	bu.mutation.SetParentxID(id)
	return bu
}

// SetNillableParentxID sets the "parentx" edge to the Baseinfoadministrativeareaall entity by ID if the given value is not nil.
func (bu *BaseinfoadministrativeareaallUpdate) SetNillableParentxID(id *int64) *BaseinfoadministrativeareaallUpdate {
	if id != nil {
		bu = bu.SetParentxID(*id)
	}
	return bu
}

// SetParentx sets the "parentx" edge to the Baseinfoadministrativeareaall entity.
func (bu *BaseinfoadministrativeareaallUpdate) SetParentx(b *Baseinfoadministrativeareaall) *BaseinfoadministrativeareaallUpdate {
	return bu.SetParentxID(b.ID)
}

// AddChildrenIDs adds the "childrens" edge to the Baseinfoadministrativeareaall entity by IDs.
func (bu *BaseinfoadministrativeareaallUpdate) AddChildrenIDs(ids ...int64) *BaseinfoadministrativeareaallUpdate {
	bu.mutation.AddChildrenIDs(ids...)
	return bu
}

// AddChildrens adds the "childrens" edges to the Baseinfoadministrativeareaall entity.
func (bu *BaseinfoadministrativeareaallUpdate) AddChildrens(b ...*Baseinfoadministrativeareaall) *BaseinfoadministrativeareaallUpdate {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.AddChildrenIDs(ids...)
}

// Mutation returns the BaseinfoadministrativeareaallMutation object of the builder.
func (bu *BaseinfoadministrativeareaallUpdate) Mutation() *BaseinfoadministrativeareaallMutation {
	return bu.mutation
}

// ClearParentx clears the "parentx" edge to the Baseinfoadministrativeareaall entity.
func (bu *BaseinfoadministrativeareaallUpdate) ClearParentx() *BaseinfoadministrativeareaallUpdate {
	bu.mutation.ClearParentx()
	return bu
}

// ClearChildrens clears all "childrens" edges to the Baseinfoadministrativeareaall entity.
func (bu *BaseinfoadministrativeareaallUpdate) ClearChildrens() *BaseinfoadministrativeareaallUpdate {
	bu.mutation.ClearChildrens()
	return bu
}

// RemoveChildrenIDs removes the "childrens" edge to Baseinfoadministrativeareaall entities by IDs.
func (bu *BaseinfoadministrativeareaallUpdate) RemoveChildrenIDs(ids ...int64) *BaseinfoadministrativeareaallUpdate {
	bu.mutation.RemoveChildrenIDs(ids...)
	return bu
}

// RemoveChildrens removes "childrens" edges to Baseinfoadministrativeareaall entities.
func (bu *BaseinfoadministrativeareaallUpdate) RemoveChildrens(b ...*Baseinfoadministrativeareaall) *BaseinfoadministrativeareaallUpdate {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.RemoveChildrenIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BaseinfoadministrativeareaallUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	bu.defaults()
	if len(bu.hooks) == 0 {
		affected, err = bu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BaseinfoadministrativeareaallMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bu.mutation = mutation
			affected, err = bu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bu.hooks) - 1; i >= 0; i-- {
			if bu.hooks[i] == nil {
				return 0, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = bu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BaseinfoadministrativeareaallUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BaseinfoadministrativeareaallUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BaseinfoadministrativeareaallUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bu *BaseinfoadministrativeareaallUpdate) defaults() {
	if _, ok := bu.mutation.UpdateTime(); !ok && !bu.mutation.UpdateTimeCleared() {
		v := baseinfoadministrativeareaall.UpdateDefaultUpdateTime()
		bu.mutation.SetUpdateTime(v)
	}
}

func (bu *BaseinfoadministrativeareaallUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   baseinfoadministrativeareaall.Table,
			Columns: baseinfoadministrativeareaall.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: baseinfoadministrativeareaall.FieldID,
			},
		},
	}
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldCode,
		})
	}
	if value, ok := bu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldName,
		})
	}
	if value, ok := bu.mutation.Province(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldProvince,
		})
	}
	if value, ok := bu.mutation.City(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldCity,
		})
	}
	if value, ok := bu.mutation.Area(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldArea,
		})
	}
	if value, ok := bu.mutation.Town(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldTown,
		})
	}
	if value, ok := bu.mutation.AllName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldAllName,
		})
	}
	if value, ok := bu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldType,
		})
	}
	if value, ok := bu.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldType,
		})
	}
	if bu.mutation.TypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: baseinfoadministrativeareaall.FieldType,
		})
	}
	if value, ok := bu.mutation.TsVersion(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldTsVersion,
		})
	}
	if value, ok := bu.mutation.AddedTsVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldTsVersion,
		})
	}
	if bu.mutation.TsVersionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: baseinfoadministrativeareaall.FieldTsVersion,
		})
	}
	if value, ok := bu.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldIsDeleted,
		})
	}
	if value, ok := bu.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldIsDeleted,
		})
	}
	if value, ok := bu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldStatus,
		})
	}
	if value, ok := bu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldStatus,
		})
	}
	if bu.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: baseinfoadministrativeareaall.FieldStatus,
		})
	}
	if value, ok := bu.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldCreateUser,
		})
	}
	if value, ok := bu.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldCreateUser,
		})
	}
	if bu.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: baseinfoadministrativeareaall.FieldCreateUser,
		})
	}
	if value, ok := bu.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldUpdateUser,
		})
	}
	if value, ok := bu.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldUpdateUser,
		})
	}
	if bu.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: baseinfoadministrativeareaall.FieldUpdateUser,
		})
	}
	if bu.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: baseinfoadministrativeareaall.FieldCreateTime,
		})
	}
	if value, ok := bu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldUpdateTime,
		})
	}
	if bu.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: baseinfoadministrativeareaall.FieldUpdateTime,
		})
	}
	if bu.mutation.ParentxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   baseinfoadministrativeareaall.ParentxTable,
			Columns: []string{baseinfoadministrativeareaall.ParentxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: baseinfoadministrativeareaall.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.ParentxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   baseinfoadministrativeareaall.ParentxTable,
			Columns: []string{baseinfoadministrativeareaall.ParentxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: baseinfoadministrativeareaall.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.ChildrensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   baseinfoadministrativeareaall.ChildrensTable,
			Columns: []string{baseinfoadministrativeareaall.ChildrensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: baseinfoadministrativeareaall.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedChildrensIDs(); len(nodes) > 0 && !bu.mutation.ChildrensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   baseinfoadministrativeareaall.ChildrensTable,
			Columns: []string{baseinfoadministrativeareaall.ChildrensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: baseinfoadministrativeareaall.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.ChildrensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   baseinfoadministrativeareaall.ChildrensTable,
			Columns: []string{baseinfoadministrativeareaall.ChildrensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: baseinfoadministrativeareaall.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{baseinfoadministrativeareaall.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// BaseinfoadministrativeareaallUpdateOne is the builder for updating a single Baseinfoadministrativeareaall entity.
type BaseinfoadministrativeareaallUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BaseinfoadministrativeareaallMutation
}

// SetPid sets the "pid" field.
func (buo *BaseinfoadministrativeareaallUpdateOne) SetPid(i int64) *BaseinfoadministrativeareaallUpdateOne {
	buo.mutation.SetPid(i)
	return buo
}

// SetNillablePid sets the "pid" field if the given value is not nil.
func (buo *BaseinfoadministrativeareaallUpdateOne) SetNillablePid(i *int64) *BaseinfoadministrativeareaallUpdateOne {
	if i != nil {
		buo.SetPid(*i)
	}
	return buo
}

// ClearPid clears the value of the "pid" field.
func (buo *BaseinfoadministrativeareaallUpdateOne) ClearPid() *BaseinfoadministrativeareaallUpdateOne {
	buo.mutation.ClearPid()
	return buo
}

// SetCode sets the "code" field.
func (buo *BaseinfoadministrativeareaallUpdateOne) SetCode(s string) *BaseinfoadministrativeareaallUpdateOne {
	buo.mutation.SetCode(s)
	return buo
}

// SetName sets the "name" field.
func (buo *BaseinfoadministrativeareaallUpdateOne) SetName(s string) *BaseinfoadministrativeareaallUpdateOne {
	buo.mutation.SetName(s)
	return buo
}

// SetProvince sets the "province" field.
func (buo *BaseinfoadministrativeareaallUpdateOne) SetProvince(s string) *BaseinfoadministrativeareaallUpdateOne {
	buo.mutation.SetProvince(s)
	return buo
}

// SetCity sets the "city" field.
func (buo *BaseinfoadministrativeareaallUpdateOne) SetCity(s string) *BaseinfoadministrativeareaallUpdateOne {
	buo.mutation.SetCity(s)
	return buo
}

// SetArea sets the "area" field.
func (buo *BaseinfoadministrativeareaallUpdateOne) SetArea(s string) *BaseinfoadministrativeareaallUpdateOne {
	buo.mutation.SetArea(s)
	return buo
}

// SetTown sets the "town" field.
func (buo *BaseinfoadministrativeareaallUpdateOne) SetTown(s string) *BaseinfoadministrativeareaallUpdateOne {
	buo.mutation.SetTown(s)
	return buo
}

// SetAllName sets the "all_name" field.
func (buo *BaseinfoadministrativeareaallUpdateOne) SetAllName(s string) *BaseinfoadministrativeareaallUpdateOne {
	buo.mutation.SetAllName(s)
	return buo
}

// SetType sets the "type" field.
func (buo *BaseinfoadministrativeareaallUpdateOne) SetType(i int32) *BaseinfoadministrativeareaallUpdateOne {
	buo.mutation.ResetType()
	buo.mutation.SetType(i)
	return buo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (buo *BaseinfoadministrativeareaallUpdateOne) SetNillableType(i *int32) *BaseinfoadministrativeareaallUpdateOne {
	if i != nil {
		buo.SetType(*i)
	}
	return buo
}

// AddType adds i to the "type" field.
func (buo *BaseinfoadministrativeareaallUpdateOne) AddType(i int32) *BaseinfoadministrativeareaallUpdateOne {
	buo.mutation.AddType(i)
	return buo
}

// ClearType clears the value of the "type" field.
func (buo *BaseinfoadministrativeareaallUpdateOne) ClearType() *BaseinfoadministrativeareaallUpdateOne {
	buo.mutation.ClearType()
	return buo
}

// SetTsVersion sets the "ts_version" field.
func (buo *BaseinfoadministrativeareaallUpdateOne) SetTsVersion(i int32) *BaseinfoadministrativeareaallUpdateOne {
	buo.mutation.ResetTsVersion()
	buo.mutation.SetTsVersion(i)
	return buo
}

// SetNillableTsVersion sets the "ts_version" field if the given value is not nil.
func (buo *BaseinfoadministrativeareaallUpdateOne) SetNillableTsVersion(i *int32) *BaseinfoadministrativeareaallUpdateOne {
	if i != nil {
		buo.SetTsVersion(*i)
	}
	return buo
}

// AddTsVersion adds i to the "ts_version" field.
func (buo *BaseinfoadministrativeareaallUpdateOne) AddTsVersion(i int32) *BaseinfoadministrativeareaallUpdateOne {
	buo.mutation.AddTsVersion(i)
	return buo
}

// ClearTsVersion clears the value of the "ts_version" field.
func (buo *BaseinfoadministrativeareaallUpdateOne) ClearTsVersion() *BaseinfoadministrativeareaallUpdateOne {
	buo.mutation.ClearTsVersion()
	return buo
}

// SetIsDeleted sets the "is_deleted" field.
func (buo *BaseinfoadministrativeareaallUpdateOne) SetIsDeleted(i int64) *BaseinfoadministrativeareaallUpdateOne {
	buo.mutation.ResetIsDeleted()
	buo.mutation.SetIsDeleted(i)
	return buo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (buo *BaseinfoadministrativeareaallUpdateOne) SetNillableIsDeleted(i *int64) *BaseinfoadministrativeareaallUpdateOne {
	if i != nil {
		buo.SetIsDeleted(*i)
	}
	return buo
}

// AddIsDeleted adds i to the "is_deleted" field.
func (buo *BaseinfoadministrativeareaallUpdateOne) AddIsDeleted(i int64) *BaseinfoadministrativeareaallUpdateOne {
	buo.mutation.AddIsDeleted(i)
	return buo
}

// SetStatus sets the "status" field.
func (buo *BaseinfoadministrativeareaallUpdateOne) SetStatus(i int64) *BaseinfoadministrativeareaallUpdateOne {
	buo.mutation.ResetStatus()
	buo.mutation.SetStatus(i)
	return buo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (buo *BaseinfoadministrativeareaallUpdateOne) SetNillableStatus(i *int64) *BaseinfoadministrativeareaallUpdateOne {
	if i != nil {
		buo.SetStatus(*i)
	}
	return buo
}

// AddStatus adds i to the "status" field.
func (buo *BaseinfoadministrativeareaallUpdateOne) AddStatus(i int64) *BaseinfoadministrativeareaallUpdateOne {
	buo.mutation.AddStatus(i)
	return buo
}

// ClearStatus clears the value of the "status" field.
func (buo *BaseinfoadministrativeareaallUpdateOne) ClearStatus() *BaseinfoadministrativeareaallUpdateOne {
	buo.mutation.ClearStatus()
	return buo
}

// SetCreateUser sets the "create_user" field.
func (buo *BaseinfoadministrativeareaallUpdateOne) SetCreateUser(i int64) *BaseinfoadministrativeareaallUpdateOne {
	buo.mutation.ResetCreateUser()
	buo.mutation.SetCreateUser(i)
	return buo
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (buo *BaseinfoadministrativeareaallUpdateOne) SetNillableCreateUser(i *int64) *BaseinfoadministrativeareaallUpdateOne {
	if i != nil {
		buo.SetCreateUser(*i)
	}
	return buo
}

// AddCreateUser adds i to the "create_user" field.
func (buo *BaseinfoadministrativeareaallUpdateOne) AddCreateUser(i int64) *BaseinfoadministrativeareaallUpdateOne {
	buo.mutation.AddCreateUser(i)
	return buo
}

// ClearCreateUser clears the value of the "create_user" field.
func (buo *BaseinfoadministrativeareaallUpdateOne) ClearCreateUser() *BaseinfoadministrativeareaallUpdateOne {
	buo.mutation.ClearCreateUser()
	return buo
}

// SetUpdateUser sets the "update_user" field.
func (buo *BaseinfoadministrativeareaallUpdateOne) SetUpdateUser(i int64) *BaseinfoadministrativeareaallUpdateOne {
	buo.mutation.ResetUpdateUser()
	buo.mutation.SetUpdateUser(i)
	return buo
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (buo *BaseinfoadministrativeareaallUpdateOne) SetNillableUpdateUser(i *int64) *BaseinfoadministrativeareaallUpdateOne {
	if i != nil {
		buo.SetUpdateUser(*i)
	}
	return buo
}

// AddUpdateUser adds i to the "update_user" field.
func (buo *BaseinfoadministrativeareaallUpdateOne) AddUpdateUser(i int64) *BaseinfoadministrativeareaallUpdateOne {
	buo.mutation.AddUpdateUser(i)
	return buo
}

// ClearUpdateUser clears the value of the "update_user" field.
func (buo *BaseinfoadministrativeareaallUpdateOne) ClearUpdateUser() *BaseinfoadministrativeareaallUpdateOne {
	buo.mutation.ClearUpdateUser()
	return buo
}

// SetUpdateTime sets the "update_time" field.
func (buo *BaseinfoadministrativeareaallUpdateOne) SetUpdateTime(dt date.DateTime) *BaseinfoadministrativeareaallUpdateOne {
	buo.mutation.SetUpdateTime(dt)
	return buo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (buo *BaseinfoadministrativeareaallUpdateOne) ClearUpdateTime() *BaseinfoadministrativeareaallUpdateOne {
	buo.mutation.ClearUpdateTime()
	return buo
}

// SetParentxID sets the "parentx" edge to the Baseinfoadministrativeareaall entity by ID.
func (buo *BaseinfoadministrativeareaallUpdateOne) SetParentxID(id int64) *BaseinfoadministrativeareaallUpdateOne {
	buo.mutation.SetParentxID(id)
	return buo
}

// SetNillableParentxID sets the "parentx" edge to the Baseinfoadministrativeareaall entity by ID if the given value is not nil.
func (buo *BaseinfoadministrativeareaallUpdateOne) SetNillableParentxID(id *int64) *BaseinfoadministrativeareaallUpdateOne {
	if id != nil {
		buo = buo.SetParentxID(*id)
	}
	return buo
}

// SetParentx sets the "parentx" edge to the Baseinfoadministrativeareaall entity.
func (buo *BaseinfoadministrativeareaallUpdateOne) SetParentx(b *Baseinfoadministrativeareaall) *BaseinfoadministrativeareaallUpdateOne {
	return buo.SetParentxID(b.ID)
}

// AddChildrenIDs adds the "childrens" edge to the Baseinfoadministrativeareaall entity by IDs.
func (buo *BaseinfoadministrativeareaallUpdateOne) AddChildrenIDs(ids ...int64) *BaseinfoadministrativeareaallUpdateOne {
	buo.mutation.AddChildrenIDs(ids...)
	return buo
}

// AddChildrens adds the "childrens" edges to the Baseinfoadministrativeareaall entity.
func (buo *BaseinfoadministrativeareaallUpdateOne) AddChildrens(b ...*Baseinfoadministrativeareaall) *BaseinfoadministrativeareaallUpdateOne {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.AddChildrenIDs(ids...)
}

// Mutation returns the BaseinfoadministrativeareaallMutation object of the builder.
func (buo *BaseinfoadministrativeareaallUpdateOne) Mutation() *BaseinfoadministrativeareaallMutation {
	return buo.mutation
}

// ClearParentx clears the "parentx" edge to the Baseinfoadministrativeareaall entity.
func (buo *BaseinfoadministrativeareaallUpdateOne) ClearParentx() *BaseinfoadministrativeareaallUpdateOne {
	buo.mutation.ClearParentx()
	return buo
}

// ClearChildrens clears all "childrens" edges to the Baseinfoadministrativeareaall entity.
func (buo *BaseinfoadministrativeareaallUpdateOne) ClearChildrens() *BaseinfoadministrativeareaallUpdateOne {
	buo.mutation.ClearChildrens()
	return buo
}

// RemoveChildrenIDs removes the "childrens" edge to Baseinfoadministrativeareaall entities by IDs.
func (buo *BaseinfoadministrativeareaallUpdateOne) RemoveChildrenIDs(ids ...int64) *BaseinfoadministrativeareaallUpdateOne {
	buo.mutation.RemoveChildrenIDs(ids...)
	return buo
}

// RemoveChildrens removes "childrens" edges to Baseinfoadministrativeareaall entities.
func (buo *BaseinfoadministrativeareaallUpdateOne) RemoveChildrens(b ...*Baseinfoadministrativeareaall) *BaseinfoadministrativeareaallUpdateOne {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.RemoveChildrenIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BaseinfoadministrativeareaallUpdateOne) Select(field string, fields ...string) *BaseinfoadministrativeareaallUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Baseinfoadministrativeareaall entity.
func (buo *BaseinfoadministrativeareaallUpdateOne) Save(ctx context.Context) (*Baseinfoadministrativeareaall, error) {
	var (
		err  error
		node *Baseinfoadministrativeareaall
	)
	buo.defaults()
	if len(buo.hooks) == 0 {
		node, err = buo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BaseinfoadministrativeareaallMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			buo.mutation = mutation
			node, err = buo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(buo.hooks) - 1; i >= 0; i-- {
			if buo.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = buo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, buo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BaseinfoadministrativeareaallUpdateOne) SaveX(ctx context.Context) *Baseinfoadministrativeareaall {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BaseinfoadministrativeareaallUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BaseinfoadministrativeareaallUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buo *BaseinfoadministrativeareaallUpdateOne) defaults() {
	if _, ok := buo.mutation.UpdateTime(); !ok && !buo.mutation.UpdateTimeCleared() {
		v := baseinfoadministrativeareaall.UpdateDefaultUpdateTime()
		buo.mutation.SetUpdateTime(v)
	}
}

func (buo *BaseinfoadministrativeareaallUpdateOne) sqlSave(ctx context.Context) (_node *Baseinfoadministrativeareaall, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   baseinfoadministrativeareaall.Table,
			Columns: baseinfoadministrativeareaall.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: baseinfoadministrativeareaall.FieldID,
			},
		},
	}
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`schema: missing "Baseinfoadministrativeareaall.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, baseinfoadministrativeareaall.FieldID)
		for _, f := range fields {
			if !baseinfoadministrativeareaall.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("schema: invalid field %q for query", f)}
			}
			if f != baseinfoadministrativeareaall.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldCode,
		})
	}
	if value, ok := buo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldName,
		})
	}
	if value, ok := buo.mutation.Province(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldProvince,
		})
	}
	if value, ok := buo.mutation.City(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldCity,
		})
	}
	if value, ok := buo.mutation.Area(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldArea,
		})
	}
	if value, ok := buo.mutation.Town(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldTown,
		})
	}
	if value, ok := buo.mutation.AllName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldAllName,
		})
	}
	if value, ok := buo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldType,
		})
	}
	if value, ok := buo.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldType,
		})
	}
	if buo.mutation.TypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: baseinfoadministrativeareaall.FieldType,
		})
	}
	if value, ok := buo.mutation.TsVersion(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldTsVersion,
		})
	}
	if value, ok := buo.mutation.AddedTsVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldTsVersion,
		})
	}
	if buo.mutation.TsVersionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: baseinfoadministrativeareaall.FieldTsVersion,
		})
	}
	if value, ok := buo.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldIsDeleted,
		})
	}
	if value, ok := buo.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldIsDeleted,
		})
	}
	if value, ok := buo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldStatus,
		})
	}
	if value, ok := buo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldStatus,
		})
	}
	if buo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: baseinfoadministrativeareaall.FieldStatus,
		})
	}
	if value, ok := buo.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldCreateUser,
		})
	}
	if value, ok := buo.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldCreateUser,
		})
	}
	if buo.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: baseinfoadministrativeareaall.FieldCreateUser,
		})
	}
	if value, ok := buo.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldUpdateUser,
		})
	}
	if value, ok := buo.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldUpdateUser,
		})
	}
	if buo.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: baseinfoadministrativeareaall.FieldUpdateUser,
		})
	}
	if buo.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: baseinfoadministrativeareaall.FieldCreateTime,
		})
	}
	if value, ok := buo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldUpdateTime,
		})
	}
	if buo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: baseinfoadministrativeareaall.FieldUpdateTime,
		})
	}
	if buo.mutation.ParentxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   baseinfoadministrativeareaall.ParentxTable,
			Columns: []string{baseinfoadministrativeareaall.ParentxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: baseinfoadministrativeareaall.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.ParentxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   baseinfoadministrativeareaall.ParentxTable,
			Columns: []string{baseinfoadministrativeareaall.ParentxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: baseinfoadministrativeareaall.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.ChildrensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   baseinfoadministrativeareaall.ChildrensTable,
			Columns: []string{baseinfoadministrativeareaall.ChildrensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: baseinfoadministrativeareaall.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedChildrensIDs(); len(nodes) > 0 && !buo.mutation.ChildrensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   baseinfoadministrativeareaall.ChildrensTable,
			Columns: []string{baseinfoadministrativeareaall.ChildrensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: baseinfoadministrativeareaall.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.ChildrensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   baseinfoadministrativeareaall.ChildrensTable,
			Columns: []string{baseinfoadministrativeareaall.ChildrensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: baseinfoadministrativeareaall.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Baseinfoadministrativeareaall{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{baseinfoadministrativeareaall.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
