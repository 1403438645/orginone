// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/asallgroup"
	"orginone/common/schema/asmarketapp"
	"orginone/common/schema/asmarketappgroupdistributionrelation"
	"orginone/common/schema/predicate"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsMarketAppGroupDistributionRelationUpdate is the builder for updating AsMarketAppGroupDistributionRelation entities.
type AsMarketAppGroupDistributionRelationUpdate struct {
	config
	hooks    []Hook
	mutation *AsMarketAppGroupDistributionRelationMutation
}

// Where appends a list predicates to the AsMarketAppGroupDistributionRelationUpdate builder.
func (amagdru *AsMarketAppGroupDistributionRelationUpdate) Where(ps ...predicate.AsMarketAppGroupDistributionRelation) *AsMarketAppGroupDistributionRelationUpdate {
	amagdru.mutation.Where(ps...)
	return amagdru
}

// SetAppID sets the "app_id" field.
func (amagdru *AsMarketAppGroupDistributionRelationUpdate) SetAppID(i int64) *AsMarketAppGroupDistributionRelationUpdate {
	amagdru.mutation.SetAppID(i)
	return amagdru
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (amagdru *AsMarketAppGroupDistributionRelationUpdate) SetNillableAppID(i *int64) *AsMarketAppGroupDistributionRelationUpdate {
	if i != nil {
		amagdru.SetAppID(*i)
	}
	return amagdru
}

// ClearAppID clears the value of the "app_id" field.
func (amagdru *AsMarketAppGroupDistributionRelationUpdate) ClearAppID() *AsMarketAppGroupDistributionRelationUpdate {
	amagdru.mutation.ClearAppID()
	return amagdru
}

// SetRelationID sets the "relation_id" field.
func (amagdru *AsMarketAppGroupDistributionRelationUpdate) SetRelationID(i int64) *AsMarketAppGroupDistributionRelationUpdate {
	amagdru.mutation.ResetRelationID()
	amagdru.mutation.SetRelationID(i)
	return amagdru
}

// SetNillableRelationID sets the "relation_id" field if the given value is not nil.
func (amagdru *AsMarketAppGroupDistributionRelationUpdate) SetNillableRelationID(i *int64) *AsMarketAppGroupDistributionRelationUpdate {
	if i != nil {
		amagdru.SetRelationID(*i)
	}
	return amagdru
}

// AddRelationID adds i to the "relation_id" field.
func (amagdru *AsMarketAppGroupDistributionRelationUpdate) AddRelationID(i int64) *AsMarketAppGroupDistributionRelationUpdate {
	amagdru.mutation.AddRelationID(i)
	return amagdru
}

// ClearRelationID clears the value of the "relation_id" field.
func (amagdru *AsMarketAppGroupDistributionRelationUpdate) ClearRelationID() *AsMarketAppGroupDistributionRelationUpdate {
	amagdru.mutation.ClearRelationID()
	return amagdru
}

// SetGroupID sets the "group_id" field.
func (amagdru *AsMarketAppGroupDistributionRelationUpdate) SetGroupID(i int64) *AsMarketAppGroupDistributionRelationUpdate {
	amagdru.mutation.SetGroupID(i)
	return amagdru
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (amagdru *AsMarketAppGroupDistributionRelationUpdate) SetNillableGroupID(i *int64) *AsMarketAppGroupDistributionRelationUpdate {
	if i != nil {
		amagdru.SetGroupID(*i)
	}
	return amagdru
}

// ClearGroupID clears the value of the "group_id" field.
func (amagdru *AsMarketAppGroupDistributionRelationUpdate) ClearGroupID() *AsMarketAppGroupDistributionRelationUpdate {
	amagdru.mutation.ClearGroupID()
	return amagdru
}

// SetIsDeleted sets the "is_deleted" field.
func (amagdru *AsMarketAppGroupDistributionRelationUpdate) SetIsDeleted(i int64) *AsMarketAppGroupDistributionRelationUpdate {
	amagdru.mutation.ResetIsDeleted()
	amagdru.mutation.SetIsDeleted(i)
	return amagdru
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (amagdru *AsMarketAppGroupDistributionRelationUpdate) SetNillableIsDeleted(i *int64) *AsMarketAppGroupDistributionRelationUpdate {
	if i != nil {
		amagdru.SetIsDeleted(*i)
	}
	return amagdru
}

// AddIsDeleted adds i to the "is_deleted" field.
func (amagdru *AsMarketAppGroupDistributionRelationUpdate) AddIsDeleted(i int64) *AsMarketAppGroupDistributionRelationUpdate {
	amagdru.mutation.AddIsDeleted(i)
	return amagdru
}

// SetStatus sets the "status" field.
func (amagdru *AsMarketAppGroupDistributionRelationUpdate) SetStatus(i int64) *AsMarketAppGroupDistributionRelationUpdate {
	amagdru.mutation.ResetStatus()
	amagdru.mutation.SetStatus(i)
	return amagdru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (amagdru *AsMarketAppGroupDistributionRelationUpdate) SetNillableStatus(i *int64) *AsMarketAppGroupDistributionRelationUpdate {
	if i != nil {
		amagdru.SetStatus(*i)
	}
	return amagdru
}

// AddStatus adds i to the "status" field.
func (amagdru *AsMarketAppGroupDistributionRelationUpdate) AddStatus(i int64) *AsMarketAppGroupDistributionRelationUpdate {
	amagdru.mutation.AddStatus(i)
	return amagdru
}

// ClearStatus clears the value of the "status" field.
func (amagdru *AsMarketAppGroupDistributionRelationUpdate) ClearStatus() *AsMarketAppGroupDistributionRelationUpdate {
	amagdru.mutation.ClearStatus()
	return amagdru
}

// SetCreateUser sets the "create_user" field.
func (amagdru *AsMarketAppGroupDistributionRelationUpdate) SetCreateUser(i int64) *AsMarketAppGroupDistributionRelationUpdate {
	amagdru.mutation.ResetCreateUser()
	amagdru.mutation.SetCreateUser(i)
	return amagdru
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (amagdru *AsMarketAppGroupDistributionRelationUpdate) SetNillableCreateUser(i *int64) *AsMarketAppGroupDistributionRelationUpdate {
	if i != nil {
		amagdru.SetCreateUser(*i)
	}
	return amagdru
}

// AddCreateUser adds i to the "create_user" field.
func (amagdru *AsMarketAppGroupDistributionRelationUpdate) AddCreateUser(i int64) *AsMarketAppGroupDistributionRelationUpdate {
	amagdru.mutation.AddCreateUser(i)
	return amagdru
}

// ClearCreateUser clears the value of the "create_user" field.
func (amagdru *AsMarketAppGroupDistributionRelationUpdate) ClearCreateUser() *AsMarketAppGroupDistributionRelationUpdate {
	amagdru.mutation.ClearCreateUser()
	return amagdru
}

// SetUpdateUser sets the "update_user" field.
func (amagdru *AsMarketAppGroupDistributionRelationUpdate) SetUpdateUser(i int64) *AsMarketAppGroupDistributionRelationUpdate {
	amagdru.mutation.ResetUpdateUser()
	amagdru.mutation.SetUpdateUser(i)
	return amagdru
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (amagdru *AsMarketAppGroupDistributionRelationUpdate) SetNillableUpdateUser(i *int64) *AsMarketAppGroupDistributionRelationUpdate {
	if i != nil {
		amagdru.SetUpdateUser(*i)
	}
	return amagdru
}

// AddUpdateUser adds i to the "update_user" field.
func (amagdru *AsMarketAppGroupDistributionRelationUpdate) AddUpdateUser(i int64) *AsMarketAppGroupDistributionRelationUpdate {
	amagdru.mutation.AddUpdateUser(i)
	return amagdru
}

// ClearUpdateUser clears the value of the "update_user" field.
func (amagdru *AsMarketAppGroupDistributionRelationUpdate) ClearUpdateUser() *AsMarketAppGroupDistributionRelationUpdate {
	amagdru.mutation.ClearUpdateUser()
	return amagdru
}

// SetUpdateTime sets the "update_time" field.
func (amagdru *AsMarketAppGroupDistributionRelationUpdate) SetUpdateTime(dt date.DateTime) *AsMarketAppGroupDistributionRelationUpdate {
	amagdru.mutation.SetUpdateTime(dt)
	return amagdru
}

// ClearUpdateTime clears the value of the "update_time" field.
func (amagdru *AsMarketAppGroupDistributionRelationUpdate) ClearUpdateTime() *AsMarketAppGroupDistributionRelationUpdate {
	amagdru.mutation.ClearUpdateTime()
	return amagdru
}

// SetAppxID sets the "appx" edge to the AsMarketApp entity by ID.
func (amagdru *AsMarketAppGroupDistributionRelationUpdate) SetAppxID(id int64) *AsMarketAppGroupDistributionRelationUpdate {
	amagdru.mutation.SetAppxID(id)
	return amagdru
}

// SetNillableAppxID sets the "appx" edge to the AsMarketApp entity by ID if the given value is not nil.
func (amagdru *AsMarketAppGroupDistributionRelationUpdate) SetNillableAppxID(id *int64) *AsMarketAppGroupDistributionRelationUpdate {
	if id != nil {
		amagdru = amagdru.SetAppxID(*id)
	}
	return amagdru
}

// SetAppx sets the "appx" edge to the AsMarketApp entity.
func (amagdru *AsMarketAppGroupDistributionRelationUpdate) SetAppx(a *AsMarketApp) *AsMarketAppGroupDistributionRelationUpdate {
	return amagdru.SetAppxID(a.ID)
}

// SetGroupxID sets the "groupx" edge to the AsAllGroup entity by ID.
func (amagdru *AsMarketAppGroupDistributionRelationUpdate) SetGroupxID(id int64) *AsMarketAppGroupDistributionRelationUpdate {
	amagdru.mutation.SetGroupxID(id)
	return amagdru
}

// SetNillableGroupxID sets the "groupx" edge to the AsAllGroup entity by ID if the given value is not nil.
func (amagdru *AsMarketAppGroupDistributionRelationUpdate) SetNillableGroupxID(id *int64) *AsMarketAppGroupDistributionRelationUpdate {
	if id != nil {
		amagdru = amagdru.SetGroupxID(*id)
	}
	return amagdru
}

// SetGroupx sets the "groupx" edge to the AsAllGroup entity.
func (amagdru *AsMarketAppGroupDistributionRelationUpdate) SetGroupx(a *AsAllGroup) *AsMarketAppGroupDistributionRelationUpdate {
	return amagdru.SetGroupxID(a.ID)
}

// Mutation returns the AsMarketAppGroupDistributionRelationMutation object of the builder.
func (amagdru *AsMarketAppGroupDistributionRelationUpdate) Mutation() *AsMarketAppGroupDistributionRelationMutation {
	return amagdru.mutation
}

// ClearAppx clears the "appx" edge to the AsMarketApp entity.
func (amagdru *AsMarketAppGroupDistributionRelationUpdate) ClearAppx() *AsMarketAppGroupDistributionRelationUpdate {
	amagdru.mutation.ClearAppx()
	return amagdru
}

// ClearGroupx clears the "groupx" edge to the AsAllGroup entity.
func (amagdru *AsMarketAppGroupDistributionRelationUpdate) ClearGroupx() *AsMarketAppGroupDistributionRelationUpdate {
	amagdru.mutation.ClearGroupx()
	return amagdru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (amagdru *AsMarketAppGroupDistributionRelationUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	amagdru.defaults()
	if len(amagdru.hooks) == 0 {
		affected, err = amagdru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsMarketAppGroupDistributionRelationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			amagdru.mutation = mutation
			affected, err = amagdru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(amagdru.hooks) - 1; i >= 0; i-- {
			if amagdru.hooks[i] == nil {
				return 0, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = amagdru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, amagdru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (amagdru *AsMarketAppGroupDistributionRelationUpdate) SaveX(ctx context.Context) int {
	affected, err := amagdru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (amagdru *AsMarketAppGroupDistributionRelationUpdate) Exec(ctx context.Context) error {
	_, err := amagdru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amagdru *AsMarketAppGroupDistributionRelationUpdate) ExecX(ctx context.Context) {
	if err := amagdru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amagdru *AsMarketAppGroupDistributionRelationUpdate) defaults() {
	if _, ok := amagdru.mutation.UpdateTime(); !ok && !amagdru.mutation.UpdateTimeCleared() {
		v := asmarketappgroupdistributionrelation.UpdateDefaultUpdateTime()
		amagdru.mutation.SetUpdateTime(v)
	}
}

func (amagdru *AsMarketAppGroupDistributionRelationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asmarketappgroupdistributionrelation.Table,
			Columns: asmarketappgroupdistributionrelation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asmarketappgroupdistributionrelation.FieldID,
			},
		},
	}
	if ps := amagdru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amagdru.mutation.RelationID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappgroupdistributionrelation.FieldRelationID,
		})
	}
	if value, ok := amagdru.mutation.AddedRelationID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappgroupdistributionrelation.FieldRelationID,
		})
	}
	if amagdru.mutation.RelationIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappgroupdistributionrelation.FieldRelationID,
		})
	}
	if value, ok := amagdru.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappgroupdistributionrelation.FieldIsDeleted,
		})
	}
	if value, ok := amagdru.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappgroupdistributionrelation.FieldIsDeleted,
		})
	}
	if value, ok := amagdru.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappgroupdistributionrelation.FieldStatus,
		})
	}
	if value, ok := amagdru.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappgroupdistributionrelation.FieldStatus,
		})
	}
	if amagdru.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappgroupdistributionrelation.FieldStatus,
		})
	}
	if value, ok := amagdru.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappgroupdistributionrelation.FieldCreateUser,
		})
	}
	if value, ok := amagdru.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappgroupdistributionrelation.FieldCreateUser,
		})
	}
	if amagdru.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappgroupdistributionrelation.FieldCreateUser,
		})
	}
	if value, ok := amagdru.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappgroupdistributionrelation.FieldUpdateUser,
		})
	}
	if value, ok := amagdru.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappgroupdistributionrelation.FieldUpdateUser,
		})
	}
	if amagdru.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappgroupdistributionrelation.FieldUpdateUser,
		})
	}
	if amagdru.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketappgroupdistributionrelation.FieldCreateTime,
		})
	}
	if value, ok := amagdru.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketappgroupdistributionrelation.FieldUpdateTime,
		})
	}
	if amagdru.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketappgroupdistributionrelation.FieldUpdateTime,
		})
	}
	if amagdru.mutation.AppxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketappgroupdistributionrelation.AppxTable,
			Columns: []string{asmarketappgroupdistributionrelation.AppxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapp.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amagdru.mutation.AppxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketappgroupdistributionrelation.AppxTable,
			Columns: []string{asmarketappgroupdistributionrelation.AppxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapp.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amagdru.mutation.GroupxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketappgroupdistributionrelation.GroupxTable,
			Columns: []string{asmarketappgroupdistributionrelation.GroupxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asallgroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amagdru.mutation.GroupxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketappgroupdistributionrelation.GroupxTable,
			Columns: []string{asmarketappgroupdistributionrelation.GroupxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asallgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, amagdru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asmarketappgroupdistributionrelation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AsMarketAppGroupDistributionRelationUpdateOne is the builder for updating a single AsMarketAppGroupDistributionRelation entity.
type AsMarketAppGroupDistributionRelationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AsMarketAppGroupDistributionRelationMutation
}

// SetAppID sets the "app_id" field.
func (amagdruo *AsMarketAppGroupDistributionRelationUpdateOne) SetAppID(i int64) *AsMarketAppGroupDistributionRelationUpdateOne {
	amagdruo.mutation.SetAppID(i)
	return amagdruo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (amagdruo *AsMarketAppGroupDistributionRelationUpdateOne) SetNillableAppID(i *int64) *AsMarketAppGroupDistributionRelationUpdateOne {
	if i != nil {
		amagdruo.SetAppID(*i)
	}
	return amagdruo
}

// ClearAppID clears the value of the "app_id" field.
func (amagdruo *AsMarketAppGroupDistributionRelationUpdateOne) ClearAppID() *AsMarketAppGroupDistributionRelationUpdateOne {
	amagdruo.mutation.ClearAppID()
	return amagdruo
}

// SetRelationID sets the "relation_id" field.
func (amagdruo *AsMarketAppGroupDistributionRelationUpdateOne) SetRelationID(i int64) *AsMarketAppGroupDistributionRelationUpdateOne {
	amagdruo.mutation.ResetRelationID()
	amagdruo.mutation.SetRelationID(i)
	return amagdruo
}

// SetNillableRelationID sets the "relation_id" field if the given value is not nil.
func (amagdruo *AsMarketAppGroupDistributionRelationUpdateOne) SetNillableRelationID(i *int64) *AsMarketAppGroupDistributionRelationUpdateOne {
	if i != nil {
		amagdruo.SetRelationID(*i)
	}
	return amagdruo
}

// AddRelationID adds i to the "relation_id" field.
func (amagdruo *AsMarketAppGroupDistributionRelationUpdateOne) AddRelationID(i int64) *AsMarketAppGroupDistributionRelationUpdateOne {
	amagdruo.mutation.AddRelationID(i)
	return amagdruo
}

// ClearRelationID clears the value of the "relation_id" field.
func (amagdruo *AsMarketAppGroupDistributionRelationUpdateOne) ClearRelationID() *AsMarketAppGroupDistributionRelationUpdateOne {
	amagdruo.mutation.ClearRelationID()
	return amagdruo
}

// SetGroupID sets the "group_id" field.
func (amagdruo *AsMarketAppGroupDistributionRelationUpdateOne) SetGroupID(i int64) *AsMarketAppGroupDistributionRelationUpdateOne {
	amagdruo.mutation.SetGroupID(i)
	return amagdruo
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (amagdruo *AsMarketAppGroupDistributionRelationUpdateOne) SetNillableGroupID(i *int64) *AsMarketAppGroupDistributionRelationUpdateOne {
	if i != nil {
		amagdruo.SetGroupID(*i)
	}
	return amagdruo
}

// ClearGroupID clears the value of the "group_id" field.
func (amagdruo *AsMarketAppGroupDistributionRelationUpdateOne) ClearGroupID() *AsMarketAppGroupDistributionRelationUpdateOne {
	amagdruo.mutation.ClearGroupID()
	return amagdruo
}

// SetIsDeleted sets the "is_deleted" field.
func (amagdruo *AsMarketAppGroupDistributionRelationUpdateOne) SetIsDeleted(i int64) *AsMarketAppGroupDistributionRelationUpdateOne {
	amagdruo.mutation.ResetIsDeleted()
	amagdruo.mutation.SetIsDeleted(i)
	return amagdruo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (amagdruo *AsMarketAppGroupDistributionRelationUpdateOne) SetNillableIsDeleted(i *int64) *AsMarketAppGroupDistributionRelationUpdateOne {
	if i != nil {
		amagdruo.SetIsDeleted(*i)
	}
	return amagdruo
}

// AddIsDeleted adds i to the "is_deleted" field.
func (amagdruo *AsMarketAppGroupDistributionRelationUpdateOne) AddIsDeleted(i int64) *AsMarketAppGroupDistributionRelationUpdateOne {
	amagdruo.mutation.AddIsDeleted(i)
	return amagdruo
}

// SetStatus sets the "status" field.
func (amagdruo *AsMarketAppGroupDistributionRelationUpdateOne) SetStatus(i int64) *AsMarketAppGroupDistributionRelationUpdateOne {
	amagdruo.mutation.ResetStatus()
	amagdruo.mutation.SetStatus(i)
	return amagdruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (amagdruo *AsMarketAppGroupDistributionRelationUpdateOne) SetNillableStatus(i *int64) *AsMarketAppGroupDistributionRelationUpdateOne {
	if i != nil {
		amagdruo.SetStatus(*i)
	}
	return amagdruo
}

// AddStatus adds i to the "status" field.
func (amagdruo *AsMarketAppGroupDistributionRelationUpdateOne) AddStatus(i int64) *AsMarketAppGroupDistributionRelationUpdateOne {
	amagdruo.mutation.AddStatus(i)
	return amagdruo
}

// ClearStatus clears the value of the "status" field.
func (amagdruo *AsMarketAppGroupDistributionRelationUpdateOne) ClearStatus() *AsMarketAppGroupDistributionRelationUpdateOne {
	amagdruo.mutation.ClearStatus()
	return amagdruo
}

// SetCreateUser sets the "create_user" field.
func (amagdruo *AsMarketAppGroupDistributionRelationUpdateOne) SetCreateUser(i int64) *AsMarketAppGroupDistributionRelationUpdateOne {
	amagdruo.mutation.ResetCreateUser()
	amagdruo.mutation.SetCreateUser(i)
	return amagdruo
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (amagdruo *AsMarketAppGroupDistributionRelationUpdateOne) SetNillableCreateUser(i *int64) *AsMarketAppGroupDistributionRelationUpdateOne {
	if i != nil {
		amagdruo.SetCreateUser(*i)
	}
	return amagdruo
}

// AddCreateUser adds i to the "create_user" field.
func (amagdruo *AsMarketAppGroupDistributionRelationUpdateOne) AddCreateUser(i int64) *AsMarketAppGroupDistributionRelationUpdateOne {
	amagdruo.mutation.AddCreateUser(i)
	return amagdruo
}

// ClearCreateUser clears the value of the "create_user" field.
func (amagdruo *AsMarketAppGroupDistributionRelationUpdateOne) ClearCreateUser() *AsMarketAppGroupDistributionRelationUpdateOne {
	amagdruo.mutation.ClearCreateUser()
	return amagdruo
}

// SetUpdateUser sets the "update_user" field.
func (amagdruo *AsMarketAppGroupDistributionRelationUpdateOne) SetUpdateUser(i int64) *AsMarketAppGroupDistributionRelationUpdateOne {
	amagdruo.mutation.ResetUpdateUser()
	amagdruo.mutation.SetUpdateUser(i)
	return amagdruo
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (amagdruo *AsMarketAppGroupDistributionRelationUpdateOne) SetNillableUpdateUser(i *int64) *AsMarketAppGroupDistributionRelationUpdateOne {
	if i != nil {
		amagdruo.SetUpdateUser(*i)
	}
	return amagdruo
}

// AddUpdateUser adds i to the "update_user" field.
func (amagdruo *AsMarketAppGroupDistributionRelationUpdateOne) AddUpdateUser(i int64) *AsMarketAppGroupDistributionRelationUpdateOne {
	amagdruo.mutation.AddUpdateUser(i)
	return amagdruo
}

// ClearUpdateUser clears the value of the "update_user" field.
func (amagdruo *AsMarketAppGroupDistributionRelationUpdateOne) ClearUpdateUser() *AsMarketAppGroupDistributionRelationUpdateOne {
	amagdruo.mutation.ClearUpdateUser()
	return amagdruo
}

// SetUpdateTime sets the "update_time" field.
func (amagdruo *AsMarketAppGroupDistributionRelationUpdateOne) SetUpdateTime(dt date.DateTime) *AsMarketAppGroupDistributionRelationUpdateOne {
	amagdruo.mutation.SetUpdateTime(dt)
	return amagdruo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (amagdruo *AsMarketAppGroupDistributionRelationUpdateOne) ClearUpdateTime() *AsMarketAppGroupDistributionRelationUpdateOne {
	amagdruo.mutation.ClearUpdateTime()
	return amagdruo
}

// SetAppxID sets the "appx" edge to the AsMarketApp entity by ID.
func (amagdruo *AsMarketAppGroupDistributionRelationUpdateOne) SetAppxID(id int64) *AsMarketAppGroupDistributionRelationUpdateOne {
	amagdruo.mutation.SetAppxID(id)
	return amagdruo
}

// SetNillableAppxID sets the "appx" edge to the AsMarketApp entity by ID if the given value is not nil.
func (amagdruo *AsMarketAppGroupDistributionRelationUpdateOne) SetNillableAppxID(id *int64) *AsMarketAppGroupDistributionRelationUpdateOne {
	if id != nil {
		amagdruo = amagdruo.SetAppxID(*id)
	}
	return amagdruo
}

// SetAppx sets the "appx" edge to the AsMarketApp entity.
func (amagdruo *AsMarketAppGroupDistributionRelationUpdateOne) SetAppx(a *AsMarketApp) *AsMarketAppGroupDistributionRelationUpdateOne {
	return amagdruo.SetAppxID(a.ID)
}

// SetGroupxID sets the "groupx" edge to the AsAllGroup entity by ID.
func (amagdruo *AsMarketAppGroupDistributionRelationUpdateOne) SetGroupxID(id int64) *AsMarketAppGroupDistributionRelationUpdateOne {
	amagdruo.mutation.SetGroupxID(id)
	return amagdruo
}

// SetNillableGroupxID sets the "groupx" edge to the AsAllGroup entity by ID if the given value is not nil.
func (amagdruo *AsMarketAppGroupDistributionRelationUpdateOne) SetNillableGroupxID(id *int64) *AsMarketAppGroupDistributionRelationUpdateOne {
	if id != nil {
		amagdruo = amagdruo.SetGroupxID(*id)
	}
	return amagdruo
}

// SetGroupx sets the "groupx" edge to the AsAllGroup entity.
func (amagdruo *AsMarketAppGroupDistributionRelationUpdateOne) SetGroupx(a *AsAllGroup) *AsMarketAppGroupDistributionRelationUpdateOne {
	return amagdruo.SetGroupxID(a.ID)
}

// Mutation returns the AsMarketAppGroupDistributionRelationMutation object of the builder.
func (amagdruo *AsMarketAppGroupDistributionRelationUpdateOne) Mutation() *AsMarketAppGroupDistributionRelationMutation {
	return amagdruo.mutation
}

// ClearAppx clears the "appx" edge to the AsMarketApp entity.
func (amagdruo *AsMarketAppGroupDistributionRelationUpdateOne) ClearAppx() *AsMarketAppGroupDistributionRelationUpdateOne {
	amagdruo.mutation.ClearAppx()
	return amagdruo
}

// ClearGroupx clears the "groupx" edge to the AsAllGroup entity.
func (amagdruo *AsMarketAppGroupDistributionRelationUpdateOne) ClearGroupx() *AsMarketAppGroupDistributionRelationUpdateOne {
	amagdruo.mutation.ClearGroupx()
	return amagdruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (amagdruo *AsMarketAppGroupDistributionRelationUpdateOne) Select(field string, fields ...string) *AsMarketAppGroupDistributionRelationUpdateOne {
	amagdruo.fields = append([]string{field}, fields...)
	return amagdruo
}

// Save executes the query and returns the updated AsMarketAppGroupDistributionRelation entity.
func (amagdruo *AsMarketAppGroupDistributionRelationUpdateOne) Save(ctx context.Context) (*AsMarketAppGroupDistributionRelation, error) {
	var (
		err  error
		node *AsMarketAppGroupDistributionRelation
	)
	amagdruo.defaults()
	if len(amagdruo.hooks) == 0 {
		node, err = amagdruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsMarketAppGroupDistributionRelationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			amagdruo.mutation = mutation
			node, err = amagdruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(amagdruo.hooks) - 1; i >= 0; i-- {
			if amagdruo.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = amagdruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, amagdruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (amagdruo *AsMarketAppGroupDistributionRelationUpdateOne) SaveX(ctx context.Context) *AsMarketAppGroupDistributionRelation {
	node, err := amagdruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (amagdruo *AsMarketAppGroupDistributionRelationUpdateOne) Exec(ctx context.Context) error {
	_, err := amagdruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amagdruo *AsMarketAppGroupDistributionRelationUpdateOne) ExecX(ctx context.Context) {
	if err := amagdruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amagdruo *AsMarketAppGroupDistributionRelationUpdateOne) defaults() {
	if _, ok := amagdruo.mutation.UpdateTime(); !ok && !amagdruo.mutation.UpdateTimeCleared() {
		v := asmarketappgroupdistributionrelation.UpdateDefaultUpdateTime()
		amagdruo.mutation.SetUpdateTime(v)
	}
}

func (amagdruo *AsMarketAppGroupDistributionRelationUpdateOne) sqlSave(ctx context.Context) (_node *AsMarketAppGroupDistributionRelation, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asmarketappgroupdistributionrelation.Table,
			Columns: asmarketappgroupdistributionrelation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asmarketappgroupdistributionrelation.FieldID,
			},
		},
	}
	id, ok := amagdruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`schema: missing "AsMarketAppGroupDistributionRelation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := amagdruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asmarketappgroupdistributionrelation.FieldID)
		for _, f := range fields {
			if !asmarketappgroupdistributionrelation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("schema: invalid field %q for query", f)}
			}
			if f != asmarketappgroupdistributionrelation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := amagdruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amagdruo.mutation.RelationID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappgroupdistributionrelation.FieldRelationID,
		})
	}
	if value, ok := amagdruo.mutation.AddedRelationID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappgroupdistributionrelation.FieldRelationID,
		})
	}
	if amagdruo.mutation.RelationIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappgroupdistributionrelation.FieldRelationID,
		})
	}
	if value, ok := amagdruo.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappgroupdistributionrelation.FieldIsDeleted,
		})
	}
	if value, ok := amagdruo.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappgroupdistributionrelation.FieldIsDeleted,
		})
	}
	if value, ok := amagdruo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappgroupdistributionrelation.FieldStatus,
		})
	}
	if value, ok := amagdruo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappgroupdistributionrelation.FieldStatus,
		})
	}
	if amagdruo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappgroupdistributionrelation.FieldStatus,
		})
	}
	if value, ok := amagdruo.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappgroupdistributionrelation.FieldCreateUser,
		})
	}
	if value, ok := amagdruo.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappgroupdistributionrelation.FieldCreateUser,
		})
	}
	if amagdruo.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappgroupdistributionrelation.FieldCreateUser,
		})
	}
	if value, ok := amagdruo.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappgroupdistributionrelation.FieldUpdateUser,
		})
	}
	if value, ok := amagdruo.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappgroupdistributionrelation.FieldUpdateUser,
		})
	}
	if amagdruo.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappgroupdistributionrelation.FieldUpdateUser,
		})
	}
	if amagdruo.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketappgroupdistributionrelation.FieldCreateTime,
		})
	}
	if value, ok := amagdruo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketappgroupdistributionrelation.FieldUpdateTime,
		})
	}
	if amagdruo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketappgroupdistributionrelation.FieldUpdateTime,
		})
	}
	if amagdruo.mutation.AppxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketappgroupdistributionrelation.AppxTable,
			Columns: []string{asmarketappgroupdistributionrelation.AppxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapp.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amagdruo.mutation.AppxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketappgroupdistributionrelation.AppxTable,
			Columns: []string{asmarketappgroupdistributionrelation.AppxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapp.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amagdruo.mutation.GroupxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketappgroupdistributionrelation.GroupxTable,
			Columns: []string{asmarketappgroupdistributionrelation.GroupxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asallgroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amagdruo.mutation.GroupxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketappgroupdistributionrelation.GroupxTable,
			Columns: []string{asmarketappgroupdistributionrelation.GroupxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asallgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AsMarketAppGroupDistributionRelation{config: amagdruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, amagdruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asmarketappgroupdistributionrelation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
