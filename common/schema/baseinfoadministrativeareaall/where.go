// Code generated by entc, DO NOT EDIT.

package baseinfoadministrativeareaall

import (
	"orginone/common/schema/predicate"
	"orginone/common/tools/date"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Pid applies equality check predicate on the "pid" field. It's identical to PidEQ.
func Pid(v int64) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPid), v))
	})
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCode), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Province applies equality check predicate on the "province" field. It's identical to ProvinceEQ.
func Province(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProvince), v))
	})
}

// City applies equality check predicate on the "city" field. It's identical to CityEQ.
func City(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCity), v))
	})
}

// Area applies equality check predicate on the "area" field. It's identical to AreaEQ.
func Area(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldArea), v))
	})
}

// Town applies equality check predicate on the "town" field. It's identical to TownEQ.
func Town(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTown), v))
	})
}

// AllName applies equality check predicate on the "all_name" field. It's identical to AllNameEQ.
func AllName(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAllName), v))
	})
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v int32) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TsVersion applies equality check predicate on the "ts_version" field. It's identical to TsVersionEQ.
func TsVersion(v int32) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTsVersion), v))
	})
}

// IsDeleted applies equality check predicate on the "is_deleted" field. It's identical to IsDeletedEQ.
func IsDeleted(v int64) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDeleted), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int64) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// CreateUser applies equality check predicate on the "create_user" field. It's identical to CreateUserEQ.
func CreateUser(v int64) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateUser), v))
	})
}

// UpdateUser applies equality check predicate on the "update_user" field. It's identical to UpdateUserEQ.
func UpdateUser(v int64) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateUser), v))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v date.DateTime) predicate.Baseinfoadministrativeareaall {
	vc := time.Time(v)
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), vc))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v date.DateTime) predicate.Baseinfoadministrativeareaall {
	vc := time.Time(v)
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), vc))
	})
}

// PidEQ applies the EQ predicate on the "pid" field.
func PidEQ(v int64) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPid), v))
	})
}

// PidNEQ applies the NEQ predicate on the "pid" field.
func PidNEQ(v int64) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPid), v))
	})
}

// PidIn applies the In predicate on the "pid" field.
func PidIn(vs ...int64) predicate.Baseinfoadministrativeareaall {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPid), v...))
	})
}

// PidNotIn applies the NotIn predicate on the "pid" field.
func PidNotIn(vs ...int64) predicate.Baseinfoadministrativeareaall {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPid), v...))
	})
}

// PidIsNil applies the IsNil predicate on the "pid" field.
func PidIsNil() predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPid)))
	})
}

// PidNotNil applies the NotNil predicate on the "pid" field.
func PidNotNil() predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPid)))
	})
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCode), v))
	})
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCode), v))
	})
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Baseinfoadministrativeareaall {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCode), v...))
	})
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Baseinfoadministrativeareaall {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCode), v...))
	})
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCode), v))
	})
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCode), v))
	})
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCode), v))
	})
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCode), v))
	})
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCode), v))
	})
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCode), v))
	})
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCode), v))
	})
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCode), v))
	})
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCode), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Baseinfoadministrativeareaall {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Baseinfoadministrativeareaall {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// ProvinceEQ applies the EQ predicate on the "province" field.
func ProvinceEQ(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProvince), v))
	})
}

// ProvinceNEQ applies the NEQ predicate on the "province" field.
func ProvinceNEQ(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProvince), v))
	})
}

// ProvinceIn applies the In predicate on the "province" field.
func ProvinceIn(vs ...string) predicate.Baseinfoadministrativeareaall {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProvince), v...))
	})
}

// ProvinceNotIn applies the NotIn predicate on the "province" field.
func ProvinceNotIn(vs ...string) predicate.Baseinfoadministrativeareaall {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProvince), v...))
	})
}

// ProvinceGT applies the GT predicate on the "province" field.
func ProvinceGT(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProvince), v))
	})
}

// ProvinceGTE applies the GTE predicate on the "province" field.
func ProvinceGTE(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProvince), v))
	})
}

// ProvinceLT applies the LT predicate on the "province" field.
func ProvinceLT(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProvince), v))
	})
}

// ProvinceLTE applies the LTE predicate on the "province" field.
func ProvinceLTE(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProvince), v))
	})
}

// ProvinceContains applies the Contains predicate on the "province" field.
func ProvinceContains(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProvince), v))
	})
}

// ProvinceHasPrefix applies the HasPrefix predicate on the "province" field.
func ProvinceHasPrefix(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProvince), v))
	})
}

// ProvinceHasSuffix applies the HasSuffix predicate on the "province" field.
func ProvinceHasSuffix(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProvince), v))
	})
}

// ProvinceEqualFold applies the EqualFold predicate on the "province" field.
func ProvinceEqualFold(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProvince), v))
	})
}

// ProvinceContainsFold applies the ContainsFold predicate on the "province" field.
func ProvinceContainsFold(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProvince), v))
	})
}

// CityEQ applies the EQ predicate on the "city" field.
func CityEQ(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCity), v))
	})
}

// CityNEQ applies the NEQ predicate on the "city" field.
func CityNEQ(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCity), v))
	})
}

// CityIn applies the In predicate on the "city" field.
func CityIn(vs ...string) predicate.Baseinfoadministrativeareaall {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCity), v...))
	})
}

// CityNotIn applies the NotIn predicate on the "city" field.
func CityNotIn(vs ...string) predicate.Baseinfoadministrativeareaall {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCity), v...))
	})
}

// CityGT applies the GT predicate on the "city" field.
func CityGT(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCity), v))
	})
}

// CityGTE applies the GTE predicate on the "city" field.
func CityGTE(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCity), v))
	})
}

// CityLT applies the LT predicate on the "city" field.
func CityLT(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCity), v))
	})
}

// CityLTE applies the LTE predicate on the "city" field.
func CityLTE(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCity), v))
	})
}

// CityContains applies the Contains predicate on the "city" field.
func CityContains(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCity), v))
	})
}

// CityHasPrefix applies the HasPrefix predicate on the "city" field.
func CityHasPrefix(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCity), v))
	})
}

// CityHasSuffix applies the HasSuffix predicate on the "city" field.
func CityHasSuffix(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCity), v))
	})
}

// CityEqualFold applies the EqualFold predicate on the "city" field.
func CityEqualFold(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCity), v))
	})
}

// CityContainsFold applies the ContainsFold predicate on the "city" field.
func CityContainsFold(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCity), v))
	})
}

// AreaEQ applies the EQ predicate on the "area" field.
func AreaEQ(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldArea), v))
	})
}

// AreaNEQ applies the NEQ predicate on the "area" field.
func AreaNEQ(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldArea), v))
	})
}

// AreaIn applies the In predicate on the "area" field.
func AreaIn(vs ...string) predicate.Baseinfoadministrativeareaall {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldArea), v...))
	})
}

// AreaNotIn applies the NotIn predicate on the "area" field.
func AreaNotIn(vs ...string) predicate.Baseinfoadministrativeareaall {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldArea), v...))
	})
}

// AreaGT applies the GT predicate on the "area" field.
func AreaGT(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldArea), v))
	})
}

// AreaGTE applies the GTE predicate on the "area" field.
func AreaGTE(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldArea), v))
	})
}

// AreaLT applies the LT predicate on the "area" field.
func AreaLT(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldArea), v))
	})
}

// AreaLTE applies the LTE predicate on the "area" field.
func AreaLTE(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldArea), v))
	})
}

// AreaContains applies the Contains predicate on the "area" field.
func AreaContains(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldArea), v))
	})
}

// AreaHasPrefix applies the HasPrefix predicate on the "area" field.
func AreaHasPrefix(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldArea), v))
	})
}

// AreaHasSuffix applies the HasSuffix predicate on the "area" field.
func AreaHasSuffix(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldArea), v))
	})
}

// AreaEqualFold applies the EqualFold predicate on the "area" field.
func AreaEqualFold(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldArea), v))
	})
}

// AreaContainsFold applies the ContainsFold predicate on the "area" field.
func AreaContainsFold(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldArea), v))
	})
}

// TownEQ applies the EQ predicate on the "town" field.
func TownEQ(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTown), v))
	})
}

// TownNEQ applies the NEQ predicate on the "town" field.
func TownNEQ(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTown), v))
	})
}

// TownIn applies the In predicate on the "town" field.
func TownIn(vs ...string) predicate.Baseinfoadministrativeareaall {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTown), v...))
	})
}

// TownNotIn applies the NotIn predicate on the "town" field.
func TownNotIn(vs ...string) predicate.Baseinfoadministrativeareaall {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTown), v...))
	})
}

// TownGT applies the GT predicate on the "town" field.
func TownGT(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTown), v))
	})
}

// TownGTE applies the GTE predicate on the "town" field.
func TownGTE(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTown), v))
	})
}

// TownLT applies the LT predicate on the "town" field.
func TownLT(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTown), v))
	})
}

// TownLTE applies the LTE predicate on the "town" field.
func TownLTE(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTown), v))
	})
}

// TownContains applies the Contains predicate on the "town" field.
func TownContains(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTown), v))
	})
}

// TownHasPrefix applies the HasPrefix predicate on the "town" field.
func TownHasPrefix(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTown), v))
	})
}

// TownHasSuffix applies the HasSuffix predicate on the "town" field.
func TownHasSuffix(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTown), v))
	})
}

// TownEqualFold applies the EqualFold predicate on the "town" field.
func TownEqualFold(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTown), v))
	})
}

// TownContainsFold applies the ContainsFold predicate on the "town" field.
func TownContainsFold(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTown), v))
	})
}

// AllNameEQ applies the EQ predicate on the "all_name" field.
func AllNameEQ(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAllName), v))
	})
}

// AllNameNEQ applies the NEQ predicate on the "all_name" field.
func AllNameNEQ(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAllName), v))
	})
}

// AllNameIn applies the In predicate on the "all_name" field.
func AllNameIn(vs ...string) predicate.Baseinfoadministrativeareaall {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAllName), v...))
	})
}

// AllNameNotIn applies the NotIn predicate on the "all_name" field.
func AllNameNotIn(vs ...string) predicate.Baseinfoadministrativeareaall {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAllName), v...))
	})
}

// AllNameGT applies the GT predicate on the "all_name" field.
func AllNameGT(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAllName), v))
	})
}

// AllNameGTE applies the GTE predicate on the "all_name" field.
func AllNameGTE(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAllName), v))
	})
}

// AllNameLT applies the LT predicate on the "all_name" field.
func AllNameLT(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAllName), v))
	})
}

// AllNameLTE applies the LTE predicate on the "all_name" field.
func AllNameLTE(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAllName), v))
	})
}

// AllNameContains applies the Contains predicate on the "all_name" field.
func AllNameContains(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAllName), v))
	})
}

// AllNameHasPrefix applies the HasPrefix predicate on the "all_name" field.
func AllNameHasPrefix(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAllName), v))
	})
}

// AllNameHasSuffix applies the HasSuffix predicate on the "all_name" field.
func AllNameHasSuffix(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAllName), v))
	})
}

// AllNameEqualFold applies the EqualFold predicate on the "all_name" field.
func AllNameEqualFold(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAllName), v))
	})
}

// AllNameContainsFold applies the ContainsFold predicate on the "all_name" field.
func AllNameContainsFold(v string) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAllName), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v int32) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v int32) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...int32) predicate.Baseinfoadministrativeareaall {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...int32) predicate.Baseinfoadministrativeareaall {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v int32) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldType), v))
	})
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v int32) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldType), v))
	})
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v int32) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldType), v))
	})
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v int32) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldType), v))
	})
}

// TypeIsNil applies the IsNil predicate on the "type" field.
func TypeIsNil() predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldType)))
	})
}

// TypeNotNil applies the NotNil predicate on the "type" field.
func TypeNotNil() predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldType)))
	})
}

// TsVersionEQ applies the EQ predicate on the "ts_version" field.
func TsVersionEQ(v int32) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTsVersion), v))
	})
}

// TsVersionNEQ applies the NEQ predicate on the "ts_version" field.
func TsVersionNEQ(v int32) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTsVersion), v))
	})
}

// TsVersionIn applies the In predicate on the "ts_version" field.
func TsVersionIn(vs ...int32) predicate.Baseinfoadministrativeareaall {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTsVersion), v...))
	})
}

// TsVersionNotIn applies the NotIn predicate on the "ts_version" field.
func TsVersionNotIn(vs ...int32) predicate.Baseinfoadministrativeareaall {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTsVersion), v...))
	})
}

// TsVersionGT applies the GT predicate on the "ts_version" field.
func TsVersionGT(v int32) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTsVersion), v))
	})
}

// TsVersionGTE applies the GTE predicate on the "ts_version" field.
func TsVersionGTE(v int32) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTsVersion), v))
	})
}

// TsVersionLT applies the LT predicate on the "ts_version" field.
func TsVersionLT(v int32) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTsVersion), v))
	})
}

// TsVersionLTE applies the LTE predicate on the "ts_version" field.
func TsVersionLTE(v int32) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTsVersion), v))
	})
}

// TsVersionIsNil applies the IsNil predicate on the "ts_version" field.
func TsVersionIsNil() predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTsVersion)))
	})
}

// TsVersionNotNil applies the NotNil predicate on the "ts_version" field.
func TsVersionNotNil() predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTsVersion)))
	})
}

// IsDeletedEQ applies the EQ predicate on the "is_deleted" field.
func IsDeletedEQ(v int64) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedNEQ applies the NEQ predicate on the "is_deleted" field.
func IsDeletedNEQ(v int64) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedIn applies the In predicate on the "is_deleted" field.
func IsDeletedIn(vs ...int64) predicate.Baseinfoadministrativeareaall {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsDeleted), v...))
	})
}

// IsDeletedNotIn applies the NotIn predicate on the "is_deleted" field.
func IsDeletedNotIn(vs ...int64) predicate.Baseinfoadministrativeareaall {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsDeleted), v...))
	})
}

// IsDeletedGT applies the GT predicate on the "is_deleted" field.
func IsDeletedGT(v int64) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedGTE applies the GTE predicate on the "is_deleted" field.
func IsDeletedGTE(v int64) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedLT applies the LT predicate on the "is_deleted" field.
func IsDeletedLT(v int64) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedLTE applies the LTE predicate on the "is_deleted" field.
func IsDeletedLTE(v int64) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsDeleted), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int64) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int64) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int64) predicate.Baseinfoadministrativeareaall {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int64) predicate.Baseinfoadministrativeareaall {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int64) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int64) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int64) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int64) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStatus)))
	})
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStatus)))
	})
}

// CreateUserEQ applies the EQ predicate on the "create_user" field.
func CreateUserEQ(v int64) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateUser), v))
	})
}

// CreateUserNEQ applies the NEQ predicate on the "create_user" field.
func CreateUserNEQ(v int64) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateUser), v))
	})
}

// CreateUserIn applies the In predicate on the "create_user" field.
func CreateUserIn(vs ...int64) predicate.Baseinfoadministrativeareaall {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateUser), v...))
	})
}

// CreateUserNotIn applies the NotIn predicate on the "create_user" field.
func CreateUserNotIn(vs ...int64) predicate.Baseinfoadministrativeareaall {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateUser), v...))
	})
}

// CreateUserGT applies the GT predicate on the "create_user" field.
func CreateUserGT(v int64) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateUser), v))
	})
}

// CreateUserGTE applies the GTE predicate on the "create_user" field.
func CreateUserGTE(v int64) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateUser), v))
	})
}

// CreateUserLT applies the LT predicate on the "create_user" field.
func CreateUserLT(v int64) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateUser), v))
	})
}

// CreateUserLTE applies the LTE predicate on the "create_user" field.
func CreateUserLTE(v int64) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateUser), v))
	})
}

// CreateUserIsNil applies the IsNil predicate on the "create_user" field.
func CreateUserIsNil() predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreateUser)))
	})
}

// CreateUserNotNil applies the NotNil predicate on the "create_user" field.
func CreateUserNotNil() predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreateUser)))
	})
}

// UpdateUserEQ applies the EQ predicate on the "update_user" field.
func UpdateUserEQ(v int64) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserNEQ applies the NEQ predicate on the "update_user" field.
func UpdateUserNEQ(v int64) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserIn applies the In predicate on the "update_user" field.
func UpdateUserIn(vs ...int64) predicate.Baseinfoadministrativeareaall {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateUser), v...))
	})
}

// UpdateUserNotIn applies the NotIn predicate on the "update_user" field.
func UpdateUserNotIn(vs ...int64) predicate.Baseinfoadministrativeareaall {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateUser), v...))
	})
}

// UpdateUserGT applies the GT predicate on the "update_user" field.
func UpdateUserGT(v int64) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserGTE applies the GTE predicate on the "update_user" field.
func UpdateUserGTE(v int64) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserLT applies the LT predicate on the "update_user" field.
func UpdateUserLT(v int64) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserLTE applies the LTE predicate on the "update_user" field.
func UpdateUserLTE(v int64) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserIsNil applies the IsNil predicate on the "update_user" field.
func UpdateUserIsNil() predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdateUser)))
	})
}

// UpdateUserNotNil applies the NotNil predicate on the "update_user" field.
func UpdateUserNotNil() predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdateUser)))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v date.DateTime) predicate.Baseinfoadministrativeareaall {
	vc := time.Time(v)
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v date.DateTime) predicate.Baseinfoadministrativeareaall {
	vc := time.Time(v)
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...date.DateTime) predicate.Baseinfoadministrativeareaall {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...date.DateTime) predicate.Baseinfoadministrativeareaall {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v date.DateTime) predicate.Baseinfoadministrativeareaall {
	vc := time.Time(v)
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v date.DateTime) predicate.Baseinfoadministrativeareaall {
	vc := time.Time(v)
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v date.DateTime) predicate.Baseinfoadministrativeareaall {
	vc := time.Time(v)
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v date.DateTime) predicate.Baseinfoadministrativeareaall {
	vc := time.Time(v)
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeIsNil applies the IsNil predicate on the "create_time" field.
func CreateTimeIsNil() predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreateTime)))
	})
}

// CreateTimeNotNil applies the NotNil predicate on the "create_time" field.
func CreateTimeNotNil() predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreateTime)))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v date.DateTime) predicate.Baseinfoadministrativeareaall {
	vc := time.Time(v)
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v date.DateTime) predicate.Baseinfoadministrativeareaall {
	vc := time.Time(v)
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...date.DateTime) predicate.Baseinfoadministrativeareaall {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...date.DateTime) predicate.Baseinfoadministrativeareaall {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v date.DateTime) predicate.Baseinfoadministrativeareaall {
	vc := time.Time(v)
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v date.DateTime) predicate.Baseinfoadministrativeareaall {
	vc := time.Time(v)
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v date.DateTime) predicate.Baseinfoadministrativeareaall {
	vc := time.Time(v)
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v date.DateTime) predicate.Baseinfoadministrativeareaall {
	vc := time.Time(v)
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeIsNil applies the IsNil predicate on the "update_time" field.
func UpdateTimeIsNil() predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdateTime)))
	})
}

// UpdateTimeNotNil applies the NotNil predicate on the "update_time" field.
func UpdateTimeNotNil() predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdateTime)))
	})
}

// HasParentx applies the HasEdge predicate on the "parentx" edge.
func HasParentx() predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ParentxTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentxTable, ParentxColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentxWith applies the HasEdge predicate on the "parentx" edge with a given conditions (other predicates).
func HasParentxWith(preds ...predicate.Baseinfoadministrativeareaall) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentxTable, ParentxColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildrens applies the HasEdge predicate on the "childrens" edge.
func HasChildrens() predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChildrensTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildrensTable, ChildrensColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildrensWith applies the HasEdge predicate on the "childrens" edge with a given conditions (other predicates).
func HasChildrensWith(preds ...predicate.Baseinfoadministrativeareaall) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildrensTable, ChildrensColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Baseinfoadministrativeareaall) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Baseinfoadministrativeareaall) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Baseinfoadministrativeareaall) predicate.Baseinfoadministrativeareaall {
	return predicate.Baseinfoadministrativeareaall(func(s *sql.Selector) {
		p(s.Not())
	})
}
