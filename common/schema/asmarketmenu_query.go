// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"
	"orginone/common/schema/asmarketapp"
	"orginone/common/schema/asmarketapprole"
	"orginone/common/schema/asmarketmenu"
	"orginone/common/schema/asmarketmenuusersort"
	"orginone/common/schema/asmarketrolemenu"
	"orginone/common/schema/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsMarketMenuQuery is the builder for querying AsMarketMenu entities.
type AsMarketMenuQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.AsMarketMenu
	// eager-loading edges.
	withParent    *AsMarketMenuQuery
	withChildrens *AsMarketMenuQuery
	withAppx      *AsMarketAppQuery
	withRoleMenus *AsMarketRoleMenuQuery
	withRoles     *AsMarketAppRoleQuery
	withUserSorts *AsMarketMenuUserSortQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AsMarketMenuQuery builder.
func (ammq *AsMarketMenuQuery) Where(ps ...predicate.AsMarketMenu) *AsMarketMenuQuery {
	ammq.predicates = append(ammq.predicates, ps...)
	return ammq
}

// Limit adds a limit step to the query.
func (ammq *AsMarketMenuQuery) Limit(limit int) *AsMarketMenuQuery {
	ammq.limit = &limit
	return ammq
}

// Offset adds an offset step to the query.
func (ammq *AsMarketMenuQuery) Offset(offset int) *AsMarketMenuQuery {
	ammq.offset = &offset
	return ammq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ammq *AsMarketMenuQuery) Unique(unique bool) *AsMarketMenuQuery {
	ammq.unique = &unique
	return ammq
}

// Order adds an order step to the query.
func (ammq *AsMarketMenuQuery) Order(o ...OrderFunc) *AsMarketMenuQuery {
	ammq.order = append(ammq.order, o...)
	return ammq
}

// QueryParent chains the current query on the "parent" edge.
func (ammq *AsMarketMenuQuery) QueryParent() *AsMarketMenuQuery {
	query := &AsMarketMenuQuery{config: ammq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ammq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ammq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketmenu.Table, asmarketmenu.FieldID, selector),
			sqlgraph.To(asmarketmenu.Table, asmarketmenu.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asmarketmenu.ParentTable, asmarketmenu.ParentColumn),
		)
		fromU = sqlgraph.SetNeighbors(ammq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChildrens chains the current query on the "childrens" edge.
func (ammq *AsMarketMenuQuery) QueryChildrens() *AsMarketMenuQuery {
	query := &AsMarketMenuQuery{config: ammq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ammq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ammq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketmenu.Table, asmarketmenu.FieldID, selector),
			sqlgraph.To(asmarketmenu.Table, asmarketmenu.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asmarketmenu.ChildrensTable, asmarketmenu.ChildrensColumn),
		)
		fromU = sqlgraph.SetNeighbors(ammq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAppx chains the current query on the "appx" edge.
func (ammq *AsMarketMenuQuery) QueryAppx() *AsMarketAppQuery {
	query := &AsMarketAppQuery{config: ammq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ammq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ammq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketmenu.Table, asmarketmenu.FieldID, selector),
			sqlgraph.To(asmarketapp.Table, asmarketapp.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asmarketmenu.AppxTable, asmarketmenu.AppxColumn),
		)
		fromU = sqlgraph.SetNeighbors(ammq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRoleMenus chains the current query on the "roleMenus" edge.
func (ammq *AsMarketMenuQuery) QueryRoleMenus() *AsMarketRoleMenuQuery {
	query := &AsMarketRoleMenuQuery{config: ammq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ammq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ammq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketmenu.Table, asmarketmenu.FieldID, selector),
			sqlgraph.To(asmarketrolemenu.Table, asmarketrolemenu.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asmarketmenu.RoleMenusTable, asmarketmenu.RoleMenusColumn),
		)
		fromU = sqlgraph.SetNeighbors(ammq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRoles chains the current query on the "roles" edge.
func (ammq *AsMarketMenuQuery) QueryRoles() *AsMarketAppRoleQuery {
	query := &AsMarketAppRoleQuery{config: ammq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ammq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ammq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketmenu.Table, asmarketmenu.FieldID, selector),
			sqlgraph.To(asmarketapprole.Table, asmarketapprole.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, asmarketmenu.RolesTable, asmarketmenu.RolesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(ammq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserSorts chains the current query on the "UserSorts" edge.
func (ammq *AsMarketMenuQuery) QueryUserSorts() *AsMarketMenuUserSortQuery {
	query := &AsMarketMenuUserSortQuery{config: ammq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ammq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ammq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketmenu.Table, asmarketmenu.FieldID, selector),
			sqlgraph.To(asmarketmenuusersort.Table, asmarketmenuusersort.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asmarketmenu.UserSortsTable, asmarketmenu.UserSortsColumn),
		)
		fromU = sqlgraph.SetNeighbors(ammq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AsMarketMenu entity from the query.
// Returns a *NotFoundError when no AsMarketMenu was found.
func (ammq *AsMarketMenuQuery) First(ctx context.Context) (*AsMarketMenu, error) {
	nodes, err := ammq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{asmarketmenu.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ammq *AsMarketMenuQuery) FirstX(ctx context.Context) *AsMarketMenu {
	node, err := ammq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AsMarketMenu ID from the query.
// Returns a *NotFoundError when no AsMarketMenu ID was found.
func (ammq *AsMarketMenuQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = ammq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{asmarketmenu.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ammq *AsMarketMenuQuery) FirstIDX(ctx context.Context) int64 {
	id, err := ammq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AsMarketMenu entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AsMarketMenu entity is found.
// Returns a *NotFoundError when no AsMarketMenu entities are found.
func (ammq *AsMarketMenuQuery) Only(ctx context.Context) (*AsMarketMenu, error) {
	nodes, err := ammq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{asmarketmenu.Label}
	default:
		return nil, &NotSingularError{asmarketmenu.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ammq *AsMarketMenuQuery) OnlyX(ctx context.Context) *AsMarketMenu {
	node, err := ammq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AsMarketMenu ID in the query.
// Returns a *NotSingularError when more than one AsMarketMenu ID is found.
// Returns a *NotFoundError when no entities are found.
func (ammq *AsMarketMenuQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = ammq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{asmarketmenu.Label}
	default:
		err = &NotSingularError{asmarketmenu.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ammq *AsMarketMenuQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := ammq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AsMarketMenus.
func (ammq *AsMarketMenuQuery) All(ctx context.Context) ([]*AsMarketMenu, error) {
	if err := ammq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return ammq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (ammq *AsMarketMenuQuery) AllX(ctx context.Context) []*AsMarketMenu {
	nodes, err := ammq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AsMarketMenu IDs.
func (ammq *AsMarketMenuQuery) IDs(ctx context.Context) ([]int64, error) {
	var ids []int64
	if err := ammq.Select(asmarketmenu.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ammq *AsMarketMenuQuery) IDsX(ctx context.Context) []int64 {
	ids, err := ammq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ammq *AsMarketMenuQuery) Count(ctx context.Context) (int64, error) {
	if err := ammq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return ammq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (ammq *AsMarketMenuQuery) CountX(ctx context.Context) int64 {
	count, err := ammq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ammq *AsMarketMenuQuery) Exist(ctx context.Context) (bool, error) {
	if err := ammq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return ammq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (ammq *AsMarketMenuQuery) ExistX(ctx context.Context) bool {
	exist, err := ammq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AsMarketMenuQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ammq *AsMarketMenuQuery) Clone() *AsMarketMenuQuery {
	if ammq == nil {
		return nil
	}
	return &AsMarketMenuQuery{
		config:        ammq.config,
		limit:         ammq.limit,
		offset:        ammq.offset,
		order:         append([]OrderFunc{}, ammq.order...),
		predicates:    append([]predicate.AsMarketMenu{}, ammq.predicates...),
		withParent:    ammq.withParent.Clone(),
		withChildrens: ammq.withChildrens.Clone(),
		withAppx:      ammq.withAppx.Clone(),
		withRoleMenus: ammq.withRoleMenus.Clone(),
		withRoles:     ammq.withRoles.Clone(),
		withUserSorts: ammq.withUserSorts.Clone(),
		// clone intermediate query.
		sql:    ammq.sql.Clone(),
		path:   ammq.path,
		unique: ammq.unique,
	}
}

// WithParent tells the query-builder to eager-load the nodes that are connected to
// the "parent" edge. The optional arguments are used to configure the query builder of the edge.
func (ammq *AsMarketMenuQuery) WithParent(opts ...func(*AsMarketMenuQuery)) *AsMarketMenuQuery {
	query := &AsMarketMenuQuery{config: ammq.config}
	for _, opt := range opts {
		opt(query)
	}
	ammq.withParent = query
	return ammq
}

// WithChildrens tells the query-builder to eager-load the nodes that are connected to
// the "childrens" edge. The optional arguments are used to configure the query builder of the edge.
func (ammq *AsMarketMenuQuery) WithChildrens(opts ...func(*AsMarketMenuQuery)) *AsMarketMenuQuery {
	query := &AsMarketMenuQuery{config: ammq.config}
	for _, opt := range opts {
		opt(query)
	}
	ammq.withChildrens = query
	return ammq
}

// WithAppx tells the query-builder to eager-load the nodes that are connected to
// the "appx" edge. The optional arguments are used to configure the query builder of the edge.
func (ammq *AsMarketMenuQuery) WithAppx(opts ...func(*AsMarketAppQuery)) *AsMarketMenuQuery {
	query := &AsMarketAppQuery{config: ammq.config}
	for _, opt := range opts {
		opt(query)
	}
	ammq.withAppx = query
	return ammq
}

// WithRoleMenus tells the query-builder to eager-load the nodes that are connected to
// the "roleMenus" edge. The optional arguments are used to configure the query builder of the edge.
func (ammq *AsMarketMenuQuery) WithRoleMenus(opts ...func(*AsMarketRoleMenuQuery)) *AsMarketMenuQuery {
	query := &AsMarketRoleMenuQuery{config: ammq.config}
	for _, opt := range opts {
		opt(query)
	}
	ammq.withRoleMenus = query
	return ammq
}

// WithRoles tells the query-builder to eager-load the nodes that are connected to
// the "roles" edge. The optional arguments are used to configure the query builder of the edge.
func (ammq *AsMarketMenuQuery) WithRoles(opts ...func(*AsMarketAppRoleQuery)) *AsMarketMenuQuery {
	query := &AsMarketAppRoleQuery{config: ammq.config}
	for _, opt := range opts {
		opt(query)
	}
	ammq.withRoles = query
	return ammq
}

// WithUserSorts tells the query-builder to eager-load the nodes that are connected to
// the "UserSorts" edge. The optional arguments are used to configure the query builder of the edge.
func (ammq *AsMarketMenuQuery) WithUserSorts(opts ...func(*AsMarketMenuUserSortQuery)) *AsMarketMenuQuery {
	query := &AsMarketMenuUserSortQuery{config: ammq.config}
	for _, opt := range opts {
		opt(query)
	}
	ammq.withUserSorts = query
	return ammq
}

// ThenParent tells the query-builder to eager-load the nodes that are connected to
// the "parent" edge. The optional arguments are used to configure the query builder of the edge.
func (ammq *AsMarketMenuQuery) ThenParent(opts ...func(*AsMarketMenuQuery)) *AsMarketMenuQuery {
	query := &AsMarketMenuQuery{config: ammq.config}
	for _, opt := range opts {
		opt(query.Where(asmarketmenu.IsDeleted(0)))
	}
	ammq.withParent = query
	return ammq
}

// ThenChildrens tells the query-builder to eager-load the nodes that are connected to
// the "childrens" edge. The optional arguments are used to configure the query builder of the edge.
func (ammq *AsMarketMenuQuery) ThenChildrens(opts ...func(*AsMarketMenuQuery)) *AsMarketMenuQuery {
	query := &AsMarketMenuQuery{config: ammq.config}
	for _, opt := range opts {
		opt(query.Where(asmarketmenu.IsDeleted(0)))
	}
	ammq.withChildrens = query
	return ammq
}

// ThenAppx tells the query-builder to eager-load the nodes that are connected to
// the "appx" edge. The optional arguments are used to configure the query builder of the edge.
func (ammq *AsMarketMenuQuery) ThenAppx(opts ...func(*AsMarketAppQuery)) *AsMarketMenuQuery {
	query := &AsMarketAppQuery{config: ammq.config}
	for _, opt := range opts {
		opt(query.Where(asmarketapp.IsDeleted(0)))
	}
	ammq.withAppx = query
	return ammq
}

// ThenRoleMenus tells the query-builder to eager-load the nodes that are connected to
// the "roleMenus" edge. The optional arguments are used to configure the query builder of the edge.
func (ammq *AsMarketMenuQuery) ThenRoleMenus(opts ...func(*AsMarketRoleMenuQuery)) *AsMarketMenuQuery {
	query := &AsMarketRoleMenuQuery{config: ammq.config}
	for _, opt := range opts {
		opt(query.Where(asmarketrolemenu.IsDeleted(0)))
	}
	ammq.withRoleMenus = query
	return ammq
}

// ThenRoles tells the query-builder to eager-load the nodes that are connected to
// the "roles" edge. The optional arguments are used to configure the query builder of the edge.
func (ammq *AsMarketMenuQuery) ThenRoles(opts ...func(*AsMarketAppRoleQuery)) *AsMarketMenuQuery {
	query := &AsMarketAppRoleQuery{config: ammq.config}
	for _, opt := range opts {
		opt(query.Where(asmarketapprole.IsDeleted(0)))
	}
	ammq.withRoles = query
	return ammq
}

// ThenUserSorts tells the query-builder to eager-load the nodes that are connected to
// the "UserSorts" edge. The optional arguments are used to configure the query builder of the edge.
func (ammq *AsMarketMenuQuery) ThenUserSorts(opts ...func(*AsMarketMenuUserSortQuery)) *AsMarketMenuQuery {
	query := &AsMarketMenuUserSortQuery{config: ammq.config}
	for _, opt := range opts {
		opt(query.Where(asmarketmenuusersort.IsDeleted(0)))
	}
	ammq.withUserSorts = query
	return ammq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		AppID int64 `json:"appId,string"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AsMarketMenu.Query().
//		GroupBy(asmarketmenu.FieldAppID).
//		Aggregate(schema.Count()).
//		Scan(ctx, &v)
//
func (ammq *AsMarketMenuQuery) GroupBy(field string, fields ...string) *AsMarketMenuGroupBy {
	group := &AsMarketMenuGroupBy{config: ammq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := ammq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return ammq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		AppID int64 `json:"appId,string"`
//	}
//
//	client.AsMarketMenu.Query().
//		Select(asmarketmenu.FieldAppID).
//		Scan(ctx, &v)
//
func (ammq *AsMarketMenuQuery) Select(fields ...string) *AsMarketMenuSelect {
	ammq.fields = append(ammq.fields, fields...)
	return &AsMarketMenuSelect{AsMarketMenuQuery: ammq}
}

func (ammq *AsMarketMenuQuery) prepareQuery(ctx context.Context) error {
	for _, f := range ammq.fields {
		if !asmarketmenu.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("schema: invalid field %q for query", f)}
		}
	}
	if ammq.path != nil {
		prev, err := ammq.path(ctx)
		if err != nil {
			return err
		}
		ammq.sql = prev
	}
	return nil
}

func (ammq *AsMarketMenuQuery) sqlAll(ctx context.Context) ([]*AsMarketMenu, error) {
	var (
		nodes       = []*AsMarketMenu{}
		_spec       = ammq.querySpec()
		loadedTypes = [6]bool{
			ammq.withParent != nil,
			ammq.withChildrens != nil,
			ammq.withAppx != nil,
			ammq.withRoleMenus != nil,
			ammq.withRoles != nil,
			ammq.withUserSorts != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &AsMarketMenu{config: ammq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("schema: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, ammq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := ammq.withParent; query != nil {
		ids := make([]int64, 0, len(nodes))
		nodeids := make(map[int64][]*AsMarketMenu)
		for i := range nodes {
			fk := nodes[i].ParentID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(asmarketmenu.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "parent_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Parent = n
			}
		}
	}

	if query := ammq.withChildrens; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int64]*AsMarketMenu)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Childrens = []*AsMarketMenu{}
		}
		query.Where(predicate.AsMarketMenu(func(s *sql.Selector) {
			s.Where(sql.InValues(asmarketmenu.ChildrensColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.ParentID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "parent_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.Childrens = append(node.Edges.Childrens, n)
		}
	}

	if query := ammq.withAppx; query != nil {
		ids := make([]int64, 0, len(nodes))
		nodeids := make(map[int64][]*AsMarketMenu)
		for i := range nodes {
			fk := nodes[i].AppID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(asmarketapp.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "app_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Appx = n
			}
		}
	}

	if query := ammq.withRoleMenus; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int64]*AsMarketMenu)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.RoleMenus = []*AsMarketRoleMenu{}
		}
		query.Where(predicate.AsMarketRoleMenu(func(s *sql.Selector) {
			s.Where(sql.InValues(asmarketmenu.RoleMenusColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.MenuID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "menu_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.RoleMenus = append(node.Edges.RoleMenus, n)
		}
	}

	if query := ammq.withRoles; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int64]*AsMarketMenu, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.Roles = []*AsMarketAppRole{}
		}
		var (
			edgeids []int64
			edges   = make(map[int64][]*AsMarketMenu)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: true,
				Table:   asmarketmenu.RolesTable,
				Columns: asmarketmenu.RolesPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(asmarketmenu.RolesPrimaryKey[1], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{new(sql.NullInt64), new(sql.NullInt64)}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := eout.Int64
				inValue := ein.Int64
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, ammq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "roles": %w`, err)
		}
		query.Where(asmarketapprole.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "roles" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Roles = append(nodes[i].Edges.Roles, n)
			}
		}
	}

	if query := ammq.withUserSorts; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int64]*AsMarketMenu)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.UserSorts = []*AsMarketMenuUserSort{}
		}
		query.Where(predicate.AsMarketMenuUserSort(func(s *sql.Selector) {
			s.Where(sql.InValues(asmarketmenu.UserSortsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.MenuID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "menu_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.UserSorts = append(node.Edges.UserSorts, n)
		}
	}

	return nodes, nil
}

func (ammq *AsMarketMenuQuery) sqlCount(ctx context.Context) (int64, error) {
	_spec := ammq.querySpec()
	_spec.Node.Columns = ammq.fields
	if len(ammq.fields) > 0 {
		_spec.Unique = ammq.unique != nil && *ammq.unique
	}
	c, err := sqlgraph.CountNodes(ctx, ammq.driver, _spec)
	return int64(c), err
}

func (ammq *AsMarketMenuQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := ammq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("schema: check existence: %w", err)
	}
	return n > 0, nil
}

func (ammq *AsMarketMenuQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asmarketmenu.Table,
			Columns: asmarketmenu.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asmarketmenu.FieldID,
			},
		},
		From:   ammq.sql,
		Unique: true,
	}
	if unique := ammq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := ammq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asmarketmenu.FieldID)
		for i := range fields {
			if fields[i] != asmarketmenu.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ammq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ammq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ammq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ammq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ammq *AsMarketMenuQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ammq.driver.Dialect())
	t1 := builder.Table(asmarketmenu.Table)
	columns := ammq.fields
	if len(columns) == 0 {
		columns = asmarketmenu.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ammq.sql != nil {
		selector = ammq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ammq.unique != nil && *ammq.unique {
		selector.Distinct()
	}
	for _, p := range ammq.predicates {
		p(selector)
	}
	for _, p := range ammq.order {
		p(selector)
	}
	if offset := ammq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ammq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AsMarketMenuGroupBy is the group-by builder for AsMarketMenu entities.
type AsMarketMenuGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ammgb *AsMarketMenuGroupBy) Aggregate(fns ...AggregateFunc) *AsMarketMenuGroupBy {
	ammgb.fns = append(ammgb.fns, fns...)
	return ammgb
}

// Scan applies the group-by query and scans the result into the given value.
func (ammgb *AsMarketMenuGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := ammgb.path(ctx)
	if err != nil {
		return err
	}
	ammgb.sql = query
	return ammgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ammgb *AsMarketMenuGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := ammgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (ammgb *AsMarketMenuGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(ammgb.fields) > 1 {
		return nil, errors.New("schema: AsMarketMenuGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := ammgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ammgb *AsMarketMenuGroupBy) StringsX(ctx context.Context) []string {
	v, err := ammgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ammgb *AsMarketMenuGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ammgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketmenu.Label}
	default:
		err = fmt.Errorf("schema: AsMarketMenuGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ammgb *AsMarketMenuGroupBy) StringX(ctx context.Context) string {
	v, err := ammgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (ammgb *AsMarketMenuGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(ammgb.fields) > 1 {
		return nil, errors.New("schema: AsMarketMenuGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := ammgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ammgb *AsMarketMenuGroupBy) IntsX(ctx context.Context) []int {
	v, err := ammgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ammgb *AsMarketMenuGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ammgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketmenu.Label}
	default:
		err = fmt.Errorf("schema: AsMarketMenuGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ammgb *AsMarketMenuGroupBy) IntX(ctx context.Context) int {
	v, err := ammgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (ammgb *AsMarketMenuGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(ammgb.fields) > 1 {
		return nil, errors.New("schema: AsMarketMenuGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := ammgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ammgb *AsMarketMenuGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := ammgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ammgb *AsMarketMenuGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ammgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketmenu.Label}
	default:
		err = fmt.Errorf("schema: AsMarketMenuGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ammgb *AsMarketMenuGroupBy) Float64X(ctx context.Context) float64 {
	v, err := ammgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (ammgb *AsMarketMenuGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(ammgb.fields) > 1 {
		return nil, errors.New("schema: AsMarketMenuGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := ammgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ammgb *AsMarketMenuGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := ammgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ammgb *AsMarketMenuGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ammgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketmenu.Label}
	default:
		err = fmt.Errorf("schema: AsMarketMenuGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ammgb *AsMarketMenuGroupBy) BoolX(ctx context.Context) bool {
	v, err := ammgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64s returns list of int64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (ammgb *AsMarketMenuGroupBy) Int64s(ctx context.Context) ([]int64, error) {
	if len(ammgb.fields) > 1 {
		return nil, errors.New("schema: AsMarketMenuGroupBy.Int64s is not achievable when grouping more than 1 field")
	}
	var v []int64
	if err := ammgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Int64sX is like Int64s, but panics if an error occurs.
func (ammgb *AsMarketMenuGroupBy) Int64sX(ctx context.Context) []int64 {
	v, err := ammgb.Int64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64 returns a single int64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ammgb *AsMarketMenuGroupBy) Int64(ctx context.Context) (_ int64, err error) {
	var v []int64
	if v, err = ammgb.Int64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketmenu.Label}
	default:
		err = fmt.Errorf("schema: AsMarketMenuGroupBy.Int64s returned %d results when one was expected", len(v))
	}
	return
}

// Int64X is like Int64, but panics if an error occurs.
func (ammgb *AsMarketMenuGroupBy) Int64X(ctx context.Context) int64 {
	v, err := ammgb.Int64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ammgb *AsMarketMenuGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range ammgb.fields {
		if !asmarketmenu.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := ammgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ammgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ammgb *AsMarketMenuGroupBy) sqlQuery() *sql.Selector {
	selector := ammgb.sql.Select()
	aggregation := make([]string, 0, len(ammgb.fns))
	for _, fn := range ammgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(ammgb.fields)+len(ammgb.fns))
		for _, f := range ammgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(ammgb.fields...)...)
}

// AsMarketMenuSelect is the builder for selecting fields of AsMarketMenu entities.
type AsMarketMenuSelect struct {
	*AsMarketMenuQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (amms *AsMarketMenuSelect) Scan(ctx context.Context, v interface{}) error {
	if err := amms.prepareQuery(ctx); err != nil {
		return err
	}
	amms.sql = amms.AsMarketMenuQuery.sqlQuery(ctx)
	return amms.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (amms *AsMarketMenuSelect) ScanX(ctx context.Context, v interface{}) {
	if err := amms.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (amms *AsMarketMenuSelect) Strings(ctx context.Context) ([]string, error) {
	if len(amms.fields) > 1 {
		return nil, errors.New("schema: AsMarketMenuSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := amms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (amms *AsMarketMenuSelect) StringsX(ctx context.Context) []string {
	v, err := amms.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (amms *AsMarketMenuSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = amms.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketmenu.Label}
	default:
		err = fmt.Errorf("schema: AsMarketMenuSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (amms *AsMarketMenuSelect) StringX(ctx context.Context) string {
	v, err := amms.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (amms *AsMarketMenuSelect) Ints(ctx context.Context) ([]int, error) {
	if len(amms.fields) > 1 {
		return nil, errors.New("schema: AsMarketMenuSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := amms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (amms *AsMarketMenuSelect) IntsX(ctx context.Context) []int {
	v, err := amms.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (amms *AsMarketMenuSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = amms.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketmenu.Label}
	default:
		err = fmt.Errorf("schema: AsMarketMenuSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (amms *AsMarketMenuSelect) IntX(ctx context.Context) int {
	v, err := amms.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (amms *AsMarketMenuSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(amms.fields) > 1 {
		return nil, errors.New("schema: AsMarketMenuSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := amms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (amms *AsMarketMenuSelect) Float64sX(ctx context.Context) []float64 {
	v, err := amms.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (amms *AsMarketMenuSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = amms.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketmenu.Label}
	default:
		err = fmt.Errorf("schema: AsMarketMenuSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (amms *AsMarketMenuSelect) Float64X(ctx context.Context) float64 {
	v, err := amms.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (amms *AsMarketMenuSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(amms.fields) > 1 {
		return nil, errors.New("schema: AsMarketMenuSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := amms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (amms *AsMarketMenuSelect) BoolsX(ctx context.Context) []bool {
	v, err := amms.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (amms *AsMarketMenuSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = amms.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketmenu.Label}
	default:
		err = fmt.Errorf("schema: AsMarketMenuSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (amms *AsMarketMenuSelect) BoolX(ctx context.Context) bool {
	v, err := amms.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64s returns list of int64s from a selector. It is only allowed when selecting one field.
func (amms *AsMarketMenuSelect) Int64s(ctx context.Context) ([]int64, error) {
	if len(amms.fields) > 1 {
		return nil, errors.New("schema: AsMarketMenuSelect.Int64s is not achievable when selecting more than 1 field")
	}
	var v []int64
	if err := amms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Int64sX is like Int64s, but panics if an error occurs.
func (amms *AsMarketMenuSelect) Int64sX(ctx context.Context) []int64 {
	v, err := amms.Int64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64 returns a single int64 from a selector. It is only allowed when selecting one field.
func (amms *AsMarketMenuSelect) Int64(ctx context.Context) (_ int64, err error) {
	var v []int64
	if v, err = amms.Int64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketmenu.Label}
	default:
		err = fmt.Errorf("schema: AsMarketMenuSelect.Int64s returned %d results when one was expected", len(v))
	}
	return
}

// Int64X is like Int64, but panics if an error occurs.
func (amms *AsMarketMenuSelect) Int64X(ctx context.Context) int64 {
	v, err := amms.Int64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (amms *AsMarketMenuSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := amms.sql.Query()
	if err := amms.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
