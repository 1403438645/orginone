// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/asappgroupdistributiondata"
	"orginone/common/schema/asmarketapp"
	"orginone/common/schema/asmarketappalert"
	"orginone/common/schema/asmarketappcomponent"
	"orginone/common/schema/asmarketappgroupdistribution"
	"orginone/common/schema/asmarketappgroupdistributionrelation"
	"orginone/common/schema/asmarketappkeysecret"
	"orginone/common/schema/asmarketapppurchase"
	"orginone/common/schema/asmarketapprole"
	"orginone/common/schema/asmarketmenu"
	"orginone/common/schema/asmarketusedapp"
	"orginone/common/schema/asredeploydata"
	"orginone/common/schema/predicate"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsMarketAppUpdate is the builder for updating AsMarketApp entities.
type AsMarketAppUpdate struct {
	config
	hooks    []Hook
	mutation *AsMarketAppMutation
}

// Where appends a list predicates to the AsMarketAppUpdate builder.
func (amau *AsMarketAppUpdate) Where(ps ...predicate.AsMarketApp) *AsMarketAppUpdate {
	amau.mutation.Where(ps...)
	return amau
}

// SetAppName sets the "app_name" field.
func (amau *AsMarketAppUpdate) SetAppName(s string) *AsMarketAppUpdate {
	amau.mutation.SetAppName(s)
	return amau
}

// SetNillableAppName sets the "app_name" field if the given value is not nil.
func (amau *AsMarketAppUpdate) SetNillableAppName(s *string) *AsMarketAppUpdate {
	if s != nil {
		amau.SetAppName(*s)
	}
	return amau
}

// ClearAppName clears the value of the "app_name" field.
func (amau *AsMarketAppUpdate) ClearAppName() *AsMarketAppUpdate {
	amau.mutation.ClearAppName()
	return amau
}

// SetIcon sets the "icon" field.
func (amau *AsMarketAppUpdate) SetIcon(s string) *AsMarketAppUpdate {
	amau.mutation.SetIcon(s)
	return amau
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (amau *AsMarketAppUpdate) SetNillableIcon(s *string) *AsMarketAppUpdate {
	if s != nil {
		amau.SetIcon(*s)
	}
	return amau
}

// ClearIcon clears the value of the "icon" field.
func (amau *AsMarketAppUpdate) ClearIcon() *AsMarketAppUpdate {
	amau.mutation.ClearIcon()
	return amau
}

// SetVersion sets the "version" field.
func (amau *AsMarketAppUpdate) SetVersion(s string) *AsMarketAppUpdate {
	amau.mutation.SetVersion(s)
	return amau
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (amau *AsMarketAppUpdate) SetNillableVersion(s *string) *AsMarketAppUpdate {
	if s != nil {
		amau.SetVersion(*s)
	}
	return amau
}

// ClearVersion clears the value of the "version" field.
func (amau *AsMarketAppUpdate) ClearVersion() *AsMarketAppUpdate {
	amau.mutation.ClearVersion()
	return amau
}

// SetContact sets the "contact" field.
func (amau *AsMarketAppUpdate) SetContact(s string) *AsMarketAppUpdate {
	amau.mutation.SetContact(s)
	return amau
}

// SetNillableContact sets the "contact" field if the given value is not nil.
func (amau *AsMarketAppUpdate) SetNillableContact(s *string) *AsMarketAppUpdate {
	if s != nil {
		amau.SetContact(*s)
	}
	return amau
}

// ClearContact clears the value of the "contact" field.
func (amau *AsMarketAppUpdate) ClearContact() *AsMarketAppUpdate {
	amau.mutation.ClearContact()
	return amau
}

// SetContactName sets the "contact_name" field.
func (amau *AsMarketAppUpdate) SetContactName(s string) *AsMarketAppUpdate {
	amau.mutation.SetContactName(s)
	return amau
}

// SetNillableContactName sets the "contact_name" field if the given value is not nil.
func (amau *AsMarketAppUpdate) SetNillableContactName(s *string) *AsMarketAppUpdate {
	if s != nil {
		amau.SetContactName(*s)
	}
	return amau
}

// ClearContactName clears the value of the "contact_name" field.
func (amau *AsMarketAppUpdate) ClearContactName() *AsMarketAppUpdate {
	amau.mutation.ClearContactName()
	return amau
}

// SetDescription sets the "description" field.
func (amau *AsMarketAppUpdate) SetDescription(s string) *AsMarketAppUpdate {
	amau.mutation.SetDescription(s)
	return amau
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (amau *AsMarketAppUpdate) SetNillableDescription(s *string) *AsMarketAppUpdate {
	if s != nil {
		amau.SetDescription(*s)
	}
	return amau
}

// ClearDescription clears the value of the "description" field.
func (amau *AsMarketAppUpdate) ClearDescription() *AsMarketAppUpdate {
	amau.mutation.ClearDescription()
	return amau
}

// SetFile sets the "file" field.
func (amau *AsMarketAppUpdate) SetFile(s string) *AsMarketAppUpdate {
	amau.mutation.SetFile(s)
	return amau
}

// SetNillableFile sets the "file" field if the given value is not nil.
func (amau *AsMarketAppUpdate) SetNillableFile(s *string) *AsMarketAppUpdate {
	if s != nil {
		amau.SetFile(*s)
	}
	return amau
}

// ClearFile clears the value of the "file" field.
func (amau *AsMarketAppUpdate) ClearFile() *AsMarketAppUpdate {
	amau.mutation.ClearFile()
	return amau
}

// SetSaleStatus sets the "sale_status" field.
func (amau *AsMarketAppUpdate) SetSaleStatus(i int64) *AsMarketAppUpdate {
	amau.mutation.ResetSaleStatus()
	amau.mutation.SetSaleStatus(i)
	return amau
}

// SetNillableSaleStatus sets the "sale_status" field if the given value is not nil.
func (amau *AsMarketAppUpdate) SetNillableSaleStatus(i *int64) *AsMarketAppUpdate {
	if i != nil {
		amau.SetSaleStatus(*i)
	}
	return amau
}

// AddSaleStatus adds i to the "sale_status" field.
func (amau *AsMarketAppUpdate) AddSaleStatus(i int64) *AsMarketAppUpdate {
	amau.mutation.AddSaleStatus(i)
	return amau
}

// ClearSaleStatus clears the value of the "sale_status" field.
func (amau *AsMarketAppUpdate) ClearSaleStatus() *AsMarketAppUpdate {
	amau.mutation.ClearSaleStatus()
	return amau
}

// SetTenantID sets the "tenant_id" field.
func (amau *AsMarketAppUpdate) SetTenantID(s string) *AsMarketAppUpdate {
	amau.mutation.SetTenantID(s)
	return amau
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (amau *AsMarketAppUpdate) SetNillableTenantID(s *string) *AsMarketAppUpdate {
	if s != nil {
		amau.SetTenantID(*s)
	}
	return amau
}

// ClearTenantID clears the value of the "tenant_id" field.
func (amau *AsMarketAppUpdate) ClearTenantID() *AsMarketAppUpdate {
	amau.mutation.ClearTenantID()
	return amau
}

// SetPlatform sets the "platform" field.
func (amau *AsMarketAppUpdate) SetPlatform(i int64) *AsMarketAppUpdate {
	amau.mutation.ResetPlatform()
	amau.mutation.SetPlatform(i)
	return amau
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (amau *AsMarketAppUpdate) SetNillablePlatform(i *int64) *AsMarketAppUpdate {
	if i != nil {
		amau.SetPlatform(*i)
	}
	return amau
}

// AddPlatform adds i to the "platform" field.
func (amau *AsMarketAppUpdate) AddPlatform(i int64) *AsMarketAppUpdate {
	amau.mutation.AddPlatform(i)
	return amau
}

// ClearPlatform clears the value of the "platform" field.
func (amau *AsMarketAppUpdate) ClearPlatform() *AsMarketAppUpdate {
	amau.mutation.ClearPlatform()
	return amau
}

// SetTargetUser sets the "target_user" field.
func (amau *AsMarketAppUpdate) SetTargetUser(i int64) *AsMarketAppUpdate {
	amau.mutation.ResetTargetUser()
	amau.mutation.SetTargetUser(i)
	return amau
}

// SetNillableTargetUser sets the "target_user" field if the given value is not nil.
func (amau *AsMarketAppUpdate) SetNillableTargetUser(i *int64) *AsMarketAppUpdate {
	if i != nil {
		amau.SetTargetUser(*i)
	}
	return amau
}

// AddTargetUser adds i to the "target_user" field.
func (amau *AsMarketAppUpdate) AddTargetUser(i int64) *AsMarketAppUpdate {
	amau.mutation.AddTargetUser(i)
	return amau
}

// ClearTargetUser clears the value of the "target_user" field.
func (amau *AsMarketAppUpdate) ClearTargetUser() *AsMarketAppUpdate {
	amau.mutation.ClearTargetUser()
	return amau
}

// SetDeployStatus sets the "deploy_status" field.
func (amau *AsMarketAppUpdate) SetDeployStatus(i int64) *AsMarketAppUpdate {
	amau.mutation.ResetDeployStatus()
	amau.mutation.SetDeployStatus(i)
	return amau
}

// SetNillableDeployStatus sets the "deploy_status" field if the given value is not nil.
func (amau *AsMarketAppUpdate) SetNillableDeployStatus(i *int64) *AsMarketAppUpdate {
	if i != nil {
		amau.SetDeployStatus(*i)
	}
	return amau
}

// AddDeployStatus adds i to the "deploy_status" field.
func (amau *AsMarketAppUpdate) AddDeployStatus(i int64) *AsMarketAppUpdate {
	amau.mutation.AddDeployStatus(i)
	return amau
}

// ClearDeployStatus clears the value of the "deploy_status" field.
func (amau *AsMarketAppUpdate) ClearDeployStatus() *AsMarketAppUpdate {
	amau.mutation.ClearDeployStatus()
	return amau
}

// SetDeployAddress sets the "deploy_address" field.
func (amau *AsMarketAppUpdate) SetDeployAddress(s string) *AsMarketAppUpdate {
	amau.mutation.SetDeployAddress(s)
	return amau
}

// SetNillableDeployAddress sets the "deploy_address" field if the given value is not nil.
func (amau *AsMarketAppUpdate) SetNillableDeployAddress(s *string) *AsMarketAppUpdate {
	if s != nil {
		amau.SetDeployAddress(*s)
	}
	return amau
}

// ClearDeployAddress clears the value of the "deploy_address" field.
func (amau *AsMarketAppUpdate) ClearDeployAddress() *AsMarketAppUpdate {
	amau.mutation.ClearDeployAddress()
	return amau
}

// SetDeployType sets the "deploy_type" field.
func (amau *AsMarketAppUpdate) SetDeployType(i int64) *AsMarketAppUpdate {
	amau.mutation.ResetDeployType()
	amau.mutation.SetDeployType(i)
	return amau
}

// SetNillableDeployType sets the "deploy_type" field if the given value is not nil.
func (amau *AsMarketAppUpdate) SetNillableDeployType(i *int64) *AsMarketAppUpdate {
	if i != nil {
		amau.SetDeployType(*i)
	}
	return amau
}

// AddDeployType adds i to the "deploy_type" field.
func (amau *AsMarketAppUpdate) AddDeployType(i int64) *AsMarketAppUpdate {
	amau.mutation.AddDeployType(i)
	return amau
}

// ClearDeployType clears the value of the "deploy_type" field.
func (amau *AsMarketAppUpdate) ClearDeployType() *AsMarketAppUpdate {
	amau.mutation.ClearDeployType()
	return amau
}

// SetPublishTime sets the "publish_time" field.
func (amau *AsMarketAppUpdate) SetPublishTime(dt date.DateTime) *AsMarketAppUpdate {
	amau.mutation.SetPublishTime(dt)
	return amau
}

// SetNillablePublishTime sets the "publish_time" field if the given value is not nil.
func (amau *AsMarketAppUpdate) SetNillablePublishTime(dt *date.DateTime) *AsMarketAppUpdate {
	if dt != nil {
		amau.SetPublishTime(*dt)
	}
	return amau
}

// ClearPublishTime clears the value of the "publish_time" field.
func (amau *AsMarketAppUpdate) ClearPublishTime() *AsMarketAppUpdate {
	amau.mutation.ClearPublishTime()
	return amau
}

// SetAppType sets the "app_type" field.
func (amau *AsMarketAppUpdate) SetAppType(i int64) *AsMarketAppUpdate {
	amau.mutation.ResetAppType()
	amau.mutation.SetAppType(i)
	return amau
}

// SetNillableAppType sets the "app_type" field if the given value is not nil.
func (amau *AsMarketAppUpdate) SetNillableAppType(i *int64) *AsMarketAppUpdate {
	if i != nil {
		amau.SetAppType(*i)
	}
	return amau
}

// AddAppType adds i to the "app_type" field.
func (amau *AsMarketAppUpdate) AddAppType(i int64) *AsMarketAppUpdate {
	amau.mutation.AddAppType(i)
	return amau
}

// ClearAppType clears the value of the "app_type" field.
func (amau *AsMarketAppUpdate) ClearAppType() *AsMarketAppUpdate {
	amau.mutation.ClearAppType()
	return amau
}

// SetApplyTime sets the "apply_time" field.
func (amau *AsMarketAppUpdate) SetApplyTime(dt date.DateTime) *AsMarketAppUpdate {
	amau.mutation.SetApplyTime(dt)
	return amau
}

// SetNillableApplyTime sets the "apply_time" field if the given value is not nil.
func (amau *AsMarketAppUpdate) SetNillableApplyTime(dt *date.DateTime) *AsMarketAppUpdate {
	if dt != nil {
		amau.SetApplyTime(*dt)
	}
	return amau
}

// ClearApplyTime clears the value of the "apply_time" field.
func (amau *AsMarketAppUpdate) ClearApplyTime() *AsMarketAppUpdate {
	amau.mutation.ClearApplyTime()
	return amau
}

// SetAppAddress sets the "app_address" field.
func (amau *AsMarketAppUpdate) SetAppAddress(s string) *AsMarketAppUpdate {
	amau.mutation.SetAppAddress(s)
	return amau
}

// SetNillableAppAddress sets the "app_address" field if the given value is not nil.
func (amau *AsMarketAppUpdate) SetNillableAppAddress(s *string) *AsMarketAppUpdate {
	if s != nil {
		amau.SetAppAddress(*s)
	}
	return amau
}

// ClearAppAddress clears the value of the "app_address" field.
func (amau *AsMarketAppUpdate) ClearAppAddress() *AsMarketAppUpdate {
	amau.mutation.ClearAppAddress()
	return amau
}

// SetAppMail sets the "app_mail" field.
func (amau *AsMarketAppUpdate) SetAppMail(s string) *AsMarketAppUpdate {
	amau.mutation.SetAppMail(s)
	return amau
}

// SetNillableAppMail sets the "app_mail" field if the given value is not nil.
func (amau *AsMarketAppUpdate) SetNillableAppMail(s *string) *AsMarketAppUpdate {
	if s != nil {
		amau.SetAppMail(*s)
	}
	return amau
}

// ClearAppMail clears the value of the "app_mail" field.
func (amau *AsMarketAppUpdate) ClearAppMail() *AsMarketAppUpdate {
	amau.mutation.ClearAppMail()
	return amau
}

// SetAppPhoto sets the "app_photo" field.
func (amau *AsMarketAppUpdate) SetAppPhoto(s string) *AsMarketAppUpdate {
	amau.mutation.SetAppPhoto(s)
	return amau
}

// SetNillableAppPhoto sets the "app_photo" field if the given value is not nil.
func (amau *AsMarketAppUpdate) SetNillableAppPhoto(s *string) *AsMarketAppUpdate {
	if s != nil {
		amau.SetAppPhoto(*s)
	}
	return amau
}

// ClearAppPhoto clears the value of the "app_photo" field.
func (amau *AsMarketAppUpdate) ClearAppPhoto() *AsMarketAppUpdate {
	amau.mutation.ClearAppPhoto()
	return amau
}

// SetAppField sets the "app_field" field.
func (amau *AsMarketAppUpdate) SetAppField(i int64) *AsMarketAppUpdate {
	amau.mutation.ResetAppField()
	amau.mutation.SetAppField(i)
	return amau
}

// SetNillableAppField sets the "app_field" field if the given value is not nil.
func (amau *AsMarketAppUpdate) SetNillableAppField(i *int64) *AsMarketAppUpdate {
	if i != nil {
		amau.SetAppField(*i)
	}
	return amau
}

// AddAppField adds i to the "app_field" field.
func (amau *AsMarketAppUpdate) AddAppField(i int64) *AsMarketAppUpdate {
	amau.mutation.AddAppField(i)
	return amau
}

// ClearAppField clears the value of the "app_field" field.
func (amau *AsMarketAppUpdate) ClearAppField() *AsMarketAppUpdate {
	amau.mutation.ClearAppField()
	return amau
}

// SetAppCategory sets the "app_category" field.
func (amau *AsMarketAppUpdate) SetAppCategory(i int64) *AsMarketAppUpdate {
	amau.mutation.ResetAppCategory()
	amau.mutation.SetAppCategory(i)
	return amau
}

// SetNillableAppCategory sets the "app_category" field if the given value is not nil.
func (amau *AsMarketAppUpdate) SetNillableAppCategory(i *int64) *AsMarketAppUpdate {
	if i != nil {
		amau.SetAppCategory(*i)
	}
	return amau
}

// AddAppCategory adds i to the "app_category" field.
func (amau *AsMarketAppUpdate) AddAppCategory(i int64) *AsMarketAppUpdate {
	amau.mutation.AddAppCategory(i)
	return amau
}

// ClearAppCategory clears the value of the "app_category" field.
func (amau *AsMarketAppUpdate) ClearAppCategory() *AsMarketAppUpdate {
	amau.mutation.ClearAppCategory()
	return amau
}

// SetAppProjectSource sets the "app_project_source" field.
func (amau *AsMarketAppUpdate) SetAppProjectSource(i int64) *AsMarketAppUpdate {
	amau.mutation.ResetAppProjectSource()
	amau.mutation.SetAppProjectSource(i)
	return amau
}

// SetNillableAppProjectSource sets the "app_project_source" field if the given value is not nil.
func (amau *AsMarketAppUpdate) SetNillableAppProjectSource(i *int64) *AsMarketAppUpdate {
	if i != nil {
		amau.SetAppProjectSource(*i)
	}
	return amau
}

// AddAppProjectSource adds i to the "app_project_source" field.
func (amau *AsMarketAppUpdate) AddAppProjectSource(i int64) *AsMarketAppUpdate {
	amau.mutation.AddAppProjectSource(i)
	return amau
}

// ClearAppProjectSource clears the value of the "app_project_source" field.
func (amau *AsMarketAppUpdate) ClearAppProjectSource() *AsMarketAppUpdate {
	amau.mutation.ClearAppProjectSource()
	return amau
}

// SetAppStar sets the "app_star" field.
func (amau *AsMarketAppUpdate) SetAppStar(i int64) *AsMarketAppUpdate {
	amau.mutation.ResetAppStar()
	amau.mutation.SetAppStar(i)
	return amau
}

// AddAppStar adds i to the "app_star" field.
func (amau *AsMarketAppUpdate) AddAppStar(i int64) *AsMarketAppUpdate {
	amau.mutation.AddAppStar(i)
	return amau
}

// SetAppFoundsSource sets the "app_founds_source" field.
func (amau *AsMarketAppUpdate) SetAppFoundsSource(i int64) *AsMarketAppUpdate {
	amau.mutation.ResetAppFoundsSource()
	amau.mutation.SetAppFoundsSource(i)
	return amau
}

// SetNillableAppFoundsSource sets the "app_founds_source" field if the given value is not nil.
func (amau *AsMarketAppUpdate) SetNillableAppFoundsSource(i *int64) *AsMarketAppUpdate {
	if i != nil {
		amau.SetAppFoundsSource(*i)
	}
	return amau
}

// AddAppFoundsSource adds i to the "app_founds_source" field.
func (amau *AsMarketAppUpdate) AddAppFoundsSource(i int64) *AsMarketAppUpdate {
	amau.mutation.AddAppFoundsSource(i)
	return amau
}

// ClearAppFoundsSource clears the value of the "app_founds_source" field.
func (amau *AsMarketAppUpdate) ClearAppFoundsSource() *AsMarketAppUpdate {
	amau.mutation.ClearAppFoundsSource()
	return amau
}

// SetInnerURL sets the "inner_url" field.
func (amau *AsMarketAppUpdate) SetInnerURL(s string) *AsMarketAppUpdate {
	amau.mutation.SetInnerURL(s)
	return amau
}

// SetNillableInnerURL sets the "inner_url" field if the given value is not nil.
func (amau *AsMarketAppUpdate) SetNillableInnerURL(s *string) *AsMarketAppUpdate {
	if s != nil {
		amau.SetInnerURL(*s)
	}
	return amau
}

// ClearInnerURL clears the value of the "inner_url" field.
func (amau *AsMarketAppUpdate) ClearInnerURL() *AsMarketAppUpdate {
	amau.mutation.ClearInnerURL()
	return amau
}

// SetOutURL sets the "out_url" field.
func (amau *AsMarketAppUpdate) SetOutURL(s string) *AsMarketAppUpdate {
	amau.mutation.SetOutURL(s)
	return amau
}

// SetNillableOutURL sets the "out_url" field if the given value is not nil.
func (amau *AsMarketAppUpdate) SetNillableOutURL(s *string) *AsMarketAppUpdate {
	if s != nil {
		amau.SetOutURL(*s)
	}
	return amau
}

// ClearOutURL clears the value of the "out_url" field.
func (amau *AsMarketAppUpdate) ClearOutURL() *AsMarketAppUpdate {
	amau.mutation.ClearOutURL()
	return amau
}

// SetReformStatus sets the "reform_status" field.
func (amau *AsMarketAppUpdate) SetReformStatus(i int64) *AsMarketAppUpdate {
	amau.mutation.ResetReformStatus()
	amau.mutation.SetReformStatus(i)
	return amau
}

// AddReformStatus adds i to the "reform_status" field.
func (amau *AsMarketAppUpdate) AddReformStatus(i int64) *AsMarketAppUpdate {
	amau.mutation.AddReformStatus(i)
	return amau
}

// SetOutIPURL sets the "out_ip_url" field.
func (amau *AsMarketAppUpdate) SetOutIPURL(s string) *AsMarketAppUpdate {
	amau.mutation.SetOutIPURL(s)
	return amau
}

// SetNillableOutIPURL sets the "out_ip_url" field if the given value is not nil.
func (amau *AsMarketAppUpdate) SetNillableOutIPURL(s *string) *AsMarketAppUpdate {
	if s != nil {
		amau.SetOutIPURL(*s)
	}
	return amau
}

// ClearOutIPURL clears the value of the "out_ip_url" field.
func (amau *AsMarketAppUpdate) ClearOutIPURL() *AsMarketAppUpdate {
	amau.mutation.ClearOutIPURL()
	return amau
}

// SetIsDeleted sets the "is_deleted" field.
func (amau *AsMarketAppUpdate) SetIsDeleted(i int64) *AsMarketAppUpdate {
	amau.mutation.ResetIsDeleted()
	amau.mutation.SetIsDeleted(i)
	return amau
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (amau *AsMarketAppUpdate) SetNillableIsDeleted(i *int64) *AsMarketAppUpdate {
	if i != nil {
		amau.SetIsDeleted(*i)
	}
	return amau
}

// AddIsDeleted adds i to the "is_deleted" field.
func (amau *AsMarketAppUpdate) AddIsDeleted(i int64) *AsMarketAppUpdate {
	amau.mutation.AddIsDeleted(i)
	return amau
}

// SetStatus sets the "status" field.
func (amau *AsMarketAppUpdate) SetStatus(i int64) *AsMarketAppUpdate {
	amau.mutation.ResetStatus()
	amau.mutation.SetStatus(i)
	return amau
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (amau *AsMarketAppUpdate) SetNillableStatus(i *int64) *AsMarketAppUpdate {
	if i != nil {
		amau.SetStatus(*i)
	}
	return amau
}

// AddStatus adds i to the "status" field.
func (amau *AsMarketAppUpdate) AddStatus(i int64) *AsMarketAppUpdate {
	amau.mutation.AddStatus(i)
	return amau
}

// ClearStatus clears the value of the "status" field.
func (amau *AsMarketAppUpdate) ClearStatus() *AsMarketAppUpdate {
	amau.mutation.ClearStatus()
	return amau
}

// SetCreateUser sets the "create_user" field.
func (amau *AsMarketAppUpdate) SetCreateUser(i int64) *AsMarketAppUpdate {
	amau.mutation.ResetCreateUser()
	amau.mutation.SetCreateUser(i)
	return amau
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (amau *AsMarketAppUpdate) SetNillableCreateUser(i *int64) *AsMarketAppUpdate {
	if i != nil {
		amau.SetCreateUser(*i)
	}
	return amau
}

// AddCreateUser adds i to the "create_user" field.
func (amau *AsMarketAppUpdate) AddCreateUser(i int64) *AsMarketAppUpdate {
	amau.mutation.AddCreateUser(i)
	return amau
}

// ClearCreateUser clears the value of the "create_user" field.
func (amau *AsMarketAppUpdate) ClearCreateUser() *AsMarketAppUpdate {
	amau.mutation.ClearCreateUser()
	return amau
}

// SetUpdateUser sets the "update_user" field.
func (amau *AsMarketAppUpdate) SetUpdateUser(i int64) *AsMarketAppUpdate {
	amau.mutation.ResetUpdateUser()
	amau.mutation.SetUpdateUser(i)
	return amau
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (amau *AsMarketAppUpdate) SetNillableUpdateUser(i *int64) *AsMarketAppUpdate {
	if i != nil {
		amau.SetUpdateUser(*i)
	}
	return amau
}

// AddUpdateUser adds i to the "update_user" field.
func (amau *AsMarketAppUpdate) AddUpdateUser(i int64) *AsMarketAppUpdate {
	amau.mutation.AddUpdateUser(i)
	return amau
}

// ClearUpdateUser clears the value of the "update_user" field.
func (amau *AsMarketAppUpdate) ClearUpdateUser() *AsMarketAppUpdate {
	amau.mutation.ClearUpdateUser()
	return amau
}

// SetUpdateTime sets the "update_time" field.
func (amau *AsMarketAppUpdate) SetUpdateTime(dt date.DateTime) *AsMarketAppUpdate {
	amau.mutation.SetUpdateTime(dt)
	return amau
}

// ClearUpdateTime clears the value of the "update_time" field.
func (amau *AsMarketAppUpdate) ClearUpdateTime() *AsMarketAppUpdate {
	amau.mutation.ClearUpdateTime()
	return amau
}

// AddAppMenuIDs adds the "appMenus" edge to the AsMarketMenu entity by IDs.
func (amau *AsMarketAppUpdate) AddAppMenuIDs(ids ...int64) *AsMarketAppUpdate {
	amau.mutation.AddAppMenuIDs(ids...)
	return amau
}

// AddAppMenus adds the "appMenus" edges to the AsMarketMenu entity.
func (amau *AsMarketAppUpdate) AddAppMenus(a ...*AsMarketMenu) *AsMarketAppUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amau.AddAppMenuIDs(ids...)
}

// AddAppRoleIDs adds the "appRoles" edge to the AsMarketAppRole entity by IDs.
func (amau *AsMarketAppUpdate) AddAppRoleIDs(ids ...int64) *AsMarketAppUpdate {
	amau.mutation.AddAppRoleIDs(ids...)
	return amau
}

// AddAppRoles adds the "appRoles" edges to the AsMarketAppRole entity.
func (amau *AsMarketAppUpdate) AddAppRoles(a ...*AsMarketAppRole) *AsMarketAppUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amau.AddAppRoleIDs(ids...)
}

// AddUsedIDs adds the "useds" edge to the AsMarketUsedApp entity by IDs.
func (amau *AsMarketAppUpdate) AddUsedIDs(ids ...int64) *AsMarketAppUpdate {
	amau.mutation.AddUsedIDs(ids...)
	return amau
}

// AddUseds adds the "useds" edges to the AsMarketUsedApp entity.
func (amau *AsMarketAppUpdate) AddUseds(a ...*AsMarketUsedApp) *AsMarketAppUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amau.AddUsedIDs(ids...)
}

// AddAppAlertIDs adds the "appAlerts" edge to the AsMarketAppAlert entity by IDs.
func (amau *AsMarketAppUpdate) AddAppAlertIDs(ids ...int64) *AsMarketAppUpdate {
	amau.mutation.AddAppAlertIDs(ids...)
	return amau
}

// AddAppAlerts adds the "appAlerts" edges to the AsMarketAppAlert entity.
func (amau *AsMarketAppUpdate) AddAppAlerts(a ...*AsMarketAppAlert) *AsMarketAppUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amau.AddAppAlertIDs(ids...)
}

// AddAppRedeployIDs adds the "appRedeploys" edge to the AsRedeployData entity by IDs.
func (amau *AsMarketAppUpdate) AddAppRedeployIDs(ids ...int64) *AsMarketAppUpdate {
	amau.mutation.AddAppRedeployIDs(ids...)
	return amau
}

// AddAppRedeploys adds the "appRedeploys" edges to the AsRedeployData entity.
func (amau *AsMarketAppUpdate) AddAppRedeploys(a ...*AsRedeployData) *AsMarketAppUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amau.AddAppRedeployIDs(ids...)
}

// AddAppKeyIDs adds the "appKeys" edge to the AsMarketAppKeySecret entity by IDs.
func (amau *AsMarketAppUpdate) AddAppKeyIDs(ids ...int64) *AsMarketAppUpdate {
	amau.mutation.AddAppKeyIDs(ids...)
	return amau
}

// AddAppKeys adds the "appKeys" edges to the AsMarketAppKeySecret entity.
func (amau *AsMarketAppUpdate) AddAppKeys(a ...*AsMarketAppKeySecret) *AsMarketAppUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amau.AddAppKeyIDs(ids...)
}

// AddAppPurchaseIDs adds the "appPurchases" edge to the AsMarketAppPurchase entity by IDs.
func (amau *AsMarketAppUpdate) AddAppPurchaseIDs(ids ...int64) *AsMarketAppUpdate {
	amau.mutation.AddAppPurchaseIDs(ids...)
	return amau
}

// AddAppPurchases adds the "appPurchases" edges to the AsMarketAppPurchase entity.
func (amau *AsMarketAppUpdate) AddAppPurchases(a ...*AsMarketAppPurchase) *AsMarketAppUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amau.AddAppPurchaseIDs(ids...)
}

// AddAppComponentIDs adds the "appComponents" edge to the AsMarketAppComponent entity by IDs.
func (amau *AsMarketAppUpdate) AddAppComponentIDs(ids ...int64) *AsMarketAppUpdate {
	amau.mutation.AddAppComponentIDs(ids...)
	return amau
}

// AddAppComponents adds the "appComponents" edges to the AsMarketAppComponent entity.
func (amau *AsMarketAppUpdate) AddAppComponents(a ...*AsMarketAppComponent) *AsMarketAppUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amau.AddAppComponentIDs(ids...)
}

// AddAppGroupDistribIDs adds the "appGroupDistribs" edge to the AsMarketAppGroupDistribution entity by IDs.
func (amau *AsMarketAppUpdate) AddAppGroupDistribIDs(ids ...int64) *AsMarketAppUpdate {
	amau.mutation.AddAppGroupDistribIDs(ids...)
	return amau
}

// AddAppGroupDistribs adds the "appGroupDistribs" edges to the AsMarketAppGroupDistribution entity.
func (amau *AsMarketAppUpdate) AddAppGroupDistribs(a ...*AsMarketAppGroupDistribution) *AsMarketAppUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amau.AddAppGroupDistribIDs(ids...)
}

// AddAppGroupDistribConfigIDs adds the "appGroupDistribConfigs" edge to the AsAppGroupDistributionData entity by IDs.
func (amau *AsMarketAppUpdate) AddAppGroupDistribConfigIDs(ids ...int64) *AsMarketAppUpdate {
	amau.mutation.AddAppGroupDistribConfigIDs(ids...)
	return amau
}

// AddAppGroupDistribConfigs adds the "appGroupDistribConfigs" edges to the AsAppGroupDistributionData entity.
func (amau *AsMarketAppUpdate) AddAppGroupDistribConfigs(a ...*AsAppGroupDistributionData) *AsMarketAppUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amau.AddAppGroupDistribConfigIDs(ids...)
}

// AddAppGroupDistribsRelationIDs adds the "appGroupDistribsRelation" edge to the AsMarketAppGroupDistributionRelation entity by IDs.
func (amau *AsMarketAppUpdate) AddAppGroupDistribsRelationIDs(ids ...int64) *AsMarketAppUpdate {
	amau.mutation.AddAppGroupDistribsRelationIDs(ids...)
	return amau
}

// AddAppGroupDistribsRelation adds the "appGroupDistribsRelation" edges to the AsMarketAppGroupDistributionRelation entity.
func (amau *AsMarketAppUpdate) AddAppGroupDistribsRelation(a ...*AsMarketAppGroupDistributionRelation) *AsMarketAppUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amau.AddAppGroupDistribsRelationIDs(ids...)
}

// Mutation returns the AsMarketAppMutation object of the builder.
func (amau *AsMarketAppUpdate) Mutation() *AsMarketAppMutation {
	return amau.mutation
}

// ClearAppMenus clears all "appMenus" edges to the AsMarketMenu entity.
func (amau *AsMarketAppUpdate) ClearAppMenus() *AsMarketAppUpdate {
	amau.mutation.ClearAppMenus()
	return amau
}

// RemoveAppMenuIDs removes the "appMenus" edge to AsMarketMenu entities by IDs.
func (amau *AsMarketAppUpdate) RemoveAppMenuIDs(ids ...int64) *AsMarketAppUpdate {
	amau.mutation.RemoveAppMenuIDs(ids...)
	return amau
}

// RemoveAppMenus removes "appMenus" edges to AsMarketMenu entities.
func (amau *AsMarketAppUpdate) RemoveAppMenus(a ...*AsMarketMenu) *AsMarketAppUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amau.RemoveAppMenuIDs(ids...)
}

// ClearAppRoles clears all "appRoles" edges to the AsMarketAppRole entity.
func (amau *AsMarketAppUpdate) ClearAppRoles() *AsMarketAppUpdate {
	amau.mutation.ClearAppRoles()
	return amau
}

// RemoveAppRoleIDs removes the "appRoles" edge to AsMarketAppRole entities by IDs.
func (amau *AsMarketAppUpdate) RemoveAppRoleIDs(ids ...int64) *AsMarketAppUpdate {
	amau.mutation.RemoveAppRoleIDs(ids...)
	return amau
}

// RemoveAppRoles removes "appRoles" edges to AsMarketAppRole entities.
func (amau *AsMarketAppUpdate) RemoveAppRoles(a ...*AsMarketAppRole) *AsMarketAppUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amau.RemoveAppRoleIDs(ids...)
}

// ClearUseds clears all "useds" edges to the AsMarketUsedApp entity.
func (amau *AsMarketAppUpdate) ClearUseds() *AsMarketAppUpdate {
	amau.mutation.ClearUseds()
	return amau
}

// RemoveUsedIDs removes the "useds" edge to AsMarketUsedApp entities by IDs.
func (amau *AsMarketAppUpdate) RemoveUsedIDs(ids ...int64) *AsMarketAppUpdate {
	amau.mutation.RemoveUsedIDs(ids...)
	return amau
}

// RemoveUseds removes "useds" edges to AsMarketUsedApp entities.
func (amau *AsMarketAppUpdate) RemoveUseds(a ...*AsMarketUsedApp) *AsMarketAppUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amau.RemoveUsedIDs(ids...)
}

// ClearAppAlerts clears all "appAlerts" edges to the AsMarketAppAlert entity.
func (amau *AsMarketAppUpdate) ClearAppAlerts() *AsMarketAppUpdate {
	amau.mutation.ClearAppAlerts()
	return amau
}

// RemoveAppAlertIDs removes the "appAlerts" edge to AsMarketAppAlert entities by IDs.
func (amau *AsMarketAppUpdate) RemoveAppAlertIDs(ids ...int64) *AsMarketAppUpdate {
	amau.mutation.RemoveAppAlertIDs(ids...)
	return amau
}

// RemoveAppAlerts removes "appAlerts" edges to AsMarketAppAlert entities.
func (amau *AsMarketAppUpdate) RemoveAppAlerts(a ...*AsMarketAppAlert) *AsMarketAppUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amau.RemoveAppAlertIDs(ids...)
}

// ClearAppRedeploys clears all "appRedeploys" edges to the AsRedeployData entity.
func (amau *AsMarketAppUpdate) ClearAppRedeploys() *AsMarketAppUpdate {
	amau.mutation.ClearAppRedeploys()
	return amau
}

// RemoveAppRedeployIDs removes the "appRedeploys" edge to AsRedeployData entities by IDs.
func (amau *AsMarketAppUpdate) RemoveAppRedeployIDs(ids ...int64) *AsMarketAppUpdate {
	amau.mutation.RemoveAppRedeployIDs(ids...)
	return amau
}

// RemoveAppRedeploys removes "appRedeploys" edges to AsRedeployData entities.
func (amau *AsMarketAppUpdate) RemoveAppRedeploys(a ...*AsRedeployData) *AsMarketAppUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amau.RemoveAppRedeployIDs(ids...)
}

// ClearAppKeys clears all "appKeys" edges to the AsMarketAppKeySecret entity.
func (amau *AsMarketAppUpdate) ClearAppKeys() *AsMarketAppUpdate {
	amau.mutation.ClearAppKeys()
	return amau
}

// RemoveAppKeyIDs removes the "appKeys" edge to AsMarketAppKeySecret entities by IDs.
func (amau *AsMarketAppUpdate) RemoveAppKeyIDs(ids ...int64) *AsMarketAppUpdate {
	amau.mutation.RemoveAppKeyIDs(ids...)
	return amau
}

// RemoveAppKeys removes "appKeys" edges to AsMarketAppKeySecret entities.
func (amau *AsMarketAppUpdate) RemoveAppKeys(a ...*AsMarketAppKeySecret) *AsMarketAppUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amau.RemoveAppKeyIDs(ids...)
}

// ClearAppPurchases clears all "appPurchases" edges to the AsMarketAppPurchase entity.
func (amau *AsMarketAppUpdate) ClearAppPurchases() *AsMarketAppUpdate {
	amau.mutation.ClearAppPurchases()
	return amau
}

// RemoveAppPurchaseIDs removes the "appPurchases" edge to AsMarketAppPurchase entities by IDs.
func (amau *AsMarketAppUpdate) RemoveAppPurchaseIDs(ids ...int64) *AsMarketAppUpdate {
	amau.mutation.RemoveAppPurchaseIDs(ids...)
	return amau
}

// RemoveAppPurchases removes "appPurchases" edges to AsMarketAppPurchase entities.
func (amau *AsMarketAppUpdate) RemoveAppPurchases(a ...*AsMarketAppPurchase) *AsMarketAppUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amau.RemoveAppPurchaseIDs(ids...)
}

// ClearAppComponents clears all "appComponents" edges to the AsMarketAppComponent entity.
func (amau *AsMarketAppUpdate) ClearAppComponents() *AsMarketAppUpdate {
	amau.mutation.ClearAppComponents()
	return amau
}

// RemoveAppComponentIDs removes the "appComponents" edge to AsMarketAppComponent entities by IDs.
func (amau *AsMarketAppUpdate) RemoveAppComponentIDs(ids ...int64) *AsMarketAppUpdate {
	amau.mutation.RemoveAppComponentIDs(ids...)
	return amau
}

// RemoveAppComponents removes "appComponents" edges to AsMarketAppComponent entities.
func (amau *AsMarketAppUpdate) RemoveAppComponents(a ...*AsMarketAppComponent) *AsMarketAppUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amau.RemoveAppComponentIDs(ids...)
}

// ClearAppGroupDistribs clears all "appGroupDistribs" edges to the AsMarketAppGroupDistribution entity.
func (amau *AsMarketAppUpdate) ClearAppGroupDistribs() *AsMarketAppUpdate {
	amau.mutation.ClearAppGroupDistribs()
	return amau
}

// RemoveAppGroupDistribIDs removes the "appGroupDistribs" edge to AsMarketAppGroupDistribution entities by IDs.
func (amau *AsMarketAppUpdate) RemoveAppGroupDistribIDs(ids ...int64) *AsMarketAppUpdate {
	amau.mutation.RemoveAppGroupDistribIDs(ids...)
	return amau
}

// RemoveAppGroupDistribs removes "appGroupDistribs" edges to AsMarketAppGroupDistribution entities.
func (amau *AsMarketAppUpdate) RemoveAppGroupDistribs(a ...*AsMarketAppGroupDistribution) *AsMarketAppUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amau.RemoveAppGroupDistribIDs(ids...)
}

// ClearAppGroupDistribConfigs clears all "appGroupDistribConfigs" edges to the AsAppGroupDistributionData entity.
func (amau *AsMarketAppUpdate) ClearAppGroupDistribConfigs() *AsMarketAppUpdate {
	amau.mutation.ClearAppGroupDistribConfigs()
	return amau
}

// RemoveAppGroupDistribConfigIDs removes the "appGroupDistribConfigs" edge to AsAppGroupDistributionData entities by IDs.
func (amau *AsMarketAppUpdate) RemoveAppGroupDistribConfigIDs(ids ...int64) *AsMarketAppUpdate {
	amau.mutation.RemoveAppGroupDistribConfigIDs(ids...)
	return amau
}

// RemoveAppGroupDistribConfigs removes "appGroupDistribConfigs" edges to AsAppGroupDistributionData entities.
func (amau *AsMarketAppUpdate) RemoveAppGroupDistribConfigs(a ...*AsAppGroupDistributionData) *AsMarketAppUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amau.RemoveAppGroupDistribConfigIDs(ids...)
}

// ClearAppGroupDistribsRelation clears all "appGroupDistribsRelation" edges to the AsMarketAppGroupDistributionRelation entity.
func (amau *AsMarketAppUpdate) ClearAppGroupDistribsRelation() *AsMarketAppUpdate {
	amau.mutation.ClearAppGroupDistribsRelation()
	return amau
}

// RemoveAppGroupDistribsRelationIDs removes the "appGroupDistribsRelation" edge to AsMarketAppGroupDistributionRelation entities by IDs.
func (amau *AsMarketAppUpdate) RemoveAppGroupDistribsRelationIDs(ids ...int64) *AsMarketAppUpdate {
	amau.mutation.RemoveAppGroupDistribsRelationIDs(ids...)
	return amau
}

// RemoveAppGroupDistribsRelation removes "appGroupDistribsRelation" edges to AsMarketAppGroupDistributionRelation entities.
func (amau *AsMarketAppUpdate) RemoveAppGroupDistribsRelation(a ...*AsMarketAppGroupDistributionRelation) *AsMarketAppUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amau.RemoveAppGroupDistribsRelationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (amau *AsMarketAppUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	amau.defaults()
	if len(amau.hooks) == 0 {
		affected, err = amau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsMarketAppMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			amau.mutation = mutation
			affected, err = amau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(amau.hooks) - 1; i >= 0; i-- {
			if amau.hooks[i] == nil {
				return 0, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = amau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, amau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (amau *AsMarketAppUpdate) SaveX(ctx context.Context) int {
	affected, err := amau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (amau *AsMarketAppUpdate) Exec(ctx context.Context) error {
	_, err := amau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amau *AsMarketAppUpdate) ExecX(ctx context.Context) {
	if err := amau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amau *AsMarketAppUpdate) defaults() {
	if _, ok := amau.mutation.UpdateTime(); !ok && !amau.mutation.UpdateTimeCleared() {
		v := asmarketapp.UpdateDefaultUpdateTime()
		amau.mutation.SetUpdateTime(v)
	}
}

func (amau *AsMarketAppUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asmarketapp.Table,
			Columns: asmarketapp.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asmarketapp.FieldID,
			},
		},
	}
	if ps := amau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amau.mutation.AppName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapp.FieldAppName,
		})
	}
	if amau.mutation.AppNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketapp.FieldAppName,
		})
	}
	if value, ok := amau.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapp.FieldIcon,
		})
	}
	if amau.mutation.IconCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketapp.FieldIcon,
		})
	}
	if value, ok := amau.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapp.FieldVersion,
		})
	}
	if amau.mutation.VersionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketapp.FieldVersion,
		})
	}
	if value, ok := amau.mutation.Contact(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapp.FieldContact,
		})
	}
	if amau.mutation.ContactCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketapp.FieldContact,
		})
	}
	if value, ok := amau.mutation.ContactName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapp.FieldContactName,
		})
	}
	if amau.mutation.ContactNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketapp.FieldContactName,
		})
	}
	if value, ok := amau.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapp.FieldDescription,
		})
	}
	if amau.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketapp.FieldDescription,
		})
	}
	if value, ok := amau.mutation.File(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapp.FieldFile,
		})
	}
	if amau.mutation.FileCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketapp.FieldFile,
		})
	}
	if value, ok := amau.mutation.SaleStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldSaleStatus,
		})
	}
	if value, ok := amau.mutation.AddedSaleStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldSaleStatus,
		})
	}
	if amau.mutation.SaleStatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketapp.FieldSaleStatus,
		})
	}
	if value, ok := amau.mutation.TenantID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapp.FieldTenantID,
		})
	}
	if amau.mutation.TenantIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketapp.FieldTenantID,
		})
	}
	if value, ok := amau.mutation.Platform(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldPlatform,
		})
	}
	if value, ok := amau.mutation.AddedPlatform(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldPlatform,
		})
	}
	if amau.mutation.PlatformCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketapp.FieldPlatform,
		})
	}
	if value, ok := amau.mutation.TargetUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldTargetUser,
		})
	}
	if value, ok := amau.mutation.AddedTargetUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldTargetUser,
		})
	}
	if amau.mutation.TargetUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketapp.FieldTargetUser,
		})
	}
	if value, ok := amau.mutation.DeployStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldDeployStatus,
		})
	}
	if value, ok := amau.mutation.AddedDeployStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldDeployStatus,
		})
	}
	if amau.mutation.DeployStatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketapp.FieldDeployStatus,
		})
	}
	if value, ok := amau.mutation.DeployAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapp.FieldDeployAddress,
		})
	}
	if amau.mutation.DeployAddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketapp.FieldDeployAddress,
		})
	}
	if value, ok := amau.mutation.DeployType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldDeployType,
		})
	}
	if value, ok := amau.mutation.AddedDeployType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldDeployType,
		})
	}
	if amau.mutation.DeployTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketapp.FieldDeployType,
		})
	}
	if value, ok := amau.mutation.PublishTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketapp.FieldPublishTime,
		})
	}
	if amau.mutation.PublishTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketapp.FieldPublishTime,
		})
	}
	if value, ok := amau.mutation.AppType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldAppType,
		})
	}
	if value, ok := amau.mutation.AddedAppType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldAppType,
		})
	}
	if amau.mutation.AppTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketapp.FieldAppType,
		})
	}
	if value, ok := amau.mutation.ApplyTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketapp.FieldApplyTime,
		})
	}
	if amau.mutation.ApplyTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketapp.FieldApplyTime,
		})
	}
	if value, ok := amau.mutation.AppAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapp.FieldAppAddress,
		})
	}
	if amau.mutation.AppAddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketapp.FieldAppAddress,
		})
	}
	if value, ok := amau.mutation.AppMail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapp.FieldAppMail,
		})
	}
	if amau.mutation.AppMailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketapp.FieldAppMail,
		})
	}
	if value, ok := amau.mutation.AppPhoto(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapp.FieldAppPhoto,
		})
	}
	if amau.mutation.AppPhotoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketapp.FieldAppPhoto,
		})
	}
	if value, ok := amau.mutation.AppField(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldAppField,
		})
	}
	if value, ok := amau.mutation.AddedAppField(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldAppField,
		})
	}
	if amau.mutation.AppFieldCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketapp.FieldAppField,
		})
	}
	if value, ok := amau.mutation.AppCategory(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldAppCategory,
		})
	}
	if value, ok := amau.mutation.AddedAppCategory(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldAppCategory,
		})
	}
	if amau.mutation.AppCategoryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketapp.FieldAppCategory,
		})
	}
	if value, ok := amau.mutation.AppProjectSource(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldAppProjectSource,
		})
	}
	if value, ok := amau.mutation.AddedAppProjectSource(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldAppProjectSource,
		})
	}
	if amau.mutation.AppProjectSourceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketapp.FieldAppProjectSource,
		})
	}
	if value, ok := amau.mutation.AppStar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldAppStar,
		})
	}
	if value, ok := amau.mutation.AddedAppStar(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldAppStar,
		})
	}
	if value, ok := amau.mutation.AppFoundsSource(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldAppFoundsSource,
		})
	}
	if value, ok := amau.mutation.AddedAppFoundsSource(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldAppFoundsSource,
		})
	}
	if amau.mutation.AppFoundsSourceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketapp.FieldAppFoundsSource,
		})
	}
	if value, ok := amau.mutation.InnerURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapp.FieldInnerURL,
		})
	}
	if amau.mutation.InnerURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketapp.FieldInnerURL,
		})
	}
	if value, ok := amau.mutation.OutURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapp.FieldOutURL,
		})
	}
	if amau.mutation.OutURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketapp.FieldOutURL,
		})
	}
	if value, ok := amau.mutation.ReformStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldReformStatus,
		})
	}
	if value, ok := amau.mutation.AddedReformStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldReformStatus,
		})
	}
	if value, ok := amau.mutation.OutIPURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapp.FieldOutIPURL,
		})
	}
	if amau.mutation.OutIPURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketapp.FieldOutIPURL,
		})
	}
	if value, ok := amau.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldIsDeleted,
		})
	}
	if value, ok := amau.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldIsDeleted,
		})
	}
	if value, ok := amau.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldStatus,
		})
	}
	if value, ok := amau.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldStatus,
		})
	}
	if amau.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketapp.FieldStatus,
		})
	}
	if value, ok := amau.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldCreateUser,
		})
	}
	if value, ok := amau.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldCreateUser,
		})
	}
	if amau.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketapp.FieldCreateUser,
		})
	}
	if value, ok := amau.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldUpdateUser,
		})
	}
	if value, ok := amau.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldUpdateUser,
		})
	}
	if amau.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketapp.FieldUpdateUser,
		})
	}
	if amau.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketapp.FieldCreateTime,
		})
	}
	if value, ok := amau.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketapp.FieldUpdateTime,
		})
	}
	if amau.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketapp.FieldUpdateTime,
		})
	}
	if amau.mutation.AppMenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppMenusTable,
			Columns: []string{asmarketapp.AppMenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketmenu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amau.mutation.RemovedAppMenusIDs(); len(nodes) > 0 && !amau.mutation.AppMenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppMenusTable,
			Columns: []string{asmarketapp.AppMenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amau.mutation.AppMenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppMenusTable,
			Columns: []string{asmarketapp.AppMenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amau.mutation.AppRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppRolesTable,
			Columns: []string{asmarketapp.AppRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapprole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amau.mutation.RemovedAppRolesIDs(); len(nodes) > 0 && !amau.mutation.AppRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppRolesTable,
			Columns: []string{asmarketapp.AppRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapprole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amau.mutation.AppRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppRolesTable,
			Columns: []string{asmarketapp.AppRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapprole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amau.mutation.UsedsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.UsedsTable,
			Columns: []string{asmarketapp.UsedsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketusedapp.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amau.mutation.RemovedUsedsIDs(); len(nodes) > 0 && !amau.mutation.UsedsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.UsedsTable,
			Columns: []string{asmarketapp.UsedsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketusedapp.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amau.mutation.UsedsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.UsedsTable,
			Columns: []string{asmarketapp.UsedsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketusedapp.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amau.mutation.AppAlertsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppAlertsTable,
			Columns: []string{asmarketapp.AppAlertsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappalert.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amau.mutation.RemovedAppAlertsIDs(); len(nodes) > 0 && !amau.mutation.AppAlertsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppAlertsTable,
			Columns: []string{asmarketapp.AppAlertsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappalert.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amau.mutation.AppAlertsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppAlertsTable,
			Columns: []string{asmarketapp.AppAlertsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappalert.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amau.mutation.AppRedeploysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppRedeploysTable,
			Columns: []string{asmarketapp.AppRedeploysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asredeploydata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amau.mutation.RemovedAppRedeploysIDs(); len(nodes) > 0 && !amau.mutation.AppRedeploysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppRedeploysTable,
			Columns: []string{asmarketapp.AppRedeploysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asredeploydata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amau.mutation.AppRedeploysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppRedeploysTable,
			Columns: []string{asmarketapp.AppRedeploysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asredeploydata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amau.mutation.AppKeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppKeysTable,
			Columns: []string{asmarketapp.AppKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappkeysecret.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amau.mutation.RemovedAppKeysIDs(); len(nodes) > 0 && !amau.mutation.AppKeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppKeysTable,
			Columns: []string{asmarketapp.AppKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappkeysecret.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amau.mutation.AppKeysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppKeysTable,
			Columns: []string{asmarketapp.AppKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappkeysecret.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amau.mutation.AppPurchasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppPurchasesTable,
			Columns: []string{asmarketapp.AppPurchasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapppurchase.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amau.mutation.RemovedAppPurchasesIDs(); len(nodes) > 0 && !amau.mutation.AppPurchasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppPurchasesTable,
			Columns: []string{asmarketapp.AppPurchasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapppurchase.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amau.mutation.AppPurchasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppPurchasesTable,
			Columns: []string{asmarketapp.AppPurchasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapppurchase.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amau.mutation.AppComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppComponentsTable,
			Columns: []string{asmarketapp.AppComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappcomponent.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amau.mutation.RemovedAppComponentsIDs(); len(nodes) > 0 && !amau.mutation.AppComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppComponentsTable,
			Columns: []string{asmarketapp.AppComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappcomponent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amau.mutation.AppComponentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppComponentsTable,
			Columns: []string{asmarketapp.AppComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappcomponent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amau.mutation.AppGroupDistribsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppGroupDistribsTable,
			Columns: []string{asmarketapp.AppGroupDistribsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappgroupdistribution.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amau.mutation.RemovedAppGroupDistribsIDs(); len(nodes) > 0 && !amau.mutation.AppGroupDistribsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppGroupDistribsTable,
			Columns: []string{asmarketapp.AppGroupDistribsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappgroupdistribution.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amau.mutation.AppGroupDistribsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppGroupDistribsTable,
			Columns: []string{asmarketapp.AppGroupDistribsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappgroupdistribution.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amau.mutation.AppGroupDistribConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppGroupDistribConfigsTable,
			Columns: []string{asmarketapp.AppGroupDistribConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asappgroupdistributiondata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amau.mutation.RemovedAppGroupDistribConfigsIDs(); len(nodes) > 0 && !amau.mutation.AppGroupDistribConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppGroupDistribConfigsTable,
			Columns: []string{asmarketapp.AppGroupDistribConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asappgroupdistributiondata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amau.mutation.AppGroupDistribConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppGroupDistribConfigsTable,
			Columns: []string{asmarketapp.AppGroupDistribConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asappgroupdistributiondata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amau.mutation.AppGroupDistribsRelationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppGroupDistribsRelationTable,
			Columns: []string{asmarketapp.AppGroupDistribsRelationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappgroupdistributionrelation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amau.mutation.RemovedAppGroupDistribsRelationIDs(); len(nodes) > 0 && !amau.mutation.AppGroupDistribsRelationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppGroupDistribsRelationTable,
			Columns: []string{asmarketapp.AppGroupDistribsRelationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappgroupdistributionrelation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amau.mutation.AppGroupDistribsRelationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppGroupDistribsRelationTable,
			Columns: []string{asmarketapp.AppGroupDistribsRelationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappgroupdistributionrelation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, amau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asmarketapp.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AsMarketAppUpdateOne is the builder for updating a single AsMarketApp entity.
type AsMarketAppUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AsMarketAppMutation
}

// SetAppName sets the "app_name" field.
func (amauo *AsMarketAppUpdateOne) SetAppName(s string) *AsMarketAppUpdateOne {
	amauo.mutation.SetAppName(s)
	return amauo
}

// SetNillableAppName sets the "app_name" field if the given value is not nil.
func (amauo *AsMarketAppUpdateOne) SetNillableAppName(s *string) *AsMarketAppUpdateOne {
	if s != nil {
		amauo.SetAppName(*s)
	}
	return amauo
}

// ClearAppName clears the value of the "app_name" field.
func (amauo *AsMarketAppUpdateOne) ClearAppName() *AsMarketAppUpdateOne {
	amauo.mutation.ClearAppName()
	return amauo
}

// SetIcon sets the "icon" field.
func (amauo *AsMarketAppUpdateOne) SetIcon(s string) *AsMarketAppUpdateOne {
	amauo.mutation.SetIcon(s)
	return amauo
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (amauo *AsMarketAppUpdateOne) SetNillableIcon(s *string) *AsMarketAppUpdateOne {
	if s != nil {
		amauo.SetIcon(*s)
	}
	return amauo
}

// ClearIcon clears the value of the "icon" field.
func (amauo *AsMarketAppUpdateOne) ClearIcon() *AsMarketAppUpdateOne {
	amauo.mutation.ClearIcon()
	return amauo
}

// SetVersion sets the "version" field.
func (amauo *AsMarketAppUpdateOne) SetVersion(s string) *AsMarketAppUpdateOne {
	amauo.mutation.SetVersion(s)
	return amauo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (amauo *AsMarketAppUpdateOne) SetNillableVersion(s *string) *AsMarketAppUpdateOne {
	if s != nil {
		amauo.SetVersion(*s)
	}
	return amauo
}

// ClearVersion clears the value of the "version" field.
func (amauo *AsMarketAppUpdateOne) ClearVersion() *AsMarketAppUpdateOne {
	amauo.mutation.ClearVersion()
	return amauo
}

// SetContact sets the "contact" field.
func (amauo *AsMarketAppUpdateOne) SetContact(s string) *AsMarketAppUpdateOne {
	amauo.mutation.SetContact(s)
	return amauo
}

// SetNillableContact sets the "contact" field if the given value is not nil.
func (amauo *AsMarketAppUpdateOne) SetNillableContact(s *string) *AsMarketAppUpdateOne {
	if s != nil {
		amauo.SetContact(*s)
	}
	return amauo
}

// ClearContact clears the value of the "contact" field.
func (amauo *AsMarketAppUpdateOne) ClearContact() *AsMarketAppUpdateOne {
	amauo.mutation.ClearContact()
	return amauo
}

// SetContactName sets the "contact_name" field.
func (amauo *AsMarketAppUpdateOne) SetContactName(s string) *AsMarketAppUpdateOne {
	amauo.mutation.SetContactName(s)
	return amauo
}

// SetNillableContactName sets the "contact_name" field if the given value is not nil.
func (amauo *AsMarketAppUpdateOne) SetNillableContactName(s *string) *AsMarketAppUpdateOne {
	if s != nil {
		amauo.SetContactName(*s)
	}
	return amauo
}

// ClearContactName clears the value of the "contact_name" field.
func (amauo *AsMarketAppUpdateOne) ClearContactName() *AsMarketAppUpdateOne {
	amauo.mutation.ClearContactName()
	return amauo
}

// SetDescription sets the "description" field.
func (amauo *AsMarketAppUpdateOne) SetDescription(s string) *AsMarketAppUpdateOne {
	amauo.mutation.SetDescription(s)
	return amauo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (amauo *AsMarketAppUpdateOne) SetNillableDescription(s *string) *AsMarketAppUpdateOne {
	if s != nil {
		amauo.SetDescription(*s)
	}
	return amauo
}

// ClearDescription clears the value of the "description" field.
func (amauo *AsMarketAppUpdateOne) ClearDescription() *AsMarketAppUpdateOne {
	amauo.mutation.ClearDescription()
	return amauo
}

// SetFile sets the "file" field.
func (amauo *AsMarketAppUpdateOne) SetFile(s string) *AsMarketAppUpdateOne {
	amauo.mutation.SetFile(s)
	return amauo
}

// SetNillableFile sets the "file" field if the given value is not nil.
func (amauo *AsMarketAppUpdateOne) SetNillableFile(s *string) *AsMarketAppUpdateOne {
	if s != nil {
		amauo.SetFile(*s)
	}
	return amauo
}

// ClearFile clears the value of the "file" field.
func (amauo *AsMarketAppUpdateOne) ClearFile() *AsMarketAppUpdateOne {
	amauo.mutation.ClearFile()
	return amauo
}

// SetSaleStatus sets the "sale_status" field.
func (amauo *AsMarketAppUpdateOne) SetSaleStatus(i int64) *AsMarketAppUpdateOne {
	amauo.mutation.ResetSaleStatus()
	amauo.mutation.SetSaleStatus(i)
	return amauo
}

// SetNillableSaleStatus sets the "sale_status" field if the given value is not nil.
func (amauo *AsMarketAppUpdateOne) SetNillableSaleStatus(i *int64) *AsMarketAppUpdateOne {
	if i != nil {
		amauo.SetSaleStatus(*i)
	}
	return amauo
}

// AddSaleStatus adds i to the "sale_status" field.
func (amauo *AsMarketAppUpdateOne) AddSaleStatus(i int64) *AsMarketAppUpdateOne {
	amauo.mutation.AddSaleStatus(i)
	return amauo
}

// ClearSaleStatus clears the value of the "sale_status" field.
func (amauo *AsMarketAppUpdateOne) ClearSaleStatus() *AsMarketAppUpdateOne {
	amauo.mutation.ClearSaleStatus()
	return amauo
}

// SetTenantID sets the "tenant_id" field.
func (amauo *AsMarketAppUpdateOne) SetTenantID(s string) *AsMarketAppUpdateOne {
	amauo.mutation.SetTenantID(s)
	return amauo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (amauo *AsMarketAppUpdateOne) SetNillableTenantID(s *string) *AsMarketAppUpdateOne {
	if s != nil {
		amauo.SetTenantID(*s)
	}
	return amauo
}

// ClearTenantID clears the value of the "tenant_id" field.
func (amauo *AsMarketAppUpdateOne) ClearTenantID() *AsMarketAppUpdateOne {
	amauo.mutation.ClearTenantID()
	return amauo
}

// SetPlatform sets the "platform" field.
func (amauo *AsMarketAppUpdateOne) SetPlatform(i int64) *AsMarketAppUpdateOne {
	amauo.mutation.ResetPlatform()
	amauo.mutation.SetPlatform(i)
	return amauo
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (amauo *AsMarketAppUpdateOne) SetNillablePlatform(i *int64) *AsMarketAppUpdateOne {
	if i != nil {
		amauo.SetPlatform(*i)
	}
	return amauo
}

// AddPlatform adds i to the "platform" field.
func (amauo *AsMarketAppUpdateOne) AddPlatform(i int64) *AsMarketAppUpdateOne {
	amauo.mutation.AddPlatform(i)
	return amauo
}

// ClearPlatform clears the value of the "platform" field.
func (amauo *AsMarketAppUpdateOne) ClearPlatform() *AsMarketAppUpdateOne {
	amauo.mutation.ClearPlatform()
	return amauo
}

// SetTargetUser sets the "target_user" field.
func (amauo *AsMarketAppUpdateOne) SetTargetUser(i int64) *AsMarketAppUpdateOne {
	amauo.mutation.ResetTargetUser()
	amauo.mutation.SetTargetUser(i)
	return amauo
}

// SetNillableTargetUser sets the "target_user" field if the given value is not nil.
func (amauo *AsMarketAppUpdateOne) SetNillableTargetUser(i *int64) *AsMarketAppUpdateOne {
	if i != nil {
		amauo.SetTargetUser(*i)
	}
	return amauo
}

// AddTargetUser adds i to the "target_user" field.
func (amauo *AsMarketAppUpdateOne) AddTargetUser(i int64) *AsMarketAppUpdateOne {
	amauo.mutation.AddTargetUser(i)
	return amauo
}

// ClearTargetUser clears the value of the "target_user" field.
func (amauo *AsMarketAppUpdateOne) ClearTargetUser() *AsMarketAppUpdateOne {
	amauo.mutation.ClearTargetUser()
	return amauo
}

// SetDeployStatus sets the "deploy_status" field.
func (amauo *AsMarketAppUpdateOne) SetDeployStatus(i int64) *AsMarketAppUpdateOne {
	amauo.mutation.ResetDeployStatus()
	amauo.mutation.SetDeployStatus(i)
	return amauo
}

// SetNillableDeployStatus sets the "deploy_status" field if the given value is not nil.
func (amauo *AsMarketAppUpdateOne) SetNillableDeployStatus(i *int64) *AsMarketAppUpdateOne {
	if i != nil {
		amauo.SetDeployStatus(*i)
	}
	return amauo
}

// AddDeployStatus adds i to the "deploy_status" field.
func (amauo *AsMarketAppUpdateOne) AddDeployStatus(i int64) *AsMarketAppUpdateOne {
	amauo.mutation.AddDeployStatus(i)
	return amauo
}

// ClearDeployStatus clears the value of the "deploy_status" field.
func (amauo *AsMarketAppUpdateOne) ClearDeployStatus() *AsMarketAppUpdateOne {
	amauo.mutation.ClearDeployStatus()
	return amauo
}

// SetDeployAddress sets the "deploy_address" field.
func (amauo *AsMarketAppUpdateOne) SetDeployAddress(s string) *AsMarketAppUpdateOne {
	amauo.mutation.SetDeployAddress(s)
	return amauo
}

// SetNillableDeployAddress sets the "deploy_address" field if the given value is not nil.
func (amauo *AsMarketAppUpdateOne) SetNillableDeployAddress(s *string) *AsMarketAppUpdateOne {
	if s != nil {
		amauo.SetDeployAddress(*s)
	}
	return amauo
}

// ClearDeployAddress clears the value of the "deploy_address" field.
func (amauo *AsMarketAppUpdateOne) ClearDeployAddress() *AsMarketAppUpdateOne {
	amauo.mutation.ClearDeployAddress()
	return amauo
}

// SetDeployType sets the "deploy_type" field.
func (amauo *AsMarketAppUpdateOne) SetDeployType(i int64) *AsMarketAppUpdateOne {
	amauo.mutation.ResetDeployType()
	amauo.mutation.SetDeployType(i)
	return amauo
}

// SetNillableDeployType sets the "deploy_type" field if the given value is not nil.
func (amauo *AsMarketAppUpdateOne) SetNillableDeployType(i *int64) *AsMarketAppUpdateOne {
	if i != nil {
		amauo.SetDeployType(*i)
	}
	return amauo
}

// AddDeployType adds i to the "deploy_type" field.
func (amauo *AsMarketAppUpdateOne) AddDeployType(i int64) *AsMarketAppUpdateOne {
	amauo.mutation.AddDeployType(i)
	return amauo
}

// ClearDeployType clears the value of the "deploy_type" field.
func (amauo *AsMarketAppUpdateOne) ClearDeployType() *AsMarketAppUpdateOne {
	amauo.mutation.ClearDeployType()
	return amauo
}

// SetPublishTime sets the "publish_time" field.
func (amauo *AsMarketAppUpdateOne) SetPublishTime(dt date.DateTime) *AsMarketAppUpdateOne {
	amauo.mutation.SetPublishTime(dt)
	return amauo
}

// SetNillablePublishTime sets the "publish_time" field if the given value is not nil.
func (amauo *AsMarketAppUpdateOne) SetNillablePublishTime(dt *date.DateTime) *AsMarketAppUpdateOne {
	if dt != nil {
		amauo.SetPublishTime(*dt)
	}
	return amauo
}

// ClearPublishTime clears the value of the "publish_time" field.
func (amauo *AsMarketAppUpdateOne) ClearPublishTime() *AsMarketAppUpdateOne {
	amauo.mutation.ClearPublishTime()
	return amauo
}

// SetAppType sets the "app_type" field.
func (amauo *AsMarketAppUpdateOne) SetAppType(i int64) *AsMarketAppUpdateOne {
	amauo.mutation.ResetAppType()
	amauo.mutation.SetAppType(i)
	return amauo
}

// SetNillableAppType sets the "app_type" field if the given value is not nil.
func (amauo *AsMarketAppUpdateOne) SetNillableAppType(i *int64) *AsMarketAppUpdateOne {
	if i != nil {
		amauo.SetAppType(*i)
	}
	return amauo
}

// AddAppType adds i to the "app_type" field.
func (amauo *AsMarketAppUpdateOne) AddAppType(i int64) *AsMarketAppUpdateOne {
	amauo.mutation.AddAppType(i)
	return amauo
}

// ClearAppType clears the value of the "app_type" field.
func (amauo *AsMarketAppUpdateOne) ClearAppType() *AsMarketAppUpdateOne {
	amauo.mutation.ClearAppType()
	return amauo
}

// SetApplyTime sets the "apply_time" field.
func (amauo *AsMarketAppUpdateOne) SetApplyTime(dt date.DateTime) *AsMarketAppUpdateOne {
	amauo.mutation.SetApplyTime(dt)
	return amauo
}

// SetNillableApplyTime sets the "apply_time" field if the given value is not nil.
func (amauo *AsMarketAppUpdateOne) SetNillableApplyTime(dt *date.DateTime) *AsMarketAppUpdateOne {
	if dt != nil {
		amauo.SetApplyTime(*dt)
	}
	return amauo
}

// ClearApplyTime clears the value of the "apply_time" field.
func (amauo *AsMarketAppUpdateOne) ClearApplyTime() *AsMarketAppUpdateOne {
	amauo.mutation.ClearApplyTime()
	return amauo
}

// SetAppAddress sets the "app_address" field.
func (amauo *AsMarketAppUpdateOne) SetAppAddress(s string) *AsMarketAppUpdateOne {
	amauo.mutation.SetAppAddress(s)
	return amauo
}

// SetNillableAppAddress sets the "app_address" field if the given value is not nil.
func (amauo *AsMarketAppUpdateOne) SetNillableAppAddress(s *string) *AsMarketAppUpdateOne {
	if s != nil {
		amauo.SetAppAddress(*s)
	}
	return amauo
}

// ClearAppAddress clears the value of the "app_address" field.
func (amauo *AsMarketAppUpdateOne) ClearAppAddress() *AsMarketAppUpdateOne {
	amauo.mutation.ClearAppAddress()
	return amauo
}

// SetAppMail sets the "app_mail" field.
func (amauo *AsMarketAppUpdateOne) SetAppMail(s string) *AsMarketAppUpdateOne {
	amauo.mutation.SetAppMail(s)
	return amauo
}

// SetNillableAppMail sets the "app_mail" field if the given value is not nil.
func (amauo *AsMarketAppUpdateOne) SetNillableAppMail(s *string) *AsMarketAppUpdateOne {
	if s != nil {
		amauo.SetAppMail(*s)
	}
	return amauo
}

// ClearAppMail clears the value of the "app_mail" field.
func (amauo *AsMarketAppUpdateOne) ClearAppMail() *AsMarketAppUpdateOne {
	amauo.mutation.ClearAppMail()
	return amauo
}

// SetAppPhoto sets the "app_photo" field.
func (amauo *AsMarketAppUpdateOne) SetAppPhoto(s string) *AsMarketAppUpdateOne {
	amauo.mutation.SetAppPhoto(s)
	return amauo
}

// SetNillableAppPhoto sets the "app_photo" field if the given value is not nil.
func (amauo *AsMarketAppUpdateOne) SetNillableAppPhoto(s *string) *AsMarketAppUpdateOne {
	if s != nil {
		amauo.SetAppPhoto(*s)
	}
	return amauo
}

// ClearAppPhoto clears the value of the "app_photo" field.
func (amauo *AsMarketAppUpdateOne) ClearAppPhoto() *AsMarketAppUpdateOne {
	amauo.mutation.ClearAppPhoto()
	return amauo
}

// SetAppField sets the "app_field" field.
func (amauo *AsMarketAppUpdateOne) SetAppField(i int64) *AsMarketAppUpdateOne {
	amauo.mutation.ResetAppField()
	amauo.mutation.SetAppField(i)
	return amauo
}

// SetNillableAppField sets the "app_field" field if the given value is not nil.
func (amauo *AsMarketAppUpdateOne) SetNillableAppField(i *int64) *AsMarketAppUpdateOne {
	if i != nil {
		amauo.SetAppField(*i)
	}
	return amauo
}

// AddAppField adds i to the "app_field" field.
func (amauo *AsMarketAppUpdateOne) AddAppField(i int64) *AsMarketAppUpdateOne {
	amauo.mutation.AddAppField(i)
	return amauo
}

// ClearAppField clears the value of the "app_field" field.
func (amauo *AsMarketAppUpdateOne) ClearAppField() *AsMarketAppUpdateOne {
	amauo.mutation.ClearAppField()
	return amauo
}

// SetAppCategory sets the "app_category" field.
func (amauo *AsMarketAppUpdateOne) SetAppCategory(i int64) *AsMarketAppUpdateOne {
	amauo.mutation.ResetAppCategory()
	amauo.mutation.SetAppCategory(i)
	return amauo
}

// SetNillableAppCategory sets the "app_category" field if the given value is not nil.
func (amauo *AsMarketAppUpdateOne) SetNillableAppCategory(i *int64) *AsMarketAppUpdateOne {
	if i != nil {
		amauo.SetAppCategory(*i)
	}
	return amauo
}

// AddAppCategory adds i to the "app_category" field.
func (amauo *AsMarketAppUpdateOne) AddAppCategory(i int64) *AsMarketAppUpdateOne {
	amauo.mutation.AddAppCategory(i)
	return amauo
}

// ClearAppCategory clears the value of the "app_category" field.
func (amauo *AsMarketAppUpdateOne) ClearAppCategory() *AsMarketAppUpdateOne {
	amauo.mutation.ClearAppCategory()
	return amauo
}

// SetAppProjectSource sets the "app_project_source" field.
func (amauo *AsMarketAppUpdateOne) SetAppProjectSource(i int64) *AsMarketAppUpdateOne {
	amauo.mutation.ResetAppProjectSource()
	amauo.mutation.SetAppProjectSource(i)
	return amauo
}

// SetNillableAppProjectSource sets the "app_project_source" field if the given value is not nil.
func (amauo *AsMarketAppUpdateOne) SetNillableAppProjectSource(i *int64) *AsMarketAppUpdateOne {
	if i != nil {
		amauo.SetAppProjectSource(*i)
	}
	return amauo
}

// AddAppProjectSource adds i to the "app_project_source" field.
func (amauo *AsMarketAppUpdateOne) AddAppProjectSource(i int64) *AsMarketAppUpdateOne {
	amauo.mutation.AddAppProjectSource(i)
	return amauo
}

// ClearAppProjectSource clears the value of the "app_project_source" field.
func (amauo *AsMarketAppUpdateOne) ClearAppProjectSource() *AsMarketAppUpdateOne {
	amauo.mutation.ClearAppProjectSource()
	return amauo
}

// SetAppStar sets the "app_star" field.
func (amauo *AsMarketAppUpdateOne) SetAppStar(i int64) *AsMarketAppUpdateOne {
	amauo.mutation.ResetAppStar()
	amauo.mutation.SetAppStar(i)
	return amauo
}

// AddAppStar adds i to the "app_star" field.
func (amauo *AsMarketAppUpdateOne) AddAppStar(i int64) *AsMarketAppUpdateOne {
	amauo.mutation.AddAppStar(i)
	return amauo
}

// SetAppFoundsSource sets the "app_founds_source" field.
func (amauo *AsMarketAppUpdateOne) SetAppFoundsSource(i int64) *AsMarketAppUpdateOne {
	amauo.mutation.ResetAppFoundsSource()
	amauo.mutation.SetAppFoundsSource(i)
	return amauo
}

// SetNillableAppFoundsSource sets the "app_founds_source" field if the given value is not nil.
func (amauo *AsMarketAppUpdateOne) SetNillableAppFoundsSource(i *int64) *AsMarketAppUpdateOne {
	if i != nil {
		amauo.SetAppFoundsSource(*i)
	}
	return amauo
}

// AddAppFoundsSource adds i to the "app_founds_source" field.
func (amauo *AsMarketAppUpdateOne) AddAppFoundsSource(i int64) *AsMarketAppUpdateOne {
	amauo.mutation.AddAppFoundsSource(i)
	return amauo
}

// ClearAppFoundsSource clears the value of the "app_founds_source" field.
func (amauo *AsMarketAppUpdateOne) ClearAppFoundsSource() *AsMarketAppUpdateOne {
	amauo.mutation.ClearAppFoundsSource()
	return amauo
}

// SetInnerURL sets the "inner_url" field.
func (amauo *AsMarketAppUpdateOne) SetInnerURL(s string) *AsMarketAppUpdateOne {
	amauo.mutation.SetInnerURL(s)
	return amauo
}

// SetNillableInnerURL sets the "inner_url" field if the given value is not nil.
func (amauo *AsMarketAppUpdateOne) SetNillableInnerURL(s *string) *AsMarketAppUpdateOne {
	if s != nil {
		amauo.SetInnerURL(*s)
	}
	return amauo
}

// ClearInnerURL clears the value of the "inner_url" field.
func (amauo *AsMarketAppUpdateOne) ClearInnerURL() *AsMarketAppUpdateOne {
	amauo.mutation.ClearInnerURL()
	return amauo
}

// SetOutURL sets the "out_url" field.
func (amauo *AsMarketAppUpdateOne) SetOutURL(s string) *AsMarketAppUpdateOne {
	amauo.mutation.SetOutURL(s)
	return amauo
}

// SetNillableOutURL sets the "out_url" field if the given value is not nil.
func (amauo *AsMarketAppUpdateOne) SetNillableOutURL(s *string) *AsMarketAppUpdateOne {
	if s != nil {
		amauo.SetOutURL(*s)
	}
	return amauo
}

// ClearOutURL clears the value of the "out_url" field.
func (amauo *AsMarketAppUpdateOne) ClearOutURL() *AsMarketAppUpdateOne {
	amauo.mutation.ClearOutURL()
	return amauo
}

// SetReformStatus sets the "reform_status" field.
func (amauo *AsMarketAppUpdateOne) SetReformStatus(i int64) *AsMarketAppUpdateOne {
	amauo.mutation.ResetReformStatus()
	amauo.mutation.SetReformStatus(i)
	return amauo
}

// AddReformStatus adds i to the "reform_status" field.
func (amauo *AsMarketAppUpdateOne) AddReformStatus(i int64) *AsMarketAppUpdateOne {
	amauo.mutation.AddReformStatus(i)
	return amauo
}

// SetOutIPURL sets the "out_ip_url" field.
func (amauo *AsMarketAppUpdateOne) SetOutIPURL(s string) *AsMarketAppUpdateOne {
	amauo.mutation.SetOutIPURL(s)
	return amauo
}

// SetNillableOutIPURL sets the "out_ip_url" field if the given value is not nil.
func (amauo *AsMarketAppUpdateOne) SetNillableOutIPURL(s *string) *AsMarketAppUpdateOne {
	if s != nil {
		amauo.SetOutIPURL(*s)
	}
	return amauo
}

// ClearOutIPURL clears the value of the "out_ip_url" field.
func (amauo *AsMarketAppUpdateOne) ClearOutIPURL() *AsMarketAppUpdateOne {
	amauo.mutation.ClearOutIPURL()
	return amauo
}

// SetIsDeleted sets the "is_deleted" field.
func (amauo *AsMarketAppUpdateOne) SetIsDeleted(i int64) *AsMarketAppUpdateOne {
	amauo.mutation.ResetIsDeleted()
	amauo.mutation.SetIsDeleted(i)
	return amauo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (amauo *AsMarketAppUpdateOne) SetNillableIsDeleted(i *int64) *AsMarketAppUpdateOne {
	if i != nil {
		amauo.SetIsDeleted(*i)
	}
	return amauo
}

// AddIsDeleted adds i to the "is_deleted" field.
func (amauo *AsMarketAppUpdateOne) AddIsDeleted(i int64) *AsMarketAppUpdateOne {
	amauo.mutation.AddIsDeleted(i)
	return amauo
}

// SetStatus sets the "status" field.
func (amauo *AsMarketAppUpdateOne) SetStatus(i int64) *AsMarketAppUpdateOne {
	amauo.mutation.ResetStatus()
	amauo.mutation.SetStatus(i)
	return amauo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (amauo *AsMarketAppUpdateOne) SetNillableStatus(i *int64) *AsMarketAppUpdateOne {
	if i != nil {
		amauo.SetStatus(*i)
	}
	return amauo
}

// AddStatus adds i to the "status" field.
func (amauo *AsMarketAppUpdateOne) AddStatus(i int64) *AsMarketAppUpdateOne {
	amauo.mutation.AddStatus(i)
	return amauo
}

// ClearStatus clears the value of the "status" field.
func (amauo *AsMarketAppUpdateOne) ClearStatus() *AsMarketAppUpdateOne {
	amauo.mutation.ClearStatus()
	return amauo
}

// SetCreateUser sets the "create_user" field.
func (amauo *AsMarketAppUpdateOne) SetCreateUser(i int64) *AsMarketAppUpdateOne {
	amauo.mutation.ResetCreateUser()
	amauo.mutation.SetCreateUser(i)
	return amauo
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (amauo *AsMarketAppUpdateOne) SetNillableCreateUser(i *int64) *AsMarketAppUpdateOne {
	if i != nil {
		amauo.SetCreateUser(*i)
	}
	return amauo
}

// AddCreateUser adds i to the "create_user" field.
func (amauo *AsMarketAppUpdateOne) AddCreateUser(i int64) *AsMarketAppUpdateOne {
	amauo.mutation.AddCreateUser(i)
	return amauo
}

// ClearCreateUser clears the value of the "create_user" field.
func (amauo *AsMarketAppUpdateOne) ClearCreateUser() *AsMarketAppUpdateOne {
	amauo.mutation.ClearCreateUser()
	return amauo
}

// SetUpdateUser sets the "update_user" field.
func (amauo *AsMarketAppUpdateOne) SetUpdateUser(i int64) *AsMarketAppUpdateOne {
	amauo.mutation.ResetUpdateUser()
	amauo.mutation.SetUpdateUser(i)
	return amauo
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (amauo *AsMarketAppUpdateOne) SetNillableUpdateUser(i *int64) *AsMarketAppUpdateOne {
	if i != nil {
		amauo.SetUpdateUser(*i)
	}
	return amauo
}

// AddUpdateUser adds i to the "update_user" field.
func (amauo *AsMarketAppUpdateOne) AddUpdateUser(i int64) *AsMarketAppUpdateOne {
	amauo.mutation.AddUpdateUser(i)
	return amauo
}

// ClearUpdateUser clears the value of the "update_user" field.
func (amauo *AsMarketAppUpdateOne) ClearUpdateUser() *AsMarketAppUpdateOne {
	amauo.mutation.ClearUpdateUser()
	return amauo
}

// SetUpdateTime sets the "update_time" field.
func (amauo *AsMarketAppUpdateOne) SetUpdateTime(dt date.DateTime) *AsMarketAppUpdateOne {
	amauo.mutation.SetUpdateTime(dt)
	return amauo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (amauo *AsMarketAppUpdateOne) ClearUpdateTime() *AsMarketAppUpdateOne {
	amauo.mutation.ClearUpdateTime()
	return amauo
}

// AddAppMenuIDs adds the "appMenus" edge to the AsMarketMenu entity by IDs.
func (amauo *AsMarketAppUpdateOne) AddAppMenuIDs(ids ...int64) *AsMarketAppUpdateOne {
	amauo.mutation.AddAppMenuIDs(ids...)
	return amauo
}

// AddAppMenus adds the "appMenus" edges to the AsMarketMenu entity.
func (amauo *AsMarketAppUpdateOne) AddAppMenus(a ...*AsMarketMenu) *AsMarketAppUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amauo.AddAppMenuIDs(ids...)
}

// AddAppRoleIDs adds the "appRoles" edge to the AsMarketAppRole entity by IDs.
func (amauo *AsMarketAppUpdateOne) AddAppRoleIDs(ids ...int64) *AsMarketAppUpdateOne {
	amauo.mutation.AddAppRoleIDs(ids...)
	return amauo
}

// AddAppRoles adds the "appRoles" edges to the AsMarketAppRole entity.
func (amauo *AsMarketAppUpdateOne) AddAppRoles(a ...*AsMarketAppRole) *AsMarketAppUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amauo.AddAppRoleIDs(ids...)
}

// AddUsedIDs adds the "useds" edge to the AsMarketUsedApp entity by IDs.
func (amauo *AsMarketAppUpdateOne) AddUsedIDs(ids ...int64) *AsMarketAppUpdateOne {
	amauo.mutation.AddUsedIDs(ids...)
	return amauo
}

// AddUseds adds the "useds" edges to the AsMarketUsedApp entity.
func (amauo *AsMarketAppUpdateOne) AddUseds(a ...*AsMarketUsedApp) *AsMarketAppUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amauo.AddUsedIDs(ids...)
}

// AddAppAlertIDs adds the "appAlerts" edge to the AsMarketAppAlert entity by IDs.
func (amauo *AsMarketAppUpdateOne) AddAppAlertIDs(ids ...int64) *AsMarketAppUpdateOne {
	amauo.mutation.AddAppAlertIDs(ids...)
	return amauo
}

// AddAppAlerts adds the "appAlerts" edges to the AsMarketAppAlert entity.
func (amauo *AsMarketAppUpdateOne) AddAppAlerts(a ...*AsMarketAppAlert) *AsMarketAppUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amauo.AddAppAlertIDs(ids...)
}

// AddAppRedeployIDs adds the "appRedeploys" edge to the AsRedeployData entity by IDs.
func (amauo *AsMarketAppUpdateOne) AddAppRedeployIDs(ids ...int64) *AsMarketAppUpdateOne {
	amauo.mutation.AddAppRedeployIDs(ids...)
	return amauo
}

// AddAppRedeploys adds the "appRedeploys" edges to the AsRedeployData entity.
func (amauo *AsMarketAppUpdateOne) AddAppRedeploys(a ...*AsRedeployData) *AsMarketAppUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amauo.AddAppRedeployIDs(ids...)
}

// AddAppKeyIDs adds the "appKeys" edge to the AsMarketAppKeySecret entity by IDs.
func (amauo *AsMarketAppUpdateOne) AddAppKeyIDs(ids ...int64) *AsMarketAppUpdateOne {
	amauo.mutation.AddAppKeyIDs(ids...)
	return amauo
}

// AddAppKeys adds the "appKeys" edges to the AsMarketAppKeySecret entity.
func (amauo *AsMarketAppUpdateOne) AddAppKeys(a ...*AsMarketAppKeySecret) *AsMarketAppUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amauo.AddAppKeyIDs(ids...)
}

// AddAppPurchaseIDs adds the "appPurchases" edge to the AsMarketAppPurchase entity by IDs.
func (amauo *AsMarketAppUpdateOne) AddAppPurchaseIDs(ids ...int64) *AsMarketAppUpdateOne {
	amauo.mutation.AddAppPurchaseIDs(ids...)
	return amauo
}

// AddAppPurchases adds the "appPurchases" edges to the AsMarketAppPurchase entity.
func (amauo *AsMarketAppUpdateOne) AddAppPurchases(a ...*AsMarketAppPurchase) *AsMarketAppUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amauo.AddAppPurchaseIDs(ids...)
}

// AddAppComponentIDs adds the "appComponents" edge to the AsMarketAppComponent entity by IDs.
func (amauo *AsMarketAppUpdateOne) AddAppComponentIDs(ids ...int64) *AsMarketAppUpdateOne {
	amauo.mutation.AddAppComponentIDs(ids...)
	return amauo
}

// AddAppComponents adds the "appComponents" edges to the AsMarketAppComponent entity.
func (amauo *AsMarketAppUpdateOne) AddAppComponents(a ...*AsMarketAppComponent) *AsMarketAppUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amauo.AddAppComponentIDs(ids...)
}

// AddAppGroupDistribIDs adds the "appGroupDistribs" edge to the AsMarketAppGroupDistribution entity by IDs.
func (amauo *AsMarketAppUpdateOne) AddAppGroupDistribIDs(ids ...int64) *AsMarketAppUpdateOne {
	amauo.mutation.AddAppGroupDistribIDs(ids...)
	return amauo
}

// AddAppGroupDistribs adds the "appGroupDistribs" edges to the AsMarketAppGroupDistribution entity.
func (amauo *AsMarketAppUpdateOne) AddAppGroupDistribs(a ...*AsMarketAppGroupDistribution) *AsMarketAppUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amauo.AddAppGroupDistribIDs(ids...)
}

// AddAppGroupDistribConfigIDs adds the "appGroupDistribConfigs" edge to the AsAppGroupDistributionData entity by IDs.
func (amauo *AsMarketAppUpdateOne) AddAppGroupDistribConfigIDs(ids ...int64) *AsMarketAppUpdateOne {
	amauo.mutation.AddAppGroupDistribConfigIDs(ids...)
	return amauo
}

// AddAppGroupDistribConfigs adds the "appGroupDistribConfigs" edges to the AsAppGroupDistributionData entity.
func (amauo *AsMarketAppUpdateOne) AddAppGroupDistribConfigs(a ...*AsAppGroupDistributionData) *AsMarketAppUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amauo.AddAppGroupDistribConfigIDs(ids...)
}

// AddAppGroupDistribsRelationIDs adds the "appGroupDistribsRelation" edge to the AsMarketAppGroupDistributionRelation entity by IDs.
func (amauo *AsMarketAppUpdateOne) AddAppGroupDistribsRelationIDs(ids ...int64) *AsMarketAppUpdateOne {
	amauo.mutation.AddAppGroupDistribsRelationIDs(ids...)
	return amauo
}

// AddAppGroupDistribsRelation adds the "appGroupDistribsRelation" edges to the AsMarketAppGroupDistributionRelation entity.
func (amauo *AsMarketAppUpdateOne) AddAppGroupDistribsRelation(a ...*AsMarketAppGroupDistributionRelation) *AsMarketAppUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amauo.AddAppGroupDistribsRelationIDs(ids...)
}

// Mutation returns the AsMarketAppMutation object of the builder.
func (amauo *AsMarketAppUpdateOne) Mutation() *AsMarketAppMutation {
	return amauo.mutation
}

// ClearAppMenus clears all "appMenus" edges to the AsMarketMenu entity.
func (amauo *AsMarketAppUpdateOne) ClearAppMenus() *AsMarketAppUpdateOne {
	amauo.mutation.ClearAppMenus()
	return amauo
}

// RemoveAppMenuIDs removes the "appMenus" edge to AsMarketMenu entities by IDs.
func (amauo *AsMarketAppUpdateOne) RemoveAppMenuIDs(ids ...int64) *AsMarketAppUpdateOne {
	amauo.mutation.RemoveAppMenuIDs(ids...)
	return amauo
}

// RemoveAppMenus removes "appMenus" edges to AsMarketMenu entities.
func (amauo *AsMarketAppUpdateOne) RemoveAppMenus(a ...*AsMarketMenu) *AsMarketAppUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amauo.RemoveAppMenuIDs(ids...)
}

// ClearAppRoles clears all "appRoles" edges to the AsMarketAppRole entity.
func (amauo *AsMarketAppUpdateOne) ClearAppRoles() *AsMarketAppUpdateOne {
	amauo.mutation.ClearAppRoles()
	return amauo
}

// RemoveAppRoleIDs removes the "appRoles" edge to AsMarketAppRole entities by IDs.
func (amauo *AsMarketAppUpdateOne) RemoveAppRoleIDs(ids ...int64) *AsMarketAppUpdateOne {
	amauo.mutation.RemoveAppRoleIDs(ids...)
	return amauo
}

// RemoveAppRoles removes "appRoles" edges to AsMarketAppRole entities.
func (amauo *AsMarketAppUpdateOne) RemoveAppRoles(a ...*AsMarketAppRole) *AsMarketAppUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amauo.RemoveAppRoleIDs(ids...)
}

// ClearUseds clears all "useds" edges to the AsMarketUsedApp entity.
func (amauo *AsMarketAppUpdateOne) ClearUseds() *AsMarketAppUpdateOne {
	amauo.mutation.ClearUseds()
	return amauo
}

// RemoveUsedIDs removes the "useds" edge to AsMarketUsedApp entities by IDs.
func (amauo *AsMarketAppUpdateOne) RemoveUsedIDs(ids ...int64) *AsMarketAppUpdateOne {
	amauo.mutation.RemoveUsedIDs(ids...)
	return amauo
}

// RemoveUseds removes "useds" edges to AsMarketUsedApp entities.
func (amauo *AsMarketAppUpdateOne) RemoveUseds(a ...*AsMarketUsedApp) *AsMarketAppUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amauo.RemoveUsedIDs(ids...)
}

// ClearAppAlerts clears all "appAlerts" edges to the AsMarketAppAlert entity.
func (amauo *AsMarketAppUpdateOne) ClearAppAlerts() *AsMarketAppUpdateOne {
	amauo.mutation.ClearAppAlerts()
	return amauo
}

// RemoveAppAlertIDs removes the "appAlerts" edge to AsMarketAppAlert entities by IDs.
func (amauo *AsMarketAppUpdateOne) RemoveAppAlertIDs(ids ...int64) *AsMarketAppUpdateOne {
	amauo.mutation.RemoveAppAlertIDs(ids...)
	return amauo
}

// RemoveAppAlerts removes "appAlerts" edges to AsMarketAppAlert entities.
func (amauo *AsMarketAppUpdateOne) RemoveAppAlerts(a ...*AsMarketAppAlert) *AsMarketAppUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amauo.RemoveAppAlertIDs(ids...)
}

// ClearAppRedeploys clears all "appRedeploys" edges to the AsRedeployData entity.
func (amauo *AsMarketAppUpdateOne) ClearAppRedeploys() *AsMarketAppUpdateOne {
	amauo.mutation.ClearAppRedeploys()
	return amauo
}

// RemoveAppRedeployIDs removes the "appRedeploys" edge to AsRedeployData entities by IDs.
func (amauo *AsMarketAppUpdateOne) RemoveAppRedeployIDs(ids ...int64) *AsMarketAppUpdateOne {
	amauo.mutation.RemoveAppRedeployIDs(ids...)
	return amauo
}

// RemoveAppRedeploys removes "appRedeploys" edges to AsRedeployData entities.
func (amauo *AsMarketAppUpdateOne) RemoveAppRedeploys(a ...*AsRedeployData) *AsMarketAppUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amauo.RemoveAppRedeployIDs(ids...)
}

// ClearAppKeys clears all "appKeys" edges to the AsMarketAppKeySecret entity.
func (amauo *AsMarketAppUpdateOne) ClearAppKeys() *AsMarketAppUpdateOne {
	amauo.mutation.ClearAppKeys()
	return amauo
}

// RemoveAppKeyIDs removes the "appKeys" edge to AsMarketAppKeySecret entities by IDs.
func (amauo *AsMarketAppUpdateOne) RemoveAppKeyIDs(ids ...int64) *AsMarketAppUpdateOne {
	amauo.mutation.RemoveAppKeyIDs(ids...)
	return amauo
}

// RemoveAppKeys removes "appKeys" edges to AsMarketAppKeySecret entities.
func (amauo *AsMarketAppUpdateOne) RemoveAppKeys(a ...*AsMarketAppKeySecret) *AsMarketAppUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amauo.RemoveAppKeyIDs(ids...)
}

// ClearAppPurchases clears all "appPurchases" edges to the AsMarketAppPurchase entity.
func (amauo *AsMarketAppUpdateOne) ClearAppPurchases() *AsMarketAppUpdateOne {
	amauo.mutation.ClearAppPurchases()
	return amauo
}

// RemoveAppPurchaseIDs removes the "appPurchases" edge to AsMarketAppPurchase entities by IDs.
func (amauo *AsMarketAppUpdateOne) RemoveAppPurchaseIDs(ids ...int64) *AsMarketAppUpdateOne {
	amauo.mutation.RemoveAppPurchaseIDs(ids...)
	return amauo
}

// RemoveAppPurchases removes "appPurchases" edges to AsMarketAppPurchase entities.
func (amauo *AsMarketAppUpdateOne) RemoveAppPurchases(a ...*AsMarketAppPurchase) *AsMarketAppUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amauo.RemoveAppPurchaseIDs(ids...)
}

// ClearAppComponents clears all "appComponents" edges to the AsMarketAppComponent entity.
func (amauo *AsMarketAppUpdateOne) ClearAppComponents() *AsMarketAppUpdateOne {
	amauo.mutation.ClearAppComponents()
	return amauo
}

// RemoveAppComponentIDs removes the "appComponents" edge to AsMarketAppComponent entities by IDs.
func (amauo *AsMarketAppUpdateOne) RemoveAppComponentIDs(ids ...int64) *AsMarketAppUpdateOne {
	amauo.mutation.RemoveAppComponentIDs(ids...)
	return amauo
}

// RemoveAppComponents removes "appComponents" edges to AsMarketAppComponent entities.
func (amauo *AsMarketAppUpdateOne) RemoveAppComponents(a ...*AsMarketAppComponent) *AsMarketAppUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amauo.RemoveAppComponentIDs(ids...)
}

// ClearAppGroupDistribs clears all "appGroupDistribs" edges to the AsMarketAppGroupDistribution entity.
func (amauo *AsMarketAppUpdateOne) ClearAppGroupDistribs() *AsMarketAppUpdateOne {
	amauo.mutation.ClearAppGroupDistribs()
	return amauo
}

// RemoveAppGroupDistribIDs removes the "appGroupDistribs" edge to AsMarketAppGroupDistribution entities by IDs.
func (amauo *AsMarketAppUpdateOne) RemoveAppGroupDistribIDs(ids ...int64) *AsMarketAppUpdateOne {
	amauo.mutation.RemoveAppGroupDistribIDs(ids...)
	return amauo
}

// RemoveAppGroupDistribs removes "appGroupDistribs" edges to AsMarketAppGroupDistribution entities.
func (amauo *AsMarketAppUpdateOne) RemoveAppGroupDistribs(a ...*AsMarketAppGroupDistribution) *AsMarketAppUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amauo.RemoveAppGroupDistribIDs(ids...)
}

// ClearAppGroupDistribConfigs clears all "appGroupDistribConfigs" edges to the AsAppGroupDistributionData entity.
func (amauo *AsMarketAppUpdateOne) ClearAppGroupDistribConfigs() *AsMarketAppUpdateOne {
	amauo.mutation.ClearAppGroupDistribConfigs()
	return amauo
}

// RemoveAppGroupDistribConfigIDs removes the "appGroupDistribConfigs" edge to AsAppGroupDistributionData entities by IDs.
func (amauo *AsMarketAppUpdateOne) RemoveAppGroupDistribConfigIDs(ids ...int64) *AsMarketAppUpdateOne {
	amauo.mutation.RemoveAppGroupDistribConfigIDs(ids...)
	return amauo
}

// RemoveAppGroupDistribConfigs removes "appGroupDistribConfigs" edges to AsAppGroupDistributionData entities.
func (amauo *AsMarketAppUpdateOne) RemoveAppGroupDistribConfigs(a ...*AsAppGroupDistributionData) *AsMarketAppUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amauo.RemoveAppGroupDistribConfigIDs(ids...)
}

// ClearAppGroupDistribsRelation clears all "appGroupDistribsRelation" edges to the AsMarketAppGroupDistributionRelation entity.
func (amauo *AsMarketAppUpdateOne) ClearAppGroupDistribsRelation() *AsMarketAppUpdateOne {
	amauo.mutation.ClearAppGroupDistribsRelation()
	return amauo
}

// RemoveAppGroupDistribsRelationIDs removes the "appGroupDistribsRelation" edge to AsMarketAppGroupDistributionRelation entities by IDs.
func (amauo *AsMarketAppUpdateOne) RemoveAppGroupDistribsRelationIDs(ids ...int64) *AsMarketAppUpdateOne {
	amauo.mutation.RemoveAppGroupDistribsRelationIDs(ids...)
	return amauo
}

// RemoveAppGroupDistribsRelation removes "appGroupDistribsRelation" edges to AsMarketAppGroupDistributionRelation entities.
func (amauo *AsMarketAppUpdateOne) RemoveAppGroupDistribsRelation(a ...*AsMarketAppGroupDistributionRelation) *AsMarketAppUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amauo.RemoveAppGroupDistribsRelationIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (amauo *AsMarketAppUpdateOne) Select(field string, fields ...string) *AsMarketAppUpdateOne {
	amauo.fields = append([]string{field}, fields...)
	return amauo
}

// Save executes the query and returns the updated AsMarketApp entity.
func (amauo *AsMarketAppUpdateOne) Save(ctx context.Context) (*AsMarketApp, error) {
	var (
		err  error
		node *AsMarketApp
	)
	amauo.defaults()
	if len(amauo.hooks) == 0 {
		node, err = amauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsMarketAppMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			amauo.mutation = mutation
			node, err = amauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(amauo.hooks) - 1; i >= 0; i-- {
			if amauo.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = amauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, amauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (amauo *AsMarketAppUpdateOne) SaveX(ctx context.Context) *AsMarketApp {
	node, err := amauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (amauo *AsMarketAppUpdateOne) Exec(ctx context.Context) error {
	_, err := amauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amauo *AsMarketAppUpdateOne) ExecX(ctx context.Context) {
	if err := amauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amauo *AsMarketAppUpdateOne) defaults() {
	if _, ok := amauo.mutation.UpdateTime(); !ok && !amauo.mutation.UpdateTimeCleared() {
		v := asmarketapp.UpdateDefaultUpdateTime()
		amauo.mutation.SetUpdateTime(v)
	}
}

func (amauo *AsMarketAppUpdateOne) sqlSave(ctx context.Context) (_node *AsMarketApp, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asmarketapp.Table,
			Columns: asmarketapp.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asmarketapp.FieldID,
			},
		},
	}
	id, ok := amauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`schema: missing "AsMarketApp.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := amauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asmarketapp.FieldID)
		for _, f := range fields {
			if !asmarketapp.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("schema: invalid field %q for query", f)}
			}
			if f != asmarketapp.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := amauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amauo.mutation.AppName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapp.FieldAppName,
		})
	}
	if amauo.mutation.AppNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketapp.FieldAppName,
		})
	}
	if value, ok := amauo.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapp.FieldIcon,
		})
	}
	if amauo.mutation.IconCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketapp.FieldIcon,
		})
	}
	if value, ok := amauo.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapp.FieldVersion,
		})
	}
	if amauo.mutation.VersionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketapp.FieldVersion,
		})
	}
	if value, ok := amauo.mutation.Contact(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapp.FieldContact,
		})
	}
	if amauo.mutation.ContactCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketapp.FieldContact,
		})
	}
	if value, ok := amauo.mutation.ContactName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapp.FieldContactName,
		})
	}
	if amauo.mutation.ContactNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketapp.FieldContactName,
		})
	}
	if value, ok := amauo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapp.FieldDescription,
		})
	}
	if amauo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketapp.FieldDescription,
		})
	}
	if value, ok := amauo.mutation.File(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapp.FieldFile,
		})
	}
	if amauo.mutation.FileCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketapp.FieldFile,
		})
	}
	if value, ok := amauo.mutation.SaleStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldSaleStatus,
		})
	}
	if value, ok := amauo.mutation.AddedSaleStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldSaleStatus,
		})
	}
	if amauo.mutation.SaleStatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketapp.FieldSaleStatus,
		})
	}
	if value, ok := amauo.mutation.TenantID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapp.FieldTenantID,
		})
	}
	if amauo.mutation.TenantIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketapp.FieldTenantID,
		})
	}
	if value, ok := amauo.mutation.Platform(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldPlatform,
		})
	}
	if value, ok := amauo.mutation.AddedPlatform(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldPlatform,
		})
	}
	if amauo.mutation.PlatformCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketapp.FieldPlatform,
		})
	}
	if value, ok := amauo.mutation.TargetUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldTargetUser,
		})
	}
	if value, ok := amauo.mutation.AddedTargetUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldTargetUser,
		})
	}
	if amauo.mutation.TargetUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketapp.FieldTargetUser,
		})
	}
	if value, ok := amauo.mutation.DeployStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldDeployStatus,
		})
	}
	if value, ok := amauo.mutation.AddedDeployStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldDeployStatus,
		})
	}
	if amauo.mutation.DeployStatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketapp.FieldDeployStatus,
		})
	}
	if value, ok := amauo.mutation.DeployAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapp.FieldDeployAddress,
		})
	}
	if amauo.mutation.DeployAddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketapp.FieldDeployAddress,
		})
	}
	if value, ok := amauo.mutation.DeployType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldDeployType,
		})
	}
	if value, ok := amauo.mutation.AddedDeployType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldDeployType,
		})
	}
	if amauo.mutation.DeployTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketapp.FieldDeployType,
		})
	}
	if value, ok := amauo.mutation.PublishTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketapp.FieldPublishTime,
		})
	}
	if amauo.mutation.PublishTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketapp.FieldPublishTime,
		})
	}
	if value, ok := amauo.mutation.AppType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldAppType,
		})
	}
	if value, ok := amauo.mutation.AddedAppType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldAppType,
		})
	}
	if amauo.mutation.AppTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketapp.FieldAppType,
		})
	}
	if value, ok := amauo.mutation.ApplyTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketapp.FieldApplyTime,
		})
	}
	if amauo.mutation.ApplyTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketapp.FieldApplyTime,
		})
	}
	if value, ok := amauo.mutation.AppAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapp.FieldAppAddress,
		})
	}
	if amauo.mutation.AppAddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketapp.FieldAppAddress,
		})
	}
	if value, ok := amauo.mutation.AppMail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapp.FieldAppMail,
		})
	}
	if amauo.mutation.AppMailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketapp.FieldAppMail,
		})
	}
	if value, ok := amauo.mutation.AppPhoto(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapp.FieldAppPhoto,
		})
	}
	if amauo.mutation.AppPhotoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketapp.FieldAppPhoto,
		})
	}
	if value, ok := amauo.mutation.AppField(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldAppField,
		})
	}
	if value, ok := amauo.mutation.AddedAppField(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldAppField,
		})
	}
	if amauo.mutation.AppFieldCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketapp.FieldAppField,
		})
	}
	if value, ok := amauo.mutation.AppCategory(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldAppCategory,
		})
	}
	if value, ok := amauo.mutation.AddedAppCategory(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldAppCategory,
		})
	}
	if amauo.mutation.AppCategoryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketapp.FieldAppCategory,
		})
	}
	if value, ok := amauo.mutation.AppProjectSource(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldAppProjectSource,
		})
	}
	if value, ok := amauo.mutation.AddedAppProjectSource(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldAppProjectSource,
		})
	}
	if amauo.mutation.AppProjectSourceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketapp.FieldAppProjectSource,
		})
	}
	if value, ok := amauo.mutation.AppStar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldAppStar,
		})
	}
	if value, ok := amauo.mutation.AddedAppStar(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldAppStar,
		})
	}
	if value, ok := amauo.mutation.AppFoundsSource(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldAppFoundsSource,
		})
	}
	if value, ok := amauo.mutation.AddedAppFoundsSource(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldAppFoundsSource,
		})
	}
	if amauo.mutation.AppFoundsSourceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketapp.FieldAppFoundsSource,
		})
	}
	if value, ok := amauo.mutation.InnerURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapp.FieldInnerURL,
		})
	}
	if amauo.mutation.InnerURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketapp.FieldInnerURL,
		})
	}
	if value, ok := amauo.mutation.OutURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapp.FieldOutURL,
		})
	}
	if amauo.mutation.OutURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketapp.FieldOutURL,
		})
	}
	if value, ok := amauo.mutation.ReformStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldReformStatus,
		})
	}
	if value, ok := amauo.mutation.AddedReformStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldReformStatus,
		})
	}
	if value, ok := amauo.mutation.OutIPURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapp.FieldOutIPURL,
		})
	}
	if amauo.mutation.OutIPURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketapp.FieldOutIPURL,
		})
	}
	if value, ok := amauo.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldIsDeleted,
		})
	}
	if value, ok := amauo.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldIsDeleted,
		})
	}
	if value, ok := amauo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldStatus,
		})
	}
	if value, ok := amauo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldStatus,
		})
	}
	if amauo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketapp.FieldStatus,
		})
	}
	if value, ok := amauo.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldCreateUser,
		})
	}
	if value, ok := amauo.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldCreateUser,
		})
	}
	if amauo.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketapp.FieldCreateUser,
		})
	}
	if value, ok := amauo.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldUpdateUser,
		})
	}
	if value, ok := amauo.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldUpdateUser,
		})
	}
	if amauo.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketapp.FieldUpdateUser,
		})
	}
	if amauo.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketapp.FieldCreateTime,
		})
	}
	if value, ok := amauo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketapp.FieldUpdateTime,
		})
	}
	if amauo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketapp.FieldUpdateTime,
		})
	}
	if amauo.mutation.AppMenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppMenusTable,
			Columns: []string{asmarketapp.AppMenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketmenu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amauo.mutation.RemovedAppMenusIDs(); len(nodes) > 0 && !amauo.mutation.AppMenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppMenusTable,
			Columns: []string{asmarketapp.AppMenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amauo.mutation.AppMenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppMenusTable,
			Columns: []string{asmarketapp.AppMenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amauo.mutation.AppRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppRolesTable,
			Columns: []string{asmarketapp.AppRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapprole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amauo.mutation.RemovedAppRolesIDs(); len(nodes) > 0 && !amauo.mutation.AppRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppRolesTable,
			Columns: []string{asmarketapp.AppRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapprole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amauo.mutation.AppRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppRolesTable,
			Columns: []string{asmarketapp.AppRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapprole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amauo.mutation.UsedsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.UsedsTable,
			Columns: []string{asmarketapp.UsedsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketusedapp.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amauo.mutation.RemovedUsedsIDs(); len(nodes) > 0 && !amauo.mutation.UsedsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.UsedsTable,
			Columns: []string{asmarketapp.UsedsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketusedapp.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amauo.mutation.UsedsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.UsedsTable,
			Columns: []string{asmarketapp.UsedsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketusedapp.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amauo.mutation.AppAlertsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppAlertsTable,
			Columns: []string{asmarketapp.AppAlertsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappalert.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amauo.mutation.RemovedAppAlertsIDs(); len(nodes) > 0 && !amauo.mutation.AppAlertsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppAlertsTable,
			Columns: []string{asmarketapp.AppAlertsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappalert.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amauo.mutation.AppAlertsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppAlertsTable,
			Columns: []string{asmarketapp.AppAlertsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappalert.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amauo.mutation.AppRedeploysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppRedeploysTable,
			Columns: []string{asmarketapp.AppRedeploysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asredeploydata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amauo.mutation.RemovedAppRedeploysIDs(); len(nodes) > 0 && !amauo.mutation.AppRedeploysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppRedeploysTable,
			Columns: []string{asmarketapp.AppRedeploysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asredeploydata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amauo.mutation.AppRedeploysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppRedeploysTable,
			Columns: []string{asmarketapp.AppRedeploysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asredeploydata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amauo.mutation.AppKeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppKeysTable,
			Columns: []string{asmarketapp.AppKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappkeysecret.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amauo.mutation.RemovedAppKeysIDs(); len(nodes) > 0 && !amauo.mutation.AppKeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppKeysTable,
			Columns: []string{asmarketapp.AppKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappkeysecret.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amauo.mutation.AppKeysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppKeysTable,
			Columns: []string{asmarketapp.AppKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappkeysecret.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amauo.mutation.AppPurchasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppPurchasesTable,
			Columns: []string{asmarketapp.AppPurchasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapppurchase.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amauo.mutation.RemovedAppPurchasesIDs(); len(nodes) > 0 && !amauo.mutation.AppPurchasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppPurchasesTable,
			Columns: []string{asmarketapp.AppPurchasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapppurchase.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amauo.mutation.AppPurchasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppPurchasesTable,
			Columns: []string{asmarketapp.AppPurchasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapppurchase.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amauo.mutation.AppComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppComponentsTable,
			Columns: []string{asmarketapp.AppComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappcomponent.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amauo.mutation.RemovedAppComponentsIDs(); len(nodes) > 0 && !amauo.mutation.AppComponentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppComponentsTable,
			Columns: []string{asmarketapp.AppComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappcomponent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amauo.mutation.AppComponentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppComponentsTable,
			Columns: []string{asmarketapp.AppComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappcomponent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amauo.mutation.AppGroupDistribsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppGroupDistribsTable,
			Columns: []string{asmarketapp.AppGroupDistribsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappgroupdistribution.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amauo.mutation.RemovedAppGroupDistribsIDs(); len(nodes) > 0 && !amauo.mutation.AppGroupDistribsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppGroupDistribsTable,
			Columns: []string{asmarketapp.AppGroupDistribsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappgroupdistribution.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amauo.mutation.AppGroupDistribsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppGroupDistribsTable,
			Columns: []string{asmarketapp.AppGroupDistribsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappgroupdistribution.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amauo.mutation.AppGroupDistribConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppGroupDistribConfigsTable,
			Columns: []string{asmarketapp.AppGroupDistribConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asappgroupdistributiondata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amauo.mutation.RemovedAppGroupDistribConfigsIDs(); len(nodes) > 0 && !amauo.mutation.AppGroupDistribConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppGroupDistribConfigsTable,
			Columns: []string{asmarketapp.AppGroupDistribConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asappgroupdistributiondata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amauo.mutation.AppGroupDistribConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppGroupDistribConfigsTable,
			Columns: []string{asmarketapp.AppGroupDistribConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asappgroupdistributiondata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amauo.mutation.AppGroupDistribsRelationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppGroupDistribsRelationTable,
			Columns: []string{asmarketapp.AppGroupDistribsRelationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappgroupdistributionrelation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amauo.mutation.RemovedAppGroupDistribsRelationIDs(); len(nodes) > 0 && !amauo.mutation.AppGroupDistribsRelationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppGroupDistribsRelationTable,
			Columns: []string{asmarketapp.AppGroupDistribsRelationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappgroupdistributionrelation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amauo.mutation.AppGroupDistribsRelationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppGroupDistribsRelationTable,
			Columns: []string{asmarketapp.AppGroupDistribsRelationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappgroupdistributionrelation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AsMarketApp{config: amauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, amauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asmarketapp.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
