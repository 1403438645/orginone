// Code generated by entc, DO NOT EDIT.

package asperson

import (
	"orginone/common/tools/date"
)

const (
	// Label holds the string label denoting the asperson type in the database.
	Label = "as_person"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantCode holds the string denoting the tenant_code field in the database.
	FieldTenantCode = "tenant_code"
	// FieldRealName holds the string denoting the real_name field in the database.
	FieldRealName = "real_name"
	// FieldIDCard holds the string denoting the id_card field in the database.
	FieldIDCard = "id_card"
	// FieldGender holds the string denoting the gender field in the database.
	FieldGender = "gender"
	// FieldUserBirthday holds the string denoting the user_birthday field in the database.
	FieldUserBirthday = "user_birthday"
	// FieldUserEmail holds the string denoting the user_email field in the database.
	FieldUserEmail = "user_email"
	// FieldUserPhoto holds the string denoting the user_photo field in the database.
	FieldUserPhoto = "user_photo"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldPhoneNumber holds the string denoting the phone_number field in the database.
	FieldPhoneNumber = "phone_number"
	// FieldProvince holds the string denoting the province field in the database.
	FieldProvince = "province"
	// FieldCity holds the string denoting the city field in the database.
	FieldCity = "city"
	// FieldStreetAddress holds the string denoting the street_address field in the database.
	FieldStreetAddress = "street_address"
	// FieldUserCode holds the string denoting the user_code field in the database.
	FieldUserCode = "user_code"
	// FieldIsMaster holds the string denoting the is_master field in the database.
	FieldIsMaster = "is_master"
	// FieldIsDeleted holds the string denoting the is_deleted field in the database.
	FieldIsDeleted = "is_deleted"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreateUser holds the string denoting the create_user field in the database.
	FieldCreateUser = "create_user"
	// FieldUpdateUser holds the string denoting the update_user field in the database.
	FieldUpdateUser = "update_user"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// EdgeUserx holds the string denoting the userx edge name in mutations.
	EdgeUserx = "userx"
	// EdgeAgencys holds the string denoting the agencys edge name in mutations.
	EdgeAgencys = "agencys"
	// EdgeJobs holds the string denoting the jobs edge name in mutations.
	EdgeJobs = "jobs"
	// Table holds the table name of the asperson in the database.
	Table = "as_person"
	// UserxTable is the table that holds the userx relation/edge.
	UserxTable = "as_person"
	// UserxInverseTable is the table name for the AsUser entity.
	// It exists in this package in order to avoid circular dependency with the "asuser" package.
	UserxInverseTable = "as_user"
	// UserxColumn is the table column denoting the userx relation/edge.
	UserxColumn = "user_id"
	// AgencysTable is the table that holds the agencys relation/edge. The primary key declared below.
	AgencysTable = "as_agency_person"
	// AgencysInverseTable is the table name for the AsInnerAgency entity.
	// It exists in this package in order to avoid circular dependency with the "asinneragency" package.
	AgencysInverseTable = "as_inner_agency"
	// JobsTable is the table that holds the jobs relation/edge. The primary key declared below.
	JobsTable = "as_job_person"
	// JobsInverseTable is the table name for the AsJob entity.
	// It exists in this package in order to avoid circular dependency with the "asjob" package.
	JobsInverseTable = "as_job"
)

// Columns holds all SQL columns for asperson fields.
var Columns = []string{
	FieldID,
	FieldTenantCode,
	FieldRealName,
	FieldIDCard,
	FieldGender,
	FieldUserBirthday,
	FieldUserEmail,
	FieldUserPhoto,
	FieldUserID,
	FieldPhoneNumber,
	FieldProvince,
	FieldCity,
	FieldStreetAddress,
	FieldUserCode,
	FieldIsMaster,
	FieldIsDeleted,
	FieldStatus,
	FieldCreateUser,
	FieldUpdateUser,
	FieldCreateTime,
	FieldUpdateTime,
}

var (
	// AgencysPrimaryKey and AgencysColumn2 are the table columns denoting the
	// primary key for the agencys relation (M2M).
	AgencysPrimaryKey = []string{"agency_id", "person_id"}
	// JobsPrimaryKey and JobsColumn2 are the table columns denoting the
	// primary key for the jobs relation (M2M).
	JobsPrimaryKey = []string{"job_id", "person_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsDeleted holds the default value on creation for the "is_deleted" field.
	DefaultIsDeleted int64
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int64
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() date.DateTime
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() date.DateTime
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() date.DateTime
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() int64
)
