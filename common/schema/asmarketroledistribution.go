// Code generated by entc, DO NOT EDIT.

package schema

import (
	"fmt"
	"orginone/common/schema/asinneragency"
	"orginone/common/schema/asjob"
	"orginone/common/schema/asmarketapprole"
	"orginone/common/schema/asmarketroledistribution"
	"orginone/common/schema/asuser"
	"orginone/common/tools/date"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// AsMarketRoleDistribution is the model entity for the AsMarketRoleDistribution schema.
type AsMarketRoleDistribution struct {
	config `json:"-"`
	// ID of the ent.
	// 主键
	ID int64 `json:"id,string"`
	// RoleID holds the value of the "role_id" field.
	// 角色id
	RoleID int64 `json:"roleId"`
	// UserID holds the value of the "user_id" field.
	// 用户id
	UserID int64 `json:"userId"`
	// AgencyID holds the value of the "agency_id" field.
	// 部门id
	AgencyID int64 `json:"agencyId"`
	// JobID holds the value of the "job_id" field.
	// 岗位id
	JobID int64 `json:"jobId"`
	// TenantCode holds the value of the "tenant_code" field.
	TenantCode string `json:"tenantCode"`
	// IsDeleted holds the value of the "is_deleted" field.
	// 是否被删除
	IsDeleted int64 `json:"isDeleted"`
	// Status holds the value of the "status" field.
	// 状态
	Status int64 `json:"status"`
	// CreateUser holds the value of the "create_user" field.
	// 创建用户
	CreateUser int64 `json:"createUser"`
	// UpdateUser holds the value of the "update_user" field.
	// 更新用户
	UpdateUser int64 `json:"updateUser"`
	// CreateTime holds the value of the "create_time" field.
	// 创建时间
	CreateTime date.DateTime `json:"createTime"`
	// UpdateTime holds the value of the "update_time" field.
	// 更新时间
	UpdateTime date.DateTime `json:"updateTime"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AsMarketRoleDistributionQuery when eager-loading is set.
	Edges AsMarketRoleDistributionEdges `json:"edges"`
}

// AsMarketRoleDistributionEdges holds the relations/edges for other nodes in the graph.
type AsMarketRoleDistributionEdges struct {
	// Userx holds the value of the userx edge.
	Userx *AsUser `json:"userx"`
	// Agencyx holds the value of the agencyx edge.
	Agencyx *AsInnerAgency `json:"agencyx"`
	// Jobx holds the value of the jobx edge.
	Jobx *AsJob `json:"jobx"`
	// Rolex holds the value of the rolex edge.
	Rolex *AsMarketAppRole `json:"rolex"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// UserxOrErr returns the Userx value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AsMarketRoleDistributionEdges) UserxOrErr() (*AsUser, error) {
	if e.loadedTypes[0] {
		if e.Userx == nil {
			// The edge userx was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: asuser.Label}
		}
		return e.Userx, nil
	}
	return nil, &NotLoadedError{edge: "userx"}
}

// AgencyxOrErr returns the Agencyx value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AsMarketRoleDistributionEdges) AgencyxOrErr() (*AsInnerAgency, error) {
	if e.loadedTypes[1] {
		if e.Agencyx == nil {
			// The edge agencyx was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: asinneragency.Label}
		}
		return e.Agencyx, nil
	}
	return nil, &NotLoadedError{edge: "agencyx"}
}

// JobxOrErr returns the Jobx value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AsMarketRoleDistributionEdges) JobxOrErr() (*AsJob, error) {
	if e.loadedTypes[2] {
		if e.Jobx == nil {
			// The edge jobx was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: asjob.Label}
		}
		return e.Jobx, nil
	}
	return nil, &NotLoadedError{edge: "jobx"}
}

// RolexOrErr returns the Rolex value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AsMarketRoleDistributionEdges) RolexOrErr() (*AsMarketAppRole, error) {
	if e.loadedTypes[3] {
		if e.Rolex == nil {
			// The edge rolex was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: asmarketapprole.Label}
		}
		return e.Rolex, nil
	}
	return nil, &NotLoadedError{edge: "rolex"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AsMarketRoleDistribution) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case asmarketroledistribution.FieldID, asmarketroledistribution.FieldRoleID, asmarketroledistribution.FieldUserID, asmarketroledistribution.FieldAgencyID, asmarketroledistribution.FieldJobID, asmarketroledistribution.FieldIsDeleted, asmarketroledistribution.FieldStatus, asmarketroledistribution.FieldCreateUser, asmarketroledistribution.FieldUpdateUser:
			values[i] = new(sql.NullInt64)
		case asmarketroledistribution.FieldTenantCode:
			values[i] = new(sql.NullString)
		case asmarketroledistribution.FieldCreateTime, asmarketroledistribution.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AsMarketRoleDistribution", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AsMarketRoleDistribution fields.
func (amrd *AsMarketRoleDistribution) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case asmarketroledistribution.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			amrd.ID = int64(value.Int64)
		case asmarketroledistribution.FieldRoleID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field role_id", values[i])
			} else if value.Valid {
				amrd.RoleID = value.Int64
			}
		case asmarketroledistribution.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				amrd.UserID = value.Int64
			}
		case asmarketroledistribution.FieldAgencyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field agency_id", values[i])
			} else if value.Valid {
				amrd.AgencyID = value.Int64
			}
		case asmarketroledistribution.FieldJobID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field job_id", values[i])
			} else if value.Valid {
				amrd.JobID = value.Int64
			}
		case asmarketroledistribution.FieldTenantCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_code", values[i])
			} else if value.Valid {
				amrd.TenantCode = value.String
			}
		case asmarketroledistribution.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				amrd.IsDeleted = value.Int64
			}
		case asmarketroledistribution.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				amrd.Status = value.Int64
			}
		case asmarketroledistribution.FieldCreateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_user", values[i])
			} else if value.Valid {
				amrd.CreateUser = value.Int64
			}
		case asmarketroledistribution.FieldUpdateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_user", values[i])
			} else if value.Valid {
				amrd.UpdateUser = value.Int64
			}
		case asmarketroledistribution.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				amrd.CreateTime = date.DateTime(value.Time)
			}
		case asmarketroledistribution.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				amrd.UpdateTime = date.DateTime(value.Time)
			}
		}
	}
	return nil
}

// QueryUserx queries the "userx" edge of the AsMarketRoleDistribution entity.
func (amrd *AsMarketRoleDistribution) QueryUserx() *AsUserQuery {
	return (&AsMarketRoleDistributionClient{config: amrd.config}).QueryUserx(amrd)
}

// QueryAgencyx queries the "agencyx" edge of the AsMarketRoleDistribution entity.
func (amrd *AsMarketRoleDistribution) QueryAgencyx() *AsInnerAgencyQuery {
	return (&AsMarketRoleDistributionClient{config: amrd.config}).QueryAgencyx(amrd)
}

// QueryJobx queries the "jobx" edge of the AsMarketRoleDistribution entity.
func (amrd *AsMarketRoleDistribution) QueryJobx() *AsJobQuery {
	return (&AsMarketRoleDistributionClient{config: amrd.config}).QueryJobx(amrd)
}

// QueryRolex queries the "rolex" edge of the AsMarketRoleDistribution entity.
func (amrd *AsMarketRoleDistribution) QueryRolex() *AsMarketAppRoleQuery {
	return (&AsMarketRoleDistributionClient{config: amrd.config}).QueryRolex(amrd)
}

// Update returns a builder for updating this AsMarketRoleDistribution.
// Note that you need to call AsMarketRoleDistribution.Unwrap() before calling this method if this AsMarketRoleDistribution
// was returned from a transaction, and the transaction was committed or rolled back.
func (amrd *AsMarketRoleDistribution) Update() *AsMarketRoleDistributionUpdateOne {
	return (&AsMarketRoleDistributionClient{config: amrd.config}).UpdateOne(amrd)
}

// Unwrap unwraps the AsMarketRoleDistribution entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (amrd *AsMarketRoleDistribution) Unwrap() *AsMarketRoleDistribution {
	tx, ok := amrd.config.driver.(*txDriver)
	if !ok {
		panic("schema: AsMarketRoleDistribution is not a transactional entity")
	}
	amrd.config.driver = tx.drv
	return amrd
}

// String implements the fmt.Stringer.
func (amrd *AsMarketRoleDistribution) String() string {
	var builder strings.Builder
	builder.WriteString("AsMarketRoleDistribution(")
	builder.WriteString(fmt.Sprintf("id=%v", amrd.ID))
	builder.WriteString(", role_id=")
	builder.WriteString(fmt.Sprintf("%v", amrd.RoleID))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", amrd.UserID))
	builder.WriteString(", agency_id=")
	builder.WriteString(fmt.Sprintf("%v", amrd.AgencyID))
	builder.WriteString(", job_id=")
	builder.WriteString(fmt.Sprintf("%v", amrd.JobID))
	builder.WriteString(", tenant_code=")
	builder.WriteString(amrd.TenantCode)
	builder.WriteString(", is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", amrd.IsDeleted))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", amrd.Status))
	builder.WriteString(", create_user=")
	builder.WriteString(fmt.Sprintf("%v", amrd.CreateUser))
	builder.WriteString(", update_user=")
	builder.WriteString(fmt.Sprintf("%v", amrd.UpdateUser))
	builder.WriteString(", create_time=")
	builder.WriteString(fmt.Sprintf("%v", amrd.CreateTime))
	builder.WriteString(", update_time=")
	builder.WriteString(fmt.Sprintf("%v", amrd.UpdateTime))
	builder.WriteByte(')')
	return builder.String()
}

// AsMarketRoleDistributions is a parsable slice of AsMarketRoleDistribution.
type AsMarketRoleDistributions []*AsMarketRoleDistribution

func (amrd AsMarketRoleDistributions) config(cfg config) {
	for _i := range amrd {
		amrd[_i].config = cfg
	}
}
