// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/asgrouptenantrelations"
	"orginone/common/schema/aspropertiesdistribution"
	"orginone/common/schema/astenant"
	"orginone/common/schema/asunit"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsTenantCreate is the builder for creating a AsTenant entity.
type AsTenantCreate struct {
	config
	mutation *AsTenantMutation
	hooks    []Hook
}

// SetTenantType sets the "tenant_type" field.
func (atc *AsTenantCreate) SetTenantType(i int64) *AsTenantCreate {
	atc.mutation.SetTenantType(i)
	return atc
}

// SetTenantName sets the "tenant_name" field.
func (atc *AsTenantCreate) SetTenantName(s string) *AsTenantCreate {
	atc.mutation.SetTenantName(s)
	return atc
}

// SetTenantCode sets the "tenant_code" field.
func (atc *AsTenantCreate) SetTenantCode(s string) *AsTenantCreate {
	atc.mutation.SetTenantCode(s)
	return atc
}

// SetTheme sets the "theme" field.
func (atc *AsTenantCreate) SetTheme(s string) *AsTenantCreate {
	atc.mutation.SetTheme(s)
	return atc
}

// SetNillableTheme sets the "theme" field if the given value is not nil.
func (atc *AsTenantCreate) SetNillableTheme(s *string) *AsTenantCreate {
	if s != nil {
		atc.SetTheme(*s)
	}
	return atc
}

// SetIsVirtual sets the "is_virtual" field.
func (atc *AsTenantCreate) SetIsVirtual(i int64) *AsTenantCreate {
	atc.mutation.SetIsVirtual(i)
	return atc
}

// SetNillableIsVirtual sets the "is_virtual" field if the given value is not nil.
func (atc *AsTenantCreate) SetNillableIsVirtual(i *int64) *AsTenantCreate {
	if i != nil {
		atc.SetIsVirtual(*i)
	}
	return atc
}

// SetIsDeleted sets the "is_deleted" field.
func (atc *AsTenantCreate) SetIsDeleted(i int64) *AsTenantCreate {
	atc.mutation.SetIsDeleted(i)
	return atc
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (atc *AsTenantCreate) SetNillableIsDeleted(i *int64) *AsTenantCreate {
	if i != nil {
		atc.SetIsDeleted(*i)
	}
	return atc
}

// SetStatus sets the "status" field.
func (atc *AsTenantCreate) SetStatus(i int64) *AsTenantCreate {
	atc.mutation.SetStatus(i)
	return atc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (atc *AsTenantCreate) SetNillableStatus(i *int64) *AsTenantCreate {
	if i != nil {
		atc.SetStatus(*i)
	}
	return atc
}

// SetCreateUser sets the "create_user" field.
func (atc *AsTenantCreate) SetCreateUser(i int64) *AsTenantCreate {
	atc.mutation.SetCreateUser(i)
	return atc
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (atc *AsTenantCreate) SetNillableCreateUser(i *int64) *AsTenantCreate {
	if i != nil {
		atc.SetCreateUser(*i)
	}
	return atc
}

// SetUpdateUser sets the "update_user" field.
func (atc *AsTenantCreate) SetUpdateUser(i int64) *AsTenantCreate {
	atc.mutation.SetUpdateUser(i)
	return atc
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (atc *AsTenantCreate) SetNillableUpdateUser(i *int64) *AsTenantCreate {
	if i != nil {
		atc.SetUpdateUser(*i)
	}
	return atc
}

// SetCreateTime sets the "create_time" field.
func (atc *AsTenantCreate) SetCreateTime(dt date.DateTime) *AsTenantCreate {
	atc.mutation.SetCreateTime(dt)
	return atc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (atc *AsTenantCreate) SetNillableCreateTime(dt *date.DateTime) *AsTenantCreate {
	if dt != nil {
		atc.SetCreateTime(*dt)
	}
	return atc
}

// SetUpdateTime sets the "update_time" field.
func (atc *AsTenantCreate) SetUpdateTime(dt date.DateTime) *AsTenantCreate {
	atc.mutation.SetUpdateTime(dt)
	return atc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (atc *AsTenantCreate) SetNillableUpdateTime(dt *date.DateTime) *AsTenantCreate {
	if dt != nil {
		atc.SetUpdateTime(*dt)
	}
	return atc
}

// SetID sets the "id" field.
func (atc *AsTenantCreate) SetID(i int64) *AsTenantCreate {
	atc.mutation.SetID(i)
	return atc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (atc *AsTenantCreate) SetNillableID(i *int64) *AsTenantCreate {
	if i != nil {
		atc.SetID(*i)
	}
	return atc
}

// SetUnitID sets the "unit" edge to the AsUnit entity by ID.
func (atc *AsTenantCreate) SetUnitID(id int64) *AsTenantCreate {
	atc.mutation.SetUnitID(id)
	return atc
}

// SetNillableUnitID sets the "unit" edge to the AsUnit entity by ID if the given value is not nil.
func (atc *AsTenantCreate) SetNillableUnitID(id *int64) *AsTenantCreate {
	if id != nil {
		atc = atc.SetUnitID(*id)
	}
	return atc
}

// SetUnit sets the "unit" edge to the AsUnit entity.
func (atc *AsTenantCreate) SetUnit(a *AsUnit) *AsTenantCreate {
	return atc.SetUnitID(a.ID)
}

// AddAllGroupIDs adds the "allGroups" edge to the AsGroupTenantRelations entity by IDs.
func (atc *AsTenantCreate) AddAllGroupIDs(ids ...int64) *AsTenantCreate {
	atc.mutation.AddAllGroupIDs(ids...)
	return atc
}

// AddAllGroups adds the "allGroups" edges to the AsGroupTenantRelations entity.
func (atc *AsTenantCreate) AddAllGroups(a ...*AsGroupTenantRelations) *AsTenantCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return atc.AddAllGroupIDs(ids...)
}

// AddAllpropertyIDs adds the "allproperties" edge to the AsPropertiesDistribution entity by IDs.
func (atc *AsTenantCreate) AddAllpropertyIDs(ids ...int64) *AsTenantCreate {
	atc.mutation.AddAllpropertyIDs(ids...)
	return atc
}

// AddAllproperties adds the "allproperties" edges to the AsPropertiesDistribution entity.
func (atc *AsTenantCreate) AddAllproperties(a ...*AsPropertiesDistribution) *AsTenantCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return atc.AddAllpropertyIDs(ids...)
}

// Mutation returns the AsTenantMutation object of the builder.
func (atc *AsTenantCreate) Mutation() *AsTenantMutation {
	return atc.mutation
}

// Save creates the AsTenant in the database.
func (atc *AsTenantCreate) Save(ctx context.Context) (*AsTenant, error) {
	var (
		err  error
		node *AsTenant
	)
	atc.defaults()
	if len(atc.hooks) == 0 {
		if err = atc.check(); err != nil {
			return nil, err
		}
		node, err = atc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsTenantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = atc.check(); err != nil {
				return nil, err
			}
			atc.mutation = mutation
			if node, err = atc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(atc.hooks) - 1; i >= 0; i-- {
			if atc.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = atc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, atc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (atc *AsTenantCreate) SaveX(ctx context.Context) *AsTenant {
	v, err := atc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (atc *AsTenantCreate) Exec(ctx context.Context) error {
	_, err := atc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atc *AsTenantCreate) ExecX(ctx context.Context) {
	if err := atc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atc *AsTenantCreate) defaults() {
	if _, ok := atc.mutation.Theme(); !ok {
		v := astenant.DefaultTheme
		atc.mutation.SetTheme(v)
	}
	if _, ok := atc.mutation.IsVirtual(); !ok {
		v := astenant.DefaultIsVirtual
		atc.mutation.SetIsVirtual(v)
	}
	if _, ok := atc.mutation.IsDeleted(); !ok {
		v := astenant.DefaultIsDeleted
		atc.mutation.SetIsDeleted(v)
	}
	if _, ok := atc.mutation.Status(); !ok {
		v := astenant.DefaultStatus
		atc.mutation.SetStatus(v)
	}
	if _, ok := atc.mutation.CreateTime(); !ok {
		v := astenant.DefaultCreateTime()
		atc.mutation.SetCreateTime(v)
	}
	if _, ok := atc.mutation.UpdateTime(); !ok {
		v := astenant.DefaultUpdateTime()
		atc.mutation.SetUpdateTime(v)
	}
	if _, ok := atc.mutation.ID(); !ok {
		v := astenant.DefaultID()
		atc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atc *AsTenantCreate) check() error {
	if _, ok := atc.mutation.TenantType(); !ok {
		return &ValidationError{Name: "tenant_type", err: errors.New(`schema: missing required field "AsTenant.tenant_type"`)}
	}
	if _, ok := atc.mutation.TenantName(); !ok {
		return &ValidationError{Name: "tenant_name", err: errors.New(`schema: missing required field "AsTenant.tenant_name"`)}
	}
	if _, ok := atc.mutation.TenantCode(); !ok {
		return &ValidationError{Name: "tenant_code", err: errors.New(`schema: missing required field "AsTenant.tenant_code"`)}
	}
	if _, ok := atc.mutation.IsVirtual(); !ok {
		return &ValidationError{Name: "is_virtual", err: errors.New(`schema: missing required field "AsTenant.is_virtual"`)}
	}
	if _, ok := atc.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "is_deleted", err: errors.New(`schema: missing required field "AsTenant.is_deleted"`)}
	}
	return nil
}

func (atc *AsTenantCreate) sqlSave(ctx context.Context) (*AsTenant, error) {
	_node, _spec := atc.createSpec()
	if err := sqlgraph.CreateNode(ctx, atc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (atc *AsTenantCreate) createSpec() (*AsTenant, *sqlgraph.CreateSpec) {
	var (
		_node = &AsTenant{config: atc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: astenant.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: astenant.FieldID,
			},
		}
	)
	if id, ok := atc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := atc.mutation.TenantType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenant.FieldTenantType,
		})
		_node.TenantType = value
	}
	if value, ok := atc.mutation.TenantName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: astenant.FieldTenantName,
		})
		_node.TenantName = value
	}
	if value, ok := atc.mutation.TenantCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: astenant.FieldTenantCode,
		})
		_node.TenantCode = value
	}
	if value, ok := atc.mutation.Theme(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: astenant.FieldTheme,
		})
		_node.Theme = value
	}
	if value, ok := atc.mutation.IsVirtual(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenant.FieldIsVirtual,
		})
		_node.IsVirtual = value
	}
	if value, ok := atc.mutation.IsDeleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenant.FieldIsDeleted,
		})
		_node.IsDeleted = value
	}
	if value, ok := atc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenant.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := atc.mutation.CreateUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenant.FieldCreateUser,
		})
		_node.CreateUser = value
	}
	if value, ok := atc.mutation.UpdateUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenant.FieldUpdateUser,
		})
		_node.UpdateUser = value
	}
	if value, ok := atc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: astenant.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := atc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: astenant.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if nodes := atc.mutation.UnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   astenant.UnitTable,
			Columns: []string{astenant.UnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asunit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := atc.mutation.AllGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   astenant.AllGroupsTable,
			Columns: []string{astenant.AllGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asgrouptenantrelations.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := atc.mutation.AllpropertiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   astenant.AllpropertiesTable,
			Columns: []string{astenant.AllpropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: aspropertiesdistribution.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AsTenantCreateBulk is the builder for creating many AsTenant entities in bulk.
type AsTenantCreateBulk struct {
	config
	builders []*AsTenantCreate
}

// Save creates the AsTenant entities in the database.
func (atcb *AsTenantCreateBulk) Save(ctx context.Context) ([]*AsTenant, error) {
	specs := make([]*sqlgraph.CreateSpec, len(atcb.builders))
	nodes := make([]*AsTenant, len(atcb.builders))
	mutators := make([]Mutator, len(atcb.builders))
	for i := range atcb.builders {
		func(i int, root context.Context) {
			builder := atcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AsTenantMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, atcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, atcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, atcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (atcb *AsTenantCreateBulk) SaveX(ctx context.Context) []*AsTenant {
	v, err := atcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (atcb *AsTenantCreateBulk) Exec(ctx context.Context) error {
	_, err := atcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atcb *AsTenantCreateBulk) ExecX(ctx context.Context) {
	if err := atcb.Exec(ctx); err != nil {
		panic(err)
	}
}
