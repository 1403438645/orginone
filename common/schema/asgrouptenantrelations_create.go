// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/asallgroup"
	"orginone/common/schema/asgrouptenantrelations"
	"orginone/common/schema/astenant"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsGroupTenantRelationsCreate is the builder for creating a AsGroupTenantRelations entity.
type AsGroupTenantRelationsCreate struct {
	config
	mutation *AsGroupTenantRelationsMutation
	hooks    []Hook
}

// SetParentID sets the "parent_id" field.
func (agtrc *AsGroupTenantRelationsCreate) SetParentID(i int64) *AsGroupTenantRelationsCreate {
	agtrc.mutation.SetParentID(i)
	return agtrc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (agtrc *AsGroupTenantRelationsCreate) SetNillableParentID(i *int64) *AsGroupTenantRelationsCreate {
	if i != nil {
		agtrc.SetParentID(*i)
	}
	return agtrc
}

// SetSonID sets the "son_id" field.
func (agtrc *AsGroupTenantRelationsCreate) SetSonID(i int64) *AsGroupTenantRelationsCreate {
	agtrc.mutation.SetSonID(i)
	return agtrc
}

// SetNillableSonID sets the "son_id" field if the given value is not nil.
func (agtrc *AsGroupTenantRelationsCreate) SetNillableSonID(i *int64) *AsGroupTenantRelationsCreate {
	if i != nil {
		agtrc.SetSonID(*i)
	}
	return agtrc
}

// SetType sets the "type" field.
func (agtrc *AsGroupTenantRelationsCreate) SetType(i int64) *AsGroupTenantRelationsCreate {
	agtrc.mutation.SetType(i)
	return agtrc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (agtrc *AsGroupTenantRelationsCreate) SetNillableType(i *int64) *AsGroupTenantRelationsCreate {
	if i != nil {
		agtrc.SetType(*i)
	}
	return agtrc
}

// SetSort sets the "sort" field.
func (agtrc *AsGroupTenantRelationsCreate) SetSort(i int64) *AsGroupTenantRelationsCreate {
	agtrc.mutation.SetSort(i)
	return agtrc
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (agtrc *AsGroupTenantRelationsCreate) SetNillableSort(i *int64) *AsGroupTenantRelationsCreate {
	if i != nil {
		agtrc.SetSort(*i)
	}
	return agtrc
}

// SetSerial sets the "serial" field.
func (agtrc *AsGroupTenantRelationsCreate) SetSerial(i int64) *AsGroupTenantRelationsCreate {
	agtrc.mutation.SetSerial(i)
	return agtrc
}

// SetNillableSerial sets the "serial" field if the given value is not nil.
func (agtrc *AsGroupTenantRelationsCreate) SetNillableSerial(i *int64) *AsGroupTenantRelationsCreate {
	if i != nil {
		agtrc.SetSerial(*i)
	}
	return agtrc
}

// SetGroupCode sets the "group_code" field.
func (agtrc *AsGroupTenantRelationsCreate) SetGroupCode(s string) *AsGroupTenantRelationsCreate {
	agtrc.mutation.SetGroupCode(s)
	return agtrc
}

// SetNillableGroupCode sets the "group_code" field if the given value is not nil.
func (agtrc *AsGroupTenantRelationsCreate) SetNillableGroupCode(s *string) *AsGroupTenantRelationsCreate {
	if s != nil {
		agtrc.SetGroupCode(*s)
	}
	return agtrc
}

// SetExpiresTime sets the "expires_time" field.
func (agtrc *AsGroupTenantRelationsCreate) SetExpiresTime(dt date.DateTime) *AsGroupTenantRelationsCreate {
	agtrc.mutation.SetExpiresTime(dt)
	return agtrc
}

// SetNillableExpiresTime sets the "expires_time" field if the given value is not nil.
func (agtrc *AsGroupTenantRelationsCreate) SetNillableExpiresTime(dt *date.DateTime) *AsGroupTenantRelationsCreate {
	if dt != nil {
		agtrc.SetExpiresTime(*dt)
	}
	return agtrc
}

// SetIsHide sets the "is_hide" field.
func (agtrc *AsGroupTenantRelationsCreate) SetIsHide(i int64) *AsGroupTenantRelationsCreate {
	agtrc.mutation.SetIsHide(i)
	return agtrc
}

// SetNillableIsHide sets the "is_hide" field if the given value is not nil.
func (agtrc *AsGroupTenantRelationsCreate) SetNillableIsHide(i *int64) *AsGroupTenantRelationsCreate {
	if i != nil {
		agtrc.SetIsHide(*i)
	}
	return agtrc
}

// SetIsDeleted sets the "is_deleted" field.
func (agtrc *AsGroupTenantRelationsCreate) SetIsDeleted(i int64) *AsGroupTenantRelationsCreate {
	agtrc.mutation.SetIsDeleted(i)
	return agtrc
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (agtrc *AsGroupTenantRelationsCreate) SetNillableIsDeleted(i *int64) *AsGroupTenantRelationsCreate {
	if i != nil {
		agtrc.SetIsDeleted(*i)
	}
	return agtrc
}

// SetStatus sets the "status" field.
func (agtrc *AsGroupTenantRelationsCreate) SetStatus(i int64) *AsGroupTenantRelationsCreate {
	agtrc.mutation.SetStatus(i)
	return agtrc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (agtrc *AsGroupTenantRelationsCreate) SetNillableStatus(i *int64) *AsGroupTenantRelationsCreate {
	if i != nil {
		agtrc.SetStatus(*i)
	}
	return agtrc
}

// SetCreateUser sets the "create_user" field.
func (agtrc *AsGroupTenantRelationsCreate) SetCreateUser(i int64) *AsGroupTenantRelationsCreate {
	agtrc.mutation.SetCreateUser(i)
	return agtrc
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (agtrc *AsGroupTenantRelationsCreate) SetNillableCreateUser(i *int64) *AsGroupTenantRelationsCreate {
	if i != nil {
		agtrc.SetCreateUser(*i)
	}
	return agtrc
}

// SetUpdateUser sets the "update_user" field.
func (agtrc *AsGroupTenantRelationsCreate) SetUpdateUser(i int64) *AsGroupTenantRelationsCreate {
	agtrc.mutation.SetUpdateUser(i)
	return agtrc
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (agtrc *AsGroupTenantRelationsCreate) SetNillableUpdateUser(i *int64) *AsGroupTenantRelationsCreate {
	if i != nil {
		agtrc.SetUpdateUser(*i)
	}
	return agtrc
}

// SetCreateTime sets the "create_time" field.
func (agtrc *AsGroupTenantRelationsCreate) SetCreateTime(dt date.DateTime) *AsGroupTenantRelationsCreate {
	agtrc.mutation.SetCreateTime(dt)
	return agtrc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (agtrc *AsGroupTenantRelationsCreate) SetNillableCreateTime(dt *date.DateTime) *AsGroupTenantRelationsCreate {
	if dt != nil {
		agtrc.SetCreateTime(*dt)
	}
	return agtrc
}

// SetUpdateTime sets the "update_time" field.
func (agtrc *AsGroupTenantRelationsCreate) SetUpdateTime(dt date.DateTime) *AsGroupTenantRelationsCreate {
	agtrc.mutation.SetUpdateTime(dt)
	return agtrc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (agtrc *AsGroupTenantRelationsCreate) SetNillableUpdateTime(dt *date.DateTime) *AsGroupTenantRelationsCreate {
	if dt != nil {
		agtrc.SetUpdateTime(*dt)
	}
	return agtrc
}

// SetID sets the "id" field.
func (agtrc *AsGroupTenantRelationsCreate) SetID(i int64) *AsGroupTenantRelationsCreate {
	agtrc.mutation.SetID(i)
	return agtrc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (agtrc *AsGroupTenantRelationsCreate) SetNillableID(i *int64) *AsGroupTenantRelationsCreate {
	if i != nil {
		agtrc.SetID(*i)
	}
	return agtrc
}

// SetGroupID sets the "group" edge to the AsAllGroup entity by ID.
func (agtrc *AsGroupTenantRelationsCreate) SetGroupID(id int64) *AsGroupTenantRelationsCreate {
	agtrc.mutation.SetGroupID(id)
	return agtrc
}

// SetNillableGroupID sets the "group" edge to the AsAllGroup entity by ID if the given value is not nil.
func (agtrc *AsGroupTenantRelationsCreate) SetNillableGroupID(id *int64) *AsGroupTenantRelationsCreate {
	if id != nil {
		agtrc = agtrc.SetGroupID(*id)
	}
	return agtrc
}

// SetGroup sets the "group" edge to the AsAllGroup entity.
func (agtrc *AsGroupTenantRelationsCreate) SetGroup(a *AsAllGroup) *AsGroupTenantRelationsCreate {
	return agtrc.SetGroupID(a.ID)
}

// SetTenantID sets the "tenant" edge to the AsTenant entity by ID.
func (agtrc *AsGroupTenantRelationsCreate) SetTenantID(id int64) *AsGroupTenantRelationsCreate {
	agtrc.mutation.SetTenantID(id)
	return agtrc
}

// SetNillableTenantID sets the "tenant" edge to the AsTenant entity by ID if the given value is not nil.
func (agtrc *AsGroupTenantRelationsCreate) SetNillableTenantID(id *int64) *AsGroupTenantRelationsCreate {
	if id != nil {
		agtrc = agtrc.SetTenantID(*id)
	}
	return agtrc
}

// SetTenant sets the "tenant" edge to the AsTenant entity.
func (agtrc *AsGroupTenantRelationsCreate) SetTenant(a *AsTenant) *AsGroupTenantRelationsCreate {
	return agtrc.SetTenantID(a.ID)
}

// Mutation returns the AsGroupTenantRelationsMutation object of the builder.
func (agtrc *AsGroupTenantRelationsCreate) Mutation() *AsGroupTenantRelationsMutation {
	return agtrc.mutation
}

// Save creates the AsGroupTenantRelations in the database.
func (agtrc *AsGroupTenantRelationsCreate) Save(ctx context.Context) (*AsGroupTenantRelations, error) {
	var (
		err  error
		node *AsGroupTenantRelations
	)
	agtrc.defaults()
	if len(agtrc.hooks) == 0 {
		if err = agtrc.check(); err != nil {
			return nil, err
		}
		node, err = agtrc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsGroupTenantRelationsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = agtrc.check(); err != nil {
				return nil, err
			}
			agtrc.mutation = mutation
			if node, err = agtrc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(agtrc.hooks) - 1; i >= 0; i-- {
			if agtrc.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = agtrc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, agtrc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (agtrc *AsGroupTenantRelationsCreate) SaveX(ctx context.Context) *AsGroupTenantRelations {
	v, err := agtrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (agtrc *AsGroupTenantRelationsCreate) Exec(ctx context.Context) error {
	_, err := agtrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agtrc *AsGroupTenantRelationsCreate) ExecX(ctx context.Context) {
	if err := agtrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (agtrc *AsGroupTenantRelationsCreate) defaults() {
	if _, ok := agtrc.mutation.Sort(); !ok {
		v := asgrouptenantrelations.DefaultSort
		agtrc.mutation.SetSort(v)
	}
	if _, ok := agtrc.mutation.IsHide(); !ok {
		v := asgrouptenantrelations.DefaultIsHide
		agtrc.mutation.SetIsHide(v)
	}
	if _, ok := agtrc.mutation.IsDeleted(); !ok {
		v := asgrouptenantrelations.DefaultIsDeleted
		agtrc.mutation.SetIsDeleted(v)
	}
	if _, ok := agtrc.mutation.Status(); !ok {
		v := asgrouptenantrelations.DefaultStatus
		agtrc.mutation.SetStatus(v)
	}
	if _, ok := agtrc.mutation.CreateTime(); !ok {
		v := asgrouptenantrelations.DefaultCreateTime()
		agtrc.mutation.SetCreateTime(v)
	}
	if _, ok := agtrc.mutation.UpdateTime(); !ok {
		v := asgrouptenantrelations.DefaultUpdateTime()
		agtrc.mutation.SetUpdateTime(v)
	}
	if _, ok := agtrc.mutation.ID(); !ok {
		v := asgrouptenantrelations.DefaultID()
		agtrc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (agtrc *AsGroupTenantRelationsCreate) check() error {
	if _, ok := agtrc.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "is_deleted", err: errors.New(`schema: missing required field "AsGroupTenantRelations.is_deleted"`)}
	}
	return nil
}

func (agtrc *AsGroupTenantRelationsCreate) sqlSave(ctx context.Context) (*AsGroupTenantRelations, error) {
	_node, _spec := agtrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, agtrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (agtrc *AsGroupTenantRelationsCreate) createSpec() (*AsGroupTenantRelations, *sqlgraph.CreateSpec) {
	var (
		_node = &AsGroupTenantRelations{config: agtrc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: asgrouptenantrelations.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asgrouptenantrelations.FieldID,
			},
		}
	)
	if id, ok := agtrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := agtrc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asgrouptenantrelations.FieldType,
		})
		_node.Type = value
	}
	if value, ok := agtrc.mutation.Sort(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asgrouptenantrelations.FieldSort,
		})
		_node.Sort = value
	}
	if value, ok := agtrc.mutation.Serial(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asgrouptenantrelations.FieldSerial,
		})
		_node.Serial = value
	}
	if value, ok := agtrc.mutation.GroupCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asgrouptenantrelations.FieldGroupCode,
		})
		_node.GroupCode = value
	}
	if value, ok := agtrc.mutation.ExpiresTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asgrouptenantrelations.FieldExpiresTime,
		})
		_node.ExpiresTime = value
	}
	if value, ok := agtrc.mutation.IsHide(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asgrouptenantrelations.FieldIsHide,
		})
		_node.IsHide = value
	}
	if value, ok := agtrc.mutation.IsDeleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asgrouptenantrelations.FieldIsDeleted,
		})
		_node.IsDeleted = value
	}
	if value, ok := agtrc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asgrouptenantrelations.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := agtrc.mutation.CreateUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asgrouptenantrelations.FieldCreateUser,
		})
		_node.CreateUser = value
	}
	if value, ok := agtrc.mutation.UpdateUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asgrouptenantrelations.FieldUpdateUser,
		})
		_node.UpdateUser = value
	}
	if value, ok := agtrc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asgrouptenantrelations.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := agtrc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asgrouptenantrelations.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if nodes := agtrc.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asgrouptenantrelations.GroupTable,
			Columns: []string{asgrouptenantrelations.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asallgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := agtrc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asgrouptenantrelations.TenantTable,
			Columns: []string{asgrouptenantrelations.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: astenant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SonID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AsGroupTenantRelationsCreateBulk is the builder for creating many AsGroupTenantRelations entities in bulk.
type AsGroupTenantRelationsCreateBulk struct {
	config
	builders []*AsGroupTenantRelationsCreate
}

// Save creates the AsGroupTenantRelations entities in the database.
func (agtrcb *AsGroupTenantRelationsCreateBulk) Save(ctx context.Context) ([]*AsGroupTenantRelations, error) {
	specs := make([]*sqlgraph.CreateSpec, len(agtrcb.builders))
	nodes := make([]*AsGroupTenantRelations, len(agtrcb.builders))
	mutators := make([]Mutator, len(agtrcb.builders))
	for i := range agtrcb.builders {
		func(i int, root context.Context) {
			builder := agtrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AsGroupTenantRelationsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, agtrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, agtrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, agtrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (agtrcb *AsGroupTenantRelationsCreateBulk) SaveX(ctx context.Context) []*AsGroupTenantRelations {
	v, err := agtrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (agtrcb *AsGroupTenantRelationsCreateBulk) Exec(ctx context.Context) error {
	_, err := agtrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agtrcb *AsGroupTenantRelationsCreateBulk) ExecX(ctx context.Context) {
	if err := agtrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
