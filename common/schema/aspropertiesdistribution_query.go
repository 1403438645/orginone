// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"math"
	"orginone/common/schema/asproperties"
	"orginone/common/schema/aspropertiesdistribution"
	"orginone/common/schema/astenant"
	"orginone/common/schema/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsPropertiesDistributionQuery is the builder for querying AsPropertiesDistribution entities.
type AsPropertiesDistributionQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.AsPropertiesDistribution
	// eager-loading edges.
	withProperties *AsPropertiesQuery
	withTenant     *AsTenantQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AsPropertiesDistributionQuery builder.
func (apdq *AsPropertiesDistributionQuery) Where(ps ...predicate.AsPropertiesDistribution) *AsPropertiesDistributionQuery {
	apdq.predicates = append(apdq.predicates, ps...)
	return apdq
}

// Limit adds a limit step to the query.
func (apdq *AsPropertiesDistributionQuery) Limit(limit int) *AsPropertiesDistributionQuery {
	apdq.limit = &limit
	return apdq
}

// Offset adds an offset step to the query.
func (apdq *AsPropertiesDistributionQuery) Offset(offset int) *AsPropertiesDistributionQuery {
	apdq.offset = &offset
	return apdq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (apdq *AsPropertiesDistributionQuery) Unique(unique bool) *AsPropertiesDistributionQuery {
	apdq.unique = &unique
	return apdq
}

// Order adds an order step to the query.
func (apdq *AsPropertiesDistributionQuery) Order(o ...OrderFunc) *AsPropertiesDistributionQuery {
	apdq.order = append(apdq.order, o...)
	return apdq
}

// QueryProperties chains the current query on the "properties" edge.
func (apdq *AsPropertiesDistributionQuery) QueryProperties() *AsPropertiesQuery {
	query := &AsPropertiesQuery{config: apdq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := apdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := apdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(aspropertiesdistribution.Table, aspropertiesdistribution.FieldID, selector),
			sqlgraph.To(asproperties.Table, asproperties.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, aspropertiesdistribution.PropertiesTable, aspropertiesdistribution.PropertiesColumn),
		)
		fromU = sqlgraph.SetNeighbors(apdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTenant chains the current query on the "tenant" edge.
func (apdq *AsPropertiesDistributionQuery) QueryTenant() *AsTenantQuery {
	query := &AsTenantQuery{config: apdq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := apdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := apdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(aspropertiesdistribution.Table, aspropertiesdistribution.FieldID, selector),
			sqlgraph.To(astenant.Table, astenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, aspropertiesdistribution.TenantTable, aspropertiesdistribution.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(apdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AsPropertiesDistribution entity from the query.
// Returns a *NotFoundError when no AsPropertiesDistribution was found.
func (apdq *AsPropertiesDistributionQuery) First(ctx context.Context) (*AsPropertiesDistribution, error) {
	nodes, err := apdq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{aspropertiesdistribution.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (apdq *AsPropertiesDistributionQuery) FirstX(ctx context.Context) *AsPropertiesDistribution {
	node, err := apdq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AsPropertiesDistribution ID from the query.
// Returns a *NotFoundError when no AsPropertiesDistribution ID was found.
func (apdq *AsPropertiesDistributionQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = apdq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{aspropertiesdistribution.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (apdq *AsPropertiesDistributionQuery) FirstIDX(ctx context.Context) int64 {
	id, err := apdq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AsPropertiesDistribution entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AsPropertiesDistribution entity is found.
// Returns a *NotFoundError when no AsPropertiesDistribution entities are found.
func (apdq *AsPropertiesDistributionQuery) Only(ctx context.Context) (*AsPropertiesDistribution, error) {
	nodes, err := apdq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{aspropertiesdistribution.Label}
	default:
		return nil, &NotSingularError{aspropertiesdistribution.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (apdq *AsPropertiesDistributionQuery) OnlyX(ctx context.Context) *AsPropertiesDistribution {
	node, err := apdq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AsPropertiesDistribution ID in the query.
// Returns a *NotSingularError when more than one AsPropertiesDistribution ID is found.
// Returns a *NotFoundError when no entities are found.
func (apdq *AsPropertiesDistributionQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = apdq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{aspropertiesdistribution.Label}
	default:
		err = &NotSingularError{aspropertiesdistribution.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (apdq *AsPropertiesDistributionQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := apdq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AsPropertiesDistributions.
func (apdq *AsPropertiesDistributionQuery) All(ctx context.Context) ([]*AsPropertiesDistribution, error) {
	if err := apdq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return apdq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (apdq *AsPropertiesDistributionQuery) AllX(ctx context.Context) []*AsPropertiesDistribution {
	nodes, err := apdq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AsPropertiesDistribution IDs.
func (apdq *AsPropertiesDistributionQuery) IDs(ctx context.Context) ([]int64, error) {
	var ids []int64
	if err := apdq.Select(aspropertiesdistribution.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (apdq *AsPropertiesDistributionQuery) IDsX(ctx context.Context) []int64 {
	ids, err := apdq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (apdq *AsPropertiesDistributionQuery) Count(ctx context.Context) (int64, error) {
	if err := apdq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return apdq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (apdq *AsPropertiesDistributionQuery) CountX(ctx context.Context) int64 {
	count, err := apdq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (apdq *AsPropertiesDistributionQuery) Exist(ctx context.Context) (bool, error) {
	if err := apdq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return apdq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (apdq *AsPropertiesDistributionQuery) ExistX(ctx context.Context) bool {
	exist, err := apdq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AsPropertiesDistributionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (apdq *AsPropertiesDistributionQuery) Clone() *AsPropertiesDistributionQuery {
	if apdq == nil {
		return nil
	}
	return &AsPropertiesDistributionQuery{
		config:         apdq.config,
		limit:          apdq.limit,
		offset:         apdq.offset,
		order:          append([]OrderFunc{}, apdq.order...),
		predicates:     append([]predicate.AsPropertiesDistribution{}, apdq.predicates...),
		withProperties: apdq.withProperties.Clone(),
		withTenant:     apdq.withTenant.Clone(),
		// clone intermediate query.
		sql:    apdq.sql.Clone(),
		path:   apdq.path,
		unique: apdq.unique,
	}
}

// WithProperties tells the query-builder to eager-load the nodes that are connected to
// the "properties" edge. The optional arguments are used to configure the query builder of the edge.
func (apdq *AsPropertiesDistributionQuery) WithProperties(opts ...func(*AsPropertiesQuery)) *AsPropertiesDistributionQuery {
	query := &AsPropertiesQuery{config: apdq.config}
	for _, opt := range opts {
		opt(query)
	}
	apdq.withProperties = query
	return apdq
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (apdq *AsPropertiesDistributionQuery) WithTenant(opts ...func(*AsTenantQuery)) *AsPropertiesDistributionQuery {
	query := &AsTenantQuery{config: apdq.config}
	for _, opt := range opts {
		opt(query)
	}
	apdq.withTenant = query
	return apdq
}

// ThenProperties tells the query-builder to eager-load the nodes that are connected to
// the "properties" edge. The optional arguments are used to configure the query builder of the edge.
func (apdq *AsPropertiesDistributionQuery) ThenProperties(opts ...func(*AsPropertiesQuery)) *AsPropertiesDistributionQuery {
	query := &AsPropertiesQuery{config: apdq.config}
	for _, opt := range opts {
		opt(query.Where(asproperties.IsDeleted(0)))
	}
	apdq.withProperties = query
	return apdq
}

// ThenTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (apdq *AsPropertiesDistributionQuery) ThenTenant(opts ...func(*AsTenantQuery)) *AsPropertiesDistributionQuery {
	query := &AsTenantQuery{config: apdq.config}
	for _, opt := range opts {
		opt(query.Where(astenant.IsDeleted(0)))
	}
	apdq.withTenant = query
	return apdq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		PropertiesID int64 `json:"propertiesId"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AsPropertiesDistribution.Query().
//		GroupBy(aspropertiesdistribution.FieldPropertiesID).
//		Aggregate(schema.Count()).
//		Scan(ctx, &v)
//
func (apdq *AsPropertiesDistributionQuery) GroupBy(field string, fields ...string) *AsPropertiesDistributionGroupBy {
	group := &AsPropertiesDistributionGroupBy{config: apdq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := apdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return apdq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		PropertiesID int64 `json:"propertiesId"`
//	}
//
//	client.AsPropertiesDistribution.Query().
//		Select(aspropertiesdistribution.FieldPropertiesID).
//		Scan(ctx, &v)
//
func (apdq *AsPropertiesDistributionQuery) Select(fields ...string) *AsPropertiesDistributionSelect {
	apdq.fields = append(apdq.fields, fields...)
	return &AsPropertiesDistributionSelect{AsPropertiesDistributionQuery: apdq}
}

func (apdq *AsPropertiesDistributionQuery) prepareQuery(ctx context.Context) error {
	for _, f := range apdq.fields {
		if !aspropertiesdistribution.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("schema: invalid field %q for query", f)}
		}
	}
	if apdq.path != nil {
		prev, err := apdq.path(ctx)
		if err != nil {
			return err
		}
		apdq.sql = prev
	}
	return nil
}

func (apdq *AsPropertiesDistributionQuery) sqlAll(ctx context.Context) ([]*AsPropertiesDistribution, error) {
	var (
		nodes       = []*AsPropertiesDistribution{}
		_spec       = apdq.querySpec()
		loadedTypes = [2]bool{
			apdq.withProperties != nil,
			apdq.withTenant != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &AsPropertiesDistribution{config: apdq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("schema: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, apdq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := apdq.withProperties; query != nil {
		ids := make([]int64, 0, len(nodes))
		nodeids := make(map[int64][]*AsPropertiesDistribution)
		for i := range nodes {
			fk := nodes[i].PropertiesID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(asproperties.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "properties_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Properties = n
			}
		}
	}

	if query := apdq.withTenant; query != nil {
		ids := make([]int64, 0, len(nodes))
		nodeids := make(map[int64][]*AsPropertiesDistribution)
		for i := range nodes {
			fk := nodes[i].TenantID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(astenant.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Tenant = n
			}
		}
	}

	return nodes, nil
}

func (apdq *AsPropertiesDistributionQuery) sqlCount(ctx context.Context) (int64, error) {
	_spec := apdq.querySpec()
	_spec.Node.Columns = apdq.fields
	if len(apdq.fields) > 0 {
		_spec.Unique = apdq.unique != nil && *apdq.unique
	}
	c, err := sqlgraph.CountNodes(ctx, apdq.driver, _spec)
	return int64(c), err
}

func (apdq *AsPropertiesDistributionQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := apdq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("schema: check existence: %w", err)
	}
	return n > 0, nil
}

func (apdq *AsPropertiesDistributionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   aspropertiesdistribution.Table,
			Columns: aspropertiesdistribution.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: aspropertiesdistribution.FieldID,
			},
		},
		From:   apdq.sql,
		Unique: true,
	}
	if unique := apdq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := apdq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, aspropertiesdistribution.FieldID)
		for i := range fields {
			if fields[i] != aspropertiesdistribution.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := apdq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := apdq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := apdq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := apdq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (apdq *AsPropertiesDistributionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(apdq.driver.Dialect())
	t1 := builder.Table(aspropertiesdistribution.Table)
	columns := apdq.fields
	if len(columns) == 0 {
		columns = aspropertiesdistribution.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if apdq.sql != nil {
		selector = apdq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if apdq.unique != nil && *apdq.unique {
		selector.Distinct()
	}
	for _, p := range apdq.predicates {
		p(selector)
	}
	for _, p := range apdq.order {
		p(selector)
	}
	if offset := apdq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := apdq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AsPropertiesDistributionGroupBy is the group-by builder for AsPropertiesDistribution entities.
type AsPropertiesDistributionGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (apdgb *AsPropertiesDistributionGroupBy) Aggregate(fns ...AggregateFunc) *AsPropertiesDistributionGroupBy {
	apdgb.fns = append(apdgb.fns, fns...)
	return apdgb
}

// Scan applies the group-by query and scans the result into the given value.
func (apdgb *AsPropertiesDistributionGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := apdgb.path(ctx)
	if err != nil {
		return err
	}
	apdgb.sql = query
	return apdgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (apdgb *AsPropertiesDistributionGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := apdgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (apdgb *AsPropertiesDistributionGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(apdgb.fields) > 1 {
		return nil, errors.New("schema: AsPropertiesDistributionGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := apdgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (apdgb *AsPropertiesDistributionGroupBy) StringsX(ctx context.Context) []string {
	v, err := apdgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (apdgb *AsPropertiesDistributionGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = apdgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{aspropertiesdistribution.Label}
	default:
		err = fmt.Errorf("schema: AsPropertiesDistributionGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (apdgb *AsPropertiesDistributionGroupBy) StringX(ctx context.Context) string {
	v, err := apdgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (apdgb *AsPropertiesDistributionGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(apdgb.fields) > 1 {
		return nil, errors.New("schema: AsPropertiesDistributionGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := apdgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (apdgb *AsPropertiesDistributionGroupBy) IntsX(ctx context.Context) []int {
	v, err := apdgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (apdgb *AsPropertiesDistributionGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = apdgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{aspropertiesdistribution.Label}
	default:
		err = fmt.Errorf("schema: AsPropertiesDistributionGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (apdgb *AsPropertiesDistributionGroupBy) IntX(ctx context.Context) int {
	v, err := apdgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (apdgb *AsPropertiesDistributionGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(apdgb.fields) > 1 {
		return nil, errors.New("schema: AsPropertiesDistributionGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := apdgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (apdgb *AsPropertiesDistributionGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := apdgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (apdgb *AsPropertiesDistributionGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = apdgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{aspropertiesdistribution.Label}
	default:
		err = fmt.Errorf("schema: AsPropertiesDistributionGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (apdgb *AsPropertiesDistributionGroupBy) Float64X(ctx context.Context) float64 {
	v, err := apdgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (apdgb *AsPropertiesDistributionGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(apdgb.fields) > 1 {
		return nil, errors.New("schema: AsPropertiesDistributionGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := apdgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (apdgb *AsPropertiesDistributionGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := apdgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (apdgb *AsPropertiesDistributionGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = apdgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{aspropertiesdistribution.Label}
	default:
		err = fmt.Errorf("schema: AsPropertiesDistributionGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (apdgb *AsPropertiesDistributionGroupBy) BoolX(ctx context.Context) bool {
	v, err := apdgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64s returns list of int64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (apdgb *AsPropertiesDistributionGroupBy) Int64s(ctx context.Context) ([]int64, error) {
	if len(apdgb.fields) > 1 {
		return nil, errors.New("schema: AsPropertiesDistributionGroupBy.Int64s is not achievable when grouping more than 1 field")
	}
	var v []int64
	if err := apdgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Int64sX is like Int64s, but panics if an error occurs.
func (apdgb *AsPropertiesDistributionGroupBy) Int64sX(ctx context.Context) []int64 {
	v, err := apdgb.Int64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64 returns a single int64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (apdgb *AsPropertiesDistributionGroupBy) Int64(ctx context.Context) (_ int64, err error) {
	var v []int64
	if v, err = apdgb.Int64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{aspropertiesdistribution.Label}
	default:
		err = fmt.Errorf("schema: AsPropertiesDistributionGroupBy.Int64s returned %d results when one was expected", len(v))
	}
	return
}

// Int64X is like Int64, but panics if an error occurs.
func (apdgb *AsPropertiesDistributionGroupBy) Int64X(ctx context.Context) int64 {
	v, err := apdgb.Int64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (apdgb *AsPropertiesDistributionGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range apdgb.fields {
		if !aspropertiesdistribution.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := apdgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := apdgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (apdgb *AsPropertiesDistributionGroupBy) sqlQuery() *sql.Selector {
	selector := apdgb.sql.Select()
	aggregation := make([]string, 0, len(apdgb.fns))
	for _, fn := range apdgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(apdgb.fields)+len(apdgb.fns))
		for _, f := range apdgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(apdgb.fields...)...)
}

// AsPropertiesDistributionSelect is the builder for selecting fields of AsPropertiesDistribution entities.
type AsPropertiesDistributionSelect struct {
	*AsPropertiesDistributionQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (apds *AsPropertiesDistributionSelect) Scan(ctx context.Context, v interface{}) error {
	if err := apds.prepareQuery(ctx); err != nil {
		return err
	}
	apds.sql = apds.AsPropertiesDistributionQuery.sqlQuery(ctx)
	return apds.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (apds *AsPropertiesDistributionSelect) ScanX(ctx context.Context, v interface{}) {
	if err := apds.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (apds *AsPropertiesDistributionSelect) Strings(ctx context.Context) ([]string, error) {
	if len(apds.fields) > 1 {
		return nil, errors.New("schema: AsPropertiesDistributionSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := apds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (apds *AsPropertiesDistributionSelect) StringsX(ctx context.Context) []string {
	v, err := apds.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (apds *AsPropertiesDistributionSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = apds.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{aspropertiesdistribution.Label}
	default:
		err = fmt.Errorf("schema: AsPropertiesDistributionSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (apds *AsPropertiesDistributionSelect) StringX(ctx context.Context) string {
	v, err := apds.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (apds *AsPropertiesDistributionSelect) Ints(ctx context.Context) ([]int, error) {
	if len(apds.fields) > 1 {
		return nil, errors.New("schema: AsPropertiesDistributionSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := apds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (apds *AsPropertiesDistributionSelect) IntsX(ctx context.Context) []int {
	v, err := apds.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (apds *AsPropertiesDistributionSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = apds.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{aspropertiesdistribution.Label}
	default:
		err = fmt.Errorf("schema: AsPropertiesDistributionSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (apds *AsPropertiesDistributionSelect) IntX(ctx context.Context) int {
	v, err := apds.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (apds *AsPropertiesDistributionSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(apds.fields) > 1 {
		return nil, errors.New("schema: AsPropertiesDistributionSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := apds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (apds *AsPropertiesDistributionSelect) Float64sX(ctx context.Context) []float64 {
	v, err := apds.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (apds *AsPropertiesDistributionSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = apds.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{aspropertiesdistribution.Label}
	default:
		err = fmt.Errorf("schema: AsPropertiesDistributionSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (apds *AsPropertiesDistributionSelect) Float64X(ctx context.Context) float64 {
	v, err := apds.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (apds *AsPropertiesDistributionSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(apds.fields) > 1 {
		return nil, errors.New("schema: AsPropertiesDistributionSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := apds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (apds *AsPropertiesDistributionSelect) BoolsX(ctx context.Context) []bool {
	v, err := apds.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (apds *AsPropertiesDistributionSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = apds.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{aspropertiesdistribution.Label}
	default:
		err = fmt.Errorf("schema: AsPropertiesDistributionSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (apds *AsPropertiesDistributionSelect) BoolX(ctx context.Context) bool {
	v, err := apds.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64s returns list of int64s from a selector. It is only allowed when selecting one field.
func (apds *AsPropertiesDistributionSelect) Int64s(ctx context.Context) ([]int64, error) {
	if len(apds.fields) > 1 {
		return nil, errors.New("schema: AsPropertiesDistributionSelect.Int64s is not achievable when selecting more than 1 field")
	}
	var v []int64
	if err := apds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Int64sX is like Int64s, but panics if an error occurs.
func (apds *AsPropertiesDistributionSelect) Int64sX(ctx context.Context) []int64 {
	v, err := apds.Int64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64 returns a single int64 from a selector. It is only allowed when selecting one field.
func (apds *AsPropertiesDistributionSelect) Int64(ctx context.Context) (_ int64, err error) {
	var v []int64
	if v, err = apds.Int64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{aspropertiesdistribution.Label}
	default:
		err = fmt.Errorf("schema: AsPropertiesDistributionSelect.Int64s returned %d results when one was expected", len(v))
	}
	return
}

// Int64X is like Int64, but panics if an error occurs.
func (apds *AsPropertiesDistributionSelect) Int64X(ctx context.Context) int64 {
	v, err := apds.Int64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (apds *AsPropertiesDistributionSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := apds.sql.Query()
	if err := apds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
