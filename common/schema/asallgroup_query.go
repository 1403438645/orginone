// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"
	"orginone/common/schema/asallgroup"
	"orginone/common/schema/asappgroupdistributiondata"
	"orginone/common/schema/asgrouptenantrelations"
	"orginone/common/schema/aslayer"
	"orginone/common/schema/asmarketappgroupdistribution"
	"orginone/common/schema/asmarketappgroupdistributionrelation"
	"orginone/common/schema/asmarketapppurchase"
	"orginone/common/schema/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsAllGroupQuery is the builder for querying AsAllGroup entities.
type AsAllGroupQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.AsAllGroup
	// eager-loading edges.
	withAllLayer                 *AsLayerQuery
	withAppPurchases             *AsMarketAppPurchaseQuery
	withAllTenants               *AsGroupTenantRelationsQuery
	withAppGroupDistribs         *AsMarketAppGroupDistributionQuery
	withAppGroupDistribConfigs   *AsAppGroupDistributionDataQuery
	withAppGroupDistribsRelation *AsMarketAppGroupDistributionRelationQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AsAllGroupQuery builder.
func (aagq *AsAllGroupQuery) Where(ps ...predicate.AsAllGroup) *AsAllGroupQuery {
	aagq.predicates = append(aagq.predicates, ps...)
	return aagq
}

// Limit adds a limit step to the query.
func (aagq *AsAllGroupQuery) Limit(limit int) *AsAllGroupQuery {
	aagq.limit = &limit
	return aagq
}

// Offset adds an offset step to the query.
func (aagq *AsAllGroupQuery) Offset(offset int) *AsAllGroupQuery {
	aagq.offset = &offset
	return aagq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (aagq *AsAllGroupQuery) Unique(unique bool) *AsAllGroupQuery {
	aagq.unique = &unique
	return aagq
}

// Order adds an order step to the query.
func (aagq *AsAllGroupQuery) Order(o ...OrderFunc) *AsAllGroupQuery {
	aagq.order = append(aagq.order, o...)
	return aagq
}

// QueryAllLayer chains the current query on the "allLayer" edge.
func (aagq *AsAllGroupQuery) QueryAllLayer() *AsLayerQuery {
	query := &AsLayerQuery{config: aagq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aagq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aagq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asallgroup.Table, asallgroup.FieldID, selector),
			sqlgraph.To(aslayer.Table, aslayer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asallgroup.AllLayerTable, asallgroup.AllLayerColumn),
		)
		fromU = sqlgraph.SetNeighbors(aagq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAppPurchases chains the current query on the "appPurchases" edge.
func (aagq *AsAllGroupQuery) QueryAppPurchases() *AsMarketAppPurchaseQuery {
	query := &AsMarketAppPurchaseQuery{config: aagq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aagq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aagq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asallgroup.Table, asallgroup.FieldID, selector),
			sqlgraph.To(asmarketapppurchase.Table, asmarketapppurchase.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asallgroup.AppPurchasesTable, asallgroup.AppPurchasesColumn),
		)
		fromU = sqlgraph.SetNeighbors(aagq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAllTenants chains the current query on the "allTenants" edge.
func (aagq *AsAllGroupQuery) QueryAllTenants() *AsGroupTenantRelationsQuery {
	query := &AsGroupTenantRelationsQuery{config: aagq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aagq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aagq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asallgroup.Table, asallgroup.FieldID, selector),
			sqlgraph.To(asgrouptenantrelations.Table, asgrouptenantrelations.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asallgroup.AllTenantsTable, asallgroup.AllTenantsColumn),
		)
		fromU = sqlgraph.SetNeighbors(aagq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAppGroupDistribs chains the current query on the "appGroupDistribs" edge.
func (aagq *AsAllGroupQuery) QueryAppGroupDistribs() *AsMarketAppGroupDistributionQuery {
	query := &AsMarketAppGroupDistributionQuery{config: aagq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aagq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aagq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asallgroup.Table, asallgroup.FieldID, selector),
			sqlgraph.To(asmarketappgroupdistribution.Table, asmarketappgroupdistribution.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asallgroup.AppGroupDistribsTable, asallgroup.AppGroupDistribsColumn),
		)
		fromU = sqlgraph.SetNeighbors(aagq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAppGroupDistribConfigs chains the current query on the "appGroupDistribConfigs" edge.
func (aagq *AsAllGroupQuery) QueryAppGroupDistribConfigs() *AsAppGroupDistributionDataQuery {
	query := &AsAppGroupDistributionDataQuery{config: aagq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aagq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aagq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asallgroup.Table, asallgroup.FieldID, selector),
			sqlgraph.To(asappgroupdistributiondata.Table, asappgroupdistributiondata.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asallgroup.AppGroupDistribConfigsTable, asallgroup.AppGroupDistribConfigsColumn),
		)
		fromU = sqlgraph.SetNeighbors(aagq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAppGroupDistribsRelation chains the current query on the "appGroupDistribsRelation" edge.
func (aagq *AsAllGroupQuery) QueryAppGroupDistribsRelation() *AsMarketAppGroupDistributionRelationQuery {
	query := &AsMarketAppGroupDistributionRelationQuery{config: aagq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aagq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aagq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asallgroup.Table, asallgroup.FieldID, selector),
			sqlgraph.To(asmarketappgroupdistributionrelation.Table, asmarketappgroupdistributionrelation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asallgroup.AppGroupDistribsRelationTable, asallgroup.AppGroupDistribsRelationColumn),
		)
		fromU = sqlgraph.SetNeighbors(aagq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AsAllGroup entity from the query.
// Returns a *NotFoundError when no AsAllGroup was found.
func (aagq *AsAllGroupQuery) First(ctx context.Context) (*AsAllGroup, error) {
	nodes, err := aagq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{asallgroup.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (aagq *AsAllGroupQuery) FirstX(ctx context.Context) *AsAllGroup {
	node, err := aagq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AsAllGroup ID from the query.
// Returns a *NotFoundError when no AsAllGroup ID was found.
func (aagq *AsAllGroupQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = aagq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{asallgroup.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (aagq *AsAllGroupQuery) FirstIDX(ctx context.Context) int64 {
	id, err := aagq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AsAllGroup entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AsAllGroup entity is found.
// Returns a *NotFoundError when no AsAllGroup entities are found.
func (aagq *AsAllGroupQuery) Only(ctx context.Context) (*AsAllGroup, error) {
	nodes, err := aagq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{asallgroup.Label}
	default:
		return nil, &NotSingularError{asallgroup.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (aagq *AsAllGroupQuery) OnlyX(ctx context.Context) *AsAllGroup {
	node, err := aagq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AsAllGroup ID in the query.
// Returns a *NotSingularError when more than one AsAllGroup ID is found.
// Returns a *NotFoundError when no entities are found.
func (aagq *AsAllGroupQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = aagq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{asallgroup.Label}
	default:
		err = &NotSingularError{asallgroup.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (aagq *AsAllGroupQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := aagq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AsAllGroups.
func (aagq *AsAllGroupQuery) All(ctx context.Context) ([]*AsAllGroup, error) {
	if err := aagq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return aagq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (aagq *AsAllGroupQuery) AllX(ctx context.Context) []*AsAllGroup {
	nodes, err := aagq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AsAllGroup IDs.
func (aagq *AsAllGroupQuery) IDs(ctx context.Context) ([]int64, error) {
	var ids []int64
	if err := aagq.Select(asallgroup.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (aagq *AsAllGroupQuery) IDsX(ctx context.Context) []int64 {
	ids, err := aagq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (aagq *AsAllGroupQuery) Count(ctx context.Context) (int64, error) {
	if err := aagq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return aagq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (aagq *AsAllGroupQuery) CountX(ctx context.Context) int64 {
	count, err := aagq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (aagq *AsAllGroupQuery) Exist(ctx context.Context) (bool, error) {
	if err := aagq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return aagq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (aagq *AsAllGroupQuery) ExistX(ctx context.Context) bool {
	exist, err := aagq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AsAllGroupQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (aagq *AsAllGroupQuery) Clone() *AsAllGroupQuery {
	if aagq == nil {
		return nil
	}
	return &AsAllGroupQuery{
		config:                       aagq.config,
		limit:                        aagq.limit,
		offset:                       aagq.offset,
		order:                        append([]OrderFunc{}, aagq.order...),
		predicates:                   append([]predicate.AsAllGroup{}, aagq.predicates...),
		withAllLayer:                 aagq.withAllLayer.Clone(),
		withAppPurchases:             aagq.withAppPurchases.Clone(),
		withAllTenants:               aagq.withAllTenants.Clone(),
		withAppGroupDistribs:         aagq.withAppGroupDistribs.Clone(),
		withAppGroupDistribConfigs:   aagq.withAppGroupDistribConfigs.Clone(),
		withAppGroupDistribsRelation: aagq.withAppGroupDistribsRelation.Clone(),
		// clone intermediate query.
		sql:    aagq.sql.Clone(),
		path:   aagq.path,
		unique: aagq.unique,
	}
}

// WithAllLayer tells the query-builder to eager-load the nodes that are connected to
// the "allLayer" edge. The optional arguments are used to configure the query builder of the edge.
func (aagq *AsAllGroupQuery) WithAllLayer(opts ...func(*AsLayerQuery)) *AsAllGroupQuery {
	query := &AsLayerQuery{config: aagq.config}
	for _, opt := range opts {
		opt(query)
	}
	aagq.withAllLayer = query
	return aagq
}

// WithAppPurchases tells the query-builder to eager-load the nodes that are connected to
// the "appPurchases" edge. The optional arguments are used to configure the query builder of the edge.
func (aagq *AsAllGroupQuery) WithAppPurchases(opts ...func(*AsMarketAppPurchaseQuery)) *AsAllGroupQuery {
	query := &AsMarketAppPurchaseQuery{config: aagq.config}
	for _, opt := range opts {
		opt(query)
	}
	aagq.withAppPurchases = query
	return aagq
}

// WithAllTenants tells the query-builder to eager-load the nodes that are connected to
// the "allTenants" edge. The optional arguments are used to configure the query builder of the edge.
func (aagq *AsAllGroupQuery) WithAllTenants(opts ...func(*AsGroupTenantRelationsQuery)) *AsAllGroupQuery {
	query := &AsGroupTenantRelationsQuery{config: aagq.config}
	for _, opt := range opts {
		opt(query)
	}
	aagq.withAllTenants = query
	return aagq
}

// WithAppGroupDistribs tells the query-builder to eager-load the nodes that are connected to
// the "appGroupDistribs" edge. The optional arguments are used to configure the query builder of the edge.
func (aagq *AsAllGroupQuery) WithAppGroupDistribs(opts ...func(*AsMarketAppGroupDistributionQuery)) *AsAllGroupQuery {
	query := &AsMarketAppGroupDistributionQuery{config: aagq.config}
	for _, opt := range opts {
		opt(query)
	}
	aagq.withAppGroupDistribs = query
	return aagq
}

// WithAppGroupDistribConfigs tells the query-builder to eager-load the nodes that are connected to
// the "appGroupDistribConfigs" edge. The optional arguments are used to configure the query builder of the edge.
func (aagq *AsAllGroupQuery) WithAppGroupDistribConfigs(opts ...func(*AsAppGroupDistributionDataQuery)) *AsAllGroupQuery {
	query := &AsAppGroupDistributionDataQuery{config: aagq.config}
	for _, opt := range opts {
		opt(query)
	}
	aagq.withAppGroupDistribConfigs = query
	return aagq
}

// WithAppGroupDistribsRelation tells the query-builder to eager-load the nodes that are connected to
// the "appGroupDistribsRelation" edge. The optional arguments are used to configure the query builder of the edge.
func (aagq *AsAllGroupQuery) WithAppGroupDistribsRelation(opts ...func(*AsMarketAppGroupDistributionRelationQuery)) *AsAllGroupQuery {
	query := &AsMarketAppGroupDistributionRelationQuery{config: aagq.config}
	for _, opt := range opts {
		opt(query)
	}
	aagq.withAppGroupDistribsRelation = query
	return aagq
}

// ThenAllLayer tells the query-builder to eager-load the nodes that are connected to
// the "allLayer" edge. The optional arguments are used to configure the query builder of the edge.
func (aagq *AsAllGroupQuery) ThenAllLayer(opts ...func(*AsLayerQuery)) *AsAllGroupQuery {
	query := &AsLayerQuery{config: aagq.config}
	for _, opt := range opts {
		opt(query.Where(aslayer.IsDeleted(0)))
	}
	aagq.withAllLayer = query
	return aagq
}

// ThenAppPurchases tells the query-builder to eager-load the nodes that are connected to
// the "appPurchases" edge. The optional arguments are used to configure the query builder of the edge.
func (aagq *AsAllGroupQuery) ThenAppPurchases(opts ...func(*AsMarketAppPurchaseQuery)) *AsAllGroupQuery {
	query := &AsMarketAppPurchaseQuery{config: aagq.config}
	for _, opt := range opts {
		opt(query.Where(asmarketapppurchase.IsDeleted(0)))
	}
	aagq.withAppPurchases = query
	return aagq
}

// ThenAllTenants tells the query-builder to eager-load the nodes that are connected to
// the "allTenants" edge. The optional arguments are used to configure the query builder of the edge.
func (aagq *AsAllGroupQuery) ThenAllTenants(opts ...func(*AsGroupTenantRelationsQuery)) *AsAllGroupQuery {
	query := &AsGroupTenantRelationsQuery{config: aagq.config}
	for _, opt := range opts {
		opt(query.Where(asgrouptenantrelations.IsDeleted(0)))
	}
	aagq.withAllTenants = query
	return aagq
}

// ThenAppGroupDistribs tells the query-builder to eager-load the nodes that are connected to
// the "appGroupDistribs" edge. The optional arguments are used to configure the query builder of the edge.
func (aagq *AsAllGroupQuery) ThenAppGroupDistribs(opts ...func(*AsMarketAppGroupDistributionQuery)) *AsAllGroupQuery {
	query := &AsMarketAppGroupDistributionQuery{config: aagq.config}
	for _, opt := range opts {
		opt(query.Where(asmarketappgroupdistribution.IsDeleted(0)))
	}
	aagq.withAppGroupDistribs = query
	return aagq
}

// ThenAppGroupDistribConfigs tells the query-builder to eager-load the nodes that are connected to
// the "appGroupDistribConfigs" edge. The optional arguments are used to configure the query builder of the edge.
func (aagq *AsAllGroupQuery) ThenAppGroupDistribConfigs(opts ...func(*AsAppGroupDistributionDataQuery)) *AsAllGroupQuery {
	query := &AsAppGroupDistributionDataQuery{config: aagq.config}
	for _, opt := range opts {
		opt(query.Where(asappgroupdistributiondata.IsDeleted(0)))
	}
	aagq.withAppGroupDistribConfigs = query
	return aagq
}

// ThenAppGroupDistribsRelation tells the query-builder to eager-load the nodes that are connected to
// the "appGroupDistribsRelation" edge. The optional arguments are used to configure the query builder of the edge.
func (aagq *AsAllGroupQuery) ThenAppGroupDistribsRelation(opts ...func(*AsMarketAppGroupDistributionRelationQuery)) *AsAllGroupQuery {
	query := &AsMarketAppGroupDistributionRelationQuery{config: aagq.config}
	for _, opt := range opts {
		opt(query.Where(asmarketappgroupdistributionrelation.IsDeleted(0)))
	}
	aagq.withAppGroupDistribsRelation = query
	return aagq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantCode string `json:"tenantCode"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AsAllGroup.Query().
//		GroupBy(asallgroup.FieldTenantCode).
//		Aggregate(schema.Count()).
//		Scan(ctx, &v)
//
func (aagq *AsAllGroupQuery) GroupBy(field string, fields ...string) *AsAllGroupGroupBy {
	group := &AsAllGroupGroupBy{config: aagq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := aagq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return aagq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantCode string `json:"tenantCode"`
//	}
//
//	client.AsAllGroup.Query().
//		Select(asallgroup.FieldTenantCode).
//		Scan(ctx, &v)
//
func (aagq *AsAllGroupQuery) Select(fields ...string) *AsAllGroupSelect {
	aagq.fields = append(aagq.fields, fields...)
	return &AsAllGroupSelect{AsAllGroupQuery: aagq}
}

func (aagq *AsAllGroupQuery) prepareQuery(ctx context.Context) error {
	for _, f := range aagq.fields {
		if !asallgroup.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("schema: invalid field %q for query", f)}
		}
	}
	if aagq.path != nil {
		prev, err := aagq.path(ctx)
		if err != nil {
			return err
		}
		aagq.sql = prev
	}
	return nil
}

func (aagq *AsAllGroupQuery) sqlAll(ctx context.Context) ([]*AsAllGroup, error) {
	var (
		nodes       = []*AsAllGroup{}
		_spec       = aagq.querySpec()
		loadedTypes = [6]bool{
			aagq.withAllLayer != nil,
			aagq.withAppPurchases != nil,
			aagq.withAllTenants != nil,
			aagq.withAppGroupDistribs != nil,
			aagq.withAppGroupDistribConfigs != nil,
			aagq.withAppGroupDistribsRelation != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &AsAllGroup{config: aagq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("schema: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, aagq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := aagq.withAllLayer; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int64]*AsAllGroup)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.AllLayer = []*AsLayer{}
		}
		query.Where(predicate.AsLayer(func(s *sql.Selector) {
			s.Where(sql.InValues(asallgroup.AllLayerColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.GroupID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "group_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.AllLayer = append(node.Edges.AllLayer, n)
		}
	}

	if query := aagq.withAppPurchases; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int64]*AsAllGroup)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.AppPurchases = []*AsMarketAppPurchase{}
		}
		query.Where(predicate.AsMarketAppPurchase(func(s *sql.Selector) {
			s.Where(sql.InValues(asallgroup.AppPurchasesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.GroupID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "group_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.AppPurchases = append(node.Edges.AppPurchases, n)
		}
	}

	if query := aagq.withAllTenants; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int64]*AsAllGroup)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.AllTenants = []*AsGroupTenantRelations{}
		}
		query.Where(predicate.AsGroupTenantRelations(func(s *sql.Selector) {
			s.Where(sql.InValues(asallgroup.AllTenantsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.ParentID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "parent_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.AllTenants = append(node.Edges.AllTenants, n)
		}
	}

	if query := aagq.withAppGroupDistribs; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int64]*AsAllGroup)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.AppGroupDistribs = []*AsMarketAppGroupDistribution{}
		}
		query.Where(predicate.AsMarketAppGroupDistribution(func(s *sql.Selector) {
			s.Where(sql.InValues(asallgroup.AppGroupDistribsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.GroupID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "group_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.AppGroupDistribs = append(node.Edges.AppGroupDistribs, n)
		}
	}

	if query := aagq.withAppGroupDistribConfigs; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int64]*AsAllGroup)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.AppGroupDistribConfigs = []*AsAppGroupDistributionData{}
		}
		query.Where(predicate.AsAppGroupDistributionData(func(s *sql.Selector) {
			s.Where(sql.InValues(asallgroup.AppGroupDistribConfigsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.GroupID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "group_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.AppGroupDistribConfigs = append(node.Edges.AppGroupDistribConfigs, n)
		}
	}

	if query := aagq.withAppGroupDistribsRelation; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int64]*AsAllGroup)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.AppGroupDistribsRelation = []*AsMarketAppGroupDistributionRelation{}
		}
		query.Where(predicate.AsMarketAppGroupDistributionRelation(func(s *sql.Selector) {
			s.Where(sql.InValues(asallgroup.AppGroupDistribsRelationColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.GroupID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "group_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.AppGroupDistribsRelation = append(node.Edges.AppGroupDistribsRelation, n)
		}
	}

	return nodes, nil
}

func (aagq *AsAllGroupQuery) sqlCount(ctx context.Context) (int64, error) {
	_spec := aagq.querySpec()
	_spec.Node.Columns = aagq.fields
	if len(aagq.fields) > 0 {
		_spec.Unique = aagq.unique != nil && *aagq.unique
	}
	c, err := sqlgraph.CountNodes(ctx, aagq.driver, _spec)
	return int64(c), err
}

func (aagq *AsAllGroupQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := aagq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("schema: check existence: %w", err)
	}
	return n > 0, nil
}

func (aagq *AsAllGroupQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asallgroup.Table,
			Columns: asallgroup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asallgroup.FieldID,
			},
		},
		From:   aagq.sql,
		Unique: true,
	}
	if unique := aagq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := aagq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asallgroup.FieldID)
		for i := range fields {
			if fields[i] != asallgroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := aagq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := aagq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := aagq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := aagq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (aagq *AsAllGroupQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(aagq.driver.Dialect())
	t1 := builder.Table(asallgroup.Table)
	columns := aagq.fields
	if len(columns) == 0 {
		columns = asallgroup.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if aagq.sql != nil {
		selector = aagq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if aagq.unique != nil && *aagq.unique {
		selector.Distinct()
	}
	for _, p := range aagq.predicates {
		p(selector)
	}
	for _, p := range aagq.order {
		p(selector)
	}
	if offset := aagq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := aagq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AsAllGroupGroupBy is the group-by builder for AsAllGroup entities.
type AsAllGroupGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (aaggb *AsAllGroupGroupBy) Aggregate(fns ...AggregateFunc) *AsAllGroupGroupBy {
	aaggb.fns = append(aaggb.fns, fns...)
	return aaggb
}

// Scan applies the group-by query and scans the result into the given value.
func (aaggb *AsAllGroupGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := aaggb.path(ctx)
	if err != nil {
		return err
	}
	aaggb.sql = query
	return aaggb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (aaggb *AsAllGroupGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := aaggb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (aaggb *AsAllGroupGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(aaggb.fields) > 1 {
		return nil, errors.New("schema: AsAllGroupGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := aaggb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (aaggb *AsAllGroupGroupBy) StringsX(ctx context.Context) []string {
	v, err := aaggb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (aaggb *AsAllGroupGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = aaggb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asallgroup.Label}
	default:
		err = fmt.Errorf("schema: AsAllGroupGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (aaggb *AsAllGroupGroupBy) StringX(ctx context.Context) string {
	v, err := aaggb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (aaggb *AsAllGroupGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(aaggb.fields) > 1 {
		return nil, errors.New("schema: AsAllGroupGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := aaggb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (aaggb *AsAllGroupGroupBy) IntsX(ctx context.Context) []int {
	v, err := aaggb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (aaggb *AsAllGroupGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = aaggb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asallgroup.Label}
	default:
		err = fmt.Errorf("schema: AsAllGroupGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (aaggb *AsAllGroupGroupBy) IntX(ctx context.Context) int {
	v, err := aaggb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (aaggb *AsAllGroupGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(aaggb.fields) > 1 {
		return nil, errors.New("schema: AsAllGroupGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := aaggb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (aaggb *AsAllGroupGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := aaggb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (aaggb *AsAllGroupGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = aaggb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asallgroup.Label}
	default:
		err = fmt.Errorf("schema: AsAllGroupGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (aaggb *AsAllGroupGroupBy) Float64X(ctx context.Context) float64 {
	v, err := aaggb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (aaggb *AsAllGroupGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(aaggb.fields) > 1 {
		return nil, errors.New("schema: AsAllGroupGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := aaggb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (aaggb *AsAllGroupGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := aaggb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (aaggb *AsAllGroupGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = aaggb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asallgroup.Label}
	default:
		err = fmt.Errorf("schema: AsAllGroupGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (aaggb *AsAllGroupGroupBy) BoolX(ctx context.Context) bool {
	v, err := aaggb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64s returns list of int64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (aaggb *AsAllGroupGroupBy) Int64s(ctx context.Context) ([]int64, error) {
	if len(aaggb.fields) > 1 {
		return nil, errors.New("schema: AsAllGroupGroupBy.Int64s is not achievable when grouping more than 1 field")
	}
	var v []int64
	if err := aaggb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Int64sX is like Int64s, but panics if an error occurs.
func (aaggb *AsAllGroupGroupBy) Int64sX(ctx context.Context) []int64 {
	v, err := aaggb.Int64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64 returns a single int64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (aaggb *AsAllGroupGroupBy) Int64(ctx context.Context) (_ int64, err error) {
	var v []int64
	if v, err = aaggb.Int64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asallgroup.Label}
	default:
		err = fmt.Errorf("schema: AsAllGroupGroupBy.Int64s returned %d results when one was expected", len(v))
	}
	return
}

// Int64X is like Int64, but panics if an error occurs.
func (aaggb *AsAllGroupGroupBy) Int64X(ctx context.Context) int64 {
	v, err := aaggb.Int64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (aaggb *AsAllGroupGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range aaggb.fields {
		if !asallgroup.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := aaggb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := aaggb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (aaggb *AsAllGroupGroupBy) sqlQuery() *sql.Selector {
	selector := aaggb.sql.Select()
	aggregation := make([]string, 0, len(aaggb.fns))
	for _, fn := range aaggb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(aaggb.fields)+len(aaggb.fns))
		for _, f := range aaggb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(aaggb.fields...)...)
}

// AsAllGroupSelect is the builder for selecting fields of AsAllGroup entities.
type AsAllGroupSelect struct {
	*AsAllGroupQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (aags *AsAllGroupSelect) Scan(ctx context.Context, v interface{}) error {
	if err := aags.prepareQuery(ctx); err != nil {
		return err
	}
	aags.sql = aags.AsAllGroupQuery.sqlQuery(ctx)
	return aags.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (aags *AsAllGroupSelect) ScanX(ctx context.Context, v interface{}) {
	if err := aags.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (aags *AsAllGroupSelect) Strings(ctx context.Context) ([]string, error) {
	if len(aags.fields) > 1 {
		return nil, errors.New("schema: AsAllGroupSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := aags.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (aags *AsAllGroupSelect) StringsX(ctx context.Context) []string {
	v, err := aags.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (aags *AsAllGroupSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = aags.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asallgroup.Label}
	default:
		err = fmt.Errorf("schema: AsAllGroupSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (aags *AsAllGroupSelect) StringX(ctx context.Context) string {
	v, err := aags.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (aags *AsAllGroupSelect) Ints(ctx context.Context) ([]int, error) {
	if len(aags.fields) > 1 {
		return nil, errors.New("schema: AsAllGroupSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := aags.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (aags *AsAllGroupSelect) IntsX(ctx context.Context) []int {
	v, err := aags.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (aags *AsAllGroupSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = aags.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asallgroup.Label}
	default:
		err = fmt.Errorf("schema: AsAllGroupSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (aags *AsAllGroupSelect) IntX(ctx context.Context) int {
	v, err := aags.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (aags *AsAllGroupSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(aags.fields) > 1 {
		return nil, errors.New("schema: AsAllGroupSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := aags.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (aags *AsAllGroupSelect) Float64sX(ctx context.Context) []float64 {
	v, err := aags.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (aags *AsAllGroupSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = aags.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asallgroup.Label}
	default:
		err = fmt.Errorf("schema: AsAllGroupSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (aags *AsAllGroupSelect) Float64X(ctx context.Context) float64 {
	v, err := aags.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (aags *AsAllGroupSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(aags.fields) > 1 {
		return nil, errors.New("schema: AsAllGroupSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := aags.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (aags *AsAllGroupSelect) BoolsX(ctx context.Context) []bool {
	v, err := aags.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (aags *AsAllGroupSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = aags.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asallgroup.Label}
	default:
		err = fmt.Errorf("schema: AsAllGroupSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (aags *AsAllGroupSelect) BoolX(ctx context.Context) bool {
	v, err := aags.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64s returns list of int64s from a selector. It is only allowed when selecting one field.
func (aags *AsAllGroupSelect) Int64s(ctx context.Context) ([]int64, error) {
	if len(aags.fields) > 1 {
		return nil, errors.New("schema: AsAllGroupSelect.Int64s is not achievable when selecting more than 1 field")
	}
	var v []int64
	if err := aags.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Int64sX is like Int64s, but panics if an error occurs.
func (aags *AsAllGroupSelect) Int64sX(ctx context.Context) []int64 {
	v, err := aags.Int64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64 returns a single int64 from a selector. It is only allowed when selecting one field.
func (aags *AsAllGroupSelect) Int64(ctx context.Context) (_ int64, err error) {
	var v []int64
	if v, err = aags.Int64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asallgroup.Label}
	default:
		err = fmt.Errorf("schema: AsAllGroupSelect.Int64s returned %d results when one was expected", len(v))
	}
	return
}

// Int64X is like Int64, but panics if an error occurs.
func (aags *AsAllGroupSelect) Int64X(ctx context.Context) int64 {
	v, err := aags.Int64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (aags *AsAllGroupSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := aags.sql.Query()
	if err := aags.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
