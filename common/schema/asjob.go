// Code generated by entc, DO NOT EDIT.

package schema

import (
	"fmt"
	"orginone/common/schema/asjob"
	"orginone/common/tools/date"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// AsJob is the model entity for the AsJob schema.
type AsJob struct {
	config `json:"-"`
	// ID of the ent.
	// 主键
	ID int64 `json:"id,string"`
	// JobName holds the value of the "job_name" field.
	// 岗位名称
	JobName string `json:"jobName"`
	// TenantCode holds the value of the "tenant_code" field.
	// 租户编码
	TenantCode string `json:"tenantCode"`
	// Type holds the value of the "type" field.
	// 岗位类型;1-系统默认岗位,2-用户自定义岗位,3-应用岗位
	Type int64 `json:"type"`
	// Sort holds the value of the "sort" field.
	// 排序
	Sort int64 `json:"sort"`
	// IsDeleted holds the value of the "is_deleted" field.
	// 是否被删除
	IsDeleted int64 `json:"isDeleted"`
	// Status holds the value of the "status" field.
	// 状态
	Status int64 `json:"status"`
	// CreateUser holds the value of the "create_user" field.
	// 创建用户
	CreateUser int64 `json:"createUser"`
	// UpdateUser holds the value of the "update_user" field.
	// 更新用户
	UpdateUser int64 `json:"updateUser"`
	// CreateTime holds the value of the "create_time" field.
	// 创建时间
	CreateTime date.DateTime `json:"createTime"`
	// UpdateTime holds the value of the "update_time" field.
	// 更新时间
	UpdateTime date.DateTime `json:"updateTime"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AsJobQuery when eager-loading is set.
	Edges AsJobEdges `json:"edges"`
}

// AsJobEdges holds the relations/edges for other nodes in the graph.
type AsJobEdges struct {
	// Persons holds the value of the persons edge.
	Persons []*AsPerson `json:"persons"`
	// Roles holds the value of the roles edge.
	Roles []*AsRole `json:"roles"`
	// Users holds the value of the users edge.
	Users []*AsUser `json:"users"`
	// Agencys holds the value of the agencys edge.
	Agencys []*AsInnerAgency `json:"agencys"`
	// RoleDistribs holds the value of the roleDistribs edge.
	RoleDistribs []*AsMarketRoleDistribution `json:"roledistribs"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// PersonsOrErr returns the Persons value or an error if the edge
// was not loaded in eager-loading.
func (e AsJobEdges) PersonsOrErr() ([]*AsPerson, error) {
	if e.loadedTypes[0] {
		return e.Persons, nil
	}
	return nil, &NotLoadedError{edge: "persons"}
}

// RolesOrErr returns the Roles value or an error if the edge
// was not loaded in eager-loading.
func (e AsJobEdges) RolesOrErr() ([]*AsRole, error) {
	if e.loadedTypes[1] {
		return e.Roles, nil
	}
	return nil, &NotLoadedError{edge: "roles"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e AsJobEdges) UsersOrErr() ([]*AsUser, error) {
	if e.loadedTypes[2] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// AgencysOrErr returns the Agencys value or an error if the edge
// was not loaded in eager-loading.
func (e AsJobEdges) AgencysOrErr() ([]*AsInnerAgency, error) {
	if e.loadedTypes[3] {
		return e.Agencys, nil
	}
	return nil, &NotLoadedError{edge: "agencys"}
}

// RoleDistribsOrErr returns the RoleDistribs value or an error if the edge
// was not loaded in eager-loading.
func (e AsJobEdges) RoleDistribsOrErr() ([]*AsMarketRoleDistribution, error) {
	if e.loadedTypes[4] {
		return e.RoleDistribs, nil
	}
	return nil, &NotLoadedError{edge: "roleDistribs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AsJob) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case asjob.FieldID, asjob.FieldType, asjob.FieldSort, asjob.FieldIsDeleted, asjob.FieldStatus, asjob.FieldCreateUser, asjob.FieldUpdateUser:
			values[i] = new(sql.NullInt64)
		case asjob.FieldJobName, asjob.FieldTenantCode:
			values[i] = new(sql.NullString)
		case asjob.FieldCreateTime, asjob.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AsJob", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AsJob fields.
func (aj *AsJob) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case asjob.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			aj.ID = int64(value.Int64)
		case asjob.FieldJobName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field job_name", values[i])
			} else if value.Valid {
				aj.JobName = value.String
			}
		case asjob.FieldTenantCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_code", values[i])
			} else if value.Valid {
				aj.TenantCode = value.String
			}
		case asjob.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				aj.Type = value.Int64
			}
		case asjob.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				aj.Sort = value.Int64
			}
		case asjob.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				aj.IsDeleted = value.Int64
			}
		case asjob.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				aj.Status = value.Int64
			}
		case asjob.FieldCreateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_user", values[i])
			} else if value.Valid {
				aj.CreateUser = value.Int64
			}
		case asjob.FieldUpdateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_user", values[i])
			} else if value.Valid {
				aj.UpdateUser = value.Int64
			}
		case asjob.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				aj.CreateTime = date.DateTime(value.Time)
			}
		case asjob.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				aj.UpdateTime = date.DateTime(value.Time)
			}
		}
	}
	return nil
}

// QueryPersons queries the "persons" edge of the AsJob entity.
func (aj *AsJob) QueryPersons() *AsPersonQuery {
	return (&AsJobClient{config: aj.config}).QueryPersons(aj)
}

// QueryRoles queries the "roles" edge of the AsJob entity.
func (aj *AsJob) QueryRoles() *AsRoleQuery {
	return (&AsJobClient{config: aj.config}).QueryRoles(aj)
}

// QueryUsers queries the "users" edge of the AsJob entity.
func (aj *AsJob) QueryUsers() *AsUserQuery {
	return (&AsJobClient{config: aj.config}).QueryUsers(aj)
}

// QueryAgencys queries the "agencys" edge of the AsJob entity.
func (aj *AsJob) QueryAgencys() *AsInnerAgencyQuery {
	return (&AsJobClient{config: aj.config}).QueryAgencys(aj)
}

// QueryRoleDistribs queries the "roleDistribs" edge of the AsJob entity.
func (aj *AsJob) QueryRoleDistribs() *AsMarketRoleDistributionQuery {
	return (&AsJobClient{config: aj.config}).QueryRoleDistribs(aj)
}

// Update returns a builder for updating this AsJob.
// Note that you need to call AsJob.Unwrap() before calling this method if this AsJob
// was returned from a transaction, and the transaction was committed or rolled back.
func (aj *AsJob) Update() *AsJobUpdateOne {
	return (&AsJobClient{config: aj.config}).UpdateOne(aj)
}

// Unwrap unwraps the AsJob entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (aj *AsJob) Unwrap() *AsJob {
	tx, ok := aj.config.driver.(*txDriver)
	if !ok {
		panic("schema: AsJob is not a transactional entity")
	}
	aj.config.driver = tx.drv
	return aj
}

// String implements the fmt.Stringer.
func (aj *AsJob) String() string {
	var builder strings.Builder
	builder.WriteString("AsJob(")
	builder.WriteString(fmt.Sprintf("id=%v", aj.ID))
	builder.WriteString(", job_name=")
	builder.WriteString(aj.JobName)
	builder.WriteString(", tenant_code=")
	builder.WriteString(aj.TenantCode)
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", aj.Type))
	builder.WriteString(", sort=")
	builder.WriteString(fmt.Sprintf("%v", aj.Sort))
	builder.WriteString(", is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", aj.IsDeleted))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", aj.Status))
	builder.WriteString(", create_user=")
	builder.WriteString(fmt.Sprintf("%v", aj.CreateUser))
	builder.WriteString(", update_user=")
	builder.WriteString(fmt.Sprintf("%v", aj.UpdateUser))
	builder.WriteString(", create_time=")
	builder.WriteString(fmt.Sprintf("%v", aj.CreateTime))
	builder.WriteString(", update_time=")
	builder.WriteString(fmt.Sprintf("%v", aj.UpdateTime))
	builder.WriteByte(')')
	return builder.String()
}

// AsJobs is a parsable slice of AsJob.
type AsJobs []*AsJob

func (aj AsJobs) config(cfg config) {
	for _i := range aj {
		aj[_i].config = cfg
	}
}
