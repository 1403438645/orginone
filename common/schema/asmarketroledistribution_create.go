// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/asinneragency"
	"orginone/common/schema/asjob"
	"orginone/common/schema/asmarketapprole"
	"orginone/common/schema/asmarketroledistribution"
	"orginone/common/schema/asuser"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsMarketRoleDistributionCreate is the builder for creating a AsMarketRoleDistribution entity.
type AsMarketRoleDistributionCreate struct {
	config
	mutation *AsMarketRoleDistributionMutation
	hooks    []Hook
}

// SetRoleID sets the "role_id" field.
func (amrdc *AsMarketRoleDistributionCreate) SetRoleID(i int64) *AsMarketRoleDistributionCreate {
	amrdc.mutation.SetRoleID(i)
	return amrdc
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (amrdc *AsMarketRoleDistributionCreate) SetNillableRoleID(i *int64) *AsMarketRoleDistributionCreate {
	if i != nil {
		amrdc.SetRoleID(*i)
	}
	return amrdc
}

// SetUserID sets the "user_id" field.
func (amrdc *AsMarketRoleDistributionCreate) SetUserID(i int64) *AsMarketRoleDistributionCreate {
	amrdc.mutation.SetUserID(i)
	return amrdc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (amrdc *AsMarketRoleDistributionCreate) SetNillableUserID(i *int64) *AsMarketRoleDistributionCreate {
	if i != nil {
		amrdc.SetUserID(*i)
	}
	return amrdc
}

// SetAgencyID sets the "agency_id" field.
func (amrdc *AsMarketRoleDistributionCreate) SetAgencyID(i int64) *AsMarketRoleDistributionCreate {
	amrdc.mutation.SetAgencyID(i)
	return amrdc
}

// SetNillableAgencyID sets the "agency_id" field if the given value is not nil.
func (amrdc *AsMarketRoleDistributionCreate) SetNillableAgencyID(i *int64) *AsMarketRoleDistributionCreate {
	if i != nil {
		amrdc.SetAgencyID(*i)
	}
	return amrdc
}

// SetJobID sets the "job_id" field.
func (amrdc *AsMarketRoleDistributionCreate) SetJobID(i int64) *AsMarketRoleDistributionCreate {
	amrdc.mutation.SetJobID(i)
	return amrdc
}

// SetNillableJobID sets the "job_id" field if the given value is not nil.
func (amrdc *AsMarketRoleDistributionCreate) SetNillableJobID(i *int64) *AsMarketRoleDistributionCreate {
	if i != nil {
		amrdc.SetJobID(*i)
	}
	return amrdc
}

// SetTenantCode sets the "tenant_code" field.
func (amrdc *AsMarketRoleDistributionCreate) SetTenantCode(s string) *AsMarketRoleDistributionCreate {
	amrdc.mutation.SetTenantCode(s)
	return amrdc
}

// SetNillableTenantCode sets the "tenant_code" field if the given value is not nil.
func (amrdc *AsMarketRoleDistributionCreate) SetNillableTenantCode(s *string) *AsMarketRoleDistributionCreate {
	if s != nil {
		amrdc.SetTenantCode(*s)
	}
	return amrdc
}

// SetIsDeleted sets the "is_deleted" field.
func (amrdc *AsMarketRoleDistributionCreate) SetIsDeleted(i int64) *AsMarketRoleDistributionCreate {
	amrdc.mutation.SetIsDeleted(i)
	return amrdc
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (amrdc *AsMarketRoleDistributionCreate) SetNillableIsDeleted(i *int64) *AsMarketRoleDistributionCreate {
	if i != nil {
		amrdc.SetIsDeleted(*i)
	}
	return amrdc
}

// SetStatus sets the "status" field.
func (amrdc *AsMarketRoleDistributionCreate) SetStatus(i int64) *AsMarketRoleDistributionCreate {
	amrdc.mutation.SetStatus(i)
	return amrdc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (amrdc *AsMarketRoleDistributionCreate) SetNillableStatus(i *int64) *AsMarketRoleDistributionCreate {
	if i != nil {
		amrdc.SetStatus(*i)
	}
	return amrdc
}

// SetCreateUser sets the "create_user" field.
func (amrdc *AsMarketRoleDistributionCreate) SetCreateUser(i int64) *AsMarketRoleDistributionCreate {
	amrdc.mutation.SetCreateUser(i)
	return amrdc
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (amrdc *AsMarketRoleDistributionCreate) SetNillableCreateUser(i *int64) *AsMarketRoleDistributionCreate {
	if i != nil {
		amrdc.SetCreateUser(*i)
	}
	return amrdc
}

// SetUpdateUser sets the "update_user" field.
func (amrdc *AsMarketRoleDistributionCreate) SetUpdateUser(i int64) *AsMarketRoleDistributionCreate {
	amrdc.mutation.SetUpdateUser(i)
	return amrdc
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (amrdc *AsMarketRoleDistributionCreate) SetNillableUpdateUser(i *int64) *AsMarketRoleDistributionCreate {
	if i != nil {
		amrdc.SetUpdateUser(*i)
	}
	return amrdc
}

// SetCreateTime sets the "create_time" field.
func (amrdc *AsMarketRoleDistributionCreate) SetCreateTime(dt date.DateTime) *AsMarketRoleDistributionCreate {
	amrdc.mutation.SetCreateTime(dt)
	return amrdc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (amrdc *AsMarketRoleDistributionCreate) SetNillableCreateTime(dt *date.DateTime) *AsMarketRoleDistributionCreate {
	if dt != nil {
		amrdc.SetCreateTime(*dt)
	}
	return amrdc
}

// SetUpdateTime sets the "update_time" field.
func (amrdc *AsMarketRoleDistributionCreate) SetUpdateTime(dt date.DateTime) *AsMarketRoleDistributionCreate {
	amrdc.mutation.SetUpdateTime(dt)
	return amrdc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (amrdc *AsMarketRoleDistributionCreate) SetNillableUpdateTime(dt *date.DateTime) *AsMarketRoleDistributionCreate {
	if dt != nil {
		amrdc.SetUpdateTime(*dt)
	}
	return amrdc
}

// SetID sets the "id" field.
func (amrdc *AsMarketRoleDistributionCreate) SetID(i int64) *AsMarketRoleDistributionCreate {
	amrdc.mutation.SetID(i)
	return amrdc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (amrdc *AsMarketRoleDistributionCreate) SetNillableID(i *int64) *AsMarketRoleDistributionCreate {
	if i != nil {
		amrdc.SetID(*i)
	}
	return amrdc
}

// SetUserxID sets the "userx" edge to the AsUser entity by ID.
func (amrdc *AsMarketRoleDistributionCreate) SetUserxID(id int64) *AsMarketRoleDistributionCreate {
	amrdc.mutation.SetUserxID(id)
	return amrdc
}

// SetNillableUserxID sets the "userx" edge to the AsUser entity by ID if the given value is not nil.
func (amrdc *AsMarketRoleDistributionCreate) SetNillableUserxID(id *int64) *AsMarketRoleDistributionCreate {
	if id != nil {
		amrdc = amrdc.SetUserxID(*id)
	}
	return amrdc
}

// SetUserx sets the "userx" edge to the AsUser entity.
func (amrdc *AsMarketRoleDistributionCreate) SetUserx(a *AsUser) *AsMarketRoleDistributionCreate {
	return amrdc.SetUserxID(a.ID)
}

// SetAgencyxID sets the "agencyx" edge to the AsInnerAgency entity by ID.
func (amrdc *AsMarketRoleDistributionCreate) SetAgencyxID(id int64) *AsMarketRoleDistributionCreate {
	amrdc.mutation.SetAgencyxID(id)
	return amrdc
}

// SetNillableAgencyxID sets the "agencyx" edge to the AsInnerAgency entity by ID if the given value is not nil.
func (amrdc *AsMarketRoleDistributionCreate) SetNillableAgencyxID(id *int64) *AsMarketRoleDistributionCreate {
	if id != nil {
		amrdc = amrdc.SetAgencyxID(*id)
	}
	return amrdc
}

// SetAgencyx sets the "agencyx" edge to the AsInnerAgency entity.
func (amrdc *AsMarketRoleDistributionCreate) SetAgencyx(a *AsInnerAgency) *AsMarketRoleDistributionCreate {
	return amrdc.SetAgencyxID(a.ID)
}

// SetJobxID sets the "jobx" edge to the AsJob entity by ID.
func (amrdc *AsMarketRoleDistributionCreate) SetJobxID(id int64) *AsMarketRoleDistributionCreate {
	amrdc.mutation.SetJobxID(id)
	return amrdc
}

// SetNillableJobxID sets the "jobx" edge to the AsJob entity by ID if the given value is not nil.
func (amrdc *AsMarketRoleDistributionCreate) SetNillableJobxID(id *int64) *AsMarketRoleDistributionCreate {
	if id != nil {
		amrdc = amrdc.SetJobxID(*id)
	}
	return amrdc
}

// SetJobx sets the "jobx" edge to the AsJob entity.
func (amrdc *AsMarketRoleDistributionCreate) SetJobx(a *AsJob) *AsMarketRoleDistributionCreate {
	return amrdc.SetJobxID(a.ID)
}

// SetRolexID sets the "rolex" edge to the AsMarketAppRole entity by ID.
func (amrdc *AsMarketRoleDistributionCreate) SetRolexID(id int64) *AsMarketRoleDistributionCreate {
	amrdc.mutation.SetRolexID(id)
	return amrdc
}

// SetNillableRolexID sets the "rolex" edge to the AsMarketAppRole entity by ID if the given value is not nil.
func (amrdc *AsMarketRoleDistributionCreate) SetNillableRolexID(id *int64) *AsMarketRoleDistributionCreate {
	if id != nil {
		amrdc = amrdc.SetRolexID(*id)
	}
	return amrdc
}

// SetRolex sets the "rolex" edge to the AsMarketAppRole entity.
func (amrdc *AsMarketRoleDistributionCreate) SetRolex(a *AsMarketAppRole) *AsMarketRoleDistributionCreate {
	return amrdc.SetRolexID(a.ID)
}

// Mutation returns the AsMarketRoleDistributionMutation object of the builder.
func (amrdc *AsMarketRoleDistributionCreate) Mutation() *AsMarketRoleDistributionMutation {
	return amrdc.mutation
}

// Save creates the AsMarketRoleDistribution in the database.
func (amrdc *AsMarketRoleDistributionCreate) Save(ctx context.Context) (*AsMarketRoleDistribution, error) {
	var (
		err  error
		node *AsMarketRoleDistribution
	)
	amrdc.defaults()
	if len(amrdc.hooks) == 0 {
		if err = amrdc.check(); err != nil {
			return nil, err
		}
		node, err = amrdc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsMarketRoleDistributionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = amrdc.check(); err != nil {
				return nil, err
			}
			amrdc.mutation = mutation
			if node, err = amrdc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(amrdc.hooks) - 1; i >= 0; i-- {
			if amrdc.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = amrdc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, amrdc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (amrdc *AsMarketRoleDistributionCreate) SaveX(ctx context.Context) *AsMarketRoleDistribution {
	v, err := amrdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (amrdc *AsMarketRoleDistributionCreate) Exec(ctx context.Context) error {
	_, err := amrdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amrdc *AsMarketRoleDistributionCreate) ExecX(ctx context.Context) {
	if err := amrdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amrdc *AsMarketRoleDistributionCreate) defaults() {
	if _, ok := amrdc.mutation.IsDeleted(); !ok {
		v := asmarketroledistribution.DefaultIsDeleted
		amrdc.mutation.SetIsDeleted(v)
	}
	if _, ok := amrdc.mutation.Status(); !ok {
		v := asmarketroledistribution.DefaultStatus
		amrdc.mutation.SetStatus(v)
	}
	if _, ok := amrdc.mutation.CreateTime(); !ok {
		v := asmarketroledistribution.DefaultCreateTime()
		amrdc.mutation.SetCreateTime(v)
	}
	if _, ok := amrdc.mutation.UpdateTime(); !ok {
		v := asmarketroledistribution.DefaultUpdateTime()
		amrdc.mutation.SetUpdateTime(v)
	}
	if _, ok := amrdc.mutation.ID(); !ok {
		v := asmarketroledistribution.DefaultID()
		amrdc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (amrdc *AsMarketRoleDistributionCreate) check() error {
	if _, ok := amrdc.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "is_deleted", err: errors.New(`schema: missing required field "AsMarketRoleDistribution.is_deleted"`)}
	}
	return nil
}

func (amrdc *AsMarketRoleDistributionCreate) sqlSave(ctx context.Context) (*AsMarketRoleDistribution, error) {
	_node, _spec := amrdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, amrdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (amrdc *AsMarketRoleDistributionCreate) createSpec() (*AsMarketRoleDistribution, *sqlgraph.CreateSpec) {
	var (
		_node = &AsMarketRoleDistribution{config: amrdc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: asmarketroledistribution.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asmarketroledistribution.FieldID,
			},
		}
	)
	if id, ok := amrdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := amrdc.mutation.TenantCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketroledistribution.FieldTenantCode,
		})
		_node.TenantCode = value
	}
	if value, ok := amrdc.mutation.IsDeleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketroledistribution.FieldIsDeleted,
		})
		_node.IsDeleted = value
	}
	if value, ok := amrdc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketroledistribution.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := amrdc.mutation.CreateUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketroledistribution.FieldCreateUser,
		})
		_node.CreateUser = value
	}
	if value, ok := amrdc.mutation.UpdateUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketroledistribution.FieldUpdateUser,
		})
		_node.UpdateUser = value
	}
	if value, ok := amrdc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketroledistribution.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := amrdc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketroledistribution.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if nodes := amrdc.mutation.UserxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketroledistribution.UserxTable,
			Columns: []string{asmarketroledistribution.UserxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := amrdc.mutation.AgencyxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketroledistribution.AgencyxTable,
			Columns: []string{asmarketroledistribution.AgencyxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asinneragency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AgencyID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := amrdc.mutation.JobxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketroledistribution.JobxTable,
			Columns: []string{asmarketroledistribution.JobxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asjob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.JobID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := amrdc.mutation.RolexIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketroledistribution.RolexTable,
			Columns: []string{asmarketroledistribution.RolexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapprole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RoleID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AsMarketRoleDistributionCreateBulk is the builder for creating many AsMarketRoleDistribution entities in bulk.
type AsMarketRoleDistributionCreateBulk struct {
	config
	builders []*AsMarketRoleDistributionCreate
}

// Save creates the AsMarketRoleDistribution entities in the database.
func (amrdcb *AsMarketRoleDistributionCreateBulk) Save(ctx context.Context) ([]*AsMarketRoleDistribution, error) {
	specs := make([]*sqlgraph.CreateSpec, len(amrdcb.builders))
	nodes := make([]*AsMarketRoleDistribution, len(amrdcb.builders))
	mutators := make([]Mutator, len(amrdcb.builders))
	for i := range amrdcb.builders {
		func(i int, root context.Context) {
			builder := amrdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AsMarketRoleDistributionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, amrdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, amrdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, amrdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (amrdcb *AsMarketRoleDistributionCreateBulk) SaveX(ctx context.Context) []*AsMarketRoleDistribution {
	v, err := amrdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (amrdcb *AsMarketRoleDistributionCreateBulk) Exec(ctx context.Context) error {
	_, err := amrdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amrdcb *AsMarketRoleDistributionCreateBulk) ExecX(ctx context.Context) {
	if err := amrdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
