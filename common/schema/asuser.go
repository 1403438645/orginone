// Code generated by entc, DO NOT EDIT.

package schema

import (
	"fmt"
	"orginone/common/schema/asperson"
	"orginone/common/schema/asuser"
	"orginone/common/tools/date"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// AsUser is the model entity for the AsUser schema.
type AsUser struct {
	config `json:"-"`
	// ID of the ent.
	// 主键
	ID int64 `json:"id,string"`
	// TenantCode holds the value of the "tenant_code" field.
	// 租户编码
	TenantCode string `json:"tenantCode"`
	// Pwd holds the value of the "pwd" field.
	// 密码
	Pwd string `json:"-"`
	// PhoneNumber holds the value of the "phone_number" field.
	// 账号
	PhoneNumber string `json:"phoneNumber"`
	// IsAdmin holds the value of the "is_admin" field.
	// 用户是否为对应租户的超级管理员
	IsAdmin int64 `json:"isAdmin"`
	// TenantApplyingState holds the value of the "tenant_applying_state" field.
	// 与租户的隶属关系; 0-注册,新增来的,1-申请的并在审核中的,2-审核通过的已加入的)3 审核拒绝的,4-全部的 5-0和2的集合
	TenantApplyingState int64 `json:"tenantApplyingState"`
	// IsMaster holds the value of the "is_master" field.
	// 主从关系;1->主;0->从;
	IsMaster int64 `json:"isMaster"`
	// IsCreated holds the value of the "is_created" field.
	// 0-租户创建者,1-租户单位管理员,2-既是租户创建者又是单位管理员,3-都不是
	IsCreated int64 `json:"isCreated"`
	// OpenID holds the value of the "open_id" field.
	// 移动端openId
	OpenID string `json:"openId"`
	// UserName holds the value of the "user_name" field.
	// 用户名
	UserName string `json:"userName"`
	// IsDeleted holds the value of the "is_deleted" field.
	// 是否被删除
	IsDeleted int64 `json:"isDeleted"`
	// Status holds the value of the "status" field.
	// 状态
	Status int64 `json:"status"`
	// CreateUser holds the value of the "create_user" field.
	// 创建用户
	CreateUser int64 `json:"createUser"`
	// UpdateUser holds the value of the "update_user" field.
	// 更新用户
	UpdateUser int64 `json:"updateUser"`
	// CreateTime holds the value of the "create_time" field.
	// 创建时间
	CreateTime date.DateTime `json:"createTime"`
	// UpdateTime holds the value of the "update_time" field.
	// 更新时间
	UpdateTime date.DateTime `json:"updateTime"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AsUserQuery when eager-loading is set.
	Edges AsUserEdges `json:"edges"`
}

// AsUserEdges holds the relations/edges for other nodes in the graph.
type AsUserEdges struct {
	// Person holds the value of the person edge.
	Person *AsPerson `json:"person"`
	// Roles holds the value of the roles edge.
	Roles []*AsRole `json:"roles"`
	// Jobs holds the value of the jobs edge.
	Jobs []*AsJob `json:"jobs"`
	// Usedapps holds the value of the usedapps edge.
	Usedapps []*AsMarketUsedApp `json:"usedapps"`
	// WorkingDatas holds the value of the workingDatas edge.
	WorkingDatas []*AsWorkingData `json:"workingdatas"`
	// Agencys holds the value of the agencys edge.
	Agencys []*AsInnerAgency `json:"agencys"`
	// RoleDistribs holds the value of the roleDistribs edge.
	RoleDistribs []*AsMarketRoleDistribution `json:"roledistribs"`
	// AppMenusUserSorts holds the value of the appMenusUserSorts edge.
	AppMenusUserSorts []*AsMarketMenuUserSort `json:"appmenususersorts"`
	// AppUserTemplates holds the value of the appUserTemplates edge.
	AppUserTemplates []*AsMarketAppUserTemplate `json:"appusertemplates"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [9]bool
}

// PersonOrErr returns the Person value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AsUserEdges) PersonOrErr() (*AsPerson, error) {
	if e.loadedTypes[0] {
		if e.Person == nil {
			// The edge person was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: asperson.Label}
		}
		return e.Person, nil
	}
	return nil, &NotLoadedError{edge: "person"}
}

// RolesOrErr returns the Roles value or an error if the edge
// was not loaded in eager-loading.
func (e AsUserEdges) RolesOrErr() ([]*AsRole, error) {
	if e.loadedTypes[1] {
		return e.Roles, nil
	}
	return nil, &NotLoadedError{edge: "roles"}
}

// JobsOrErr returns the Jobs value or an error if the edge
// was not loaded in eager-loading.
func (e AsUserEdges) JobsOrErr() ([]*AsJob, error) {
	if e.loadedTypes[2] {
		return e.Jobs, nil
	}
	return nil, &NotLoadedError{edge: "jobs"}
}

// UsedappsOrErr returns the Usedapps value or an error if the edge
// was not loaded in eager-loading.
func (e AsUserEdges) UsedappsOrErr() ([]*AsMarketUsedApp, error) {
	if e.loadedTypes[3] {
		return e.Usedapps, nil
	}
	return nil, &NotLoadedError{edge: "usedapps"}
}

// WorkingDatasOrErr returns the WorkingDatas value or an error if the edge
// was not loaded in eager-loading.
func (e AsUserEdges) WorkingDatasOrErr() ([]*AsWorkingData, error) {
	if e.loadedTypes[4] {
		return e.WorkingDatas, nil
	}
	return nil, &NotLoadedError{edge: "workingDatas"}
}

// AgencysOrErr returns the Agencys value or an error if the edge
// was not loaded in eager-loading.
func (e AsUserEdges) AgencysOrErr() ([]*AsInnerAgency, error) {
	if e.loadedTypes[5] {
		return e.Agencys, nil
	}
	return nil, &NotLoadedError{edge: "agencys"}
}

// RoleDistribsOrErr returns the RoleDistribs value or an error if the edge
// was not loaded in eager-loading.
func (e AsUserEdges) RoleDistribsOrErr() ([]*AsMarketRoleDistribution, error) {
	if e.loadedTypes[6] {
		return e.RoleDistribs, nil
	}
	return nil, &NotLoadedError{edge: "roleDistribs"}
}

// AppMenusUserSortsOrErr returns the AppMenusUserSorts value or an error if the edge
// was not loaded in eager-loading.
func (e AsUserEdges) AppMenusUserSortsOrErr() ([]*AsMarketMenuUserSort, error) {
	if e.loadedTypes[7] {
		return e.AppMenusUserSorts, nil
	}
	return nil, &NotLoadedError{edge: "appMenusUserSorts"}
}

// AppUserTemplatesOrErr returns the AppUserTemplates value or an error if the edge
// was not loaded in eager-loading.
func (e AsUserEdges) AppUserTemplatesOrErr() ([]*AsMarketAppUserTemplate, error) {
	if e.loadedTypes[8] {
		return e.AppUserTemplates, nil
	}
	return nil, &NotLoadedError{edge: "appUserTemplates"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AsUser) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case asuser.FieldID, asuser.FieldIsAdmin, asuser.FieldTenantApplyingState, asuser.FieldIsMaster, asuser.FieldIsCreated, asuser.FieldIsDeleted, asuser.FieldStatus, asuser.FieldCreateUser, asuser.FieldUpdateUser:
			values[i] = new(sql.NullInt64)
		case asuser.FieldTenantCode, asuser.FieldPwd, asuser.FieldPhoneNumber, asuser.FieldOpenID, asuser.FieldUserName:
			values[i] = new(sql.NullString)
		case asuser.FieldCreateTime, asuser.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AsUser", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AsUser fields.
func (au *AsUser) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case asuser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			au.ID = int64(value.Int64)
		case asuser.FieldTenantCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_code", values[i])
			} else if value.Valid {
				au.TenantCode = value.String
			}
		case asuser.FieldPwd:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pwd", values[i])
			} else if value.Valid {
				au.Pwd = value.String
			}
		case asuser.FieldPhoneNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone_number", values[i])
			} else if value.Valid {
				au.PhoneNumber = value.String
			}
		case asuser.FieldIsAdmin:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_admin", values[i])
			} else if value.Valid {
				au.IsAdmin = value.Int64
			}
		case asuser.FieldTenantApplyingState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_applying_state", values[i])
			} else if value.Valid {
				au.TenantApplyingState = value.Int64
			}
		case asuser.FieldIsMaster:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_master", values[i])
			} else if value.Valid {
				au.IsMaster = value.Int64
			}
		case asuser.FieldIsCreated:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_created", values[i])
			} else if value.Valid {
				au.IsCreated = value.Int64
			}
		case asuser.FieldOpenID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field open_id", values[i])
			} else if value.Valid {
				au.OpenID = value.String
			}
		case asuser.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_name", values[i])
			} else if value.Valid {
				au.UserName = value.String
			}
		case asuser.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				au.IsDeleted = value.Int64
			}
		case asuser.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				au.Status = value.Int64
			}
		case asuser.FieldCreateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_user", values[i])
			} else if value.Valid {
				au.CreateUser = value.Int64
			}
		case asuser.FieldUpdateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_user", values[i])
			} else if value.Valid {
				au.UpdateUser = value.Int64
			}
		case asuser.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				au.CreateTime = date.DateTime(value.Time)
			}
		case asuser.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				au.UpdateTime = date.DateTime(value.Time)
			}
		}
	}
	return nil
}

// QueryPerson queries the "person" edge of the AsUser entity.
func (au *AsUser) QueryPerson() *AsPersonQuery {
	return (&AsUserClient{config: au.config}).QueryPerson(au)
}

// QueryRoles queries the "roles" edge of the AsUser entity.
func (au *AsUser) QueryRoles() *AsRoleQuery {
	return (&AsUserClient{config: au.config}).QueryRoles(au)
}

// QueryJobs queries the "jobs" edge of the AsUser entity.
func (au *AsUser) QueryJobs() *AsJobQuery {
	return (&AsUserClient{config: au.config}).QueryJobs(au)
}

// QueryUsedapps queries the "usedapps" edge of the AsUser entity.
func (au *AsUser) QueryUsedapps() *AsMarketUsedAppQuery {
	return (&AsUserClient{config: au.config}).QueryUsedapps(au)
}

// QueryWorkingDatas queries the "workingDatas" edge of the AsUser entity.
func (au *AsUser) QueryWorkingDatas() *AsWorkingDataQuery {
	return (&AsUserClient{config: au.config}).QueryWorkingDatas(au)
}

// QueryAgencys queries the "agencys" edge of the AsUser entity.
func (au *AsUser) QueryAgencys() *AsInnerAgencyQuery {
	return (&AsUserClient{config: au.config}).QueryAgencys(au)
}

// QueryRoleDistribs queries the "roleDistribs" edge of the AsUser entity.
func (au *AsUser) QueryRoleDistribs() *AsMarketRoleDistributionQuery {
	return (&AsUserClient{config: au.config}).QueryRoleDistribs(au)
}

// QueryAppMenusUserSorts queries the "appMenusUserSorts" edge of the AsUser entity.
func (au *AsUser) QueryAppMenusUserSorts() *AsMarketMenuUserSortQuery {
	return (&AsUserClient{config: au.config}).QueryAppMenusUserSorts(au)
}

// QueryAppUserTemplates queries the "appUserTemplates" edge of the AsUser entity.
func (au *AsUser) QueryAppUserTemplates() *AsMarketAppUserTemplateQuery {
	return (&AsUserClient{config: au.config}).QueryAppUserTemplates(au)
}

// Update returns a builder for updating this AsUser.
// Note that you need to call AsUser.Unwrap() before calling this method if this AsUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (au *AsUser) Update() *AsUserUpdateOne {
	return (&AsUserClient{config: au.config}).UpdateOne(au)
}

// Unwrap unwraps the AsUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (au *AsUser) Unwrap() *AsUser {
	tx, ok := au.config.driver.(*txDriver)
	if !ok {
		panic("schema: AsUser is not a transactional entity")
	}
	au.config.driver = tx.drv
	return au
}

// String implements the fmt.Stringer.
func (au *AsUser) String() string {
	var builder strings.Builder
	builder.WriteString("AsUser(")
	builder.WriteString(fmt.Sprintf("id=%v", au.ID))
	builder.WriteString(", tenant_code=")
	builder.WriteString(au.TenantCode)
	builder.WriteString(", pwd=<sensitive>")
	builder.WriteString(", phone_number=")
	builder.WriteString(au.PhoneNumber)
	builder.WriteString(", is_admin=")
	builder.WriteString(fmt.Sprintf("%v", au.IsAdmin))
	builder.WriteString(", tenant_applying_state=")
	builder.WriteString(fmt.Sprintf("%v", au.TenantApplyingState))
	builder.WriteString(", is_master=")
	builder.WriteString(fmt.Sprintf("%v", au.IsMaster))
	builder.WriteString(", is_created=")
	builder.WriteString(fmt.Sprintf("%v", au.IsCreated))
	builder.WriteString(", open_id=")
	builder.WriteString(au.OpenID)
	builder.WriteString(", user_name=")
	builder.WriteString(au.UserName)
	builder.WriteString(", is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", au.IsDeleted))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", au.Status))
	builder.WriteString(", create_user=")
	builder.WriteString(fmt.Sprintf("%v", au.CreateUser))
	builder.WriteString(", update_user=")
	builder.WriteString(fmt.Sprintf("%v", au.UpdateUser))
	builder.WriteString(", create_time=")
	builder.WriteString(fmt.Sprintf("%v", au.CreateTime))
	builder.WriteString(", update_time=")
	builder.WriteString(fmt.Sprintf("%v", au.UpdateTime))
	builder.WriteByte(')')
	return builder.String()
}

// AsUsers is a parsable slice of AsUser.
type AsUsers []*AsUser

func (au AsUsers) config(cfg config) {
	for _i := range au {
		au[_i].config = cfg
	}
}
