// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/asmarketappnotice"
	"orginone/common/schema/predicate"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsMarketAppNoticeUpdate is the builder for updating AsMarketAppNotice entities.
type AsMarketAppNoticeUpdate struct {
	config
	hooks    []Hook
	mutation *AsMarketAppNoticeMutation
}

// Where appends a list predicates to the AsMarketAppNoticeUpdate builder.
func (amanu *AsMarketAppNoticeUpdate) Where(ps ...predicate.AsMarketAppNotice) *AsMarketAppNoticeUpdate {
	amanu.mutation.Where(ps...)
	return amanu
}

// SetNoticeTitle sets the "notice_title" field.
func (amanu *AsMarketAppNoticeUpdate) SetNoticeTitle(s string) *AsMarketAppNoticeUpdate {
	amanu.mutation.SetNoticeTitle(s)
	return amanu
}

// SetNillableNoticeTitle sets the "notice_title" field if the given value is not nil.
func (amanu *AsMarketAppNoticeUpdate) SetNillableNoticeTitle(s *string) *AsMarketAppNoticeUpdate {
	if s != nil {
		amanu.SetNoticeTitle(*s)
	}
	return amanu
}

// ClearNoticeTitle clears the value of the "notice_title" field.
func (amanu *AsMarketAppNoticeUpdate) ClearNoticeTitle() *AsMarketAppNoticeUpdate {
	amanu.mutation.ClearNoticeTitle()
	return amanu
}

// SetNoticeContent sets the "notice_content" field.
func (amanu *AsMarketAppNoticeUpdate) SetNoticeContent(s string) *AsMarketAppNoticeUpdate {
	amanu.mutation.SetNoticeContent(s)
	return amanu
}

// SetNillableNoticeContent sets the "notice_content" field if the given value is not nil.
func (amanu *AsMarketAppNoticeUpdate) SetNillableNoticeContent(s *string) *AsMarketAppNoticeUpdate {
	if s != nil {
		amanu.SetNoticeContent(*s)
	}
	return amanu
}

// ClearNoticeContent clears the value of the "notice_content" field.
func (amanu *AsMarketAppNoticeUpdate) ClearNoticeContent() *AsMarketAppNoticeUpdate {
	amanu.mutation.ClearNoticeContent()
	return amanu
}

// SetNoticeReleaseUnitID sets the "notice_release_unit_id" field.
func (amanu *AsMarketAppNoticeUpdate) SetNoticeReleaseUnitID(i int64) *AsMarketAppNoticeUpdate {
	amanu.mutation.ResetNoticeReleaseUnitID()
	amanu.mutation.SetNoticeReleaseUnitID(i)
	return amanu
}

// SetNillableNoticeReleaseUnitID sets the "notice_release_unit_id" field if the given value is not nil.
func (amanu *AsMarketAppNoticeUpdate) SetNillableNoticeReleaseUnitID(i *int64) *AsMarketAppNoticeUpdate {
	if i != nil {
		amanu.SetNoticeReleaseUnitID(*i)
	}
	return amanu
}

// AddNoticeReleaseUnitID adds i to the "notice_release_unit_id" field.
func (amanu *AsMarketAppNoticeUpdate) AddNoticeReleaseUnitID(i int64) *AsMarketAppNoticeUpdate {
	amanu.mutation.AddNoticeReleaseUnitID(i)
	return amanu
}

// ClearNoticeReleaseUnitID clears the value of the "notice_release_unit_id" field.
func (amanu *AsMarketAppNoticeUpdate) ClearNoticeReleaseUnitID() *AsMarketAppNoticeUpdate {
	amanu.mutation.ClearNoticeReleaseUnitID()
	return amanu
}

// SetNoticeReleaseStatus sets the "notice_release_status" field.
func (amanu *AsMarketAppNoticeUpdate) SetNoticeReleaseStatus(i int64) *AsMarketAppNoticeUpdate {
	amanu.mutation.ResetNoticeReleaseStatus()
	amanu.mutation.SetNoticeReleaseStatus(i)
	return amanu
}

// AddNoticeReleaseStatus adds i to the "notice_release_status" field.
func (amanu *AsMarketAppNoticeUpdate) AddNoticeReleaseStatus(i int64) *AsMarketAppNoticeUpdate {
	amanu.mutation.AddNoticeReleaseStatus(i)
	return amanu
}

// SetNoticeReleaseTime sets the "notice_release_time" field.
func (amanu *AsMarketAppNoticeUpdate) SetNoticeReleaseTime(dt date.DateTime) *AsMarketAppNoticeUpdate {
	amanu.mutation.SetNoticeReleaseTime(dt)
	return amanu
}

// SetNillableNoticeReleaseTime sets the "notice_release_time" field if the given value is not nil.
func (amanu *AsMarketAppNoticeUpdate) SetNillableNoticeReleaseTime(dt *date.DateTime) *AsMarketAppNoticeUpdate {
	if dt != nil {
		amanu.SetNoticeReleaseTime(*dt)
	}
	return amanu
}

// ClearNoticeReleaseTime clears the value of the "notice_release_time" field.
func (amanu *AsMarketAppNoticeUpdate) ClearNoticeReleaseTime() *AsMarketAppNoticeUpdate {
	amanu.mutation.ClearNoticeReleaseTime()
	return amanu
}

// SetNoticeRoleIds sets the "notice_role_ids" field.
func (amanu *AsMarketAppNoticeUpdate) SetNoticeRoleIds(s string) *AsMarketAppNoticeUpdate {
	amanu.mutation.SetNoticeRoleIds(s)
	return amanu
}

// SetNillableNoticeRoleIds sets the "notice_role_ids" field if the given value is not nil.
func (amanu *AsMarketAppNoticeUpdate) SetNillableNoticeRoleIds(s *string) *AsMarketAppNoticeUpdate {
	if s != nil {
		amanu.SetNoticeRoleIds(*s)
	}
	return amanu
}

// ClearNoticeRoleIds clears the value of the "notice_role_ids" field.
func (amanu *AsMarketAppNoticeUpdate) ClearNoticeRoleIds() *AsMarketAppNoticeUpdate {
	amanu.mutation.ClearNoticeRoleIds()
	return amanu
}

// SetNoticeUnitIds sets the "notice_unit_ids" field.
func (amanu *AsMarketAppNoticeUpdate) SetNoticeUnitIds(s string) *AsMarketAppNoticeUpdate {
	amanu.mutation.SetNoticeUnitIds(s)
	return amanu
}

// SetNillableNoticeUnitIds sets the "notice_unit_ids" field if the given value is not nil.
func (amanu *AsMarketAppNoticeUpdate) SetNillableNoticeUnitIds(s *string) *AsMarketAppNoticeUpdate {
	if s != nil {
		amanu.SetNoticeUnitIds(*s)
	}
	return amanu
}

// ClearNoticeUnitIds clears the value of the "notice_unit_ids" field.
func (amanu *AsMarketAppNoticeUpdate) ClearNoticeUnitIds() *AsMarketAppNoticeUpdate {
	amanu.mutation.ClearNoticeUnitIds()
	return amanu
}

// SetGroupOrUnit sets the "group_or_unit" field.
func (amanu *AsMarketAppNoticeUpdate) SetGroupOrUnit(i int64) *AsMarketAppNoticeUpdate {
	amanu.mutation.ResetGroupOrUnit()
	amanu.mutation.SetGroupOrUnit(i)
	return amanu
}

// SetNillableGroupOrUnit sets the "group_or_unit" field if the given value is not nil.
func (amanu *AsMarketAppNoticeUpdate) SetNillableGroupOrUnit(i *int64) *AsMarketAppNoticeUpdate {
	if i != nil {
		amanu.SetGroupOrUnit(*i)
	}
	return amanu
}

// AddGroupOrUnit adds i to the "group_or_unit" field.
func (amanu *AsMarketAppNoticeUpdate) AddGroupOrUnit(i int64) *AsMarketAppNoticeUpdate {
	amanu.mutation.AddGroupOrUnit(i)
	return amanu
}

// ClearGroupOrUnit clears the value of the "group_or_unit" field.
func (amanu *AsMarketAppNoticeUpdate) ClearGroupOrUnit() *AsMarketAppNoticeUpdate {
	amanu.mutation.ClearGroupOrUnit()
	return amanu
}

// SetUnitQueryIds sets the "unit_query_ids" field.
func (amanu *AsMarketAppNoticeUpdate) SetUnitQueryIds(s string) *AsMarketAppNoticeUpdate {
	amanu.mutation.SetUnitQueryIds(s)
	return amanu
}

// SetNillableUnitQueryIds sets the "unit_query_ids" field if the given value is not nil.
func (amanu *AsMarketAppNoticeUpdate) SetNillableUnitQueryIds(s *string) *AsMarketAppNoticeUpdate {
	if s != nil {
		amanu.SetUnitQueryIds(*s)
	}
	return amanu
}

// ClearUnitQueryIds clears the value of the "unit_query_ids" field.
func (amanu *AsMarketAppNoticeUpdate) ClearUnitQueryIds() *AsMarketAppNoticeUpdate {
	amanu.mutation.ClearUnitQueryIds()
	return amanu
}

// SetIsDeleted sets the "is_deleted" field.
func (amanu *AsMarketAppNoticeUpdate) SetIsDeleted(i int64) *AsMarketAppNoticeUpdate {
	amanu.mutation.ResetIsDeleted()
	amanu.mutation.SetIsDeleted(i)
	return amanu
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (amanu *AsMarketAppNoticeUpdate) SetNillableIsDeleted(i *int64) *AsMarketAppNoticeUpdate {
	if i != nil {
		amanu.SetIsDeleted(*i)
	}
	return amanu
}

// AddIsDeleted adds i to the "is_deleted" field.
func (amanu *AsMarketAppNoticeUpdate) AddIsDeleted(i int64) *AsMarketAppNoticeUpdate {
	amanu.mutation.AddIsDeleted(i)
	return amanu
}

// SetStatus sets the "status" field.
func (amanu *AsMarketAppNoticeUpdate) SetStatus(i int64) *AsMarketAppNoticeUpdate {
	amanu.mutation.ResetStatus()
	amanu.mutation.SetStatus(i)
	return amanu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (amanu *AsMarketAppNoticeUpdate) SetNillableStatus(i *int64) *AsMarketAppNoticeUpdate {
	if i != nil {
		amanu.SetStatus(*i)
	}
	return amanu
}

// AddStatus adds i to the "status" field.
func (amanu *AsMarketAppNoticeUpdate) AddStatus(i int64) *AsMarketAppNoticeUpdate {
	amanu.mutation.AddStatus(i)
	return amanu
}

// ClearStatus clears the value of the "status" field.
func (amanu *AsMarketAppNoticeUpdate) ClearStatus() *AsMarketAppNoticeUpdate {
	amanu.mutation.ClearStatus()
	return amanu
}

// SetCreateUser sets the "create_user" field.
func (amanu *AsMarketAppNoticeUpdate) SetCreateUser(i int64) *AsMarketAppNoticeUpdate {
	amanu.mutation.ResetCreateUser()
	amanu.mutation.SetCreateUser(i)
	return amanu
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (amanu *AsMarketAppNoticeUpdate) SetNillableCreateUser(i *int64) *AsMarketAppNoticeUpdate {
	if i != nil {
		amanu.SetCreateUser(*i)
	}
	return amanu
}

// AddCreateUser adds i to the "create_user" field.
func (amanu *AsMarketAppNoticeUpdate) AddCreateUser(i int64) *AsMarketAppNoticeUpdate {
	amanu.mutation.AddCreateUser(i)
	return amanu
}

// ClearCreateUser clears the value of the "create_user" field.
func (amanu *AsMarketAppNoticeUpdate) ClearCreateUser() *AsMarketAppNoticeUpdate {
	amanu.mutation.ClearCreateUser()
	return amanu
}

// SetUpdateUser sets the "update_user" field.
func (amanu *AsMarketAppNoticeUpdate) SetUpdateUser(i int64) *AsMarketAppNoticeUpdate {
	amanu.mutation.ResetUpdateUser()
	amanu.mutation.SetUpdateUser(i)
	return amanu
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (amanu *AsMarketAppNoticeUpdate) SetNillableUpdateUser(i *int64) *AsMarketAppNoticeUpdate {
	if i != nil {
		amanu.SetUpdateUser(*i)
	}
	return amanu
}

// AddUpdateUser adds i to the "update_user" field.
func (amanu *AsMarketAppNoticeUpdate) AddUpdateUser(i int64) *AsMarketAppNoticeUpdate {
	amanu.mutation.AddUpdateUser(i)
	return amanu
}

// ClearUpdateUser clears the value of the "update_user" field.
func (amanu *AsMarketAppNoticeUpdate) ClearUpdateUser() *AsMarketAppNoticeUpdate {
	amanu.mutation.ClearUpdateUser()
	return amanu
}

// SetUpdateTime sets the "update_time" field.
func (amanu *AsMarketAppNoticeUpdate) SetUpdateTime(dt date.DateTime) *AsMarketAppNoticeUpdate {
	amanu.mutation.SetUpdateTime(dt)
	return amanu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (amanu *AsMarketAppNoticeUpdate) ClearUpdateTime() *AsMarketAppNoticeUpdate {
	amanu.mutation.ClearUpdateTime()
	return amanu
}

// Mutation returns the AsMarketAppNoticeMutation object of the builder.
func (amanu *AsMarketAppNoticeUpdate) Mutation() *AsMarketAppNoticeMutation {
	return amanu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (amanu *AsMarketAppNoticeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	amanu.defaults()
	if len(amanu.hooks) == 0 {
		affected, err = amanu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsMarketAppNoticeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			amanu.mutation = mutation
			affected, err = amanu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(amanu.hooks) - 1; i >= 0; i-- {
			if amanu.hooks[i] == nil {
				return 0, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = amanu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, amanu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (amanu *AsMarketAppNoticeUpdate) SaveX(ctx context.Context) int {
	affected, err := amanu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (amanu *AsMarketAppNoticeUpdate) Exec(ctx context.Context) error {
	_, err := amanu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amanu *AsMarketAppNoticeUpdate) ExecX(ctx context.Context) {
	if err := amanu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amanu *AsMarketAppNoticeUpdate) defaults() {
	if _, ok := amanu.mutation.UpdateTime(); !ok && !amanu.mutation.UpdateTimeCleared() {
		v := asmarketappnotice.UpdateDefaultUpdateTime()
		amanu.mutation.SetUpdateTime(v)
	}
}

func (amanu *AsMarketAppNoticeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asmarketappnotice.Table,
			Columns: asmarketappnotice.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asmarketappnotice.FieldID,
			},
		},
	}
	if ps := amanu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amanu.mutation.NoticeTitle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappnotice.FieldNoticeTitle,
		})
	}
	if amanu.mutation.NoticeTitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappnotice.FieldNoticeTitle,
		})
	}
	if value, ok := amanu.mutation.NoticeContent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappnotice.FieldNoticeContent,
		})
	}
	if amanu.mutation.NoticeContentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappnotice.FieldNoticeContent,
		})
	}
	if value, ok := amanu.mutation.NoticeReleaseUnitID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappnotice.FieldNoticeReleaseUnitID,
		})
	}
	if value, ok := amanu.mutation.AddedNoticeReleaseUnitID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappnotice.FieldNoticeReleaseUnitID,
		})
	}
	if amanu.mutation.NoticeReleaseUnitIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappnotice.FieldNoticeReleaseUnitID,
		})
	}
	if value, ok := amanu.mutation.NoticeReleaseStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappnotice.FieldNoticeReleaseStatus,
		})
	}
	if value, ok := amanu.mutation.AddedNoticeReleaseStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappnotice.FieldNoticeReleaseStatus,
		})
	}
	if value, ok := amanu.mutation.NoticeReleaseTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketappnotice.FieldNoticeReleaseTime,
		})
	}
	if amanu.mutation.NoticeReleaseTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketappnotice.FieldNoticeReleaseTime,
		})
	}
	if value, ok := amanu.mutation.NoticeRoleIds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappnotice.FieldNoticeRoleIds,
		})
	}
	if amanu.mutation.NoticeRoleIdsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappnotice.FieldNoticeRoleIds,
		})
	}
	if value, ok := amanu.mutation.NoticeUnitIds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappnotice.FieldNoticeUnitIds,
		})
	}
	if amanu.mutation.NoticeUnitIdsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappnotice.FieldNoticeUnitIds,
		})
	}
	if value, ok := amanu.mutation.GroupOrUnit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappnotice.FieldGroupOrUnit,
		})
	}
	if value, ok := amanu.mutation.AddedGroupOrUnit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappnotice.FieldGroupOrUnit,
		})
	}
	if amanu.mutation.GroupOrUnitCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappnotice.FieldGroupOrUnit,
		})
	}
	if value, ok := amanu.mutation.UnitQueryIds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappnotice.FieldUnitQueryIds,
		})
	}
	if amanu.mutation.UnitQueryIdsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappnotice.FieldUnitQueryIds,
		})
	}
	if value, ok := amanu.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappnotice.FieldIsDeleted,
		})
	}
	if value, ok := amanu.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappnotice.FieldIsDeleted,
		})
	}
	if value, ok := amanu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappnotice.FieldStatus,
		})
	}
	if value, ok := amanu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappnotice.FieldStatus,
		})
	}
	if amanu.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappnotice.FieldStatus,
		})
	}
	if value, ok := amanu.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappnotice.FieldCreateUser,
		})
	}
	if value, ok := amanu.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappnotice.FieldCreateUser,
		})
	}
	if amanu.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappnotice.FieldCreateUser,
		})
	}
	if value, ok := amanu.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappnotice.FieldUpdateUser,
		})
	}
	if value, ok := amanu.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappnotice.FieldUpdateUser,
		})
	}
	if amanu.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappnotice.FieldUpdateUser,
		})
	}
	if amanu.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketappnotice.FieldCreateTime,
		})
	}
	if value, ok := amanu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketappnotice.FieldUpdateTime,
		})
	}
	if amanu.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketappnotice.FieldUpdateTime,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, amanu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asmarketappnotice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AsMarketAppNoticeUpdateOne is the builder for updating a single AsMarketAppNotice entity.
type AsMarketAppNoticeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AsMarketAppNoticeMutation
}

// SetNoticeTitle sets the "notice_title" field.
func (amanuo *AsMarketAppNoticeUpdateOne) SetNoticeTitle(s string) *AsMarketAppNoticeUpdateOne {
	amanuo.mutation.SetNoticeTitle(s)
	return amanuo
}

// SetNillableNoticeTitle sets the "notice_title" field if the given value is not nil.
func (amanuo *AsMarketAppNoticeUpdateOne) SetNillableNoticeTitle(s *string) *AsMarketAppNoticeUpdateOne {
	if s != nil {
		amanuo.SetNoticeTitle(*s)
	}
	return amanuo
}

// ClearNoticeTitle clears the value of the "notice_title" field.
func (amanuo *AsMarketAppNoticeUpdateOne) ClearNoticeTitle() *AsMarketAppNoticeUpdateOne {
	amanuo.mutation.ClearNoticeTitle()
	return amanuo
}

// SetNoticeContent sets the "notice_content" field.
func (amanuo *AsMarketAppNoticeUpdateOne) SetNoticeContent(s string) *AsMarketAppNoticeUpdateOne {
	amanuo.mutation.SetNoticeContent(s)
	return amanuo
}

// SetNillableNoticeContent sets the "notice_content" field if the given value is not nil.
func (amanuo *AsMarketAppNoticeUpdateOne) SetNillableNoticeContent(s *string) *AsMarketAppNoticeUpdateOne {
	if s != nil {
		amanuo.SetNoticeContent(*s)
	}
	return amanuo
}

// ClearNoticeContent clears the value of the "notice_content" field.
func (amanuo *AsMarketAppNoticeUpdateOne) ClearNoticeContent() *AsMarketAppNoticeUpdateOne {
	amanuo.mutation.ClearNoticeContent()
	return amanuo
}

// SetNoticeReleaseUnitID sets the "notice_release_unit_id" field.
func (amanuo *AsMarketAppNoticeUpdateOne) SetNoticeReleaseUnitID(i int64) *AsMarketAppNoticeUpdateOne {
	amanuo.mutation.ResetNoticeReleaseUnitID()
	amanuo.mutation.SetNoticeReleaseUnitID(i)
	return amanuo
}

// SetNillableNoticeReleaseUnitID sets the "notice_release_unit_id" field if the given value is not nil.
func (amanuo *AsMarketAppNoticeUpdateOne) SetNillableNoticeReleaseUnitID(i *int64) *AsMarketAppNoticeUpdateOne {
	if i != nil {
		amanuo.SetNoticeReleaseUnitID(*i)
	}
	return amanuo
}

// AddNoticeReleaseUnitID adds i to the "notice_release_unit_id" field.
func (amanuo *AsMarketAppNoticeUpdateOne) AddNoticeReleaseUnitID(i int64) *AsMarketAppNoticeUpdateOne {
	amanuo.mutation.AddNoticeReleaseUnitID(i)
	return amanuo
}

// ClearNoticeReleaseUnitID clears the value of the "notice_release_unit_id" field.
func (amanuo *AsMarketAppNoticeUpdateOne) ClearNoticeReleaseUnitID() *AsMarketAppNoticeUpdateOne {
	amanuo.mutation.ClearNoticeReleaseUnitID()
	return amanuo
}

// SetNoticeReleaseStatus sets the "notice_release_status" field.
func (amanuo *AsMarketAppNoticeUpdateOne) SetNoticeReleaseStatus(i int64) *AsMarketAppNoticeUpdateOne {
	amanuo.mutation.ResetNoticeReleaseStatus()
	amanuo.mutation.SetNoticeReleaseStatus(i)
	return amanuo
}

// AddNoticeReleaseStatus adds i to the "notice_release_status" field.
func (amanuo *AsMarketAppNoticeUpdateOne) AddNoticeReleaseStatus(i int64) *AsMarketAppNoticeUpdateOne {
	amanuo.mutation.AddNoticeReleaseStatus(i)
	return amanuo
}

// SetNoticeReleaseTime sets the "notice_release_time" field.
func (amanuo *AsMarketAppNoticeUpdateOne) SetNoticeReleaseTime(dt date.DateTime) *AsMarketAppNoticeUpdateOne {
	amanuo.mutation.SetNoticeReleaseTime(dt)
	return amanuo
}

// SetNillableNoticeReleaseTime sets the "notice_release_time" field if the given value is not nil.
func (amanuo *AsMarketAppNoticeUpdateOne) SetNillableNoticeReleaseTime(dt *date.DateTime) *AsMarketAppNoticeUpdateOne {
	if dt != nil {
		amanuo.SetNoticeReleaseTime(*dt)
	}
	return amanuo
}

// ClearNoticeReleaseTime clears the value of the "notice_release_time" field.
func (amanuo *AsMarketAppNoticeUpdateOne) ClearNoticeReleaseTime() *AsMarketAppNoticeUpdateOne {
	amanuo.mutation.ClearNoticeReleaseTime()
	return amanuo
}

// SetNoticeRoleIds sets the "notice_role_ids" field.
func (amanuo *AsMarketAppNoticeUpdateOne) SetNoticeRoleIds(s string) *AsMarketAppNoticeUpdateOne {
	amanuo.mutation.SetNoticeRoleIds(s)
	return amanuo
}

// SetNillableNoticeRoleIds sets the "notice_role_ids" field if the given value is not nil.
func (amanuo *AsMarketAppNoticeUpdateOne) SetNillableNoticeRoleIds(s *string) *AsMarketAppNoticeUpdateOne {
	if s != nil {
		amanuo.SetNoticeRoleIds(*s)
	}
	return amanuo
}

// ClearNoticeRoleIds clears the value of the "notice_role_ids" field.
func (amanuo *AsMarketAppNoticeUpdateOne) ClearNoticeRoleIds() *AsMarketAppNoticeUpdateOne {
	amanuo.mutation.ClearNoticeRoleIds()
	return amanuo
}

// SetNoticeUnitIds sets the "notice_unit_ids" field.
func (amanuo *AsMarketAppNoticeUpdateOne) SetNoticeUnitIds(s string) *AsMarketAppNoticeUpdateOne {
	amanuo.mutation.SetNoticeUnitIds(s)
	return amanuo
}

// SetNillableNoticeUnitIds sets the "notice_unit_ids" field if the given value is not nil.
func (amanuo *AsMarketAppNoticeUpdateOne) SetNillableNoticeUnitIds(s *string) *AsMarketAppNoticeUpdateOne {
	if s != nil {
		amanuo.SetNoticeUnitIds(*s)
	}
	return amanuo
}

// ClearNoticeUnitIds clears the value of the "notice_unit_ids" field.
func (amanuo *AsMarketAppNoticeUpdateOne) ClearNoticeUnitIds() *AsMarketAppNoticeUpdateOne {
	amanuo.mutation.ClearNoticeUnitIds()
	return amanuo
}

// SetGroupOrUnit sets the "group_or_unit" field.
func (amanuo *AsMarketAppNoticeUpdateOne) SetGroupOrUnit(i int64) *AsMarketAppNoticeUpdateOne {
	amanuo.mutation.ResetGroupOrUnit()
	amanuo.mutation.SetGroupOrUnit(i)
	return amanuo
}

// SetNillableGroupOrUnit sets the "group_or_unit" field if the given value is not nil.
func (amanuo *AsMarketAppNoticeUpdateOne) SetNillableGroupOrUnit(i *int64) *AsMarketAppNoticeUpdateOne {
	if i != nil {
		amanuo.SetGroupOrUnit(*i)
	}
	return amanuo
}

// AddGroupOrUnit adds i to the "group_or_unit" field.
func (amanuo *AsMarketAppNoticeUpdateOne) AddGroupOrUnit(i int64) *AsMarketAppNoticeUpdateOne {
	amanuo.mutation.AddGroupOrUnit(i)
	return amanuo
}

// ClearGroupOrUnit clears the value of the "group_or_unit" field.
func (amanuo *AsMarketAppNoticeUpdateOne) ClearGroupOrUnit() *AsMarketAppNoticeUpdateOne {
	amanuo.mutation.ClearGroupOrUnit()
	return amanuo
}

// SetUnitQueryIds sets the "unit_query_ids" field.
func (amanuo *AsMarketAppNoticeUpdateOne) SetUnitQueryIds(s string) *AsMarketAppNoticeUpdateOne {
	amanuo.mutation.SetUnitQueryIds(s)
	return amanuo
}

// SetNillableUnitQueryIds sets the "unit_query_ids" field if the given value is not nil.
func (amanuo *AsMarketAppNoticeUpdateOne) SetNillableUnitQueryIds(s *string) *AsMarketAppNoticeUpdateOne {
	if s != nil {
		amanuo.SetUnitQueryIds(*s)
	}
	return amanuo
}

// ClearUnitQueryIds clears the value of the "unit_query_ids" field.
func (amanuo *AsMarketAppNoticeUpdateOne) ClearUnitQueryIds() *AsMarketAppNoticeUpdateOne {
	amanuo.mutation.ClearUnitQueryIds()
	return amanuo
}

// SetIsDeleted sets the "is_deleted" field.
func (amanuo *AsMarketAppNoticeUpdateOne) SetIsDeleted(i int64) *AsMarketAppNoticeUpdateOne {
	amanuo.mutation.ResetIsDeleted()
	amanuo.mutation.SetIsDeleted(i)
	return amanuo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (amanuo *AsMarketAppNoticeUpdateOne) SetNillableIsDeleted(i *int64) *AsMarketAppNoticeUpdateOne {
	if i != nil {
		amanuo.SetIsDeleted(*i)
	}
	return amanuo
}

// AddIsDeleted adds i to the "is_deleted" field.
func (amanuo *AsMarketAppNoticeUpdateOne) AddIsDeleted(i int64) *AsMarketAppNoticeUpdateOne {
	amanuo.mutation.AddIsDeleted(i)
	return amanuo
}

// SetStatus sets the "status" field.
func (amanuo *AsMarketAppNoticeUpdateOne) SetStatus(i int64) *AsMarketAppNoticeUpdateOne {
	amanuo.mutation.ResetStatus()
	amanuo.mutation.SetStatus(i)
	return amanuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (amanuo *AsMarketAppNoticeUpdateOne) SetNillableStatus(i *int64) *AsMarketAppNoticeUpdateOne {
	if i != nil {
		amanuo.SetStatus(*i)
	}
	return amanuo
}

// AddStatus adds i to the "status" field.
func (amanuo *AsMarketAppNoticeUpdateOne) AddStatus(i int64) *AsMarketAppNoticeUpdateOne {
	amanuo.mutation.AddStatus(i)
	return amanuo
}

// ClearStatus clears the value of the "status" field.
func (amanuo *AsMarketAppNoticeUpdateOne) ClearStatus() *AsMarketAppNoticeUpdateOne {
	amanuo.mutation.ClearStatus()
	return amanuo
}

// SetCreateUser sets the "create_user" field.
func (amanuo *AsMarketAppNoticeUpdateOne) SetCreateUser(i int64) *AsMarketAppNoticeUpdateOne {
	amanuo.mutation.ResetCreateUser()
	amanuo.mutation.SetCreateUser(i)
	return amanuo
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (amanuo *AsMarketAppNoticeUpdateOne) SetNillableCreateUser(i *int64) *AsMarketAppNoticeUpdateOne {
	if i != nil {
		amanuo.SetCreateUser(*i)
	}
	return amanuo
}

// AddCreateUser adds i to the "create_user" field.
func (amanuo *AsMarketAppNoticeUpdateOne) AddCreateUser(i int64) *AsMarketAppNoticeUpdateOne {
	amanuo.mutation.AddCreateUser(i)
	return amanuo
}

// ClearCreateUser clears the value of the "create_user" field.
func (amanuo *AsMarketAppNoticeUpdateOne) ClearCreateUser() *AsMarketAppNoticeUpdateOne {
	amanuo.mutation.ClearCreateUser()
	return amanuo
}

// SetUpdateUser sets the "update_user" field.
func (amanuo *AsMarketAppNoticeUpdateOne) SetUpdateUser(i int64) *AsMarketAppNoticeUpdateOne {
	amanuo.mutation.ResetUpdateUser()
	amanuo.mutation.SetUpdateUser(i)
	return amanuo
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (amanuo *AsMarketAppNoticeUpdateOne) SetNillableUpdateUser(i *int64) *AsMarketAppNoticeUpdateOne {
	if i != nil {
		amanuo.SetUpdateUser(*i)
	}
	return amanuo
}

// AddUpdateUser adds i to the "update_user" field.
func (amanuo *AsMarketAppNoticeUpdateOne) AddUpdateUser(i int64) *AsMarketAppNoticeUpdateOne {
	amanuo.mutation.AddUpdateUser(i)
	return amanuo
}

// ClearUpdateUser clears the value of the "update_user" field.
func (amanuo *AsMarketAppNoticeUpdateOne) ClearUpdateUser() *AsMarketAppNoticeUpdateOne {
	amanuo.mutation.ClearUpdateUser()
	return amanuo
}

// SetUpdateTime sets the "update_time" field.
func (amanuo *AsMarketAppNoticeUpdateOne) SetUpdateTime(dt date.DateTime) *AsMarketAppNoticeUpdateOne {
	amanuo.mutation.SetUpdateTime(dt)
	return amanuo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (amanuo *AsMarketAppNoticeUpdateOne) ClearUpdateTime() *AsMarketAppNoticeUpdateOne {
	amanuo.mutation.ClearUpdateTime()
	return amanuo
}

// Mutation returns the AsMarketAppNoticeMutation object of the builder.
func (amanuo *AsMarketAppNoticeUpdateOne) Mutation() *AsMarketAppNoticeMutation {
	return amanuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (amanuo *AsMarketAppNoticeUpdateOne) Select(field string, fields ...string) *AsMarketAppNoticeUpdateOne {
	amanuo.fields = append([]string{field}, fields...)
	return amanuo
}

// Save executes the query and returns the updated AsMarketAppNotice entity.
func (amanuo *AsMarketAppNoticeUpdateOne) Save(ctx context.Context) (*AsMarketAppNotice, error) {
	var (
		err  error
		node *AsMarketAppNotice
	)
	amanuo.defaults()
	if len(amanuo.hooks) == 0 {
		node, err = amanuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsMarketAppNoticeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			amanuo.mutation = mutation
			node, err = amanuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(amanuo.hooks) - 1; i >= 0; i-- {
			if amanuo.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = amanuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, amanuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (amanuo *AsMarketAppNoticeUpdateOne) SaveX(ctx context.Context) *AsMarketAppNotice {
	node, err := amanuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (amanuo *AsMarketAppNoticeUpdateOne) Exec(ctx context.Context) error {
	_, err := amanuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amanuo *AsMarketAppNoticeUpdateOne) ExecX(ctx context.Context) {
	if err := amanuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amanuo *AsMarketAppNoticeUpdateOne) defaults() {
	if _, ok := amanuo.mutation.UpdateTime(); !ok && !amanuo.mutation.UpdateTimeCleared() {
		v := asmarketappnotice.UpdateDefaultUpdateTime()
		amanuo.mutation.SetUpdateTime(v)
	}
}

func (amanuo *AsMarketAppNoticeUpdateOne) sqlSave(ctx context.Context) (_node *AsMarketAppNotice, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asmarketappnotice.Table,
			Columns: asmarketappnotice.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asmarketappnotice.FieldID,
			},
		},
	}
	id, ok := amanuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`schema: missing "AsMarketAppNotice.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := amanuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asmarketappnotice.FieldID)
		for _, f := range fields {
			if !asmarketappnotice.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("schema: invalid field %q for query", f)}
			}
			if f != asmarketappnotice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := amanuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amanuo.mutation.NoticeTitle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappnotice.FieldNoticeTitle,
		})
	}
	if amanuo.mutation.NoticeTitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappnotice.FieldNoticeTitle,
		})
	}
	if value, ok := amanuo.mutation.NoticeContent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappnotice.FieldNoticeContent,
		})
	}
	if amanuo.mutation.NoticeContentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappnotice.FieldNoticeContent,
		})
	}
	if value, ok := amanuo.mutation.NoticeReleaseUnitID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappnotice.FieldNoticeReleaseUnitID,
		})
	}
	if value, ok := amanuo.mutation.AddedNoticeReleaseUnitID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappnotice.FieldNoticeReleaseUnitID,
		})
	}
	if amanuo.mutation.NoticeReleaseUnitIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappnotice.FieldNoticeReleaseUnitID,
		})
	}
	if value, ok := amanuo.mutation.NoticeReleaseStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappnotice.FieldNoticeReleaseStatus,
		})
	}
	if value, ok := amanuo.mutation.AddedNoticeReleaseStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappnotice.FieldNoticeReleaseStatus,
		})
	}
	if value, ok := amanuo.mutation.NoticeReleaseTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketappnotice.FieldNoticeReleaseTime,
		})
	}
	if amanuo.mutation.NoticeReleaseTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketappnotice.FieldNoticeReleaseTime,
		})
	}
	if value, ok := amanuo.mutation.NoticeRoleIds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappnotice.FieldNoticeRoleIds,
		})
	}
	if amanuo.mutation.NoticeRoleIdsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappnotice.FieldNoticeRoleIds,
		})
	}
	if value, ok := amanuo.mutation.NoticeUnitIds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappnotice.FieldNoticeUnitIds,
		})
	}
	if amanuo.mutation.NoticeUnitIdsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappnotice.FieldNoticeUnitIds,
		})
	}
	if value, ok := amanuo.mutation.GroupOrUnit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappnotice.FieldGroupOrUnit,
		})
	}
	if value, ok := amanuo.mutation.AddedGroupOrUnit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappnotice.FieldGroupOrUnit,
		})
	}
	if amanuo.mutation.GroupOrUnitCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappnotice.FieldGroupOrUnit,
		})
	}
	if value, ok := amanuo.mutation.UnitQueryIds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappnotice.FieldUnitQueryIds,
		})
	}
	if amanuo.mutation.UnitQueryIdsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappnotice.FieldUnitQueryIds,
		})
	}
	if value, ok := amanuo.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappnotice.FieldIsDeleted,
		})
	}
	if value, ok := amanuo.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappnotice.FieldIsDeleted,
		})
	}
	if value, ok := amanuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappnotice.FieldStatus,
		})
	}
	if value, ok := amanuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappnotice.FieldStatus,
		})
	}
	if amanuo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappnotice.FieldStatus,
		})
	}
	if value, ok := amanuo.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappnotice.FieldCreateUser,
		})
	}
	if value, ok := amanuo.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappnotice.FieldCreateUser,
		})
	}
	if amanuo.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappnotice.FieldCreateUser,
		})
	}
	if value, ok := amanuo.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappnotice.FieldUpdateUser,
		})
	}
	if value, ok := amanuo.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappnotice.FieldUpdateUser,
		})
	}
	if amanuo.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappnotice.FieldUpdateUser,
		})
	}
	if amanuo.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketappnotice.FieldCreateTime,
		})
	}
	if value, ok := amanuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketappnotice.FieldUpdateTime,
		})
	}
	if amanuo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketappnotice.FieldUpdateTime,
		})
	}
	_node = &AsMarketAppNotice{config: amanuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, amanuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asmarketappnotice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
