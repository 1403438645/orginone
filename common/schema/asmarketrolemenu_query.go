// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"math"
	"orginone/common/schema/asmarketapprole"
	"orginone/common/schema/asmarketmenu"
	"orginone/common/schema/asmarketrolemenu"
	"orginone/common/schema/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsMarketRoleMenuQuery is the builder for querying AsMarketRoleMenu entities.
type AsMarketRoleMenuQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.AsMarketRoleMenu
	// eager-loading edges.
	withMenux *AsMarketMenuQuery
	withRolex *AsMarketAppRoleQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AsMarketRoleMenuQuery builder.
func (amrmq *AsMarketRoleMenuQuery) Where(ps ...predicate.AsMarketRoleMenu) *AsMarketRoleMenuQuery {
	amrmq.predicates = append(amrmq.predicates, ps...)
	return amrmq
}

// Limit adds a limit step to the query.
func (amrmq *AsMarketRoleMenuQuery) Limit(limit int) *AsMarketRoleMenuQuery {
	amrmq.limit = &limit
	return amrmq
}

// Offset adds an offset step to the query.
func (amrmq *AsMarketRoleMenuQuery) Offset(offset int) *AsMarketRoleMenuQuery {
	amrmq.offset = &offset
	return amrmq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (amrmq *AsMarketRoleMenuQuery) Unique(unique bool) *AsMarketRoleMenuQuery {
	amrmq.unique = &unique
	return amrmq
}

// Order adds an order step to the query.
func (amrmq *AsMarketRoleMenuQuery) Order(o ...OrderFunc) *AsMarketRoleMenuQuery {
	amrmq.order = append(amrmq.order, o...)
	return amrmq
}

// QueryMenux chains the current query on the "menux" edge.
func (amrmq *AsMarketRoleMenuQuery) QueryMenux() *AsMarketMenuQuery {
	query := &AsMarketMenuQuery{config: amrmq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := amrmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := amrmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketrolemenu.Table, asmarketrolemenu.FieldID, selector),
			sqlgraph.To(asmarketmenu.Table, asmarketmenu.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asmarketrolemenu.MenuxTable, asmarketrolemenu.MenuxColumn),
		)
		fromU = sqlgraph.SetNeighbors(amrmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRolex chains the current query on the "rolex" edge.
func (amrmq *AsMarketRoleMenuQuery) QueryRolex() *AsMarketAppRoleQuery {
	query := &AsMarketAppRoleQuery{config: amrmq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := amrmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := amrmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketrolemenu.Table, asmarketrolemenu.FieldID, selector),
			sqlgraph.To(asmarketapprole.Table, asmarketapprole.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asmarketrolemenu.RolexTable, asmarketrolemenu.RolexColumn),
		)
		fromU = sqlgraph.SetNeighbors(amrmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AsMarketRoleMenu entity from the query.
// Returns a *NotFoundError when no AsMarketRoleMenu was found.
func (amrmq *AsMarketRoleMenuQuery) First(ctx context.Context) (*AsMarketRoleMenu, error) {
	nodes, err := amrmq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{asmarketrolemenu.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (amrmq *AsMarketRoleMenuQuery) FirstX(ctx context.Context) *AsMarketRoleMenu {
	node, err := amrmq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AsMarketRoleMenu ID from the query.
// Returns a *NotFoundError when no AsMarketRoleMenu ID was found.
func (amrmq *AsMarketRoleMenuQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = amrmq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{asmarketrolemenu.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (amrmq *AsMarketRoleMenuQuery) FirstIDX(ctx context.Context) int64 {
	id, err := amrmq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AsMarketRoleMenu entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AsMarketRoleMenu entity is found.
// Returns a *NotFoundError when no AsMarketRoleMenu entities are found.
func (amrmq *AsMarketRoleMenuQuery) Only(ctx context.Context) (*AsMarketRoleMenu, error) {
	nodes, err := amrmq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{asmarketrolemenu.Label}
	default:
		return nil, &NotSingularError{asmarketrolemenu.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (amrmq *AsMarketRoleMenuQuery) OnlyX(ctx context.Context) *AsMarketRoleMenu {
	node, err := amrmq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AsMarketRoleMenu ID in the query.
// Returns a *NotSingularError when more than one AsMarketRoleMenu ID is found.
// Returns a *NotFoundError when no entities are found.
func (amrmq *AsMarketRoleMenuQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = amrmq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{asmarketrolemenu.Label}
	default:
		err = &NotSingularError{asmarketrolemenu.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (amrmq *AsMarketRoleMenuQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := amrmq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AsMarketRoleMenus.
func (amrmq *AsMarketRoleMenuQuery) All(ctx context.Context) ([]*AsMarketRoleMenu, error) {
	if err := amrmq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return amrmq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (amrmq *AsMarketRoleMenuQuery) AllX(ctx context.Context) []*AsMarketRoleMenu {
	nodes, err := amrmq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AsMarketRoleMenu IDs.
func (amrmq *AsMarketRoleMenuQuery) IDs(ctx context.Context) ([]int64, error) {
	var ids []int64
	if err := amrmq.Select(asmarketrolemenu.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (amrmq *AsMarketRoleMenuQuery) IDsX(ctx context.Context) []int64 {
	ids, err := amrmq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (amrmq *AsMarketRoleMenuQuery) Count(ctx context.Context) (int64, error) {
	if err := amrmq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return amrmq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (amrmq *AsMarketRoleMenuQuery) CountX(ctx context.Context) int64 {
	count, err := amrmq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (amrmq *AsMarketRoleMenuQuery) Exist(ctx context.Context) (bool, error) {
	if err := amrmq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return amrmq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (amrmq *AsMarketRoleMenuQuery) ExistX(ctx context.Context) bool {
	exist, err := amrmq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AsMarketRoleMenuQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (amrmq *AsMarketRoleMenuQuery) Clone() *AsMarketRoleMenuQuery {
	if amrmq == nil {
		return nil
	}
	return &AsMarketRoleMenuQuery{
		config:     amrmq.config,
		limit:      amrmq.limit,
		offset:     amrmq.offset,
		order:      append([]OrderFunc{}, amrmq.order...),
		predicates: append([]predicate.AsMarketRoleMenu{}, amrmq.predicates...),
		withMenux:  amrmq.withMenux.Clone(),
		withRolex:  amrmq.withRolex.Clone(),
		// clone intermediate query.
		sql:    amrmq.sql.Clone(),
		path:   amrmq.path,
		unique: amrmq.unique,
	}
}

// WithMenux tells the query-builder to eager-load the nodes that are connected to
// the "menux" edge. The optional arguments are used to configure the query builder of the edge.
func (amrmq *AsMarketRoleMenuQuery) WithMenux(opts ...func(*AsMarketMenuQuery)) *AsMarketRoleMenuQuery {
	query := &AsMarketMenuQuery{config: amrmq.config}
	for _, opt := range opts {
		opt(query)
	}
	amrmq.withMenux = query
	return amrmq
}

// WithRolex tells the query-builder to eager-load the nodes that are connected to
// the "rolex" edge. The optional arguments are used to configure the query builder of the edge.
func (amrmq *AsMarketRoleMenuQuery) WithRolex(opts ...func(*AsMarketAppRoleQuery)) *AsMarketRoleMenuQuery {
	query := &AsMarketAppRoleQuery{config: amrmq.config}
	for _, opt := range opts {
		opt(query)
	}
	amrmq.withRolex = query
	return amrmq
}

// ThenMenux tells the query-builder to eager-load the nodes that are connected to
// the "menux" edge. The optional arguments are used to configure the query builder of the edge.
func (amrmq *AsMarketRoleMenuQuery) ThenMenux(opts ...func(*AsMarketMenuQuery)) *AsMarketRoleMenuQuery {
	query := &AsMarketMenuQuery{config: amrmq.config}
	for _, opt := range opts {
		opt(query.Where(asmarketmenu.IsDeleted(0)))
	}
	amrmq.withMenux = query
	return amrmq
}

// ThenRolex tells the query-builder to eager-load the nodes that are connected to
// the "rolex" edge. The optional arguments are used to configure the query builder of the edge.
func (amrmq *AsMarketRoleMenuQuery) ThenRolex(opts ...func(*AsMarketAppRoleQuery)) *AsMarketRoleMenuQuery {
	query := &AsMarketAppRoleQuery{config: amrmq.config}
	for _, opt := range opts {
		opt(query.Where(asmarketapprole.IsDeleted(0)))
	}
	amrmq.withRolex = query
	return amrmq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		RoleID int64 `json:"roleId"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AsMarketRoleMenu.Query().
//		GroupBy(asmarketrolemenu.FieldRoleID).
//		Aggregate(schema.Count()).
//		Scan(ctx, &v)
//
func (amrmq *AsMarketRoleMenuQuery) GroupBy(field string, fields ...string) *AsMarketRoleMenuGroupBy {
	group := &AsMarketRoleMenuGroupBy{config: amrmq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := amrmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return amrmq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		RoleID int64 `json:"roleId"`
//	}
//
//	client.AsMarketRoleMenu.Query().
//		Select(asmarketrolemenu.FieldRoleID).
//		Scan(ctx, &v)
//
func (amrmq *AsMarketRoleMenuQuery) Select(fields ...string) *AsMarketRoleMenuSelect {
	amrmq.fields = append(amrmq.fields, fields...)
	return &AsMarketRoleMenuSelect{AsMarketRoleMenuQuery: amrmq}
}

func (amrmq *AsMarketRoleMenuQuery) prepareQuery(ctx context.Context) error {
	for _, f := range amrmq.fields {
		if !asmarketrolemenu.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("schema: invalid field %q for query", f)}
		}
	}
	if amrmq.path != nil {
		prev, err := amrmq.path(ctx)
		if err != nil {
			return err
		}
		amrmq.sql = prev
	}
	return nil
}

func (amrmq *AsMarketRoleMenuQuery) sqlAll(ctx context.Context) ([]*AsMarketRoleMenu, error) {
	var (
		nodes       = []*AsMarketRoleMenu{}
		_spec       = amrmq.querySpec()
		loadedTypes = [2]bool{
			amrmq.withMenux != nil,
			amrmq.withRolex != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &AsMarketRoleMenu{config: amrmq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("schema: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, amrmq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := amrmq.withMenux; query != nil {
		ids := make([]int64, 0, len(nodes))
		nodeids := make(map[int64][]*AsMarketRoleMenu)
		for i := range nodes {
			fk := nodes[i].MenuID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(asmarketmenu.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "menu_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Menux = n
			}
		}
	}

	if query := amrmq.withRolex; query != nil {
		ids := make([]int64, 0, len(nodes))
		nodeids := make(map[int64][]*AsMarketRoleMenu)
		for i := range nodes {
			fk := nodes[i].RoleID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(asmarketapprole.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "role_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Rolex = n
			}
		}
	}

	return nodes, nil
}

func (amrmq *AsMarketRoleMenuQuery) sqlCount(ctx context.Context) (int64, error) {
	_spec := amrmq.querySpec()
	_spec.Node.Columns = amrmq.fields
	if len(amrmq.fields) > 0 {
		_spec.Unique = amrmq.unique != nil && *amrmq.unique
	}
	c, err := sqlgraph.CountNodes(ctx, amrmq.driver, _spec)
	return int64(c), err
}

func (amrmq *AsMarketRoleMenuQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := amrmq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("schema: check existence: %w", err)
	}
	return n > 0, nil
}

func (amrmq *AsMarketRoleMenuQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asmarketrolemenu.Table,
			Columns: asmarketrolemenu.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asmarketrolemenu.FieldID,
			},
		},
		From:   amrmq.sql,
		Unique: true,
	}
	if unique := amrmq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := amrmq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asmarketrolemenu.FieldID)
		for i := range fields {
			if fields[i] != asmarketrolemenu.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := amrmq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := amrmq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := amrmq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := amrmq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (amrmq *AsMarketRoleMenuQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(amrmq.driver.Dialect())
	t1 := builder.Table(asmarketrolemenu.Table)
	columns := amrmq.fields
	if len(columns) == 0 {
		columns = asmarketrolemenu.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if amrmq.sql != nil {
		selector = amrmq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if amrmq.unique != nil && *amrmq.unique {
		selector.Distinct()
	}
	for _, p := range amrmq.predicates {
		p(selector)
	}
	for _, p := range amrmq.order {
		p(selector)
	}
	if offset := amrmq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := amrmq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AsMarketRoleMenuGroupBy is the group-by builder for AsMarketRoleMenu entities.
type AsMarketRoleMenuGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (amrmgb *AsMarketRoleMenuGroupBy) Aggregate(fns ...AggregateFunc) *AsMarketRoleMenuGroupBy {
	amrmgb.fns = append(amrmgb.fns, fns...)
	return amrmgb
}

// Scan applies the group-by query and scans the result into the given value.
func (amrmgb *AsMarketRoleMenuGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := amrmgb.path(ctx)
	if err != nil {
		return err
	}
	amrmgb.sql = query
	return amrmgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (amrmgb *AsMarketRoleMenuGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := amrmgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (amrmgb *AsMarketRoleMenuGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(amrmgb.fields) > 1 {
		return nil, errors.New("schema: AsMarketRoleMenuGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := amrmgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (amrmgb *AsMarketRoleMenuGroupBy) StringsX(ctx context.Context) []string {
	v, err := amrmgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (amrmgb *AsMarketRoleMenuGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = amrmgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketrolemenu.Label}
	default:
		err = fmt.Errorf("schema: AsMarketRoleMenuGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (amrmgb *AsMarketRoleMenuGroupBy) StringX(ctx context.Context) string {
	v, err := amrmgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (amrmgb *AsMarketRoleMenuGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(amrmgb.fields) > 1 {
		return nil, errors.New("schema: AsMarketRoleMenuGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := amrmgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (amrmgb *AsMarketRoleMenuGroupBy) IntsX(ctx context.Context) []int {
	v, err := amrmgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (amrmgb *AsMarketRoleMenuGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = amrmgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketrolemenu.Label}
	default:
		err = fmt.Errorf("schema: AsMarketRoleMenuGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (amrmgb *AsMarketRoleMenuGroupBy) IntX(ctx context.Context) int {
	v, err := amrmgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (amrmgb *AsMarketRoleMenuGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(amrmgb.fields) > 1 {
		return nil, errors.New("schema: AsMarketRoleMenuGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := amrmgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (amrmgb *AsMarketRoleMenuGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := amrmgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (amrmgb *AsMarketRoleMenuGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = amrmgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketrolemenu.Label}
	default:
		err = fmt.Errorf("schema: AsMarketRoleMenuGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (amrmgb *AsMarketRoleMenuGroupBy) Float64X(ctx context.Context) float64 {
	v, err := amrmgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (amrmgb *AsMarketRoleMenuGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(amrmgb.fields) > 1 {
		return nil, errors.New("schema: AsMarketRoleMenuGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := amrmgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (amrmgb *AsMarketRoleMenuGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := amrmgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (amrmgb *AsMarketRoleMenuGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = amrmgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketrolemenu.Label}
	default:
		err = fmt.Errorf("schema: AsMarketRoleMenuGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (amrmgb *AsMarketRoleMenuGroupBy) BoolX(ctx context.Context) bool {
	v, err := amrmgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64s returns list of int64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (amrmgb *AsMarketRoleMenuGroupBy) Int64s(ctx context.Context) ([]int64, error) {
	if len(amrmgb.fields) > 1 {
		return nil, errors.New("schema: AsMarketRoleMenuGroupBy.Int64s is not achievable when grouping more than 1 field")
	}
	var v []int64
	if err := amrmgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Int64sX is like Int64s, but panics if an error occurs.
func (amrmgb *AsMarketRoleMenuGroupBy) Int64sX(ctx context.Context) []int64 {
	v, err := amrmgb.Int64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64 returns a single int64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (amrmgb *AsMarketRoleMenuGroupBy) Int64(ctx context.Context) (_ int64, err error) {
	var v []int64
	if v, err = amrmgb.Int64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketrolemenu.Label}
	default:
		err = fmt.Errorf("schema: AsMarketRoleMenuGroupBy.Int64s returned %d results when one was expected", len(v))
	}
	return
}

// Int64X is like Int64, but panics if an error occurs.
func (amrmgb *AsMarketRoleMenuGroupBy) Int64X(ctx context.Context) int64 {
	v, err := amrmgb.Int64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (amrmgb *AsMarketRoleMenuGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range amrmgb.fields {
		if !asmarketrolemenu.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := amrmgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := amrmgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (amrmgb *AsMarketRoleMenuGroupBy) sqlQuery() *sql.Selector {
	selector := amrmgb.sql.Select()
	aggregation := make([]string, 0, len(amrmgb.fns))
	for _, fn := range amrmgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(amrmgb.fields)+len(amrmgb.fns))
		for _, f := range amrmgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(amrmgb.fields...)...)
}

// AsMarketRoleMenuSelect is the builder for selecting fields of AsMarketRoleMenu entities.
type AsMarketRoleMenuSelect struct {
	*AsMarketRoleMenuQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (amrms *AsMarketRoleMenuSelect) Scan(ctx context.Context, v interface{}) error {
	if err := amrms.prepareQuery(ctx); err != nil {
		return err
	}
	amrms.sql = amrms.AsMarketRoleMenuQuery.sqlQuery(ctx)
	return amrms.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (amrms *AsMarketRoleMenuSelect) ScanX(ctx context.Context, v interface{}) {
	if err := amrms.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (amrms *AsMarketRoleMenuSelect) Strings(ctx context.Context) ([]string, error) {
	if len(amrms.fields) > 1 {
		return nil, errors.New("schema: AsMarketRoleMenuSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := amrms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (amrms *AsMarketRoleMenuSelect) StringsX(ctx context.Context) []string {
	v, err := amrms.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (amrms *AsMarketRoleMenuSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = amrms.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketrolemenu.Label}
	default:
		err = fmt.Errorf("schema: AsMarketRoleMenuSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (amrms *AsMarketRoleMenuSelect) StringX(ctx context.Context) string {
	v, err := amrms.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (amrms *AsMarketRoleMenuSelect) Ints(ctx context.Context) ([]int, error) {
	if len(amrms.fields) > 1 {
		return nil, errors.New("schema: AsMarketRoleMenuSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := amrms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (amrms *AsMarketRoleMenuSelect) IntsX(ctx context.Context) []int {
	v, err := amrms.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (amrms *AsMarketRoleMenuSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = amrms.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketrolemenu.Label}
	default:
		err = fmt.Errorf("schema: AsMarketRoleMenuSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (amrms *AsMarketRoleMenuSelect) IntX(ctx context.Context) int {
	v, err := amrms.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (amrms *AsMarketRoleMenuSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(amrms.fields) > 1 {
		return nil, errors.New("schema: AsMarketRoleMenuSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := amrms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (amrms *AsMarketRoleMenuSelect) Float64sX(ctx context.Context) []float64 {
	v, err := amrms.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (amrms *AsMarketRoleMenuSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = amrms.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketrolemenu.Label}
	default:
		err = fmt.Errorf("schema: AsMarketRoleMenuSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (amrms *AsMarketRoleMenuSelect) Float64X(ctx context.Context) float64 {
	v, err := amrms.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (amrms *AsMarketRoleMenuSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(amrms.fields) > 1 {
		return nil, errors.New("schema: AsMarketRoleMenuSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := amrms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (amrms *AsMarketRoleMenuSelect) BoolsX(ctx context.Context) []bool {
	v, err := amrms.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (amrms *AsMarketRoleMenuSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = amrms.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketrolemenu.Label}
	default:
		err = fmt.Errorf("schema: AsMarketRoleMenuSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (amrms *AsMarketRoleMenuSelect) BoolX(ctx context.Context) bool {
	v, err := amrms.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64s returns list of int64s from a selector. It is only allowed when selecting one field.
func (amrms *AsMarketRoleMenuSelect) Int64s(ctx context.Context) ([]int64, error) {
	if len(amrms.fields) > 1 {
		return nil, errors.New("schema: AsMarketRoleMenuSelect.Int64s is not achievable when selecting more than 1 field")
	}
	var v []int64
	if err := amrms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Int64sX is like Int64s, but panics if an error occurs.
func (amrms *AsMarketRoleMenuSelect) Int64sX(ctx context.Context) []int64 {
	v, err := amrms.Int64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64 returns a single int64 from a selector. It is only allowed when selecting one field.
func (amrms *AsMarketRoleMenuSelect) Int64(ctx context.Context) (_ int64, err error) {
	var v []int64
	if v, err = amrms.Int64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketrolemenu.Label}
	default:
		err = fmt.Errorf("schema: AsMarketRoleMenuSelect.Int64s returned %d results when one was expected", len(v))
	}
	return
}

// Int64X is like Int64, but panics if an error occurs.
func (amrms *AsMarketRoleMenuSelect) Int64X(ctx context.Context) int64 {
	v, err := amrms.Int64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (amrms *AsMarketRoleMenuSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := amrms.sql.Query()
	if err := amrms.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
