// Code generated by entc, DO NOT EDIT.

package asrole

import (
	"orginone/common/schema/predicate"
	"orginone/common/tools/date"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Sort applies equality check predicate on the "sort" field. It's identical to SortEQ.
func Sort(v int64) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSort), v))
	})
}

// RoleAlias applies equality check predicate on the "role_alias" field. It's identical to RoleAliasEQ.
func RoleAlias(v string) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoleAlias), v))
	})
}

// RoleName applies equality check predicate on the "role_name" field. It's identical to RoleNameEQ.
func RoleName(v string) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoleName), v))
	})
}

// RoleDescription applies equality check predicate on the "role_description" field. It's identical to RoleDescriptionEQ.
func RoleDescription(v string) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoleDescription), v))
	})
}

// IsDeleted applies equality check predicate on the "is_deleted" field. It's identical to IsDeletedEQ.
func IsDeleted(v int64) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDeleted), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int64) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// CreateUser applies equality check predicate on the "create_user" field. It's identical to CreateUserEQ.
func CreateUser(v int64) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateUser), v))
	})
}

// UpdateUser applies equality check predicate on the "update_user" field. It's identical to UpdateUserEQ.
func UpdateUser(v int64) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateUser), v))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v date.DateTime) predicate.AsRole {
	vc := time.Time(v)
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), vc))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v date.DateTime) predicate.AsRole {
	vc := time.Time(v)
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), vc))
	})
}

// SortEQ applies the EQ predicate on the "sort" field.
func SortEQ(v int64) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSort), v))
	})
}

// SortNEQ applies the NEQ predicate on the "sort" field.
func SortNEQ(v int64) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSort), v))
	})
}

// SortIn applies the In predicate on the "sort" field.
func SortIn(vs ...int64) predicate.AsRole {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsRole(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSort), v...))
	})
}

// SortNotIn applies the NotIn predicate on the "sort" field.
func SortNotIn(vs ...int64) predicate.AsRole {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsRole(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSort), v...))
	})
}

// SortGT applies the GT predicate on the "sort" field.
func SortGT(v int64) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSort), v))
	})
}

// SortGTE applies the GTE predicate on the "sort" field.
func SortGTE(v int64) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSort), v))
	})
}

// SortLT applies the LT predicate on the "sort" field.
func SortLT(v int64) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSort), v))
	})
}

// SortLTE applies the LTE predicate on the "sort" field.
func SortLTE(v int64) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSort), v))
	})
}

// RoleAliasEQ applies the EQ predicate on the "role_alias" field.
func RoleAliasEQ(v string) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoleAlias), v))
	})
}

// RoleAliasNEQ applies the NEQ predicate on the "role_alias" field.
func RoleAliasNEQ(v string) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRoleAlias), v))
	})
}

// RoleAliasIn applies the In predicate on the "role_alias" field.
func RoleAliasIn(vs ...string) predicate.AsRole {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsRole(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRoleAlias), v...))
	})
}

// RoleAliasNotIn applies the NotIn predicate on the "role_alias" field.
func RoleAliasNotIn(vs ...string) predicate.AsRole {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsRole(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRoleAlias), v...))
	})
}

// RoleAliasGT applies the GT predicate on the "role_alias" field.
func RoleAliasGT(v string) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRoleAlias), v))
	})
}

// RoleAliasGTE applies the GTE predicate on the "role_alias" field.
func RoleAliasGTE(v string) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRoleAlias), v))
	})
}

// RoleAliasLT applies the LT predicate on the "role_alias" field.
func RoleAliasLT(v string) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRoleAlias), v))
	})
}

// RoleAliasLTE applies the LTE predicate on the "role_alias" field.
func RoleAliasLTE(v string) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRoleAlias), v))
	})
}

// RoleAliasContains applies the Contains predicate on the "role_alias" field.
func RoleAliasContains(v string) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRoleAlias), v))
	})
}

// RoleAliasHasPrefix applies the HasPrefix predicate on the "role_alias" field.
func RoleAliasHasPrefix(v string) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRoleAlias), v))
	})
}

// RoleAliasHasSuffix applies the HasSuffix predicate on the "role_alias" field.
func RoleAliasHasSuffix(v string) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRoleAlias), v))
	})
}

// RoleAliasIsNil applies the IsNil predicate on the "role_alias" field.
func RoleAliasIsNil() predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRoleAlias)))
	})
}

// RoleAliasNotNil applies the NotNil predicate on the "role_alias" field.
func RoleAliasNotNil() predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRoleAlias)))
	})
}

// RoleAliasEqualFold applies the EqualFold predicate on the "role_alias" field.
func RoleAliasEqualFold(v string) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRoleAlias), v))
	})
}

// RoleAliasContainsFold applies the ContainsFold predicate on the "role_alias" field.
func RoleAliasContainsFold(v string) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRoleAlias), v))
	})
}

// RoleNameEQ applies the EQ predicate on the "role_name" field.
func RoleNameEQ(v string) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoleName), v))
	})
}

// RoleNameNEQ applies the NEQ predicate on the "role_name" field.
func RoleNameNEQ(v string) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRoleName), v))
	})
}

// RoleNameIn applies the In predicate on the "role_name" field.
func RoleNameIn(vs ...string) predicate.AsRole {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsRole(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRoleName), v...))
	})
}

// RoleNameNotIn applies the NotIn predicate on the "role_name" field.
func RoleNameNotIn(vs ...string) predicate.AsRole {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsRole(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRoleName), v...))
	})
}

// RoleNameGT applies the GT predicate on the "role_name" field.
func RoleNameGT(v string) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRoleName), v))
	})
}

// RoleNameGTE applies the GTE predicate on the "role_name" field.
func RoleNameGTE(v string) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRoleName), v))
	})
}

// RoleNameLT applies the LT predicate on the "role_name" field.
func RoleNameLT(v string) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRoleName), v))
	})
}

// RoleNameLTE applies the LTE predicate on the "role_name" field.
func RoleNameLTE(v string) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRoleName), v))
	})
}

// RoleNameContains applies the Contains predicate on the "role_name" field.
func RoleNameContains(v string) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRoleName), v))
	})
}

// RoleNameHasPrefix applies the HasPrefix predicate on the "role_name" field.
func RoleNameHasPrefix(v string) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRoleName), v))
	})
}

// RoleNameHasSuffix applies the HasSuffix predicate on the "role_name" field.
func RoleNameHasSuffix(v string) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRoleName), v))
	})
}

// RoleNameIsNil applies the IsNil predicate on the "role_name" field.
func RoleNameIsNil() predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRoleName)))
	})
}

// RoleNameNotNil applies the NotNil predicate on the "role_name" field.
func RoleNameNotNil() predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRoleName)))
	})
}

// RoleNameEqualFold applies the EqualFold predicate on the "role_name" field.
func RoleNameEqualFold(v string) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRoleName), v))
	})
}

// RoleNameContainsFold applies the ContainsFold predicate on the "role_name" field.
func RoleNameContainsFold(v string) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRoleName), v))
	})
}

// RoleDescriptionEQ applies the EQ predicate on the "role_description" field.
func RoleDescriptionEQ(v string) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoleDescription), v))
	})
}

// RoleDescriptionNEQ applies the NEQ predicate on the "role_description" field.
func RoleDescriptionNEQ(v string) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRoleDescription), v))
	})
}

// RoleDescriptionIn applies the In predicate on the "role_description" field.
func RoleDescriptionIn(vs ...string) predicate.AsRole {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsRole(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRoleDescription), v...))
	})
}

// RoleDescriptionNotIn applies the NotIn predicate on the "role_description" field.
func RoleDescriptionNotIn(vs ...string) predicate.AsRole {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsRole(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRoleDescription), v...))
	})
}

// RoleDescriptionGT applies the GT predicate on the "role_description" field.
func RoleDescriptionGT(v string) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRoleDescription), v))
	})
}

// RoleDescriptionGTE applies the GTE predicate on the "role_description" field.
func RoleDescriptionGTE(v string) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRoleDescription), v))
	})
}

// RoleDescriptionLT applies the LT predicate on the "role_description" field.
func RoleDescriptionLT(v string) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRoleDescription), v))
	})
}

// RoleDescriptionLTE applies the LTE predicate on the "role_description" field.
func RoleDescriptionLTE(v string) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRoleDescription), v))
	})
}

// RoleDescriptionContains applies the Contains predicate on the "role_description" field.
func RoleDescriptionContains(v string) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRoleDescription), v))
	})
}

// RoleDescriptionHasPrefix applies the HasPrefix predicate on the "role_description" field.
func RoleDescriptionHasPrefix(v string) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRoleDescription), v))
	})
}

// RoleDescriptionHasSuffix applies the HasSuffix predicate on the "role_description" field.
func RoleDescriptionHasSuffix(v string) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRoleDescription), v))
	})
}

// RoleDescriptionIsNil applies the IsNil predicate on the "role_description" field.
func RoleDescriptionIsNil() predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRoleDescription)))
	})
}

// RoleDescriptionNotNil applies the NotNil predicate on the "role_description" field.
func RoleDescriptionNotNil() predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRoleDescription)))
	})
}

// RoleDescriptionEqualFold applies the EqualFold predicate on the "role_description" field.
func RoleDescriptionEqualFold(v string) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRoleDescription), v))
	})
}

// RoleDescriptionContainsFold applies the ContainsFold predicate on the "role_description" field.
func RoleDescriptionContainsFold(v string) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRoleDescription), v))
	})
}

// IsDeletedEQ applies the EQ predicate on the "is_deleted" field.
func IsDeletedEQ(v int64) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedNEQ applies the NEQ predicate on the "is_deleted" field.
func IsDeletedNEQ(v int64) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedIn applies the In predicate on the "is_deleted" field.
func IsDeletedIn(vs ...int64) predicate.AsRole {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsRole(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsDeleted), v...))
	})
}

// IsDeletedNotIn applies the NotIn predicate on the "is_deleted" field.
func IsDeletedNotIn(vs ...int64) predicate.AsRole {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsRole(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsDeleted), v...))
	})
}

// IsDeletedGT applies the GT predicate on the "is_deleted" field.
func IsDeletedGT(v int64) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedGTE applies the GTE predicate on the "is_deleted" field.
func IsDeletedGTE(v int64) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedLT applies the LT predicate on the "is_deleted" field.
func IsDeletedLT(v int64) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedLTE applies the LTE predicate on the "is_deleted" field.
func IsDeletedLTE(v int64) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsDeleted), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int64) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int64) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int64) predicate.AsRole {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsRole(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int64) predicate.AsRole {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsRole(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int64) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int64) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int64) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int64) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStatus)))
	})
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStatus)))
	})
}

// CreateUserEQ applies the EQ predicate on the "create_user" field.
func CreateUserEQ(v int64) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateUser), v))
	})
}

// CreateUserNEQ applies the NEQ predicate on the "create_user" field.
func CreateUserNEQ(v int64) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateUser), v))
	})
}

// CreateUserIn applies the In predicate on the "create_user" field.
func CreateUserIn(vs ...int64) predicate.AsRole {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsRole(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateUser), v...))
	})
}

// CreateUserNotIn applies the NotIn predicate on the "create_user" field.
func CreateUserNotIn(vs ...int64) predicate.AsRole {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsRole(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateUser), v...))
	})
}

// CreateUserGT applies the GT predicate on the "create_user" field.
func CreateUserGT(v int64) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateUser), v))
	})
}

// CreateUserGTE applies the GTE predicate on the "create_user" field.
func CreateUserGTE(v int64) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateUser), v))
	})
}

// CreateUserLT applies the LT predicate on the "create_user" field.
func CreateUserLT(v int64) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateUser), v))
	})
}

// CreateUserLTE applies the LTE predicate on the "create_user" field.
func CreateUserLTE(v int64) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateUser), v))
	})
}

// CreateUserIsNil applies the IsNil predicate on the "create_user" field.
func CreateUserIsNil() predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreateUser)))
	})
}

// CreateUserNotNil applies the NotNil predicate on the "create_user" field.
func CreateUserNotNil() predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreateUser)))
	})
}

// UpdateUserEQ applies the EQ predicate on the "update_user" field.
func UpdateUserEQ(v int64) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserNEQ applies the NEQ predicate on the "update_user" field.
func UpdateUserNEQ(v int64) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserIn applies the In predicate on the "update_user" field.
func UpdateUserIn(vs ...int64) predicate.AsRole {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsRole(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateUser), v...))
	})
}

// UpdateUserNotIn applies the NotIn predicate on the "update_user" field.
func UpdateUserNotIn(vs ...int64) predicate.AsRole {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsRole(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateUser), v...))
	})
}

// UpdateUserGT applies the GT predicate on the "update_user" field.
func UpdateUserGT(v int64) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserGTE applies the GTE predicate on the "update_user" field.
func UpdateUserGTE(v int64) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserLT applies the LT predicate on the "update_user" field.
func UpdateUserLT(v int64) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserLTE applies the LTE predicate on the "update_user" field.
func UpdateUserLTE(v int64) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserIsNil applies the IsNil predicate on the "update_user" field.
func UpdateUserIsNil() predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdateUser)))
	})
}

// UpdateUserNotNil applies the NotNil predicate on the "update_user" field.
func UpdateUserNotNil() predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdateUser)))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v date.DateTime) predicate.AsRole {
	vc := time.Time(v)
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v date.DateTime) predicate.AsRole {
	vc := time.Time(v)
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...date.DateTime) predicate.AsRole {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsRole(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...date.DateTime) predicate.AsRole {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsRole(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v date.DateTime) predicate.AsRole {
	vc := time.Time(v)
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v date.DateTime) predicate.AsRole {
	vc := time.Time(v)
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v date.DateTime) predicate.AsRole {
	vc := time.Time(v)
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v date.DateTime) predicate.AsRole {
	vc := time.Time(v)
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeIsNil applies the IsNil predicate on the "create_time" field.
func CreateTimeIsNil() predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreateTime)))
	})
}

// CreateTimeNotNil applies the NotNil predicate on the "create_time" field.
func CreateTimeNotNil() predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreateTime)))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v date.DateTime) predicate.AsRole {
	vc := time.Time(v)
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v date.DateTime) predicate.AsRole {
	vc := time.Time(v)
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...date.DateTime) predicate.AsRole {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsRole(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...date.DateTime) predicate.AsRole {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsRole(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v date.DateTime) predicate.AsRole {
	vc := time.Time(v)
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v date.DateTime) predicate.AsRole {
	vc := time.Time(v)
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v date.DateTime) predicate.AsRole {
	vc := time.Time(v)
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v date.DateTime) predicate.AsRole {
	vc := time.Time(v)
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeIsNil applies the IsNil predicate on the "update_time" field.
func UpdateTimeIsNil() predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdateTime)))
	})
}

// UpdateTimeNotNil applies the NotNil predicate on the "update_time" field.
func UpdateTimeNotNil() predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdateTime)))
	})
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UsersTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, UsersTable, UsersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.AsUser) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UsersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, UsersTable, UsersPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasJobs applies the HasEdge predicate on the "jobs" edge.
func HasJobs() predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(JobsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, JobsTable, JobsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasJobsWith applies the HasEdge predicate on the "jobs" edge with a given conditions (other predicates).
func HasJobsWith(preds ...predicate.AsJob) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(JobsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, JobsTable, JobsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMenus applies the HasEdge predicate on the "menus" edge.
func HasMenus() predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MenusTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, MenusTable, MenusPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMenusWith applies the HasEdge predicate on the "menus" edge with a given conditions (other predicates).
func HasMenusWith(preds ...predicate.AsMenu) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MenusInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, MenusTable, MenusPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAttrRoles applies the HasEdge predicate on the "attrRoles" edge.
func HasAttrRoles() predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AttrRolesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AttrRolesTable, AttrRolesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAttrRolesWith applies the HasEdge predicate on the "attrRoles" edge with a given conditions (other predicates).
func HasAttrRolesWith(preds ...predicate.AsTenantAttrRole) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AttrRolesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AttrRolesTable, AttrRolesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AsRole) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AsRole) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AsRole) predicate.AsRole {
	return predicate.AsRole(func(s *sql.Selector) {
		p(s.Not())
	})
}
