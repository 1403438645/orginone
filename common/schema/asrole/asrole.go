// Code generated by entc, DO NOT EDIT.

package asrole

import (
	"orginone/common/tools/date"
)

const (
	// Label holds the string label denoting the asrole type in the database.
	Label = "as_role"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSort holds the string denoting the sort field in the database.
	FieldSort = "sort"
	// FieldRoleAlias holds the string denoting the role_alias field in the database.
	FieldRoleAlias = "role_alias"
	// FieldRoleName holds the string denoting the role_name field in the database.
	FieldRoleName = "role_name"
	// FieldRoleDescription holds the string denoting the role_description field in the database.
	FieldRoleDescription = "role_description"
	// FieldIsDeleted holds the string denoting the is_deleted field in the database.
	FieldIsDeleted = "is_deleted"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreateUser holds the string denoting the create_user field in the database.
	FieldCreateUser = "create_user"
	// FieldUpdateUser holds the string denoting the update_user field in the database.
	FieldUpdateUser = "update_user"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// EdgeJobs holds the string denoting the jobs edge name in mutations.
	EdgeJobs = "jobs"
	// EdgeMenus holds the string denoting the menus edge name in mutations.
	EdgeMenus = "menus"
	// EdgeAttrRoles holds the string denoting the attrroles edge name in mutations.
	EdgeAttrRoles = "attrRoles"
	// Table holds the table name of the asrole in the database.
	Table = "as_role"
	// UsersTable is the table that holds the users relation/edge. The primary key declared below.
	UsersTable = "as_user_role"
	// UsersInverseTable is the table name for the AsUser entity.
	// It exists in this package in order to avoid circular dependency with the "asuser" package.
	UsersInverseTable = "as_user"
	// JobsTable is the table that holds the jobs relation/edge. The primary key declared below.
	JobsTable = "as_role_job"
	// JobsInverseTable is the table name for the AsJob entity.
	// It exists in this package in order to avoid circular dependency with the "asjob" package.
	JobsInverseTable = "as_job"
	// MenusTable is the table that holds the menus relation/edge. The primary key declared below.
	MenusTable = "as_menu_role"
	// MenusInverseTable is the table name for the AsMenu entity.
	// It exists in this package in order to avoid circular dependency with the "asmenu" package.
	MenusInverseTable = "as_menu"
	// AttrRolesTable is the table that holds the attrRoles relation/edge.
	AttrRolesTable = "as_tenant_attr_role"
	// AttrRolesInverseTable is the table name for the AsTenantAttrRole entity.
	// It exists in this package in order to avoid circular dependency with the "astenantattrrole" package.
	AttrRolesInverseTable = "as_tenant_attr_role"
	// AttrRolesColumn is the table column denoting the attrRoles relation/edge.
	AttrRolesColumn = "role_id"
)

// Columns holds all SQL columns for asrole fields.
var Columns = []string{
	FieldID,
	FieldSort,
	FieldRoleAlias,
	FieldRoleName,
	FieldRoleDescription,
	FieldIsDeleted,
	FieldStatus,
	FieldCreateUser,
	FieldUpdateUser,
	FieldCreateTime,
	FieldUpdateTime,
}

var (
	// UsersPrimaryKey and UsersColumn2 are the table columns denoting the
	// primary key for the users relation (M2M).
	UsersPrimaryKey = []string{"user_id", "role_id"}
	// JobsPrimaryKey and JobsColumn2 are the table columns denoting the
	// primary key for the jobs relation (M2M).
	JobsPrimaryKey = []string{"role_id", "job_id"}
	// MenusPrimaryKey and MenusColumn2 are the table columns denoting the
	// primary key for the menus relation (M2M).
	MenusPrimaryKey = []string{"menu_id", "role_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsDeleted holds the default value on creation for the "is_deleted" field.
	DefaultIsDeleted int64
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int64
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() date.DateTime
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() date.DateTime
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() date.DateTime
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() int64
)
