// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/asinputdata"
	"orginone/common/schema/predicate"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsInputDataUpdate is the builder for updating AsInputData entities.
type AsInputDataUpdate struct {
	config
	hooks    []Hook
	mutation *AsInputDataMutation
}

// Where appends a list predicates to the AsInputDataUpdate builder.
func (aidu *AsInputDataUpdate) Where(ps ...predicate.AsInputData) *AsInputDataUpdate {
	aidu.mutation.Where(ps...)
	return aidu
}

// SetFileID sets the "file_id" field.
func (aidu *AsInputDataUpdate) SetFileID(i int64) *AsInputDataUpdate {
	aidu.mutation.ResetFileID()
	aidu.mutation.SetFileID(i)
	return aidu
}

// AddFileID adds i to the "file_id" field.
func (aidu *AsInputDataUpdate) AddFileID(i int64) *AsInputDataUpdate {
	aidu.mutation.AddFileID(i)
	return aidu
}

// SetFileName sets the "file_name" field.
func (aidu *AsInputDataUpdate) SetFileName(s string) *AsInputDataUpdate {
	aidu.mutation.SetFileName(s)
	return aidu
}

// SetTableName sets the "table_name" field.
func (aidu *AsInputDataUpdate) SetTableName(s string) *AsInputDataUpdate {
	aidu.mutation.SetTableName(s)
	return aidu
}

// SetType sets the "type" field.
func (aidu *AsInputDataUpdate) SetType(i int64) *AsInputDataUpdate {
	aidu.mutation.ResetType()
	aidu.mutation.SetType(i)
	return aidu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (aidu *AsInputDataUpdate) SetNillableType(i *int64) *AsInputDataUpdate {
	if i != nil {
		aidu.SetType(*i)
	}
	return aidu
}

// AddType adds i to the "type" field.
func (aidu *AsInputDataUpdate) AddType(i int64) *AsInputDataUpdate {
	aidu.mutation.AddType(i)
	return aidu
}

// ClearType clears the value of the "type" field.
func (aidu *AsInputDataUpdate) ClearType() *AsInputDataUpdate {
	aidu.mutation.ClearType()
	return aidu
}

// SetTCount sets the "t_count" field.
func (aidu *AsInputDataUpdate) SetTCount(i int64) *AsInputDataUpdate {
	aidu.mutation.ResetTCount()
	aidu.mutation.SetTCount(i)
	return aidu
}

// SetNillableTCount sets the "t_count" field if the given value is not nil.
func (aidu *AsInputDataUpdate) SetNillableTCount(i *int64) *AsInputDataUpdate {
	if i != nil {
		aidu.SetTCount(*i)
	}
	return aidu
}

// AddTCount adds i to the "t_count" field.
func (aidu *AsInputDataUpdate) AddTCount(i int64) *AsInputDataUpdate {
	aidu.mutation.AddTCount(i)
	return aidu
}

// ClearTCount clears the value of the "t_count" field.
func (aidu *AsInputDataUpdate) ClearTCount() *AsInputDataUpdate {
	aidu.mutation.ClearTCount()
	return aidu
}

// SetFCount sets the "f_count" field.
func (aidu *AsInputDataUpdate) SetFCount(i int64) *AsInputDataUpdate {
	aidu.mutation.ResetFCount()
	aidu.mutation.SetFCount(i)
	return aidu
}

// SetNillableFCount sets the "f_count" field if the given value is not nil.
func (aidu *AsInputDataUpdate) SetNillableFCount(i *int64) *AsInputDataUpdate {
	if i != nil {
		aidu.SetFCount(*i)
	}
	return aidu
}

// AddFCount adds i to the "f_count" field.
func (aidu *AsInputDataUpdate) AddFCount(i int64) *AsInputDataUpdate {
	aidu.mutation.AddFCount(i)
	return aidu
}

// ClearFCount clears the value of the "f_count" field.
func (aidu *AsInputDataUpdate) ClearFCount() *AsInputDataUpdate {
	aidu.mutation.ClearFCount()
	return aidu
}

// SetContext sets the "context" field.
func (aidu *AsInputDataUpdate) SetContext(s string) *AsInputDataUpdate {
	aidu.mutation.SetContext(s)
	return aidu
}

// SetNillableContext sets the "context" field if the given value is not nil.
func (aidu *AsInputDataUpdate) SetNillableContext(s *string) *AsInputDataUpdate {
	if s != nil {
		aidu.SetContext(*s)
	}
	return aidu
}

// ClearContext clears the value of the "context" field.
func (aidu *AsInputDataUpdate) ClearContext() *AsInputDataUpdate {
	aidu.mutation.ClearContext()
	return aidu
}

// SetEndTime sets the "end_time" field.
func (aidu *AsInputDataUpdate) SetEndTime(dt date.DateTime) *AsInputDataUpdate {
	aidu.mutation.SetEndTime(dt)
	return aidu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (aidu *AsInputDataUpdate) SetNillableEndTime(dt *date.DateTime) *AsInputDataUpdate {
	if dt != nil {
		aidu.SetEndTime(*dt)
	}
	return aidu
}

// ClearEndTime clears the value of the "end_time" field.
func (aidu *AsInputDataUpdate) ClearEndTime() *AsInputDataUpdate {
	aidu.mutation.ClearEndTime()
	return aidu
}

// SetTotalTime sets the "total_time" field.
func (aidu *AsInputDataUpdate) SetTotalTime(i int64) *AsInputDataUpdate {
	aidu.mutation.ResetTotalTime()
	aidu.mutation.SetTotalTime(i)
	return aidu
}

// SetNillableTotalTime sets the "total_time" field if the given value is not nil.
func (aidu *AsInputDataUpdate) SetNillableTotalTime(i *int64) *AsInputDataUpdate {
	if i != nil {
		aidu.SetTotalTime(*i)
	}
	return aidu
}

// AddTotalTime adds i to the "total_time" field.
func (aidu *AsInputDataUpdate) AddTotalTime(i int64) *AsInputDataUpdate {
	aidu.mutation.AddTotalTime(i)
	return aidu
}

// ClearTotalTime clears the value of the "total_time" field.
func (aidu *AsInputDataUpdate) ClearTotalTime() *AsInputDataUpdate {
	aidu.mutation.ClearTotalTime()
	return aidu
}

// SetTenantCode sets the "tenant_code" field.
func (aidu *AsInputDataUpdate) SetTenantCode(s string) *AsInputDataUpdate {
	aidu.mutation.SetTenantCode(s)
	return aidu
}

// SetNillableTenantCode sets the "tenant_code" field if the given value is not nil.
func (aidu *AsInputDataUpdate) SetNillableTenantCode(s *string) *AsInputDataUpdate {
	if s != nil {
		aidu.SetTenantCode(*s)
	}
	return aidu
}

// ClearTenantCode clears the value of the "tenant_code" field.
func (aidu *AsInputDataUpdate) ClearTenantCode() *AsInputDataUpdate {
	aidu.mutation.ClearTenantCode()
	return aidu
}

// SetImportType sets the "import_type" field.
func (aidu *AsInputDataUpdate) SetImportType(i int64) *AsInputDataUpdate {
	aidu.mutation.ResetImportType()
	aidu.mutation.SetImportType(i)
	return aidu
}

// SetNillableImportType sets the "import_type" field if the given value is not nil.
func (aidu *AsInputDataUpdate) SetNillableImportType(i *int64) *AsInputDataUpdate {
	if i != nil {
		aidu.SetImportType(*i)
	}
	return aidu
}

// AddImportType adds i to the "import_type" field.
func (aidu *AsInputDataUpdate) AddImportType(i int64) *AsInputDataUpdate {
	aidu.mutation.AddImportType(i)
	return aidu
}

// ClearImportType clears the value of the "import_type" field.
func (aidu *AsInputDataUpdate) ClearImportType() *AsInputDataUpdate {
	aidu.mutation.ClearImportType()
	return aidu
}

// SetIsDeleted sets the "is_deleted" field.
func (aidu *AsInputDataUpdate) SetIsDeleted(i int64) *AsInputDataUpdate {
	aidu.mutation.ResetIsDeleted()
	aidu.mutation.SetIsDeleted(i)
	return aidu
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (aidu *AsInputDataUpdate) SetNillableIsDeleted(i *int64) *AsInputDataUpdate {
	if i != nil {
		aidu.SetIsDeleted(*i)
	}
	return aidu
}

// AddIsDeleted adds i to the "is_deleted" field.
func (aidu *AsInputDataUpdate) AddIsDeleted(i int64) *AsInputDataUpdate {
	aidu.mutation.AddIsDeleted(i)
	return aidu
}

// SetStatus sets the "status" field.
func (aidu *AsInputDataUpdate) SetStatus(i int64) *AsInputDataUpdate {
	aidu.mutation.ResetStatus()
	aidu.mutation.SetStatus(i)
	return aidu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (aidu *AsInputDataUpdate) SetNillableStatus(i *int64) *AsInputDataUpdate {
	if i != nil {
		aidu.SetStatus(*i)
	}
	return aidu
}

// AddStatus adds i to the "status" field.
func (aidu *AsInputDataUpdate) AddStatus(i int64) *AsInputDataUpdate {
	aidu.mutation.AddStatus(i)
	return aidu
}

// ClearStatus clears the value of the "status" field.
func (aidu *AsInputDataUpdate) ClearStatus() *AsInputDataUpdate {
	aidu.mutation.ClearStatus()
	return aidu
}

// SetCreateUser sets the "create_user" field.
func (aidu *AsInputDataUpdate) SetCreateUser(i int64) *AsInputDataUpdate {
	aidu.mutation.ResetCreateUser()
	aidu.mutation.SetCreateUser(i)
	return aidu
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (aidu *AsInputDataUpdate) SetNillableCreateUser(i *int64) *AsInputDataUpdate {
	if i != nil {
		aidu.SetCreateUser(*i)
	}
	return aidu
}

// AddCreateUser adds i to the "create_user" field.
func (aidu *AsInputDataUpdate) AddCreateUser(i int64) *AsInputDataUpdate {
	aidu.mutation.AddCreateUser(i)
	return aidu
}

// ClearCreateUser clears the value of the "create_user" field.
func (aidu *AsInputDataUpdate) ClearCreateUser() *AsInputDataUpdate {
	aidu.mutation.ClearCreateUser()
	return aidu
}

// SetUpdateUser sets the "update_user" field.
func (aidu *AsInputDataUpdate) SetUpdateUser(i int64) *AsInputDataUpdate {
	aidu.mutation.ResetUpdateUser()
	aidu.mutation.SetUpdateUser(i)
	return aidu
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (aidu *AsInputDataUpdate) SetNillableUpdateUser(i *int64) *AsInputDataUpdate {
	if i != nil {
		aidu.SetUpdateUser(*i)
	}
	return aidu
}

// AddUpdateUser adds i to the "update_user" field.
func (aidu *AsInputDataUpdate) AddUpdateUser(i int64) *AsInputDataUpdate {
	aidu.mutation.AddUpdateUser(i)
	return aidu
}

// ClearUpdateUser clears the value of the "update_user" field.
func (aidu *AsInputDataUpdate) ClearUpdateUser() *AsInputDataUpdate {
	aidu.mutation.ClearUpdateUser()
	return aidu
}

// SetUpdateTime sets the "update_time" field.
func (aidu *AsInputDataUpdate) SetUpdateTime(dt date.DateTime) *AsInputDataUpdate {
	aidu.mutation.SetUpdateTime(dt)
	return aidu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (aidu *AsInputDataUpdate) ClearUpdateTime() *AsInputDataUpdate {
	aidu.mutation.ClearUpdateTime()
	return aidu
}

// Mutation returns the AsInputDataMutation object of the builder.
func (aidu *AsInputDataUpdate) Mutation() *AsInputDataMutation {
	return aidu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aidu *AsInputDataUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	aidu.defaults()
	if len(aidu.hooks) == 0 {
		affected, err = aidu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsInputDataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aidu.mutation = mutation
			affected, err = aidu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(aidu.hooks) - 1; i >= 0; i-- {
			if aidu.hooks[i] == nil {
				return 0, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = aidu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aidu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (aidu *AsInputDataUpdate) SaveX(ctx context.Context) int {
	affected, err := aidu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aidu *AsInputDataUpdate) Exec(ctx context.Context) error {
	_, err := aidu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aidu *AsInputDataUpdate) ExecX(ctx context.Context) {
	if err := aidu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aidu *AsInputDataUpdate) defaults() {
	if _, ok := aidu.mutation.UpdateTime(); !ok && !aidu.mutation.UpdateTimeCleared() {
		v := asinputdata.UpdateDefaultUpdateTime()
		aidu.mutation.SetUpdateTime(v)
	}
}

func (aidu *AsInputDataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asinputdata.Table,
			Columns: asinputdata.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asinputdata.FieldID,
			},
		},
	}
	if ps := aidu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aidu.mutation.FileID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinputdata.FieldFileID,
		})
	}
	if value, ok := aidu.mutation.AddedFileID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinputdata.FieldFileID,
		})
	}
	if value, ok := aidu.mutation.FileName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asinputdata.FieldFileName,
		})
	}
	if value, ok := aidu.mutation.TableName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asinputdata.FieldTableName,
		})
	}
	if value, ok := aidu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinputdata.FieldType,
		})
	}
	if value, ok := aidu.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinputdata.FieldType,
		})
	}
	if aidu.mutation.TypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asinputdata.FieldType,
		})
	}
	if value, ok := aidu.mutation.TCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinputdata.FieldTCount,
		})
	}
	if value, ok := aidu.mutation.AddedTCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinputdata.FieldTCount,
		})
	}
	if aidu.mutation.TCountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asinputdata.FieldTCount,
		})
	}
	if value, ok := aidu.mutation.FCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinputdata.FieldFCount,
		})
	}
	if value, ok := aidu.mutation.AddedFCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinputdata.FieldFCount,
		})
	}
	if aidu.mutation.FCountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asinputdata.FieldFCount,
		})
	}
	if value, ok := aidu.mutation.Context(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asinputdata.FieldContext,
		})
	}
	if aidu.mutation.ContextCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asinputdata.FieldContext,
		})
	}
	if value, ok := aidu.mutation.EndTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asinputdata.FieldEndTime,
		})
	}
	if aidu.mutation.EndTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asinputdata.FieldEndTime,
		})
	}
	if value, ok := aidu.mutation.TotalTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinputdata.FieldTotalTime,
		})
	}
	if value, ok := aidu.mutation.AddedTotalTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinputdata.FieldTotalTime,
		})
	}
	if aidu.mutation.TotalTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asinputdata.FieldTotalTime,
		})
	}
	if value, ok := aidu.mutation.TenantCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asinputdata.FieldTenantCode,
		})
	}
	if aidu.mutation.TenantCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asinputdata.FieldTenantCode,
		})
	}
	if value, ok := aidu.mutation.ImportType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinputdata.FieldImportType,
		})
	}
	if value, ok := aidu.mutation.AddedImportType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinputdata.FieldImportType,
		})
	}
	if aidu.mutation.ImportTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asinputdata.FieldImportType,
		})
	}
	if value, ok := aidu.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinputdata.FieldIsDeleted,
		})
	}
	if value, ok := aidu.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinputdata.FieldIsDeleted,
		})
	}
	if value, ok := aidu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinputdata.FieldStatus,
		})
	}
	if value, ok := aidu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinputdata.FieldStatus,
		})
	}
	if aidu.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asinputdata.FieldStatus,
		})
	}
	if value, ok := aidu.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinputdata.FieldCreateUser,
		})
	}
	if value, ok := aidu.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinputdata.FieldCreateUser,
		})
	}
	if aidu.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asinputdata.FieldCreateUser,
		})
	}
	if value, ok := aidu.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinputdata.FieldUpdateUser,
		})
	}
	if value, ok := aidu.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinputdata.FieldUpdateUser,
		})
	}
	if aidu.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asinputdata.FieldUpdateUser,
		})
	}
	if aidu.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asinputdata.FieldCreateTime,
		})
	}
	if value, ok := aidu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asinputdata.FieldUpdateTime,
		})
	}
	if aidu.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asinputdata.FieldUpdateTime,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aidu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asinputdata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AsInputDataUpdateOne is the builder for updating a single AsInputData entity.
type AsInputDataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AsInputDataMutation
}

// SetFileID sets the "file_id" field.
func (aiduo *AsInputDataUpdateOne) SetFileID(i int64) *AsInputDataUpdateOne {
	aiduo.mutation.ResetFileID()
	aiduo.mutation.SetFileID(i)
	return aiduo
}

// AddFileID adds i to the "file_id" field.
func (aiduo *AsInputDataUpdateOne) AddFileID(i int64) *AsInputDataUpdateOne {
	aiduo.mutation.AddFileID(i)
	return aiduo
}

// SetFileName sets the "file_name" field.
func (aiduo *AsInputDataUpdateOne) SetFileName(s string) *AsInputDataUpdateOne {
	aiduo.mutation.SetFileName(s)
	return aiduo
}

// SetTableName sets the "table_name" field.
func (aiduo *AsInputDataUpdateOne) SetTableName(s string) *AsInputDataUpdateOne {
	aiduo.mutation.SetTableName(s)
	return aiduo
}

// SetType sets the "type" field.
func (aiduo *AsInputDataUpdateOne) SetType(i int64) *AsInputDataUpdateOne {
	aiduo.mutation.ResetType()
	aiduo.mutation.SetType(i)
	return aiduo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (aiduo *AsInputDataUpdateOne) SetNillableType(i *int64) *AsInputDataUpdateOne {
	if i != nil {
		aiduo.SetType(*i)
	}
	return aiduo
}

// AddType adds i to the "type" field.
func (aiduo *AsInputDataUpdateOne) AddType(i int64) *AsInputDataUpdateOne {
	aiduo.mutation.AddType(i)
	return aiduo
}

// ClearType clears the value of the "type" field.
func (aiduo *AsInputDataUpdateOne) ClearType() *AsInputDataUpdateOne {
	aiduo.mutation.ClearType()
	return aiduo
}

// SetTCount sets the "t_count" field.
func (aiduo *AsInputDataUpdateOne) SetTCount(i int64) *AsInputDataUpdateOne {
	aiduo.mutation.ResetTCount()
	aiduo.mutation.SetTCount(i)
	return aiduo
}

// SetNillableTCount sets the "t_count" field if the given value is not nil.
func (aiduo *AsInputDataUpdateOne) SetNillableTCount(i *int64) *AsInputDataUpdateOne {
	if i != nil {
		aiduo.SetTCount(*i)
	}
	return aiduo
}

// AddTCount adds i to the "t_count" field.
func (aiduo *AsInputDataUpdateOne) AddTCount(i int64) *AsInputDataUpdateOne {
	aiduo.mutation.AddTCount(i)
	return aiduo
}

// ClearTCount clears the value of the "t_count" field.
func (aiduo *AsInputDataUpdateOne) ClearTCount() *AsInputDataUpdateOne {
	aiduo.mutation.ClearTCount()
	return aiduo
}

// SetFCount sets the "f_count" field.
func (aiduo *AsInputDataUpdateOne) SetFCount(i int64) *AsInputDataUpdateOne {
	aiduo.mutation.ResetFCount()
	aiduo.mutation.SetFCount(i)
	return aiduo
}

// SetNillableFCount sets the "f_count" field if the given value is not nil.
func (aiduo *AsInputDataUpdateOne) SetNillableFCount(i *int64) *AsInputDataUpdateOne {
	if i != nil {
		aiduo.SetFCount(*i)
	}
	return aiduo
}

// AddFCount adds i to the "f_count" field.
func (aiduo *AsInputDataUpdateOne) AddFCount(i int64) *AsInputDataUpdateOne {
	aiduo.mutation.AddFCount(i)
	return aiduo
}

// ClearFCount clears the value of the "f_count" field.
func (aiduo *AsInputDataUpdateOne) ClearFCount() *AsInputDataUpdateOne {
	aiduo.mutation.ClearFCount()
	return aiduo
}

// SetContext sets the "context" field.
func (aiduo *AsInputDataUpdateOne) SetContext(s string) *AsInputDataUpdateOne {
	aiduo.mutation.SetContext(s)
	return aiduo
}

// SetNillableContext sets the "context" field if the given value is not nil.
func (aiduo *AsInputDataUpdateOne) SetNillableContext(s *string) *AsInputDataUpdateOne {
	if s != nil {
		aiduo.SetContext(*s)
	}
	return aiduo
}

// ClearContext clears the value of the "context" field.
func (aiduo *AsInputDataUpdateOne) ClearContext() *AsInputDataUpdateOne {
	aiduo.mutation.ClearContext()
	return aiduo
}

// SetEndTime sets the "end_time" field.
func (aiduo *AsInputDataUpdateOne) SetEndTime(dt date.DateTime) *AsInputDataUpdateOne {
	aiduo.mutation.SetEndTime(dt)
	return aiduo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (aiduo *AsInputDataUpdateOne) SetNillableEndTime(dt *date.DateTime) *AsInputDataUpdateOne {
	if dt != nil {
		aiduo.SetEndTime(*dt)
	}
	return aiduo
}

// ClearEndTime clears the value of the "end_time" field.
func (aiduo *AsInputDataUpdateOne) ClearEndTime() *AsInputDataUpdateOne {
	aiduo.mutation.ClearEndTime()
	return aiduo
}

// SetTotalTime sets the "total_time" field.
func (aiduo *AsInputDataUpdateOne) SetTotalTime(i int64) *AsInputDataUpdateOne {
	aiduo.mutation.ResetTotalTime()
	aiduo.mutation.SetTotalTime(i)
	return aiduo
}

// SetNillableTotalTime sets the "total_time" field if the given value is not nil.
func (aiduo *AsInputDataUpdateOne) SetNillableTotalTime(i *int64) *AsInputDataUpdateOne {
	if i != nil {
		aiduo.SetTotalTime(*i)
	}
	return aiduo
}

// AddTotalTime adds i to the "total_time" field.
func (aiduo *AsInputDataUpdateOne) AddTotalTime(i int64) *AsInputDataUpdateOne {
	aiduo.mutation.AddTotalTime(i)
	return aiduo
}

// ClearTotalTime clears the value of the "total_time" field.
func (aiduo *AsInputDataUpdateOne) ClearTotalTime() *AsInputDataUpdateOne {
	aiduo.mutation.ClearTotalTime()
	return aiduo
}

// SetTenantCode sets the "tenant_code" field.
func (aiduo *AsInputDataUpdateOne) SetTenantCode(s string) *AsInputDataUpdateOne {
	aiduo.mutation.SetTenantCode(s)
	return aiduo
}

// SetNillableTenantCode sets the "tenant_code" field if the given value is not nil.
func (aiduo *AsInputDataUpdateOne) SetNillableTenantCode(s *string) *AsInputDataUpdateOne {
	if s != nil {
		aiduo.SetTenantCode(*s)
	}
	return aiduo
}

// ClearTenantCode clears the value of the "tenant_code" field.
func (aiduo *AsInputDataUpdateOne) ClearTenantCode() *AsInputDataUpdateOne {
	aiduo.mutation.ClearTenantCode()
	return aiduo
}

// SetImportType sets the "import_type" field.
func (aiduo *AsInputDataUpdateOne) SetImportType(i int64) *AsInputDataUpdateOne {
	aiduo.mutation.ResetImportType()
	aiduo.mutation.SetImportType(i)
	return aiduo
}

// SetNillableImportType sets the "import_type" field if the given value is not nil.
func (aiduo *AsInputDataUpdateOne) SetNillableImportType(i *int64) *AsInputDataUpdateOne {
	if i != nil {
		aiduo.SetImportType(*i)
	}
	return aiduo
}

// AddImportType adds i to the "import_type" field.
func (aiduo *AsInputDataUpdateOne) AddImportType(i int64) *AsInputDataUpdateOne {
	aiduo.mutation.AddImportType(i)
	return aiduo
}

// ClearImportType clears the value of the "import_type" field.
func (aiduo *AsInputDataUpdateOne) ClearImportType() *AsInputDataUpdateOne {
	aiduo.mutation.ClearImportType()
	return aiduo
}

// SetIsDeleted sets the "is_deleted" field.
func (aiduo *AsInputDataUpdateOne) SetIsDeleted(i int64) *AsInputDataUpdateOne {
	aiduo.mutation.ResetIsDeleted()
	aiduo.mutation.SetIsDeleted(i)
	return aiduo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (aiduo *AsInputDataUpdateOne) SetNillableIsDeleted(i *int64) *AsInputDataUpdateOne {
	if i != nil {
		aiduo.SetIsDeleted(*i)
	}
	return aiduo
}

// AddIsDeleted adds i to the "is_deleted" field.
func (aiduo *AsInputDataUpdateOne) AddIsDeleted(i int64) *AsInputDataUpdateOne {
	aiduo.mutation.AddIsDeleted(i)
	return aiduo
}

// SetStatus sets the "status" field.
func (aiduo *AsInputDataUpdateOne) SetStatus(i int64) *AsInputDataUpdateOne {
	aiduo.mutation.ResetStatus()
	aiduo.mutation.SetStatus(i)
	return aiduo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (aiduo *AsInputDataUpdateOne) SetNillableStatus(i *int64) *AsInputDataUpdateOne {
	if i != nil {
		aiduo.SetStatus(*i)
	}
	return aiduo
}

// AddStatus adds i to the "status" field.
func (aiduo *AsInputDataUpdateOne) AddStatus(i int64) *AsInputDataUpdateOne {
	aiduo.mutation.AddStatus(i)
	return aiduo
}

// ClearStatus clears the value of the "status" field.
func (aiduo *AsInputDataUpdateOne) ClearStatus() *AsInputDataUpdateOne {
	aiduo.mutation.ClearStatus()
	return aiduo
}

// SetCreateUser sets the "create_user" field.
func (aiduo *AsInputDataUpdateOne) SetCreateUser(i int64) *AsInputDataUpdateOne {
	aiduo.mutation.ResetCreateUser()
	aiduo.mutation.SetCreateUser(i)
	return aiduo
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (aiduo *AsInputDataUpdateOne) SetNillableCreateUser(i *int64) *AsInputDataUpdateOne {
	if i != nil {
		aiduo.SetCreateUser(*i)
	}
	return aiduo
}

// AddCreateUser adds i to the "create_user" field.
func (aiduo *AsInputDataUpdateOne) AddCreateUser(i int64) *AsInputDataUpdateOne {
	aiduo.mutation.AddCreateUser(i)
	return aiduo
}

// ClearCreateUser clears the value of the "create_user" field.
func (aiduo *AsInputDataUpdateOne) ClearCreateUser() *AsInputDataUpdateOne {
	aiduo.mutation.ClearCreateUser()
	return aiduo
}

// SetUpdateUser sets the "update_user" field.
func (aiduo *AsInputDataUpdateOne) SetUpdateUser(i int64) *AsInputDataUpdateOne {
	aiduo.mutation.ResetUpdateUser()
	aiduo.mutation.SetUpdateUser(i)
	return aiduo
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (aiduo *AsInputDataUpdateOne) SetNillableUpdateUser(i *int64) *AsInputDataUpdateOne {
	if i != nil {
		aiduo.SetUpdateUser(*i)
	}
	return aiduo
}

// AddUpdateUser adds i to the "update_user" field.
func (aiduo *AsInputDataUpdateOne) AddUpdateUser(i int64) *AsInputDataUpdateOne {
	aiduo.mutation.AddUpdateUser(i)
	return aiduo
}

// ClearUpdateUser clears the value of the "update_user" field.
func (aiduo *AsInputDataUpdateOne) ClearUpdateUser() *AsInputDataUpdateOne {
	aiduo.mutation.ClearUpdateUser()
	return aiduo
}

// SetUpdateTime sets the "update_time" field.
func (aiduo *AsInputDataUpdateOne) SetUpdateTime(dt date.DateTime) *AsInputDataUpdateOne {
	aiduo.mutation.SetUpdateTime(dt)
	return aiduo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (aiduo *AsInputDataUpdateOne) ClearUpdateTime() *AsInputDataUpdateOne {
	aiduo.mutation.ClearUpdateTime()
	return aiduo
}

// Mutation returns the AsInputDataMutation object of the builder.
func (aiduo *AsInputDataUpdateOne) Mutation() *AsInputDataMutation {
	return aiduo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aiduo *AsInputDataUpdateOne) Select(field string, fields ...string) *AsInputDataUpdateOne {
	aiduo.fields = append([]string{field}, fields...)
	return aiduo
}

// Save executes the query and returns the updated AsInputData entity.
func (aiduo *AsInputDataUpdateOne) Save(ctx context.Context) (*AsInputData, error) {
	var (
		err  error
		node *AsInputData
	)
	aiduo.defaults()
	if len(aiduo.hooks) == 0 {
		node, err = aiduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsInputDataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aiduo.mutation = mutation
			node, err = aiduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aiduo.hooks) - 1; i >= 0; i-- {
			if aiduo.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = aiduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aiduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aiduo *AsInputDataUpdateOne) SaveX(ctx context.Context) *AsInputData {
	node, err := aiduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aiduo *AsInputDataUpdateOne) Exec(ctx context.Context) error {
	_, err := aiduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aiduo *AsInputDataUpdateOne) ExecX(ctx context.Context) {
	if err := aiduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aiduo *AsInputDataUpdateOne) defaults() {
	if _, ok := aiduo.mutation.UpdateTime(); !ok && !aiduo.mutation.UpdateTimeCleared() {
		v := asinputdata.UpdateDefaultUpdateTime()
		aiduo.mutation.SetUpdateTime(v)
	}
}

func (aiduo *AsInputDataUpdateOne) sqlSave(ctx context.Context) (_node *AsInputData, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asinputdata.Table,
			Columns: asinputdata.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asinputdata.FieldID,
			},
		},
	}
	id, ok := aiduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`schema: missing "AsInputData.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aiduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asinputdata.FieldID)
		for _, f := range fields {
			if !asinputdata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("schema: invalid field %q for query", f)}
			}
			if f != asinputdata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aiduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aiduo.mutation.FileID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinputdata.FieldFileID,
		})
	}
	if value, ok := aiduo.mutation.AddedFileID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinputdata.FieldFileID,
		})
	}
	if value, ok := aiduo.mutation.FileName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asinputdata.FieldFileName,
		})
	}
	if value, ok := aiduo.mutation.TableName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asinputdata.FieldTableName,
		})
	}
	if value, ok := aiduo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinputdata.FieldType,
		})
	}
	if value, ok := aiduo.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinputdata.FieldType,
		})
	}
	if aiduo.mutation.TypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asinputdata.FieldType,
		})
	}
	if value, ok := aiduo.mutation.TCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinputdata.FieldTCount,
		})
	}
	if value, ok := aiduo.mutation.AddedTCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinputdata.FieldTCount,
		})
	}
	if aiduo.mutation.TCountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asinputdata.FieldTCount,
		})
	}
	if value, ok := aiduo.mutation.FCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinputdata.FieldFCount,
		})
	}
	if value, ok := aiduo.mutation.AddedFCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinputdata.FieldFCount,
		})
	}
	if aiduo.mutation.FCountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asinputdata.FieldFCount,
		})
	}
	if value, ok := aiduo.mutation.Context(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asinputdata.FieldContext,
		})
	}
	if aiduo.mutation.ContextCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asinputdata.FieldContext,
		})
	}
	if value, ok := aiduo.mutation.EndTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asinputdata.FieldEndTime,
		})
	}
	if aiduo.mutation.EndTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asinputdata.FieldEndTime,
		})
	}
	if value, ok := aiduo.mutation.TotalTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinputdata.FieldTotalTime,
		})
	}
	if value, ok := aiduo.mutation.AddedTotalTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinputdata.FieldTotalTime,
		})
	}
	if aiduo.mutation.TotalTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asinputdata.FieldTotalTime,
		})
	}
	if value, ok := aiduo.mutation.TenantCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asinputdata.FieldTenantCode,
		})
	}
	if aiduo.mutation.TenantCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asinputdata.FieldTenantCode,
		})
	}
	if value, ok := aiduo.mutation.ImportType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinputdata.FieldImportType,
		})
	}
	if value, ok := aiduo.mutation.AddedImportType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinputdata.FieldImportType,
		})
	}
	if aiduo.mutation.ImportTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asinputdata.FieldImportType,
		})
	}
	if value, ok := aiduo.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinputdata.FieldIsDeleted,
		})
	}
	if value, ok := aiduo.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinputdata.FieldIsDeleted,
		})
	}
	if value, ok := aiduo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinputdata.FieldStatus,
		})
	}
	if value, ok := aiduo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinputdata.FieldStatus,
		})
	}
	if aiduo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asinputdata.FieldStatus,
		})
	}
	if value, ok := aiduo.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinputdata.FieldCreateUser,
		})
	}
	if value, ok := aiduo.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinputdata.FieldCreateUser,
		})
	}
	if aiduo.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asinputdata.FieldCreateUser,
		})
	}
	if value, ok := aiduo.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinputdata.FieldUpdateUser,
		})
	}
	if value, ok := aiduo.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinputdata.FieldUpdateUser,
		})
	}
	if aiduo.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asinputdata.FieldUpdateUser,
		})
	}
	if aiduo.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asinputdata.FieldCreateTime,
		})
	}
	if value, ok := aiduo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asinputdata.FieldUpdateTime,
		})
	}
	if aiduo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asinputdata.FieldUpdateTime,
		})
	}
	_node = &AsInputData{config: aiduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aiduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asinputdata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
