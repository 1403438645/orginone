// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"
	"orginone/common/schema/astenantattr"
	"orginone/common/schema/astenantattrrole"
	"orginone/common/schema/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsTenantAttrQuery is the builder for querying AsTenantAttr entities.
type AsTenantAttrQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.AsTenantAttr
	// eager-loading edges.
	withParentx   *AsTenantAttrQuery
	withChildrens *AsTenantAttrQuery
	withAttrRoles *AsTenantAttrRoleQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AsTenantAttrQuery builder.
func (ataq *AsTenantAttrQuery) Where(ps ...predicate.AsTenantAttr) *AsTenantAttrQuery {
	ataq.predicates = append(ataq.predicates, ps...)
	return ataq
}

// Limit adds a limit step to the query.
func (ataq *AsTenantAttrQuery) Limit(limit int) *AsTenantAttrQuery {
	ataq.limit = &limit
	return ataq
}

// Offset adds an offset step to the query.
func (ataq *AsTenantAttrQuery) Offset(offset int) *AsTenantAttrQuery {
	ataq.offset = &offset
	return ataq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ataq *AsTenantAttrQuery) Unique(unique bool) *AsTenantAttrQuery {
	ataq.unique = &unique
	return ataq
}

// Order adds an order step to the query.
func (ataq *AsTenantAttrQuery) Order(o ...OrderFunc) *AsTenantAttrQuery {
	ataq.order = append(ataq.order, o...)
	return ataq
}

// QueryParentx chains the current query on the "parentx" edge.
func (ataq *AsTenantAttrQuery) QueryParentx() *AsTenantAttrQuery {
	query := &AsTenantAttrQuery{config: ataq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ataq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ataq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(astenantattr.Table, astenantattr.FieldID, selector),
			sqlgraph.To(astenantattr.Table, astenantattr.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, astenantattr.ParentxTable, astenantattr.ParentxColumn),
		)
		fromU = sqlgraph.SetNeighbors(ataq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChildrens chains the current query on the "childrens" edge.
func (ataq *AsTenantAttrQuery) QueryChildrens() *AsTenantAttrQuery {
	query := &AsTenantAttrQuery{config: ataq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ataq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ataq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(astenantattr.Table, astenantattr.FieldID, selector),
			sqlgraph.To(astenantattr.Table, astenantattr.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, astenantattr.ChildrensTable, astenantattr.ChildrensColumn),
		)
		fromU = sqlgraph.SetNeighbors(ataq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAttrRoles chains the current query on the "attrRoles" edge.
func (ataq *AsTenantAttrQuery) QueryAttrRoles() *AsTenantAttrRoleQuery {
	query := &AsTenantAttrRoleQuery{config: ataq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ataq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ataq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(astenantattr.Table, astenantattr.FieldID, selector),
			sqlgraph.To(astenantattrrole.Table, astenantattrrole.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, astenantattr.AttrRolesTable, astenantattr.AttrRolesColumn),
		)
		fromU = sqlgraph.SetNeighbors(ataq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AsTenantAttr entity from the query.
// Returns a *NotFoundError when no AsTenantAttr was found.
func (ataq *AsTenantAttrQuery) First(ctx context.Context) (*AsTenantAttr, error) {
	nodes, err := ataq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{astenantattr.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ataq *AsTenantAttrQuery) FirstX(ctx context.Context) *AsTenantAttr {
	node, err := ataq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AsTenantAttr ID from the query.
// Returns a *NotFoundError when no AsTenantAttr ID was found.
func (ataq *AsTenantAttrQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = ataq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{astenantattr.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ataq *AsTenantAttrQuery) FirstIDX(ctx context.Context) int64 {
	id, err := ataq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AsTenantAttr entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AsTenantAttr entity is found.
// Returns a *NotFoundError when no AsTenantAttr entities are found.
func (ataq *AsTenantAttrQuery) Only(ctx context.Context) (*AsTenantAttr, error) {
	nodes, err := ataq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{astenantattr.Label}
	default:
		return nil, &NotSingularError{astenantattr.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ataq *AsTenantAttrQuery) OnlyX(ctx context.Context) *AsTenantAttr {
	node, err := ataq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AsTenantAttr ID in the query.
// Returns a *NotSingularError when more than one AsTenantAttr ID is found.
// Returns a *NotFoundError when no entities are found.
func (ataq *AsTenantAttrQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = ataq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{astenantattr.Label}
	default:
		err = &NotSingularError{astenantattr.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ataq *AsTenantAttrQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := ataq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AsTenantAttrs.
func (ataq *AsTenantAttrQuery) All(ctx context.Context) ([]*AsTenantAttr, error) {
	if err := ataq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return ataq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (ataq *AsTenantAttrQuery) AllX(ctx context.Context) []*AsTenantAttr {
	nodes, err := ataq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AsTenantAttr IDs.
func (ataq *AsTenantAttrQuery) IDs(ctx context.Context) ([]int64, error) {
	var ids []int64
	if err := ataq.Select(astenantattr.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ataq *AsTenantAttrQuery) IDsX(ctx context.Context) []int64 {
	ids, err := ataq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ataq *AsTenantAttrQuery) Count(ctx context.Context) (int64, error) {
	if err := ataq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return ataq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (ataq *AsTenantAttrQuery) CountX(ctx context.Context) int64 {
	count, err := ataq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ataq *AsTenantAttrQuery) Exist(ctx context.Context) (bool, error) {
	if err := ataq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return ataq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (ataq *AsTenantAttrQuery) ExistX(ctx context.Context) bool {
	exist, err := ataq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AsTenantAttrQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ataq *AsTenantAttrQuery) Clone() *AsTenantAttrQuery {
	if ataq == nil {
		return nil
	}
	return &AsTenantAttrQuery{
		config:        ataq.config,
		limit:         ataq.limit,
		offset:        ataq.offset,
		order:         append([]OrderFunc{}, ataq.order...),
		predicates:    append([]predicate.AsTenantAttr{}, ataq.predicates...),
		withParentx:   ataq.withParentx.Clone(),
		withChildrens: ataq.withChildrens.Clone(),
		withAttrRoles: ataq.withAttrRoles.Clone(),
		// clone intermediate query.
		sql:    ataq.sql.Clone(),
		path:   ataq.path,
		unique: ataq.unique,
	}
}

// WithParentx tells the query-builder to eager-load the nodes that are connected to
// the "parentx" edge. The optional arguments are used to configure the query builder of the edge.
func (ataq *AsTenantAttrQuery) WithParentx(opts ...func(*AsTenantAttrQuery)) *AsTenantAttrQuery {
	query := &AsTenantAttrQuery{config: ataq.config}
	for _, opt := range opts {
		opt(query)
	}
	ataq.withParentx = query
	return ataq
}

// WithChildrens tells the query-builder to eager-load the nodes that are connected to
// the "childrens" edge. The optional arguments are used to configure the query builder of the edge.
func (ataq *AsTenantAttrQuery) WithChildrens(opts ...func(*AsTenantAttrQuery)) *AsTenantAttrQuery {
	query := &AsTenantAttrQuery{config: ataq.config}
	for _, opt := range opts {
		opt(query)
	}
	ataq.withChildrens = query
	return ataq
}

// WithAttrRoles tells the query-builder to eager-load the nodes that are connected to
// the "attrRoles" edge. The optional arguments are used to configure the query builder of the edge.
func (ataq *AsTenantAttrQuery) WithAttrRoles(opts ...func(*AsTenantAttrRoleQuery)) *AsTenantAttrQuery {
	query := &AsTenantAttrRoleQuery{config: ataq.config}
	for _, opt := range opts {
		opt(query)
	}
	ataq.withAttrRoles = query
	return ataq
}

// ThenParentx tells the query-builder to eager-load the nodes that are connected to
// the "parentx" edge. The optional arguments are used to configure the query builder of the edge.
func (ataq *AsTenantAttrQuery) ThenParentx(opts ...func(*AsTenantAttrQuery)) *AsTenantAttrQuery {
	query := &AsTenantAttrQuery{config: ataq.config}
	for _, opt := range opts {
		opt(query.Where(astenantattr.IsDeleted(0)))
	}
	ataq.withParentx = query
	return ataq
}

// ThenChildrens tells the query-builder to eager-load the nodes that are connected to
// the "childrens" edge. The optional arguments are used to configure the query builder of the edge.
func (ataq *AsTenantAttrQuery) ThenChildrens(opts ...func(*AsTenantAttrQuery)) *AsTenantAttrQuery {
	query := &AsTenantAttrQuery{config: ataq.config}
	for _, opt := range opts {
		opt(query.Where(astenantattr.IsDeleted(0)))
	}
	ataq.withChildrens = query
	return ataq
}

// ThenAttrRoles tells the query-builder to eager-load the nodes that are connected to
// the "attrRoles" edge. The optional arguments are used to configure the query builder of the edge.
func (ataq *AsTenantAttrQuery) ThenAttrRoles(opts ...func(*AsTenantAttrRoleQuery)) *AsTenantAttrQuery {
	query := &AsTenantAttrRoleQuery{config: ataq.config}
	for _, opt := range opts {
		opt(query.Where(astenantattrrole.IsDeleted(0)))
	}
	ataq.withAttrRoles = query
	return ataq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ParentID int64 `json:"parentId,string"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AsTenantAttr.Query().
//		GroupBy(astenantattr.FieldParentID).
//		Aggregate(schema.Count()).
//		Scan(ctx, &v)
//
func (ataq *AsTenantAttrQuery) GroupBy(field string, fields ...string) *AsTenantAttrGroupBy {
	group := &AsTenantAttrGroupBy{config: ataq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := ataq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return ataq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ParentID int64 `json:"parentId,string"`
//	}
//
//	client.AsTenantAttr.Query().
//		Select(astenantattr.FieldParentID).
//		Scan(ctx, &v)
//
func (ataq *AsTenantAttrQuery) Select(fields ...string) *AsTenantAttrSelect {
	ataq.fields = append(ataq.fields, fields...)
	return &AsTenantAttrSelect{AsTenantAttrQuery: ataq}
}

func (ataq *AsTenantAttrQuery) prepareQuery(ctx context.Context) error {
	for _, f := range ataq.fields {
		if !astenantattr.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("schema: invalid field %q for query", f)}
		}
	}
	if ataq.path != nil {
		prev, err := ataq.path(ctx)
		if err != nil {
			return err
		}
		ataq.sql = prev
	}
	return nil
}

func (ataq *AsTenantAttrQuery) sqlAll(ctx context.Context) ([]*AsTenantAttr, error) {
	var (
		nodes       = []*AsTenantAttr{}
		_spec       = ataq.querySpec()
		loadedTypes = [3]bool{
			ataq.withParentx != nil,
			ataq.withChildrens != nil,
			ataq.withAttrRoles != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &AsTenantAttr{config: ataq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("schema: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, ataq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := ataq.withParentx; query != nil {
		ids := make([]int64, 0, len(nodes))
		nodeids := make(map[int64][]*AsTenantAttr)
		for i := range nodes {
			fk := nodes[i].ParentID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(astenantattr.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "parent_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Parentx = n
			}
		}
	}

	if query := ataq.withChildrens; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int64]*AsTenantAttr)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Childrens = []*AsTenantAttr{}
		}
		query.Where(predicate.AsTenantAttr(func(s *sql.Selector) {
			s.Where(sql.InValues(astenantattr.ChildrensColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.ParentID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "parent_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.Childrens = append(node.Edges.Childrens, n)
		}
	}

	if query := ataq.withAttrRoles; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int64]*AsTenantAttr)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.AttrRoles = []*AsTenantAttrRole{}
		}
		query.Where(predicate.AsTenantAttrRole(func(s *sql.Selector) {
			s.Where(sql.InValues(astenantattr.AttrRolesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.AttrID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "attr_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.AttrRoles = append(node.Edges.AttrRoles, n)
		}
	}

	return nodes, nil
}

func (ataq *AsTenantAttrQuery) sqlCount(ctx context.Context) (int64, error) {
	_spec := ataq.querySpec()
	_spec.Node.Columns = ataq.fields
	if len(ataq.fields) > 0 {
		_spec.Unique = ataq.unique != nil && *ataq.unique
	}
	c, err := sqlgraph.CountNodes(ctx, ataq.driver, _spec)
	return int64(c), err
}

func (ataq *AsTenantAttrQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := ataq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("schema: check existence: %w", err)
	}
	return n > 0, nil
}

func (ataq *AsTenantAttrQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   astenantattr.Table,
			Columns: astenantattr.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: astenantattr.FieldID,
			},
		},
		From:   ataq.sql,
		Unique: true,
	}
	if unique := ataq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := ataq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, astenantattr.FieldID)
		for i := range fields {
			if fields[i] != astenantattr.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ataq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ataq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ataq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ataq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ataq *AsTenantAttrQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ataq.driver.Dialect())
	t1 := builder.Table(astenantattr.Table)
	columns := ataq.fields
	if len(columns) == 0 {
		columns = astenantattr.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ataq.sql != nil {
		selector = ataq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ataq.unique != nil && *ataq.unique {
		selector.Distinct()
	}
	for _, p := range ataq.predicates {
		p(selector)
	}
	for _, p := range ataq.order {
		p(selector)
	}
	if offset := ataq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ataq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AsTenantAttrGroupBy is the group-by builder for AsTenantAttr entities.
type AsTenantAttrGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (atagb *AsTenantAttrGroupBy) Aggregate(fns ...AggregateFunc) *AsTenantAttrGroupBy {
	atagb.fns = append(atagb.fns, fns...)
	return atagb
}

// Scan applies the group-by query and scans the result into the given value.
func (atagb *AsTenantAttrGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := atagb.path(ctx)
	if err != nil {
		return err
	}
	atagb.sql = query
	return atagb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (atagb *AsTenantAttrGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := atagb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (atagb *AsTenantAttrGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(atagb.fields) > 1 {
		return nil, errors.New("schema: AsTenantAttrGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := atagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (atagb *AsTenantAttrGroupBy) StringsX(ctx context.Context) []string {
	v, err := atagb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (atagb *AsTenantAttrGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = atagb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{astenantattr.Label}
	default:
		err = fmt.Errorf("schema: AsTenantAttrGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (atagb *AsTenantAttrGroupBy) StringX(ctx context.Context) string {
	v, err := atagb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (atagb *AsTenantAttrGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(atagb.fields) > 1 {
		return nil, errors.New("schema: AsTenantAttrGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := atagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (atagb *AsTenantAttrGroupBy) IntsX(ctx context.Context) []int {
	v, err := atagb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (atagb *AsTenantAttrGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = atagb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{astenantattr.Label}
	default:
		err = fmt.Errorf("schema: AsTenantAttrGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (atagb *AsTenantAttrGroupBy) IntX(ctx context.Context) int {
	v, err := atagb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (atagb *AsTenantAttrGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(atagb.fields) > 1 {
		return nil, errors.New("schema: AsTenantAttrGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := atagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (atagb *AsTenantAttrGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := atagb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (atagb *AsTenantAttrGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = atagb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{astenantattr.Label}
	default:
		err = fmt.Errorf("schema: AsTenantAttrGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (atagb *AsTenantAttrGroupBy) Float64X(ctx context.Context) float64 {
	v, err := atagb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (atagb *AsTenantAttrGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(atagb.fields) > 1 {
		return nil, errors.New("schema: AsTenantAttrGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := atagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (atagb *AsTenantAttrGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := atagb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (atagb *AsTenantAttrGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = atagb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{astenantattr.Label}
	default:
		err = fmt.Errorf("schema: AsTenantAttrGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (atagb *AsTenantAttrGroupBy) BoolX(ctx context.Context) bool {
	v, err := atagb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64s returns list of int64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (atagb *AsTenantAttrGroupBy) Int64s(ctx context.Context) ([]int64, error) {
	if len(atagb.fields) > 1 {
		return nil, errors.New("schema: AsTenantAttrGroupBy.Int64s is not achievable when grouping more than 1 field")
	}
	var v []int64
	if err := atagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Int64sX is like Int64s, but panics if an error occurs.
func (atagb *AsTenantAttrGroupBy) Int64sX(ctx context.Context) []int64 {
	v, err := atagb.Int64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64 returns a single int64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (atagb *AsTenantAttrGroupBy) Int64(ctx context.Context) (_ int64, err error) {
	var v []int64
	if v, err = atagb.Int64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{astenantattr.Label}
	default:
		err = fmt.Errorf("schema: AsTenantAttrGroupBy.Int64s returned %d results when one was expected", len(v))
	}
	return
}

// Int64X is like Int64, but panics if an error occurs.
func (atagb *AsTenantAttrGroupBy) Int64X(ctx context.Context) int64 {
	v, err := atagb.Int64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (atagb *AsTenantAttrGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range atagb.fields {
		if !astenantattr.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := atagb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := atagb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (atagb *AsTenantAttrGroupBy) sqlQuery() *sql.Selector {
	selector := atagb.sql.Select()
	aggregation := make([]string, 0, len(atagb.fns))
	for _, fn := range atagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(atagb.fields)+len(atagb.fns))
		for _, f := range atagb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(atagb.fields...)...)
}

// AsTenantAttrSelect is the builder for selecting fields of AsTenantAttr entities.
type AsTenantAttrSelect struct {
	*AsTenantAttrQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (atas *AsTenantAttrSelect) Scan(ctx context.Context, v interface{}) error {
	if err := atas.prepareQuery(ctx); err != nil {
		return err
	}
	atas.sql = atas.AsTenantAttrQuery.sqlQuery(ctx)
	return atas.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (atas *AsTenantAttrSelect) ScanX(ctx context.Context, v interface{}) {
	if err := atas.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (atas *AsTenantAttrSelect) Strings(ctx context.Context) ([]string, error) {
	if len(atas.fields) > 1 {
		return nil, errors.New("schema: AsTenantAttrSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := atas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (atas *AsTenantAttrSelect) StringsX(ctx context.Context) []string {
	v, err := atas.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (atas *AsTenantAttrSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = atas.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{astenantattr.Label}
	default:
		err = fmt.Errorf("schema: AsTenantAttrSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (atas *AsTenantAttrSelect) StringX(ctx context.Context) string {
	v, err := atas.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (atas *AsTenantAttrSelect) Ints(ctx context.Context) ([]int, error) {
	if len(atas.fields) > 1 {
		return nil, errors.New("schema: AsTenantAttrSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := atas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (atas *AsTenantAttrSelect) IntsX(ctx context.Context) []int {
	v, err := atas.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (atas *AsTenantAttrSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = atas.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{astenantattr.Label}
	default:
		err = fmt.Errorf("schema: AsTenantAttrSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (atas *AsTenantAttrSelect) IntX(ctx context.Context) int {
	v, err := atas.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (atas *AsTenantAttrSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(atas.fields) > 1 {
		return nil, errors.New("schema: AsTenantAttrSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := atas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (atas *AsTenantAttrSelect) Float64sX(ctx context.Context) []float64 {
	v, err := atas.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (atas *AsTenantAttrSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = atas.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{astenantattr.Label}
	default:
		err = fmt.Errorf("schema: AsTenantAttrSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (atas *AsTenantAttrSelect) Float64X(ctx context.Context) float64 {
	v, err := atas.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (atas *AsTenantAttrSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(atas.fields) > 1 {
		return nil, errors.New("schema: AsTenantAttrSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := atas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (atas *AsTenantAttrSelect) BoolsX(ctx context.Context) []bool {
	v, err := atas.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (atas *AsTenantAttrSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = atas.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{astenantattr.Label}
	default:
		err = fmt.Errorf("schema: AsTenantAttrSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (atas *AsTenantAttrSelect) BoolX(ctx context.Context) bool {
	v, err := atas.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64s returns list of int64s from a selector. It is only allowed when selecting one field.
func (atas *AsTenantAttrSelect) Int64s(ctx context.Context) ([]int64, error) {
	if len(atas.fields) > 1 {
		return nil, errors.New("schema: AsTenantAttrSelect.Int64s is not achievable when selecting more than 1 field")
	}
	var v []int64
	if err := atas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Int64sX is like Int64s, but panics if an error occurs.
func (atas *AsTenantAttrSelect) Int64sX(ctx context.Context) []int64 {
	v, err := atas.Int64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64 returns a single int64 from a selector. It is only allowed when selecting one field.
func (atas *AsTenantAttrSelect) Int64(ctx context.Context) (_ int64, err error) {
	var v []int64
	if v, err = atas.Int64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{astenantattr.Label}
	default:
		err = fmt.Errorf("schema: AsTenantAttrSelect.Int64s returned %d results when one was expected", len(v))
	}
	return
}

// Int64X is like Int64, but panics if an error occurs.
func (atas *AsTenantAttrSelect) Int64X(ctx context.Context) int64 {
	v, err := atas.Int64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (atas *AsTenantAttrSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := atas.sql.Query()
	if err := atas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
