// Code generated by entc, DO NOT EDIT.

package schema

import (
	"fmt"
	"orginone/common/schema/asperson"
	"orginone/common/schema/asuser"
	"orginone/common/tools/date"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// AsPerson is the model entity for the AsPerson schema.
type AsPerson struct {
	config `json:"-"`
	// ID of the ent.
	// 主键
	ID int64 `json:"id,string"`
	// TenantCode holds the value of the "tenant_code" field.
	// 租户名称
	TenantCode string `json:"tenantCode"`
	// RealName holds the value of the "real_name" field.
	// 姓名
	RealName string `json:"realName"`
	// IDCard holds the value of the "id_card" field.
	// 身份证号
	IDCard string `json:"idCard"`
	// Gender holds the value of the "gender" field.
	// 性别;1、男2、女
	Gender int64 `json:"gender"`
	// UserBirthday holds the value of the "user_birthday" field.
	// 出生日期
	UserBirthday date.DateTime `json:"userBirthday"`
	// UserEmail holds the value of the "user_email" field.
	// 邮箱号码
	UserEmail string `json:"userEmail"`
	// UserPhoto holds the value of the "user_photo" field.
	// 照片
	UserPhoto string `json:"userPhoto"`
	// UserID holds the value of the "user_id" field.
	// 对应用户id
	UserID int64 `json:"userId,string"`
	// PhoneNumber holds the value of the "phone_number" field.
	// 手机号码
	PhoneNumber string `json:"phoneNumber"`
	// Province holds the value of the "province" field.
	// 省
	Province string `json:"province"`
	// City holds the value of the "city" field.
	// 市
	City string `json:"city"`
	// StreetAddress holds the value of the "street_address" field.
	// 地区
	StreetAddress string `json:"streetAddress"`
	// UserCode holds the value of the "user_code" field.
	// 用户code
	UserCode string `json:"userCode"`
	// IsMaster holds the value of the "is_master" field.
	// 是否是主单位(0-否,1-是)
	IsMaster int64 `json:"isMaster"`
	// IsDeleted holds the value of the "is_deleted" field.
	// 是否被删除
	IsDeleted int64 `json:"isDeleted"`
	// Status holds the value of the "status" field.
	// 状态
	Status int64 `json:"status"`
	// CreateUser holds the value of the "create_user" field.
	// 创建用户
	CreateUser int64 `json:"createUser"`
	// UpdateUser holds the value of the "update_user" field.
	// 更新用户
	UpdateUser int64 `json:"updateUser"`
	// CreateTime holds the value of the "create_time" field.
	// 创建时间
	CreateTime date.DateTime `json:"createTime"`
	// UpdateTime holds the value of the "update_time" field.
	// 更新时间
	UpdateTime date.DateTime `json:"updateTime"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AsPersonQuery when eager-loading is set.
	Edges AsPersonEdges `json:"edges"`
}

// AsPersonEdges holds the relations/edges for other nodes in the graph.
type AsPersonEdges struct {
	// Userx holds the value of the userx edge.
	Userx *AsUser `json:"userx"`
	// Agencys holds the value of the agencys edge.
	Agencys []*AsInnerAgency `json:"agencys"`
	// Jobs holds the value of the jobs edge.
	Jobs []*AsJob `json:"jobs"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserxOrErr returns the Userx value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AsPersonEdges) UserxOrErr() (*AsUser, error) {
	if e.loadedTypes[0] {
		if e.Userx == nil {
			// The edge userx was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: asuser.Label}
		}
		return e.Userx, nil
	}
	return nil, &NotLoadedError{edge: "userx"}
}

// AgencysOrErr returns the Agencys value or an error if the edge
// was not loaded in eager-loading.
func (e AsPersonEdges) AgencysOrErr() ([]*AsInnerAgency, error) {
	if e.loadedTypes[1] {
		return e.Agencys, nil
	}
	return nil, &NotLoadedError{edge: "agencys"}
}

// JobsOrErr returns the Jobs value or an error if the edge
// was not loaded in eager-loading.
func (e AsPersonEdges) JobsOrErr() ([]*AsJob, error) {
	if e.loadedTypes[2] {
		return e.Jobs, nil
	}
	return nil, &NotLoadedError{edge: "jobs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AsPerson) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case asperson.FieldID, asperson.FieldGender, asperson.FieldUserID, asperson.FieldIsMaster, asperson.FieldIsDeleted, asperson.FieldStatus, asperson.FieldCreateUser, asperson.FieldUpdateUser:
			values[i] = new(sql.NullInt64)
		case asperson.FieldTenantCode, asperson.FieldRealName, asperson.FieldIDCard, asperson.FieldUserEmail, asperson.FieldUserPhoto, asperson.FieldPhoneNumber, asperson.FieldProvince, asperson.FieldCity, asperson.FieldStreetAddress, asperson.FieldUserCode:
			values[i] = new(sql.NullString)
		case asperson.FieldUserBirthday, asperson.FieldCreateTime, asperson.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AsPerson", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AsPerson fields.
func (ap *AsPerson) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case asperson.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ap.ID = int64(value.Int64)
		case asperson.FieldTenantCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_code", values[i])
			} else if value.Valid {
				ap.TenantCode = value.String
			}
		case asperson.FieldRealName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field real_name", values[i])
			} else if value.Valid {
				ap.RealName = value.String
			}
		case asperson.FieldIDCard:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id_card", values[i])
			} else if value.Valid {
				ap.IDCard = value.String
			}
		case asperson.FieldGender:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				ap.Gender = value.Int64
			}
		case asperson.FieldUserBirthday:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field user_birthday", values[i])
			} else if value.Valid {
				ap.UserBirthday = date.DateTime(value.Time)
			}
		case asperson.FieldUserEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_email", values[i])
			} else if value.Valid {
				ap.UserEmail = value.String
			}
		case asperson.FieldUserPhoto:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_photo", values[i])
			} else if value.Valid {
				ap.UserPhoto = value.String
			}
		case asperson.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ap.UserID = value.Int64
			}
		case asperson.FieldPhoneNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone_number", values[i])
			} else if value.Valid {
				ap.PhoneNumber = value.String
			}
		case asperson.FieldProvince:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field province", values[i])
			} else if value.Valid {
				ap.Province = value.String
			}
		case asperson.FieldCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field city", values[i])
			} else if value.Valid {
				ap.City = value.String
			}
		case asperson.FieldStreetAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field street_address", values[i])
			} else if value.Valid {
				ap.StreetAddress = value.String
			}
		case asperson.FieldUserCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_code", values[i])
			} else if value.Valid {
				ap.UserCode = value.String
			}
		case asperson.FieldIsMaster:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_master", values[i])
			} else if value.Valid {
				ap.IsMaster = value.Int64
			}
		case asperson.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				ap.IsDeleted = value.Int64
			}
		case asperson.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ap.Status = value.Int64
			}
		case asperson.FieldCreateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_user", values[i])
			} else if value.Valid {
				ap.CreateUser = value.Int64
			}
		case asperson.FieldUpdateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_user", values[i])
			} else if value.Valid {
				ap.UpdateUser = value.Int64
			}
		case asperson.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ap.CreateTime = date.DateTime(value.Time)
			}
		case asperson.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ap.UpdateTime = date.DateTime(value.Time)
			}
		}
	}
	return nil
}

// QueryUserx queries the "userx" edge of the AsPerson entity.
func (ap *AsPerson) QueryUserx() *AsUserQuery {
	return (&AsPersonClient{config: ap.config}).QueryUserx(ap)
}

// QueryAgencys queries the "agencys" edge of the AsPerson entity.
func (ap *AsPerson) QueryAgencys() *AsInnerAgencyQuery {
	return (&AsPersonClient{config: ap.config}).QueryAgencys(ap)
}

// QueryJobs queries the "jobs" edge of the AsPerson entity.
func (ap *AsPerson) QueryJobs() *AsJobQuery {
	return (&AsPersonClient{config: ap.config}).QueryJobs(ap)
}

// Update returns a builder for updating this AsPerson.
// Note that you need to call AsPerson.Unwrap() before calling this method if this AsPerson
// was returned from a transaction, and the transaction was committed or rolled back.
func (ap *AsPerson) Update() *AsPersonUpdateOne {
	return (&AsPersonClient{config: ap.config}).UpdateOne(ap)
}

// Unwrap unwraps the AsPerson entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ap *AsPerson) Unwrap() *AsPerson {
	tx, ok := ap.config.driver.(*txDriver)
	if !ok {
		panic("schema: AsPerson is not a transactional entity")
	}
	ap.config.driver = tx.drv
	return ap
}

// String implements the fmt.Stringer.
func (ap *AsPerson) String() string {
	var builder strings.Builder
	builder.WriteString("AsPerson(")
	builder.WriteString(fmt.Sprintf("id=%v", ap.ID))
	builder.WriteString(", tenant_code=")
	builder.WriteString(ap.TenantCode)
	builder.WriteString(", real_name=")
	builder.WriteString(ap.RealName)
	builder.WriteString(", id_card=")
	builder.WriteString(ap.IDCard)
	builder.WriteString(", gender=")
	builder.WriteString(fmt.Sprintf("%v", ap.Gender))
	builder.WriteString(", user_birthday=")
	builder.WriteString(fmt.Sprintf("%v", ap.UserBirthday))
	builder.WriteString(", user_email=")
	builder.WriteString(ap.UserEmail)
	builder.WriteString(", user_photo=")
	builder.WriteString(ap.UserPhoto)
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", ap.UserID))
	builder.WriteString(", phone_number=")
	builder.WriteString(ap.PhoneNumber)
	builder.WriteString(", province=")
	builder.WriteString(ap.Province)
	builder.WriteString(", city=")
	builder.WriteString(ap.City)
	builder.WriteString(", street_address=")
	builder.WriteString(ap.StreetAddress)
	builder.WriteString(", user_code=")
	builder.WriteString(ap.UserCode)
	builder.WriteString(", is_master=")
	builder.WriteString(fmt.Sprintf("%v", ap.IsMaster))
	builder.WriteString(", is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", ap.IsDeleted))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", ap.Status))
	builder.WriteString(", create_user=")
	builder.WriteString(fmt.Sprintf("%v", ap.CreateUser))
	builder.WriteString(", update_user=")
	builder.WriteString(fmt.Sprintf("%v", ap.UpdateUser))
	builder.WriteString(", create_time=")
	builder.WriteString(fmt.Sprintf("%v", ap.CreateTime))
	builder.WriteString(", update_time=")
	builder.WriteString(fmt.Sprintf("%v", ap.UpdateTime))
	builder.WriteByte(')')
	return builder.String()
}

// AsPersons is a parsable slice of AsPerson.
type AsPersons []*AsPerson

func (ap AsPersons) config(cfg config) {
	for _i := range ap {
		ap[_i].config = cfg
	}
}
