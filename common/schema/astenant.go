// Code generated by entc, DO NOT EDIT.

package schema

import (
	"fmt"
	"orginone/common/schema/astenant"
	"orginone/common/schema/asunit"
	"orginone/common/tools/date"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// AsTenant is the model entity for the AsTenant schema.
type AsTenant struct {
	config `json:"-"`
	// ID of the ent.
	// 主键
	ID int64 `json:"id,string"`
	// TenantType holds the value of the "tenant_type" field.
	// 租户类型
	TenantType int64 `json:"tenantType"`
	// TenantName holds the value of the "tenant_name" field.
	// 租户名称
	TenantName string `json:"tenantName"`
	// TenantCode holds the value of the "tenant_code" field.
	// 租户编码系统生成)
	TenantCode string `json:"tenantCode"`
	// Theme holds the value of the "theme" field.
	// 租户界面主题
	Theme string `json:"theme"`
	// IsVirtual holds the value of the "is_virtual" field.
	// 是否虚拟单位1-虚,0-实)
	IsVirtual int64 `json:"isVirtual"`
	// IsDeleted holds the value of the "is_deleted" field.
	// 是否被删除
	IsDeleted int64 `json:"isDeleted"`
	// Status holds the value of the "status" field.
	// 状态
	Status int64 `json:"status"`
	// CreateUser holds the value of the "create_user" field.
	// 创建用户
	CreateUser int64 `json:"createUser"`
	// UpdateUser holds the value of the "update_user" field.
	// 更新用户
	UpdateUser int64 `json:"updateUser"`
	// CreateTime holds the value of the "create_time" field.
	// 创建时间
	CreateTime date.DateTime `json:"createTime"`
	// UpdateTime holds the value of the "update_time" field.
	// 更新时间
	UpdateTime date.DateTime `json:"updateTime"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AsTenantQuery when eager-loading is set.
	Edges AsTenantEdges `json:"edges"`
}

// AsTenantEdges holds the relations/edges for other nodes in the graph.
type AsTenantEdges struct {
	// Unit holds the value of the unit edge.
	Unit *AsUnit `json:"unit"`
	// AllGroups holds the value of the allGroups edge.
	AllGroups []*AsGroupTenantRelations `json:"allgroups"`
	// Allproperties holds the value of the allproperties edge.
	Allproperties []*AsPropertiesDistribution `json:"allproperties"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UnitOrErr returns the Unit value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AsTenantEdges) UnitOrErr() (*AsUnit, error) {
	if e.loadedTypes[0] {
		if e.Unit == nil {
			// The edge unit was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: asunit.Label}
		}
		return e.Unit, nil
	}
	return nil, &NotLoadedError{edge: "unit"}
}

// AllGroupsOrErr returns the AllGroups value or an error if the edge
// was not loaded in eager-loading.
func (e AsTenantEdges) AllGroupsOrErr() ([]*AsGroupTenantRelations, error) {
	if e.loadedTypes[1] {
		return e.AllGroups, nil
	}
	return nil, &NotLoadedError{edge: "allGroups"}
}

// AllpropertiesOrErr returns the Allproperties value or an error if the edge
// was not loaded in eager-loading.
func (e AsTenantEdges) AllpropertiesOrErr() ([]*AsPropertiesDistribution, error) {
	if e.loadedTypes[2] {
		return e.Allproperties, nil
	}
	return nil, &NotLoadedError{edge: "allproperties"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AsTenant) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case astenant.FieldID, astenant.FieldTenantType, astenant.FieldIsVirtual, astenant.FieldIsDeleted, astenant.FieldStatus, astenant.FieldCreateUser, astenant.FieldUpdateUser:
			values[i] = new(sql.NullInt64)
		case astenant.FieldTenantName, astenant.FieldTenantCode, astenant.FieldTheme:
			values[i] = new(sql.NullString)
		case astenant.FieldCreateTime, astenant.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AsTenant", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AsTenant fields.
func (at *AsTenant) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case astenant.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			at.ID = int64(value.Int64)
		case astenant.FieldTenantType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_type", values[i])
			} else if value.Valid {
				at.TenantType = value.Int64
			}
		case astenant.FieldTenantName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_name", values[i])
			} else if value.Valid {
				at.TenantName = value.String
			}
		case astenant.FieldTenantCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_code", values[i])
			} else if value.Valid {
				at.TenantCode = value.String
			}
		case astenant.FieldTheme:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field theme", values[i])
			} else if value.Valid {
				at.Theme = value.String
			}
		case astenant.FieldIsVirtual:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_virtual", values[i])
			} else if value.Valid {
				at.IsVirtual = value.Int64
			}
		case astenant.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				at.IsDeleted = value.Int64
			}
		case astenant.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				at.Status = value.Int64
			}
		case astenant.FieldCreateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_user", values[i])
			} else if value.Valid {
				at.CreateUser = value.Int64
			}
		case astenant.FieldUpdateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_user", values[i])
			} else if value.Valid {
				at.UpdateUser = value.Int64
			}
		case astenant.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				at.CreateTime = date.DateTime(value.Time)
			}
		case astenant.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				at.UpdateTime = date.DateTime(value.Time)
			}
		}
	}
	return nil
}

// QueryUnit queries the "unit" edge of the AsTenant entity.
func (at *AsTenant) QueryUnit() *AsUnitQuery {
	return (&AsTenantClient{config: at.config}).QueryUnit(at)
}

// QueryAllGroups queries the "allGroups" edge of the AsTenant entity.
func (at *AsTenant) QueryAllGroups() *AsGroupTenantRelationsQuery {
	return (&AsTenantClient{config: at.config}).QueryAllGroups(at)
}

// QueryAllproperties queries the "allproperties" edge of the AsTenant entity.
func (at *AsTenant) QueryAllproperties() *AsPropertiesDistributionQuery {
	return (&AsTenantClient{config: at.config}).QueryAllproperties(at)
}

// Update returns a builder for updating this AsTenant.
// Note that you need to call AsTenant.Unwrap() before calling this method if this AsTenant
// was returned from a transaction, and the transaction was committed or rolled back.
func (at *AsTenant) Update() *AsTenantUpdateOne {
	return (&AsTenantClient{config: at.config}).UpdateOne(at)
}

// Unwrap unwraps the AsTenant entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (at *AsTenant) Unwrap() *AsTenant {
	tx, ok := at.config.driver.(*txDriver)
	if !ok {
		panic("schema: AsTenant is not a transactional entity")
	}
	at.config.driver = tx.drv
	return at
}

// String implements the fmt.Stringer.
func (at *AsTenant) String() string {
	var builder strings.Builder
	builder.WriteString("AsTenant(")
	builder.WriteString(fmt.Sprintf("id=%v", at.ID))
	builder.WriteString(", tenant_type=")
	builder.WriteString(fmt.Sprintf("%v", at.TenantType))
	builder.WriteString(", tenant_name=")
	builder.WriteString(at.TenantName)
	builder.WriteString(", tenant_code=")
	builder.WriteString(at.TenantCode)
	builder.WriteString(", theme=")
	builder.WriteString(at.Theme)
	builder.WriteString(", is_virtual=")
	builder.WriteString(fmt.Sprintf("%v", at.IsVirtual))
	builder.WriteString(", is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", at.IsDeleted))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", at.Status))
	builder.WriteString(", create_user=")
	builder.WriteString(fmt.Sprintf("%v", at.CreateUser))
	builder.WriteString(", update_user=")
	builder.WriteString(fmt.Sprintf("%v", at.UpdateUser))
	builder.WriteString(", create_time=")
	builder.WriteString(fmt.Sprintf("%v", at.CreateTime))
	builder.WriteString(", update_time=")
	builder.WriteString(fmt.Sprintf("%v", at.UpdateTime))
	builder.WriteByte(')')
	return builder.String()
}

// AsTenants is a parsable slice of AsTenant.
type AsTenants []*AsTenant

func (at AsTenants) config(cfg config) {
	for _i := range at {
		at[_i].config = cfg
	}
}
