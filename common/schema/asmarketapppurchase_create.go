// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/asallgroup"
	"orginone/common/schema/asmarketapp"
	"orginone/common/schema/asmarketapppurchase"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsMarketAppPurchaseCreate is the builder for creating a AsMarketAppPurchase entity.
type AsMarketAppPurchaseCreate struct {
	config
	mutation *AsMarketAppPurchaseMutation
	hooks    []Hook
}

// SetAppID sets the "app_id" field.
func (amapc *AsMarketAppPurchaseCreate) SetAppID(i int64) *AsMarketAppPurchaseCreate {
	amapc.mutation.SetAppID(i)
	return amapc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (amapc *AsMarketAppPurchaseCreate) SetNillableAppID(i *int64) *AsMarketAppPurchaseCreate {
	if i != nil {
		amapc.SetAppID(*i)
	}
	return amapc
}

// SetTenantID sets the "tenant_id" field.
func (amapc *AsMarketAppPurchaseCreate) SetTenantID(s string) *AsMarketAppPurchaseCreate {
	amapc.mutation.SetTenantID(s)
	return amapc
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (amapc *AsMarketAppPurchaseCreate) SetNillableTenantID(s *string) *AsMarketAppPurchaseCreate {
	if s != nil {
		amapc.SetTenantID(*s)
	}
	return amapc
}

// SetGroupID sets the "group_id" field.
func (amapc *AsMarketAppPurchaseCreate) SetGroupID(i int64) *AsMarketAppPurchaseCreate {
	amapc.mutation.SetGroupID(i)
	return amapc
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (amapc *AsMarketAppPurchaseCreate) SetNillableGroupID(i *int64) *AsMarketAppPurchaseCreate {
	if i != nil {
		amapc.SetGroupID(*i)
	}
	return amapc
}

// SetUseStatus sets the "use_status" field.
func (amapc *AsMarketAppPurchaseCreate) SetUseStatus(i int64) *AsMarketAppPurchaseCreate {
	amapc.mutation.SetUseStatus(i)
	return amapc
}

// SetNillableUseStatus sets the "use_status" field if the given value is not nil.
func (amapc *AsMarketAppPurchaseCreate) SetNillableUseStatus(i *int64) *AsMarketAppPurchaseCreate {
	if i != nil {
		amapc.SetUseStatus(*i)
	}
	return amapc
}

// SetRemark sets the "remark" field.
func (amapc *AsMarketAppPurchaseCreate) SetRemark(s string) *AsMarketAppPurchaseCreate {
	amapc.mutation.SetRemark(s)
	return amapc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (amapc *AsMarketAppPurchaseCreate) SetNillableRemark(s *string) *AsMarketAppPurchaseCreate {
	if s != nil {
		amapc.SetRemark(*s)
	}
	return amapc
}

// SetIsDeleted sets the "is_deleted" field.
func (amapc *AsMarketAppPurchaseCreate) SetIsDeleted(i int64) *AsMarketAppPurchaseCreate {
	amapc.mutation.SetIsDeleted(i)
	return amapc
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (amapc *AsMarketAppPurchaseCreate) SetNillableIsDeleted(i *int64) *AsMarketAppPurchaseCreate {
	if i != nil {
		amapc.SetIsDeleted(*i)
	}
	return amapc
}

// SetStatus sets the "status" field.
func (amapc *AsMarketAppPurchaseCreate) SetStatus(i int64) *AsMarketAppPurchaseCreate {
	amapc.mutation.SetStatus(i)
	return amapc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (amapc *AsMarketAppPurchaseCreate) SetNillableStatus(i *int64) *AsMarketAppPurchaseCreate {
	if i != nil {
		amapc.SetStatus(*i)
	}
	return amapc
}

// SetCreateUser sets the "create_user" field.
func (amapc *AsMarketAppPurchaseCreate) SetCreateUser(i int64) *AsMarketAppPurchaseCreate {
	amapc.mutation.SetCreateUser(i)
	return amapc
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (amapc *AsMarketAppPurchaseCreate) SetNillableCreateUser(i *int64) *AsMarketAppPurchaseCreate {
	if i != nil {
		amapc.SetCreateUser(*i)
	}
	return amapc
}

// SetUpdateUser sets the "update_user" field.
func (amapc *AsMarketAppPurchaseCreate) SetUpdateUser(i int64) *AsMarketAppPurchaseCreate {
	amapc.mutation.SetUpdateUser(i)
	return amapc
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (amapc *AsMarketAppPurchaseCreate) SetNillableUpdateUser(i *int64) *AsMarketAppPurchaseCreate {
	if i != nil {
		amapc.SetUpdateUser(*i)
	}
	return amapc
}

// SetCreateTime sets the "create_time" field.
func (amapc *AsMarketAppPurchaseCreate) SetCreateTime(dt date.DateTime) *AsMarketAppPurchaseCreate {
	amapc.mutation.SetCreateTime(dt)
	return amapc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (amapc *AsMarketAppPurchaseCreate) SetNillableCreateTime(dt *date.DateTime) *AsMarketAppPurchaseCreate {
	if dt != nil {
		amapc.SetCreateTime(*dt)
	}
	return amapc
}

// SetUpdateTime sets the "update_time" field.
func (amapc *AsMarketAppPurchaseCreate) SetUpdateTime(dt date.DateTime) *AsMarketAppPurchaseCreate {
	amapc.mutation.SetUpdateTime(dt)
	return amapc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (amapc *AsMarketAppPurchaseCreate) SetNillableUpdateTime(dt *date.DateTime) *AsMarketAppPurchaseCreate {
	if dt != nil {
		amapc.SetUpdateTime(*dt)
	}
	return amapc
}

// SetID sets the "id" field.
func (amapc *AsMarketAppPurchaseCreate) SetID(i int64) *AsMarketAppPurchaseCreate {
	amapc.mutation.SetID(i)
	return amapc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (amapc *AsMarketAppPurchaseCreate) SetNillableID(i *int64) *AsMarketAppPurchaseCreate {
	if i != nil {
		amapc.SetID(*i)
	}
	return amapc
}

// SetAppxID sets the "appx" edge to the AsMarketApp entity by ID.
func (amapc *AsMarketAppPurchaseCreate) SetAppxID(id int64) *AsMarketAppPurchaseCreate {
	amapc.mutation.SetAppxID(id)
	return amapc
}

// SetNillableAppxID sets the "appx" edge to the AsMarketApp entity by ID if the given value is not nil.
func (amapc *AsMarketAppPurchaseCreate) SetNillableAppxID(id *int64) *AsMarketAppPurchaseCreate {
	if id != nil {
		amapc = amapc.SetAppxID(*id)
	}
	return amapc
}

// SetAppx sets the "appx" edge to the AsMarketApp entity.
func (amapc *AsMarketAppPurchaseCreate) SetAppx(a *AsMarketApp) *AsMarketAppPurchaseCreate {
	return amapc.SetAppxID(a.ID)
}

// SetGroupxID sets the "groupx" edge to the AsAllGroup entity by ID.
func (amapc *AsMarketAppPurchaseCreate) SetGroupxID(id int64) *AsMarketAppPurchaseCreate {
	amapc.mutation.SetGroupxID(id)
	return amapc
}

// SetNillableGroupxID sets the "groupx" edge to the AsAllGroup entity by ID if the given value is not nil.
func (amapc *AsMarketAppPurchaseCreate) SetNillableGroupxID(id *int64) *AsMarketAppPurchaseCreate {
	if id != nil {
		amapc = amapc.SetGroupxID(*id)
	}
	return amapc
}

// SetGroupx sets the "groupx" edge to the AsAllGroup entity.
func (amapc *AsMarketAppPurchaseCreate) SetGroupx(a *AsAllGroup) *AsMarketAppPurchaseCreate {
	return amapc.SetGroupxID(a.ID)
}

// Mutation returns the AsMarketAppPurchaseMutation object of the builder.
func (amapc *AsMarketAppPurchaseCreate) Mutation() *AsMarketAppPurchaseMutation {
	return amapc.mutation
}

// Save creates the AsMarketAppPurchase in the database.
func (amapc *AsMarketAppPurchaseCreate) Save(ctx context.Context) (*AsMarketAppPurchase, error) {
	var (
		err  error
		node *AsMarketAppPurchase
	)
	amapc.defaults()
	if len(amapc.hooks) == 0 {
		if err = amapc.check(); err != nil {
			return nil, err
		}
		node, err = amapc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsMarketAppPurchaseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = amapc.check(); err != nil {
				return nil, err
			}
			amapc.mutation = mutation
			if node, err = amapc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(amapc.hooks) - 1; i >= 0; i-- {
			if amapc.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = amapc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, amapc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (amapc *AsMarketAppPurchaseCreate) SaveX(ctx context.Context) *AsMarketAppPurchase {
	v, err := amapc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (amapc *AsMarketAppPurchaseCreate) Exec(ctx context.Context) error {
	_, err := amapc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amapc *AsMarketAppPurchaseCreate) ExecX(ctx context.Context) {
	if err := amapc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amapc *AsMarketAppPurchaseCreate) defaults() {
	if _, ok := amapc.mutation.UseStatus(); !ok {
		v := asmarketapppurchase.DefaultUseStatus
		amapc.mutation.SetUseStatus(v)
	}
	if _, ok := amapc.mutation.IsDeleted(); !ok {
		v := asmarketapppurchase.DefaultIsDeleted
		amapc.mutation.SetIsDeleted(v)
	}
	if _, ok := amapc.mutation.Status(); !ok {
		v := asmarketapppurchase.DefaultStatus
		amapc.mutation.SetStatus(v)
	}
	if _, ok := amapc.mutation.CreateTime(); !ok {
		v := asmarketapppurchase.DefaultCreateTime()
		amapc.mutation.SetCreateTime(v)
	}
	if _, ok := amapc.mutation.UpdateTime(); !ok {
		v := asmarketapppurchase.DefaultUpdateTime()
		amapc.mutation.SetUpdateTime(v)
	}
	if _, ok := amapc.mutation.ID(); !ok {
		v := asmarketapppurchase.DefaultID()
		amapc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (amapc *AsMarketAppPurchaseCreate) check() error {
	if _, ok := amapc.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "is_deleted", err: errors.New(`schema: missing required field "AsMarketAppPurchase.is_deleted"`)}
	}
	return nil
}

func (amapc *AsMarketAppPurchaseCreate) sqlSave(ctx context.Context) (*AsMarketAppPurchase, error) {
	_node, _spec := amapc.createSpec()
	if err := sqlgraph.CreateNode(ctx, amapc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (amapc *AsMarketAppPurchaseCreate) createSpec() (*AsMarketAppPurchase, *sqlgraph.CreateSpec) {
	var (
		_node = &AsMarketAppPurchase{config: amapc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: asmarketapppurchase.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asmarketapppurchase.FieldID,
			},
		}
	)
	if id, ok := amapc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := amapc.mutation.TenantID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapppurchase.FieldTenantID,
		})
		_node.TenantID = value
	}
	if value, ok := amapc.mutation.UseStatus(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapppurchase.FieldUseStatus,
		})
		_node.UseStatus = value
	}
	if value, ok := amapc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapppurchase.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := amapc.mutation.IsDeleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapppurchase.FieldIsDeleted,
		})
		_node.IsDeleted = value
	}
	if value, ok := amapc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapppurchase.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := amapc.mutation.CreateUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapppurchase.FieldCreateUser,
		})
		_node.CreateUser = value
	}
	if value, ok := amapc.mutation.UpdateUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapppurchase.FieldUpdateUser,
		})
		_node.UpdateUser = value
	}
	if value, ok := amapc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketapppurchase.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := amapc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketapppurchase.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if nodes := amapc.mutation.AppxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketapppurchase.AppxTable,
			Columns: []string{asmarketapppurchase.AppxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapp.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AppID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := amapc.mutation.GroupxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketapppurchase.GroupxTable,
			Columns: []string{asmarketapppurchase.GroupxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asallgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.GroupID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AsMarketAppPurchaseCreateBulk is the builder for creating many AsMarketAppPurchase entities in bulk.
type AsMarketAppPurchaseCreateBulk struct {
	config
	builders []*AsMarketAppPurchaseCreate
}

// Save creates the AsMarketAppPurchase entities in the database.
func (amapcb *AsMarketAppPurchaseCreateBulk) Save(ctx context.Context) ([]*AsMarketAppPurchase, error) {
	specs := make([]*sqlgraph.CreateSpec, len(amapcb.builders))
	nodes := make([]*AsMarketAppPurchase, len(amapcb.builders))
	mutators := make([]Mutator, len(amapcb.builders))
	for i := range amapcb.builders {
		func(i int, root context.Context) {
			builder := amapcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AsMarketAppPurchaseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, amapcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, amapcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, amapcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (amapcb *AsMarketAppPurchaseCreateBulk) SaveX(ctx context.Context) []*AsMarketAppPurchase {
	v, err := amapcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (amapcb *AsMarketAppPurchaseCreateBulk) Exec(ctx context.Context) error {
	_, err := amapcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amapcb *AsMarketAppPurchaseCreateBulk) ExecX(ctx context.Context) {
	if err := amapcb.Exec(ctx); err != nil {
		panic(err)
	}
}
