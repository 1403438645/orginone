// Code generated by entc, DO NOT EDIT.

package schema

import (
	"fmt"
	"orginone/common/schema/asallgroup"
	"orginone/common/schema/asgrouptenantrelations"
	"orginone/common/schema/astenant"
	"orginone/common/tools/date"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// AsGroupTenantRelations is the model entity for the AsGroupTenantRelations schema.
type AsGroupTenantRelations struct {
	config `json:"-"`
	// ID of the ent.
	// 主键
	ID int64 `json:"id,string"`
	// ParentID holds the value of the "parent_id" field.
	// 父集团或租户id
	ParentID int64 `json:"parentId"`
	// SonID holds the value of the "son_id" field.
	// 子集团或租户id
	SonID int64 `json:"sonId"`
	// Type holds the value of the "type" field.
	// 类型1-集团,2-租户
	Type int64 `json:"type"`
	// Sort holds the value of the "sort" field.
	// 排序
	Sort int64 `json:"sort"`
	// Serial holds the value of the "serial" field.
	// 序列号
	Serial int64 `json:"serial"`
	// GroupCode holds the value of the "group_code" field.
	// 集团编码
	GroupCode string `json:"groupCode"`
	// ExpiresTime holds the value of the "expires_time" field.
	// 过期时间
	ExpiresTime date.DateTime `json:"expiresTime"`
	// IsHide holds the value of the "is_hide" field.
	// 是否在树形中隐藏节点
	IsHide int64 `json:"isHide"`
	// IsDeleted holds the value of the "is_deleted" field.
	// 是否被删除
	IsDeleted int64 `json:"isDeleted"`
	// Status holds the value of the "status" field.
	// 状态
	Status int64 `json:"status"`
	// CreateUser holds the value of the "create_user" field.
	// 创建用户
	CreateUser int64 `json:"createUser"`
	// UpdateUser holds the value of the "update_user" field.
	// 更新用户
	UpdateUser int64 `json:"updateUser"`
	// CreateTime holds the value of the "create_time" field.
	// 创建时间
	CreateTime date.DateTime `json:"createTime"`
	// UpdateTime holds the value of the "update_time" field.
	// 更新时间
	UpdateTime date.DateTime `json:"updateTime"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AsGroupTenantRelationsQuery when eager-loading is set.
	Edges AsGroupTenantRelationsEdges `json:"edges"`
}

// AsGroupTenantRelationsEdges holds the relations/edges for other nodes in the graph.
type AsGroupTenantRelationsEdges struct {
	// Group holds the value of the group edge.
	Group *AsAllGroup `json:"group"`
	// Tenant holds the value of the tenant edge.
	Tenant *AsTenant `json:"tenant"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// GroupOrErr returns the Group value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AsGroupTenantRelationsEdges) GroupOrErr() (*AsAllGroup, error) {
	if e.loadedTypes[0] {
		if e.Group == nil {
			// The edge group was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: asallgroup.Label}
		}
		return e.Group, nil
	}
	return nil, &NotLoadedError{edge: "group"}
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AsGroupTenantRelationsEdges) TenantOrErr() (*AsTenant, error) {
	if e.loadedTypes[1] {
		if e.Tenant == nil {
			// The edge tenant was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: astenant.Label}
		}
		return e.Tenant, nil
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AsGroupTenantRelations) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case asgrouptenantrelations.FieldID, asgrouptenantrelations.FieldParentID, asgrouptenantrelations.FieldSonID, asgrouptenantrelations.FieldType, asgrouptenantrelations.FieldSort, asgrouptenantrelations.FieldSerial, asgrouptenantrelations.FieldIsHide, asgrouptenantrelations.FieldIsDeleted, asgrouptenantrelations.FieldStatus, asgrouptenantrelations.FieldCreateUser, asgrouptenantrelations.FieldUpdateUser:
			values[i] = new(sql.NullInt64)
		case asgrouptenantrelations.FieldGroupCode:
			values[i] = new(sql.NullString)
		case asgrouptenantrelations.FieldExpiresTime, asgrouptenantrelations.FieldCreateTime, asgrouptenantrelations.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AsGroupTenantRelations", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AsGroupTenantRelations fields.
func (agtr *AsGroupTenantRelations) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case asgrouptenantrelations.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			agtr.ID = int64(value.Int64)
		case asgrouptenantrelations.FieldParentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value.Valid {
				agtr.ParentID = value.Int64
			}
		case asgrouptenantrelations.FieldSonID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field son_id", values[i])
			} else if value.Valid {
				agtr.SonID = value.Int64
			}
		case asgrouptenantrelations.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				agtr.Type = value.Int64
			}
		case asgrouptenantrelations.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				agtr.Sort = value.Int64
			}
		case asgrouptenantrelations.FieldSerial:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field serial", values[i])
			} else if value.Valid {
				agtr.Serial = value.Int64
			}
		case asgrouptenantrelations.FieldGroupCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field group_code", values[i])
			} else if value.Valid {
				agtr.GroupCode = value.String
			}
		case asgrouptenantrelations.FieldExpiresTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_time", values[i])
			} else if value.Valid {
				agtr.ExpiresTime = date.DateTime(value.Time)
			}
		case asgrouptenantrelations.FieldIsHide:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_hide", values[i])
			} else if value.Valid {
				agtr.IsHide = value.Int64
			}
		case asgrouptenantrelations.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				agtr.IsDeleted = value.Int64
			}
		case asgrouptenantrelations.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				agtr.Status = value.Int64
			}
		case asgrouptenantrelations.FieldCreateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_user", values[i])
			} else if value.Valid {
				agtr.CreateUser = value.Int64
			}
		case asgrouptenantrelations.FieldUpdateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_user", values[i])
			} else if value.Valid {
				agtr.UpdateUser = value.Int64
			}
		case asgrouptenantrelations.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				agtr.CreateTime = date.DateTime(value.Time)
			}
		case asgrouptenantrelations.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				agtr.UpdateTime = date.DateTime(value.Time)
			}
		}
	}
	return nil
}

// QueryGroup queries the "group" edge of the AsGroupTenantRelations entity.
func (agtr *AsGroupTenantRelations) QueryGroup() *AsAllGroupQuery {
	return (&AsGroupTenantRelationsClient{config: agtr.config}).QueryGroup(agtr)
}

// QueryTenant queries the "tenant" edge of the AsGroupTenantRelations entity.
func (agtr *AsGroupTenantRelations) QueryTenant() *AsTenantQuery {
	return (&AsGroupTenantRelationsClient{config: agtr.config}).QueryTenant(agtr)
}

// Update returns a builder for updating this AsGroupTenantRelations.
// Note that you need to call AsGroupTenantRelations.Unwrap() before calling this method if this AsGroupTenantRelations
// was returned from a transaction, and the transaction was committed or rolled back.
func (agtr *AsGroupTenantRelations) Update() *AsGroupTenantRelationsUpdateOne {
	return (&AsGroupTenantRelationsClient{config: agtr.config}).UpdateOne(agtr)
}

// Unwrap unwraps the AsGroupTenantRelations entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (agtr *AsGroupTenantRelations) Unwrap() *AsGroupTenantRelations {
	tx, ok := agtr.config.driver.(*txDriver)
	if !ok {
		panic("schema: AsGroupTenantRelations is not a transactional entity")
	}
	agtr.config.driver = tx.drv
	return agtr
}

// String implements the fmt.Stringer.
func (agtr *AsGroupTenantRelations) String() string {
	var builder strings.Builder
	builder.WriteString("AsGroupTenantRelations(")
	builder.WriteString(fmt.Sprintf("id=%v", agtr.ID))
	builder.WriteString(", parent_id=")
	builder.WriteString(fmt.Sprintf("%v", agtr.ParentID))
	builder.WriteString(", son_id=")
	builder.WriteString(fmt.Sprintf("%v", agtr.SonID))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", agtr.Type))
	builder.WriteString(", sort=")
	builder.WriteString(fmt.Sprintf("%v", agtr.Sort))
	builder.WriteString(", serial=")
	builder.WriteString(fmt.Sprintf("%v", agtr.Serial))
	builder.WriteString(", group_code=")
	builder.WriteString(agtr.GroupCode)
	builder.WriteString(", expires_time=")
	builder.WriteString(fmt.Sprintf("%v", agtr.ExpiresTime))
	builder.WriteString(", is_hide=")
	builder.WriteString(fmt.Sprintf("%v", agtr.IsHide))
	builder.WriteString(", is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", agtr.IsDeleted))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", agtr.Status))
	builder.WriteString(", create_user=")
	builder.WriteString(fmt.Sprintf("%v", agtr.CreateUser))
	builder.WriteString(", update_user=")
	builder.WriteString(fmt.Sprintf("%v", agtr.UpdateUser))
	builder.WriteString(", create_time=")
	builder.WriteString(fmt.Sprintf("%v", agtr.CreateTime))
	builder.WriteString(", update_time=")
	builder.WriteString(fmt.Sprintf("%v", agtr.UpdateTime))
	builder.WriteByte(')')
	return builder.String()
}

// AsGroupTenantRelationsSlice is a parsable slice of AsGroupTenantRelations.
type AsGroupTenantRelationsSlice []*AsGroupTenantRelations

func (agtr AsGroupTenantRelationsSlice) config(cfg config) {
	for _i := range agtr {
		agtr[_i].config = cfg
	}
}
