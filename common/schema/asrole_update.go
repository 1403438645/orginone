// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/asjob"
	"orginone/common/schema/asmenu"
	"orginone/common/schema/asrole"
	"orginone/common/schema/astenantattrrole"
	"orginone/common/schema/asuser"
	"orginone/common/schema/predicate"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsRoleUpdate is the builder for updating AsRole entities.
type AsRoleUpdate struct {
	config
	hooks    []Hook
	mutation *AsRoleMutation
}

// Where appends a list predicates to the AsRoleUpdate builder.
func (aru *AsRoleUpdate) Where(ps ...predicate.AsRole) *AsRoleUpdate {
	aru.mutation.Where(ps...)
	return aru
}

// SetSort sets the "sort" field.
func (aru *AsRoleUpdate) SetSort(i int64) *AsRoleUpdate {
	aru.mutation.ResetSort()
	aru.mutation.SetSort(i)
	return aru
}

// AddSort adds i to the "sort" field.
func (aru *AsRoleUpdate) AddSort(i int64) *AsRoleUpdate {
	aru.mutation.AddSort(i)
	return aru
}

// SetRoleAlias sets the "role_alias" field.
func (aru *AsRoleUpdate) SetRoleAlias(s string) *AsRoleUpdate {
	aru.mutation.SetRoleAlias(s)
	return aru
}

// SetNillableRoleAlias sets the "role_alias" field if the given value is not nil.
func (aru *AsRoleUpdate) SetNillableRoleAlias(s *string) *AsRoleUpdate {
	if s != nil {
		aru.SetRoleAlias(*s)
	}
	return aru
}

// ClearRoleAlias clears the value of the "role_alias" field.
func (aru *AsRoleUpdate) ClearRoleAlias() *AsRoleUpdate {
	aru.mutation.ClearRoleAlias()
	return aru
}

// SetRoleName sets the "role_name" field.
func (aru *AsRoleUpdate) SetRoleName(s string) *AsRoleUpdate {
	aru.mutation.SetRoleName(s)
	return aru
}

// SetNillableRoleName sets the "role_name" field if the given value is not nil.
func (aru *AsRoleUpdate) SetNillableRoleName(s *string) *AsRoleUpdate {
	if s != nil {
		aru.SetRoleName(*s)
	}
	return aru
}

// ClearRoleName clears the value of the "role_name" field.
func (aru *AsRoleUpdate) ClearRoleName() *AsRoleUpdate {
	aru.mutation.ClearRoleName()
	return aru
}

// SetRoleDescription sets the "role_description" field.
func (aru *AsRoleUpdate) SetRoleDescription(s string) *AsRoleUpdate {
	aru.mutation.SetRoleDescription(s)
	return aru
}

// SetNillableRoleDescription sets the "role_description" field if the given value is not nil.
func (aru *AsRoleUpdate) SetNillableRoleDescription(s *string) *AsRoleUpdate {
	if s != nil {
		aru.SetRoleDescription(*s)
	}
	return aru
}

// ClearRoleDescription clears the value of the "role_description" field.
func (aru *AsRoleUpdate) ClearRoleDescription() *AsRoleUpdate {
	aru.mutation.ClearRoleDescription()
	return aru
}

// SetIsDeleted sets the "is_deleted" field.
func (aru *AsRoleUpdate) SetIsDeleted(i int64) *AsRoleUpdate {
	aru.mutation.ResetIsDeleted()
	aru.mutation.SetIsDeleted(i)
	return aru
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (aru *AsRoleUpdate) SetNillableIsDeleted(i *int64) *AsRoleUpdate {
	if i != nil {
		aru.SetIsDeleted(*i)
	}
	return aru
}

// AddIsDeleted adds i to the "is_deleted" field.
func (aru *AsRoleUpdate) AddIsDeleted(i int64) *AsRoleUpdate {
	aru.mutation.AddIsDeleted(i)
	return aru
}

// SetStatus sets the "status" field.
func (aru *AsRoleUpdate) SetStatus(i int64) *AsRoleUpdate {
	aru.mutation.ResetStatus()
	aru.mutation.SetStatus(i)
	return aru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (aru *AsRoleUpdate) SetNillableStatus(i *int64) *AsRoleUpdate {
	if i != nil {
		aru.SetStatus(*i)
	}
	return aru
}

// AddStatus adds i to the "status" field.
func (aru *AsRoleUpdate) AddStatus(i int64) *AsRoleUpdate {
	aru.mutation.AddStatus(i)
	return aru
}

// ClearStatus clears the value of the "status" field.
func (aru *AsRoleUpdate) ClearStatus() *AsRoleUpdate {
	aru.mutation.ClearStatus()
	return aru
}

// SetCreateUser sets the "create_user" field.
func (aru *AsRoleUpdate) SetCreateUser(i int64) *AsRoleUpdate {
	aru.mutation.ResetCreateUser()
	aru.mutation.SetCreateUser(i)
	return aru
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (aru *AsRoleUpdate) SetNillableCreateUser(i *int64) *AsRoleUpdate {
	if i != nil {
		aru.SetCreateUser(*i)
	}
	return aru
}

// AddCreateUser adds i to the "create_user" field.
func (aru *AsRoleUpdate) AddCreateUser(i int64) *AsRoleUpdate {
	aru.mutation.AddCreateUser(i)
	return aru
}

// ClearCreateUser clears the value of the "create_user" field.
func (aru *AsRoleUpdate) ClearCreateUser() *AsRoleUpdate {
	aru.mutation.ClearCreateUser()
	return aru
}

// SetUpdateUser sets the "update_user" field.
func (aru *AsRoleUpdate) SetUpdateUser(i int64) *AsRoleUpdate {
	aru.mutation.ResetUpdateUser()
	aru.mutation.SetUpdateUser(i)
	return aru
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (aru *AsRoleUpdate) SetNillableUpdateUser(i *int64) *AsRoleUpdate {
	if i != nil {
		aru.SetUpdateUser(*i)
	}
	return aru
}

// AddUpdateUser adds i to the "update_user" field.
func (aru *AsRoleUpdate) AddUpdateUser(i int64) *AsRoleUpdate {
	aru.mutation.AddUpdateUser(i)
	return aru
}

// ClearUpdateUser clears the value of the "update_user" field.
func (aru *AsRoleUpdate) ClearUpdateUser() *AsRoleUpdate {
	aru.mutation.ClearUpdateUser()
	return aru
}

// SetUpdateTime sets the "update_time" field.
func (aru *AsRoleUpdate) SetUpdateTime(dt date.DateTime) *AsRoleUpdate {
	aru.mutation.SetUpdateTime(dt)
	return aru
}

// ClearUpdateTime clears the value of the "update_time" field.
func (aru *AsRoleUpdate) ClearUpdateTime() *AsRoleUpdate {
	aru.mutation.ClearUpdateTime()
	return aru
}

// AddUserIDs adds the "users" edge to the AsUser entity by IDs.
func (aru *AsRoleUpdate) AddUserIDs(ids ...int64) *AsRoleUpdate {
	aru.mutation.AddUserIDs(ids...)
	return aru
}

// AddUsers adds the "users" edges to the AsUser entity.
func (aru *AsRoleUpdate) AddUsers(a ...*AsUser) *AsRoleUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aru.AddUserIDs(ids...)
}

// AddJobIDs adds the "jobs" edge to the AsJob entity by IDs.
func (aru *AsRoleUpdate) AddJobIDs(ids ...int64) *AsRoleUpdate {
	aru.mutation.AddJobIDs(ids...)
	return aru
}

// AddJobs adds the "jobs" edges to the AsJob entity.
func (aru *AsRoleUpdate) AddJobs(a ...*AsJob) *AsRoleUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aru.AddJobIDs(ids...)
}

// AddMenuIDs adds the "menus" edge to the AsMenu entity by IDs.
func (aru *AsRoleUpdate) AddMenuIDs(ids ...int64) *AsRoleUpdate {
	aru.mutation.AddMenuIDs(ids...)
	return aru
}

// AddMenus adds the "menus" edges to the AsMenu entity.
func (aru *AsRoleUpdate) AddMenus(a ...*AsMenu) *AsRoleUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aru.AddMenuIDs(ids...)
}

// AddAttrRoleIDs adds the "attrRoles" edge to the AsTenantAttrRole entity by IDs.
func (aru *AsRoleUpdate) AddAttrRoleIDs(ids ...int64) *AsRoleUpdate {
	aru.mutation.AddAttrRoleIDs(ids...)
	return aru
}

// AddAttrRoles adds the "attrRoles" edges to the AsTenantAttrRole entity.
func (aru *AsRoleUpdate) AddAttrRoles(a ...*AsTenantAttrRole) *AsRoleUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aru.AddAttrRoleIDs(ids...)
}

// Mutation returns the AsRoleMutation object of the builder.
func (aru *AsRoleUpdate) Mutation() *AsRoleMutation {
	return aru.mutation
}

// ClearUsers clears all "users" edges to the AsUser entity.
func (aru *AsRoleUpdate) ClearUsers() *AsRoleUpdate {
	aru.mutation.ClearUsers()
	return aru
}

// RemoveUserIDs removes the "users" edge to AsUser entities by IDs.
func (aru *AsRoleUpdate) RemoveUserIDs(ids ...int64) *AsRoleUpdate {
	aru.mutation.RemoveUserIDs(ids...)
	return aru
}

// RemoveUsers removes "users" edges to AsUser entities.
func (aru *AsRoleUpdate) RemoveUsers(a ...*AsUser) *AsRoleUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aru.RemoveUserIDs(ids...)
}

// ClearJobs clears all "jobs" edges to the AsJob entity.
func (aru *AsRoleUpdate) ClearJobs() *AsRoleUpdate {
	aru.mutation.ClearJobs()
	return aru
}

// RemoveJobIDs removes the "jobs" edge to AsJob entities by IDs.
func (aru *AsRoleUpdate) RemoveJobIDs(ids ...int64) *AsRoleUpdate {
	aru.mutation.RemoveJobIDs(ids...)
	return aru
}

// RemoveJobs removes "jobs" edges to AsJob entities.
func (aru *AsRoleUpdate) RemoveJobs(a ...*AsJob) *AsRoleUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aru.RemoveJobIDs(ids...)
}

// ClearMenus clears all "menus" edges to the AsMenu entity.
func (aru *AsRoleUpdate) ClearMenus() *AsRoleUpdate {
	aru.mutation.ClearMenus()
	return aru
}

// RemoveMenuIDs removes the "menus" edge to AsMenu entities by IDs.
func (aru *AsRoleUpdate) RemoveMenuIDs(ids ...int64) *AsRoleUpdate {
	aru.mutation.RemoveMenuIDs(ids...)
	return aru
}

// RemoveMenus removes "menus" edges to AsMenu entities.
func (aru *AsRoleUpdate) RemoveMenus(a ...*AsMenu) *AsRoleUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aru.RemoveMenuIDs(ids...)
}

// ClearAttrRoles clears all "attrRoles" edges to the AsTenantAttrRole entity.
func (aru *AsRoleUpdate) ClearAttrRoles() *AsRoleUpdate {
	aru.mutation.ClearAttrRoles()
	return aru
}

// RemoveAttrRoleIDs removes the "attrRoles" edge to AsTenantAttrRole entities by IDs.
func (aru *AsRoleUpdate) RemoveAttrRoleIDs(ids ...int64) *AsRoleUpdate {
	aru.mutation.RemoveAttrRoleIDs(ids...)
	return aru
}

// RemoveAttrRoles removes "attrRoles" edges to AsTenantAttrRole entities.
func (aru *AsRoleUpdate) RemoveAttrRoles(a ...*AsTenantAttrRole) *AsRoleUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aru.RemoveAttrRoleIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aru *AsRoleUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	aru.defaults()
	if len(aru.hooks) == 0 {
		affected, err = aru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsRoleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aru.mutation = mutation
			affected, err = aru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(aru.hooks) - 1; i >= 0; i-- {
			if aru.hooks[i] == nil {
				return 0, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = aru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (aru *AsRoleUpdate) SaveX(ctx context.Context) int {
	affected, err := aru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aru *AsRoleUpdate) Exec(ctx context.Context) error {
	_, err := aru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aru *AsRoleUpdate) ExecX(ctx context.Context) {
	if err := aru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aru *AsRoleUpdate) defaults() {
	if _, ok := aru.mutation.UpdateTime(); !ok && !aru.mutation.UpdateTimeCleared() {
		v := asrole.UpdateDefaultUpdateTime()
		aru.mutation.SetUpdateTime(v)
	}
}

func (aru *AsRoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asrole.Table,
			Columns: asrole.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asrole.FieldID,
			},
		},
	}
	if ps := aru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aru.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asrole.FieldSort,
		})
	}
	if value, ok := aru.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asrole.FieldSort,
		})
	}
	if value, ok := aru.mutation.RoleAlias(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asrole.FieldRoleAlias,
		})
	}
	if aru.mutation.RoleAliasCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asrole.FieldRoleAlias,
		})
	}
	if value, ok := aru.mutation.RoleName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asrole.FieldRoleName,
		})
	}
	if aru.mutation.RoleNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asrole.FieldRoleName,
		})
	}
	if value, ok := aru.mutation.RoleDescription(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asrole.FieldRoleDescription,
		})
	}
	if aru.mutation.RoleDescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asrole.FieldRoleDescription,
		})
	}
	if value, ok := aru.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asrole.FieldIsDeleted,
		})
	}
	if value, ok := aru.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asrole.FieldIsDeleted,
		})
	}
	if value, ok := aru.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asrole.FieldStatus,
		})
	}
	if value, ok := aru.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asrole.FieldStatus,
		})
	}
	if aru.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asrole.FieldStatus,
		})
	}
	if value, ok := aru.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asrole.FieldCreateUser,
		})
	}
	if value, ok := aru.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asrole.FieldCreateUser,
		})
	}
	if aru.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asrole.FieldCreateUser,
		})
	}
	if value, ok := aru.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asrole.FieldUpdateUser,
		})
	}
	if value, ok := aru.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asrole.FieldUpdateUser,
		})
	}
	if aru.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asrole.FieldUpdateUser,
		})
	}
	if aru.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asrole.FieldCreateTime,
		})
	}
	if value, ok := aru.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asrole.FieldUpdateTime,
		})
	}
	if aru.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asrole.FieldUpdateTime,
		})
	}
	if aru.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asrole.UsersTable,
			Columns: asrole.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.RemovedUsersIDs(); len(nodes) > 0 && !aru.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asrole.UsersTable,
			Columns: asrole.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asrole.UsersTable,
			Columns: asrole.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aru.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asrole.JobsTable,
			Columns: asrole.JobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asjob.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.RemovedJobsIDs(); len(nodes) > 0 && !aru.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asrole.JobsTable,
			Columns: asrole.JobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asjob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.JobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asrole.JobsTable,
			Columns: asrole.JobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asjob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aru.mutation.MenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asrole.MenusTable,
			Columns: asrole.MenusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmenu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.RemovedMenusIDs(); len(nodes) > 0 && !aru.mutation.MenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asrole.MenusTable,
			Columns: asrole.MenusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.MenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asrole.MenusTable,
			Columns: asrole.MenusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aru.mutation.AttrRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asrole.AttrRolesTable,
			Columns: []string{asrole.AttrRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: astenantattrrole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.RemovedAttrRolesIDs(); len(nodes) > 0 && !aru.mutation.AttrRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asrole.AttrRolesTable,
			Columns: []string{asrole.AttrRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: astenantattrrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.AttrRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asrole.AttrRolesTable,
			Columns: []string{asrole.AttrRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: astenantattrrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AsRoleUpdateOne is the builder for updating a single AsRole entity.
type AsRoleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AsRoleMutation
}

// SetSort sets the "sort" field.
func (aruo *AsRoleUpdateOne) SetSort(i int64) *AsRoleUpdateOne {
	aruo.mutation.ResetSort()
	aruo.mutation.SetSort(i)
	return aruo
}

// AddSort adds i to the "sort" field.
func (aruo *AsRoleUpdateOne) AddSort(i int64) *AsRoleUpdateOne {
	aruo.mutation.AddSort(i)
	return aruo
}

// SetRoleAlias sets the "role_alias" field.
func (aruo *AsRoleUpdateOne) SetRoleAlias(s string) *AsRoleUpdateOne {
	aruo.mutation.SetRoleAlias(s)
	return aruo
}

// SetNillableRoleAlias sets the "role_alias" field if the given value is not nil.
func (aruo *AsRoleUpdateOne) SetNillableRoleAlias(s *string) *AsRoleUpdateOne {
	if s != nil {
		aruo.SetRoleAlias(*s)
	}
	return aruo
}

// ClearRoleAlias clears the value of the "role_alias" field.
func (aruo *AsRoleUpdateOne) ClearRoleAlias() *AsRoleUpdateOne {
	aruo.mutation.ClearRoleAlias()
	return aruo
}

// SetRoleName sets the "role_name" field.
func (aruo *AsRoleUpdateOne) SetRoleName(s string) *AsRoleUpdateOne {
	aruo.mutation.SetRoleName(s)
	return aruo
}

// SetNillableRoleName sets the "role_name" field if the given value is not nil.
func (aruo *AsRoleUpdateOne) SetNillableRoleName(s *string) *AsRoleUpdateOne {
	if s != nil {
		aruo.SetRoleName(*s)
	}
	return aruo
}

// ClearRoleName clears the value of the "role_name" field.
func (aruo *AsRoleUpdateOne) ClearRoleName() *AsRoleUpdateOne {
	aruo.mutation.ClearRoleName()
	return aruo
}

// SetRoleDescription sets the "role_description" field.
func (aruo *AsRoleUpdateOne) SetRoleDescription(s string) *AsRoleUpdateOne {
	aruo.mutation.SetRoleDescription(s)
	return aruo
}

// SetNillableRoleDescription sets the "role_description" field if the given value is not nil.
func (aruo *AsRoleUpdateOne) SetNillableRoleDescription(s *string) *AsRoleUpdateOne {
	if s != nil {
		aruo.SetRoleDescription(*s)
	}
	return aruo
}

// ClearRoleDescription clears the value of the "role_description" field.
func (aruo *AsRoleUpdateOne) ClearRoleDescription() *AsRoleUpdateOne {
	aruo.mutation.ClearRoleDescription()
	return aruo
}

// SetIsDeleted sets the "is_deleted" field.
func (aruo *AsRoleUpdateOne) SetIsDeleted(i int64) *AsRoleUpdateOne {
	aruo.mutation.ResetIsDeleted()
	aruo.mutation.SetIsDeleted(i)
	return aruo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (aruo *AsRoleUpdateOne) SetNillableIsDeleted(i *int64) *AsRoleUpdateOne {
	if i != nil {
		aruo.SetIsDeleted(*i)
	}
	return aruo
}

// AddIsDeleted adds i to the "is_deleted" field.
func (aruo *AsRoleUpdateOne) AddIsDeleted(i int64) *AsRoleUpdateOne {
	aruo.mutation.AddIsDeleted(i)
	return aruo
}

// SetStatus sets the "status" field.
func (aruo *AsRoleUpdateOne) SetStatus(i int64) *AsRoleUpdateOne {
	aruo.mutation.ResetStatus()
	aruo.mutation.SetStatus(i)
	return aruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (aruo *AsRoleUpdateOne) SetNillableStatus(i *int64) *AsRoleUpdateOne {
	if i != nil {
		aruo.SetStatus(*i)
	}
	return aruo
}

// AddStatus adds i to the "status" field.
func (aruo *AsRoleUpdateOne) AddStatus(i int64) *AsRoleUpdateOne {
	aruo.mutation.AddStatus(i)
	return aruo
}

// ClearStatus clears the value of the "status" field.
func (aruo *AsRoleUpdateOne) ClearStatus() *AsRoleUpdateOne {
	aruo.mutation.ClearStatus()
	return aruo
}

// SetCreateUser sets the "create_user" field.
func (aruo *AsRoleUpdateOne) SetCreateUser(i int64) *AsRoleUpdateOne {
	aruo.mutation.ResetCreateUser()
	aruo.mutation.SetCreateUser(i)
	return aruo
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (aruo *AsRoleUpdateOne) SetNillableCreateUser(i *int64) *AsRoleUpdateOne {
	if i != nil {
		aruo.SetCreateUser(*i)
	}
	return aruo
}

// AddCreateUser adds i to the "create_user" field.
func (aruo *AsRoleUpdateOne) AddCreateUser(i int64) *AsRoleUpdateOne {
	aruo.mutation.AddCreateUser(i)
	return aruo
}

// ClearCreateUser clears the value of the "create_user" field.
func (aruo *AsRoleUpdateOne) ClearCreateUser() *AsRoleUpdateOne {
	aruo.mutation.ClearCreateUser()
	return aruo
}

// SetUpdateUser sets the "update_user" field.
func (aruo *AsRoleUpdateOne) SetUpdateUser(i int64) *AsRoleUpdateOne {
	aruo.mutation.ResetUpdateUser()
	aruo.mutation.SetUpdateUser(i)
	return aruo
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (aruo *AsRoleUpdateOne) SetNillableUpdateUser(i *int64) *AsRoleUpdateOne {
	if i != nil {
		aruo.SetUpdateUser(*i)
	}
	return aruo
}

// AddUpdateUser adds i to the "update_user" field.
func (aruo *AsRoleUpdateOne) AddUpdateUser(i int64) *AsRoleUpdateOne {
	aruo.mutation.AddUpdateUser(i)
	return aruo
}

// ClearUpdateUser clears the value of the "update_user" field.
func (aruo *AsRoleUpdateOne) ClearUpdateUser() *AsRoleUpdateOne {
	aruo.mutation.ClearUpdateUser()
	return aruo
}

// SetUpdateTime sets the "update_time" field.
func (aruo *AsRoleUpdateOne) SetUpdateTime(dt date.DateTime) *AsRoleUpdateOne {
	aruo.mutation.SetUpdateTime(dt)
	return aruo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (aruo *AsRoleUpdateOne) ClearUpdateTime() *AsRoleUpdateOne {
	aruo.mutation.ClearUpdateTime()
	return aruo
}

// AddUserIDs adds the "users" edge to the AsUser entity by IDs.
func (aruo *AsRoleUpdateOne) AddUserIDs(ids ...int64) *AsRoleUpdateOne {
	aruo.mutation.AddUserIDs(ids...)
	return aruo
}

// AddUsers adds the "users" edges to the AsUser entity.
func (aruo *AsRoleUpdateOne) AddUsers(a ...*AsUser) *AsRoleUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aruo.AddUserIDs(ids...)
}

// AddJobIDs adds the "jobs" edge to the AsJob entity by IDs.
func (aruo *AsRoleUpdateOne) AddJobIDs(ids ...int64) *AsRoleUpdateOne {
	aruo.mutation.AddJobIDs(ids...)
	return aruo
}

// AddJobs adds the "jobs" edges to the AsJob entity.
func (aruo *AsRoleUpdateOne) AddJobs(a ...*AsJob) *AsRoleUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aruo.AddJobIDs(ids...)
}

// AddMenuIDs adds the "menus" edge to the AsMenu entity by IDs.
func (aruo *AsRoleUpdateOne) AddMenuIDs(ids ...int64) *AsRoleUpdateOne {
	aruo.mutation.AddMenuIDs(ids...)
	return aruo
}

// AddMenus adds the "menus" edges to the AsMenu entity.
func (aruo *AsRoleUpdateOne) AddMenus(a ...*AsMenu) *AsRoleUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aruo.AddMenuIDs(ids...)
}

// AddAttrRoleIDs adds the "attrRoles" edge to the AsTenantAttrRole entity by IDs.
func (aruo *AsRoleUpdateOne) AddAttrRoleIDs(ids ...int64) *AsRoleUpdateOne {
	aruo.mutation.AddAttrRoleIDs(ids...)
	return aruo
}

// AddAttrRoles adds the "attrRoles" edges to the AsTenantAttrRole entity.
func (aruo *AsRoleUpdateOne) AddAttrRoles(a ...*AsTenantAttrRole) *AsRoleUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aruo.AddAttrRoleIDs(ids...)
}

// Mutation returns the AsRoleMutation object of the builder.
func (aruo *AsRoleUpdateOne) Mutation() *AsRoleMutation {
	return aruo.mutation
}

// ClearUsers clears all "users" edges to the AsUser entity.
func (aruo *AsRoleUpdateOne) ClearUsers() *AsRoleUpdateOne {
	aruo.mutation.ClearUsers()
	return aruo
}

// RemoveUserIDs removes the "users" edge to AsUser entities by IDs.
func (aruo *AsRoleUpdateOne) RemoveUserIDs(ids ...int64) *AsRoleUpdateOne {
	aruo.mutation.RemoveUserIDs(ids...)
	return aruo
}

// RemoveUsers removes "users" edges to AsUser entities.
func (aruo *AsRoleUpdateOne) RemoveUsers(a ...*AsUser) *AsRoleUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aruo.RemoveUserIDs(ids...)
}

// ClearJobs clears all "jobs" edges to the AsJob entity.
func (aruo *AsRoleUpdateOne) ClearJobs() *AsRoleUpdateOne {
	aruo.mutation.ClearJobs()
	return aruo
}

// RemoveJobIDs removes the "jobs" edge to AsJob entities by IDs.
func (aruo *AsRoleUpdateOne) RemoveJobIDs(ids ...int64) *AsRoleUpdateOne {
	aruo.mutation.RemoveJobIDs(ids...)
	return aruo
}

// RemoveJobs removes "jobs" edges to AsJob entities.
func (aruo *AsRoleUpdateOne) RemoveJobs(a ...*AsJob) *AsRoleUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aruo.RemoveJobIDs(ids...)
}

// ClearMenus clears all "menus" edges to the AsMenu entity.
func (aruo *AsRoleUpdateOne) ClearMenus() *AsRoleUpdateOne {
	aruo.mutation.ClearMenus()
	return aruo
}

// RemoveMenuIDs removes the "menus" edge to AsMenu entities by IDs.
func (aruo *AsRoleUpdateOne) RemoveMenuIDs(ids ...int64) *AsRoleUpdateOne {
	aruo.mutation.RemoveMenuIDs(ids...)
	return aruo
}

// RemoveMenus removes "menus" edges to AsMenu entities.
func (aruo *AsRoleUpdateOne) RemoveMenus(a ...*AsMenu) *AsRoleUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aruo.RemoveMenuIDs(ids...)
}

// ClearAttrRoles clears all "attrRoles" edges to the AsTenantAttrRole entity.
func (aruo *AsRoleUpdateOne) ClearAttrRoles() *AsRoleUpdateOne {
	aruo.mutation.ClearAttrRoles()
	return aruo
}

// RemoveAttrRoleIDs removes the "attrRoles" edge to AsTenantAttrRole entities by IDs.
func (aruo *AsRoleUpdateOne) RemoveAttrRoleIDs(ids ...int64) *AsRoleUpdateOne {
	aruo.mutation.RemoveAttrRoleIDs(ids...)
	return aruo
}

// RemoveAttrRoles removes "attrRoles" edges to AsTenantAttrRole entities.
func (aruo *AsRoleUpdateOne) RemoveAttrRoles(a ...*AsTenantAttrRole) *AsRoleUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aruo.RemoveAttrRoleIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aruo *AsRoleUpdateOne) Select(field string, fields ...string) *AsRoleUpdateOne {
	aruo.fields = append([]string{field}, fields...)
	return aruo
}

// Save executes the query and returns the updated AsRole entity.
func (aruo *AsRoleUpdateOne) Save(ctx context.Context) (*AsRole, error) {
	var (
		err  error
		node *AsRole
	)
	aruo.defaults()
	if len(aruo.hooks) == 0 {
		node, err = aruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsRoleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aruo.mutation = mutation
			node, err = aruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aruo.hooks) - 1; i >= 0; i-- {
			if aruo.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = aruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aruo *AsRoleUpdateOne) SaveX(ctx context.Context) *AsRole {
	node, err := aruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aruo *AsRoleUpdateOne) Exec(ctx context.Context) error {
	_, err := aruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aruo *AsRoleUpdateOne) ExecX(ctx context.Context) {
	if err := aruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aruo *AsRoleUpdateOne) defaults() {
	if _, ok := aruo.mutation.UpdateTime(); !ok && !aruo.mutation.UpdateTimeCleared() {
		v := asrole.UpdateDefaultUpdateTime()
		aruo.mutation.SetUpdateTime(v)
	}
}

func (aruo *AsRoleUpdateOne) sqlSave(ctx context.Context) (_node *AsRole, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asrole.Table,
			Columns: asrole.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asrole.FieldID,
			},
		},
	}
	id, ok := aruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`schema: missing "AsRole.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asrole.FieldID)
		for _, f := range fields {
			if !asrole.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("schema: invalid field %q for query", f)}
			}
			if f != asrole.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aruo.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asrole.FieldSort,
		})
	}
	if value, ok := aruo.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asrole.FieldSort,
		})
	}
	if value, ok := aruo.mutation.RoleAlias(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asrole.FieldRoleAlias,
		})
	}
	if aruo.mutation.RoleAliasCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asrole.FieldRoleAlias,
		})
	}
	if value, ok := aruo.mutation.RoleName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asrole.FieldRoleName,
		})
	}
	if aruo.mutation.RoleNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asrole.FieldRoleName,
		})
	}
	if value, ok := aruo.mutation.RoleDescription(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asrole.FieldRoleDescription,
		})
	}
	if aruo.mutation.RoleDescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asrole.FieldRoleDescription,
		})
	}
	if value, ok := aruo.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asrole.FieldIsDeleted,
		})
	}
	if value, ok := aruo.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asrole.FieldIsDeleted,
		})
	}
	if value, ok := aruo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asrole.FieldStatus,
		})
	}
	if value, ok := aruo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asrole.FieldStatus,
		})
	}
	if aruo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asrole.FieldStatus,
		})
	}
	if value, ok := aruo.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asrole.FieldCreateUser,
		})
	}
	if value, ok := aruo.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asrole.FieldCreateUser,
		})
	}
	if aruo.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asrole.FieldCreateUser,
		})
	}
	if value, ok := aruo.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asrole.FieldUpdateUser,
		})
	}
	if value, ok := aruo.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asrole.FieldUpdateUser,
		})
	}
	if aruo.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asrole.FieldUpdateUser,
		})
	}
	if aruo.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asrole.FieldCreateTime,
		})
	}
	if value, ok := aruo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asrole.FieldUpdateTime,
		})
	}
	if aruo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asrole.FieldUpdateTime,
		})
	}
	if aruo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asrole.UsersTable,
			Columns: asrole.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !aruo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asrole.UsersTable,
			Columns: asrole.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asrole.UsersTable,
			Columns: asrole.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aruo.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asrole.JobsTable,
			Columns: asrole.JobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asjob.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.RemovedJobsIDs(); len(nodes) > 0 && !aruo.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asrole.JobsTable,
			Columns: asrole.JobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asjob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.JobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asrole.JobsTable,
			Columns: asrole.JobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asjob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aruo.mutation.MenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asrole.MenusTable,
			Columns: asrole.MenusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmenu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.RemovedMenusIDs(); len(nodes) > 0 && !aruo.mutation.MenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asrole.MenusTable,
			Columns: asrole.MenusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.MenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asrole.MenusTable,
			Columns: asrole.MenusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aruo.mutation.AttrRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asrole.AttrRolesTable,
			Columns: []string{asrole.AttrRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: astenantattrrole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.RemovedAttrRolesIDs(); len(nodes) > 0 && !aruo.mutation.AttrRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asrole.AttrRolesTable,
			Columns: []string{asrole.AttrRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: astenantattrrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.AttrRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asrole.AttrRolesTable,
			Columns: []string{asrole.AttrRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: astenantattrrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AsRole{config: aruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
