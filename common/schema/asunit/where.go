// Code generated by entc, DO NOT EDIT.

package asunit

import (
	"orginone/common/schema/predicate"
	"orginone/common/tools/date"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UnitName applies equality check predicate on the "unit_name" field. It's identical to UnitNameEQ.
func UnitName(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitName), v))
	})
}

// UnitNameEn applies equality check predicate on the "unit_name_en" field. It's identical to UnitNameEnEQ.
func UnitNameEn(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitNameEn), v))
	})
}

// OrganizationForm applies equality check predicate on the "organization_form" field. It's identical to OrganizationFormEQ.
func OrganizationForm(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrganizationForm), v))
	})
}

// UnitType applies equality check predicate on the "unit_type" field. It's identical to UnitTypeEQ.
func UnitType(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitType), v))
	})
}

// ParentNodeName applies equality check predicate on the "parent_node_name" field. It's identical to ParentNodeNameEQ.
func ParentNodeName(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParentNodeName), v))
	})
}

// ChargeSectionID applies equality check predicate on the "charge_section_id" field. It's identical to ChargeSectionIDEQ.
func ChargeSectionID(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChargeSectionID), v))
	})
}

// ChargeSectionCode applies equality check predicate on the "charge_section_code" field. It's identical to ChargeSectionCodeEQ.
func ChargeSectionCode(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChargeSectionCode), v))
	})
}

// ChargeSectionName applies equality check predicate on the "charge_section_name" field. It's identical to ChargeSectionNameEQ.
func ChargeSectionName(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChargeSectionName), v))
	})
}

// LocalFinancialCode applies equality check predicate on the "local_financial_code" field. It's identical to LocalFinancialCodeEQ.
func LocalFinancialCode(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLocalFinancialCode), v))
	})
}

// LocalFinancialName applies equality check predicate on the "local_financial_name" field. It's identical to LocalFinancialNameEQ.
func LocalFinancialName(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLocalFinancialName), v))
	})
}

// LocalFinancialID applies equality check predicate on the "local_financial_id" field. It's identical to LocalFinancialIDEQ.
func LocalFinancialID(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLocalFinancialID), v))
	})
}

// OfficeAdministrationCode applies equality check predicate on the "office_administration_code" field. It's identical to OfficeAdministrationCodeEQ.
func OfficeAdministrationCode(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOfficeAdministrationCode), v))
	})
}

// OfficeAdministrationName applies equality check predicate on the "office_administration_name" field. It's identical to OfficeAdministrationNameEQ.
func OfficeAdministrationName(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOfficeAdministrationName), v))
	})
}

// AdministrationDivisionCode applies equality check predicate on the "administration_division_code" field. It's identical to AdministrationDivisionCodeEQ.
func AdministrationDivisionCode(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAdministrationDivisionCode), v))
	})
}

// AdministrationDivisionName applies equality check predicate on the "administration_division_name" field. It's identical to AdministrationDivisionNameEQ.
func AdministrationDivisionName(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAdministrationDivisionName), v))
	})
}

// BudgetCode applies equality check predicate on the "budget_code" field. It's identical to BudgetCodeEQ.
func BudgetCode(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBudgetCode), v))
	})
}

// CollegeCode applies equality check predicate on the "college_code" field. It's identical to CollegeCodeEQ.
func CollegeCode(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCollegeCode), v))
	})
}

// OrganizationCode applies equality check predicate on the "organization_code" field. It's identical to OrganizationCodeEQ.
func OrganizationCode(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrganizationCode), v))
	})
}

// UnitTypeCode applies equality check predicate on the "unit_type_code" field. It's identical to UnitTypeCodeEQ.
func UnitTypeCode(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitTypeCode), v))
	})
}

// UnitTypeName applies equality check predicate on the "unit_type_name" field. It's identical to UnitTypeNameEQ.
func UnitTypeName(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitTypeName), v))
	})
}

// UnitBasicProperty applies equality check predicate on the "unit_basic_property" field. It's identical to UnitBasicPropertyEQ.
func UnitBasicProperty(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitBasicProperty), v))
	})
}

// SocialCreditCode applies equality check predicate on the "social_credit_code" field. It's identical to SocialCreditCodeEQ.
func SocialCreditCode(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSocialCreditCode), v))
	})
}

// BudgetUnitName applies equality check predicate on the "budget_unit_name" field. It's identical to BudgetUnitNameEQ.
func BudgetUnitName(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBudgetUnitName), v))
	})
}

// BudgetUnitCode applies equality check predicate on the "budget_unit_code" field. It's identical to BudgetUnitCodeEQ.
func BudgetUnitCode(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBudgetUnitCode), v))
	})
}

// BudgetManagementLevel applies equality check predicate on the "budget_management_level" field. It's identical to BudgetManagementLevelEQ.
func BudgetManagementLevel(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBudgetManagementLevel), v))
	})
}

// FirmName applies equality check predicate on the "firm_name" field. It's identical to FirmNameEQ.
func FirmName(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirmName), v))
	})
}

// FirmCode applies equality check predicate on the "firm_code" field. It's identical to FirmCodeEQ.
func FirmCode(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirmCode), v))
	})
}

// TelephoneNumber applies equality check predicate on the "telephone_number" field. It's identical to TelephoneNumberEQ.
func TelephoneNumber(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTelephoneNumber), v))
	})
}

// PhoneNumber applies equality check predicate on the "phone_number" field. It's identical to PhoneNumberEQ.
func PhoneNumber(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhoneNumber), v))
	})
}

// FaxNumber applies equality check predicate on the "fax_number" field. It's identical to FaxNumberEQ.
func FaxNumber(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFaxNumber), v))
	})
}

// EmailAddress applies equality check predicate on the "email_address" field. It's identical to EmailAddressEQ.
func EmailAddress(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmailAddress), v))
	})
}

// Province applies equality check predicate on the "province" field. It's identical to ProvinceEQ.
func Province(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProvince), v))
	})
}

// City applies equality check predicate on the "city" field. It's identical to CityEQ.
func City(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCity), v))
	})
}

// County applies equality check predicate on the "county" field. It's identical to CountyEQ.
func County(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCounty), v))
	})
}

// StreetAddress applies equality check predicate on the "street_address" field. It's identical to StreetAddressEQ.
func StreetAddress(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStreetAddress), v))
	})
}

// PostalCode applies equality check predicate on the "postal_code" field. It's identical to PostalCodeEQ.
func PostalCode(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPostalCode), v))
	})
}

// FundSupplyModeName applies equality check predicate on the "fund_supply_mode_name" field. It's identical to FundSupplyModeNameEQ.
func FundSupplyModeName(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFundSupplyModeName), v))
	})
}

// FundSupplyModeCode applies equality check predicate on the "fund_supply_mode_code" field. It's identical to FundSupplyModeCodeEQ.
func FundSupplyModeCode(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFundSupplyModeCode), v))
	})
}

// AdministrationLevelName applies equality check predicate on the "administration_level_name" field. It's identical to AdministrationLevelNameEQ.
func AdministrationLevelName(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAdministrationLevelName), v))
	})
}

// AdministrationLevelType applies equality check predicate on the "administration_level_type" field. It's identical to AdministrationLevelTypeEQ.
func AdministrationLevelType(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAdministrationLevelType), v))
	})
}

// DepartmentCategoryName applies equality check predicate on the "department_category_name" field. It's identical to DepartmentCategoryNameEQ.
func DepartmentCategoryName(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDepartmentCategoryName), v))
	})
}

// BusinessDepartmentClassificationCode applies equality check predicate on the "business_department_classification_code" field. It's identical to BusinessDepartmentClassificationCodeEQ.
func BusinessDepartmentClassificationCode(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBusinessDepartmentClassificationCode), v))
	})
}

// Principal applies equality check predicate on the "principal" field. It's identical to PrincipalEQ.
func Principal(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrincipal), v))
	})
}

// Contact applies equality check predicate on the "contact" field. It's identical to ContactEQ.
func Contact(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContact), v))
	})
}

// CorporateRepresentative applies equality check predicate on the "corporate_representative" field. It's identical to CorporateRepresentativeEQ.
func CorporateRepresentative(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCorporateRepresentative), v))
	})
}

// EconomicType applies equality check predicate on the "economic_type" field. It's identical to EconomicTypeEQ.
func EconomicType(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEconomicType), v))
	})
}

// FinancialAffiliation applies equality check predicate on the "financial_affiliation" field. It's identical to FinancialAffiliationEQ.
func FinancialAffiliation(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFinancialAffiliation), v))
	})
}

// FinancialUnit applies equality check predicate on the "financial_unit" field. It's identical to FinancialUnitEQ.
func FinancialUnit(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFinancialUnit), v))
	})
}

// VerticalUnit applies equality check predicate on the "vertical_unit" field. It's identical to VerticalUnitEQ.
func VerticalUnit(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVerticalUnit), v))
	})
}

// VirtualUnit applies equality check predicate on the "virtual_unit" field. It's identical to VirtualUnitEQ.
func VirtualUnit(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVirtualUnit), v))
	})
}

// AccountingSystem applies equality check predicate on the "accounting_system" field. It's identical to AccountingSystemEQ.
func AccountingSystem(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountingSystem), v))
	})
}

// CorporateTag applies equality check predicate on the "corporate_tag" field. It's identical to CorporateTagEQ.
func CorporateTag(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCorporateTag), v))
	})
}

// MaintainerMark applies equality check predicate on the "maintainer_mark" field. It's identical to MaintainerMarkEQ.
func MaintainerMark(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaintainerMark), v))
	})
}

// SupplierMark applies equality check predicate on the "supplier_mark" field. It's identical to SupplierMarkEQ.
func SupplierMark(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSupplierMark), v))
	})
}

// ManufactureMark applies equality check predicate on the "manufacture_mark" field. It's identical to ManufactureMarkEQ.
func ManufactureMark(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldManufactureMark), v))
	})
}

// AssetDisposalAgencyTag applies equality check predicate on the "asset_disposal_agency_tag" field. It's identical to AssetDisposalAgencyTagEQ.
func AssetDisposalAgencyTag(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAssetDisposalAgencyTag), v))
	})
}

// StateAssetManagementCompany applies equality check predicate on the "state_asset_management_company" field. It's identical to StateAssetManagementCompanyEQ.
func StateAssetManagementCompany(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStateAssetManagementCompany), v))
	})
}

// InstitutionNumber applies equality check predicate on the "institution_number" field. It's identical to InstitutionNumberEQ.
func InstitutionNumber(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstitutionNumber), v))
	})
}

// AuthorizedNumber applies equality check predicate on the "authorized_number" field. It's identical to AuthorizedNumberEQ.
func AuthorizedNumber(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAuthorizedNumber), v))
	})
}

// OfSideNumber applies equality check predicate on the "of_side_number" field. It's identical to OfSideNumberEQ.
func OfSideNumber(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOfSideNumber), v))
	})
}

// InstitutionAuthority applies equality check predicate on the "institution_authority" field. It's identical to InstitutionAuthorityEQ.
func InstitutionAuthority(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstitutionAuthority), v))
	})
}

// AdministrationAuthority applies equality check predicate on the "administration_authority" field. It's identical to AdministrationAuthorityEQ.
func AdministrationAuthority(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAdministrationAuthority), v))
	})
}

// EnableTime applies equality check predicate on the "enable_time" field. It's identical to EnableTimeEQ.
func EnableTime(v date.DateTime) predicate.AsUnit {
	vc := time.Time(v)
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnableTime), vc))
	})
}

// DisableTime applies equality check predicate on the "disable_time" field. It's identical to DisableTimeEQ.
func DisableTime(v date.DateTime) predicate.AsUnit {
	vc := time.Time(v)
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDisableTime), vc))
	})
}

// SealTime applies equality check predicate on the "seal_time" field. It's identical to SealTimeEQ.
func SealTime(v date.DateTime) predicate.AsUnit {
	vc := time.Time(v)
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSealTime), vc))
	})
}

// UnitRemark applies equality check predicate on the "unit_remark" field. It's identical to UnitRemarkEQ.
func UnitRemark(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitRemark), v))
	})
}

// AssetDownloadStatus applies equality check predicate on the "asset_download_status" field. It's identical to AssetDownloadStatusEQ.
func AssetDownloadStatus(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAssetDownloadStatus), v))
	})
}

// LatitudeAndLongitude applies equality check predicate on the "latitude_and_longitude" field. It's identical to LatitudeAndLongitudeEQ.
func LatitudeAndLongitude(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLatitudeAndLongitude), v))
	})
}

// Sort applies equality check predicate on the "sort" field. It's identical to SortEQ.
func Sort(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSort), v))
	})
}

// OrganCode applies equality check predicate on the "organ_code" field. It's identical to OrganCodeEQ.
func OrganCode(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrganCode), v))
	})
}

// HadInnerNumber applies equality check predicate on the "had_inner_number" field. It's identical to HadInnerNumberEQ.
func HadInnerNumber(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHadInnerNumber), v))
	})
}

// ApproveInnerNumber applies equality check predicate on the "approve_inner_number" field. It's identical to ApproveInnerNumberEQ.
func ApproveInnerNumber(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldApproveInnerNumber), v))
	})
}

// Img applies equality check predicate on the "img" field. It's identical to ImgEQ.
func Img(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImg), v))
	})
}

// LinkMan applies equality check predicate on the "link_man" field. It's identical to LinkManEQ.
func LinkMan(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLinkMan), v))
	})
}

// LinkPhone applies equality check predicate on the "link_phone" field. It's identical to LinkPhoneEQ.
func LinkPhone(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLinkPhone), v))
	})
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantID), v))
	})
}

// UnitCode applies equality check predicate on the "unit_code" field. It's identical to UnitCodeEQ.
func UnitCode(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitCode), v))
	})
}

// AuthorityTotal applies equality check predicate on the "authority_total" field. It's identical to AuthorityTotalEQ.
func AuthorityTotal(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAuthorityTotal), v))
	})
}

// StaffOnActiveDuty applies equality check predicate on the "staff_on_active_duty" field. It's identical to StaffOnActiveDutyEQ.
func StaffOnActiveDuty(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStaffOnActiveDuty), v))
	})
}

// RetiredStaff applies equality check predicate on the "retired_staff" field. It's identical to RetiredStaffEQ.
func RetiredStaff(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRetiredStaff), v))
	})
}

// OtherStaff applies equality check predicate on the "other_staff" field. It's identical to OtherStaffEQ.
func OtherStaff(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOtherStaff), v))
	})
}

// IsVirtual applies equality check predicate on the "is_virtual" field. It's identical to IsVirtualEQ.
func IsVirtual(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsVirtual), v))
	})
}

// UnitReform applies equality check predicate on the "unit_reform" field. It's identical to UnitReformEQ.
func UnitReform(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitReform), v))
	})
}

// PersonExpenditure applies equality check predicate on the "person_expenditure" field. It's identical to PersonExpenditureEQ.
func PersonExpenditure(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPersonExpenditure), v))
	})
}

// InstitutionType applies equality check predicate on the "institution_type" field. It's identical to InstitutionTypeEQ.
func InstitutionType(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstitutionType), v))
	})
}

// DepartmentIdentification applies equality check predicate on the "department_identification" field. It's identical to DepartmentIdentificationEQ.
func DepartmentIdentification(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDepartmentIdentification), v))
	})
}

// TotalHeadcount applies equality check predicate on the "total_headcount" field. It's identical to TotalHeadcountEQ.
func TotalHeadcount(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalHeadcount), v))
	})
}

// IsDeleted applies equality check predicate on the "is_deleted" field. It's identical to IsDeletedEQ.
func IsDeleted(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDeleted), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// CreateUser applies equality check predicate on the "create_user" field. It's identical to CreateUserEQ.
func CreateUser(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateUser), v))
	})
}

// UpdateUser applies equality check predicate on the "update_user" field. It's identical to UpdateUserEQ.
func UpdateUser(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateUser), v))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v date.DateTime) predicate.AsUnit {
	vc := time.Time(v)
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), vc))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v date.DateTime) predicate.AsUnit {
	vc := time.Time(v)
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), vc))
	})
}

// UnitNameEQ applies the EQ predicate on the "unit_name" field.
func UnitNameEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitName), v))
	})
}

// UnitNameNEQ applies the NEQ predicate on the "unit_name" field.
func UnitNameNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnitName), v))
	})
}

// UnitNameIn applies the In predicate on the "unit_name" field.
func UnitNameIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUnitName), v...))
	})
}

// UnitNameNotIn applies the NotIn predicate on the "unit_name" field.
func UnitNameNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUnitName), v...))
	})
}

// UnitNameGT applies the GT predicate on the "unit_name" field.
func UnitNameGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnitName), v))
	})
}

// UnitNameGTE applies the GTE predicate on the "unit_name" field.
func UnitNameGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnitName), v))
	})
}

// UnitNameLT applies the LT predicate on the "unit_name" field.
func UnitNameLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnitName), v))
	})
}

// UnitNameLTE applies the LTE predicate on the "unit_name" field.
func UnitNameLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnitName), v))
	})
}

// UnitNameContains applies the Contains predicate on the "unit_name" field.
func UnitNameContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUnitName), v))
	})
}

// UnitNameHasPrefix applies the HasPrefix predicate on the "unit_name" field.
func UnitNameHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUnitName), v))
	})
}

// UnitNameHasSuffix applies the HasSuffix predicate on the "unit_name" field.
func UnitNameHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUnitName), v))
	})
}

// UnitNameEqualFold applies the EqualFold predicate on the "unit_name" field.
func UnitNameEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUnitName), v))
	})
}

// UnitNameContainsFold applies the ContainsFold predicate on the "unit_name" field.
func UnitNameContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUnitName), v))
	})
}

// UnitNameEnEQ applies the EQ predicate on the "unit_name_en" field.
func UnitNameEnEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitNameEn), v))
	})
}

// UnitNameEnNEQ applies the NEQ predicate on the "unit_name_en" field.
func UnitNameEnNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnitNameEn), v))
	})
}

// UnitNameEnIn applies the In predicate on the "unit_name_en" field.
func UnitNameEnIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUnitNameEn), v...))
	})
}

// UnitNameEnNotIn applies the NotIn predicate on the "unit_name_en" field.
func UnitNameEnNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUnitNameEn), v...))
	})
}

// UnitNameEnGT applies the GT predicate on the "unit_name_en" field.
func UnitNameEnGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnitNameEn), v))
	})
}

// UnitNameEnGTE applies the GTE predicate on the "unit_name_en" field.
func UnitNameEnGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnitNameEn), v))
	})
}

// UnitNameEnLT applies the LT predicate on the "unit_name_en" field.
func UnitNameEnLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnitNameEn), v))
	})
}

// UnitNameEnLTE applies the LTE predicate on the "unit_name_en" field.
func UnitNameEnLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnitNameEn), v))
	})
}

// UnitNameEnContains applies the Contains predicate on the "unit_name_en" field.
func UnitNameEnContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUnitNameEn), v))
	})
}

// UnitNameEnHasPrefix applies the HasPrefix predicate on the "unit_name_en" field.
func UnitNameEnHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUnitNameEn), v))
	})
}

// UnitNameEnHasSuffix applies the HasSuffix predicate on the "unit_name_en" field.
func UnitNameEnHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUnitNameEn), v))
	})
}

// UnitNameEnIsNil applies the IsNil predicate on the "unit_name_en" field.
func UnitNameEnIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUnitNameEn)))
	})
}

// UnitNameEnNotNil applies the NotNil predicate on the "unit_name_en" field.
func UnitNameEnNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUnitNameEn)))
	})
}

// UnitNameEnEqualFold applies the EqualFold predicate on the "unit_name_en" field.
func UnitNameEnEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUnitNameEn), v))
	})
}

// UnitNameEnContainsFold applies the ContainsFold predicate on the "unit_name_en" field.
func UnitNameEnContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUnitNameEn), v))
	})
}

// OrganizationFormEQ applies the EQ predicate on the "organization_form" field.
func OrganizationFormEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrganizationForm), v))
	})
}

// OrganizationFormNEQ applies the NEQ predicate on the "organization_form" field.
func OrganizationFormNEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrganizationForm), v))
	})
}

// OrganizationFormIn applies the In predicate on the "organization_form" field.
func OrganizationFormIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrganizationForm), v...))
	})
}

// OrganizationFormNotIn applies the NotIn predicate on the "organization_form" field.
func OrganizationFormNotIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrganizationForm), v...))
	})
}

// OrganizationFormGT applies the GT predicate on the "organization_form" field.
func OrganizationFormGT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrganizationForm), v))
	})
}

// OrganizationFormGTE applies the GTE predicate on the "organization_form" field.
func OrganizationFormGTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrganizationForm), v))
	})
}

// OrganizationFormLT applies the LT predicate on the "organization_form" field.
func OrganizationFormLT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrganizationForm), v))
	})
}

// OrganizationFormLTE applies the LTE predicate on the "organization_form" field.
func OrganizationFormLTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrganizationForm), v))
	})
}

// OrganizationFormIsNil applies the IsNil predicate on the "organization_form" field.
func OrganizationFormIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOrganizationForm)))
	})
}

// OrganizationFormNotNil applies the NotNil predicate on the "organization_form" field.
func OrganizationFormNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOrganizationForm)))
	})
}

// UnitTypeEQ applies the EQ predicate on the "unit_type" field.
func UnitTypeEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitType), v))
	})
}

// UnitTypeNEQ applies the NEQ predicate on the "unit_type" field.
func UnitTypeNEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnitType), v))
	})
}

// UnitTypeIn applies the In predicate on the "unit_type" field.
func UnitTypeIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUnitType), v...))
	})
}

// UnitTypeNotIn applies the NotIn predicate on the "unit_type" field.
func UnitTypeNotIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUnitType), v...))
	})
}

// UnitTypeGT applies the GT predicate on the "unit_type" field.
func UnitTypeGT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnitType), v))
	})
}

// UnitTypeGTE applies the GTE predicate on the "unit_type" field.
func UnitTypeGTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnitType), v))
	})
}

// UnitTypeLT applies the LT predicate on the "unit_type" field.
func UnitTypeLT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnitType), v))
	})
}

// UnitTypeLTE applies the LTE predicate on the "unit_type" field.
func UnitTypeLTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnitType), v))
	})
}

// UnitTypeIsNil applies the IsNil predicate on the "unit_type" field.
func UnitTypeIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUnitType)))
	})
}

// UnitTypeNotNil applies the NotNil predicate on the "unit_type" field.
func UnitTypeNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUnitType)))
	})
}

// ParentNodeNameEQ applies the EQ predicate on the "parent_node_name" field.
func ParentNodeNameEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParentNodeName), v))
	})
}

// ParentNodeNameNEQ applies the NEQ predicate on the "parent_node_name" field.
func ParentNodeNameNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldParentNodeName), v))
	})
}

// ParentNodeNameIn applies the In predicate on the "parent_node_name" field.
func ParentNodeNameIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldParentNodeName), v...))
	})
}

// ParentNodeNameNotIn applies the NotIn predicate on the "parent_node_name" field.
func ParentNodeNameNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldParentNodeName), v...))
	})
}

// ParentNodeNameGT applies the GT predicate on the "parent_node_name" field.
func ParentNodeNameGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldParentNodeName), v))
	})
}

// ParentNodeNameGTE applies the GTE predicate on the "parent_node_name" field.
func ParentNodeNameGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldParentNodeName), v))
	})
}

// ParentNodeNameLT applies the LT predicate on the "parent_node_name" field.
func ParentNodeNameLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldParentNodeName), v))
	})
}

// ParentNodeNameLTE applies the LTE predicate on the "parent_node_name" field.
func ParentNodeNameLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldParentNodeName), v))
	})
}

// ParentNodeNameContains applies the Contains predicate on the "parent_node_name" field.
func ParentNodeNameContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldParentNodeName), v))
	})
}

// ParentNodeNameHasPrefix applies the HasPrefix predicate on the "parent_node_name" field.
func ParentNodeNameHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldParentNodeName), v))
	})
}

// ParentNodeNameHasSuffix applies the HasSuffix predicate on the "parent_node_name" field.
func ParentNodeNameHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldParentNodeName), v))
	})
}

// ParentNodeNameIsNil applies the IsNil predicate on the "parent_node_name" field.
func ParentNodeNameIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldParentNodeName)))
	})
}

// ParentNodeNameNotNil applies the NotNil predicate on the "parent_node_name" field.
func ParentNodeNameNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldParentNodeName)))
	})
}

// ParentNodeNameEqualFold applies the EqualFold predicate on the "parent_node_name" field.
func ParentNodeNameEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldParentNodeName), v))
	})
}

// ParentNodeNameContainsFold applies the ContainsFold predicate on the "parent_node_name" field.
func ParentNodeNameContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldParentNodeName), v))
	})
}

// ChargeSectionIDEQ applies the EQ predicate on the "charge_section_id" field.
func ChargeSectionIDEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChargeSectionID), v))
	})
}

// ChargeSectionIDNEQ applies the NEQ predicate on the "charge_section_id" field.
func ChargeSectionIDNEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChargeSectionID), v))
	})
}

// ChargeSectionIDIn applies the In predicate on the "charge_section_id" field.
func ChargeSectionIDIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldChargeSectionID), v...))
	})
}

// ChargeSectionIDNotIn applies the NotIn predicate on the "charge_section_id" field.
func ChargeSectionIDNotIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldChargeSectionID), v...))
	})
}

// ChargeSectionIDGT applies the GT predicate on the "charge_section_id" field.
func ChargeSectionIDGT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChargeSectionID), v))
	})
}

// ChargeSectionIDGTE applies the GTE predicate on the "charge_section_id" field.
func ChargeSectionIDGTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChargeSectionID), v))
	})
}

// ChargeSectionIDLT applies the LT predicate on the "charge_section_id" field.
func ChargeSectionIDLT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChargeSectionID), v))
	})
}

// ChargeSectionIDLTE applies the LTE predicate on the "charge_section_id" field.
func ChargeSectionIDLTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChargeSectionID), v))
	})
}

// ChargeSectionIDIsNil applies the IsNil predicate on the "charge_section_id" field.
func ChargeSectionIDIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldChargeSectionID)))
	})
}

// ChargeSectionIDNotNil applies the NotNil predicate on the "charge_section_id" field.
func ChargeSectionIDNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldChargeSectionID)))
	})
}

// ChargeSectionCodeEQ applies the EQ predicate on the "charge_section_code" field.
func ChargeSectionCodeEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChargeSectionCode), v))
	})
}

// ChargeSectionCodeNEQ applies the NEQ predicate on the "charge_section_code" field.
func ChargeSectionCodeNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChargeSectionCode), v))
	})
}

// ChargeSectionCodeIn applies the In predicate on the "charge_section_code" field.
func ChargeSectionCodeIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldChargeSectionCode), v...))
	})
}

// ChargeSectionCodeNotIn applies the NotIn predicate on the "charge_section_code" field.
func ChargeSectionCodeNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldChargeSectionCode), v...))
	})
}

// ChargeSectionCodeGT applies the GT predicate on the "charge_section_code" field.
func ChargeSectionCodeGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChargeSectionCode), v))
	})
}

// ChargeSectionCodeGTE applies the GTE predicate on the "charge_section_code" field.
func ChargeSectionCodeGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChargeSectionCode), v))
	})
}

// ChargeSectionCodeLT applies the LT predicate on the "charge_section_code" field.
func ChargeSectionCodeLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChargeSectionCode), v))
	})
}

// ChargeSectionCodeLTE applies the LTE predicate on the "charge_section_code" field.
func ChargeSectionCodeLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChargeSectionCode), v))
	})
}

// ChargeSectionCodeContains applies the Contains predicate on the "charge_section_code" field.
func ChargeSectionCodeContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldChargeSectionCode), v))
	})
}

// ChargeSectionCodeHasPrefix applies the HasPrefix predicate on the "charge_section_code" field.
func ChargeSectionCodeHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldChargeSectionCode), v))
	})
}

// ChargeSectionCodeHasSuffix applies the HasSuffix predicate on the "charge_section_code" field.
func ChargeSectionCodeHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldChargeSectionCode), v))
	})
}

// ChargeSectionCodeIsNil applies the IsNil predicate on the "charge_section_code" field.
func ChargeSectionCodeIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldChargeSectionCode)))
	})
}

// ChargeSectionCodeNotNil applies the NotNil predicate on the "charge_section_code" field.
func ChargeSectionCodeNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldChargeSectionCode)))
	})
}

// ChargeSectionCodeEqualFold applies the EqualFold predicate on the "charge_section_code" field.
func ChargeSectionCodeEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldChargeSectionCode), v))
	})
}

// ChargeSectionCodeContainsFold applies the ContainsFold predicate on the "charge_section_code" field.
func ChargeSectionCodeContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldChargeSectionCode), v))
	})
}

// ChargeSectionNameEQ applies the EQ predicate on the "charge_section_name" field.
func ChargeSectionNameEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChargeSectionName), v))
	})
}

// ChargeSectionNameNEQ applies the NEQ predicate on the "charge_section_name" field.
func ChargeSectionNameNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChargeSectionName), v))
	})
}

// ChargeSectionNameIn applies the In predicate on the "charge_section_name" field.
func ChargeSectionNameIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldChargeSectionName), v...))
	})
}

// ChargeSectionNameNotIn applies the NotIn predicate on the "charge_section_name" field.
func ChargeSectionNameNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldChargeSectionName), v...))
	})
}

// ChargeSectionNameGT applies the GT predicate on the "charge_section_name" field.
func ChargeSectionNameGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChargeSectionName), v))
	})
}

// ChargeSectionNameGTE applies the GTE predicate on the "charge_section_name" field.
func ChargeSectionNameGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChargeSectionName), v))
	})
}

// ChargeSectionNameLT applies the LT predicate on the "charge_section_name" field.
func ChargeSectionNameLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChargeSectionName), v))
	})
}

// ChargeSectionNameLTE applies the LTE predicate on the "charge_section_name" field.
func ChargeSectionNameLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChargeSectionName), v))
	})
}

// ChargeSectionNameContains applies the Contains predicate on the "charge_section_name" field.
func ChargeSectionNameContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldChargeSectionName), v))
	})
}

// ChargeSectionNameHasPrefix applies the HasPrefix predicate on the "charge_section_name" field.
func ChargeSectionNameHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldChargeSectionName), v))
	})
}

// ChargeSectionNameHasSuffix applies the HasSuffix predicate on the "charge_section_name" field.
func ChargeSectionNameHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldChargeSectionName), v))
	})
}

// ChargeSectionNameIsNil applies the IsNil predicate on the "charge_section_name" field.
func ChargeSectionNameIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldChargeSectionName)))
	})
}

// ChargeSectionNameNotNil applies the NotNil predicate on the "charge_section_name" field.
func ChargeSectionNameNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldChargeSectionName)))
	})
}

// ChargeSectionNameEqualFold applies the EqualFold predicate on the "charge_section_name" field.
func ChargeSectionNameEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldChargeSectionName), v))
	})
}

// ChargeSectionNameContainsFold applies the ContainsFold predicate on the "charge_section_name" field.
func ChargeSectionNameContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldChargeSectionName), v))
	})
}

// LocalFinancialCodeEQ applies the EQ predicate on the "local_financial_code" field.
func LocalFinancialCodeEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLocalFinancialCode), v))
	})
}

// LocalFinancialCodeNEQ applies the NEQ predicate on the "local_financial_code" field.
func LocalFinancialCodeNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLocalFinancialCode), v))
	})
}

// LocalFinancialCodeIn applies the In predicate on the "local_financial_code" field.
func LocalFinancialCodeIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLocalFinancialCode), v...))
	})
}

// LocalFinancialCodeNotIn applies the NotIn predicate on the "local_financial_code" field.
func LocalFinancialCodeNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLocalFinancialCode), v...))
	})
}

// LocalFinancialCodeGT applies the GT predicate on the "local_financial_code" field.
func LocalFinancialCodeGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLocalFinancialCode), v))
	})
}

// LocalFinancialCodeGTE applies the GTE predicate on the "local_financial_code" field.
func LocalFinancialCodeGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLocalFinancialCode), v))
	})
}

// LocalFinancialCodeLT applies the LT predicate on the "local_financial_code" field.
func LocalFinancialCodeLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLocalFinancialCode), v))
	})
}

// LocalFinancialCodeLTE applies the LTE predicate on the "local_financial_code" field.
func LocalFinancialCodeLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLocalFinancialCode), v))
	})
}

// LocalFinancialCodeContains applies the Contains predicate on the "local_financial_code" field.
func LocalFinancialCodeContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLocalFinancialCode), v))
	})
}

// LocalFinancialCodeHasPrefix applies the HasPrefix predicate on the "local_financial_code" field.
func LocalFinancialCodeHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLocalFinancialCode), v))
	})
}

// LocalFinancialCodeHasSuffix applies the HasSuffix predicate on the "local_financial_code" field.
func LocalFinancialCodeHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLocalFinancialCode), v))
	})
}

// LocalFinancialCodeIsNil applies the IsNil predicate on the "local_financial_code" field.
func LocalFinancialCodeIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLocalFinancialCode)))
	})
}

// LocalFinancialCodeNotNil applies the NotNil predicate on the "local_financial_code" field.
func LocalFinancialCodeNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLocalFinancialCode)))
	})
}

// LocalFinancialCodeEqualFold applies the EqualFold predicate on the "local_financial_code" field.
func LocalFinancialCodeEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLocalFinancialCode), v))
	})
}

// LocalFinancialCodeContainsFold applies the ContainsFold predicate on the "local_financial_code" field.
func LocalFinancialCodeContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLocalFinancialCode), v))
	})
}

// LocalFinancialNameEQ applies the EQ predicate on the "local_financial_name" field.
func LocalFinancialNameEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLocalFinancialName), v))
	})
}

// LocalFinancialNameNEQ applies the NEQ predicate on the "local_financial_name" field.
func LocalFinancialNameNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLocalFinancialName), v))
	})
}

// LocalFinancialNameIn applies the In predicate on the "local_financial_name" field.
func LocalFinancialNameIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLocalFinancialName), v...))
	})
}

// LocalFinancialNameNotIn applies the NotIn predicate on the "local_financial_name" field.
func LocalFinancialNameNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLocalFinancialName), v...))
	})
}

// LocalFinancialNameGT applies the GT predicate on the "local_financial_name" field.
func LocalFinancialNameGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLocalFinancialName), v))
	})
}

// LocalFinancialNameGTE applies the GTE predicate on the "local_financial_name" field.
func LocalFinancialNameGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLocalFinancialName), v))
	})
}

// LocalFinancialNameLT applies the LT predicate on the "local_financial_name" field.
func LocalFinancialNameLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLocalFinancialName), v))
	})
}

// LocalFinancialNameLTE applies the LTE predicate on the "local_financial_name" field.
func LocalFinancialNameLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLocalFinancialName), v))
	})
}

// LocalFinancialNameContains applies the Contains predicate on the "local_financial_name" field.
func LocalFinancialNameContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLocalFinancialName), v))
	})
}

// LocalFinancialNameHasPrefix applies the HasPrefix predicate on the "local_financial_name" field.
func LocalFinancialNameHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLocalFinancialName), v))
	})
}

// LocalFinancialNameHasSuffix applies the HasSuffix predicate on the "local_financial_name" field.
func LocalFinancialNameHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLocalFinancialName), v))
	})
}

// LocalFinancialNameIsNil applies the IsNil predicate on the "local_financial_name" field.
func LocalFinancialNameIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLocalFinancialName)))
	})
}

// LocalFinancialNameNotNil applies the NotNil predicate on the "local_financial_name" field.
func LocalFinancialNameNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLocalFinancialName)))
	})
}

// LocalFinancialNameEqualFold applies the EqualFold predicate on the "local_financial_name" field.
func LocalFinancialNameEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLocalFinancialName), v))
	})
}

// LocalFinancialNameContainsFold applies the ContainsFold predicate on the "local_financial_name" field.
func LocalFinancialNameContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLocalFinancialName), v))
	})
}

// LocalFinancialIDEQ applies the EQ predicate on the "local_financial_id" field.
func LocalFinancialIDEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLocalFinancialID), v))
	})
}

// LocalFinancialIDNEQ applies the NEQ predicate on the "local_financial_id" field.
func LocalFinancialIDNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLocalFinancialID), v))
	})
}

// LocalFinancialIDIn applies the In predicate on the "local_financial_id" field.
func LocalFinancialIDIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLocalFinancialID), v...))
	})
}

// LocalFinancialIDNotIn applies the NotIn predicate on the "local_financial_id" field.
func LocalFinancialIDNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLocalFinancialID), v...))
	})
}

// LocalFinancialIDGT applies the GT predicate on the "local_financial_id" field.
func LocalFinancialIDGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLocalFinancialID), v))
	})
}

// LocalFinancialIDGTE applies the GTE predicate on the "local_financial_id" field.
func LocalFinancialIDGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLocalFinancialID), v))
	})
}

// LocalFinancialIDLT applies the LT predicate on the "local_financial_id" field.
func LocalFinancialIDLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLocalFinancialID), v))
	})
}

// LocalFinancialIDLTE applies the LTE predicate on the "local_financial_id" field.
func LocalFinancialIDLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLocalFinancialID), v))
	})
}

// LocalFinancialIDContains applies the Contains predicate on the "local_financial_id" field.
func LocalFinancialIDContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLocalFinancialID), v))
	})
}

// LocalFinancialIDHasPrefix applies the HasPrefix predicate on the "local_financial_id" field.
func LocalFinancialIDHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLocalFinancialID), v))
	})
}

// LocalFinancialIDHasSuffix applies the HasSuffix predicate on the "local_financial_id" field.
func LocalFinancialIDHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLocalFinancialID), v))
	})
}

// LocalFinancialIDIsNil applies the IsNil predicate on the "local_financial_id" field.
func LocalFinancialIDIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLocalFinancialID)))
	})
}

// LocalFinancialIDNotNil applies the NotNil predicate on the "local_financial_id" field.
func LocalFinancialIDNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLocalFinancialID)))
	})
}

// LocalFinancialIDEqualFold applies the EqualFold predicate on the "local_financial_id" field.
func LocalFinancialIDEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLocalFinancialID), v))
	})
}

// LocalFinancialIDContainsFold applies the ContainsFold predicate on the "local_financial_id" field.
func LocalFinancialIDContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLocalFinancialID), v))
	})
}

// OfficeAdministrationCodeEQ applies the EQ predicate on the "office_administration_code" field.
func OfficeAdministrationCodeEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOfficeAdministrationCode), v))
	})
}

// OfficeAdministrationCodeNEQ applies the NEQ predicate on the "office_administration_code" field.
func OfficeAdministrationCodeNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOfficeAdministrationCode), v))
	})
}

// OfficeAdministrationCodeIn applies the In predicate on the "office_administration_code" field.
func OfficeAdministrationCodeIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOfficeAdministrationCode), v...))
	})
}

// OfficeAdministrationCodeNotIn applies the NotIn predicate on the "office_administration_code" field.
func OfficeAdministrationCodeNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOfficeAdministrationCode), v...))
	})
}

// OfficeAdministrationCodeGT applies the GT predicate on the "office_administration_code" field.
func OfficeAdministrationCodeGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOfficeAdministrationCode), v))
	})
}

// OfficeAdministrationCodeGTE applies the GTE predicate on the "office_administration_code" field.
func OfficeAdministrationCodeGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOfficeAdministrationCode), v))
	})
}

// OfficeAdministrationCodeLT applies the LT predicate on the "office_administration_code" field.
func OfficeAdministrationCodeLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOfficeAdministrationCode), v))
	})
}

// OfficeAdministrationCodeLTE applies the LTE predicate on the "office_administration_code" field.
func OfficeAdministrationCodeLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOfficeAdministrationCode), v))
	})
}

// OfficeAdministrationCodeContains applies the Contains predicate on the "office_administration_code" field.
func OfficeAdministrationCodeContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOfficeAdministrationCode), v))
	})
}

// OfficeAdministrationCodeHasPrefix applies the HasPrefix predicate on the "office_administration_code" field.
func OfficeAdministrationCodeHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOfficeAdministrationCode), v))
	})
}

// OfficeAdministrationCodeHasSuffix applies the HasSuffix predicate on the "office_administration_code" field.
func OfficeAdministrationCodeHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOfficeAdministrationCode), v))
	})
}

// OfficeAdministrationCodeIsNil applies the IsNil predicate on the "office_administration_code" field.
func OfficeAdministrationCodeIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOfficeAdministrationCode)))
	})
}

// OfficeAdministrationCodeNotNil applies the NotNil predicate on the "office_administration_code" field.
func OfficeAdministrationCodeNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOfficeAdministrationCode)))
	})
}

// OfficeAdministrationCodeEqualFold applies the EqualFold predicate on the "office_administration_code" field.
func OfficeAdministrationCodeEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOfficeAdministrationCode), v))
	})
}

// OfficeAdministrationCodeContainsFold applies the ContainsFold predicate on the "office_administration_code" field.
func OfficeAdministrationCodeContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOfficeAdministrationCode), v))
	})
}

// OfficeAdministrationNameEQ applies the EQ predicate on the "office_administration_name" field.
func OfficeAdministrationNameEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOfficeAdministrationName), v))
	})
}

// OfficeAdministrationNameNEQ applies the NEQ predicate on the "office_administration_name" field.
func OfficeAdministrationNameNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOfficeAdministrationName), v))
	})
}

// OfficeAdministrationNameIn applies the In predicate on the "office_administration_name" field.
func OfficeAdministrationNameIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOfficeAdministrationName), v...))
	})
}

// OfficeAdministrationNameNotIn applies the NotIn predicate on the "office_administration_name" field.
func OfficeAdministrationNameNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOfficeAdministrationName), v...))
	})
}

// OfficeAdministrationNameGT applies the GT predicate on the "office_administration_name" field.
func OfficeAdministrationNameGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOfficeAdministrationName), v))
	})
}

// OfficeAdministrationNameGTE applies the GTE predicate on the "office_administration_name" field.
func OfficeAdministrationNameGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOfficeAdministrationName), v))
	})
}

// OfficeAdministrationNameLT applies the LT predicate on the "office_administration_name" field.
func OfficeAdministrationNameLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOfficeAdministrationName), v))
	})
}

// OfficeAdministrationNameLTE applies the LTE predicate on the "office_administration_name" field.
func OfficeAdministrationNameLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOfficeAdministrationName), v))
	})
}

// OfficeAdministrationNameContains applies the Contains predicate on the "office_administration_name" field.
func OfficeAdministrationNameContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOfficeAdministrationName), v))
	})
}

// OfficeAdministrationNameHasPrefix applies the HasPrefix predicate on the "office_administration_name" field.
func OfficeAdministrationNameHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOfficeAdministrationName), v))
	})
}

// OfficeAdministrationNameHasSuffix applies the HasSuffix predicate on the "office_administration_name" field.
func OfficeAdministrationNameHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOfficeAdministrationName), v))
	})
}

// OfficeAdministrationNameIsNil applies the IsNil predicate on the "office_administration_name" field.
func OfficeAdministrationNameIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOfficeAdministrationName)))
	})
}

// OfficeAdministrationNameNotNil applies the NotNil predicate on the "office_administration_name" field.
func OfficeAdministrationNameNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOfficeAdministrationName)))
	})
}

// OfficeAdministrationNameEqualFold applies the EqualFold predicate on the "office_administration_name" field.
func OfficeAdministrationNameEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOfficeAdministrationName), v))
	})
}

// OfficeAdministrationNameContainsFold applies the ContainsFold predicate on the "office_administration_name" field.
func OfficeAdministrationNameContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOfficeAdministrationName), v))
	})
}

// AdministrationDivisionCodeEQ applies the EQ predicate on the "administration_division_code" field.
func AdministrationDivisionCodeEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAdministrationDivisionCode), v))
	})
}

// AdministrationDivisionCodeNEQ applies the NEQ predicate on the "administration_division_code" field.
func AdministrationDivisionCodeNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAdministrationDivisionCode), v))
	})
}

// AdministrationDivisionCodeIn applies the In predicate on the "administration_division_code" field.
func AdministrationDivisionCodeIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAdministrationDivisionCode), v...))
	})
}

// AdministrationDivisionCodeNotIn applies the NotIn predicate on the "administration_division_code" field.
func AdministrationDivisionCodeNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAdministrationDivisionCode), v...))
	})
}

// AdministrationDivisionCodeGT applies the GT predicate on the "administration_division_code" field.
func AdministrationDivisionCodeGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAdministrationDivisionCode), v))
	})
}

// AdministrationDivisionCodeGTE applies the GTE predicate on the "administration_division_code" field.
func AdministrationDivisionCodeGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAdministrationDivisionCode), v))
	})
}

// AdministrationDivisionCodeLT applies the LT predicate on the "administration_division_code" field.
func AdministrationDivisionCodeLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAdministrationDivisionCode), v))
	})
}

// AdministrationDivisionCodeLTE applies the LTE predicate on the "administration_division_code" field.
func AdministrationDivisionCodeLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAdministrationDivisionCode), v))
	})
}

// AdministrationDivisionCodeContains applies the Contains predicate on the "administration_division_code" field.
func AdministrationDivisionCodeContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAdministrationDivisionCode), v))
	})
}

// AdministrationDivisionCodeHasPrefix applies the HasPrefix predicate on the "administration_division_code" field.
func AdministrationDivisionCodeHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAdministrationDivisionCode), v))
	})
}

// AdministrationDivisionCodeHasSuffix applies the HasSuffix predicate on the "administration_division_code" field.
func AdministrationDivisionCodeHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAdministrationDivisionCode), v))
	})
}

// AdministrationDivisionCodeIsNil applies the IsNil predicate on the "administration_division_code" field.
func AdministrationDivisionCodeIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAdministrationDivisionCode)))
	})
}

// AdministrationDivisionCodeNotNil applies the NotNil predicate on the "administration_division_code" field.
func AdministrationDivisionCodeNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAdministrationDivisionCode)))
	})
}

// AdministrationDivisionCodeEqualFold applies the EqualFold predicate on the "administration_division_code" field.
func AdministrationDivisionCodeEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAdministrationDivisionCode), v))
	})
}

// AdministrationDivisionCodeContainsFold applies the ContainsFold predicate on the "administration_division_code" field.
func AdministrationDivisionCodeContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAdministrationDivisionCode), v))
	})
}

// AdministrationDivisionNameEQ applies the EQ predicate on the "administration_division_name" field.
func AdministrationDivisionNameEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAdministrationDivisionName), v))
	})
}

// AdministrationDivisionNameNEQ applies the NEQ predicate on the "administration_division_name" field.
func AdministrationDivisionNameNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAdministrationDivisionName), v))
	})
}

// AdministrationDivisionNameIn applies the In predicate on the "administration_division_name" field.
func AdministrationDivisionNameIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAdministrationDivisionName), v...))
	})
}

// AdministrationDivisionNameNotIn applies the NotIn predicate on the "administration_division_name" field.
func AdministrationDivisionNameNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAdministrationDivisionName), v...))
	})
}

// AdministrationDivisionNameGT applies the GT predicate on the "administration_division_name" field.
func AdministrationDivisionNameGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAdministrationDivisionName), v))
	})
}

// AdministrationDivisionNameGTE applies the GTE predicate on the "administration_division_name" field.
func AdministrationDivisionNameGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAdministrationDivisionName), v))
	})
}

// AdministrationDivisionNameLT applies the LT predicate on the "administration_division_name" field.
func AdministrationDivisionNameLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAdministrationDivisionName), v))
	})
}

// AdministrationDivisionNameLTE applies the LTE predicate on the "administration_division_name" field.
func AdministrationDivisionNameLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAdministrationDivisionName), v))
	})
}

// AdministrationDivisionNameContains applies the Contains predicate on the "administration_division_name" field.
func AdministrationDivisionNameContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAdministrationDivisionName), v))
	})
}

// AdministrationDivisionNameHasPrefix applies the HasPrefix predicate on the "administration_division_name" field.
func AdministrationDivisionNameHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAdministrationDivisionName), v))
	})
}

// AdministrationDivisionNameHasSuffix applies the HasSuffix predicate on the "administration_division_name" field.
func AdministrationDivisionNameHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAdministrationDivisionName), v))
	})
}

// AdministrationDivisionNameIsNil applies the IsNil predicate on the "administration_division_name" field.
func AdministrationDivisionNameIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAdministrationDivisionName)))
	})
}

// AdministrationDivisionNameNotNil applies the NotNil predicate on the "administration_division_name" field.
func AdministrationDivisionNameNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAdministrationDivisionName)))
	})
}

// AdministrationDivisionNameEqualFold applies the EqualFold predicate on the "administration_division_name" field.
func AdministrationDivisionNameEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAdministrationDivisionName), v))
	})
}

// AdministrationDivisionNameContainsFold applies the ContainsFold predicate on the "administration_division_name" field.
func AdministrationDivisionNameContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAdministrationDivisionName), v))
	})
}

// BudgetCodeEQ applies the EQ predicate on the "budget_code" field.
func BudgetCodeEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBudgetCode), v))
	})
}

// BudgetCodeNEQ applies the NEQ predicate on the "budget_code" field.
func BudgetCodeNEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBudgetCode), v))
	})
}

// BudgetCodeIn applies the In predicate on the "budget_code" field.
func BudgetCodeIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBudgetCode), v...))
	})
}

// BudgetCodeNotIn applies the NotIn predicate on the "budget_code" field.
func BudgetCodeNotIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBudgetCode), v...))
	})
}

// BudgetCodeGT applies the GT predicate on the "budget_code" field.
func BudgetCodeGT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBudgetCode), v))
	})
}

// BudgetCodeGTE applies the GTE predicate on the "budget_code" field.
func BudgetCodeGTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBudgetCode), v))
	})
}

// BudgetCodeLT applies the LT predicate on the "budget_code" field.
func BudgetCodeLT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBudgetCode), v))
	})
}

// BudgetCodeLTE applies the LTE predicate on the "budget_code" field.
func BudgetCodeLTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBudgetCode), v))
	})
}

// BudgetCodeIsNil applies the IsNil predicate on the "budget_code" field.
func BudgetCodeIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBudgetCode)))
	})
}

// BudgetCodeNotNil applies the NotNil predicate on the "budget_code" field.
func BudgetCodeNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBudgetCode)))
	})
}

// CollegeCodeEQ applies the EQ predicate on the "college_code" field.
func CollegeCodeEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCollegeCode), v))
	})
}

// CollegeCodeNEQ applies the NEQ predicate on the "college_code" field.
func CollegeCodeNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCollegeCode), v))
	})
}

// CollegeCodeIn applies the In predicate on the "college_code" field.
func CollegeCodeIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCollegeCode), v...))
	})
}

// CollegeCodeNotIn applies the NotIn predicate on the "college_code" field.
func CollegeCodeNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCollegeCode), v...))
	})
}

// CollegeCodeGT applies the GT predicate on the "college_code" field.
func CollegeCodeGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCollegeCode), v))
	})
}

// CollegeCodeGTE applies the GTE predicate on the "college_code" field.
func CollegeCodeGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCollegeCode), v))
	})
}

// CollegeCodeLT applies the LT predicate on the "college_code" field.
func CollegeCodeLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCollegeCode), v))
	})
}

// CollegeCodeLTE applies the LTE predicate on the "college_code" field.
func CollegeCodeLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCollegeCode), v))
	})
}

// CollegeCodeContains applies the Contains predicate on the "college_code" field.
func CollegeCodeContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCollegeCode), v))
	})
}

// CollegeCodeHasPrefix applies the HasPrefix predicate on the "college_code" field.
func CollegeCodeHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCollegeCode), v))
	})
}

// CollegeCodeHasSuffix applies the HasSuffix predicate on the "college_code" field.
func CollegeCodeHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCollegeCode), v))
	})
}

// CollegeCodeIsNil applies the IsNil predicate on the "college_code" field.
func CollegeCodeIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCollegeCode)))
	})
}

// CollegeCodeNotNil applies the NotNil predicate on the "college_code" field.
func CollegeCodeNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCollegeCode)))
	})
}

// CollegeCodeEqualFold applies the EqualFold predicate on the "college_code" field.
func CollegeCodeEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCollegeCode), v))
	})
}

// CollegeCodeContainsFold applies the ContainsFold predicate on the "college_code" field.
func CollegeCodeContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCollegeCode), v))
	})
}

// OrganizationCodeEQ applies the EQ predicate on the "organization_code" field.
func OrganizationCodeEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrganizationCode), v))
	})
}

// OrganizationCodeNEQ applies the NEQ predicate on the "organization_code" field.
func OrganizationCodeNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrganizationCode), v))
	})
}

// OrganizationCodeIn applies the In predicate on the "organization_code" field.
func OrganizationCodeIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrganizationCode), v...))
	})
}

// OrganizationCodeNotIn applies the NotIn predicate on the "organization_code" field.
func OrganizationCodeNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrganizationCode), v...))
	})
}

// OrganizationCodeGT applies the GT predicate on the "organization_code" field.
func OrganizationCodeGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrganizationCode), v))
	})
}

// OrganizationCodeGTE applies the GTE predicate on the "organization_code" field.
func OrganizationCodeGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrganizationCode), v))
	})
}

// OrganizationCodeLT applies the LT predicate on the "organization_code" field.
func OrganizationCodeLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrganizationCode), v))
	})
}

// OrganizationCodeLTE applies the LTE predicate on the "organization_code" field.
func OrganizationCodeLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrganizationCode), v))
	})
}

// OrganizationCodeContains applies the Contains predicate on the "organization_code" field.
func OrganizationCodeContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOrganizationCode), v))
	})
}

// OrganizationCodeHasPrefix applies the HasPrefix predicate on the "organization_code" field.
func OrganizationCodeHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOrganizationCode), v))
	})
}

// OrganizationCodeHasSuffix applies the HasSuffix predicate on the "organization_code" field.
func OrganizationCodeHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOrganizationCode), v))
	})
}

// OrganizationCodeIsNil applies the IsNil predicate on the "organization_code" field.
func OrganizationCodeIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOrganizationCode)))
	})
}

// OrganizationCodeNotNil applies the NotNil predicate on the "organization_code" field.
func OrganizationCodeNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOrganizationCode)))
	})
}

// OrganizationCodeEqualFold applies the EqualFold predicate on the "organization_code" field.
func OrganizationCodeEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOrganizationCode), v))
	})
}

// OrganizationCodeContainsFold applies the ContainsFold predicate on the "organization_code" field.
func OrganizationCodeContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOrganizationCode), v))
	})
}

// UnitTypeCodeEQ applies the EQ predicate on the "unit_type_code" field.
func UnitTypeCodeEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitTypeCode), v))
	})
}

// UnitTypeCodeNEQ applies the NEQ predicate on the "unit_type_code" field.
func UnitTypeCodeNEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnitTypeCode), v))
	})
}

// UnitTypeCodeIn applies the In predicate on the "unit_type_code" field.
func UnitTypeCodeIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUnitTypeCode), v...))
	})
}

// UnitTypeCodeNotIn applies the NotIn predicate on the "unit_type_code" field.
func UnitTypeCodeNotIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUnitTypeCode), v...))
	})
}

// UnitTypeCodeGT applies the GT predicate on the "unit_type_code" field.
func UnitTypeCodeGT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnitTypeCode), v))
	})
}

// UnitTypeCodeGTE applies the GTE predicate on the "unit_type_code" field.
func UnitTypeCodeGTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnitTypeCode), v))
	})
}

// UnitTypeCodeLT applies the LT predicate on the "unit_type_code" field.
func UnitTypeCodeLT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnitTypeCode), v))
	})
}

// UnitTypeCodeLTE applies the LTE predicate on the "unit_type_code" field.
func UnitTypeCodeLTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnitTypeCode), v))
	})
}

// UnitTypeCodeIsNil applies the IsNil predicate on the "unit_type_code" field.
func UnitTypeCodeIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUnitTypeCode)))
	})
}

// UnitTypeCodeNotNil applies the NotNil predicate on the "unit_type_code" field.
func UnitTypeCodeNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUnitTypeCode)))
	})
}

// UnitTypeNameEQ applies the EQ predicate on the "unit_type_name" field.
func UnitTypeNameEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitTypeName), v))
	})
}

// UnitTypeNameNEQ applies the NEQ predicate on the "unit_type_name" field.
func UnitTypeNameNEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnitTypeName), v))
	})
}

// UnitTypeNameIn applies the In predicate on the "unit_type_name" field.
func UnitTypeNameIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUnitTypeName), v...))
	})
}

// UnitTypeNameNotIn applies the NotIn predicate on the "unit_type_name" field.
func UnitTypeNameNotIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUnitTypeName), v...))
	})
}

// UnitTypeNameGT applies the GT predicate on the "unit_type_name" field.
func UnitTypeNameGT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnitTypeName), v))
	})
}

// UnitTypeNameGTE applies the GTE predicate on the "unit_type_name" field.
func UnitTypeNameGTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnitTypeName), v))
	})
}

// UnitTypeNameLT applies the LT predicate on the "unit_type_name" field.
func UnitTypeNameLT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnitTypeName), v))
	})
}

// UnitTypeNameLTE applies the LTE predicate on the "unit_type_name" field.
func UnitTypeNameLTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnitTypeName), v))
	})
}

// UnitTypeNameIsNil applies the IsNil predicate on the "unit_type_name" field.
func UnitTypeNameIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUnitTypeName)))
	})
}

// UnitTypeNameNotNil applies the NotNil predicate on the "unit_type_name" field.
func UnitTypeNameNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUnitTypeName)))
	})
}

// UnitBasicPropertyEQ applies the EQ predicate on the "unit_basic_property" field.
func UnitBasicPropertyEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitBasicProperty), v))
	})
}

// UnitBasicPropertyNEQ applies the NEQ predicate on the "unit_basic_property" field.
func UnitBasicPropertyNEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnitBasicProperty), v))
	})
}

// UnitBasicPropertyIn applies the In predicate on the "unit_basic_property" field.
func UnitBasicPropertyIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUnitBasicProperty), v...))
	})
}

// UnitBasicPropertyNotIn applies the NotIn predicate on the "unit_basic_property" field.
func UnitBasicPropertyNotIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUnitBasicProperty), v...))
	})
}

// UnitBasicPropertyGT applies the GT predicate on the "unit_basic_property" field.
func UnitBasicPropertyGT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnitBasicProperty), v))
	})
}

// UnitBasicPropertyGTE applies the GTE predicate on the "unit_basic_property" field.
func UnitBasicPropertyGTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnitBasicProperty), v))
	})
}

// UnitBasicPropertyLT applies the LT predicate on the "unit_basic_property" field.
func UnitBasicPropertyLT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnitBasicProperty), v))
	})
}

// UnitBasicPropertyLTE applies the LTE predicate on the "unit_basic_property" field.
func UnitBasicPropertyLTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnitBasicProperty), v))
	})
}

// UnitBasicPropertyIsNil applies the IsNil predicate on the "unit_basic_property" field.
func UnitBasicPropertyIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUnitBasicProperty)))
	})
}

// UnitBasicPropertyNotNil applies the NotNil predicate on the "unit_basic_property" field.
func UnitBasicPropertyNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUnitBasicProperty)))
	})
}

// SocialCreditCodeEQ applies the EQ predicate on the "social_credit_code" field.
func SocialCreditCodeEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSocialCreditCode), v))
	})
}

// SocialCreditCodeNEQ applies the NEQ predicate on the "social_credit_code" field.
func SocialCreditCodeNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSocialCreditCode), v))
	})
}

// SocialCreditCodeIn applies the In predicate on the "social_credit_code" field.
func SocialCreditCodeIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSocialCreditCode), v...))
	})
}

// SocialCreditCodeNotIn applies the NotIn predicate on the "social_credit_code" field.
func SocialCreditCodeNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSocialCreditCode), v...))
	})
}

// SocialCreditCodeGT applies the GT predicate on the "social_credit_code" field.
func SocialCreditCodeGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSocialCreditCode), v))
	})
}

// SocialCreditCodeGTE applies the GTE predicate on the "social_credit_code" field.
func SocialCreditCodeGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSocialCreditCode), v))
	})
}

// SocialCreditCodeLT applies the LT predicate on the "social_credit_code" field.
func SocialCreditCodeLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSocialCreditCode), v))
	})
}

// SocialCreditCodeLTE applies the LTE predicate on the "social_credit_code" field.
func SocialCreditCodeLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSocialCreditCode), v))
	})
}

// SocialCreditCodeContains applies the Contains predicate on the "social_credit_code" field.
func SocialCreditCodeContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSocialCreditCode), v))
	})
}

// SocialCreditCodeHasPrefix applies the HasPrefix predicate on the "social_credit_code" field.
func SocialCreditCodeHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSocialCreditCode), v))
	})
}

// SocialCreditCodeHasSuffix applies the HasSuffix predicate on the "social_credit_code" field.
func SocialCreditCodeHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSocialCreditCode), v))
	})
}

// SocialCreditCodeIsNil applies the IsNil predicate on the "social_credit_code" field.
func SocialCreditCodeIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSocialCreditCode)))
	})
}

// SocialCreditCodeNotNil applies the NotNil predicate on the "social_credit_code" field.
func SocialCreditCodeNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSocialCreditCode)))
	})
}

// SocialCreditCodeEqualFold applies the EqualFold predicate on the "social_credit_code" field.
func SocialCreditCodeEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSocialCreditCode), v))
	})
}

// SocialCreditCodeContainsFold applies the ContainsFold predicate on the "social_credit_code" field.
func SocialCreditCodeContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSocialCreditCode), v))
	})
}

// BudgetUnitNameEQ applies the EQ predicate on the "budget_unit_name" field.
func BudgetUnitNameEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBudgetUnitName), v))
	})
}

// BudgetUnitNameNEQ applies the NEQ predicate on the "budget_unit_name" field.
func BudgetUnitNameNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBudgetUnitName), v))
	})
}

// BudgetUnitNameIn applies the In predicate on the "budget_unit_name" field.
func BudgetUnitNameIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBudgetUnitName), v...))
	})
}

// BudgetUnitNameNotIn applies the NotIn predicate on the "budget_unit_name" field.
func BudgetUnitNameNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBudgetUnitName), v...))
	})
}

// BudgetUnitNameGT applies the GT predicate on the "budget_unit_name" field.
func BudgetUnitNameGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBudgetUnitName), v))
	})
}

// BudgetUnitNameGTE applies the GTE predicate on the "budget_unit_name" field.
func BudgetUnitNameGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBudgetUnitName), v))
	})
}

// BudgetUnitNameLT applies the LT predicate on the "budget_unit_name" field.
func BudgetUnitNameLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBudgetUnitName), v))
	})
}

// BudgetUnitNameLTE applies the LTE predicate on the "budget_unit_name" field.
func BudgetUnitNameLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBudgetUnitName), v))
	})
}

// BudgetUnitNameContains applies the Contains predicate on the "budget_unit_name" field.
func BudgetUnitNameContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBudgetUnitName), v))
	})
}

// BudgetUnitNameHasPrefix applies the HasPrefix predicate on the "budget_unit_name" field.
func BudgetUnitNameHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBudgetUnitName), v))
	})
}

// BudgetUnitNameHasSuffix applies the HasSuffix predicate on the "budget_unit_name" field.
func BudgetUnitNameHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBudgetUnitName), v))
	})
}

// BudgetUnitNameIsNil applies the IsNil predicate on the "budget_unit_name" field.
func BudgetUnitNameIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBudgetUnitName)))
	})
}

// BudgetUnitNameNotNil applies the NotNil predicate on the "budget_unit_name" field.
func BudgetUnitNameNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBudgetUnitName)))
	})
}

// BudgetUnitNameEqualFold applies the EqualFold predicate on the "budget_unit_name" field.
func BudgetUnitNameEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBudgetUnitName), v))
	})
}

// BudgetUnitNameContainsFold applies the ContainsFold predicate on the "budget_unit_name" field.
func BudgetUnitNameContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBudgetUnitName), v))
	})
}

// BudgetUnitCodeEQ applies the EQ predicate on the "budget_unit_code" field.
func BudgetUnitCodeEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBudgetUnitCode), v))
	})
}

// BudgetUnitCodeNEQ applies the NEQ predicate on the "budget_unit_code" field.
func BudgetUnitCodeNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBudgetUnitCode), v))
	})
}

// BudgetUnitCodeIn applies the In predicate on the "budget_unit_code" field.
func BudgetUnitCodeIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBudgetUnitCode), v...))
	})
}

// BudgetUnitCodeNotIn applies the NotIn predicate on the "budget_unit_code" field.
func BudgetUnitCodeNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBudgetUnitCode), v...))
	})
}

// BudgetUnitCodeGT applies the GT predicate on the "budget_unit_code" field.
func BudgetUnitCodeGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBudgetUnitCode), v))
	})
}

// BudgetUnitCodeGTE applies the GTE predicate on the "budget_unit_code" field.
func BudgetUnitCodeGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBudgetUnitCode), v))
	})
}

// BudgetUnitCodeLT applies the LT predicate on the "budget_unit_code" field.
func BudgetUnitCodeLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBudgetUnitCode), v))
	})
}

// BudgetUnitCodeLTE applies the LTE predicate on the "budget_unit_code" field.
func BudgetUnitCodeLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBudgetUnitCode), v))
	})
}

// BudgetUnitCodeContains applies the Contains predicate on the "budget_unit_code" field.
func BudgetUnitCodeContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBudgetUnitCode), v))
	})
}

// BudgetUnitCodeHasPrefix applies the HasPrefix predicate on the "budget_unit_code" field.
func BudgetUnitCodeHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBudgetUnitCode), v))
	})
}

// BudgetUnitCodeHasSuffix applies the HasSuffix predicate on the "budget_unit_code" field.
func BudgetUnitCodeHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBudgetUnitCode), v))
	})
}

// BudgetUnitCodeIsNil applies the IsNil predicate on the "budget_unit_code" field.
func BudgetUnitCodeIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBudgetUnitCode)))
	})
}

// BudgetUnitCodeNotNil applies the NotNil predicate on the "budget_unit_code" field.
func BudgetUnitCodeNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBudgetUnitCode)))
	})
}

// BudgetUnitCodeEqualFold applies the EqualFold predicate on the "budget_unit_code" field.
func BudgetUnitCodeEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBudgetUnitCode), v))
	})
}

// BudgetUnitCodeContainsFold applies the ContainsFold predicate on the "budget_unit_code" field.
func BudgetUnitCodeContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBudgetUnitCode), v))
	})
}

// BudgetManagementLevelEQ applies the EQ predicate on the "budget_management_level" field.
func BudgetManagementLevelEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBudgetManagementLevel), v))
	})
}

// BudgetManagementLevelNEQ applies the NEQ predicate on the "budget_management_level" field.
func BudgetManagementLevelNEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBudgetManagementLevel), v))
	})
}

// BudgetManagementLevelIn applies the In predicate on the "budget_management_level" field.
func BudgetManagementLevelIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBudgetManagementLevel), v...))
	})
}

// BudgetManagementLevelNotIn applies the NotIn predicate on the "budget_management_level" field.
func BudgetManagementLevelNotIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBudgetManagementLevel), v...))
	})
}

// BudgetManagementLevelGT applies the GT predicate on the "budget_management_level" field.
func BudgetManagementLevelGT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBudgetManagementLevel), v))
	})
}

// BudgetManagementLevelGTE applies the GTE predicate on the "budget_management_level" field.
func BudgetManagementLevelGTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBudgetManagementLevel), v))
	})
}

// BudgetManagementLevelLT applies the LT predicate on the "budget_management_level" field.
func BudgetManagementLevelLT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBudgetManagementLevel), v))
	})
}

// BudgetManagementLevelLTE applies the LTE predicate on the "budget_management_level" field.
func BudgetManagementLevelLTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBudgetManagementLevel), v))
	})
}

// BudgetManagementLevelIsNil applies the IsNil predicate on the "budget_management_level" field.
func BudgetManagementLevelIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBudgetManagementLevel)))
	})
}

// BudgetManagementLevelNotNil applies the NotNil predicate on the "budget_management_level" field.
func BudgetManagementLevelNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBudgetManagementLevel)))
	})
}

// FirmNameEQ applies the EQ predicate on the "firm_name" field.
func FirmNameEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirmName), v))
	})
}

// FirmNameNEQ applies the NEQ predicate on the "firm_name" field.
func FirmNameNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFirmName), v))
	})
}

// FirmNameIn applies the In predicate on the "firm_name" field.
func FirmNameIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFirmName), v...))
	})
}

// FirmNameNotIn applies the NotIn predicate on the "firm_name" field.
func FirmNameNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFirmName), v...))
	})
}

// FirmNameGT applies the GT predicate on the "firm_name" field.
func FirmNameGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFirmName), v))
	})
}

// FirmNameGTE applies the GTE predicate on the "firm_name" field.
func FirmNameGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFirmName), v))
	})
}

// FirmNameLT applies the LT predicate on the "firm_name" field.
func FirmNameLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFirmName), v))
	})
}

// FirmNameLTE applies the LTE predicate on the "firm_name" field.
func FirmNameLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFirmName), v))
	})
}

// FirmNameContains applies the Contains predicate on the "firm_name" field.
func FirmNameContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFirmName), v))
	})
}

// FirmNameHasPrefix applies the HasPrefix predicate on the "firm_name" field.
func FirmNameHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFirmName), v))
	})
}

// FirmNameHasSuffix applies the HasSuffix predicate on the "firm_name" field.
func FirmNameHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFirmName), v))
	})
}

// FirmNameIsNil applies the IsNil predicate on the "firm_name" field.
func FirmNameIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFirmName)))
	})
}

// FirmNameNotNil applies the NotNil predicate on the "firm_name" field.
func FirmNameNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFirmName)))
	})
}

// FirmNameEqualFold applies the EqualFold predicate on the "firm_name" field.
func FirmNameEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFirmName), v))
	})
}

// FirmNameContainsFold applies the ContainsFold predicate on the "firm_name" field.
func FirmNameContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFirmName), v))
	})
}

// FirmCodeEQ applies the EQ predicate on the "firm_code" field.
func FirmCodeEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirmCode), v))
	})
}

// FirmCodeNEQ applies the NEQ predicate on the "firm_code" field.
func FirmCodeNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFirmCode), v))
	})
}

// FirmCodeIn applies the In predicate on the "firm_code" field.
func FirmCodeIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFirmCode), v...))
	})
}

// FirmCodeNotIn applies the NotIn predicate on the "firm_code" field.
func FirmCodeNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFirmCode), v...))
	})
}

// FirmCodeGT applies the GT predicate on the "firm_code" field.
func FirmCodeGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFirmCode), v))
	})
}

// FirmCodeGTE applies the GTE predicate on the "firm_code" field.
func FirmCodeGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFirmCode), v))
	})
}

// FirmCodeLT applies the LT predicate on the "firm_code" field.
func FirmCodeLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFirmCode), v))
	})
}

// FirmCodeLTE applies the LTE predicate on the "firm_code" field.
func FirmCodeLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFirmCode), v))
	})
}

// FirmCodeContains applies the Contains predicate on the "firm_code" field.
func FirmCodeContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFirmCode), v))
	})
}

// FirmCodeHasPrefix applies the HasPrefix predicate on the "firm_code" field.
func FirmCodeHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFirmCode), v))
	})
}

// FirmCodeHasSuffix applies the HasSuffix predicate on the "firm_code" field.
func FirmCodeHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFirmCode), v))
	})
}

// FirmCodeIsNil applies the IsNil predicate on the "firm_code" field.
func FirmCodeIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFirmCode)))
	})
}

// FirmCodeNotNil applies the NotNil predicate on the "firm_code" field.
func FirmCodeNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFirmCode)))
	})
}

// FirmCodeEqualFold applies the EqualFold predicate on the "firm_code" field.
func FirmCodeEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFirmCode), v))
	})
}

// FirmCodeContainsFold applies the ContainsFold predicate on the "firm_code" field.
func FirmCodeContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFirmCode), v))
	})
}

// TelephoneNumberEQ applies the EQ predicate on the "telephone_number" field.
func TelephoneNumberEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTelephoneNumber), v))
	})
}

// TelephoneNumberNEQ applies the NEQ predicate on the "telephone_number" field.
func TelephoneNumberNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTelephoneNumber), v))
	})
}

// TelephoneNumberIn applies the In predicate on the "telephone_number" field.
func TelephoneNumberIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTelephoneNumber), v...))
	})
}

// TelephoneNumberNotIn applies the NotIn predicate on the "telephone_number" field.
func TelephoneNumberNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTelephoneNumber), v...))
	})
}

// TelephoneNumberGT applies the GT predicate on the "telephone_number" field.
func TelephoneNumberGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTelephoneNumber), v))
	})
}

// TelephoneNumberGTE applies the GTE predicate on the "telephone_number" field.
func TelephoneNumberGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTelephoneNumber), v))
	})
}

// TelephoneNumberLT applies the LT predicate on the "telephone_number" field.
func TelephoneNumberLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTelephoneNumber), v))
	})
}

// TelephoneNumberLTE applies the LTE predicate on the "telephone_number" field.
func TelephoneNumberLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTelephoneNumber), v))
	})
}

// TelephoneNumberContains applies the Contains predicate on the "telephone_number" field.
func TelephoneNumberContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTelephoneNumber), v))
	})
}

// TelephoneNumberHasPrefix applies the HasPrefix predicate on the "telephone_number" field.
func TelephoneNumberHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTelephoneNumber), v))
	})
}

// TelephoneNumberHasSuffix applies the HasSuffix predicate on the "telephone_number" field.
func TelephoneNumberHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTelephoneNumber), v))
	})
}

// TelephoneNumberIsNil applies the IsNil predicate on the "telephone_number" field.
func TelephoneNumberIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTelephoneNumber)))
	})
}

// TelephoneNumberNotNil applies the NotNil predicate on the "telephone_number" field.
func TelephoneNumberNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTelephoneNumber)))
	})
}

// TelephoneNumberEqualFold applies the EqualFold predicate on the "telephone_number" field.
func TelephoneNumberEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTelephoneNumber), v))
	})
}

// TelephoneNumberContainsFold applies the ContainsFold predicate on the "telephone_number" field.
func TelephoneNumberContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTelephoneNumber), v))
	})
}

// PhoneNumberEQ applies the EQ predicate on the "phone_number" field.
func PhoneNumberEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberNEQ applies the NEQ predicate on the "phone_number" field.
func PhoneNumberNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberIn applies the In predicate on the "phone_number" field.
func PhoneNumberIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPhoneNumber), v...))
	})
}

// PhoneNumberNotIn applies the NotIn predicate on the "phone_number" field.
func PhoneNumberNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPhoneNumber), v...))
	})
}

// PhoneNumberGT applies the GT predicate on the "phone_number" field.
func PhoneNumberGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberGTE applies the GTE predicate on the "phone_number" field.
func PhoneNumberGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberLT applies the LT predicate on the "phone_number" field.
func PhoneNumberLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberLTE applies the LTE predicate on the "phone_number" field.
func PhoneNumberLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberContains applies the Contains predicate on the "phone_number" field.
func PhoneNumberContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberHasPrefix applies the HasPrefix predicate on the "phone_number" field.
func PhoneNumberHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberHasSuffix applies the HasSuffix predicate on the "phone_number" field.
func PhoneNumberHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberIsNil applies the IsNil predicate on the "phone_number" field.
func PhoneNumberIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPhoneNumber)))
	})
}

// PhoneNumberNotNil applies the NotNil predicate on the "phone_number" field.
func PhoneNumberNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPhoneNumber)))
	})
}

// PhoneNumberEqualFold applies the EqualFold predicate on the "phone_number" field.
func PhoneNumberEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberContainsFold applies the ContainsFold predicate on the "phone_number" field.
func PhoneNumberContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPhoneNumber), v))
	})
}

// FaxNumberEQ applies the EQ predicate on the "fax_number" field.
func FaxNumberEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFaxNumber), v))
	})
}

// FaxNumberNEQ applies the NEQ predicate on the "fax_number" field.
func FaxNumberNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFaxNumber), v))
	})
}

// FaxNumberIn applies the In predicate on the "fax_number" field.
func FaxNumberIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFaxNumber), v...))
	})
}

// FaxNumberNotIn applies the NotIn predicate on the "fax_number" field.
func FaxNumberNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFaxNumber), v...))
	})
}

// FaxNumberGT applies the GT predicate on the "fax_number" field.
func FaxNumberGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFaxNumber), v))
	})
}

// FaxNumberGTE applies the GTE predicate on the "fax_number" field.
func FaxNumberGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFaxNumber), v))
	})
}

// FaxNumberLT applies the LT predicate on the "fax_number" field.
func FaxNumberLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFaxNumber), v))
	})
}

// FaxNumberLTE applies the LTE predicate on the "fax_number" field.
func FaxNumberLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFaxNumber), v))
	})
}

// FaxNumberContains applies the Contains predicate on the "fax_number" field.
func FaxNumberContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFaxNumber), v))
	})
}

// FaxNumberHasPrefix applies the HasPrefix predicate on the "fax_number" field.
func FaxNumberHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFaxNumber), v))
	})
}

// FaxNumberHasSuffix applies the HasSuffix predicate on the "fax_number" field.
func FaxNumberHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFaxNumber), v))
	})
}

// FaxNumberIsNil applies the IsNil predicate on the "fax_number" field.
func FaxNumberIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFaxNumber)))
	})
}

// FaxNumberNotNil applies the NotNil predicate on the "fax_number" field.
func FaxNumberNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFaxNumber)))
	})
}

// FaxNumberEqualFold applies the EqualFold predicate on the "fax_number" field.
func FaxNumberEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFaxNumber), v))
	})
}

// FaxNumberContainsFold applies the ContainsFold predicate on the "fax_number" field.
func FaxNumberContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFaxNumber), v))
	})
}

// EmailAddressEQ applies the EQ predicate on the "email_address" field.
func EmailAddressEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmailAddress), v))
	})
}

// EmailAddressNEQ applies the NEQ predicate on the "email_address" field.
func EmailAddressNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEmailAddress), v))
	})
}

// EmailAddressIn applies the In predicate on the "email_address" field.
func EmailAddressIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEmailAddress), v...))
	})
}

// EmailAddressNotIn applies the NotIn predicate on the "email_address" field.
func EmailAddressNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEmailAddress), v...))
	})
}

// EmailAddressGT applies the GT predicate on the "email_address" field.
func EmailAddressGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEmailAddress), v))
	})
}

// EmailAddressGTE applies the GTE predicate on the "email_address" field.
func EmailAddressGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEmailAddress), v))
	})
}

// EmailAddressLT applies the LT predicate on the "email_address" field.
func EmailAddressLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEmailAddress), v))
	})
}

// EmailAddressLTE applies the LTE predicate on the "email_address" field.
func EmailAddressLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEmailAddress), v))
	})
}

// EmailAddressContains applies the Contains predicate on the "email_address" field.
func EmailAddressContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEmailAddress), v))
	})
}

// EmailAddressHasPrefix applies the HasPrefix predicate on the "email_address" field.
func EmailAddressHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEmailAddress), v))
	})
}

// EmailAddressHasSuffix applies the HasSuffix predicate on the "email_address" field.
func EmailAddressHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEmailAddress), v))
	})
}

// EmailAddressIsNil applies the IsNil predicate on the "email_address" field.
func EmailAddressIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEmailAddress)))
	})
}

// EmailAddressNotNil applies the NotNil predicate on the "email_address" field.
func EmailAddressNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEmailAddress)))
	})
}

// EmailAddressEqualFold applies the EqualFold predicate on the "email_address" field.
func EmailAddressEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEmailAddress), v))
	})
}

// EmailAddressContainsFold applies the ContainsFold predicate on the "email_address" field.
func EmailAddressContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEmailAddress), v))
	})
}

// ProvinceEQ applies the EQ predicate on the "province" field.
func ProvinceEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProvince), v))
	})
}

// ProvinceNEQ applies the NEQ predicate on the "province" field.
func ProvinceNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProvince), v))
	})
}

// ProvinceIn applies the In predicate on the "province" field.
func ProvinceIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProvince), v...))
	})
}

// ProvinceNotIn applies the NotIn predicate on the "province" field.
func ProvinceNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProvince), v...))
	})
}

// ProvinceGT applies the GT predicate on the "province" field.
func ProvinceGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProvince), v))
	})
}

// ProvinceGTE applies the GTE predicate on the "province" field.
func ProvinceGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProvince), v))
	})
}

// ProvinceLT applies the LT predicate on the "province" field.
func ProvinceLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProvince), v))
	})
}

// ProvinceLTE applies the LTE predicate on the "province" field.
func ProvinceLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProvince), v))
	})
}

// ProvinceContains applies the Contains predicate on the "province" field.
func ProvinceContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProvince), v))
	})
}

// ProvinceHasPrefix applies the HasPrefix predicate on the "province" field.
func ProvinceHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProvince), v))
	})
}

// ProvinceHasSuffix applies the HasSuffix predicate on the "province" field.
func ProvinceHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProvince), v))
	})
}

// ProvinceIsNil applies the IsNil predicate on the "province" field.
func ProvinceIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProvince)))
	})
}

// ProvinceNotNil applies the NotNil predicate on the "province" field.
func ProvinceNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProvince)))
	})
}

// ProvinceEqualFold applies the EqualFold predicate on the "province" field.
func ProvinceEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProvince), v))
	})
}

// ProvinceContainsFold applies the ContainsFold predicate on the "province" field.
func ProvinceContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProvince), v))
	})
}

// CityEQ applies the EQ predicate on the "city" field.
func CityEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCity), v))
	})
}

// CityNEQ applies the NEQ predicate on the "city" field.
func CityNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCity), v))
	})
}

// CityIn applies the In predicate on the "city" field.
func CityIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCity), v...))
	})
}

// CityNotIn applies the NotIn predicate on the "city" field.
func CityNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCity), v...))
	})
}

// CityGT applies the GT predicate on the "city" field.
func CityGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCity), v))
	})
}

// CityGTE applies the GTE predicate on the "city" field.
func CityGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCity), v))
	})
}

// CityLT applies the LT predicate on the "city" field.
func CityLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCity), v))
	})
}

// CityLTE applies the LTE predicate on the "city" field.
func CityLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCity), v))
	})
}

// CityContains applies the Contains predicate on the "city" field.
func CityContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCity), v))
	})
}

// CityHasPrefix applies the HasPrefix predicate on the "city" field.
func CityHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCity), v))
	})
}

// CityHasSuffix applies the HasSuffix predicate on the "city" field.
func CityHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCity), v))
	})
}

// CityIsNil applies the IsNil predicate on the "city" field.
func CityIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCity)))
	})
}

// CityNotNil applies the NotNil predicate on the "city" field.
func CityNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCity)))
	})
}

// CityEqualFold applies the EqualFold predicate on the "city" field.
func CityEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCity), v))
	})
}

// CityContainsFold applies the ContainsFold predicate on the "city" field.
func CityContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCity), v))
	})
}

// CountyEQ applies the EQ predicate on the "county" field.
func CountyEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCounty), v))
	})
}

// CountyNEQ applies the NEQ predicate on the "county" field.
func CountyNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCounty), v))
	})
}

// CountyIn applies the In predicate on the "county" field.
func CountyIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCounty), v...))
	})
}

// CountyNotIn applies the NotIn predicate on the "county" field.
func CountyNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCounty), v...))
	})
}

// CountyGT applies the GT predicate on the "county" field.
func CountyGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCounty), v))
	})
}

// CountyGTE applies the GTE predicate on the "county" field.
func CountyGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCounty), v))
	})
}

// CountyLT applies the LT predicate on the "county" field.
func CountyLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCounty), v))
	})
}

// CountyLTE applies the LTE predicate on the "county" field.
func CountyLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCounty), v))
	})
}

// CountyContains applies the Contains predicate on the "county" field.
func CountyContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCounty), v))
	})
}

// CountyHasPrefix applies the HasPrefix predicate on the "county" field.
func CountyHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCounty), v))
	})
}

// CountyHasSuffix applies the HasSuffix predicate on the "county" field.
func CountyHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCounty), v))
	})
}

// CountyIsNil applies the IsNil predicate on the "county" field.
func CountyIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCounty)))
	})
}

// CountyNotNil applies the NotNil predicate on the "county" field.
func CountyNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCounty)))
	})
}

// CountyEqualFold applies the EqualFold predicate on the "county" field.
func CountyEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCounty), v))
	})
}

// CountyContainsFold applies the ContainsFold predicate on the "county" field.
func CountyContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCounty), v))
	})
}

// StreetAddressEQ applies the EQ predicate on the "street_address" field.
func StreetAddressEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStreetAddress), v))
	})
}

// StreetAddressNEQ applies the NEQ predicate on the "street_address" field.
func StreetAddressNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStreetAddress), v))
	})
}

// StreetAddressIn applies the In predicate on the "street_address" field.
func StreetAddressIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStreetAddress), v...))
	})
}

// StreetAddressNotIn applies the NotIn predicate on the "street_address" field.
func StreetAddressNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStreetAddress), v...))
	})
}

// StreetAddressGT applies the GT predicate on the "street_address" field.
func StreetAddressGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStreetAddress), v))
	})
}

// StreetAddressGTE applies the GTE predicate on the "street_address" field.
func StreetAddressGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStreetAddress), v))
	})
}

// StreetAddressLT applies the LT predicate on the "street_address" field.
func StreetAddressLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStreetAddress), v))
	})
}

// StreetAddressLTE applies the LTE predicate on the "street_address" field.
func StreetAddressLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStreetAddress), v))
	})
}

// StreetAddressContains applies the Contains predicate on the "street_address" field.
func StreetAddressContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStreetAddress), v))
	})
}

// StreetAddressHasPrefix applies the HasPrefix predicate on the "street_address" field.
func StreetAddressHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStreetAddress), v))
	})
}

// StreetAddressHasSuffix applies the HasSuffix predicate on the "street_address" field.
func StreetAddressHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStreetAddress), v))
	})
}

// StreetAddressIsNil applies the IsNil predicate on the "street_address" field.
func StreetAddressIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStreetAddress)))
	})
}

// StreetAddressNotNil applies the NotNil predicate on the "street_address" field.
func StreetAddressNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStreetAddress)))
	})
}

// StreetAddressEqualFold applies the EqualFold predicate on the "street_address" field.
func StreetAddressEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStreetAddress), v))
	})
}

// StreetAddressContainsFold applies the ContainsFold predicate on the "street_address" field.
func StreetAddressContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStreetAddress), v))
	})
}

// PostalCodeEQ applies the EQ predicate on the "postal_code" field.
func PostalCodeEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPostalCode), v))
	})
}

// PostalCodeNEQ applies the NEQ predicate on the "postal_code" field.
func PostalCodeNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPostalCode), v))
	})
}

// PostalCodeIn applies the In predicate on the "postal_code" field.
func PostalCodeIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPostalCode), v...))
	})
}

// PostalCodeNotIn applies the NotIn predicate on the "postal_code" field.
func PostalCodeNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPostalCode), v...))
	})
}

// PostalCodeGT applies the GT predicate on the "postal_code" field.
func PostalCodeGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPostalCode), v))
	})
}

// PostalCodeGTE applies the GTE predicate on the "postal_code" field.
func PostalCodeGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPostalCode), v))
	})
}

// PostalCodeLT applies the LT predicate on the "postal_code" field.
func PostalCodeLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPostalCode), v))
	})
}

// PostalCodeLTE applies the LTE predicate on the "postal_code" field.
func PostalCodeLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPostalCode), v))
	})
}

// PostalCodeContains applies the Contains predicate on the "postal_code" field.
func PostalCodeContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPostalCode), v))
	})
}

// PostalCodeHasPrefix applies the HasPrefix predicate on the "postal_code" field.
func PostalCodeHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPostalCode), v))
	})
}

// PostalCodeHasSuffix applies the HasSuffix predicate on the "postal_code" field.
func PostalCodeHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPostalCode), v))
	})
}

// PostalCodeIsNil applies the IsNil predicate on the "postal_code" field.
func PostalCodeIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPostalCode)))
	})
}

// PostalCodeNotNil applies the NotNil predicate on the "postal_code" field.
func PostalCodeNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPostalCode)))
	})
}

// PostalCodeEqualFold applies the EqualFold predicate on the "postal_code" field.
func PostalCodeEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPostalCode), v))
	})
}

// PostalCodeContainsFold applies the ContainsFold predicate on the "postal_code" field.
func PostalCodeContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPostalCode), v))
	})
}

// FundSupplyModeNameEQ applies the EQ predicate on the "fund_supply_mode_name" field.
func FundSupplyModeNameEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFundSupplyModeName), v))
	})
}

// FundSupplyModeNameNEQ applies the NEQ predicate on the "fund_supply_mode_name" field.
func FundSupplyModeNameNEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFundSupplyModeName), v))
	})
}

// FundSupplyModeNameIn applies the In predicate on the "fund_supply_mode_name" field.
func FundSupplyModeNameIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFundSupplyModeName), v...))
	})
}

// FundSupplyModeNameNotIn applies the NotIn predicate on the "fund_supply_mode_name" field.
func FundSupplyModeNameNotIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFundSupplyModeName), v...))
	})
}

// FundSupplyModeNameGT applies the GT predicate on the "fund_supply_mode_name" field.
func FundSupplyModeNameGT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFundSupplyModeName), v))
	})
}

// FundSupplyModeNameGTE applies the GTE predicate on the "fund_supply_mode_name" field.
func FundSupplyModeNameGTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFundSupplyModeName), v))
	})
}

// FundSupplyModeNameLT applies the LT predicate on the "fund_supply_mode_name" field.
func FundSupplyModeNameLT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFundSupplyModeName), v))
	})
}

// FundSupplyModeNameLTE applies the LTE predicate on the "fund_supply_mode_name" field.
func FundSupplyModeNameLTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFundSupplyModeName), v))
	})
}

// FundSupplyModeNameIsNil applies the IsNil predicate on the "fund_supply_mode_name" field.
func FundSupplyModeNameIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFundSupplyModeName)))
	})
}

// FundSupplyModeNameNotNil applies the NotNil predicate on the "fund_supply_mode_name" field.
func FundSupplyModeNameNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFundSupplyModeName)))
	})
}

// FundSupplyModeCodeEQ applies the EQ predicate on the "fund_supply_mode_code" field.
func FundSupplyModeCodeEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFundSupplyModeCode), v))
	})
}

// FundSupplyModeCodeNEQ applies the NEQ predicate on the "fund_supply_mode_code" field.
func FundSupplyModeCodeNEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFundSupplyModeCode), v))
	})
}

// FundSupplyModeCodeIn applies the In predicate on the "fund_supply_mode_code" field.
func FundSupplyModeCodeIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFundSupplyModeCode), v...))
	})
}

// FundSupplyModeCodeNotIn applies the NotIn predicate on the "fund_supply_mode_code" field.
func FundSupplyModeCodeNotIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFundSupplyModeCode), v...))
	})
}

// FundSupplyModeCodeGT applies the GT predicate on the "fund_supply_mode_code" field.
func FundSupplyModeCodeGT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFundSupplyModeCode), v))
	})
}

// FundSupplyModeCodeGTE applies the GTE predicate on the "fund_supply_mode_code" field.
func FundSupplyModeCodeGTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFundSupplyModeCode), v))
	})
}

// FundSupplyModeCodeLT applies the LT predicate on the "fund_supply_mode_code" field.
func FundSupplyModeCodeLT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFundSupplyModeCode), v))
	})
}

// FundSupplyModeCodeLTE applies the LTE predicate on the "fund_supply_mode_code" field.
func FundSupplyModeCodeLTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFundSupplyModeCode), v))
	})
}

// FundSupplyModeCodeIsNil applies the IsNil predicate on the "fund_supply_mode_code" field.
func FundSupplyModeCodeIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFundSupplyModeCode)))
	})
}

// FundSupplyModeCodeNotNil applies the NotNil predicate on the "fund_supply_mode_code" field.
func FundSupplyModeCodeNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFundSupplyModeCode)))
	})
}

// AdministrationLevelNameEQ applies the EQ predicate on the "administration_level_name" field.
func AdministrationLevelNameEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAdministrationLevelName), v))
	})
}

// AdministrationLevelNameNEQ applies the NEQ predicate on the "administration_level_name" field.
func AdministrationLevelNameNEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAdministrationLevelName), v))
	})
}

// AdministrationLevelNameIn applies the In predicate on the "administration_level_name" field.
func AdministrationLevelNameIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAdministrationLevelName), v...))
	})
}

// AdministrationLevelNameNotIn applies the NotIn predicate on the "administration_level_name" field.
func AdministrationLevelNameNotIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAdministrationLevelName), v...))
	})
}

// AdministrationLevelNameGT applies the GT predicate on the "administration_level_name" field.
func AdministrationLevelNameGT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAdministrationLevelName), v))
	})
}

// AdministrationLevelNameGTE applies the GTE predicate on the "administration_level_name" field.
func AdministrationLevelNameGTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAdministrationLevelName), v))
	})
}

// AdministrationLevelNameLT applies the LT predicate on the "administration_level_name" field.
func AdministrationLevelNameLT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAdministrationLevelName), v))
	})
}

// AdministrationLevelNameLTE applies the LTE predicate on the "administration_level_name" field.
func AdministrationLevelNameLTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAdministrationLevelName), v))
	})
}

// AdministrationLevelNameIsNil applies the IsNil predicate on the "administration_level_name" field.
func AdministrationLevelNameIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAdministrationLevelName)))
	})
}

// AdministrationLevelNameNotNil applies the NotNil predicate on the "administration_level_name" field.
func AdministrationLevelNameNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAdministrationLevelName)))
	})
}

// AdministrationLevelTypeEQ applies the EQ predicate on the "administration_level_type" field.
func AdministrationLevelTypeEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAdministrationLevelType), v))
	})
}

// AdministrationLevelTypeNEQ applies the NEQ predicate on the "administration_level_type" field.
func AdministrationLevelTypeNEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAdministrationLevelType), v))
	})
}

// AdministrationLevelTypeIn applies the In predicate on the "administration_level_type" field.
func AdministrationLevelTypeIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAdministrationLevelType), v...))
	})
}

// AdministrationLevelTypeNotIn applies the NotIn predicate on the "administration_level_type" field.
func AdministrationLevelTypeNotIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAdministrationLevelType), v...))
	})
}

// AdministrationLevelTypeGT applies the GT predicate on the "administration_level_type" field.
func AdministrationLevelTypeGT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAdministrationLevelType), v))
	})
}

// AdministrationLevelTypeGTE applies the GTE predicate on the "administration_level_type" field.
func AdministrationLevelTypeGTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAdministrationLevelType), v))
	})
}

// AdministrationLevelTypeLT applies the LT predicate on the "administration_level_type" field.
func AdministrationLevelTypeLT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAdministrationLevelType), v))
	})
}

// AdministrationLevelTypeLTE applies the LTE predicate on the "administration_level_type" field.
func AdministrationLevelTypeLTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAdministrationLevelType), v))
	})
}

// AdministrationLevelTypeIsNil applies the IsNil predicate on the "administration_level_type" field.
func AdministrationLevelTypeIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAdministrationLevelType)))
	})
}

// AdministrationLevelTypeNotNil applies the NotNil predicate on the "administration_level_type" field.
func AdministrationLevelTypeNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAdministrationLevelType)))
	})
}

// DepartmentCategoryNameEQ applies the EQ predicate on the "department_category_name" field.
func DepartmentCategoryNameEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDepartmentCategoryName), v))
	})
}

// DepartmentCategoryNameNEQ applies the NEQ predicate on the "department_category_name" field.
func DepartmentCategoryNameNEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDepartmentCategoryName), v))
	})
}

// DepartmentCategoryNameIn applies the In predicate on the "department_category_name" field.
func DepartmentCategoryNameIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDepartmentCategoryName), v...))
	})
}

// DepartmentCategoryNameNotIn applies the NotIn predicate on the "department_category_name" field.
func DepartmentCategoryNameNotIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDepartmentCategoryName), v...))
	})
}

// DepartmentCategoryNameGT applies the GT predicate on the "department_category_name" field.
func DepartmentCategoryNameGT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDepartmentCategoryName), v))
	})
}

// DepartmentCategoryNameGTE applies the GTE predicate on the "department_category_name" field.
func DepartmentCategoryNameGTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDepartmentCategoryName), v))
	})
}

// DepartmentCategoryNameLT applies the LT predicate on the "department_category_name" field.
func DepartmentCategoryNameLT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDepartmentCategoryName), v))
	})
}

// DepartmentCategoryNameLTE applies the LTE predicate on the "department_category_name" field.
func DepartmentCategoryNameLTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDepartmentCategoryName), v))
	})
}

// DepartmentCategoryNameIsNil applies the IsNil predicate on the "department_category_name" field.
func DepartmentCategoryNameIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDepartmentCategoryName)))
	})
}

// DepartmentCategoryNameNotNil applies the NotNil predicate on the "department_category_name" field.
func DepartmentCategoryNameNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDepartmentCategoryName)))
	})
}

// BusinessDepartmentClassificationCodeEQ applies the EQ predicate on the "business_department_classification_code" field.
func BusinessDepartmentClassificationCodeEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBusinessDepartmentClassificationCode), v))
	})
}

// BusinessDepartmentClassificationCodeNEQ applies the NEQ predicate on the "business_department_classification_code" field.
func BusinessDepartmentClassificationCodeNEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBusinessDepartmentClassificationCode), v))
	})
}

// BusinessDepartmentClassificationCodeIn applies the In predicate on the "business_department_classification_code" field.
func BusinessDepartmentClassificationCodeIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBusinessDepartmentClassificationCode), v...))
	})
}

// BusinessDepartmentClassificationCodeNotIn applies the NotIn predicate on the "business_department_classification_code" field.
func BusinessDepartmentClassificationCodeNotIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBusinessDepartmentClassificationCode), v...))
	})
}

// BusinessDepartmentClassificationCodeGT applies the GT predicate on the "business_department_classification_code" field.
func BusinessDepartmentClassificationCodeGT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBusinessDepartmentClassificationCode), v))
	})
}

// BusinessDepartmentClassificationCodeGTE applies the GTE predicate on the "business_department_classification_code" field.
func BusinessDepartmentClassificationCodeGTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBusinessDepartmentClassificationCode), v))
	})
}

// BusinessDepartmentClassificationCodeLT applies the LT predicate on the "business_department_classification_code" field.
func BusinessDepartmentClassificationCodeLT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBusinessDepartmentClassificationCode), v))
	})
}

// BusinessDepartmentClassificationCodeLTE applies the LTE predicate on the "business_department_classification_code" field.
func BusinessDepartmentClassificationCodeLTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBusinessDepartmentClassificationCode), v))
	})
}

// BusinessDepartmentClassificationCodeIsNil applies the IsNil predicate on the "business_department_classification_code" field.
func BusinessDepartmentClassificationCodeIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBusinessDepartmentClassificationCode)))
	})
}

// BusinessDepartmentClassificationCodeNotNil applies the NotNil predicate on the "business_department_classification_code" field.
func BusinessDepartmentClassificationCodeNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBusinessDepartmentClassificationCode)))
	})
}

// PrincipalEQ applies the EQ predicate on the "principal" field.
func PrincipalEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrincipal), v))
	})
}

// PrincipalNEQ applies the NEQ predicate on the "principal" field.
func PrincipalNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrincipal), v))
	})
}

// PrincipalIn applies the In predicate on the "principal" field.
func PrincipalIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPrincipal), v...))
	})
}

// PrincipalNotIn applies the NotIn predicate on the "principal" field.
func PrincipalNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPrincipal), v...))
	})
}

// PrincipalGT applies the GT predicate on the "principal" field.
func PrincipalGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrincipal), v))
	})
}

// PrincipalGTE applies the GTE predicate on the "principal" field.
func PrincipalGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrincipal), v))
	})
}

// PrincipalLT applies the LT predicate on the "principal" field.
func PrincipalLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrincipal), v))
	})
}

// PrincipalLTE applies the LTE predicate on the "principal" field.
func PrincipalLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrincipal), v))
	})
}

// PrincipalContains applies the Contains predicate on the "principal" field.
func PrincipalContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPrincipal), v))
	})
}

// PrincipalHasPrefix applies the HasPrefix predicate on the "principal" field.
func PrincipalHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPrincipal), v))
	})
}

// PrincipalHasSuffix applies the HasSuffix predicate on the "principal" field.
func PrincipalHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPrincipal), v))
	})
}

// PrincipalIsNil applies the IsNil predicate on the "principal" field.
func PrincipalIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPrincipal)))
	})
}

// PrincipalNotNil applies the NotNil predicate on the "principal" field.
func PrincipalNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPrincipal)))
	})
}

// PrincipalEqualFold applies the EqualFold predicate on the "principal" field.
func PrincipalEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPrincipal), v))
	})
}

// PrincipalContainsFold applies the ContainsFold predicate on the "principal" field.
func PrincipalContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPrincipal), v))
	})
}

// ContactEQ applies the EQ predicate on the "contact" field.
func ContactEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContact), v))
	})
}

// ContactNEQ applies the NEQ predicate on the "contact" field.
func ContactNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContact), v))
	})
}

// ContactIn applies the In predicate on the "contact" field.
func ContactIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldContact), v...))
	})
}

// ContactNotIn applies the NotIn predicate on the "contact" field.
func ContactNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldContact), v...))
	})
}

// ContactGT applies the GT predicate on the "contact" field.
func ContactGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContact), v))
	})
}

// ContactGTE applies the GTE predicate on the "contact" field.
func ContactGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContact), v))
	})
}

// ContactLT applies the LT predicate on the "contact" field.
func ContactLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContact), v))
	})
}

// ContactLTE applies the LTE predicate on the "contact" field.
func ContactLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContact), v))
	})
}

// ContactContains applies the Contains predicate on the "contact" field.
func ContactContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldContact), v))
	})
}

// ContactHasPrefix applies the HasPrefix predicate on the "contact" field.
func ContactHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldContact), v))
	})
}

// ContactHasSuffix applies the HasSuffix predicate on the "contact" field.
func ContactHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldContact), v))
	})
}

// ContactIsNil applies the IsNil predicate on the "contact" field.
func ContactIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldContact)))
	})
}

// ContactNotNil applies the NotNil predicate on the "contact" field.
func ContactNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldContact)))
	})
}

// ContactEqualFold applies the EqualFold predicate on the "contact" field.
func ContactEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldContact), v))
	})
}

// ContactContainsFold applies the ContainsFold predicate on the "contact" field.
func ContactContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldContact), v))
	})
}

// CorporateRepresentativeEQ applies the EQ predicate on the "corporate_representative" field.
func CorporateRepresentativeEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCorporateRepresentative), v))
	})
}

// CorporateRepresentativeNEQ applies the NEQ predicate on the "corporate_representative" field.
func CorporateRepresentativeNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCorporateRepresentative), v))
	})
}

// CorporateRepresentativeIn applies the In predicate on the "corporate_representative" field.
func CorporateRepresentativeIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCorporateRepresentative), v...))
	})
}

// CorporateRepresentativeNotIn applies the NotIn predicate on the "corporate_representative" field.
func CorporateRepresentativeNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCorporateRepresentative), v...))
	})
}

// CorporateRepresentativeGT applies the GT predicate on the "corporate_representative" field.
func CorporateRepresentativeGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCorporateRepresentative), v))
	})
}

// CorporateRepresentativeGTE applies the GTE predicate on the "corporate_representative" field.
func CorporateRepresentativeGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCorporateRepresentative), v))
	})
}

// CorporateRepresentativeLT applies the LT predicate on the "corporate_representative" field.
func CorporateRepresentativeLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCorporateRepresentative), v))
	})
}

// CorporateRepresentativeLTE applies the LTE predicate on the "corporate_representative" field.
func CorporateRepresentativeLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCorporateRepresentative), v))
	})
}

// CorporateRepresentativeContains applies the Contains predicate on the "corporate_representative" field.
func CorporateRepresentativeContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCorporateRepresentative), v))
	})
}

// CorporateRepresentativeHasPrefix applies the HasPrefix predicate on the "corporate_representative" field.
func CorporateRepresentativeHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCorporateRepresentative), v))
	})
}

// CorporateRepresentativeHasSuffix applies the HasSuffix predicate on the "corporate_representative" field.
func CorporateRepresentativeHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCorporateRepresentative), v))
	})
}

// CorporateRepresentativeIsNil applies the IsNil predicate on the "corporate_representative" field.
func CorporateRepresentativeIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCorporateRepresentative)))
	})
}

// CorporateRepresentativeNotNil applies the NotNil predicate on the "corporate_representative" field.
func CorporateRepresentativeNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCorporateRepresentative)))
	})
}

// CorporateRepresentativeEqualFold applies the EqualFold predicate on the "corporate_representative" field.
func CorporateRepresentativeEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCorporateRepresentative), v))
	})
}

// CorporateRepresentativeContainsFold applies the ContainsFold predicate on the "corporate_representative" field.
func CorporateRepresentativeContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCorporateRepresentative), v))
	})
}

// EconomicTypeEQ applies the EQ predicate on the "economic_type" field.
func EconomicTypeEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEconomicType), v))
	})
}

// EconomicTypeNEQ applies the NEQ predicate on the "economic_type" field.
func EconomicTypeNEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEconomicType), v))
	})
}

// EconomicTypeIn applies the In predicate on the "economic_type" field.
func EconomicTypeIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEconomicType), v...))
	})
}

// EconomicTypeNotIn applies the NotIn predicate on the "economic_type" field.
func EconomicTypeNotIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEconomicType), v...))
	})
}

// EconomicTypeGT applies the GT predicate on the "economic_type" field.
func EconomicTypeGT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEconomicType), v))
	})
}

// EconomicTypeGTE applies the GTE predicate on the "economic_type" field.
func EconomicTypeGTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEconomicType), v))
	})
}

// EconomicTypeLT applies the LT predicate on the "economic_type" field.
func EconomicTypeLT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEconomicType), v))
	})
}

// EconomicTypeLTE applies the LTE predicate on the "economic_type" field.
func EconomicTypeLTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEconomicType), v))
	})
}

// EconomicTypeIsNil applies the IsNil predicate on the "economic_type" field.
func EconomicTypeIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEconomicType)))
	})
}

// EconomicTypeNotNil applies the NotNil predicate on the "economic_type" field.
func EconomicTypeNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEconomicType)))
	})
}

// FinancialAffiliationEQ applies the EQ predicate on the "financial_affiliation" field.
func FinancialAffiliationEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFinancialAffiliation), v))
	})
}

// FinancialAffiliationNEQ applies the NEQ predicate on the "financial_affiliation" field.
func FinancialAffiliationNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFinancialAffiliation), v))
	})
}

// FinancialAffiliationIn applies the In predicate on the "financial_affiliation" field.
func FinancialAffiliationIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFinancialAffiliation), v...))
	})
}

// FinancialAffiliationNotIn applies the NotIn predicate on the "financial_affiliation" field.
func FinancialAffiliationNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFinancialAffiliation), v...))
	})
}

// FinancialAffiliationGT applies the GT predicate on the "financial_affiliation" field.
func FinancialAffiliationGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFinancialAffiliation), v))
	})
}

// FinancialAffiliationGTE applies the GTE predicate on the "financial_affiliation" field.
func FinancialAffiliationGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFinancialAffiliation), v))
	})
}

// FinancialAffiliationLT applies the LT predicate on the "financial_affiliation" field.
func FinancialAffiliationLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFinancialAffiliation), v))
	})
}

// FinancialAffiliationLTE applies the LTE predicate on the "financial_affiliation" field.
func FinancialAffiliationLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFinancialAffiliation), v))
	})
}

// FinancialAffiliationContains applies the Contains predicate on the "financial_affiliation" field.
func FinancialAffiliationContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFinancialAffiliation), v))
	})
}

// FinancialAffiliationHasPrefix applies the HasPrefix predicate on the "financial_affiliation" field.
func FinancialAffiliationHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFinancialAffiliation), v))
	})
}

// FinancialAffiliationHasSuffix applies the HasSuffix predicate on the "financial_affiliation" field.
func FinancialAffiliationHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFinancialAffiliation), v))
	})
}

// FinancialAffiliationIsNil applies the IsNil predicate on the "financial_affiliation" field.
func FinancialAffiliationIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFinancialAffiliation)))
	})
}

// FinancialAffiliationNotNil applies the NotNil predicate on the "financial_affiliation" field.
func FinancialAffiliationNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFinancialAffiliation)))
	})
}

// FinancialAffiliationEqualFold applies the EqualFold predicate on the "financial_affiliation" field.
func FinancialAffiliationEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFinancialAffiliation), v))
	})
}

// FinancialAffiliationContainsFold applies the ContainsFold predicate on the "financial_affiliation" field.
func FinancialAffiliationContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFinancialAffiliation), v))
	})
}

// FinancialUnitEQ applies the EQ predicate on the "financial_unit" field.
func FinancialUnitEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFinancialUnit), v))
	})
}

// FinancialUnitNEQ applies the NEQ predicate on the "financial_unit" field.
func FinancialUnitNEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFinancialUnit), v))
	})
}

// FinancialUnitIn applies the In predicate on the "financial_unit" field.
func FinancialUnitIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFinancialUnit), v...))
	})
}

// FinancialUnitNotIn applies the NotIn predicate on the "financial_unit" field.
func FinancialUnitNotIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFinancialUnit), v...))
	})
}

// FinancialUnitGT applies the GT predicate on the "financial_unit" field.
func FinancialUnitGT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFinancialUnit), v))
	})
}

// FinancialUnitGTE applies the GTE predicate on the "financial_unit" field.
func FinancialUnitGTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFinancialUnit), v))
	})
}

// FinancialUnitLT applies the LT predicate on the "financial_unit" field.
func FinancialUnitLT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFinancialUnit), v))
	})
}

// FinancialUnitLTE applies the LTE predicate on the "financial_unit" field.
func FinancialUnitLTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFinancialUnit), v))
	})
}

// FinancialUnitIsNil applies the IsNil predicate on the "financial_unit" field.
func FinancialUnitIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFinancialUnit)))
	})
}

// FinancialUnitNotNil applies the NotNil predicate on the "financial_unit" field.
func FinancialUnitNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFinancialUnit)))
	})
}

// VerticalUnitEQ applies the EQ predicate on the "vertical_unit" field.
func VerticalUnitEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVerticalUnit), v))
	})
}

// VerticalUnitNEQ applies the NEQ predicate on the "vertical_unit" field.
func VerticalUnitNEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVerticalUnit), v))
	})
}

// VerticalUnitIn applies the In predicate on the "vertical_unit" field.
func VerticalUnitIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVerticalUnit), v...))
	})
}

// VerticalUnitNotIn applies the NotIn predicate on the "vertical_unit" field.
func VerticalUnitNotIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVerticalUnit), v...))
	})
}

// VerticalUnitGT applies the GT predicate on the "vertical_unit" field.
func VerticalUnitGT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVerticalUnit), v))
	})
}

// VerticalUnitGTE applies the GTE predicate on the "vertical_unit" field.
func VerticalUnitGTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVerticalUnit), v))
	})
}

// VerticalUnitLT applies the LT predicate on the "vertical_unit" field.
func VerticalUnitLT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVerticalUnit), v))
	})
}

// VerticalUnitLTE applies the LTE predicate on the "vertical_unit" field.
func VerticalUnitLTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVerticalUnit), v))
	})
}

// VerticalUnitIsNil applies the IsNil predicate on the "vertical_unit" field.
func VerticalUnitIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldVerticalUnit)))
	})
}

// VerticalUnitNotNil applies the NotNil predicate on the "vertical_unit" field.
func VerticalUnitNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldVerticalUnit)))
	})
}

// VirtualUnitEQ applies the EQ predicate on the "virtual_unit" field.
func VirtualUnitEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVirtualUnit), v))
	})
}

// VirtualUnitNEQ applies the NEQ predicate on the "virtual_unit" field.
func VirtualUnitNEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVirtualUnit), v))
	})
}

// VirtualUnitIn applies the In predicate on the "virtual_unit" field.
func VirtualUnitIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVirtualUnit), v...))
	})
}

// VirtualUnitNotIn applies the NotIn predicate on the "virtual_unit" field.
func VirtualUnitNotIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVirtualUnit), v...))
	})
}

// VirtualUnitGT applies the GT predicate on the "virtual_unit" field.
func VirtualUnitGT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVirtualUnit), v))
	})
}

// VirtualUnitGTE applies the GTE predicate on the "virtual_unit" field.
func VirtualUnitGTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVirtualUnit), v))
	})
}

// VirtualUnitLT applies the LT predicate on the "virtual_unit" field.
func VirtualUnitLT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVirtualUnit), v))
	})
}

// VirtualUnitLTE applies the LTE predicate on the "virtual_unit" field.
func VirtualUnitLTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVirtualUnit), v))
	})
}

// VirtualUnitIsNil applies the IsNil predicate on the "virtual_unit" field.
func VirtualUnitIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldVirtualUnit)))
	})
}

// VirtualUnitNotNil applies the NotNil predicate on the "virtual_unit" field.
func VirtualUnitNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldVirtualUnit)))
	})
}

// AccountingSystemEQ applies the EQ predicate on the "accounting_system" field.
func AccountingSystemEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountingSystem), v))
	})
}

// AccountingSystemNEQ applies the NEQ predicate on the "accounting_system" field.
func AccountingSystemNEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccountingSystem), v))
	})
}

// AccountingSystemIn applies the In predicate on the "accounting_system" field.
func AccountingSystemIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAccountingSystem), v...))
	})
}

// AccountingSystemNotIn applies the NotIn predicate on the "accounting_system" field.
func AccountingSystemNotIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAccountingSystem), v...))
	})
}

// AccountingSystemGT applies the GT predicate on the "accounting_system" field.
func AccountingSystemGT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccountingSystem), v))
	})
}

// AccountingSystemGTE applies the GTE predicate on the "accounting_system" field.
func AccountingSystemGTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccountingSystem), v))
	})
}

// AccountingSystemLT applies the LT predicate on the "accounting_system" field.
func AccountingSystemLT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccountingSystem), v))
	})
}

// AccountingSystemLTE applies the LTE predicate on the "accounting_system" field.
func AccountingSystemLTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccountingSystem), v))
	})
}

// AccountingSystemIsNil applies the IsNil predicate on the "accounting_system" field.
func AccountingSystemIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAccountingSystem)))
	})
}

// AccountingSystemNotNil applies the NotNil predicate on the "accounting_system" field.
func AccountingSystemNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAccountingSystem)))
	})
}

// CorporateTagEQ applies the EQ predicate on the "corporate_tag" field.
func CorporateTagEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCorporateTag), v))
	})
}

// CorporateTagNEQ applies the NEQ predicate on the "corporate_tag" field.
func CorporateTagNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCorporateTag), v))
	})
}

// CorporateTagIn applies the In predicate on the "corporate_tag" field.
func CorporateTagIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCorporateTag), v...))
	})
}

// CorporateTagNotIn applies the NotIn predicate on the "corporate_tag" field.
func CorporateTagNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCorporateTag), v...))
	})
}

// CorporateTagGT applies the GT predicate on the "corporate_tag" field.
func CorporateTagGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCorporateTag), v))
	})
}

// CorporateTagGTE applies the GTE predicate on the "corporate_tag" field.
func CorporateTagGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCorporateTag), v))
	})
}

// CorporateTagLT applies the LT predicate on the "corporate_tag" field.
func CorporateTagLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCorporateTag), v))
	})
}

// CorporateTagLTE applies the LTE predicate on the "corporate_tag" field.
func CorporateTagLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCorporateTag), v))
	})
}

// CorporateTagContains applies the Contains predicate on the "corporate_tag" field.
func CorporateTagContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCorporateTag), v))
	})
}

// CorporateTagHasPrefix applies the HasPrefix predicate on the "corporate_tag" field.
func CorporateTagHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCorporateTag), v))
	})
}

// CorporateTagHasSuffix applies the HasSuffix predicate on the "corporate_tag" field.
func CorporateTagHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCorporateTag), v))
	})
}

// CorporateTagIsNil applies the IsNil predicate on the "corporate_tag" field.
func CorporateTagIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCorporateTag)))
	})
}

// CorporateTagNotNil applies the NotNil predicate on the "corporate_tag" field.
func CorporateTagNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCorporateTag)))
	})
}

// CorporateTagEqualFold applies the EqualFold predicate on the "corporate_tag" field.
func CorporateTagEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCorporateTag), v))
	})
}

// CorporateTagContainsFold applies the ContainsFold predicate on the "corporate_tag" field.
func CorporateTagContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCorporateTag), v))
	})
}

// MaintainerMarkEQ applies the EQ predicate on the "maintainer_mark" field.
func MaintainerMarkEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaintainerMark), v))
	})
}

// MaintainerMarkNEQ applies the NEQ predicate on the "maintainer_mark" field.
func MaintainerMarkNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaintainerMark), v))
	})
}

// MaintainerMarkIn applies the In predicate on the "maintainer_mark" field.
func MaintainerMarkIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMaintainerMark), v...))
	})
}

// MaintainerMarkNotIn applies the NotIn predicate on the "maintainer_mark" field.
func MaintainerMarkNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMaintainerMark), v...))
	})
}

// MaintainerMarkGT applies the GT predicate on the "maintainer_mark" field.
func MaintainerMarkGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMaintainerMark), v))
	})
}

// MaintainerMarkGTE applies the GTE predicate on the "maintainer_mark" field.
func MaintainerMarkGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMaintainerMark), v))
	})
}

// MaintainerMarkLT applies the LT predicate on the "maintainer_mark" field.
func MaintainerMarkLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMaintainerMark), v))
	})
}

// MaintainerMarkLTE applies the LTE predicate on the "maintainer_mark" field.
func MaintainerMarkLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMaintainerMark), v))
	})
}

// MaintainerMarkContains applies the Contains predicate on the "maintainer_mark" field.
func MaintainerMarkContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMaintainerMark), v))
	})
}

// MaintainerMarkHasPrefix applies the HasPrefix predicate on the "maintainer_mark" field.
func MaintainerMarkHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMaintainerMark), v))
	})
}

// MaintainerMarkHasSuffix applies the HasSuffix predicate on the "maintainer_mark" field.
func MaintainerMarkHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMaintainerMark), v))
	})
}

// MaintainerMarkIsNil applies the IsNil predicate on the "maintainer_mark" field.
func MaintainerMarkIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMaintainerMark)))
	})
}

// MaintainerMarkNotNil applies the NotNil predicate on the "maintainer_mark" field.
func MaintainerMarkNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMaintainerMark)))
	})
}

// MaintainerMarkEqualFold applies the EqualFold predicate on the "maintainer_mark" field.
func MaintainerMarkEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMaintainerMark), v))
	})
}

// MaintainerMarkContainsFold applies the ContainsFold predicate on the "maintainer_mark" field.
func MaintainerMarkContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMaintainerMark), v))
	})
}

// SupplierMarkEQ applies the EQ predicate on the "supplier_mark" field.
func SupplierMarkEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSupplierMark), v))
	})
}

// SupplierMarkNEQ applies the NEQ predicate on the "supplier_mark" field.
func SupplierMarkNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSupplierMark), v))
	})
}

// SupplierMarkIn applies the In predicate on the "supplier_mark" field.
func SupplierMarkIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSupplierMark), v...))
	})
}

// SupplierMarkNotIn applies the NotIn predicate on the "supplier_mark" field.
func SupplierMarkNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSupplierMark), v...))
	})
}

// SupplierMarkGT applies the GT predicate on the "supplier_mark" field.
func SupplierMarkGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSupplierMark), v))
	})
}

// SupplierMarkGTE applies the GTE predicate on the "supplier_mark" field.
func SupplierMarkGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSupplierMark), v))
	})
}

// SupplierMarkLT applies the LT predicate on the "supplier_mark" field.
func SupplierMarkLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSupplierMark), v))
	})
}

// SupplierMarkLTE applies the LTE predicate on the "supplier_mark" field.
func SupplierMarkLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSupplierMark), v))
	})
}

// SupplierMarkContains applies the Contains predicate on the "supplier_mark" field.
func SupplierMarkContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSupplierMark), v))
	})
}

// SupplierMarkHasPrefix applies the HasPrefix predicate on the "supplier_mark" field.
func SupplierMarkHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSupplierMark), v))
	})
}

// SupplierMarkHasSuffix applies the HasSuffix predicate on the "supplier_mark" field.
func SupplierMarkHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSupplierMark), v))
	})
}

// SupplierMarkIsNil applies the IsNil predicate on the "supplier_mark" field.
func SupplierMarkIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSupplierMark)))
	})
}

// SupplierMarkNotNil applies the NotNil predicate on the "supplier_mark" field.
func SupplierMarkNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSupplierMark)))
	})
}

// SupplierMarkEqualFold applies the EqualFold predicate on the "supplier_mark" field.
func SupplierMarkEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSupplierMark), v))
	})
}

// SupplierMarkContainsFold applies the ContainsFold predicate on the "supplier_mark" field.
func SupplierMarkContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSupplierMark), v))
	})
}

// ManufactureMarkEQ applies the EQ predicate on the "manufacture_mark" field.
func ManufactureMarkEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldManufactureMark), v))
	})
}

// ManufactureMarkNEQ applies the NEQ predicate on the "manufacture_mark" field.
func ManufactureMarkNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldManufactureMark), v))
	})
}

// ManufactureMarkIn applies the In predicate on the "manufacture_mark" field.
func ManufactureMarkIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldManufactureMark), v...))
	})
}

// ManufactureMarkNotIn applies the NotIn predicate on the "manufacture_mark" field.
func ManufactureMarkNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldManufactureMark), v...))
	})
}

// ManufactureMarkGT applies the GT predicate on the "manufacture_mark" field.
func ManufactureMarkGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldManufactureMark), v))
	})
}

// ManufactureMarkGTE applies the GTE predicate on the "manufacture_mark" field.
func ManufactureMarkGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldManufactureMark), v))
	})
}

// ManufactureMarkLT applies the LT predicate on the "manufacture_mark" field.
func ManufactureMarkLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldManufactureMark), v))
	})
}

// ManufactureMarkLTE applies the LTE predicate on the "manufacture_mark" field.
func ManufactureMarkLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldManufactureMark), v))
	})
}

// ManufactureMarkContains applies the Contains predicate on the "manufacture_mark" field.
func ManufactureMarkContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldManufactureMark), v))
	})
}

// ManufactureMarkHasPrefix applies the HasPrefix predicate on the "manufacture_mark" field.
func ManufactureMarkHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldManufactureMark), v))
	})
}

// ManufactureMarkHasSuffix applies the HasSuffix predicate on the "manufacture_mark" field.
func ManufactureMarkHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldManufactureMark), v))
	})
}

// ManufactureMarkIsNil applies the IsNil predicate on the "manufacture_mark" field.
func ManufactureMarkIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldManufactureMark)))
	})
}

// ManufactureMarkNotNil applies the NotNil predicate on the "manufacture_mark" field.
func ManufactureMarkNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldManufactureMark)))
	})
}

// ManufactureMarkEqualFold applies the EqualFold predicate on the "manufacture_mark" field.
func ManufactureMarkEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldManufactureMark), v))
	})
}

// ManufactureMarkContainsFold applies the ContainsFold predicate on the "manufacture_mark" field.
func ManufactureMarkContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldManufactureMark), v))
	})
}

// AssetDisposalAgencyTagEQ applies the EQ predicate on the "asset_disposal_agency_tag" field.
func AssetDisposalAgencyTagEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAssetDisposalAgencyTag), v))
	})
}

// AssetDisposalAgencyTagNEQ applies the NEQ predicate on the "asset_disposal_agency_tag" field.
func AssetDisposalAgencyTagNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAssetDisposalAgencyTag), v))
	})
}

// AssetDisposalAgencyTagIn applies the In predicate on the "asset_disposal_agency_tag" field.
func AssetDisposalAgencyTagIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAssetDisposalAgencyTag), v...))
	})
}

// AssetDisposalAgencyTagNotIn applies the NotIn predicate on the "asset_disposal_agency_tag" field.
func AssetDisposalAgencyTagNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAssetDisposalAgencyTag), v...))
	})
}

// AssetDisposalAgencyTagGT applies the GT predicate on the "asset_disposal_agency_tag" field.
func AssetDisposalAgencyTagGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAssetDisposalAgencyTag), v))
	})
}

// AssetDisposalAgencyTagGTE applies the GTE predicate on the "asset_disposal_agency_tag" field.
func AssetDisposalAgencyTagGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAssetDisposalAgencyTag), v))
	})
}

// AssetDisposalAgencyTagLT applies the LT predicate on the "asset_disposal_agency_tag" field.
func AssetDisposalAgencyTagLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAssetDisposalAgencyTag), v))
	})
}

// AssetDisposalAgencyTagLTE applies the LTE predicate on the "asset_disposal_agency_tag" field.
func AssetDisposalAgencyTagLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAssetDisposalAgencyTag), v))
	})
}

// AssetDisposalAgencyTagContains applies the Contains predicate on the "asset_disposal_agency_tag" field.
func AssetDisposalAgencyTagContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAssetDisposalAgencyTag), v))
	})
}

// AssetDisposalAgencyTagHasPrefix applies the HasPrefix predicate on the "asset_disposal_agency_tag" field.
func AssetDisposalAgencyTagHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAssetDisposalAgencyTag), v))
	})
}

// AssetDisposalAgencyTagHasSuffix applies the HasSuffix predicate on the "asset_disposal_agency_tag" field.
func AssetDisposalAgencyTagHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAssetDisposalAgencyTag), v))
	})
}

// AssetDisposalAgencyTagIsNil applies the IsNil predicate on the "asset_disposal_agency_tag" field.
func AssetDisposalAgencyTagIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAssetDisposalAgencyTag)))
	})
}

// AssetDisposalAgencyTagNotNil applies the NotNil predicate on the "asset_disposal_agency_tag" field.
func AssetDisposalAgencyTagNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAssetDisposalAgencyTag)))
	})
}

// AssetDisposalAgencyTagEqualFold applies the EqualFold predicate on the "asset_disposal_agency_tag" field.
func AssetDisposalAgencyTagEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAssetDisposalAgencyTag), v))
	})
}

// AssetDisposalAgencyTagContainsFold applies the ContainsFold predicate on the "asset_disposal_agency_tag" field.
func AssetDisposalAgencyTagContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAssetDisposalAgencyTag), v))
	})
}

// StateAssetManagementCompanyEQ applies the EQ predicate on the "state_asset_management_company" field.
func StateAssetManagementCompanyEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStateAssetManagementCompany), v))
	})
}

// StateAssetManagementCompanyNEQ applies the NEQ predicate on the "state_asset_management_company" field.
func StateAssetManagementCompanyNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStateAssetManagementCompany), v))
	})
}

// StateAssetManagementCompanyIn applies the In predicate on the "state_asset_management_company" field.
func StateAssetManagementCompanyIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStateAssetManagementCompany), v...))
	})
}

// StateAssetManagementCompanyNotIn applies the NotIn predicate on the "state_asset_management_company" field.
func StateAssetManagementCompanyNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStateAssetManagementCompany), v...))
	})
}

// StateAssetManagementCompanyGT applies the GT predicate on the "state_asset_management_company" field.
func StateAssetManagementCompanyGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStateAssetManagementCompany), v))
	})
}

// StateAssetManagementCompanyGTE applies the GTE predicate on the "state_asset_management_company" field.
func StateAssetManagementCompanyGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStateAssetManagementCompany), v))
	})
}

// StateAssetManagementCompanyLT applies the LT predicate on the "state_asset_management_company" field.
func StateAssetManagementCompanyLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStateAssetManagementCompany), v))
	})
}

// StateAssetManagementCompanyLTE applies the LTE predicate on the "state_asset_management_company" field.
func StateAssetManagementCompanyLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStateAssetManagementCompany), v))
	})
}

// StateAssetManagementCompanyContains applies the Contains predicate on the "state_asset_management_company" field.
func StateAssetManagementCompanyContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStateAssetManagementCompany), v))
	})
}

// StateAssetManagementCompanyHasPrefix applies the HasPrefix predicate on the "state_asset_management_company" field.
func StateAssetManagementCompanyHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStateAssetManagementCompany), v))
	})
}

// StateAssetManagementCompanyHasSuffix applies the HasSuffix predicate on the "state_asset_management_company" field.
func StateAssetManagementCompanyHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStateAssetManagementCompany), v))
	})
}

// StateAssetManagementCompanyIsNil applies the IsNil predicate on the "state_asset_management_company" field.
func StateAssetManagementCompanyIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStateAssetManagementCompany)))
	})
}

// StateAssetManagementCompanyNotNil applies the NotNil predicate on the "state_asset_management_company" field.
func StateAssetManagementCompanyNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStateAssetManagementCompany)))
	})
}

// StateAssetManagementCompanyEqualFold applies the EqualFold predicate on the "state_asset_management_company" field.
func StateAssetManagementCompanyEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStateAssetManagementCompany), v))
	})
}

// StateAssetManagementCompanyContainsFold applies the ContainsFold predicate on the "state_asset_management_company" field.
func StateAssetManagementCompanyContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStateAssetManagementCompany), v))
	})
}

// InstitutionNumberEQ applies the EQ predicate on the "institution_number" field.
func InstitutionNumberEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstitutionNumber), v))
	})
}

// InstitutionNumberNEQ applies the NEQ predicate on the "institution_number" field.
func InstitutionNumberNEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInstitutionNumber), v))
	})
}

// InstitutionNumberIn applies the In predicate on the "institution_number" field.
func InstitutionNumberIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInstitutionNumber), v...))
	})
}

// InstitutionNumberNotIn applies the NotIn predicate on the "institution_number" field.
func InstitutionNumberNotIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInstitutionNumber), v...))
	})
}

// InstitutionNumberGT applies the GT predicate on the "institution_number" field.
func InstitutionNumberGT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInstitutionNumber), v))
	})
}

// InstitutionNumberGTE applies the GTE predicate on the "institution_number" field.
func InstitutionNumberGTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInstitutionNumber), v))
	})
}

// InstitutionNumberLT applies the LT predicate on the "institution_number" field.
func InstitutionNumberLT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInstitutionNumber), v))
	})
}

// InstitutionNumberLTE applies the LTE predicate on the "institution_number" field.
func InstitutionNumberLTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInstitutionNumber), v))
	})
}

// InstitutionNumberIsNil applies the IsNil predicate on the "institution_number" field.
func InstitutionNumberIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldInstitutionNumber)))
	})
}

// InstitutionNumberNotNil applies the NotNil predicate on the "institution_number" field.
func InstitutionNumberNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldInstitutionNumber)))
	})
}

// AuthorizedNumberEQ applies the EQ predicate on the "authorized_number" field.
func AuthorizedNumberEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAuthorizedNumber), v))
	})
}

// AuthorizedNumberNEQ applies the NEQ predicate on the "authorized_number" field.
func AuthorizedNumberNEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAuthorizedNumber), v))
	})
}

// AuthorizedNumberIn applies the In predicate on the "authorized_number" field.
func AuthorizedNumberIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAuthorizedNumber), v...))
	})
}

// AuthorizedNumberNotIn applies the NotIn predicate on the "authorized_number" field.
func AuthorizedNumberNotIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAuthorizedNumber), v...))
	})
}

// AuthorizedNumberGT applies the GT predicate on the "authorized_number" field.
func AuthorizedNumberGT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAuthorizedNumber), v))
	})
}

// AuthorizedNumberGTE applies the GTE predicate on the "authorized_number" field.
func AuthorizedNumberGTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAuthorizedNumber), v))
	})
}

// AuthorizedNumberLT applies the LT predicate on the "authorized_number" field.
func AuthorizedNumberLT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAuthorizedNumber), v))
	})
}

// AuthorizedNumberLTE applies the LTE predicate on the "authorized_number" field.
func AuthorizedNumberLTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAuthorizedNumber), v))
	})
}

// AuthorizedNumberIsNil applies the IsNil predicate on the "authorized_number" field.
func AuthorizedNumberIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAuthorizedNumber)))
	})
}

// AuthorizedNumberNotNil applies the NotNil predicate on the "authorized_number" field.
func AuthorizedNumberNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAuthorizedNumber)))
	})
}

// OfSideNumberEQ applies the EQ predicate on the "of_side_number" field.
func OfSideNumberEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOfSideNumber), v))
	})
}

// OfSideNumberNEQ applies the NEQ predicate on the "of_side_number" field.
func OfSideNumberNEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOfSideNumber), v))
	})
}

// OfSideNumberIn applies the In predicate on the "of_side_number" field.
func OfSideNumberIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOfSideNumber), v...))
	})
}

// OfSideNumberNotIn applies the NotIn predicate on the "of_side_number" field.
func OfSideNumberNotIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOfSideNumber), v...))
	})
}

// OfSideNumberGT applies the GT predicate on the "of_side_number" field.
func OfSideNumberGT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOfSideNumber), v))
	})
}

// OfSideNumberGTE applies the GTE predicate on the "of_side_number" field.
func OfSideNumberGTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOfSideNumber), v))
	})
}

// OfSideNumberLT applies the LT predicate on the "of_side_number" field.
func OfSideNumberLT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOfSideNumber), v))
	})
}

// OfSideNumberLTE applies the LTE predicate on the "of_side_number" field.
func OfSideNumberLTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOfSideNumber), v))
	})
}

// OfSideNumberIsNil applies the IsNil predicate on the "of_side_number" field.
func OfSideNumberIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOfSideNumber)))
	})
}

// OfSideNumberNotNil applies the NotNil predicate on the "of_side_number" field.
func OfSideNumberNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOfSideNumber)))
	})
}

// InstitutionAuthorityEQ applies the EQ predicate on the "institution_authority" field.
func InstitutionAuthorityEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstitutionAuthority), v))
	})
}

// InstitutionAuthorityNEQ applies the NEQ predicate on the "institution_authority" field.
func InstitutionAuthorityNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInstitutionAuthority), v))
	})
}

// InstitutionAuthorityIn applies the In predicate on the "institution_authority" field.
func InstitutionAuthorityIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInstitutionAuthority), v...))
	})
}

// InstitutionAuthorityNotIn applies the NotIn predicate on the "institution_authority" field.
func InstitutionAuthorityNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInstitutionAuthority), v...))
	})
}

// InstitutionAuthorityGT applies the GT predicate on the "institution_authority" field.
func InstitutionAuthorityGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInstitutionAuthority), v))
	})
}

// InstitutionAuthorityGTE applies the GTE predicate on the "institution_authority" field.
func InstitutionAuthorityGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInstitutionAuthority), v))
	})
}

// InstitutionAuthorityLT applies the LT predicate on the "institution_authority" field.
func InstitutionAuthorityLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInstitutionAuthority), v))
	})
}

// InstitutionAuthorityLTE applies the LTE predicate on the "institution_authority" field.
func InstitutionAuthorityLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInstitutionAuthority), v))
	})
}

// InstitutionAuthorityContains applies the Contains predicate on the "institution_authority" field.
func InstitutionAuthorityContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInstitutionAuthority), v))
	})
}

// InstitutionAuthorityHasPrefix applies the HasPrefix predicate on the "institution_authority" field.
func InstitutionAuthorityHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInstitutionAuthority), v))
	})
}

// InstitutionAuthorityHasSuffix applies the HasSuffix predicate on the "institution_authority" field.
func InstitutionAuthorityHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInstitutionAuthority), v))
	})
}

// InstitutionAuthorityIsNil applies the IsNil predicate on the "institution_authority" field.
func InstitutionAuthorityIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldInstitutionAuthority)))
	})
}

// InstitutionAuthorityNotNil applies the NotNil predicate on the "institution_authority" field.
func InstitutionAuthorityNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldInstitutionAuthority)))
	})
}

// InstitutionAuthorityEqualFold applies the EqualFold predicate on the "institution_authority" field.
func InstitutionAuthorityEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInstitutionAuthority), v))
	})
}

// InstitutionAuthorityContainsFold applies the ContainsFold predicate on the "institution_authority" field.
func InstitutionAuthorityContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInstitutionAuthority), v))
	})
}

// AdministrationAuthorityEQ applies the EQ predicate on the "administration_authority" field.
func AdministrationAuthorityEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAdministrationAuthority), v))
	})
}

// AdministrationAuthorityNEQ applies the NEQ predicate on the "administration_authority" field.
func AdministrationAuthorityNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAdministrationAuthority), v))
	})
}

// AdministrationAuthorityIn applies the In predicate on the "administration_authority" field.
func AdministrationAuthorityIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAdministrationAuthority), v...))
	})
}

// AdministrationAuthorityNotIn applies the NotIn predicate on the "administration_authority" field.
func AdministrationAuthorityNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAdministrationAuthority), v...))
	})
}

// AdministrationAuthorityGT applies the GT predicate on the "administration_authority" field.
func AdministrationAuthorityGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAdministrationAuthority), v))
	})
}

// AdministrationAuthorityGTE applies the GTE predicate on the "administration_authority" field.
func AdministrationAuthorityGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAdministrationAuthority), v))
	})
}

// AdministrationAuthorityLT applies the LT predicate on the "administration_authority" field.
func AdministrationAuthorityLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAdministrationAuthority), v))
	})
}

// AdministrationAuthorityLTE applies the LTE predicate on the "administration_authority" field.
func AdministrationAuthorityLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAdministrationAuthority), v))
	})
}

// AdministrationAuthorityContains applies the Contains predicate on the "administration_authority" field.
func AdministrationAuthorityContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAdministrationAuthority), v))
	})
}

// AdministrationAuthorityHasPrefix applies the HasPrefix predicate on the "administration_authority" field.
func AdministrationAuthorityHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAdministrationAuthority), v))
	})
}

// AdministrationAuthorityHasSuffix applies the HasSuffix predicate on the "administration_authority" field.
func AdministrationAuthorityHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAdministrationAuthority), v))
	})
}

// AdministrationAuthorityIsNil applies the IsNil predicate on the "administration_authority" field.
func AdministrationAuthorityIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAdministrationAuthority)))
	})
}

// AdministrationAuthorityNotNil applies the NotNil predicate on the "administration_authority" field.
func AdministrationAuthorityNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAdministrationAuthority)))
	})
}

// AdministrationAuthorityEqualFold applies the EqualFold predicate on the "administration_authority" field.
func AdministrationAuthorityEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAdministrationAuthority), v))
	})
}

// AdministrationAuthorityContainsFold applies the ContainsFold predicate on the "administration_authority" field.
func AdministrationAuthorityContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAdministrationAuthority), v))
	})
}

// EnableTimeEQ applies the EQ predicate on the "enable_time" field.
func EnableTimeEQ(v date.DateTime) predicate.AsUnit {
	vc := time.Time(v)
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnableTime), vc))
	})
}

// EnableTimeNEQ applies the NEQ predicate on the "enable_time" field.
func EnableTimeNEQ(v date.DateTime) predicate.AsUnit {
	vc := time.Time(v)
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEnableTime), vc))
	})
}

// EnableTimeIn applies the In predicate on the "enable_time" field.
func EnableTimeIn(vs ...date.DateTime) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEnableTime), v...))
	})
}

// EnableTimeNotIn applies the NotIn predicate on the "enable_time" field.
func EnableTimeNotIn(vs ...date.DateTime) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEnableTime), v...))
	})
}

// EnableTimeGT applies the GT predicate on the "enable_time" field.
func EnableTimeGT(v date.DateTime) predicate.AsUnit {
	vc := time.Time(v)
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEnableTime), vc))
	})
}

// EnableTimeGTE applies the GTE predicate on the "enable_time" field.
func EnableTimeGTE(v date.DateTime) predicate.AsUnit {
	vc := time.Time(v)
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEnableTime), vc))
	})
}

// EnableTimeLT applies the LT predicate on the "enable_time" field.
func EnableTimeLT(v date.DateTime) predicate.AsUnit {
	vc := time.Time(v)
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEnableTime), vc))
	})
}

// EnableTimeLTE applies the LTE predicate on the "enable_time" field.
func EnableTimeLTE(v date.DateTime) predicate.AsUnit {
	vc := time.Time(v)
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEnableTime), vc))
	})
}

// EnableTimeIsNil applies the IsNil predicate on the "enable_time" field.
func EnableTimeIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEnableTime)))
	})
}

// EnableTimeNotNil applies the NotNil predicate on the "enable_time" field.
func EnableTimeNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEnableTime)))
	})
}

// DisableTimeEQ applies the EQ predicate on the "disable_time" field.
func DisableTimeEQ(v date.DateTime) predicate.AsUnit {
	vc := time.Time(v)
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDisableTime), vc))
	})
}

// DisableTimeNEQ applies the NEQ predicate on the "disable_time" field.
func DisableTimeNEQ(v date.DateTime) predicate.AsUnit {
	vc := time.Time(v)
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDisableTime), vc))
	})
}

// DisableTimeIn applies the In predicate on the "disable_time" field.
func DisableTimeIn(vs ...date.DateTime) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDisableTime), v...))
	})
}

// DisableTimeNotIn applies the NotIn predicate on the "disable_time" field.
func DisableTimeNotIn(vs ...date.DateTime) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDisableTime), v...))
	})
}

// DisableTimeGT applies the GT predicate on the "disable_time" field.
func DisableTimeGT(v date.DateTime) predicate.AsUnit {
	vc := time.Time(v)
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDisableTime), vc))
	})
}

// DisableTimeGTE applies the GTE predicate on the "disable_time" field.
func DisableTimeGTE(v date.DateTime) predicate.AsUnit {
	vc := time.Time(v)
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDisableTime), vc))
	})
}

// DisableTimeLT applies the LT predicate on the "disable_time" field.
func DisableTimeLT(v date.DateTime) predicate.AsUnit {
	vc := time.Time(v)
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDisableTime), vc))
	})
}

// DisableTimeLTE applies the LTE predicate on the "disable_time" field.
func DisableTimeLTE(v date.DateTime) predicate.AsUnit {
	vc := time.Time(v)
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDisableTime), vc))
	})
}

// DisableTimeIsNil applies the IsNil predicate on the "disable_time" field.
func DisableTimeIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDisableTime)))
	})
}

// DisableTimeNotNil applies the NotNil predicate on the "disable_time" field.
func DisableTimeNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDisableTime)))
	})
}

// SealTimeEQ applies the EQ predicate on the "seal_time" field.
func SealTimeEQ(v date.DateTime) predicate.AsUnit {
	vc := time.Time(v)
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSealTime), vc))
	})
}

// SealTimeNEQ applies the NEQ predicate on the "seal_time" field.
func SealTimeNEQ(v date.DateTime) predicate.AsUnit {
	vc := time.Time(v)
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSealTime), vc))
	})
}

// SealTimeIn applies the In predicate on the "seal_time" field.
func SealTimeIn(vs ...date.DateTime) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSealTime), v...))
	})
}

// SealTimeNotIn applies the NotIn predicate on the "seal_time" field.
func SealTimeNotIn(vs ...date.DateTime) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSealTime), v...))
	})
}

// SealTimeGT applies the GT predicate on the "seal_time" field.
func SealTimeGT(v date.DateTime) predicate.AsUnit {
	vc := time.Time(v)
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSealTime), vc))
	})
}

// SealTimeGTE applies the GTE predicate on the "seal_time" field.
func SealTimeGTE(v date.DateTime) predicate.AsUnit {
	vc := time.Time(v)
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSealTime), vc))
	})
}

// SealTimeLT applies the LT predicate on the "seal_time" field.
func SealTimeLT(v date.DateTime) predicate.AsUnit {
	vc := time.Time(v)
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSealTime), vc))
	})
}

// SealTimeLTE applies the LTE predicate on the "seal_time" field.
func SealTimeLTE(v date.DateTime) predicate.AsUnit {
	vc := time.Time(v)
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSealTime), vc))
	})
}

// SealTimeIsNil applies the IsNil predicate on the "seal_time" field.
func SealTimeIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSealTime)))
	})
}

// SealTimeNotNil applies the NotNil predicate on the "seal_time" field.
func SealTimeNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSealTime)))
	})
}

// UnitRemarkEQ applies the EQ predicate on the "unit_remark" field.
func UnitRemarkEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitRemark), v))
	})
}

// UnitRemarkNEQ applies the NEQ predicate on the "unit_remark" field.
func UnitRemarkNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnitRemark), v))
	})
}

// UnitRemarkIn applies the In predicate on the "unit_remark" field.
func UnitRemarkIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUnitRemark), v...))
	})
}

// UnitRemarkNotIn applies the NotIn predicate on the "unit_remark" field.
func UnitRemarkNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUnitRemark), v...))
	})
}

// UnitRemarkGT applies the GT predicate on the "unit_remark" field.
func UnitRemarkGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnitRemark), v))
	})
}

// UnitRemarkGTE applies the GTE predicate on the "unit_remark" field.
func UnitRemarkGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnitRemark), v))
	})
}

// UnitRemarkLT applies the LT predicate on the "unit_remark" field.
func UnitRemarkLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnitRemark), v))
	})
}

// UnitRemarkLTE applies the LTE predicate on the "unit_remark" field.
func UnitRemarkLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnitRemark), v))
	})
}

// UnitRemarkContains applies the Contains predicate on the "unit_remark" field.
func UnitRemarkContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUnitRemark), v))
	})
}

// UnitRemarkHasPrefix applies the HasPrefix predicate on the "unit_remark" field.
func UnitRemarkHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUnitRemark), v))
	})
}

// UnitRemarkHasSuffix applies the HasSuffix predicate on the "unit_remark" field.
func UnitRemarkHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUnitRemark), v))
	})
}

// UnitRemarkIsNil applies the IsNil predicate on the "unit_remark" field.
func UnitRemarkIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUnitRemark)))
	})
}

// UnitRemarkNotNil applies the NotNil predicate on the "unit_remark" field.
func UnitRemarkNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUnitRemark)))
	})
}

// UnitRemarkEqualFold applies the EqualFold predicate on the "unit_remark" field.
func UnitRemarkEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUnitRemark), v))
	})
}

// UnitRemarkContainsFold applies the ContainsFold predicate on the "unit_remark" field.
func UnitRemarkContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUnitRemark), v))
	})
}

// AssetDownloadStatusEQ applies the EQ predicate on the "asset_download_status" field.
func AssetDownloadStatusEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAssetDownloadStatus), v))
	})
}

// AssetDownloadStatusNEQ applies the NEQ predicate on the "asset_download_status" field.
func AssetDownloadStatusNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAssetDownloadStatus), v))
	})
}

// AssetDownloadStatusIn applies the In predicate on the "asset_download_status" field.
func AssetDownloadStatusIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAssetDownloadStatus), v...))
	})
}

// AssetDownloadStatusNotIn applies the NotIn predicate on the "asset_download_status" field.
func AssetDownloadStatusNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAssetDownloadStatus), v...))
	})
}

// AssetDownloadStatusGT applies the GT predicate on the "asset_download_status" field.
func AssetDownloadStatusGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAssetDownloadStatus), v))
	})
}

// AssetDownloadStatusGTE applies the GTE predicate on the "asset_download_status" field.
func AssetDownloadStatusGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAssetDownloadStatus), v))
	})
}

// AssetDownloadStatusLT applies the LT predicate on the "asset_download_status" field.
func AssetDownloadStatusLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAssetDownloadStatus), v))
	})
}

// AssetDownloadStatusLTE applies the LTE predicate on the "asset_download_status" field.
func AssetDownloadStatusLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAssetDownloadStatus), v))
	})
}

// AssetDownloadStatusContains applies the Contains predicate on the "asset_download_status" field.
func AssetDownloadStatusContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAssetDownloadStatus), v))
	})
}

// AssetDownloadStatusHasPrefix applies the HasPrefix predicate on the "asset_download_status" field.
func AssetDownloadStatusHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAssetDownloadStatus), v))
	})
}

// AssetDownloadStatusHasSuffix applies the HasSuffix predicate on the "asset_download_status" field.
func AssetDownloadStatusHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAssetDownloadStatus), v))
	})
}

// AssetDownloadStatusIsNil applies the IsNil predicate on the "asset_download_status" field.
func AssetDownloadStatusIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAssetDownloadStatus)))
	})
}

// AssetDownloadStatusNotNil applies the NotNil predicate on the "asset_download_status" field.
func AssetDownloadStatusNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAssetDownloadStatus)))
	})
}

// AssetDownloadStatusEqualFold applies the EqualFold predicate on the "asset_download_status" field.
func AssetDownloadStatusEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAssetDownloadStatus), v))
	})
}

// AssetDownloadStatusContainsFold applies the ContainsFold predicate on the "asset_download_status" field.
func AssetDownloadStatusContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAssetDownloadStatus), v))
	})
}

// LatitudeAndLongitudeEQ applies the EQ predicate on the "latitude_and_longitude" field.
func LatitudeAndLongitudeEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLatitudeAndLongitude), v))
	})
}

// LatitudeAndLongitudeNEQ applies the NEQ predicate on the "latitude_and_longitude" field.
func LatitudeAndLongitudeNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLatitudeAndLongitude), v))
	})
}

// LatitudeAndLongitudeIn applies the In predicate on the "latitude_and_longitude" field.
func LatitudeAndLongitudeIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLatitudeAndLongitude), v...))
	})
}

// LatitudeAndLongitudeNotIn applies the NotIn predicate on the "latitude_and_longitude" field.
func LatitudeAndLongitudeNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLatitudeAndLongitude), v...))
	})
}

// LatitudeAndLongitudeGT applies the GT predicate on the "latitude_and_longitude" field.
func LatitudeAndLongitudeGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLatitudeAndLongitude), v))
	})
}

// LatitudeAndLongitudeGTE applies the GTE predicate on the "latitude_and_longitude" field.
func LatitudeAndLongitudeGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLatitudeAndLongitude), v))
	})
}

// LatitudeAndLongitudeLT applies the LT predicate on the "latitude_and_longitude" field.
func LatitudeAndLongitudeLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLatitudeAndLongitude), v))
	})
}

// LatitudeAndLongitudeLTE applies the LTE predicate on the "latitude_and_longitude" field.
func LatitudeAndLongitudeLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLatitudeAndLongitude), v))
	})
}

// LatitudeAndLongitudeContains applies the Contains predicate on the "latitude_and_longitude" field.
func LatitudeAndLongitudeContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLatitudeAndLongitude), v))
	})
}

// LatitudeAndLongitudeHasPrefix applies the HasPrefix predicate on the "latitude_and_longitude" field.
func LatitudeAndLongitudeHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLatitudeAndLongitude), v))
	})
}

// LatitudeAndLongitudeHasSuffix applies the HasSuffix predicate on the "latitude_and_longitude" field.
func LatitudeAndLongitudeHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLatitudeAndLongitude), v))
	})
}

// LatitudeAndLongitudeIsNil applies the IsNil predicate on the "latitude_and_longitude" field.
func LatitudeAndLongitudeIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLatitudeAndLongitude)))
	})
}

// LatitudeAndLongitudeNotNil applies the NotNil predicate on the "latitude_and_longitude" field.
func LatitudeAndLongitudeNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLatitudeAndLongitude)))
	})
}

// LatitudeAndLongitudeEqualFold applies the EqualFold predicate on the "latitude_and_longitude" field.
func LatitudeAndLongitudeEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLatitudeAndLongitude), v))
	})
}

// LatitudeAndLongitudeContainsFold applies the ContainsFold predicate on the "latitude_and_longitude" field.
func LatitudeAndLongitudeContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLatitudeAndLongitude), v))
	})
}

// SortEQ applies the EQ predicate on the "sort" field.
func SortEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSort), v))
	})
}

// SortNEQ applies the NEQ predicate on the "sort" field.
func SortNEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSort), v))
	})
}

// SortIn applies the In predicate on the "sort" field.
func SortIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSort), v...))
	})
}

// SortNotIn applies the NotIn predicate on the "sort" field.
func SortNotIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSort), v...))
	})
}

// SortGT applies the GT predicate on the "sort" field.
func SortGT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSort), v))
	})
}

// SortGTE applies the GTE predicate on the "sort" field.
func SortGTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSort), v))
	})
}

// SortLT applies the LT predicate on the "sort" field.
func SortLT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSort), v))
	})
}

// SortLTE applies the LTE predicate on the "sort" field.
func SortLTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSort), v))
	})
}

// SortIsNil applies the IsNil predicate on the "sort" field.
func SortIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSort)))
	})
}

// SortNotNil applies the NotNil predicate on the "sort" field.
func SortNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSort)))
	})
}

// OrganCodeEQ applies the EQ predicate on the "organ_code" field.
func OrganCodeEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrganCode), v))
	})
}

// OrganCodeNEQ applies the NEQ predicate on the "organ_code" field.
func OrganCodeNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrganCode), v))
	})
}

// OrganCodeIn applies the In predicate on the "organ_code" field.
func OrganCodeIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrganCode), v...))
	})
}

// OrganCodeNotIn applies the NotIn predicate on the "organ_code" field.
func OrganCodeNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrganCode), v...))
	})
}

// OrganCodeGT applies the GT predicate on the "organ_code" field.
func OrganCodeGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrganCode), v))
	})
}

// OrganCodeGTE applies the GTE predicate on the "organ_code" field.
func OrganCodeGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrganCode), v))
	})
}

// OrganCodeLT applies the LT predicate on the "organ_code" field.
func OrganCodeLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrganCode), v))
	})
}

// OrganCodeLTE applies the LTE predicate on the "organ_code" field.
func OrganCodeLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrganCode), v))
	})
}

// OrganCodeContains applies the Contains predicate on the "organ_code" field.
func OrganCodeContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOrganCode), v))
	})
}

// OrganCodeHasPrefix applies the HasPrefix predicate on the "organ_code" field.
func OrganCodeHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOrganCode), v))
	})
}

// OrganCodeHasSuffix applies the HasSuffix predicate on the "organ_code" field.
func OrganCodeHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOrganCode), v))
	})
}

// OrganCodeIsNil applies the IsNil predicate on the "organ_code" field.
func OrganCodeIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOrganCode)))
	})
}

// OrganCodeNotNil applies the NotNil predicate on the "organ_code" field.
func OrganCodeNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOrganCode)))
	})
}

// OrganCodeEqualFold applies the EqualFold predicate on the "organ_code" field.
func OrganCodeEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOrganCode), v))
	})
}

// OrganCodeContainsFold applies the ContainsFold predicate on the "organ_code" field.
func OrganCodeContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOrganCode), v))
	})
}

// HadInnerNumberEQ applies the EQ predicate on the "had_inner_number" field.
func HadInnerNumberEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHadInnerNumber), v))
	})
}

// HadInnerNumberNEQ applies the NEQ predicate on the "had_inner_number" field.
func HadInnerNumberNEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHadInnerNumber), v))
	})
}

// HadInnerNumberIn applies the In predicate on the "had_inner_number" field.
func HadInnerNumberIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHadInnerNumber), v...))
	})
}

// HadInnerNumberNotIn applies the NotIn predicate on the "had_inner_number" field.
func HadInnerNumberNotIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHadInnerNumber), v...))
	})
}

// HadInnerNumberGT applies the GT predicate on the "had_inner_number" field.
func HadInnerNumberGT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHadInnerNumber), v))
	})
}

// HadInnerNumberGTE applies the GTE predicate on the "had_inner_number" field.
func HadInnerNumberGTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHadInnerNumber), v))
	})
}

// HadInnerNumberLT applies the LT predicate on the "had_inner_number" field.
func HadInnerNumberLT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHadInnerNumber), v))
	})
}

// HadInnerNumberLTE applies the LTE predicate on the "had_inner_number" field.
func HadInnerNumberLTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHadInnerNumber), v))
	})
}

// HadInnerNumberIsNil applies the IsNil predicate on the "had_inner_number" field.
func HadInnerNumberIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldHadInnerNumber)))
	})
}

// HadInnerNumberNotNil applies the NotNil predicate on the "had_inner_number" field.
func HadInnerNumberNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldHadInnerNumber)))
	})
}

// ApproveInnerNumberEQ applies the EQ predicate on the "approve_inner_number" field.
func ApproveInnerNumberEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldApproveInnerNumber), v))
	})
}

// ApproveInnerNumberNEQ applies the NEQ predicate on the "approve_inner_number" field.
func ApproveInnerNumberNEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldApproveInnerNumber), v))
	})
}

// ApproveInnerNumberIn applies the In predicate on the "approve_inner_number" field.
func ApproveInnerNumberIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldApproveInnerNumber), v...))
	})
}

// ApproveInnerNumberNotIn applies the NotIn predicate on the "approve_inner_number" field.
func ApproveInnerNumberNotIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldApproveInnerNumber), v...))
	})
}

// ApproveInnerNumberGT applies the GT predicate on the "approve_inner_number" field.
func ApproveInnerNumberGT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldApproveInnerNumber), v))
	})
}

// ApproveInnerNumberGTE applies the GTE predicate on the "approve_inner_number" field.
func ApproveInnerNumberGTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldApproveInnerNumber), v))
	})
}

// ApproveInnerNumberLT applies the LT predicate on the "approve_inner_number" field.
func ApproveInnerNumberLT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldApproveInnerNumber), v))
	})
}

// ApproveInnerNumberLTE applies the LTE predicate on the "approve_inner_number" field.
func ApproveInnerNumberLTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldApproveInnerNumber), v))
	})
}

// ApproveInnerNumberIsNil applies the IsNil predicate on the "approve_inner_number" field.
func ApproveInnerNumberIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldApproveInnerNumber)))
	})
}

// ApproveInnerNumberNotNil applies the NotNil predicate on the "approve_inner_number" field.
func ApproveInnerNumberNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldApproveInnerNumber)))
	})
}

// ImgEQ applies the EQ predicate on the "img" field.
func ImgEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImg), v))
	})
}

// ImgNEQ applies the NEQ predicate on the "img" field.
func ImgNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldImg), v))
	})
}

// ImgIn applies the In predicate on the "img" field.
func ImgIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldImg), v...))
	})
}

// ImgNotIn applies the NotIn predicate on the "img" field.
func ImgNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldImg), v...))
	})
}

// ImgGT applies the GT predicate on the "img" field.
func ImgGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldImg), v))
	})
}

// ImgGTE applies the GTE predicate on the "img" field.
func ImgGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldImg), v))
	})
}

// ImgLT applies the LT predicate on the "img" field.
func ImgLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldImg), v))
	})
}

// ImgLTE applies the LTE predicate on the "img" field.
func ImgLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldImg), v))
	})
}

// ImgContains applies the Contains predicate on the "img" field.
func ImgContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldImg), v))
	})
}

// ImgHasPrefix applies the HasPrefix predicate on the "img" field.
func ImgHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldImg), v))
	})
}

// ImgHasSuffix applies the HasSuffix predicate on the "img" field.
func ImgHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldImg), v))
	})
}

// ImgIsNil applies the IsNil predicate on the "img" field.
func ImgIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldImg)))
	})
}

// ImgNotNil applies the NotNil predicate on the "img" field.
func ImgNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldImg)))
	})
}

// ImgEqualFold applies the EqualFold predicate on the "img" field.
func ImgEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldImg), v))
	})
}

// ImgContainsFold applies the ContainsFold predicate on the "img" field.
func ImgContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldImg), v))
	})
}

// LinkManEQ applies the EQ predicate on the "link_man" field.
func LinkManEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLinkMan), v))
	})
}

// LinkManNEQ applies the NEQ predicate on the "link_man" field.
func LinkManNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLinkMan), v))
	})
}

// LinkManIn applies the In predicate on the "link_man" field.
func LinkManIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLinkMan), v...))
	})
}

// LinkManNotIn applies the NotIn predicate on the "link_man" field.
func LinkManNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLinkMan), v...))
	})
}

// LinkManGT applies the GT predicate on the "link_man" field.
func LinkManGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLinkMan), v))
	})
}

// LinkManGTE applies the GTE predicate on the "link_man" field.
func LinkManGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLinkMan), v))
	})
}

// LinkManLT applies the LT predicate on the "link_man" field.
func LinkManLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLinkMan), v))
	})
}

// LinkManLTE applies the LTE predicate on the "link_man" field.
func LinkManLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLinkMan), v))
	})
}

// LinkManContains applies the Contains predicate on the "link_man" field.
func LinkManContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLinkMan), v))
	})
}

// LinkManHasPrefix applies the HasPrefix predicate on the "link_man" field.
func LinkManHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLinkMan), v))
	})
}

// LinkManHasSuffix applies the HasSuffix predicate on the "link_man" field.
func LinkManHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLinkMan), v))
	})
}

// LinkManIsNil applies the IsNil predicate on the "link_man" field.
func LinkManIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLinkMan)))
	})
}

// LinkManNotNil applies the NotNil predicate on the "link_man" field.
func LinkManNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLinkMan)))
	})
}

// LinkManEqualFold applies the EqualFold predicate on the "link_man" field.
func LinkManEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLinkMan), v))
	})
}

// LinkManContainsFold applies the ContainsFold predicate on the "link_man" field.
func LinkManContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLinkMan), v))
	})
}

// LinkPhoneEQ applies the EQ predicate on the "link_phone" field.
func LinkPhoneEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLinkPhone), v))
	})
}

// LinkPhoneNEQ applies the NEQ predicate on the "link_phone" field.
func LinkPhoneNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLinkPhone), v))
	})
}

// LinkPhoneIn applies the In predicate on the "link_phone" field.
func LinkPhoneIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLinkPhone), v...))
	})
}

// LinkPhoneNotIn applies the NotIn predicate on the "link_phone" field.
func LinkPhoneNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLinkPhone), v...))
	})
}

// LinkPhoneGT applies the GT predicate on the "link_phone" field.
func LinkPhoneGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLinkPhone), v))
	})
}

// LinkPhoneGTE applies the GTE predicate on the "link_phone" field.
func LinkPhoneGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLinkPhone), v))
	})
}

// LinkPhoneLT applies the LT predicate on the "link_phone" field.
func LinkPhoneLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLinkPhone), v))
	})
}

// LinkPhoneLTE applies the LTE predicate on the "link_phone" field.
func LinkPhoneLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLinkPhone), v))
	})
}

// LinkPhoneContains applies the Contains predicate on the "link_phone" field.
func LinkPhoneContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLinkPhone), v))
	})
}

// LinkPhoneHasPrefix applies the HasPrefix predicate on the "link_phone" field.
func LinkPhoneHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLinkPhone), v))
	})
}

// LinkPhoneHasSuffix applies the HasSuffix predicate on the "link_phone" field.
func LinkPhoneHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLinkPhone), v))
	})
}

// LinkPhoneIsNil applies the IsNil predicate on the "link_phone" field.
func LinkPhoneIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLinkPhone)))
	})
}

// LinkPhoneNotNil applies the NotNil predicate on the "link_phone" field.
func LinkPhoneNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLinkPhone)))
	})
}

// LinkPhoneEqualFold applies the EqualFold predicate on the "link_phone" field.
func LinkPhoneEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLinkPhone), v))
	})
}

// LinkPhoneContainsFold applies the ContainsFold predicate on the "link_phone" field.
func LinkPhoneContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLinkPhone), v))
	})
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantID), v))
	})
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantID), v))
	})
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantID), v...))
	})
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantID), v...))
	})
}

// TenantIDIsNil applies the IsNil predicate on the "tenant_id" field.
func TenantIDIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTenantID)))
	})
}

// TenantIDNotNil applies the NotNil predicate on the "tenant_id" field.
func TenantIDNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTenantID)))
	})
}

// UnitCodeEQ applies the EQ predicate on the "unit_code" field.
func UnitCodeEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitCode), v))
	})
}

// UnitCodeNEQ applies the NEQ predicate on the "unit_code" field.
func UnitCodeNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnitCode), v))
	})
}

// UnitCodeIn applies the In predicate on the "unit_code" field.
func UnitCodeIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUnitCode), v...))
	})
}

// UnitCodeNotIn applies the NotIn predicate on the "unit_code" field.
func UnitCodeNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUnitCode), v...))
	})
}

// UnitCodeGT applies the GT predicate on the "unit_code" field.
func UnitCodeGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnitCode), v))
	})
}

// UnitCodeGTE applies the GTE predicate on the "unit_code" field.
func UnitCodeGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnitCode), v))
	})
}

// UnitCodeLT applies the LT predicate on the "unit_code" field.
func UnitCodeLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnitCode), v))
	})
}

// UnitCodeLTE applies the LTE predicate on the "unit_code" field.
func UnitCodeLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnitCode), v))
	})
}

// UnitCodeContains applies the Contains predicate on the "unit_code" field.
func UnitCodeContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUnitCode), v))
	})
}

// UnitCodeHasPrefix applies the HasPrefix predicate on the "unit_code" field.
func UnitCodeHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUnitCode), v))
	})
}

// UnitCodeHasSuffix applies the HasSuffix predicate on the "unit_code" field.
func UnitCodeHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUnitCode), v))
	})
}

// UnitCodeIsNil applies the IsNil predicate on the "unit_code" field.
func UnitCodeIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUnitCode)))
	})
}

// UnitCodeNotNil applies the NotNil predicate on the "unit_code" field.
func UnitCodeNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUnitCode)))
	})
}

// UnitCodeEqualFold applies the EqualFold predicate on the "unit_code" field.
func UnitCodeEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUnitCode), v))
	})
}

// UnitCodeContainsFold applies the ContainsFold predicate on the "unit_code" field.
func UnitCodeContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUnitCode), v))
	})
}

// AuthorityTotalEQ applies the EQ predicate on the "authority_total" field.
func AuthorityTotalEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAuthorityTotal), v))
	})
}

// AuthorityTotalNEQ applies the NEQ predicate on the "authority_total" field.
func AuthorityTotalNEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAuthorityTotal), v))
	})
}

// AuthorityTotalIn applies the In predicate on the "authority_total" field.
func AuthorityTotalIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAuthorityTotal), v...))
	})
}

// AuthorityTotalNotIn applies the NotIn predicate on the "authority_total" field.
func AuthorityTotalNotIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAuthorityTotal), v...))
	})
}

// AuthorityTotalGT applies the GT predicate on the "authority_total" field.
func AuthorityTotalGT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAuthorityTotal), v))
	})
}

// AuthorityTotalGTE applies the GTE predicate on the "authority_total" field.
func AuthorityTotalGTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAuthorityTotal), v))
	})
}

// AuthorityTotalLT applies the LT predicate on the "authority_total" field.
func AuthorityTotalLT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAuthorityTotal), v))
	})
}

// AuthorityTotalLTE applies the LTE predicate on the "authority_total" field.
func AuthorityTotalLTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAuthorityTotal), v))
	})
}

// AuthorityTotalIsNil applies the IsNil predicate on the "authority_total" field.
func AuthorityTotalIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAuthorityTotal)))
	})
}

// AuthorityTotalNotNil applies the NotNil predicate on the "authority_total" field.
func AuthorityTotalNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAuthorityTotal)))
	})
}

// StaffOnActiveDutyEQ applies the EQ predicate on the "staff_on_active_duty" field.
func StaffOnActiveDutyEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStaffOnActiveDuty), v))
	})
}

// StaffOnActiveDutyNEQ applies the NEQ predicate on the "staff_on_active_duty" field.
func StaffOnActiveDutyNEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStaffOnActiveDuty), v))
	})
}

// StaffOnActiveDutyIn applies the In predicate on the "staff_on_active_duty" field.
func StaffOnActiveDutyIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStaffOnActiveDuty), v...))
	})
}

// StaffOnActiveDutyNotIn applies the NotIn predicate on the "staff_on_active_duty" field.
func StaffOnActiveDutyNotIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStaffOnActiveDuty), v...))
	})
}

// StaffOnActiveDutyGT applies the GT predicate on the "staff_on_active_duty" field.
func StaffOnActiveDutyGT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStaffOnActiveDuty), v))
	})
}

// StaffOnActiveDutyGTE applies the GTE predicate on the "staff_on_active_duty" field.
func StaffOnActiveDutyGTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStaffOnActiveDuty), v))
	})
}

// StaffOnActiveDutyLT applies the LT predicate on the "staff_on_active_duty" field.
func StaffOnActiveDutyLT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStaffOnActiveDuty), v))
	})
}

// StaffOnActiveDutyLTE applies the LTE predicate on the "staff_on_active_duty" field.
func StaffOnActiveDutyLTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStaffOnActiveDuty), v))
	})
}

// StaffOnActiveDutyIsNil applies the IsNil predicate on the "staff_on_active_duty" field.
func StaffOnActiveDutyIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStaffOnActiveDuty)))
	})
}

// StaffOnActiveDutyNotNil applies the NotNil predicate on the "staff_on_active_duty" field.
func StaffOnActiveDutyNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStaffOnActiveDuty)))
	})
}

// RetiredStaffEQ applies the EQ predicate on the "retired_staff" field.
func RetiredStaffEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRetiredStaff), v))
	})
}

// RetiredStaffNEQ applies the NEQ predicate on the "retired_staff" field.
func RetiredStaffNEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRetiredStaff), v))
	})
}

// RetiredStaffIn applies the In predicate on the "retired_staff" field.
func RetiredStaffIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRetiredStaff), v...))
	})
}

// RetiredStaffNotIn applies the NotIn predicate on the "retired_staff" field.
func RetiredStaffNotIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRetiredStaff), v...))
	})
}

// RetiredStaffGT applies the GT predicate on the "retired_staff" field.
func RetiredStaffGT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRetiredStaff), v))
	})
}

// RetiredStaffGTE applies the GTE predicate on the "retired_staff" field.
func RetiredStaffGTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRetiredStaff), v))
	})
}

// RetiredStaffLT applies the LT predicate on the "retired_staff" field.
func RetiredStaffLT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRetiredStaff), v))
	})
}

// RetiredStaffLTE applies the LTE predicate on the "retired_staff" field.
func RetiredStaffLTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRetiredStaff), v))
	})
}

// RetiredStaffIsNil applies the IsNil predicate on the "retired_staff" field.
func RetiredStaffIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRetiredStaff)))
	})
}

// RetiredStaffNotNil applies the NotNil predicate on the "retired_staff" field.
func RetiredStaffNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRetiredStaff)))
	})
}

// OtherStaffEQ applies the EQ predicate on the "other_staff" field.
func OtherStaffEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOtherStaff), v))
	})
}

// OtherStaffNEQ applies the NEQ predicate on the "other_staff" field.
func OtherStaffNEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOtherStaff), v))
	})
}

// OtherStaffIn applies the In predicate on the "other_staff" field.
func OtherStaffIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOtherStaff), v...))
	})
}

// OtherStaffNotIn applies the NotIn predicate on the "other_staff" field.
func OtherStaffNotIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOtherStaff), v...))
	})
}

// OtherStaffGT applies the GT predicate on the "other_staff" field.
func OtherStaffGT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOtherStaff), v))
	})
}

// OtherStaffGTE applies the GTE predicate on the "other_staff" field.
func OtherStaffGTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOtherStaff), v))
	})
}

// OtherStaffLT applies the LT predicate on the "other_staff" field.
func OtherStaffLT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOtherStaff), v))
	})
}

// OtherStaffLTE applies the LTE predicate on the "other_staff" field.
func OtherStaffLTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOtherStaff), v))
	})
}

// OtherStaffIsNil applies the IsNil predicate on the "other_staff" field.
func OtherStaffIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOtherStaff)))
	})
}

// OtherStaffNotNil applies the NotNil predicate on the "other_staff" field.
func OtherStaffNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOtherStaff)))
	})
}

// IsVirtualEQ applies the EQ predicate on the "is_virtual" field.
func IsVirtualEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsVirtual), v))
	})
}

// IsVirtualNEQ applies the NEQ predicate on the "is_virtual" field.
func IsVirtualNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsVirtual), v))
	})
}

// IsVirtualIn applies the In predicate on the "is_virtual" field.
func IsVirtualIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsVirtual), v...))
	})
}

// IsVirtualNotIn applies the NotIn predicate on the "is_virtual" field.
func IsVirtualNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsVirtual), v...))
	})
}

// IsVirtualGT applies the GT predicate on the "is_virtual" field.
func IsVirtualGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsVirtual), v))
	})
}

// IsVirtualGTE applies the GTE predicate on the "is_virtual" field.
func IsVirtualGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsVirtual), v))
	})
}

// IsVirtualLT applies the LT predicate on the "is_virtual" field.
func IsVirtualLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsVirtual), v))
	})
}

// IsVirtualLTE applies the LTE predicate on the "is_virtual" field.
func IsVirtualLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsVirtual), v))
	})
}

// IsVirtualContains applies the Contains predicate on the "is_virtual" field.
func IsVirtualContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIsVirtual), v))
	})
}

// IsVirtualHasPrefix applies the HasPrefix predicate on the "is_virtual" field.
func IsVirtualHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIsVirtual), v))
	})
}

// IsVirtualHasSuffix applies the HasSuffix predicate on the "is_virtual" field.
func IsVirtualHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIsVirtual), v))
	})
}

// IsVirtualEqualFold applies the EqualFold predicate on the "is_virtual" field.
func IsVirtualEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIsVirtual), v))
	})
}

// IsVirtualContainsFold applies the ContainsFold predicate on the "is_virtual" field.
func IsVirtualContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIsVirtual), v))
	})
}

// UnitReformEQ applies the EQ predicate on the "unit_reform" field.
func UnitReformEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitReform), v))
	})
}

// UnitReformNEQ applies the NEQ predicate on the "unit_reform" field.
func UnitReformNEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnitReform), v))
	})
}

// UnitReformIn applies the In predicate on the "unit_reform" field.
func UnitReformIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUnitReform), v...))
	})
}

// UnitReformNotIn applies the NotIn predicate on the "unit_reform" field.
func UnitReformNotIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUnitReform), v...))
	})
}

// UnitReformGT applies the GT predicate on the "unit_reform" field.
func UnitReformGT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnitReform), v))
	})
}

// UnitReformGTE applies the GTE predicate on the "unit_reform" field.
func UnitReformGTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnitReform), v))
	})
}

// UnitReformLT applies the LT predicate on the "unit_reform" field.
func UnitReformLT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnitReform), v))
	})
}

// UnitReformLTE applies the LTE predicate on the "unit_reform" field.
func UnitReformLTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnitReform), v))
	})
}

// UnitReformIsNil applies the IsNil predicate on the "unit_reform" field.
func UnitReformIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUnitReform)))
	})
}

// UnitReformNotNil applies the NotNil predicate on the "unit_reform" field.
func UnitReformNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUnitReform)))
	})
}

// PersonExpenditureEQ applies the EQ predicate on the "person_expenditure" field.
func PersonExpenditureEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPersonExpenditure), v))
	})
}

// PersonExpenditureNEQ applies the NEQ predicate on the "person_expenditure" field.
func PersonExpenditureNEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPersonExpenditure), v))
	})
}

// PersonExpenditureIn applies the In predicate on the "person_expenditure" field.
func PersonExpenditureIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPersonExpenditure), v...))
	})
}

// PersonExpenditureNotIn applies the NotIn predicate on the "person_expenditure" field.
func PersonExpenditureNotIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPersonExpenditure), v...))
	})
}

// PersonExpenditureGT applies the GT predicate on the "person_expenditure" field.
func PersonExpenditureGT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPersonExpenditure), v))
	})
}

// PersonExpenditureGTE applies the GTE predicate on the "person_expenditure" field.
func PersonExpenditureGTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPersonExpenditure), v))
	})
}

// PersonExpenditureLT applies the LT predicate on the "person_expenditure" field.
func PersonExpenditureLT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPersonExpenditure), v))
	})
}

// PersonExpenditureLTE applies the LTE predicate on the "person_expenditure" field.
func PersonExpenditureLTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPersonExpenditure), v))
	})
}

// PersonExpenditureIsNil applies the IsNil predicate on the "person_expenditure" field.
func PersonExpenditureIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPersonExpenditure)))
	})
}

// PersonExpenditureNotNil applies the NotNil predicate on the "person_expenditure" field.
func PersonExpenditureNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPersonExpenditure)))
	})
}

// InstitutionTypeEQ applies the EQ predicate on the "institution_type" field.
func InstitutionTypeEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstitutionType), v))
	})
}

// InstitutionTypeNEQ applies the NEQ predicate on the "institution_type" field.
func InstitutionTypeNEQ(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInstitutionType), v))
	})
}

// InstitutionTypeIn applies the In predicate on the "institution_type" field.
func InstitutionTypeIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInstitutionType), v...))
	})
}

// InstitutionTypeNotIn applies the NotIn predicate on the "institution_type" field.
func InstitutionTypeNotIn(vs ...string) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInstitutionType), v...))
	})
}

// InstitutionTypeGT applies the GT predicate on the "institution_type" field.
func InstitutionTypeGT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInstitutionType), v))
	})
}

// InstitutionTypeGTE applies the GTE predicate on the "institution_type" field.
func InstitutionTypeGTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInstitutionType), v))
	})
}

// InstitutionTypeLT applies the LT predicate on the "institution_type" field.
func InstitutionTypeLT(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInstitutionType), v))
	})
}

// InstitutionTypeLTE applies the LTE predicate on the "institution_type" field.
func InstitutionTypeLTE(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInstitutionType), v))
	})
}

// InstitutionTypeContains applies the Contains predicate on the "institution_type" field.
func InstitutionTypeContains(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInstitutionType), v))
	})
}

// InstitutionTypeHasPrefix applies the HasPrefix predicate on the "institution_type" field.
func InstitutionTypeHasPrefix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInstitutionType), v))
	})
}

// InstitutionTypeHasSuffix applies the HasSuffix predicate on the "institution_type" field.
func InstitutionTypeHasSuffix(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInstitutionType), v))
	})
}

// InstitutionTypeIsNil applies the IsNil predicate on the "institution_type" field.
func InstitutionTypeIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldInstitutionType)))
	})
}

// InstitutionTypeNotNil applies the NotNil predicate on the "institution_type" field.
func InstitutionTypeNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldInstitutionType)))
	})
}

// InstitutionTypeEqualFold applies the EqualFold predicate on the "institution_type" field.
func InstitutionTypeEqualFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInstitutionType), v))
	})
}

// InstitutionTypeContainsFold applies the ContainsFold predicate on the "institution_type" field.
func InstitutionTypeContainsFold(v string) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInstitutionType), v))
	})
}

// DepartmentIdentificationEQ applies the EQ predicate on the "department_identification" field.
func DepartmentIdentificationEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDepartmentIdentification), v))
	})
}

// DepartmentIdentificationNEQ applies the NEQ predicate on the "department_identification" field.
func DepartmentIdentificationNEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDepartmentIdentification), v))
	})
}

// DepartmentIdentificationIn applies the In predicate on the "department_identification" field.
func DepartmentIdentificationIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDepartmentIdentification), v...))
	})
}

// DepartmentIdentificationNotIn applies the NotIn predicate on the "department_identification" field.
func DepartmentIdentificationNotIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDepartmentIdentification), v...))
	})
}

// DepartmentIdentificationGT applies the GT predicate on the "department_identification" field.
func DepartmentIdentificationGT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDepartmentIdentification), v))
	})
}

// DepartmentIdentificationGTE applies the GTE predicate on the "department_identification" field.
func DepartmentIdentificationGTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDepartmentIdentification), v))
	})
}

// DepartmentIdentificationLT applies the LT predicate on the "department_identification" field.
func DepartmentIdentificationLT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDepartmentIdentification), v))
	})
}

// DepartmentIdentificationLTE applies the LTE predicate on the "department_identification" field.
func DepartmentIdentificationLTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDepartmentIdentification), v))
	})
}

// DepartmentIdentificationIsNil applies the IsNil predicate on the "department_identification" field.
func DepartmentIdentificationIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDepartmentIdentification)))
	})
}

// DepartmentIdentificationNotNil applies the NotNil predicate on the "department_identification" field.
func DepartmentIdentificationNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDepartmentIdentification)))
	})
}

// TotalHeadcountEQ applies the EQ predicate on the "total_headcount" field.
func TotalHeadcountEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalHeadcount), v))
	})
}

// TotalHeadcountNEQ applies the NEQ predicate on the "total_headcount" field.
func TotalHeadcountNEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTotalHeadcount), v))
	})
}

// TotalHeadcountIn applies the In predicate on the "total_headcount" field.
func TotalHeadcountIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTotalHeadcount), v...))
	})
}

// TotalHeadcountNotIn applies the NotIn predicate on the "total_headcount" field.
func TotalHeadcountNotIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTotalHeadcount), v...))
	})
}

// TotalHeadcountGT applies the GT predicate on the "total_headcount" field.
func TotalHeadcountGT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTotalHeadcount), v))
	})
}

// TotalHeadcountGTE applies the GTE predicate on the "total_headcount" field.
func TotalHeadcountGTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTotalHeadcount), v))
	})
}

// TotalHeadcountLT applies the LT predicate on the "total_headcount" field.
func TotalHeadcountLT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTotalHeadcount), v))
	})
}

// TotalHeadcountLTE applies the LTE predicate on the "total_headcount" field.
func TotalHeadcountLTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTotalHeadcount), v))
	})
}

// TotalHeadcountIsNil applies the IsNil predicate on the "total_headcount" field.
func TotalHeadcountIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTotalHeadcount)))
	})
}

// TotalHeadcountNotNil applies the NotNil predicate on the "total_headcount" field.
func TotalHeadcountNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTotalHeadcount)))
	})
}

// IsDeletedEQ applies the EQ predicate on the "is_deleted" field.
func IsDeletedEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedNEQ applies the NEQ predicate on the "is_deleted" field.
func IsDeletedNEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedIn applies the In predicate on the "is_deleted" field.
func IsDeletedIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsDeleted), v...))
	})
}

// IsDeletedNotIn applies the NotIn predicate on the "is_deleted" field.
func IsDeletedNotIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsDeleted), v...))
	})
}

// IsDeletedGT applies the GT predicate on the "is_deleted" field.
func IsDeletedGT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedGTE applies the GTE predicate on the "is_deleted" field.
func IsDeletedGTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedLT applies the LT predicate on the "is_deleted" field.
func IsDeletedLT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedLTE applies the LTE predicate on the "is_deleted" field.
func IsDeletedLTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsDeleted), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStatus)))
	})
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStatus)))
	})
}

// CreateUserEQ applies the EQ predicate on the "create_user" field.
func CreateUserEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateUser), v))
	})
}

// CreateUserNEQ applies the NEQ predicate on the "create_user" field.
func CreateUserNEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateUser), v))
	})
}

// CreateUserIn applies the In predicate on the "create_user" field.
func CreateUserIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateUser), v...))
	})
}

// CreateUserNotIn applies the NotIn predicate on the "create_user" field.
func CreateUserNotIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateUser), v...))
	})
}

// CreateUserGT applies the GT predicate on the "create_user" field.
func CreateUserGT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateUser), v))
	})
}

// CreateUserGTE applies the GTE predicate on the "create_user" field.
func CreateUserGTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateUser), v))
	})
}

// CreateUserLT applies the LT predicate on the "create_user" field.
func CreateUserLT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateUser), v))
	})
}

// CreateUserLTE applies the LTE predicate on the "create_user" field.
func CreateUserLTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateUser), v))
	})
}

// CreateUserIsNil applies the IsNil predicate on the "create_user" field.
func CreateUserIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreateUser)))
	})
}

// CreateUserNotNil applies the NotNil predicate on the "create_user" field.
func CreateUserNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreateUser)))
	})
}

// UpdateUserEQ applies the EQ predicate on the "update_user" field.
func UpdateUserEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserNEQ applies the NEQ predicate on the "update_user" field.
func UpdateUserNEQ(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserIn applies the In predicate on the "update_user" field.
func UpdateUserIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateUser), v...))
	})
}

// UpdateUserNotIn applies the NotIn predicate on the "update_user" field.
func UpdateUserNotIn(vs ...int64) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateUser), v...))
	})
}

// UpdateUserGT applies the GT predicate on the "update_user" field.
func UpdateUserGT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserGTE applies the GTE predicate on the "update_user" field.
func UpdateUserGTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserLT applies the LT predicate on the "update_user" field.
func UpdateUserLT(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserLTE applies the LTE predicate on the "update_user" field.
func UpdateUserLTE(v int64) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserIsNil applies the IsNil predicate on the "update_user" field.
func UpdateUserIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdateUser)))
	})
}

// UpdateUserNotNil applies the NotNil predicate on the "update_user" field.
func UpdateUserNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdateUser)))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v date.DateTime) predicate.AsUnit {
	vc := time.Time(v)
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v date.DateTime) predicate.AsUnit {
	vc := time.Time(v)
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...date.DateTime) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...date.DateTime) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v date.DateTime) predicate.AsUnit {
	vc := time.Time(v)
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v date.DateTime) predicate.AsUnit {
	vc := time.Time(v)
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v date.DateTime) predicate.AsUnit {
	vc := time.Time(v)
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v date.DateTime) predicate.AsUnit {
	vc := time.Time(v)
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeIsNil applies the IsNil predicate on the "create_time" field.
func CreateTimeIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreateTime)))
	})
}

// CreateTimeNotNil applies the NotNil predicate on the "create_time" field.
func CreateTimeNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreateTime)))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v date.DateTime) predicate.AsUnit {
	vc := time.Time(v)
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v date.DateTime) predicate.AsUnit {
	vc := time.Time(v)
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...date.DateTime) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...date.DateTime) predicate.AsUnit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsUnit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v date.DateTime) predicate.AsUnit {
	vc := time.Time(v)
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v date.DateTime) predicate.AsUnit {
	vc := time.Time(v)
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v date.DateTime) predicate.AsUnit {
	vc := time.Time(v)
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v date.DateTime) predicate.AsUnit {
	vc := time.Time(v)
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeIsNil applies the IsNil predicate on the "update_time" field.
func UpdateTimeIsNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdateTime)))
	})
}

// UpdateTimeNotNil applies the NotNil predicate on the "update_time" field.
func UpdateTimeNotNil() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdateTime)))
	})
}

// HasTenantx applies the HasEdge predicate on the "tenantx" edge.
func HasTenantx() predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TenantxTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, TenantxTable, TenantxColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantxWith applies the HasEdge predicate on the "tenantx" edge with a given conditions (other predicates).
func HasTenantxWith(preds ...predicate.AsTenant) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TenantxInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, TenantxTable, TenantxColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AsUnit) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AsUnit) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AsUnit) predicate.AsUnit {
	return predicate.AsUnit(func(s *sql.Selector) {
		p(s.Not())
	})
}
