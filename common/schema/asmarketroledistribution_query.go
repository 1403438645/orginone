// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"math"
	"orginone/common/schema/asinneragency"
	"orginone/common/schema/asjob"
	"orginone/common/schema/asmarketapprole"
	"orginone/common/schema/asmarketroledistribution"
	"orginone/common/schema/asuser"
	"orginone/common/schema/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsMarketRoleDistributionQuery is the builder for querying AsMarketRoleDistribution entities.
type AsMarketRoleDistributionQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.AsMarketRoleDistribution
	// eager-loading edges.
	withUserx   *AsUserQuery
	withAgencyx *AsInnerAgencyQuery
	withJobx    *AsJobQuery
	withRolex   *AsMarketAppRoleQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AsMarketRoleDistributionQuery builder.
func (amrdq *AsMarketRoleDistributionQuery) Where(ps ...predicate.AsMarketRoleDistribution) *AsMarketRoleDistributionQuery {
	amrdq.predicates = append(amrdq.predicates, ps...)
	return amrdq
}

// Limit adds a limit step to the query.
func (amrdq *AsMarketRoleDistributionQuery) Limit(limit int) *AsMarketRoleDistributionQuery {
	amrdq.limit = &limit
	return amrdq
}

// Offset adds an offset step to the query.
func (amrdq *AsMarketRoleDistributionQuery) Offset(offset int) *AsMarketRoleDistributionQuery {
	amrdq.offset = &offset
	return amrdq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (amrdq *AsMarketRoleDistributionQuery) Unique(unique bool) *AsMarketRoleDistributionQuery {
	amrdq.unique = &unique
	return amrdq
}

// Order adds an order step to the query.
func (amrdq *AsMarketRoleDistributionQuery) Order(o ...OrderFunc) *AsMarketRoleDistributionQuery {
	amrdq.order = append(amrdq.order, o...)
	return amrdq
}

// QueryUserx chains the current query on the "userx" edge.
func (amrdq *AsMarketRoleDistributionQuery) QueryUserx() *AsUserQuery {
	query := &AsUserQuery{config: amrdq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := amrdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := amrdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketroledistribution.Table, asmarketroledistribution.FieldID, selector),
			sqlgraph.To(asuser.Table, asuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asmarketroledistribution.UserxTable, asmarketroledistribution.UserxColumn),
		)
		fromU = sqlgraph.SetNeighbors(amrdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAgencyx chains the current query on the "agencyx" edge.
func (amrdq *AsMarketRoleDistributionQuery) QueryAgencyx() *AsInnerAgencyQuery {
	query := &AsInnerAgencyQuery{config: amrdq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := amrdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := amrdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketroledistribution.Table, asmarketroledistribution.FieldID, selector),
			sqlgraph.To(asinneragency.Table, asinneragency.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asmarketroledistribution.AgencyxTable, asmarketroledistribution.AgencyxColumn),
		)
		fromU = sqlgraph.SetNeighbors(amrdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryJobx chains the current query on the "jobx" edge.
func (amrdq *AsMarketRoleDistributionQuery) QueryJobx() *AsJobQuery {
	query := &AsJobQuery{config: amrdq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := amrdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := amrdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketroledistribution.Table, asmarketroledistribution.FieldID, selector),
			sqlgraph.To(asjob.Table, asjob.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asmarketroledistribution.JobxTable, asmarketroledistribution.JobxColumn),
		)
		fromU = sqlgraph.SetNeighbors(amrdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRolex chains the current query on the "rolex" edge.
func (amrdq *AsMarketRoleDistributionQuery) QueryRolex() *AsMarketAppRoleQuery {
	query := &AsMarketAppRoleQuery{config: amrdq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := amrdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := amrdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketroledistribution.Table, asmarketroledistribution.FieldID, selector),
			sqlgraph.To(asmarketapprole.Table, asmarketapprole.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asmarketroledistribution.RolexTable, asmarketroledistribution.RolexColumn),
		)
		fromU = sqlgraph.SetNeighbors(amrdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AsMarketRoleDistribution entity from the query.
// Returns a *NotFoundError when no AsMarketRoleDistribution was found.
func (amrdq *AsMarketRoleDistributionQuery) First(ctx context.Context) (*AsMarketRoleDistribution, error) {
	nodes, err := amrdq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{asmarketroledistribution.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (amrdq *AsMarketRoleDistributionQuery) FirstX(ctx context.Context) *AsMarketRoleDistribution {
	node, err := amrdq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AsMarketRoleDistribution ID from the query.
// Returns a *NotFoundError when no AsMarketRoleDistribution ID was found.
func (amrdq *AsMarketRoleDistributionQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = amrdq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{asmarketroledistribution.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (amrdq *AsMarketRoleDistributionQuery) FirstIDX(ctx context.Context) int64 {
	id, err := amrdq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AsMarketRoleDistribution entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AsMarketRoleDistribution entity is found.
// Returns a *NotFoundError when no AsMarketRoleDistribution entities are found.
func (amrdq *AsMarketRoleDistributionQuery) Only(ctx context.Context) (*AsMarketRoleDistribution, error) {
	nodes, err := amrdq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{asmarketroledistribution.Label}
	default:
		return nil, &NotSingularError{asmarketroledistribution.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (amrdq *AsMarketRoleDistributionQuery) OnlyX(ctx context.Context) *AsMarketRoleDistribution {
	node, err := amrdq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AsMarketRoleDistribution ID in the query.
// Returns a *NotSingularError when more than one AsMarketRoleDistribution ID is found.
// Returns a *NotFoundError when no entities are found.
func (amrdq *AsMarketRoleDistributionQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = amrdq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{asmarketroledistribution.Label}
	default:
		err = &NotSingularError{asmarketroledistribution.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (amrdq *AsMarketRoleDistributionQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := amrdq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AsMarketRoleDistributions.
func (amrdq *AsMarketRoleDistributionQuery) All(ctx context.Context) ([]*AsMarketRoleDistribution, error) {
	if err := amrdq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return amrdq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (amrdq *AsMarketRoleDistributionQuery) AllX(ctx context.Context) []*AsMarketRoleDistribution {
	nodes, err := amrdq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AsMarketRoleDistribution IDs.
func (amrdq *AsMarketRoleDistributionQuery) IDs(ctx context.Context) ([]int64, error) {
	var ids []int64
	if err := amrdq.Select(asmarketroledistribution.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (amrdq *AsMarketRoleDistributionQuery) IDsX(ctx context.Context) []int64 {
	ids, err := amrdq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (amrdq *AsMarketRoleDistributionQuery) Count(ctx context.Context) (int64, error) {
	if err := amrdq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return amrdq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (amrdq *AsMarketRoleDistributionQuery) CountX(ctx context.Context) int64 {
	count, err := amrdq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (amrdq *AsMarketRoleDistributionQuery) Exist(ctx context.Context) (bool, error) {
	if err := amrdq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return amrdq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (amrdq *AsMarketRoleDistributionQuery) ExistX(ctx context.Context) bool {
	exist, err := amrdq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AsMarketRoleDistributionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (amrdq *AsMarketRoleDistributionQuery) Clone() *AsMarketRoleDistributionQuery {
	if amrdq == nil {
		return nil
	}
	return &AsMarketRoleDistributionQuery{
		config:      amrdq.config,
		limit:       amrdq.limit,
		offset:      amrdq.offset,
		order:       append([]OrderFunc{}, amrdq.order...),
		predicates:  append([]predicate.AsMarketRoleDistribution{}, amrdq.predicates...),
		withUserx:   amrdq.withUserx.Clone(),
		withAgencyx: amrdq.withAgencyx.Clone(),
		withJobx:    amrdq.withJobx.Clone(),
		withRolex:   amrdq.withRolex.Clone(),
		// clone intermediate query.
		sql:    amrdq.sql.Clone(),
		path:   amrdq.path,
		unique: amrdq.unique,
	}
}

// WithUserx tells the query-builder to eager-load the nodes that are connected to
// the "userx" edge. The optional arguments are used to configure the query builder of the edge.
func (amrdq *AsMarketRoleDistributionQuery) WithUserx(opts ...func(*AsUserQuery)) *AsMarketRoleDistributionQuery {
	query := &AsUserQuery{config: amrdq.config}
	for _, opt := range opts {
		opt(query)
	}
	amrdq.withUserx = query
	return amrdq
}

// WithAgencyx tells the query-builder to eager-load the nodes that are connected to
// the "agencyx" edge. The optional arguments are used to configure the query builder of the edge.
func (amrdq *AsMarketRoleDistributionQuery) WithAgencyx(opts ...func(*AsInnerAgencyQuery)) *AsMarketRoleDistributionQuery {
	query := &AsInnerAgencyQuery{config: amrdq.config}
	for _, opt := range opts {
		opt(query)
	}
	amrdq.withAgencyx = query
	return amrdq
}

// WithJobx tells the query-builder to eager-load the nodes that are connected to
// the "jobx" edge. The optional arguments are used to configure the query builder of the edge.
func (amrdq *AsMarketRoleDistributionQuery) WithJobx(opts ...func(*AsJobQuery)) *AsMarketRoleDistributionQuery {
	query := &AsJobQuery{config: amrdq.config}
	for _, opt := range opts {
		opt(query)
	}
	amrdq.withJobx = query
	return amrdq
}

// WithRolex tells the query-builder to eager-load the nodes that are connected to
// the "rolex" edge. The optional arguments are used to configure the query builder of the edge.
func (amrdq *AsMarketRoleDistributionQuery) WithRolex(opts ...func(*AsMarketAppRoleQuery)) *AsMarketRoleDistributionQuery {
	query := &AsMarketAppRoleQuery{config: amrdq.config}
	for _, opt := range opts {
		opt(query)
	}
	amrdq.withRolex = query
	return amrdq
}

// ThenUserx tells the query-builder to eager-load the nodes that are connected to
// the "userx" edge. The optional arguments are used to configure the query builder of the edge.
func (amrdq *AsMarketRoleDistributionQuery) ThenUserx(opts ...func(*AsUserQuery)) *AsMarketRoleDistributionQuery {
	query := &AsUserQuery{config: amrdq.config}
	for _, opt := range opts {
		opt(query.Where(asuser.IsDeleted(0)))
	}
	amrdq.withUserx = query
	return amrdq
}

// ThenAgencyx tells the query-builder to eager-load the nodes that are connected to
// the "agencyx" edge. The optional arguments are used to configure the query builder of the edge.
func (amrdq *AsMarketRoleDistributionQuery) ThenAgencyx(opts ...func(*AsInnerAgencyQuery)) *AsMarketRoleDistributionQuery {
	query := &AsInnerAgencyQuery{config: amrdq.config}
	for _, opt := range opts {
		opt(query.Where(asinneragency.IsDeleted(0)))
	}
	amrdq.withAgencyx = query
	return amrdq
}

// ThenJobx tells the query-builder to eager-load the nodes that are connected to
// the "jobx" edge. The optional arguments are used to configure the query builder of the edge.
func (amrdq *AsMarketRoleDistributionQuery) ThenJobx(opts ...func(*AsJobQuery)) *AsMarketRoleDistributionQuery {
	query := &AsJobQuery{config: amrdq.config}
	for _, opt := range opts {
		opt(query.Where(asjob.IsDeleted(0)))
	}
	amrdq.withJobx = query
	return amrdq
}

// ThenRolex tells the query-builder to eager-load the nodes that are connected to
// the "rolex" edge. The optional arguments are used to configure the query builder of the edge.
func (amrdq *AsMarketRoleDistributionQuery) ThenRolex(opts ...func(*AsMarketAppRoleQuery)) *AsMarketRoleDistributionQuery {
	query := &AsMarketAppRoleQuery{config: amrdq.config}
	for _, opt := range opts {
		opt(query.Where(asmarketapprole.IsDeleted(0)))
	}
	amrdq.withRolex = query
	return amrdq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		RoleID int64 `json:"roleId"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AsMarketRoleDistribution.Query().
//		GroupBy(asmarketroledistribution.FieldRoleID).
//		Aggregate(schema.Count()).
//		Scan(ctx, &v)
//
func (amrdq *AsMarketRoleDistributionQuery) GroupBy(field string, fields ...string) *AsMarketRoleDistributionGroupBy {
	group := &AsMarketRoleDistributionGroupBy{config: amrdq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := amrdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return amrdq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		RoleID int64 `json:"roleId"`
//	}
//
//	client.AsMarketRoleDistribution.Query().
//		Select(asmarketroledistribution.FieldRoleID).
//		Scan(ctx, &v)
//
func (amrdq *AsMarketRoleDistributionQuery) Select(fields ...string) *AsMarketRoleDistributionSelect {
	amrdq.fields = append(amrdq.fields, fields...)
	return &AsMarketRoleDistributionSelect{AsMarketRoleDistributionQuery: amrdq}
}

func (amrdq *AsMarketRoleDistributionQuery) prepareQuery(ctx context.Context) error {
	for _, f := range amrdq.fields {
		if !asmarketroledistribution.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("schema: invalid field %q for query", f)}
		}
	}
	if amrdq.path != nil {
		prev, err := amrdq.path(ctx)
		if err != nil {
			return err
		}
		amrdq.sql = prev
	}
	return nil
}

func (amrdq *AsMarketRoleDistributionQuery) sqlAll(ctx context.Context) ([]*AsMarketRoleDistribution, error) {
	var (
		nodes       = []*AsMarketRoleDistribution{}
		_spec       = amrdq.querySpec()
		loadedTypes = [4]bool{
			amrdq.withUserx != nil,
			amrdq.withAgencyx != nil,
			amrdq.withJobx != nil,
			amrdq.withRolex != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &AsMarketRoleDistribution{config: amrdq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("schema: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, amrdq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := amrdq.withUserx; query != nil {
		ids := make([]int64, 0, len(nodes))
		nodeids := make(map[int64][]*AsMarketRoleDistribution)
		for i := range nodes {
			fk := nodes[i].UserID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(asuser.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Userx = n
			}
		}
	}

	if query := amrdq.withAgencyx; query != nil {
		ids := make([]int64, 0, len(nodes))
		nodeids := make(map[int64][]*AsMarketRoleDistribution)
		for i := range nodes {
			fk := nodes[i].AgencyID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(asinneragency.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "agency_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Agencyx = n
			}
		}
	}

	if query := amrdq.withJobx; query != nil {
		ids := make([]int64, 0, len(nodes))
		nodeids := make(map[int64][]*AsMarketRoleDistribution)
		for i := range nodes {
			fk := nodes[i].JobID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(asjob.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "job_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Jobx = n
			}
		}
	}

	if query := amrdq.withRolex; query != nil {
		ids := make([]int64, 0, len(nodes))
		nodeids := make(map[int64][]*AsMarketRoleDistribution)
		for i := range nodes {
			fk := nodes[i].RoleID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(asmarketapprole.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "role_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Rolex = n
			}
		}
	}

	return nodes, nil
}

func (amrdq *AsMarketRoleDistributionQuery) sqlCount(ctx context.Context) (int64, error) {
	_spec := amrdq.querySpec()
	_spec.Node.Columns = amrdq.fields
	if len(amrdq.fields) > 0 {
		_spec.Unique = amrdq.unique != nil && *amrdq.unique
	}
	c, err := sqlgraph.CountNodes(ctx, amrdq.driver, _spec)
	return int64(c), err
}

func (amrdq *AsMarketRoleDistributionQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := amrdq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("schema: check existence: %w", err)
	}
	return n > 0, nil
}

func (amrdq *AsMarketRoleDistributionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asmarketroledistribution.Table,
			Columns: asmarketroledistribution.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asmarketroledistribution.FieldID,
			},
		},
		From:   amrdq.sql,
		Unique: true,
	}
	if unique := amrdq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := amrdq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asmarketroledistribution.FieldID)
		for i := range fields {
			if fields[i] != asmarketroledistribution.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := amrdq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := amrdq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := amrdq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := amrdq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (amrdq *AsMarketRoleDistributionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(amrdq.driver.Dialect())
	t1 := builder.Table(asmarketroledistribution.Table)
	columns := amrdq.fields
	if len(columns) == 0 {
		columns = asmarketroledistribution.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if amrdq.sql != nil {
		selector = amrdq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if amrdq.unique != nil && *amrdq.unique {
		selector.Distinct()
	}
	for _, p := range amrdq.predicates {
		p(selector)
	}
	for _, p := range amrdq.order {
		p(selector)
	}
	if offset := amrdq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := amrdq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AsMarketRoleDistributionGroupBy is the group-by builder for AsMarketRoleDistribution entities.
type AsMarketRoleDistributionGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (amrdgb *AsMarketRoleDistributionGroupBy) Aggregate(fns ...AggregateFunc) *AsMarketRoleDistributionGroupBy {
	amrdgb.fns = append(amrdgb.fns, fns...)
	return amrdgb
}

// Scan applies the group-by query and scans the result into the given value.
func (amrdgb *AsMarketRoleDistributionGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := amrdgb.path(ctx)
	if err != nil {
		return err
	}
	amrdgb.sql = query
	return amrdgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (amrdgb *AsMarketRoleDistributionGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := amrdgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (amrdgb *AsMarketRoleDistributionGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(amrdgb.fields) > 1 {
		return nil, errors.New("schema: AsMarketRoleDistributionGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := amrdgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (amrdgb *AsMarketRoleDistributionGroupBy) StringsX(ctx context.Context) []string {
	v, err := amrdgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (amrdgb *AsMarketRoleDistributionGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = amrdgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketroledistribution.Label}
	default:
		err = fmt.Errorf("schema: AsMarketRoleDistributionGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (amrdgb *AsMarketRoleDistributionGroupBy) StringX(ctx context.Context) string {
	v, err := amrdgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (amrdgb *AsMarketRoleDistributionGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(amrdgb.fields) > 1 {
		return nil, errors.New("schema: AsMarketRoleDistributionGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := amrdgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (amrdgb *AsMarketRoleDistributionGroupBy) IntsX(ctx context.Context) []int {
	v, err := amrdgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (amrdgb *AsMarketRoleDistributionGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = amrdgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketroledistribution.Label}
	default:
		err = fmt.Errorf("schema: AsMarketRoleDistributionGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (amrdgb *AsMarketRoleDistributionGroupBy) IntX(ctx context.Context) int {
	v, err := amrdgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (amrdgb *AsMarketRoleDistributionGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(amrdgb.fields) > 1 {
		return nil, errors.New("schema: AsMarketRoleDistributionGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := amrdgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (amrdgb *AsMarketRoleDistributionGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := amrdgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (amrdgb *AsMarketRoleDistributionGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = amrdgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketroledistribution.Label}
	default:
		err = fmt.Errorf("schema: AsMarketRoleDistributionGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (amrdgb *AsMarketRoleDistributionGroupBy) Float64X(ctx context.Context) float64 {
	v, err := amrdgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (amrdgb *AsMarketRoleDistributionGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(amrdgb.fields) > 1 {
		return nil, errors.New("schema: AsMarketRoleDistributionGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := amrdgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (amrdgb *AsMarketRoleDistributionGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := amrdgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (amrdgb *AsMarketRoleDistributionGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = amrdgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketroledistribution.Label}
	default:
		err = fmt.Errorf("schema: AsMarketRoleDistributionGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (amrdgb *AsMarketRoleDistributionGroupBy) BoolX(ctx context.Context) bool {
	v, err := amrdgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64s returns list of int64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (amrdgb *AsMarketRoleDistributionGroupBy) Int64s(ctx context.Context) ([]int64, error) {
	if len(amrdgb.fields) > 1 {
		return nil, errors.New("schema: AsMarketRoleDistributionGroupBy.Int64s is not achievable when grouping more than 1 field")
	}
	var v []int64
	if err := amrdgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Int64sX is like Int64s, but panics if an error occurs.
func (amrdgb *AsMarketRoleDistributionGroupBy) Int64sX(ctx context.Context) []int64 {
	v, err := amrdgb.Int64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64 returns a single int64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (amrdgb *AsMarketRoleDistributionGroupBy) Int64(ctx context.Context) (_ int64, err error) {
	var v []int64
	if v, err = amrdgb.Int64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketroledistribution.Label}
	default:
		err = fmt.Errorf("schema: AsMarketRoleDistributionGroupBy.Int64s returned %d results when one was expected", len(v))
	}
	return
}

// Int64X is like Int64, but panics if an error occurs.
func (amrdgb *AsMarketRoleDistributionGroupBy) Int64X(ctx context.Context) int64 {
	v, err := amrdgb.Int64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (amrdgb *AsMarketRoleDistributionGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range amrdgb.fields {
		if !asmarketroledistribution.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := amrdgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := amrdgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (amrdgb *AsMarketRoleDistributionGroupBy) sqlQuery() *sql.Selector {
	selector := amrdgb.sql.Select()
	aggregation := make([]string, 0, len(amrdgb.fns))
	for _, fn := range amrdgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(amrdgb.fields)+len(amrdgb.fns))
		for _, f := range amrdgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(amrdgb.fields...)...)
}

// AsMarketRoleDistributionSelect is the builder for selecting fields of AsMarketRoleDistribution entities.
type AsMarketRoleDistributionSelect struct {
	*AsMarketRoleDistributionQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (amrds *AsMarketRoleDistributionSelect) Scan(ctx context.Context, v interface{}) error {
	if err := amrds.prepareQuery(ctx); err != nil {
		return err
	}
	amrds.sql = amrds.AsMarketRoleDistributionQuery.sqlQuery(ctx)
	return amrds.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (amrds *AsMarketRoleDistributionSelect) ScanX(ctx context.Context, v interface{}) {
	if err := amrds.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (amrds *AsMarketRoleDistributionSelect) Strings(ctx context.Context) ([]string, error) {
	if len(amrds.fields) > 1 {
		return nil, errors.New("schema: AsMarketRoleDistributionSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := amrds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (amrds *AsMarketRoleDistributionSelect) StringsX(ctx context.Context) []string {
	v, err := amrds.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (amrds *AsMarketRoleDistributionSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = amrds.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketroledistribution.Label}
	default:
		err = fmt.Errorf("schema: AsMarketRoleDistributionSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (amrds *AsMarketRoleDistributionSelect) StringX(ctx context.Context) string {
	v, err := amrds.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (amrds *AsMarketRoleDistributionSelect) Ints(ctx context.Context) ([]int, error) {
	if len(amrds.fields) > 1 {
		return nil, errors.New("schema: AsMarketRoleDistributionSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := amrds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (amrds *AsMarketRoleDistributionSelect) IntsX(ctx context.Context) []int {
	v, err := amrds.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (amrds *AsMarketRoleDistributionSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = amrds.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketroledistribution.Label}
	default:
		err = fmt.Errorf("schema: AsMarketRoleDistributionSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (amrds *AsMarketRoleDistributionSelect) IntX(ctx context.Context) int {
	v, err := amrds.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (amrds *AsMarketRoleDistributionSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(amrds.fields) > 1 {
		return nil, errors.New("schema: AsMarketRoleDistributionSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := amrds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (amrds *AsMarketRoleDistributionSelect) Float64sX(ctx context.Context) []float64 {
	v, err := amrds.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (amrds *AsMarketRoleDistributionSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = amrds.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketroledistribution.Label}
	default:
		err = fmt.Errorf("schema: AsMarketRoleDistributionSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (amrds *AsMarketRoleDistributionSelect) Float64X(ctx context.Context) float64 {
	v, err := amrds.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (amrds *AsMarketRoleDistributionSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(amrds.fields) > 1 {
		return nil, errors.New("schema: AsMarketRoleDistributionSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := amrds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (amrds *AsMarketRoleDistributionSelect) BoolsX(ctx context.Context) []bool {
	v, err := amrds.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (amrds *AsMarketRoleDistributionSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = amrds.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketroledistribution.Label}
	default:
		err = fmt.Errorf("schema: AsMarketRoleDistributionSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (amrds *AsMarketRoleDistributionSelect) BoolX(ctx context.Context) bool {
	v, err := amrds.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64s returns list of int64s from a selector. It is only allowed when selecting one field.
func (amrds *AsMarketRoleDistributionSelect) Int64s(ctx context.Context) ([]int64, error) {
	if len(amrds.fields) > 1 {
		return nil, errors.New("schema: AsMarketRoleDistributionSelect.Int64s is not achievable when selecting more than 1 field")
	}
	var v []int64
	if err := amrds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Int64sX is like Int64s, but panics if an error occurs.
func (amrds *AsMarketRoleDistributionSelect) Int64sX(ctx context.Context) []int64 {
	v, err := amrds.Int64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64 returns a single int64 from a selector. It is only allowed when selecting one field.
func (amrds *AsMarketRoleDistributionSelect) Int64(ctx context.Context) (_ int64, err error) {
	var v []int64
	if v, err = amrds.Int64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketroledistribution.Label}
	default:
		err = fmt.Errorf("schema: AsMarketRoleDistributionSelect.Int64s returned %d results when one was expected", len(v))
	}
	return
}

// Int64X is like Int64, but panics if an error occurs.
func (amrds *AsMarketRoleDistributionSelect) Int64X(ctx context.Context) int64 {
	v, err := amrds.Int64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (amrds *AsMarketRoleDistributionSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := amrds.sql.Query()
	if err := amrds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
