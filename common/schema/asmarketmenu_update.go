// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/asmarketapp"
	"orginone/common/schema/asmarketapprole"
	"orginone/common/schema/asmarketmenu"
	"orginone/common/schema/asmarketmenuusersort"
	"orginone/common/schema/asmarketrolemenu"
	"orginone/common/schema/predicate"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsMarketMenuUpdate is the builder for updating AsMarketMenu entities.
type AsMarketMenuUpdate struct {
	config
	hooks    []Hook
	mutation *AsMarketMenuMutation
}

// Where appends a list predicates to the AsMarketMenuUpdate builder.
func (ammu *AsMarketMenuUpdate) Where(ps ...predicate.AsMarketMenu) *AsMarketMenuUpdate {
	ammu.mutation.Where(ps...)
	return ammu
}

// SetAppID sets the "app_id" field.
func (ammu *AsMarketMenuUpdate) SetAppID(i int64) *AsMarketMenuUpdate {
	ammu.mutation.SetAppID(i)
	return ammu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (ammu *AsMarketMenuUpdate) SetNillableAppID(i *int64) *AsMarketMenuUpdate {
	if i != nil {
		ammu.SetAppID(*i)
	}
	return ammu
}

// ClearAppID clears the value of the "app_id" field.
func (ammu *AsMarketMenuUpdate) ClearAppID() *AsMarketMenuUpdate {
	ammu.mutation.ClearAppID()
	return ammu
}

// SetParentID sets the "parent_id" field.
func (ammu *AsMarketMenuUpdate) SetParentID(i int64) *AsMarketMenuUpdate {
	ammu.mutation.SetParentID(i)
	return ammu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (ammu *AsMarketMenuUpdate) SetNillableParentID(i *int64) *AsMarketMenuUpdate {
	if i != nil {
		ammu.SetParentID(*i)
	}
	return ammu
}

// ClearParentID clears the value of the "parent_id" field.
func (ammu *AsMarketMenuUpdate) ClearParentID() *AsMarketMenuUpdate {
	ammu.mutation.ClearParentID()
	return ammu
}

// SetMenuName sets the "menu_name" field.
func (ammu *AsMarketMenuUpdate) SetMenuName(s string) *AsMarketMenuUpdate {
	ammu.mutation.SetMenuName(s)
	return ammu
}

// SetNillableMenuName sets the "menu_name" field if the given value is not nil.
func (ammu *AsMarketMenuUpdate) SetNillableMenuName(s *string) *AsMarketMenuUpdate {
	if s != nil {
		ammu.SetMenuName(*s)
	}
	return ammu
}

// ClearMenuName clears the value of the "menu_name" field.
func (ammu *AsMarketMenuUpdate) ClearMenuName() *AsMarketMenuUpdate {
	ammu.mutation.ClearMenuName()
	return ammu
}

// SetMenuURL sets the "menu_url" field.
func (ammu *AsMarketMenuUpdate) SetMenuURL(s string) *AsMarketMenuUpdate {
	ammu.mutation.SetMenuURL(s)
	return ammu
}

// SetNillableMenuURL sets the "menu_url" field if the given value is not nil.
func (ammu *AsMarketMenuUpdate) SetNillableMenuURL(s *string) *AsMarketMenuUpdate {
	if s != nil {
		ammu.SetMenuURL(*s)
	}
	return ammu
}

// ClearMenuURL clears the value of the "menu_url" field.
func (ammu *AsMarketMenuUpdate) ClearMenuURL() *AsMarketMenuUpdate {
	ammu.mutation.ClearMenuURL()
	return ammu
}

// SetMenuColumn sets the "menu_column" field.
func (ammu *AsMarketMenuUpdate) SetMenuColumn(s string) *AsMarketMenuUpdate {
	ammu.mutation.SetMenuColumn(s)
	return ammu
}

// SetNillableMenuColumn sets the "menu_column" field if the given value is not nil.
func (ammu *AsMarketMenuUpdate) SetNillableMenuColumn(s *string) *AsMarketMenuUpdate {
	if s != nil {
		ammu.SetMenuColumn(*s)
	}
	return ammu
}

// ClearMenuColumn clears the value of the "menu_column" field.
func (ammu *AsMarketMenuUpdate) ClearMenuColumn() *AsMarketMenuUpdate {
	ammu.mutation.ClearMenuColumn()
	return ammu
}

// SetIcon sets the "icon" field.
func (ammu *AsMarketMenuUpdate) SetIcon(s string) *AsMarketMenuUpdate {
	ammu.mutation.SetIcon(s)
	return ammu
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (ammu *AsMarketMenuUpdate) SetNillableIcon(s *string) *AsMarketMenuUpdate {
	if s != nil {
		ammu.SetIcon(*s)
	}
	return ammu
}

// ClearIcon clears the value of the "icon" field.
func (ammu *AsMarketMenuUpdate) ClearIcon() *AsMarketMenuUpdate {
	ammu.mutation.ClearIcon()
	return ammu
}

// SetSort sets the "sort" field.
func (ammu *AsMarketMenuUpdate) SetSort(i int64) *AsMarketMenuUpdate {
	ammu.mutation.ResetSort()
	ammu.mutation.SetSort(i)
	return ammu
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (ammu *AsMarketMenuUpdate) SetNillableSort(i *int64) *AsMarketMenuUpdate {
	if i != nil {
		ammu.SetSort(*i)
	}
	return ammu
}

// AddSort adds i to the "sort" field.
func (ammu *AsMarketMenuUpdate) AddSort(i int64) *AsMarketMenuUpdate {
	ammu.mutation.AddSort(i)
	return ammu
}

// ClearSort clears the value of the "sort" field.
func (ammu *AsMarketMenuUpdate) ClearSort() *AsMarketMenuUpdate {
	ammu.mutation.ClearSort()
	return ammu
}

// SetHTTPSMenuURL sets the "https_menu_url" field.
func (ammu *AsMarketMenuUpdate) SetHTTPSMenuURL(s string) *AsMarketMenuUpdate {
	ammu.mutation.SetHTTPSMenuURL(s)
	return ammu
}

// SetNillableHTTPSMenuURL sets the "https_menu_url" field if the given value is not nil.
func (ammu *AsMarketMenuUpdate) SetNillableHTTPSMenuURL(s *string) *AsMarketMenuUpdate {
	if s != nil {
		ammu.SetHTTPSMenuURL(*s)
	}
	return ammu
}

// ClearHTTPSMenuURL clears the value of the "https_menu_url" field.
func (ammu *AsMarketMenuUpdate) ClearHTTPSMenuURL() *AsMarketMenuUpdate {
	ammu.mutation.ClearHTTPSMenuURL()
	return ammu
}

// SetReformStatus sets the "reform_status" field.
func (ammu *AsMarketMenuUpdate) SetReformStatus(i int64) *AsMarketMenuUpdate {
	ammu.mutation.ResetReformStatus()
	ammu.mutation.SetReformStatus(i)
	return ammu
}

// SetNillableReformStatus sets the "reform_status" field if the given value is not nil.
func (ammu *AsMarketMenuUpdate) SetNillableReformStatus(i *int64) *AsMarketMenuUpdate {
	if i != nil {
		ammu.SetReformStatus(*i)
	}
	return ammu
}

// AddReformStatus adds i to the "reform_status" field.
func (ammu *AsMarketMenuUpdate) AddReformStatus(i int64) *AsMarketMenuUpdate {
	ammu.mutation.AddReformStatus(i)
	return ammu
}

// SetOutIPMenuURL sets the "out_ip_menu_url" field.
func (ammu *AsMarketMenuUpdate) SetOutIPMenuURL(s string) *AsMarketMenuUpdate {
	ammu.mutation.SetOutIPMenuURL(s)
	return ammu
}

// SetNillableOutIPMenuURL sets the "out_ip_menu_url" field if the given value is not nil.
func (ammu *AsMarketMenuUpdate) SetNillableOutIPMenuURL(s *string) *AsMarketMenuUpdate {
	if s != nil {
		ammu.SetOutIPMenuURL(*s)
	}
	return ammu
}

// ClearOutIPMenuURL clears the value of the "out_ip_menu_url" field.
func (ammu *AsMarketMenuUpdate) ClearOutIPMenuURL() *AsMarketMenuUpdate {
	ammu.mutation.ClearOutIPMenuURL()
	return ammu
}

// SetIsDeleted sets the "is_deleted" field.
func (ammu *AsMarketMenuUpdate) SetIsDeleted(i int64) *AsMarketMenuUpdate {
	ammu.mutation.ResetIsDeleted()
	ammu.mutation.SetIsDeleted(i)
	return ammu
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (ammu *AsMarketMenuUpdate) SetNillableIsDeleted(i *int64) *AsMarketMenuUpdate {
	if i != nil {
		ammu.SetIsDeleted(*i)
	}
	return ammu
}

// AddIsDeleted adds i to the "is_deleted" field.
func (ammu *AsMarketMenuUpdate) AddIsDeleted(i int64) *AsMarketMenuUpdate {
	ammu.mutation.AddIsDeleted(i)
	return ammu
}

// SetStatus sets the "status" field.
func (ammu *AsMarketMenuUpdate) SetStatus(i int64) *AsMarketMenuUpdate {
	ammu.mutation.ResetStatus()
	ammu.mutation.SetStatus(i)
	return ammu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ammu *AsMarketMenuUpdate) SetNillableStatus(i *int64) *AsMarketMenuUpdate {
	if i != nil {
		ammu.SetStatus(*i)
	}
	return ammu
}

// AddStatus adds i to the "status" field.
func (ammu *AsMarketMenuUpdate) AddStatus(i int64) *AsMarketMenuUpdate {
	ammu.mutation.AddStatus(i)
	return ammu
}

// ClearStatus clears the value of the "status" field.
func (ammu *AsMarketMenuUpdate) ClearStatus() *AsMarketMenuUpdate {
	ammu.mutation.ClearStatus()
	return ammu
}

// SetCreateUser sets the "create_user" field.
func (ammu *AsMarketMenuUpdate) SetCreateUser(i int64) *AsMarketMenuUpdate {
	ammu.mutation.ResetCreateUser()
	ammu.mutation.SetCreateUser(i)
	return ammu
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (ammu *AsMarketMenuUpdate) SetNillableCreateUser(i *int64) *AsMarketMenuUpdate {
	if i != nil {
		ammu.SetCreateUser(*i)
	}
	return ammu
}

// AddCreateUser adds i to the "create_user" field.
func (ammu *AsMarketMenuUpdate) AddCreateUser(i int64) *AsMarketMenuUpdate {
	ammu.mutation.AddCreateUser(i)
	return ammu
}

// ClearCreateUser clears the value of the "create_user" field.
func (ammu *AsMarketMenuUpdate) ClearCreateUser() *AsMarketMenuUpdate {
	ammu.mutation.ClearCreateUser()
	return ammu
}

// SetUpdateUser sets the "update_user" field.
func (ammu *AsMarketMenuUpdate) SetUpdateUser(i int64) *AsMarketMenuUpdate {
	ammu.mutation.ResetUpdateUser()
	ammu.mutation.SetUpdateUser(i)
	return ammu
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (ammu *AsMarketMenuUpdate) SetNillableUpdateUser(i *int64) *AsMarketMenuUpdate {
	if i != nil {
		ammu.SetUpdateUser(*i)
	}
	return ammu
}

// AddUpdateUser adds i to the "update_user" field.
func (ammu *AsMarketMenuUpdate) AddUpdateUser(i int64) *AsMarketMenuUpdate {
	ammu.mutation.AddUpdateUser(i)
	return ammu
}

// ClearUpdateUser clears the value of the "update_user" field.
func (ammu *AsMarketMenuUpdate) ClearUpdateUser() *AsMarketMenuUpdate {
	ammu.mutation.ClearUpdateUser()
	return ammu
}

// SetUpdateTime sets the "update_time" field.
func (ammu *AsMarketMenuUpdate) SetUpdateTime(dt date.DateTime) *AsMarketMenuUpdate {
	ammu.mutation.SetUpdateTime(dt)
	return ammu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (ammu *AsMarketMenuUpdate) ClearUpdateTime() *AsMarketMenuUpdate {
	ammu.mutation.ClearUpdateTime()
	return ammu
}

// SetParent sets the "parent" edge to the AsMarketMenu entity.
func (ammu *AsMarketMenuUpdate) SetParent(a *AsMarketMenu) *AsMarketMenuUpdate {
	return ammu.SetParentID(a.ID)
}

// AddChildrenIDs adds the "childrens" edge to the AsMarketMenu entity by IDs.
func (ammu *AsMarketMenuUpdate) AddChildrenIDs(ids ...int64) *AsMarketMenuUpdate {
	ammu.mutation.AddChildrenIDs(ids...)
	return ammu
}

// AddChildrens adds the "childrens" edges to the AsMarketMenu entity.
func (ammu *AsMarketMenuUpdate) AddChildrens(a ...*AsMarketMenu) *AsMarketMenuUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ammu.AddChildrenIDs(ids...)
}

// SetAppxID sets the "appx" edge to the AsMarketApp entity by ID.
func (ammu *AsMarketMenuUpdate) SetAppxID(id int64) *AsMarketMenuUpdate {
	ammu.mutation.SetAppxID(id)
	return ammu
}

// SetNillableAppxID sets the "appx" edge to the AsMarketApp entity by ID if the given value is not nil.
func (ammu *AsMarketMenuUpdate) SetNillableAppxID(id *int64) *AsMarketMenuUpdate {
	if id != nil {
		ammu = ammu.SetAppxID(*id)
	}
	return ammu
}

// SetAppx sets the "appx" edge to the AsMarketApp entity.
func (ammu *AsMarketMenuUpdate) SetAppx(a *AsMarketApp) *AsMarketMenuUpdate {
	return ammu.SetAppxID(a.ID)
}

// AddRoleMenuIDs adds the "roleMenus" edge to the AsMarketRoleMenu entity by IDs.
func (ammu *AsMarketMenuUpdate) AddRoleMenuIDs(ids ...int64) *AsMarketMenuUpdate {
	ammu.mutation.AddRoleMenuIDs(ids...)
	return ammu
}

// AddRoleMenus adds the "roleMenus" edges to the AsMarketRoleMenu entity.
func (ammu *AsMarketMenuUpdate) AddRoleMenus(a ...*AsMarketRoleMenu) *AsMarketMenuUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ammu.AddRoleMenuIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the AsMarketAppRole entity by IDs.
func (ammu *AsMarketMenuUpdate) AddRoleIDs(ids ...int64) *AsMarketMenuUpdate {
	ammu.mutation.AddRoleIDs(ids...)
	return ammu
}

// AddRoles adds the "roles" edges to the AsMarketAppRole entity.
func (ammu *AsMarketMenuUpdate) AddRoles(a ...*AsMarketAppRole) *AsMarketMenuUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ammu.AddRoleIDs(ids...)
}

// AddUserSortIDs adds the "UserSorts" edge to the AsMarketMenuUserSort entity by IDs.
func (ammu *AsMarketMenuUpdate) AddUserSortIDs(ids ...int64) *AsMarketMenuUpdate {
	ammu.mutation.AddUserSortIDs(ids...)
	return ammu
}

// AddUserSorts adds the "UserSorts" edges to the AsMarketMenuUserSort entity.
func (ammu *AsMarketMenuUpdate) AddUserSorts(a ...*AsMarketMenuUserSort) *AsMarketMenuUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ammu.AddUserSortIDs(ids...)
}

// Mutation returns the AsMarketMenuMutation object of the builder.
func (ammu *AsMarketMenuUpdate) Mutation() *AsMarketMenuMutation {
	return ammu.mutation
}

// ClearParent clears the "parent" edge to the AsMarketMenu entity.
func (ammu *AsMarketMenuUpdate) ClearParent() *AsMarketMenuUpdate {
	ammu.mutation.ClearParent()
	return ammu
}

// ClearChildrens clears all "childrens" edges to the AsMarketMenu entity.
func (ammu *AsMarketMenuUpdate) ClearChildrens() *AsMarketMenuUpdate {
	ammu.mutation.ClearChildrens()
	return ammu
}

// RemoveChildrenIDs removes the "childrens" edge to AsMarketMenu entities by IDs.
func (ammu *AsMarketMenuUpdate) RemoveChildrenIDs(ids ...int64) *AsMarketMenuUpdate {
	ammu.mutation.RemoveChildrenIDs(ids...)
	return ammu
}

// RemoveChildrens removes "childrens" edges to AsMarketMenu entities.
func (ammu *AsMarketMenuUpdate) RemoveChildrens(a ...*AsMarketMenu) *AsMarketMenuUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ammu.RemoveChildrenIDs(ids...)
}

// ClearAppx clears the "appx" edge to the AsMarketApp entity.
func (ammu *AsMarketMenuUpdate) ClearAppx() *AsMarketMenuUpdate {
	ammu.mutation.ClearAppx()
	return ammu
}

// ClearRoleMenus clears all "roleMenus" edges to the AsMarketRoleMenu entity.
func (ammu *AsMarketMenuUpdate) ClearRoleMenus() *AsMarketMenuUpdate {
	ammu.mutation.ClearRoleMenus()
	return ammu
}

// RemoveRoleMenuIDs removes the "roleMenus" edge to AsMarketRoleMenu entities by IDs.
func (ammu *AsMarketMenuUpdate) RemoveRoleMenuIDs(ids ...int64) *AsMarketMenuUpdate {
	ammu.mutation.RemoveRoleMenuIDs(ids...)
	return ammu
}

// RemoveRoleMenus removes "roleMenus" edges to AsMarketRoleMenu entities.
func (ammu *AsMarketMenuUpdate) RemoveRoleMenus(a ...*AsMarketRoleMenu) *AsMarketMenuUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ammu.RemoveRoleMenuIDs(ids...)
}

// ClearRoles clears all "roles" edges to the AsMarketAppRole entity.
func (ammu *AsMarketMenuUpdate) ClearRoles() *AsMarketMenuUpdate {
	ammu.mutation.ClearRoles()
	return ammu
}

// RemoveRoleIDs removes the "roles" edge to AsMarketAppRole entities by IDs.
func (ammu *AsMarketMenuUpdate) RemoveRoleIDs(ids ...int64) *AsMarketMenuUpdate {
	ammu.mutation.RemoveRoleIDs(ids...)
	return ammu
}

// RemoveRoles removes "roles" edges to AsMarketAppRole entities.
func (ammu *AsMarketMenuUpdate) RemoveRoles(a ...*AsMarketAppRole) *AsMarketMenuUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ammu.RemoveRoleIDs(ids...)
}

// ClearUserSorts clears all "UserSorts" edges to the AsMarketMenuUserSort entity.
func (ammu *AsMarketMenuUpdate) ClearUserSorts() *AsMarketMenuUpdate {
	ammu.mutation.ClearUserSorts()
	return ammu
}

// RemoveUserSortIDs removes the "UserSorts" edge to AsMarketMenuUserSort entities by IDs.
func (ammu *AsMarketMenuUpdate) RemoveUserSortIDs(ids ...int64) *AsMarketMenuUpdate {
	ammu.mutation.RemoveUserSortIDs(ids...)
	return ammu
}

// RemoveUserSorts removes "UserSorts" edges to AsMarketMenuUserSort entities.
func (ammu *AsMarketMenuUpdate) RemoveUserSorts(a ...*AsMarketMenuUserSort) *AsMarketMenuUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ammu.RemoveUserSortIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ammu *AsMarketMenuUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ammu.defaults()
	if len(ammu.hooks) == 0 {
		affected, err = ammu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsMarketMenuMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ammu.mutation = mutation
			affected, err = ammu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ammu.hooks) - 1; i >= 0; i-- {
			if ammu.hooks[i] == nil {
				return 0, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = ammu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ammu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ammu *AsMarketMenuUpdate) SaveX(ctx context.Context) int {
	affected, err := ammu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ammu *AsMarketMenuUpdate) Exec(ctx context.Context) error {
	_, err := ammu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ammu *AsMarketMenuUpdate) ExecX(ctx context.Context) {
	if err := ammu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ammu *AsMarketMenuUpdate) defaults() {
	if _, ok := ammu.mutation.UpdateTime(); !ok && !ammu.mutation.UpdateTimeCleared() {
		v := asmarketmenu.UpdateDefaultUpdateTime()
		ammu.mutation.SetUpdateTime(v)
	}
}

func (ammu *AsMarketMenuUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asmarketmenu.Table,
			Columns: asmarketmenu.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asmarketmenu.FieldID,
			},
		},
	}
	if ps := ammu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ammu.mutation.MenuName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketmenu.FieldMenuName,
		})
	}
	if ammu.mutation.MenuNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketmenu.FieldMenuName,
		})
	}
	if value, ok := ammu.mutation.MenuURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketmenu.FieldMenuURL,
		})
	}
	if ammu.mutation.MenuURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketmenu.FieldMenuURL,
		})
	}
	if value, ok := ammu.mutation.MenuColumn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketmenu.FieldMenuColumn,
		})
	}
	if ammu.mutation.MenuColumnCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketmenu.FieldMenuColumn,
		})
	}
	if value, ok := ammu.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketmenu.FieldIcon,
		})
	}
	if ammu.mutation.IconCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketmenu.FieldIcon,
		})
	}
	if value, ok := ammu.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketmenu.FieldSort,
		})
	}
	if value, ok := ammu.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketmenu.FieldSort,
		})
	}
	if ammu.mutation.SortCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketmenu.FieldSort,
		})
	}
	if value, ok := ammu.mutation.HTTPSMenuURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketmenu.FieldHTTPSMenuURL,
		})
	}
	if ammu.mutation.HTTPSMenuURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketmenu.FieldHTTPSMenuURL,
		})
	}
	if value, ok := ammu.mutation.ReformStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketmenu.FieldReformStatus,
		})
	}
	if value, ok := ammu.mutation.AddedReformStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketmenu.FieldReformStatus,
		})
	}
	if value, ok := ammu.mutation.OutIPMenuURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketmenu.FieldOutIPMenuURL,
		})
	}
	if ammu.mutation.OutIPMenuURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketmenu.FieldOutIPMenuURL,
		})
	}
	if value, ok := ammu.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketmenu.FieldIsDeleted,
		})
	}
	if value, ok := ammu.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketmenu.FieldIsDeleted,
		})
	}
	if value, ok := ammu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketmenu.FieldStatus,
		})
	}
	if value, ok := ammu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketmenu.FieldStatus,
		})
	}
	if ammu.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketmenu.FieldStatus,
		})
	}
	if value, ok := ammu.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketmenu.FieldCreateUser,
		})
	}
	if value, ok := ammu.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketmenu.FieldCreateUser,
		})
	}
	if ammu.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketmenu.FieldCreateUser,
		})
	}
	if value, ok := ammu.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketmenu.FieldUpdateUser,
		})
	}
	if value, ok := ammu.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketmenu.FieldUpdateUser,
		})
	}
	if ammu.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketmenu.FieldUpdateUser,
		})
	}
	if ammu.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketmenu.FieldCreateTime,
		})
	}
	if value, ok := ammu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketmenu.FieldUpdateTime,
		})
	}
	if ammu.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketmenu.FieldUpdateTime,
		})
	}
	if ammu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketmenu.ParentTable,
			Columns: []string{asmarketmenu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketmenu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ammu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketmenu.ParentTable,
			Columns: []string{asmarketmenu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ammu.mutation.ChildrensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketmenu.ChildrensTable,
			Columns: []string{asmarketmenu.ChildrensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketmenu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ammu.mutation.RemovedChildrensIDs(); len(nodes) > 0 && !ammu.mutation.ChildrensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketmenu.ChildrensTable,
			Columns: []string{asmarketmenu.ChildrensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ammu.mutation.ChildrensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketmenu.ChildrensTable,
			Columns: []string{asmarketmenu.ChildrensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ammu.mutation.AppxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketmenu.AppxTable,
			Columns: []string{asmarketmenu.AppxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapp.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ammu.mutation.AppxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketmenu.AppxTable,
			Columns: []string{asmarketmenu.AppxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapp.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ammu.mutation.RoleMenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketmenu.RoleMenusTable,
			Columns: []string{asmarketmenu.RoleMenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketrolemenu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ammu.mutation.RemovedRoleMenusIDs(); len(nodes) > 0 && !ammu.mutation.RoleMenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketmenu.RoleMenusTable,
			Columns: []string{asmarketmenu.RoleMenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketrolemenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ammu.mutation.RoleMenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketmenu.RoleMenusTable,
			Columns: []string{asmarketmenu.RoleMenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketrolemenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ammu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asmarketmenu.RolesTable,
			Columns: asmarketmenu.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapprole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ammu.mutation.RemovedRolesIDs(); len(nodes) > 0 && !ammu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asmarketmenu.RolesTable,
			Columns: asmarketmenu.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapprole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ammu.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asmarketmenu.RolesTable,
			Columns: asmarketmenu.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapprole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ammu.mutation.UserSortsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketmenu.UserSortsTable,
			Columns: []string{asmarketmenu.UserSortsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketmenuusersort.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ammu.mutation.RemovedUserSortsIDs(); len(nodes) > 0 && !ammu.mutation.UserSortsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketmenu.UserSortsTable,
			Columns: []string{asmarketmenu.UserSortsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketmenuusersort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ammu.mutation.UserSortsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketmenu.UserSortsTable,
			Columns: []string{asmarketmenu.UserSortsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketmenuusersort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ammu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asmarketmenu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AsMarketMenuUpdateOne is the builder for updating a single AsMarketMenu entity.
type AsMarketMenuUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AsMarketMenuMutation
}

// SetAppID sets the "app_id" field.
func (ammuo *AsMarketMenuUpdateOne) SetAppID(i int64) *AsMarketMenuUpdateOne {
	ammuo.mutation.SetAppID(i)
	return ammuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (ammuo *AsMarketMenuUpdateOne) SetNillableAppID(i *int64) *AsMarketMenuUpdateOne {
	if i != nil {
		ammuo.SetAppID(*i)
	}
	return ammuo
}

// ClearAppID clears the value of the "app_id" field.
func (ammuo *AsMarketMenuUpdateOne) ClearAppID() *AsMarketMenuUpdateOne {
	ammuo.mutation.ClearAppID()
	return ammuo
}

// SetParentID sets the "parent_id" field.
func (ammuo *AsMarketMenuUpdateOne) SetParentID(i int64) *AsMarketMenuUpdateOne {
	ammuo.mutation.SetParentID(i)
	return ammuo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (ammuo *AsMarketMenuUpdateOne) SetNillableParentID(i *int64) *AsMarketMenuUpdateOne {
	if i != nil {
		ammuo.SetParentID(*i)
	}
	return ammuo
}

// ClearParentID clears the value of the "parent_id" field.
func (ammuo *AsMarketMenuUpdateOne) ClearParentID() *AsMarketMenuUpdateOne {
	ammuo.mutation.ClearParentID()
	return ammuo
}

// SetMenuName sets the "menu_name" field.
func (ammuo *AsMarketMenuUpdateOne) SetMenuName(s string) *AsMarketMenuUpdateOne {
	ammuo.mutation.SetMenuName(s)
	return ammuo
}

// SetNillableMenuName sets the "menu_name" field if the given value is not nil.
func (ammuo *AsMarketMenuUpdateOne) SetNillableMenuName(s *string) *AsMarketMenuUpdateOne {
	if s != nil {
		ammuo.SetMenuName(*s)
	}
	return ammuo
}

// ClearMenuName clears the value of the "menu_name" field.
func (ammuo *AsMarketMenuUpdateOne) ClearMenuName() *AsMarketMenuUpdateOne {
	ammuo.mutation.ClearMenuName()
	return ammuo
}

// SetMenuURL sets the "menu_url" field.
func (ammuo *AsMarketMenuUpdateOne) SetMenuURL(s string) *AsMarketMenuUpdateOne {
	ammuo.mutation.SetMenuURL(s)
	return ammuo
}

// SetNillableMenuURL sets the "menu_url" field if the given value is not nil.
func (ammuo *AsMarketMenuUpdateOne) SetNillableMenuURL(s *string) *AsMarketMenuUpdateOne {
	if s != nil {
		ammuo.SetMenuURL(*s)
	}
	return ammuo
}

// ClearMenuURL clears the value of the "menu_url" field.
func (ammuo *AsMarketMenuUpdateOne) ClearMenuURL() *AsMarketMenuUpdateOne {
	ammuo.mutation.ClearMenuURL()
	return ammuo
}

// SetMenuColumn sets the "menu_column" field.
func (ammuo *AsMarketMenuUpdateOne) SetMenuColumn(s string) *AsMarketMenuUpdateOne {
	ammuo.mutation.SetMenuColumn(s)
	return ammuo
}

// SetNillableMenuColumn sets the "menu_column" field if the given value is not nil.
func (ammuo *AsMarketMenuUpdateOne) SetNillableMenuColumn(s *string) *AsMarketMenuUpdateOne {
	if s != nil {
		ammuo.SetMenuColumn(*s)
	}
	return ammuo
}

// ClearMenuColumn clears the value of the "menu_column" field.
func (ammuo *AsMarketMenuUpdateOne) ClearMenuColumn() *AsMarketMenuUpdateOne {
	ammuo.mutation.ClearMenuColumn()
	return ammuo
}

// SetIcon sets the "icon" field.
func (ammuo *AsMarketMenuUpdateOne) SetIcon(s string) *AsMarketMenuUpdateOne {
	ammuo.mutation.SetIcon(s)
	return ammuo
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (ammuo *AsMarketMenuUpdateOne) SetNillableIcon(s *string) *AsMarketMenuUpdateOne {
	if s != nil {
		ammuo.SetIcon(*s)
	}
	return ammuo
}

// ClearIcon clears the value of the "icon" field.
func (ammuo *AsMarketMenuUpdateOne) ClearIcon() *AsMarketMenuUpdateOne {
	ammuo.mutation.ClearIcon()
	return ammuo
}

// SetSort sets the "sort" field.
func (ammuo *AsMarketMenuUpdateOne) SetSort(i int64) *AsMarketMenuUpdateOne {
	ammuo.mutation.ResetSort()
	ammuo.mutation.SetSort(i)
	return ammuo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (ammuo *AsMarketMenuUpdateOne) SetNillableSort(i *int64) *AsMarketMenuUpdateOne {
	if i != nil {
		ammuo.SetSort(*i)
	}
	return ammuo
}

// AddSort adds i to the "sort" field.
func (ammuo *AsMarketMenuUpdateOne) AddSort(i int64) *AsMarketMenuUpdateOne {
	ammuo.mutation.AddSort(i)
	return ammuo
}

// ClearSort clears the value of the "sort" field.
func (ammuo *AsMarketMenuUpdateOne) ClearSort() *AsMarketMenuUpdateOne {
	ammuo.mutation.ClearSort()
	return ammuo
}

// SetHTTPSMenuURL sets the "https_menu_url" field.
func (ammuo *AsMarketMenuUpdateOne) SetHTTPSMenuURL(s string) *AsMarketMenuUpdateOne {
	ammuo.mutation.SetHTTPSMenuURL(s)
	return ammuo
}

// SetNillableHTTPSMenuURL sets the "https_menu_url" field if the given value is not nil.
func (ammuo *AsMarketMenuUpdateOne) SetNillableHTTPSMenuURL(s *string) *AsMarketMenuUpdateOne {
	if s != nil {
		ammuo.SetHTTPSMenuURL(*s)
	}
	return ammuo
}

// ClearHTTPSMenuURL clears the value of the "https_menu_url" field.
func (ammuo *AsMarketMenuUpdateOne) ClearHTTPSMenuURL() *AsMarketMenuUpdateOne {
	ammuo.mutation.ClearHTTPSMenuURL()
	return ammuo
}

// SetReformStatus sets the "reform_status" field.
func (ammuo *AsMarketMenuUpdateOne) SetReformStatus(i int64) *AsMarketMenuUpdateOne {
	ammuo.mutation.ResetReformStatus()
	ammuo.mutation.SetReformStatus(i)
	return ammuo
}

// SetNillableReformStatus sets the "reform_status" field if the given value is not nil.
func (ammuo *AsMarketMenuUpdateOne) SetNillableReformStatus(i *int64) *AsMarketMenuUpdateOne {
	if i != nil {
		ammuo.SetReformStatus(*i)
	}
	return ammuo
}

// AddReformStatus adds i to the "reform_status" field.
func (ammuo *AsMarketMenuUpdateOne) AddReformStatus(i int64) *AsMarketMenuUpdateOne {
	ammuo.mutation.AddReformStatus(i)
	return ammuo
}

// SetOutIPMenuURL sets the "out_ip_menu_url" field.
func (ammuo *AsMarketMenuUpdateOne) SetOutIPMenuURL(s string) *AsMarketMenuUpdateOne {
	ammuo.mutation.SetOutIPMenuURL(s)
	return ammuo
}

// SetNillableOutIPMenuURL sets the "out_ip_menu_url" field if the given value is not nil.
func (ammuo *AsMarketMenuUpdateOne) SetNillableOutIPMenuURL(s *string) *AsMarketMenuUpdateOne {
	if s != nil {
		ammuo.SetOutIPMenuURL(*s)
	}
	return ammuo
}

// ClearOutIPMenuURL clears the value of the "out_ip_menu_url" field.
func (ammuo *AsMarketMenuUpdateOne) ClearOutIPMenuURL() *AsMarketMenuUpdateOne {
	ammuo.mutation.ClearOutIPMenuURL()
	return ammuo
}

// SetIsDeleted sets the "is_deleted" field.
func (ammuo *AsMarketMenuUpdateOne) SetIsDeleted(i int64) *AsMarketMenuUpdateOne {
	ammuo.mutation.ResetIsDeleted()
	ammuo.mutation.SetIsDeleted(i)
	return ammuo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (ammuo *AsMarketMenuUpdateOne) SetNillableIsDeleted(i *int64) *AsMarketMenuUpdateOne {
	if i != nil {
		ammuo.SetIsDeleted(*i)
	}
	return ammuo
}

// AddIsDeleted adds i to the "is_deleted" field.
func (ammuo *AsMarketMenuUpdateOne) AddIsDeleted(i int64) *AsMarketMenuUpdateOne {
	ammuo.mutation.AddIsDeleted(i)
	return ammuo
}

// SetStatus sets the "status" field.
func (ammuo *AsMarketMenuUpdateOne) SetStatus(i int64) *AsMarketMenuUpdateOne {
	ammuo.mutation.ResetStatus()
	ammuo.mutation.SetStatus(i)
	return ammuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ammuo *AsMarketMenuUpdateOne) SetNillableStatus(i *int64) *AsMarketMenuUpdateOne {
	if i != nil {
		ammuo.SetStatus(*i)
	}
	return ammuo
}

// AddStatus adds i to the "status" field.
func (ammuo *AsMarketMenuUpdateOne) AddStatus(i int64) *AsMarketMenuUpdateOne {
	ammuo.mutation.AddStatus(i)
	return ammuo
}

// ClearStatus clears the value of the "status" field.
func (ammuo *AsMarketMenuUpdateOne) ClearStatus() *AsMarketMenuUpdateOne {
	ammuo.mutation.ClearStatus()
	return ammuo
}

// SetCreateUser sets the "create_user" field.
func (ammuo *AsMarketMenuUpdateOne) SetCreateUser(i int64) *AsMarketMenuUpdateOne {
	ammuo.mutation.ResetCreateUser()
	ammuo.mutation.SetCreateUser(i)
	return ammuo
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (ammuo *AsMarketMenuUpdateOne) SetNillableCreateUser(i *int64) *AsMarketMenuUpdateOne {
	if i != nil {
		ammuo.SetCreateUser(*i)
	}
	return ammuo
}

// AddCreateUser adds i to the "create_user" field.
func (ammuo *AsMarketMenuUpdateOne) AddCreateUser(i int64) *AsMarketMenuUpdateOne {
	ammuo.mutation.AddCreateUser(i)
	return ammuo
}

// ClearCreateUser clears the value of the "create_user" field.
func (ammuo *AsMarketMenuUpdateOne) ClearCreateUser() *AsMarketMenuUpdateOne {
	ammuo.mutation.ClearCreateUser()
	return ammuo
}

// SetUpdateUser sets the "update_user" field.
func (ammuo *AsMarketMenuUpdateOne) SetUpdateUser(i int64) *AsMarketMenuUpdateOne {
	ammuo.mutation.ResetUpdateUser()
	ammuo.mutation.SetUpdateUser(i)
	return ammuo
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (ammuo *AsMarketMenuUpdateOne) SetNillableUpdateUser(i *int64) *AsMarketMenuUpdateOne {
	if i != nil {
		ammuo.SetUpdateUser(*i)
	}
	return ammuo
}

// AddUpdateUser adds i to the "update_user" field.
func (ammuo *AsMarketMenuUpdateOne) AddUpdateUser(i int64) *AsMarketMenuUpdateOne {
	ammuo.mutation.AddUpdateUser(i)
	return ammuo
}

// ClearUpdateUser clears the value of the "update_user" field.
func (ammuo *AsMarketMenuUpdateOne) ClearUpdateUser() *AsMarketMenuUpdateOne {
	ammuo.mutation.ClearUpdateUser()
	return ammuo
}

// SetUpdateTime sets the "update_time" field.
func (ammuo *AsMarketMenuUpdateOne) SetUpdateTime(dt date.DateTime) *AsMarketMenuUpdateOne {
	ammuo.mutation.SetUpdateTime(dt)
	return ammuo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (ammuo *AsMarketMenuUpdateOne) ClearUpdateTime() *AsMarketMenuUpdateOne {
	ammuo.mutation.ClearUpdateTime()
	return ammuo
}

// SetParent sets the "parent" edge to the AsMarketMenu entity.
func (ammuo *AsMarketMenuUpdateOne) SetParent(a *AsMarketMenu) *AsMarketMenuUpdateOne {
	return ammuo.SetParentID(a.ID)
}

// AddChildrenIDs adds the "childrens" edge to the AsMarketMenu entity by IDs.
func (ammuo *AsMarketMenuUpdateOne) AddChildrenIDs(ids ...int64) *AsMarketMenuUpdateOne {
	ammuo.mutation.AddChildrenIDs(ids...)
	return ammuo
}

// AddChildrens adds the "childrens" edges to the AsMarketMenu entity.
func (ammuo *AsMarketMenuUpdateOne) AddChildrens(a ...*AsMarketMenu) *AsMarketMenuUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ammuo.AddChildrenIDs(ids...)
}

// SetAppxID sets the "appx" edge to the AsMarketApp entity by ID.
func (ammuo *AsMarketMenuUpdateOne) SetAppxID(id int64) *AsMarketMenuUpdateOne {
	ammuo.mutation.SetAppxID(id)
	return ammuo
}

// SetNillableAppxID sets the "appx" edge to the AsMarketApp entity by ID if the given value is not nil.
func (ammuo *AsMarketMenuUpdateOne) SetNillableAppxID(id *int64) *AsMarketMenuUpdateOne {
	if id != nil {
		ammuo = ammuo.SetAppxID(*id)
	}
	return ammuo
}

// SetAppx sets the "appx" edge to the AsMarketApp entity.
func (ammuo *AsMarketMenuUpdateOne) SetAppx(a *AsMarketApp) *AsMarketMenuUpdateOne {
	return ammuo.SetAppxID(a.ID)
}

// AddRoleMenuIDs adds the "roleMenus" edge to the AsMarketRoleMenu entity by IDs.
func (ammuo *AsMarketMenuUpdateOne) AddRoleMenuIDs(ids ...int64) *AsMarketMenuUpdateOne {
	ammuo.mutation.AddRoleMenuIDs(ids...)
	return ammuo
}

// AddRoleMenus adds the "roleMenus" edges to the AsMarketRoleMenu entity.
func (ammuo *AsMarketMenuUpdateOne) AddRoleMenus(a ...*AsMarketRoleMenu) *AsMarketMenuUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ammuo.AddRoleMenuIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the AsMarketAppRole entity by IDs.
func (ammuo *AsMarketMenuUpdateOne) AddRoleIDs(ids ...int64) *AsMarketMenuUpdateOne {
	ammuo.mutation.AddRoleIDs(ids...)
	return ammuo
}

// AddRoles adds the "roles" edges to the AsMarketAppRole entity.
func (ammuo *AsMarketMenuUpdateOne) AddRoles(a ...*AsMarketAppRole) *AsMarketMenuUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ammuo.AddRoleIDs(ids...)
}

// AddUserSortIDs adds the "UserSorts" edge to the AsMarketMenuUserSort entity by IDs.
func (ammuo *AsMarketMenuUpdateOne) AddUserSortIDs(ids ...int64) *AsMarketMenuUpdateOne {
	ammuo.mutation.AddUserSortIDs(ids...)
	return ammuo
}

// AddUserSorts adds the "UserSorts" edges to the AsMarketMenuUserSort entity.
func (ammuo *AsMarketMenuUpdateOne) AddUserSorts(a ...*AsMarketMenuUserSort) *AsMarketMenuUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ammuo.AddUserSortIDs(ids...)
}

// Mutation returns the AsMarketMenuMutation object of the builder.
func (ammuo *AsMarketMenuUpdateOne) Mutation() *AsMarketMenuMutation {
	return ammuo.mutation
}

// ClearParent clears the "parent" edge to the AsMarketMenu entity.
func (ammuo *AsMarketMenuUpdateOne) ClearParent() *AsMarketMenuUpdateOne {
	ammuo.mutation.ClearParent()
	return ammuo
}

// ClearChildrens clears all "childrens" edges to the AsMarketMenu entity.
func (ammuo *AsMarketMenuUpdateOne) ClearChildrens() *AsMarketMenuUpdateOne {
	ammuo.mutation.ClearChildrens()
	return ammuo
}

// RemoveChildrenIDs removes the "childrens" edge to AsMarketMenu entities by IDs.
func (ammuo *AsMarketMenuUpdateOne) RemoveChildrenIDs(ids ...int64) *AsMarketMenuUpdateOne {
	ammuo.mutation.RemoveChildrenIDs(ids...)
	return ammuo
}

// RemoveChildrens removes "childrens" edges to AsMarketMenu entities.
func (ammuo *AsMarketMenuUpdateOne) RemoveChildrens(a ...*AsMarketMenu) *AsMarketMenuUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ammuo.RemoveChildrenIDs(ids...)
}

// ClearAppx clears the "appx" edge to the AsMarketApp entity.
func (ammuo *AsMarketMenuUpdateOne) ClearAppx() *AsMarketMenuUpdateOne {
	ammuo.mutation.ClearAppx()
	return ammuo
}

// ClearRoleMenus clears all "roleMenus" edges to the AsMarketRoleMenu entity.
func (ammuo *AsMarketMenuUpdateOne) ClearRoleMenus() *AsMarketMenuUpdateOne {
	ammuo.mutation.ClearRoleMenus()
	return ammuo
}

// RemoveRoleMenuIDs removes the "roleMenus" edge to AsMarketRoleMenu entities by IDs.
func (ammuo *AsMarketMenuUpdateOne) RemoveRoleMenuIDs(ids ...int64) *AsMarketMenuUpdateOne {
	ammuo.mutation.RemoveRoleMenuIDs(ids...)
	return ammuo
}

// RemoveRoleMenus removes "roleMenus" edges to AsMarketRoleMenu entities.
func (ammuo *AsMarketMenuUpdateOne) RemoveRoleMenus(a ...*AsMarketRoleMenu) *AsMarketMenuUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ammuo.RemoveRoleMenuIDs(ids...)
}

// ClearRoles clears all "roles" edges to the AsMarketAppRole entity.
func (ammuo *AsMarketMenuUpdateOne) ClearRoles() *AsMarketMenuUpdateOne {
	ammuo.mutation.ClearRoles()
	return ammuo
}

// RemoveRoleIDs removes the "roles" edge to AsMarketAppRole entities by IDs.
func (ammuo *AsMarketMenuUpdateOne) RemoveRoleIDs(ids ...int64) *AsMarketMenuUpdateOne {
	ammuo.mutation.RemoveRoleIDs(ids...)
	return ammuo
}

// RemoveRoles removes "roles" edges to AsMarketAppRole entities.
func (ammuo *AsMarketMenuUpdateOne) RemoveRoles(a ...*AsMarketAppRole) *AsMarketMenuUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ammuo.RemoveRoleIDs(ids...)
}

// ClearUserSorts clears all "UserSorts" edges to the AsMarketMenuUserSort entity.
func (ammuo *AsMarketMenuUpdateOne) ClearUserSorts() *AsMarketMenuUpdateOne {
	ammuo.mutation.ClearUserSorts()
	return ammuo
}

// RemoveUserSortIDs removes the "UserSorts" edge to AsMarketMenuUserSort entities by IDs.
func (ammuo *AsMarketMenuUpdateOne) RemoveUserSortIDs(ids ...int64) *AsMarketMenuUpdateOne {
	ammuo.mutation.RemoveUserSortIDs(ids...)
	return ammuo
}

// RemoveUserSorts removes "UserSorts" edges to AsMarketMenuUserSort entities.
func (ammuo *AsMarketMenuUpdateOne) RemoveUserSorts(a ...*AsMarketMenuUserSort) *AsMarketMenuUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ammuo.RemoveUserSortIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ammuo *AsMarketMenuUpdateOne) Select(field string, fields ...string) *AsMarketMenuUpdateOne {
	ammuo.fields = append([]string{field}, fields...)
	return ammuo
}

// Save executes the query and returns the updated AsMarketMenu entity.
func (ammuo *AsMarketMenuUpdateOne) Save(ctx context.Context) (*AsMarketMenu, error) {
	var (
		err  error
		node *AsMarketMenu
	)
	ammuo.defaults()
	if len(ammuo.hooks) == 0 {
		node, err = ammuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsMarketMenuMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ammuo.mutation = mutation
			node, err = ammuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ammuo.hooks) - 1; i >= 0; i-- {
			if ammuo.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = ammuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ammuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ammuo *AsMarketMenuUpdateOne) SaveX(ctx context.Context) *AsMarketMenu {
	node, err := ammuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ammuo *AsMarketMenuUpdateOne) Exec(ctx context.Context) error {
	_, err := ammuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ammuo *AsMarketMenuUpdateOne) ExecX(ctx context.Context) {
	if err := ammuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ammuo *AsMarketMenuUpdateOne) defaults() {
	if _, ok := ammuo.mutation.UpdateTime(); !ok && !ammuo.mutation.UpdateTimeCleared() {
		v := asmarketmenu.UpdateDefaultUpdateTime()
		ammuo.mutation.SetUpdateTime(v)
	}
}

func (ammuo *AsMarketMenuUpdateOne) sqlSave(ctx context.Context) (_node *AsMarketMenu, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asmarketmenu.Table,
			Columns: asmarketmenu.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asmarketmenu.FieldID,
			},
		},
	}
	id, ok := ammuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`schema: missing "AsMarketMenu.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ammuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asmarketmenu.FieldID)
		for _, f := range fields {
			if !asmarketmenu.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("schema: invalid field %q for query", f)}
			}
			if f != asmarketmenu.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ammuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ammuo.mutation.MenuName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketmenu.FieldMenuName,
		})
	}
	if ammuo.mutation.MenuNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketmenu.FieldMenuName,
		})
	}
	if value, ok := ammuo.mutation.MenuURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketmenu.FieldMenuURL,
		})
	}
	if ammuo.mutation.MenuURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketmenu.FieldMenuURL,
		})
	}
	if value, ok := ammuo.mutation.MenuColumn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketmenu.FieldMenuColumn,
		})
	}
	if ammuo.mutation.MenuColumnCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketmenu.FieldMenuColumn,
		})
	}
	if value, ok := ammuo.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketmenu.FieldIcon,
		})
	}
	if ammuo.mutation.IconCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketmenu.FieldIcon,
		})
	}
	if value, ok := ammuo.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketmenu.FieldSort,
		})
	}
	if value, ok := ammuo.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketmenu.FieldSort,
		})
	}
	if ammuo.mutation.SortCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketmenu.FieldSort,
		})
	}
	if value, ok := ammuo.mutation.HTTPSMenuURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketmenu.FieldHTTPSMenuURL,
		})
	}
	if ammuo.mutation.HTTPSMenuURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketmenu.FieldHTTPSMenuURL,
		})
	}
	if value, ok := ammuo.mutation.ReformStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketmenu.FieldReformStatus,
		})
	}
	if value, ok := ammuo.mutation.AddedReformStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketmenu.FieldReformStatus,
		})
	}
	if value, ok := ammuo.mutation.OutIPMenuURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketmenu.FieldOutIPMenuURL,
		})
	}
	if ammuo.mutation.OutIPMenuURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketmenu.FieldOutIPMenuURL,
		})
	}
	if value, ok := ammuo.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketmenu.FieldIsDeleted,
		})
	}
	if value, ok := ammuo.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketmenu.FieldIsDeleted,
		})
	}
	if value, ok := ammuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketmenu.FieldStatus,
		})
	}
	if value, ok := ammuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketmenu.FieldStatus,
		})
	}
	if ammuo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketmenu.FieldStatus,
		})
	}
	if value, ok := ammuo.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketmenu.FieldCreateUser,
		})
	}
	if value, ok := ammuo.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketmenu.FieldCreateUser,
		})
	}
	if ammuo.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketmenu.FieldCreateUser,
		})
	}
	if value, ok := ammuo.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketmenu.FieldUpdateUser,
		})
	}
	if value, ok := ammuo.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketmenu.FieldUpdateUser,
		})
	}
	if ammuo.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketmenu.FieldUpdateUser,
		})
	}
	if ammuo.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketmenu.FieldCreateTime,
		})
	}
	if value, ok := ammuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketmenu.FieldUpdateTime,
		})
	}
	if ammuo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketmenu.FieldUpdateTime,
		})
	}
	if ammuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketmenu.ParentTable,
			Columns: []string{asmarketmenu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketmenu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ammuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketmenu.ParentTable,
			Columns: []string{asmarketmenu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ammuo.mutation.ChildrensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketmenu.ChildrensTable,
			Columns: []string{asmarketmenu.ChildrensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketmenu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ammuo.mutation.RemovedChildrensIDs(); len(nodes) > 0 && !ammuo.mutation.ChildrensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketmenu.ChildrensTable,
			Columns: []string{asmarketmenu.ChildrensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ammuo.mutation.ChildrensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketmenu.ChildrensTable,
			Columns: []string{asmarketmenu.ChildrensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ammuo.mutation.AppxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketmenu.AppxTable,
			Columns: []string{asmarketmenu.AppxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapp.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ammuo.mutation.AppxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketmenu.AppxTable,
			Columns: []string{asmarketmenu.AppxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapp.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ammuo.mutation.RoleMenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketmenu.RoleMenusTable,
			Columns: []string{asmarketmenu.RoleMenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketrolemenu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ammuo.mutation.RemovedRoleMenusIDs(); len(nodes) > 0 && !ammuo.mutation.RoleMenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketmenu.RoleMenusTable,
			Columns: []string{asmarketmenu.RoleMenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketrolemenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ammuo.mutation.RoleMenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketmenu.RoleMenusTable,
			Columns: []string{asmarketmenu.RoleMenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketrolemenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ammuo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asmarketmenu.RolesTable,
			Columns: asmarketmenu.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapprole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ammuo.mutation.RemovedRolesIDs(); len(nodes) > 0 && !ammuo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asmarketmenu.RolesTable,
			Columns: asmarketmenu.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapprole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ammuo.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asmarketmenu.RolesTable,
			Columns: asmarketmenu.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapprole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ammuo.mutation.UserSortsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketmenu.UserSortsTable,
			Columns: []string{asmarketmenu.UserSortsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketmenuusersort.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ammuo.mutation.RemovedUserSortsIDs(); len(nodes) > 0 && !ammuo.mutation.UserSortsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketmenu.UserSortsTable,
			Columns: []string{asmarketmenu.UserSortsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketmenuusersort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ammuo.mutation.UserSortsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketmenu.UserSortsTable,
			Columns: []string{asmarketmenu.UserSortsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketmenuusersort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AsMarketMenu{config: ammuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ammuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asmarketmenu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
