// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/asmarketapp"
	"orginone/common/schema/asmarketappalert"
	"orginone/common/schema/predicate"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsMarketAppAlertUpdate is the builder for updating AsMarketAppAlert entities.
type AsMarketAppAlertUpdate struct {
	config
	hooks    []Hook
	mutation *AsMarketAppAlertMutation
}

// Where appends a list predicates to the AsMarketAppAlertUpdate builder.
func (amaau *AsMarketAppAlertUpdate) Where(ps ...predicate.AsMarketAppAlert) *AsMarketAppAlertUpdate {
	amaau.mutation.Where(ps...)
	return amaau
}

// SetAlertTitle sets the "alert_title" field.
func (amaau *AsMarketAppAlertUpdate) SetAlertTitle(s string) *AsMarketAppAlertUpdate {
	amaau.mutation.SetAlertTitle(s)
	return amaau
}

// SetNillableAlertTitle sets the "alert_title" field if the given value is not nil.
func (amaau *AsMarketAppAlertUpdate) SetNillableAlertTitle(s *string) *AsMarketAppAlertUpdate {
	if s != nil {
		amaau.SetAlertTitle(*s)
	}
	return amaau
}

// ClearAlertTitle clears the value of the "alert_title" field.
func (amaau *AsMarketAppAlertUpdate) ClearAlertTitle() *AsMarketAppAlertUpdate {
	amaau.mutation.ClearAlertTitle()
	return amaau
}

// SetAlertContent sets the "alert_content" field.
func (amaau *AsMarketAppAlertUpdate) SetAlertContent(s string) *AsMarketAppAlertUpdate {
	amaau.mutation.SetAlertContent(s)
	return amaau
}

// SetNillableAlertContent sets the "alert_content" field if the given value is not nil.
func (amaau *AsMarketAppAlertUpdate) SetNillableAlertContent(s *string) *AsMarketAppAlertUpdate {
	if s != nil {
		amaau.SetAlertContent(*s)
	}
	return amaau
}

// ClearAlertContent clears the value of the "alert_content" field.
func (amaau *AsMarketAppAlertUpdate) ClearAlertContent() *AsMarketAppAlertUpdate {
	amaau.mutation.ClearAlertContent()
	return amaau
}

// SetAlertBusiness sets the "alert_business" field.
func (amaau *AsMarketAppAlertUpdate) SetAlertBusiness(s string) *AsMarketAppAlertUpdate {
	amaau.mutation.SetAlertBusiness(s)
	return amaau
}

// SetNillableAlertBusiness sets the "alert_business" field if the given value is not nil.
func (amaau *AsMarketAppAlertUpdate) SetNillableAlertBusiness(s *string) *AsMarketAppAlertUpdate {
	if s != nil {
		amaau.SetAlertBusiness(*s)
	}
	return amaau
}

// ClearAlertBusiness clears the value of the "alert_business" field.
func (amaau *AsMarketAppAlertUpdate) ClearAlertBusiness() *AsMarketAppAlertUpdate {
	amaau.mutation.ClearAlertBusiness()
	return amaau
}

// SetAlertEmergencyLevel sets the "alert_emergency_level" field.
func (amaau *AsMarketAppAlertUpdate) SetAlertEmergencyLevel(i int64) *AsMarketAppAlertUpdate {
	amaau.mutation.ResetAlertEmergencyLevel()
	amaau.mutation.SetAlertEmergencyLevel(i)
	return amaau
}

// SetNillableAlertEmergencyLevel sets the "alert_emergency_level" field if the given value is not nil.
func (amaau *AsMarketAppAlertUpdate) SetNillableAlertEmergencyLevel(i *int64) *AsMarketAppAlertUpdate {
	if i != nil {
		amaau.SetAlertEmergencyLevel(*i)
	}
	return amaau
}

// AddAlertEmergencyLevel adds i to the "alert_emergency_level" field.
func (amaau *AsMarketAppAlertUpdate) AddAlertEmergencyLevel(i int64) *AsMarketAppAlertUpdate {
	amaau.mutation.AddAlertEmergencyLevel(i)
	return amaau
}

// ClearAlertEmergencyLevel clears the value of the "alert_emergency_level" field.
func (amaau *AsMarketAppAlertUpdate) ClearAlertEmergencyLevel() *AsMarketAppAlertUpdate {
	amaau.mutation.ClearAlertEmergencyLevel()
	return amaau
}

// SetAlertReleaseAppID sets the "alert_release_app_id" field.
func (amaau *AsMarketAppAlertUpdate) SetAlertReleaseAppID(i int64) *AsMarketAppAlertUpdate {
	amaau.mutation.SetAlertReleaseAppID(i)
	return amaau
}

// SetNillableAlertReleaseAppID sets the "alert_release_app_id" field if the given value is not nil.
func (amaau *AsMarketAppAlertUpdate) SetNillableAlertReleaseAppID(i *int64) *AsMarketAppAlertUpdate {
	if i != nil {
		amaau.SetAlertReleaseAppID(*i)
	}
	return amaau
}

// ClearAlertReleaseAppID clears the value of the "alert_release_app_id" field.
func (amaau *AsMarketAppAlertUpdate) ClearAlertReleaseAppID() *AsMarketAppAlertUpdate {
	amaau.mutation.ClearAlertReleaseAppID()
	return amaau
}

// SetAlertReleaseTime sets the "alert_release_time" field.
func (amaau *AsMarketAppAlertUpdate) SetAlertReleaseTime(dt date.DateTime) *AsMarketAppAlertUpdate {
	amaau.mutation.SetAlertReleaseTime(dt)
	return amaau
}

// SetNillableAlertReleaseTime sets the "alert_release_time" field if the given value is not nil.
func (amaau *AsMarketAppAlertUpdate) SetNillableAlertReleaseTime(dt *date.DateTime) *AsMarketAppAlertUpdate {
	if dt != nil {
		amaau.SetAlertReleaseTime(*dt)
	}
	return amaau
}

// ClearAlertReleaseTime clears the value of the "alert_release_time" field.
func (amaau *AsMarketAppAlertUpdate) ClearAlertReleaseTime() *AsMarketAppAlertUpdate {
	amaau.mutation.ClearAlertReleaseTime()
	return amaau
}

// SetAlertRoleIds sets the "alert_role_ids" field.
func (amaau *AsMarketAppAlertUpdate) SetAlertRoleIds(s string) *AsMarketAppAlertUpdate {
	amaau.mutation.SetAlertRoleIds(s)
	return amaau
}

// SetNillableAlertRoleIds sets the "alert_role_ids" field if the given value is not nil.
func (amaau *AsMarketAppAlertUpdate) SetNillableAlertRoleIds(s *string) *AsMarketAppAlertUpdate {
	if s != nil {
		amaau.SetAlertRoleIds(*s)
	}
	return amaau
}

// ClearAlertRoleIds clears the value of the "alert_role_ids" field.
func (amaau *AsMarketAppAlertUpdate) ClearAlertRoleIds() *AsMarketAppAlertUpdate {
	amaau.mutation.ClearAlertRoleIds()
	return amaau
}

// SetAlertJobIds sets the "alert_job_ids" field.
func (amaau *AsMarketAppAlertUpdate) SetAlertJobIds(s string) *AsMarketAppAlertUpdate {
	amaau.mutation.SetAlertJobIds(s)
	return amaau
}

// SetNillableAlertJobIds sets the "alert_job_ids" field if the given value is not nil.
func (amaau *AsMarketAppAlertUpdate) SetNillableAlertJobIds(s *string) *AsMarketAppAlertUpdate {
	if s != nil {
		amaau.SetAlertJobIds(*s)
	}
	return amaau
}

// ClearAlertJobIds clears the value of the "alert_job_ids" field.
func (amaau *AsMarketAppAlertUpdate) ClearAlertJobIds() *AsMarketAppAlertUpdate {
	amaau.mutation.ClearAlertJobIds()
	return amaau
}

// SetAlertStatus sets the "alert_status" field.
func (amaau *AsMarketAppAlertUpdate) SetAlertStatus(i int64) *AsMarketAppAlertUpdate {
	amaau.mutation.ResetAlertStatus()
	amaau.mutation.SetAlertStatus(i)
	return amaau
}

// SetNillableAlertStatus sets the "alert_status" field if the given value is not nil.
func (amaau *AsMarketAppAlertUpdate) SetNillableAlertStatus(i *int64) *AsMarketAppAlertUpdate {
	if i != nil {
		amaau.SetAlertStatus(*i)
	}
	return amaau
}

// AddAlertStatus adds i to the "alert_status" field.
func (amaau *AsMarketAppAlertUpdate) AddAlertStatus(i int64) *AsMarketAppAlertUpdate {
	amaau.mutation.AddAlertStatus(i)
	return amaau
}

// ClearAlertStatus clears the value of the "alert_status" field.
func (amaau *AsMarketAppAlertUpdate) ClearAlertStatus() *AsMarketAppAlertUpdate {
	amaau.mutation.ClearAlertStatus()
	return amaau
}

// SetIsDeleted sets the "is_deleted" field.
func (amaau *AsMarketAppAlertUpdate) SetIsDeleted(i int64) *AsMarketAppAlertUpdate {
	amaau.mutation.ResetIsDeleted()
	amaau.mutation.SetIsDeleted(i)
	return amaau
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (amaau *AsMarketAppAlertUpdate) SetNillableIsDeleted(i *int64) *AsMarketAppAlertUpdate {
	if i != nil {
		amaau.SetIsDeleted(*i)
	}
	return amaau
}

// AddIsDeleted adds i to the "is_deleted" field.
func (amaau *AsMarketAppAlertUpdate) AddIsDeleted(i int64) *AsMarketAppAlertUpdate {
	amaau.mutation.AddIsDeleted(i)
	return amaau
}

// SetStatus sets the "status" field.
func (amaau *AsMarketAppAlertUpdate) SetStatus(i int64) *AsMarketAppAlertUpdate {
	amaau.mutation.ResetStatus()
	amaau.mutation.SetStatus(i)
	return amaau
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (amaau *AsMarketAppAlertUpdate) SetNillableStatus(i *int64) *AsMarketAppAlertUpdate {
	if i != nil {
		amaau.SetStatus(*i)
	}
	return amaau
}

// AddStatus adds i to the "status" field.
func (amaau *AsMarketAppAlertUpdate) AddStatus(i int64) *AsMarketAppAlertUpdate {
	amaau.mutation.AddStatus(i)
	return amaau
}

// ClearStatus clears the value of the "status" field.
func (amaau *AsMarketAppAlertUpdate) ClearStatus() *AsMarketAppAlertUpdate {
	amaau.mutation.ClearStatus()
	return amaau
}

// SetCreateUser sets the "create_user" field.
func (amaau *AsMarketAppAlertUpdate) SetCreateUser(i int64) *AsMarketAppAlertUpdate {
	amaau.mutation.ResetCreateUser()
	amaau.mutation.SetCreateUser(i)
	return amaau
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (amaau *AsMarketAppAlertUpdate) SetNillableCreateUser(i *int64) *AsMarketAppAlertUpdate {
	if i != nil {
		amaau.SetCreateUser(*i)
	}
	return amaau
}

// AddCreateUser adds i to the "create_user" field.
func (amaau *AsMarketAppAlertUpdate) AddCreateUser(i int64) *AsMarketAppAlertUpdate {
	amaau.mutation.AddCreateUser(i)
	return amaau
}

// ClearCreateUser clears the value of the "create_user" field.
func (amaau *AsMarketAppAlertUpdate) ClearCreateUser() *AsMarketAppAlertUpdate {
	amaau.mutation.ClearCreateUser()
	return amaau
}

// SetUpdateUser sets the "update_user" field.
func (amaau *AsMarketAppAlertUpdate) SetUpdateUser(i int64) *AsMarketAppAlertUpdate {
	amaau.mutation.ResetUpdateUser()
	amaau.mutation.SetUpdateUser(i)
	return amaau
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (amaau *AsMarketAppAlertUpdate) SetNillableUpdateUser(i *int64) *AsMarketAppAlertUpdate {
	if i != nil {
		amaau.SetUpdateUser(*i)
	}
	return amaau
}

// AddUpdateUser adds i to the "update_user" field.
func (amaau *AsMarketAppAlertUpdate) AddUpdateUser(i int64) *AsMarketAppAlertUpdate {
	amaau.mutation.AddUpdateUser(i)
	return amaau
}

// ClearUpdateUser clears the value of the "update_user" field.
func (amaau *AsMarketAppAlertUpdate) ClearUpdateUser() *AsMarketAppAlertUpdate {
	amaau.mutation.ClearUpdateUser()
	return amaau
}

// SetUpdateTime sets the "update_time" field.
func (amaau *AsMarketAppAlertUpdate) SetUpdateTime(dt date.DateTime) *AsMarketAppAlertUpdate {
	amaau.mutation.SetUpdateTime(dt)
	return amaau
}

// ClearUpdateTime clears the value of the "update_time" field.
func (amaau *AsMarketAppAlertUpdate) ClearUpdateTime() *AsMarketAppAlertUpdate {
	amaau.mutation.ClearUpdateTime()
	return amaau
}

// SetAppxID sets the "appx" edge to the AsMarketApp entity by ID.
func (amaau *AsMarketAppAlertUpdate) SetAppxID(id int64) *AsMarketAppAlertUpdate {
	amaau.mutation.SetAppxID(id)
	return amaau
}

// SetNillableAppxID sets the "appx" edge to the AsMarketApp entity by ID if the given value is not nil.
func (amaau *AsMarketAppAlertUpdate) SetNillableAppxID(id *int64) *AsMarketAppAlertUpdate {
	if id != nil {
		amaau = amaau.SetAppxID(*id)
	}
	return amaau
}

// SetAppx sets the "appx" edge to the AsMarketApp entity.
func (amaau *AsMarketAppAlertUpdate) SetAppx(a *AsMarketApp) *AsMarketAppAlertUpdate {
	return amaau.SetAppxID(a.ID)
}

// Mutation returns the AsMarketAppAlertMutation object of the builder.
func (amaau *AsMarketAppAlertUpdate) Mutation() *AsMarketAppAlertMutation {
	return amaau.mutation
}

// ClearAppx clears the "appx" edge to the AsMarketApp entity.
func (amaau *AsMarketAppAlertUpdate) ClearAppx() *AsMarketAppAlertUpdate {
	amaau.mutation.ClearAppx()
	return amaau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (amaau *AsMarketAppAlertUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	amaau.defaults()
	if len(amaau.hooks) == 0 {
		affected, err = amaau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsMarketAppAlertMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			amaau.mutation = mutation
			affected, err = amaau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(amaau.hooks) - 1; i >= 0; i-- {
			if amaau.hooks[i] == nil {
				return 0, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = amaau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, amaau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (amaau *AsMarketAppAlertUpdate) SaveX(ctx context.Context) int {
	affected, err := amaau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (amaau *AsMarketAppAlertUpdate) Exec(ctx context.Context) error {
	_, err := amaau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amaau *AsMarketAppAlertUpdate) ExecX(ctx context.Context) {
	if err := amaau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amaau *AsMarketAppAlertUpdate) defaults() {
	if _, ok := amaau.mutation.UpdateTime(); !ok && !amaau.mutation.UpdateTimeCleared() {
		v := asmarketappalert.UpdateDefaultUpdateTime()
		amaau.mutation.SetUpdateTime(v)
	}
}

func (amaau *AsMarketAppAlertUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asmarketappalert.Table,
			Columns: asmarketappalert.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asmarketappalert.FieldID,
			},
		},
	}
	if ps := amaau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amaau.mutation.AlertTitle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappalert.FieldAlertTitle,
		})
	}
	if amaau.mutation.AlertTitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappalert.FieldAlertTitle,
		})
	}
	if value, ok := amaau.mutation.AlertContent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappalert.FieldAlertContent,
		})
	}
	if amaau.mutation.AlertContentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappalert.FieldAlertContent,
		})
	}
	if value, ok := amaau.mutation.AlertBusiness(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappalert.FieldAlertBusiness,
		})
	}
	if amaau.mutation.AlertBusinessCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappalert.FieldAlertBusiness,
		})
	}
	if value, ok := amaau.mutation.AlertEmergencyLevel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappalert.FieldAlertEmergencyLevel,
		})
	}
	if value, ok := amaau.mutation.AddedAlertEmergencyLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappalert.FieldAlertEmergencyLevel,
		})
	}
	if amaau.mutation.AlertEmergencyLevelCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappalert.FieldAlertEmergencyLevel,
		})
	}
	if value, ok := amaau.mutation.AlertReleaseTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketappalert.FieldAlertReleaseTime,
		})
	}
	if amaau.mutation.AlertReleaseTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketappalert.FieldAlertReleaseTime,
		})
	}
	if value, ok := amaau.mutation.AlertRoleIds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappalert.FieldAlertRoleIds,
		})
	}
	if amaau.mutation.AlertRoleIdsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappalert.FieldAlertRoleIds,
		})
	}
	if value, ok := amaau.mutation.AlertJobIds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappalert.FieldAlertJobIds,
		})
	}
	if amaau.mutation.AlertJobIdsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappalert.FieldAlertJobIds,
		})
	}
	if value, ok := amaau.mutation.AlertStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappalert.FieldAlertStatus,
		})
	}
	if value, ok := amaau.mutation.AddedAlertStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappalert.FieldAlertStatus,
		})
	}
	if amaau.mutation.AlertStatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappalert.FieldAlertStatus,
		})
	}
	if value, ok := amaau.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappalert.FieldIsDeleted,
		})
	}
	if value, ok := amaau.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappalert.FieldIsDeleted,
		})
	}
	if value, ok := amaau.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappalert.FieldStatus,
		})
	}
	if value, ok := amaau.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappalert.FieldStatus,
		})
	}
	if amaau.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappalert.FieldStatus,
		})
	}
	if value, ok := amaau.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappalert.FieldCreateUser,
		})
	}
	if value, ok := amaau.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappalert.FieldCreateUser,
		})
	}
	if amaau.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappalert.FieldCreateUser,
		})
	}
	if value, ok := amaau.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappalert.FieldUpdateUser,
		})
	}
	if value, ok := amaau.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappalert.FieldUpdateUser,
		})
	}
	if amaau.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappalert.FieldUpdateUser,
		})
	}
	if amaau.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketappalert.FieldCreateTime,
		})
	}
	if value, ok := amaau.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketappalert.FieldUpdateTime,
		})
	}
	if amaau.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketappalert.FieldUpdateTime,
		})
	}
	if amaau.mutation.AppxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketappalert.AppxTable,
			Columns: []string{asmarketappalert.AppxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapp.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amaau.mutation.AppxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketappalert.AppxTable,
			Columns: []string{asmarketappalert.AppxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapp.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, amaau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asmarketappalert.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AsMarketAppAlertUpdateOne is the builder for updating a single AsMarketAppAlert entity.
type AsMarketAppAlertUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AsMarketAppAlertMutation
}

// SetAlertTitle sets the "alert_title" field.
func (amaauo *AsMarketAppAlertUpdateOne) SetAlertTitle(s string) *AsMarketAppAlertUpdateOne {
	amaauo.mutation.SetAlertTitle(s)
	return amaauo
}

// SetNillableAlertTitle sets the "alert_title" field if the given value is not nil.
func (amaauo *AsMarketAppAlertUpdateOne) SetNillableAlertTitle(s *string) *AsMarketAppAlertUpdateOne {
	if s != nil {
		amaauo.SetAlertTitle(*s)
	}
	return amaauo
}

// ClearAlertTitle clears the value of the "alert_title" field.
func (amaauo *AsMarketAppAlertUpdateOne) ClearAlertTitle() *AsMarketAppAlertUpdateOne {
	amaauo.mutation.ClearAlertTitle()
	return amaauo
}

// SetAlertContent sets the "alert_content" field.
func (amaauo *AsMarketAppAlertUpdateOne) SetAlertContent(s string) *AsMarketAppAlertUpdateOne {
	amaauo.mutation.SetAlertContent(s)
	return amaauo
}

// SetNillableAlertContent sets the "alert_content" field if the given value is not nil.
func (amaauo *AsMarketAppAlertUpdateOne) SetNillableAlertContent(s *string) *AsMarketAppAlertUpdateOne {
	if s != nil {
		amaauo.SetAlertContent(*s)
	}
	return amaauo
}

// ClearAlertContent clears the value of the "alert_content" field.
func (amaauo *AsMarketAppAlertUpdateOne) ClearAlertContent() *AsMarketAppAlertUpdateOne {
	amaauo.mutation.ClearAlertContent()
	return amaauo
}

// SetAlertBusiness sets the "alert_business" field.
func (amaauo *AsMarketAppAlertUpdateOne) SetAlertBusiness(s string) *AsMarketAppAlertUpdateOne {
	amaauo.mutation.SetAlertBusiness(s)
	return amaauo
}

// SetNillableAlertBusiness sets the "alert_business" field if the given value is not nil.
func (amaauo *AsMarketAppAlertUpdateOne) SetNillableAlertBusiness(s *string) *AsMarketAppAlertUpdateOne {
	if s != nil {
		amaauo.SetAlertBusiness(*s)
	}
	return amaauo
}

// ClearAlertBusiness clears the value of the "alert_business" field.
func (amaauo *AsMarketAppAlertUpdateOne) ClearAlertBusiness() *AsMarketAppAlertUpdateOne {
	amaauo.mutation.ClearAlertBusiness()
	return amaauo
}

// SetAlertEmergencyLevel sets the "alert_emergency_level" field.
func (amaauo *AsMarketAppAlertUpdateOne) SetAlertEmergencyLevel(i int64) *AsMarketAppAlertUpdateOne {
	amaauo.mutation.ResetAlertEmergencyLevel()
	amaauo.mutation.SetAlertEmergencyLevel(i)
	return amaauo
}

// SetNillableAlertEmergencyLevel sets the "alert_emergency_level" field if the given value is not nil.
func (amaauo *AsMarketAppAlertUpdateOne) SetNillableAlertEmergencyLevel(i *int64) *AsMarketAppAlertUpdateOne {
	if i != nil {
		amaauo.SetAlertEmergencyLevel(*i)
	}
	return amaauo
}

// AddAlertEmergencyLevel adds i to the "alert_emergency_level" field.
func (amaauo *AsMarketAppAlertUpdateOne) AddAlertEmergencyLevel(i int64) *AsMarketAppAlertUpdateOne {
	amaauo.mutation.AddAlertEmergencyLevel(i)
	return amaauo
}

// ClearAlertEmergencyLevel clears the value of the "alert_emergency_level" field.
func (amaauo *AsMarketAppAlertUpdateOne) ClearAlertEmergencyLevel() *AsMarketAppAlertUpdateOne {
	amaauo.mutation.ClearAlertEmergencyLevel()
	return amaauo
}

// SetAlertReleaseAppID sets the "alert_release_app_id" field.
func (amaauo *AsMarketAppAlertUpdateOne) SetAlertReleaseAppID(i int64) *AsMarketAppAlertUpdateOne {
	amaauo.mutation.SetAlertReleaseAppID(i)
	return amaauo
}

// SetNillableAlertReleaseAppID sets the "alert_release_app_id" field if the given value is not nil.
func (amaauo *AsMarketAppAlertUpdateOne) SetNillableAlertReleaseAppID(i *int64) *AsMarketAppAlertUpdateOne {
	if i != nil {
		amaauo.SetAlertReleaseAppID(*i)
	}
	return amaauo
}

// ClearAlertReleaseAppID clears the value of the "alert_release_app_id" field.
func (amaauo *AsMarketAppAlertUpdateOne) ClearAlertReleaseAppID() *AsMarketAppAlertUpdateOne {
	amaauo.mutation.ClearAlertReleaseAppID()
	return amaauo
}

// SetAlertReleaseTime sets the "alert_release_time" field.
func (amaauo *AsMarketAppAlertUpdateOne) SetAlertReleaseTime(dt date.DateTime) *AsMarketAppAlertUpdateOne {
	amaauo.mutation.SetAlertReleaseTime(dt)
	return amaauo
}

// SetNillableAlertReleaseTime sets the "alert_release_time" field if the given value is not nil.
func (amaauo *AsMarketAppAlertUpdateOne) SetNillableAlertReleaseTime(dt *date.DateTime) *AsMarketAppAlertUpdateOne {
	if dt != nil {
		amaauo.SetAlertReleaseTime(*dt)
	}
	return amaauo
}

// ClearAlertReleaseTime clears the value of the "alert_release_time" field.
func (amaauo *AsMarketAppAlertUpdateOne) ClearAlertReleaseTime() *AsMarketAppAlertUpdateOne {
	amaauo.mutation.ClearAlertReleaseTime()
	return amaauo
}

// SetAlertRoleIds sets the "alert_role_ids" field.
func (amaauo *AsMarketAppAlertUpdateOne) SetAlertRoleIds(s string) *AsMarketAppAlertUpdateOne {
	amaauo.mutation.SetAlertRoleIds(s)
	return amaauo
}

// SetNillableAlertRoleIds sets the "alert_role_ids" field if the given value is not nil.
func (amaauo *AsMarketAppAlertUpdateOne) SetNillableAlertRoleIds(s *string) *AsMarketAppAlertUpdateOne {
	if s != nil {
		amaauo.SetAlertRoleIds(*s)
	}
	return amaauo
}

// ClearAlertRoleIds clears the value of the "alert_role_ids" field.
func (amaauo *AsMarketAppAlertUpdateOne) ClearAlertRoleIds() *AsMarketAppAlertUpdateOne {
	amaauo.mutation.ClearAlertRoleIds()
	return amaauo
}

// SetAlertJobIds sets the "alert_job_ids" field.
func (amaauo *AsMarketAppAlertUpdateOne) SetAlertJobIds(s string) *AsMarketAppAlertUpdateOne {
	amaauo.mutation.SetAlertJobIds(s)
	return amaauo
}

// SetNillableAlertJobIds sets the "alert_job_ids" field if the given value is not nil.
func (amaauo *AsMarketAppAlertUpdateOne) SetNillableAlertJobIds(s *string) *AsMarketAppAlertUpdateOne {
	if s != nil {
		amaauo.SetAlertJobIds(*s)
	}
	return amaauo
}

// ClearAlertJobIds clears the value of the "alert_job_ids" field.
func (amaauo *AsMarketAppAlertUpdateOne) ClearAlertJobIds() *AsMarketAppAlertUpdateOne {
	amaauo.mutation.ClearAlertJobIds()
	return amaauo
}

// SetAlertStatus sets the "alert_status" field.
func (amaauo *AsMarketAppAlertUpdateOne) SetAlertStatus(i int64) *AsMarketAppAlertUpdateOne {
	amaauo.mutation.ResetAlertStatus()
	amaauo.mutation.SetAlertStatus(i)
	return amaauo
}

// SetNillableAlertStatus sets the "alert_status" field if the given value is not nil.
func (amaauo *AsMarketAppAlertUpdateOne) SetNillableAlertStatus(i *int64) *AsMarketAppAlertUpdateOne {
	if i != nil {
		amaauo.SetAlertStatus(*i)
	}
	return amaauo
}

// AddAlertStatus adds i to the "alert_status" field.
func (amaauo *AsMarketAppAlertUpdateOne) AddAlertStatus(i int64) *AsMarketAppAlertUpdateOne {
	amaauo.mutation.AddAlertStatus(i)
	return amaauo
}

// ClearAlertStatus clears the value of the "alert_status" field.
func (amaauo *AsMarketAppAlertUpdateOne) ClearAlertStatus() *AsMarketAppAlertUpdateOne {
	amaauo.mutation.ClearAlertStatus()
	return amaauo
}

// SetIsDeleted sets the "is_deleted" field.
func (amaauo *AsMarketAppAlertUpdateOne) SetIsDeleted(i int64) *AsMarketAppAlertUpdateOne {
	amaauo.mutation.ResetIsDeleted()
	amaauo.mutation.SetIsDeleted(i)
	return amaauo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (amaauo *AsMarketAppAlertUpdateOne) SetNillableIsDeleted(i *int64) *AsMarketAppAlertUpdateOne {
	if i != nil {
		amaauo.SetIsDeleted(*i)
	}
	return amaauo
}

// AddIsDeleted adds i to the "is_deleted" field.
func (amaauo *AsMarketAppAlertUpdateOne) AddIsDeleted(i int64) *AsMarketAppAlertUpdateOne {
	amaauo.mutation.AddIsDeleted(i)
	return amaauo
}

// SetStatus sets the "status" field.
func (amaauo *AsMarketAppAlertUpdateOne) SetStatus(i int64) *AsMarketAppAlertUpdateOne {
	amaauo.mutation.ResetStatus()
	amaauo.mutation.SetStatus(i)
	return amaauo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (amaauo *AsMarketAppAlertUpdateOne) SetNillableStatus(i *int64) *AsMarketAppAlertUpdateOne {
	if i != nil {
		amaauo.SetStatus(*i)
	}
	return amaauo
}

// AddStatus adds i to the "status" field.
func (amaauo *AsMarketAppAlertUpdateOne) AddStatus(i int64) *AsMarketAppAlertUpdateOne {
	amaauo.mutation.AddStatus(i)
	return amaauo
}

// ClearStatus clears the value of the "status" field.
func (amaauo *AsMarketAppAlertUpdateOne) ClearStatus() *AsMarketAppAlertUpdateOne {
	amaauo.mutation.ClearStatus()
	return amaauo
}

// SetCreateUser sets the "create_user" field.
func (amaauo *AsMarketAppAlertUpdateOne) SetCreateUser(i int64) *AsMarketAppAlertUpdateOne {
	amaauo.mutation.ResetCreateUser()
	amaauo.mutation.SetCreateUser(i)
	return amaauo
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (amaauo *AsMarketAppAlertUpdateOne) SetNillableCreateUser(i *int64) *AsMarketAppAlertUpdateOne {
	if i != nil {
		amaauo.SetCreateUser(*i)
	}
	return amaauo
}

// AddCreateUser adds i to the "create_user" field.
func (amaauo *AsMarketAppAlertUpdateOne) AddCreateUser(i int64) *AsMarketAppAlertUpdateOne {
	amaauo.mutation.AddCreateUser(i)
	return amaauo
}

// ClearCreateUser clears the value of the "create_user" field.
func (amaauo *AsMarketAppAlertUpdateOne) ClearCreateUser() *AsMarketAppAlertUpdateOne {
	amaauo.mutation.ClearCreateUser()
	return amaauo
}

// SetUpdateUser sets the "update_user" field.
func (amaauo *AsMarketAppAlertUpdateOne) SetUpdateUser(i int64) *AsMarketAppAlertUpdateOne {
	amaauo.mutation.ResetUpdateUser()
	amaauo.mutation.SetUpdateUser(i)
	return amaauo
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (amaauo *AsMarketAppAlertUpdateOne) SetNillableUpdateUser(i *int64) *AsMarketAppAlertUpdateOne {
	if i != nil {
		amaauo.SetUpdateUser(*i)
	}
	return amaauo
}

// AddUpdateUser adds i to the "update_user" field.
func (amaauo *AsMarketAppAlertUpdateOne) AddUpdateUser(i int64) *AsMarketAppAlertUpdateOne {
	amaauo.mutation.AddUpdateUser(i)
	return amaauo
}

// ClearUpdateUser clears the value of the "update_user" field.
func (amaauo *AsMarketAppAlertUpdateOne) ClearUpdateUser() *AsMarketAppAlertUpdateOne {
	amaauo.mutation.ClearUpdateUser()
	return amaauo
}

// SetUpdateTime sets the "update_time" field.
func (amaauo *AsMarketAppAlertUpdateOne) SetUpdateTime(dt date.DateTime) *AsMarketAppAlertUpdateOne {
	amaauo.mutation.SetUpdateTime(dt)
	return amaauo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (amaauo *AsMarketAppAlertUpdateOne) ClearUpdateTime() *AsMarketAppAlertUpdateOne {
	amaauo.mutation.ClearUpdateTime()
	return amaauo
}

// SetAppxID sets the "appx" edge to the AsMarketApp entity by ID.
func (amaauo *AsMarketAppAlertUpdateOne) SetAppxID(id int64) *AsMarketAppAlertUpdateOne {
	amaauo.mutation.SetAppxID(id)
	return amaauo
}

// SetNillableAppxID sets the "appx" edge to the AsMarketApp entity by ID if the given value is not nil.
func (amaauo *AsMarketAppAlertUpdateOne) SetNillableAppxID(id *int64) *AsMarketAppAlertUpdateOne {
	if id != nil {
		amaauo = amaauo.SetAppxID(*id)
	}
	return amaauo
}

// SetAppx sets the "appx" edge to the AsMarketApp entity.
func (amaauo *AsMarketAppAlertUpdateOne) SetAppx(a *AsMarketApp) *AsMarketAppAlertUpdateOne {
	return amaauo.SetAppxID(a.ID)
}

// Mutation returns the AsMarketAppAlertMutation object of the builder.
func (amaauo *AsMarketAppAlertUpdateOne) Mutation() *AsMarketAppAlertMutation {
	return amaauo.mutation
}

// ClearAppx clears the "appx" edge to the AsMarketApp entity.
func (amaauo *AsMarketAppAlertUpdateOne) ClearAppx() *AsMarketAppAlertUpdateOne {
	amaauo.mutation.ClearAppx()
	return amaauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (amaauo *AsMarketAppAlertUpdateOne) Select(field string, fields ...string) *AsMarketAppAlertUpdateOne {
	amaauo.fields = append([]string{field}, fields...)
	return amaauo
}

// Save executes the query and returns the updated AsMarketAppAlert entity.
func (amaauo *AsMarketAppAlertUpdateOne) Save(ctx context.Context) (*AsMarketAppAlert, error) {
	var (
		err  error
		node *AsMarketAppAlert
	)
	amaauo.defaults()
	if len(amaauo.hooks) == 0 {
		node, err = amaauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsMarketAppAlertMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			amaauo.mutation = mutation
			node, err = amaauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(amaauo.hooks) - 1; i >= 0; i-- {
			if amaauo.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = amaauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, amaauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (amaauo *AsMarketAppAlertUpdateOne) SaveX(ctx context.Context) *AsMarketAppAlert {
	node, err := amaauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (amaauo *AsMarketAppAlertUpdateOne) Exec(ctx context.Context) error {
	_, err := amaauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amaauo *AsMarketAppAlertUpdateOne) ExecX(ctx context.Context) {
	if err := amaauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amaauo *AsMarketAppAlertUpdateOne) defaults() {
	if _, ok := amaauo.mutation.UpdateTime(); !ok && !amaauo.mutation.UpdateTimeCleared() {
		v := asmarketappalert.UpdateDefaultUpdateTime()
		amaauo.mutation.SetUpdateTime(v)
	}
}

func (amaauo *AsMarketAppAlertUpdateOne) sqlSave(ctx context.Context) (_node *AsMarketAppAlert, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asmarketappalert.Table,
			Columns: asmarketappalert.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asmarketappalert.FieldID,
			},
		},
	}
	id, ok := amaauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`schema: missing "AsMarketAppAlert.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := amaauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asmarketappalert.FieldID)
		for _, f := range fields {
			if !asmarketappalert.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("schema: invalid field %q for query", f)}
			}
			if f != asmarketappalert.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := amaauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amaauo.mutation.AlertTitle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappalert.FieldAlertTitle,
		})
	}
	if amaauo.mutation.AlertTitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappalert.FieldAlertTitle,
		})
	}
	if value, ok := amaauo.mutation.AlertContent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappalert.FieldAlertContent,
		})
	}
	if amaauo.mutation.AlertContentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappalert.FieldAlertContent,
		})
	}
	if value, ok := amaauo.mutation.AlertBusiness(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappalert.FieldAlertBusiness,
		})
	}
	if amaauo.mutation.AlertBusinessCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappalert.FieldAlertBusiness,
		})
	}
	if value, ok := amaauo.mutation.AlertEmergencyLevel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappalert.FieldAlertEmergencyLevel,
		})
	}
	if value, ok := amaauo.mutation.AddedAlertEmergencyLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappalert.FieldAlertEmergencyLevel,
		})
	}
	if amaauo.mutation.AlertEmergencyLevelCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappalert.FieldAlertEmergencyLevel,
		})
	}
	if value, ok := amaauo.mutation.AlertReleaseTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketappalert.FieldAlertReleaseTime,
		})
	}
	if amaauo.mutation.AlertReleaseTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketappalert.FieldAlertReleaseTime,
		})
	}
	if value, ok := amaauo.mutation.AlertRoleIds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappalert.FieldAlertRoleIds,
		})
	}
	if amaauo.mutation.AlertRoleIdsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappalert.FieldAlertRoleIds,
		})
	}
	if value, ok := amaauo.mutation.AlertJobIds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappalert.FieldAlertJobIds,
		})
	}
	if amaauo.mutation.AlertJobIdsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappalert.FieldAlertJobIds,
		})
	}
	if value, ok := amaauo.mutation.AlertStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappalert.FieldAlertStatus,
		})
	}
	if value, ok := amaauo.mutation.AddedAlertStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappalert.FieldAlertStatus,
		})
	}
	if amaauo.mutation.AlertStatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappalert.FieldAlertStatus,
		})
	}
	if value, ok := amaauo.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappalert.FieldIsDeleted,
		})
	}
	if value, ok := amaauo.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappalert.FieldIsDeleted,
		})
	}
	if value, ok := amaauo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappalert.FieldStatus,
		})
	}
	if value, ok := amaauo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappalert.FieldStatus,
		})
	}
	if amaauo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappalert.FieldStatus,
		})
	}
	if value, ok := amaauo.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappalert.FieldCreateUser,
		})
	}
	if value, ok := amaauo.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappalert.FieldCreateUser,
		})
	}
	if amaauo.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappalert.FieldCreateUser,
		})
	}
	if value, ok := amaauo.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappalert.FieldUpdateUser,
		})
	}
	if value, ok := amaauo.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappalert.FieldUpdateUser,
		})
	}
	if amaauo.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappalert.FieldUpdateUser,
		})
	}
	if amaauo.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketappalert.FieldCreateTime,
		})
	}
	if value, ok := amaauo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketappalert.FieldUpdateTime,
		})
	}
	if amaauo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketappalert.FieldUpdateTime,
		})
	}
	if amaauo.mutation.AppxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketappalert.AppxTable,
			Columns: []string{asmarketappalert.AppxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapp.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amaauo.mutation.AppxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketappalert.AppxTable,
			Columns: []string{asmarketappalert.AppxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapp.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AsMarketAppAlert{config: amaauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, amaauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asmarketappalert.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
