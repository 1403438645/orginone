// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"math"
	"orginone/common/schema/asrole"
	"orginone/common/schema/astenantattr"
	"orginone/common/schema/astenantattrrole"
	"orginone/common/schema/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsTenantAttrRoleQuery is the builder for querying AsTenantAttrRole entities.
type AsTenantAttrRoleQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.AsTenantAttrRole
	// eager-loading edges.
	withTenantAttrx *AsTenantAttrQuery
	withRolex       *AsRoleQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AsTenantAttrRoleQuery builder.
func (atarq *AsTenantAttrRoleQuery) Where(ps ...predicate.AsTenantAttrRole) *AsTenantAttrRoleQuery {
	atarq.predicates = append(atarq.predicates, ps...)
	return atarq
}

// Limit adds a limit step to the query.
func (atarq *AsTenantAttrRoleQuery) Limit(limit int) *AsTenantAttrRoleQuery {
	atarq.limit = &limit
	return atarq
}

// Offset adds an offset step to the query.
func (atarq *AsTenantAttrRoleQuery) Offset(offset int) *AsTenantAttrRoleQuery {
	atarq.offset = &offset
	return atarq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (atarq *AsTenantAttrRoleQuery) Unique(unique bool) *AsTenantAttrRoleQuery {
	atarq.unique = &unique
	return atarq
}

// Order adds an order step to the query.
func (atarq *AsTenantAttrRoleQuery) Order(o ...OrderFunc) *AsTenantAttrRoleQuery {
	atarq.order = append(atarq.order, o...)
	return atarq
}

// QueryTenantAttrx chains the current query on the "tenantAttrx" edge.
func (atarq *AsTenantAttrRoleQuery) QueryTenantAttrx() *AsTenantAttrQuery {
	query := &AsTenantAttrQuery{config: atarq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := atarq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := atarq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(astenantattrrole.Table, astenantattrrole.FieldID, selector),
			sqlgraph.To(astenantattr.Table, astenantattr.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, astenantattrrole.TenantAttrxTable, astenantattrrole.TenantAttrxColumn),
		)
		fromU = sqlgraph.SetNeighbors(atarq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRolex chains the current query on the "rolex" edge.
func (atarq *AsTenantAttrRoleQuery) QueryRolex() *AsRoleQuery {
	query := &AsRoleQuery{config: atarq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := atarq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := atarq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(astenantattrrole.Table, astenantattrrole.FieldID, selector),
			sqlgraph.To(asrole.Table, asrole.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, astenantattrrole.RolexTable, astenantattrrole.RolexColumn),
		)
		fromU = sqlgraph.SetNeighbors(atarq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AsTenantAttrRole entity from the query.
// Returns a *NotFoundError when no AsTenantAttrRole was found.
func (atarq *AsTenantAttrRoleQuery) First(ctx context.Context) (*AsTenantAttrRole, error) {
	nodes, err := atarq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{astenantattrrole.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (atarq *AsTenantAttrRoleQuery) FirstX(ctx context.Context) *AsTenantAttrRole {
	node, err := atarq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AsTenantAttrRole ID from the query.
// Returns a *NotFoundError when no AsTenantAttrRole ID was found.
func (atarq *AsTenantAttrRoleQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = atarq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{astenantattrrole.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (atarq *AsTenantAttrRoleQuery) FirstIDX(ctx context.Context) int64 {
	id, err := atarq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AsTenantAttrRole entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AsTenantAttrRole entity is found.
// Returns a *NotFoundError when no AsTenantAttrRole entities are found.
func (atarq *AsTenantAttrRoleQuery) Only(ctx context.Context) (*AsTenantAttrRole, error) {
	nodes, err := atarq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{astenantattrrole.Label}
	default:
		return nil, &NotSingularError{astenantattrrole.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (atarq *AsTenantAttrRoleQuery) OnlyX(ctx context.Context) *AsTenantAttrRole {
	node, err := atarq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AsTenantAttrRole ID in the query.
// Returns a *NotSingularError when more than one AsTenantAttrRole ID is found.
// Returns a *NotFoundError when no entities are found.
func (atarq *AsTenantAttrRoleQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = atarq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{astenantattrrole.Label}
	default:
		err = &NotSingularError{astenantattrrole.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (atarq *AsTenantAttrRoleQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := atarq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AsTenantAttrRoles.
func (atarq *AsTenantAttrRoleQuery) All(ctx context.Context) ([]*AsTenantAttrRole, error) {
	if err := atarq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return atarq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (atarq *AsTenantAttrRoleQuery) AllX(ctx context.Context) []*AsTenantAttrRole {
	nodes, err := atarq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AsTenantAttrRole IDs.
func (atarq *AsTenantAttrRoleQuery) IDs(ctx context.Context) ([]int64, error) {
	var ids []int64
	if err := atarq.Select(astenantattrrole.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (atarq *AsTenantAttrRoleQuery) IDsX(ctx context.Context) []int64 {
	ids, err := atarq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (atarq *AsTenantAttrRoleQuery) Count(ctx context.Context) (int64, error) {
	if err := atarq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return atarq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (atarq *AsTenantAttrRoleQuery) CountX(ctx context.Context) int64 {
	count, err := atarq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (atarq *AsTenantAttrRoleQuery) Exist(ctx context.Context) (bool, error) {
	if err := atarq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return atarq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (atarq *AsTenantAttrRoleQuery) ExistX(ctx context.Context) bool {
	exist, err := atarq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AsTenantAttrRoleQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (atarq *AsTenantAttrRoleQuery) Clone() *AsTenantAttrRoleQuery {
	if atarq == nil {
		return nil
	}
	return &AsTenantAttrRoleQuery{
		config:          atarq.config,
		limit:           atarq.limit,
		offset:          atarq.offset,
		order:           append([]OrderFunc{}, atarq.order...),
		predicates:      append([]predicate.AsTenantAttrRole{}, atarq.predicates...),
		withTenantAttrx: atarq.withTenantAttrx.Clone(),
		withRolex:       atarq.withRolex.Clone(),
		// clone intermediate query.
		sql:    atarq.sql.Clone(),
		path:   atarq.path,
		unique: atarq.unique,
	}
}

// WithTenantAttrx tells the query-builder to eager-load the nodes that are connected to
// the "tenantAttrx" edge. The optional arguments are used to configure the query builder of the edge.
func (atarq *AsTenantAttrRoleQuery) WithTenantAttrx(opts ...func(*AsTenantAttrQuery)) *AsTenantAttrRoleQuery {
	query := &AsTenantAttrQuery{config: atarq.config}
	for _, opt := range opts {
		opt(query)
	}
	atarq.withTenantAttrx = query
	return atarq
}

// WithRolex tells the query-builder to eager-load the nodes that are connected to
// the "rolex" edge. The optional arguments are used to configure the query builder of the edge.
func (atarq *AsTenantAttrRoleQuery) WithRolex(opts ...func(*AsRoleQuery)) *AsTenantAttrRoleQuery {
	query := &AsRoleQuery{config: atarq.config}
	for _, opt := range opts {
		opt(query)
	}
	atarq.withRolex = query
	return atarq
}

// ThenTenantAttrx tells the query-builder to eager-load the nodes that are connected to
// the "tenantAttrx" edge. The optional arguments are used to configure the query builder of the edge.
func (atarq *AsTenantAttrRoleQuery) ThenTenantAttrx(opts ...func(*AsTenantAttrQuery)) *AsTenantAttrRoleQuery {
	query := &AsTenantAttrQuery{config: atarq.config}
	for _, opt := range opts {
		opt(query.Where(astenantattr.IsDeleted(0)))
	}
	atarq.withTenantAttrx = query
	return atarq
}

// ThenRolex tells the query-builder to eager-load the nodes that are connected to
// the "rolex" edge. The optional arguments are used to configure the query builder of the edge.
func (atarq *AsTenantAttrRoleQuery) ThenRolex(opts ...func(*AsRoleQuery)) *AsTenantAttrRoleQuery {
	query := &AsRoleQuery{config: atarq.config}
	for _, opt := range opts {
		opt(query.Where(asrole.IsDeleted(0)))
	}
	atarq.withRolex = query
	return atarq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		AttrID int64 `json:"attrId"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AsTenantAttrRole.Query().
//		GroupBy(astenantattrrole.FieldAttrID).
//		Aggregate(schema.Count()).
//		Scan(ctx, &v)
//
func (atarq *AsTenantAttrRoleQuery) GroupBy(field string, fields ...string) *AsTenantAttrRoleGroupBy {
	group := &AsTenantAttrRoleGroupBy{config: atarq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := atarq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return atarq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		AttrID int64 `json:"attrId"`
//	}
//
//	client.AsTenantAttrRole.Query().
//		Select(astenantattrrole.FieldAttrID).
//		Scan(ctx, &v)
//
func (atarq *AsTenantAttrRoleQuery) Select(fields ...string) *AsTenantAttrRoleSelect {
	atarq.fields = append(atarq.fields, fields...)
	return &AsTenantAttrRoleSelect{AsTenantAttrRoleQuery: atarq}
}

func (atarq *AsTenantAttrRoleQuery) prepareQuery(ctx context.Context) error {
	for _, f := range atarq.fields {
		if !astenantattrrole.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("schema: invalid field %q for query", f)}
		}
	}
	if atarq.path != nil {
		prev, err := atarq.path(ctx)
		if err != nil {
			return err
		}
		atarq.sql = prev
	}
	return nil
}

func (atarq *AsTenantAttrRoleQuery) sqlAll(ctx context.Context) ([]*AsTenantAttrRole, error) {
	var (
		nodes       = []*AsTenantAttrRole{}
		_spec       = atarq.querySpec()
		loadedTypes = [2]bool{
			atarq.withTenantAttrx != nil,
			atarq.withRolex != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &AsTenantAttrRole{config: atarq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("schema: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, atarq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := atarq.withTenantAttrx; query != nil {
		ids := make([]int64, 0, len(nodes))
		nodeids := make(map[int64][]*AsTenantAttrRole)
		for i := range nodes {
			fk := nodes[i].AttrID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(astenantattr.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "attr_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.TenantAttrx = n
			}
		}
	}

	if query := atarq.withRolex; query != nil {
		ids := make([]int64, 0, len(nodes))
		nodeids := make(map[int64][]*AsTenantAttrRole)
		for i := range nodes {
			fk := nodes[i].RoleID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(asrole.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "role_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Rolex = n
			}
		}
	}

	return nodes, nil
}

func (atarq *AsTenantAttrRoleQuery) sqlCount(ctx context.Context) (int64, error) {
	_spec := atarq.querySpec()
	_spec.Node.Columns = atarq.fields
	if len(atarq.fields) > 0 {
		_spec.Unique = atarq.unique != nil && *atarq.unique
	}
	c, err := sqlgraph.CountNodes(ctx, atarq.driver, _spec)
	return int64(c), err
}

func (atarq *AsTenantAttrRoleQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := atarq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("schema: check existence: %w", err)
	}
	return n > 0, nil
}

func (atarq *AsTenantAttrRoleQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   astenantattrrole.Table,
			Columns: astenantattrrole.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: astenantattrrole.FieldID,
			},
		},
		From:   atarq.sql,
		Unique: true,
	}
	if unique := atarq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := atarq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, astenantattrrole.FieldID)
		for i := range fields {
			if fields[i] != astenantattrrole.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := atarq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := atarq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := atarq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := atarq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (atarq *AsTenantAttrRoleQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(atarq.driver.Dialect())
	t1 := builder.Table(astenantattrrole.Table)
	columns := atarq.fields
	if len(columns) == 0 {
		columns = astenantattrrole.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if atarq.sql != nil {
		selector = atarq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if atarq.unique != nil && *atarq.unique {
		selector.Distinct()
	}
	for _, p := range atarq.predicates {
		p(selector)
	}
	for _, p := range atarq.order {
		p(selector)
	}
	if offset := atarq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := atarq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AsTenantAttrRoleGroupBy is the group-by builder for AsTenantAttrRole entities.
type AsTenantAttrRoleGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (atargb *AsTenantAttrRoleGroupBy) Aggregate(fns ...AggregateFunc) *AsTenantAttrRoleGroupBy {
	atargb.fns = append(atargb.fns, fns...)
	return atargb
}

// Scan applies the group-by query and scans the result into the given value.
func (atargb *AsTenantAttrRoleGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := atargb.path(ctx)
	if err != nil {
		return err
	}
	atargb.sql = query
	return atargb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (atargb *AsTenantAttrRoleGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := atargb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (atargb *AsTenantAttrRoleGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(atargb.fields) > 1 {
		return nil, errors.New("schema: AsTenantAttrRoleGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := atargb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (atargb *AsTenantAttrRoleGroupBy) StringsX(ctx context.Context) []string {
	v, err := atargb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (atargb *AsTenantAttrRoleGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = atargb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{astenantattrrole.Label}
	default:
		err = fmt.Errorf("schema: AsTenantAttrRoleGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (atargb *AsTenantAttrRoleGroupBy) StringX(ctx context.Context) string {
	v, err := atargb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (atargb *AsTenantAttrRoleGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(atargb.fields) > 1 {
		return nil, errors.New("schema: AsTenantAttrRoleGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := atargb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (atargb *AsTenantAttrRoleGroupBy) IntsX(ctx context.Context) []int {
	v, err := atargb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (atargb *AsTenantAttrRoleGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = atargb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{astenantattrrole.Label}
	default:
		err = fmt.Errorf("schema: AsTenantAttrRoleGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (atargb *AsTenantAttrRoleGroupBy) IntX(ctx context.Context) int {
	v, err := atargb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (atargb *AsTenantAttrRoleGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(atargb.fields) > 1 {
		return nil, errors.New("schema: AsTenantAttrRoleGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := atargb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (atargb *AsTenantAttrRoleGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := atargb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (atargb *AsTenantAttrRoleGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = atargb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{astenantattrrole.Label}
	default:
		err = fmt.Errorf("schema: AsTenantAttrRoleGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (atargb *AsTenantAttrRoleGroupBy) Float64X(ctx context.Context) float64 {
	v, err := atargb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (atargb *AsTenantAttrRoleGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(atargb.fields) > 1 {
		return nil, errors.New("schema: AsTenantAttrRoleGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := atargb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (atargb *AsTenantAttrRoleGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := atargb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (atargb *AsTenantAttrRoleGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = atargb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{astenantattrrole.Label}
	default:
		err = fmt.Errorf("schema: AsTenantAttrRoleGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (atargb *AsTenantAttrRoleGroupBy) BoolX(ctx context.Context) bool {
	v, err := atargb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64s returns list of int64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (atargb *AsTenantAttrRoleGroupBy) Int64s(ctx context.Context) ([]int64, error) {
	if len(atargb.fields) > 1 {
		return nil, errors.New("schema: AsTenantAttrRoleGroupBy.Int64s is not achievable when grouping more than 1 field")
	}
	var v []int64
	if err := atargb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Int64sX is like Int64s, but panics if an error occurs.
func (atargb *AsTenantAttrRoleGroupBy) Int64sX(ctx context.Context) []int64 {
	v, err := atargb.Int64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64 returns a single int64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (atargb *AsTenantAttrRoleGroupBy) Int64(ctx context.Context) (_ int64, err error) {
	var v []int64
	if v, err = atargb.Int64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{astenantattrrole.Label}
	default:
		err = fmt.Errorf("schema: AsTenantAttrRoleGroupBy.Int64s returned %d results when one was expected", len(v))
	}
	return
}

// Int64X is like Int64, but panics if an error occurs.
func (atargb *AsTenantAttrRoleGroupBy) Int64X(ctx context.Context) int64 {
	v, err := atargb.Int64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (atargb *AsTenantAttrRoleGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range atargb.fields {
		if !astenantattrrole.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := atargb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := atargb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (atargb *AsTenantAttrRoleGroupBy) sqlQuery() *sql.Selector {
	selector := atargb.sql.Select()
	aggregation := make([]string, 0, len(atargb.fns))
	for _, fn := range atargb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(atargb.fields)+len(atargb.fns))
		for _, f := range atargb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(atargb.fields...)...)
}

// AsTenantAttrRoleSelect is the builder for selecting fields of AsTenantAttrRole entities.
type AsTenantAttrRoleSelect struct {
	*AsTenantAttrRoleQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (atars *AsTenantAttrRoleSelect) Scan(ctx context.Context, v interface{}) error {
	if err := atars.prepareQuery(ctx); err != nil {
		return err
	}
	atars.sql = atars.AsTenantAttrRoleQuery.sqlQuery(ctx)
	return atars.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (atars *AsTenantAttrRoleSelect) ScanX(ctx context.Context, v interface{}) {
	if err := atars.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (atars *AsTenantAttrRoleSelect) Strings(ctx context.Context) ([]string, error) {
	if len(atars.fields) > 1 {
		return nil, errors.New("schema: AsTenantAttrRoleSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := atars.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (atars *AsTenantAttrRoleSelect) StringsX(ctx context.Context) []string {
	v, err := atars.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (atars *AsTenantAttrRoleSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = atars.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{astenantattrrole.Label}
	default:
		err = fmt.Errorf("schema: AsTenantAttrRoleSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (atars *AsTenantAttrRoleSelect) StringX(ctx context.Context) string {
	v, err := atars.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (atars *AsTenantAttrRoleSelect) Ints(ctx context.Context) ([]int, error) {
	if len(atars.fields) > 1 {
		return nil, errors.New("schema: AsTenantAttrRoleSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := atars.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (atars *AsTenantAttrRoleSelect) IntsX(ctx context.Context) []int {
	v, err := atars.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (atars *AsTenantAttrRoleSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = atars.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{astenantattrrole.Label}
	default:
		err = fmt.Errorf("schema: AsTenantAttrRoleSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (atars *AsTenantAttrRoleSelect) IntX(ctx context.Context) int {
	v, err := atars.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (atars *AsTenantAttrRoleSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(atars.fields) > 1 {
		return nil, errors.New("schema: AsTenantAttrRoleSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := atars.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (atars *AsTenantAttrRoleSelect) Float64sX(ctx context.Context) []float64 {
	v, err := atars.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (atars *AsTenantAttrRoleSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = atars.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{astenantattrrole.Label}
	default:
		err = fmt.Errorf("schema: AsTenantAttrRoleSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (atars *AsTenantAttrRoleSelect) Float64X(ctx context.Context) float64 {
	v, err := atars.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (atars *AsTenantAttrRoleSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(atars.fields) > 1 {
		return nil, errors.New("schema: AsTenantAttrRoleSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := atars.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (atars *AsTenantAttrRoleSelect) BoolsX(ctx context.Context) []bool {
	v, err := atars.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (atars *AsTenantAttrRoleSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = atars.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{astenantattrrole.Label}
	default:
		err = fmt.Errorf("schema: AsTenantAttrRoleSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (atars *AsTenantAttrRoleSelect) BoolX(ctx context.Context) bool {
	v, err := atars.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64s returns list of int64s from a selector. It is only allowed when selecting one field.
func (atars *AsTenantAttrRoleSelect) Int64s(ctx context.Context) ([]int64, error) {
	if len(atars.fields) > 1 {
		return nil, errors.New("schema: AsTenantAttrRoleSelect.Int64s is not achievable when selecting more than 1 field")
	}
	var v []int64
	if err := atars.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Int64sX is like Int64s, but panics if an error occurs.
func (atars *AsTenantAttrRoleSelect) Int64sX(ctx context.Context) []int64 {
	v, err := atars.Int64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64 returns a single int64 from a selector. It is only allowed when selecting one field.
func (atars *AsTenantAttrRoleSelect) Int64(ctx context.Context) (_ int64, err error) {
	var v []int64
	if v, err = atars.Int64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{astenantattrrole.Label}
	default:
		err = fmt.Errorf("schema: AsTenantAttrRoleSelect.Int64s returned %d results when one was expected", len(v))
	}
	return
}

// Int64X is like Int64, but panics if an error occurs.
func (atars *AsTenantAttrRoleSelect) Int64X(ctx context.Context) int64 {
	v, err := atars.Int64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (atars *AsTenantAttrRoleSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := atars.sql.Query()
	if err := atars.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
