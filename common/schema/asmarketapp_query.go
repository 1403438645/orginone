// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"
	"orginone/common/schema/asappgroupdistributiondata"
	"orginone/common/schema/asmarketapp"
	"orginone/common/schema/asmarketappalert"
	"orginone/common/schema/asmarketappcomponent"
	"orginone/common/schema/asmarketappgroupdistribution"
	"orginone/common/schema/asmarketappgroupdistributionrelation"
	"orginone/common/schema/asmarketappkeysecret"
	"orginone/common/schema/asmarketapppurchase"
	"orginone/common/schema/asmarketapprole"
	"orginone/common/schema/asmarketmenu"
	"orginone/common/schema/asmarketusedapp"
	"orginone/common/schema/asredeploydata"
	"orginone/common/schema/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsMarketAppQuery is the builder for querying AsMarketApp entities.
type AsMarketAppQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.AsMarketApp
	// eager-loading edges.
	withAppMenus                 *AsMarketMenuQuery
	withAppRoles                 *AsMarketAppRoleQuery
	withUseds                    *AsMarketUsedAppQuery
	withAppAlerts                *AsMarketAppAlertQuery
	withAppRedeploys             *AsRedeployDataQuery
	withAppKeys                  *AsMarketAppKeySecretQuery
	withAppPurchases             *AsMarketAppPurchaseQuery
	withAppComponents            *AsMarketAppComponentQuery
	withAppGroupDistribs         *AsMarketAppGroupDistributionQuery
	withAppGroupDistribConfigs   *AsAppGroupDistributionDataQuery
	withAppGroupDistribsRelation *AsMarketAppGroupDistributionRelationQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AsMarketAppQuery builder.
func (amaq *AsMarketAppQuery) Where(ps ...predicate.AsMarketApp) *AsMarketAppQuery {
	amaq.predicates = append(amaq.predicates, ps...)
	return amaq
}

// Limit adds a limit step to the query.
func (amaq *AsMarketAppQuery) Limit(limit int) *AsMarketAppQuery {
	amaq.limit = &limit
	return amaq
}

// Offset adds an offset step to the query.
func (amaq *AsMarketAppQuery) Offset(offset int) *AsMarketAppQuery {
	amaq.offset = &offset
	return amaq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (amaq *AsMarketAppQuery) Unique(unique bool) *AsMarketAppQuery {
	amaq.unique = &unique
	return amaq
}

// Order adds an order step to the query.
func (amaq *AsMarketAppQuery) Order(o ...OrderFunc) *AsMarketAppQuery {
	amaq.order = append(amaq.order, o...)
	return amaq
}

// QueryAppMenus chains the current query on the "appMenus" edge.
func (amaq *AsMarketAppQuery) QueryAppMenus() *AsMarketMenuQuery {
	query := &AsMarketMenuQuery{config: amaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := amaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := amaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketapp.Table, asmarketapp.FieldID, selector),
			sqlgraph.To(asmarketmenu.Table, asmarketmenu.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asmarketapp.AppMenusTable, asmarketapp.AppMenusColumn),
		)
		fromU = sqlgraph.SetNeighbors(amaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAppRoles chains the current query on the "appRoles" edge.
func (amaq *AsMarketAppQuery) QueryAppRoles() *AsMarketAppRoleQuery {
	query := &AsMarketAppRoleQuery{config: amaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := amaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := amaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketapp.Table, asmarketapp.FieldID, selector),
			sqlgraph.To(asmarketapprole.Table, asmarketapprole.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asmarketapp.AppRolesTable, asmarketapp.AppRolesColumn),
		)
		fromU = sqlgraph.SetNeighbors(amaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUseds chains the current query on the "useds" edge.
func (amaq *AsMarketAppQuery) QueryUseds() *AsMarketUsedAppQuery {
	query := &AsMarketUsedAppQuery{config: amaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := amaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := amaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketapp.Table, asmarketapp.FieldID, selector),
			sqlgraph.To(asmarketusedapp.Table, asmarketusedapp.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asmarketapp.UsedsTable, asmarketapp.UsedsColumn),
		)
		fromU = sqlgraph.SetNeighbors(amaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAppAlerts chains the current query on the "appAlerts" edge.
func (amaq *AsMarketAppQuery) QueryAppAlerts() *AsMarketAppAlertQuery {
	query := &AsMarketAppAlertQuery{config: amaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := amaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := amaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketapp.Table, asmarketapp.FieldID, selector),
			sqlgraph.To(asmarketappalert.Table, asmarketappalert.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asmarketapp.AppAlertsTable, asmarketapp.AppAlertsColumn),
		)
		fromU = sqlgraph.SetNeighbors(amaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAppRedeploys chains the current query on the "appRedeploys" edge.
func (amaq *AsMarketAppQuery) QueryAppRedeploys() *AsRedeployDataQuery {
	query := &AsRedeployDataQuery{config: amaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := amaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := amaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketapp.Table, asmarketapp.FieldID, selector),
			sqlgraph.To(asredeploydata.Table, asredeploydata.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asmarketapp.AppRedeploysTable, asmarketapp.AppRedeploysColumn),
		)
		fromU = sqlgraph.SetNeighbors(amaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAppKeys chains the current query on the "appKeys" edge.
func (amaq *AsMarketAppQuery) QueryAppKeys() *AsMarketAppKeySecretQuery {
	query := &AsMarketAppKeySecretQuery{config: amaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := amaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := amaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketapp.Table, asmarketapp.FieldID, selector),
			sqlgraph.To(asmarketappkeysecret.Table, asmarketappkeysecret.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asmarketapp.AppKeysTable, asmarketapp.AppKeysColumn),
		)
		fromU = sqlgraph.SetNeighbors(amaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAppPurchases chains the current query on the "appPurchases" edge.
func (amaq *AsMarketAppQuery) QueryAppPurchases() *AsMarketAppPurchaseQuery {
	query := &AsMarketAppPurchaseQuery{config: amaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := amaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := amaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketapp.Table, asmarketapp.FieldID, selector),
			sqlgraph.To(asmarketapppurchase.Table, asmarketapppurchase.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asmarketapp.AppPurchasesTable, asmarketapp.AppPurchasesColumn),
		)
		fromU = sqlgraph.SetNeighbors(amaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAppComponents chains the current query on the "appComponents" edge.
func (amaq *AsMarketAppQuery) QueryAppComponents() *AsMarketAppComponentQuery {
	query := &AsMarketAppComponentQuery{config: amaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := amaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := amaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketapp.Table, asmarketapp.FieldID, selector),
			sqlgraph.To(asmarketappcomponent.Table, asmarketappcomponent.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asmarketapp.AppComponentsTable, asmarketapp.AppComponentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(amaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAppGroupDistribs chains the current query on the "appGroupDistribs" edge.
func (amaq *AsMarketAppQuery) QueryAppGroupDistribs() *AsMarketAppGroupDistributionQuery {
	query := &AsMarketAppGroupDistributionQuery{config: amaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := amaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := amaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketapp.Table, asmarketapp.FieldID, selector),
			sqlgraph.To(asmarketappgroupdistribution.Table, asmarketappgroupdistribution.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asmarketapp.AppGroupDistribsTable, asmarketapp.AppGroupDistribsColumn),
		)
		fromU = sqlgraph.SetNeighbors(amaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAppGroupDistribConfigs chains the current query on the "appGroupDistribConfigs" edge.
func (amaq *AsMarketAppQuery) QueryAppGroupDistribConfigs() *AsAppGroupDistributionDataQuery {
	query := &AsAppGroupDistributionDataQuery{config: amaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := amaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := amaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketapp.Table, asmarketapp.FieldID, selector),
			sqlgraph.To(asappgroupdistributiondata.Table, asappgroupdistributiondata.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asmarketapp.AppGroupDistribConfigsTable, asmarketapp.AppGroupDistribConfigsColumn),
		)
		fromU = sqlgraph.SetNeighbors(amaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAppGroupDistribsRelation chains the current query on the "appGroupDistribsRelation" edge.
func (amaq *AsMarketAppQuery) QueryAppGroupDistribsRelation() *AsMarketAppGroupDistributionRelationQuery {
	query := &AsMarketAppGroupDistributionRelationQuery{config: amaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := amaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := amaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketapp.Table, asmarketapp.FieldID, selector),
			sqlgraph.To(asmarketappgroupdistributionrelation.Table, asmarketappgroupdistributionrelation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asmarketapp.AppGroupDistribsRelationTable, asmarketapp.AppGroupDistribsRelationColumn),
		)
		fromU = sqlgraph.SetNeighbors(amaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AsMarketApp entity from the query.
// Returns a *NotFoundError when no AsMarketApp was found.
func (amaq *AsMarketAppQuery) First(ctx context.Context) (*AsMarketApp, error) {
	nodes, err := amaq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{asmarketapp.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (amaq *AsMarketAppQuery) FirstX(ctx context.Context) *AsMarketApp {
	node, err := amaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AsMarketApp ID from the query.
// Returns a *NotFoundError when no AsMarketApp ID was found.
func (amaq *AsMarketAppQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = amaq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{asmarketapp.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (amaq *AsMarketAppQuery) FirstIDX(ctx context.Context) int64 {
	id, err := amaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AsMarketApp entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AsMarketApp entity is found.
// Returns a *NotFoundError when no AsMarketApp entities are found.
func (amaq *AsMarketAppQuery) Only(ctx context.Context) (*AsMarketApp, error) {
	nodes, err := amaq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{asmarketapp.Label}
	default:
		return nil, &NotSingularError{asmarketapp.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (amaq *AsMarketAppQuery) OnlyX(ctx context.Context) *AsMarketApp {
	node, err := amaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AsMarketApp ID in the query.
// Returns a *NotSingularError when more than one AsMarketApp ID is found.
// Returns a *NotFoundError when no entities are found.
func (amaq *AsMarketAppQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = amaq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{asmarketapp.Label}
	default:
		err = &NotSingularError{asmarketapp.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (amaq *AsMarketAppQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := amaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AsMarketApps.
func (amaq *AsMarketAppQuery) All(ctx context.Context) ([]*AsMarketApp, error) {
	if err := amaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return amaq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (amaq *AsMarketAppQuery) AllX(ctx context.Context) []*AsMarketApp {
	nodes, err := amaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AsMarketApp IDs.
func (amaq *AsMarketAppQuery) IDs(ctx context.Context) ([]int64, error) {
	var ids []int64
	if err := amaq.Select(asmarketapp.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (amaq *AsMarketAppQuery) IDsX(ctx context.Context) []int64 {
	ids, err := amaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (amaq *AsMarketAppQuery) Count(ctx context.Context) (int64, error) {
	if err := amaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return amaq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (amaq *AsMarketAppQuery) CountX(ctx context.Context) int64 {
	count, err := amaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (amaq *AsMarketAppQuery) Exist(ctx context.Context) (bool, error) {
	if err := amaq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return amaq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (amaq *AsMarketAppQuery) ExistX(ctx context.Context) bool {
	exist, err := amaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AsMarketAppQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (amaq *AsMarketAppQuery) Clone() *AsMarketAppQuery {
	if amaq == nil {
		return nil
	}
	return &AsMarketAppQuery{
		config:                       amaq.config,
		limit:                        amaq.limit,
		offset:                       amaq.offset,
		order:                        append([]OrderFunc{}, amaq.order...),
		predicates:                   append([]predicate.AsMarketApp{}, amaq.predicates...),
		withAppMenus:                 amaq.withAppMenus.Clone(),
		withAppRoles:                 amaq.withAppRoles.Clone(),
		withUseds:                    amaq.withUseds.Clone(),
		withAppAlerts:                amaq.withAppAlerts.Clone(),
		withAppRedeploys:             amaq.withAppRedeploys.Clone(),
		withAppKeys:                  amaq.withAppKeys.Clone(),
		withAppPurchases:             amaq.withAppPurchases.Clone(),
		withAppComponents:            amaq.withAppComponents.Clone(),
		withAppGroupDistribs:         amaq.withAppGroupDistribs.Clone(),
		withAppGroupDistribConfigs:   amaq.withAppGroupDistribConfigs.Clone(),
		withAppGroupDistribsRelation: amaq.withAppGroupDistribsRelation.Clone(),
		// clone intermediate query.
		sql:    amaq.sql.Clone(),
		path:   amaq.path,
		unique: amaq.unique,
	}
}

// WithAppMenus tells the query-builder to eager-load the nodes that are connected to
// the "appMenus" edge. The optional arguments are used to configure the query builder of the edge.
func (amaq *AsMarketAppQuery) WithAppMenus(opts ...func(*AsMarketMenuQuery)) *AsMarketAppQuery {
	query := &AsMarketMenuQuery{config: amaq.config}
	for _, opt := range opts {
		opt(query)
	}
	amaq.withAppMenus = query
	return amaq
}

// WithAppRoles tells the query-builder to eager-load the nodes that are connected to
// the "appRoles" edge. The optional arguments are used to configure the query builder of the edge.
func (amaq *AsMarketAppQuery) WithAppRoles(opts ...func(*AsMarketAppRoleQuery)) *AsMarketAppQuery {
	query := &AsMarketAppRoleQuery{config: amaq.config}
	for _, opt := range opts {
		opt(query)
	}
	amaq.withAppRoles = query
	return amaq
}

// WithUseds tells the query-builder to eager-load the nodes that are connected to
// the "useds" edge. The optional arguments are used to configure the query builder of the edge.
func (amaq *AsMarketAppQuery) WithUseds(opts ...func(*AsMarketUsedAppQuery)) *AsMarketAppQuery {
	query := &AsMarketUsedAppQuery{config: amaq.config}
	for _, opt := range opts {
		opt(query)
	}
	amaq.withUseds = query
	return amaq
}

// WithAppAlerts tells the query-builder to eager-load the nodes that are connected to
// the "appAlerts" edge. The optional arguments are used to configure the query builder of the edge.
func (amaq *AsMarketAppQuery) WithAppAlerts(opts ...func(*AsMarketAppAlertQuery)) *AsMarketAppQuery {
	query := &AsMarketAppAlertQuery{config: amaq.config}
	for _, opt := range opts {
		opt(query)
	}
	amaq.withAppAlerts = query
	return amaq
}

// WithAppRedeploys tells the query-builder to eager-load the nodes that are connected to
// the "appRedeploys" edge. The optional arguments are used to configure the query builder of the edge.
func (amaq *AsMarketAppQuery) WithAppRedeploys(opts ...func(*AsRedeployDataQuery)) *AsMarketAppQuery {
	query := &AsRedeployDataQuery{config: amaq.config}
	for _, opt := range opts {
		opt(query)
	}
	amaq.withAppRedeploys = query
	return amaq
}

// WithAppKeys tells the query-builder to eager-load the nodes that are connected to
// the "appKeys" edge. The optional arguments are used to configure the query builder of the edge.
func (amaq *AsMarketAppQuery) WithAppKeys(opts ...func(*AsMarketAppKeySecretQuery)) *AsMarketAppQuery {
	query := &AsMarketAppKeySecretQuery{config: amaq.config}
	for _, opt := range opts {
		opt(query)
	}
	amaq.withAppKeys = query
	return amaq
}

// WithAppPurchases tells the query-builder to eager-load the nodes that are connected to
// the "appPurchases" edge. The optional arguments are used to configure the query builder of the edge.
func (amaq *AsMarketAppQuery) WithAppPurchases(opts ...func(*AsMarketAppPurchaseQuery)) *AsMarketAppQuery {
	query := &AsMarketAppPurchaseQuery{config: amaq.config}
	for _, opt := range opts {
		opt(query)
	}
	amaq.withAppPurchases = query
	return amaq
}

// WithAppComponents tells the query-builder to eager-load the nodes that are connected to
// the "appComponents" edge. The optional arguments are used to configure the query builder of the edge.
func (amaq *AsMarketAppQuery) WithAppComponents(opts ...func(*AsMarketAppComponentQuery)) *AsMarketAppQuery {
	query := &AsMarketAppComponentQuery{config: amaq.config}
	for _, opt := range opts {
		opt(query)
	}
	amaq.withAppComponents = query
	return amaq
}

// WithAppGroupDistribs tells the query-builder to eager-load the nodes that are connected to
// the "appGroupDistribs" edge. The optional arguments are used to configure the query builder of the edge.
func (amaq *AsMarketAppQuery) WithAppGroupDistribs(opts ...func(*AsMarketAppGroupDistributionQuery)) *AsMarketAppQuery {
	query := &AsMarketAppGroupDistributionQuery{config: amaq.config}
	for _, opt := range opts {
		opt(query)
	}
	amaq.withAppGroupDistribs = query
	return amaq
}

// WithAppGroupDistribConfigs tells the query-builder to eager-load the nodes that are connected to
// the "appGroupDistribConfigs" edge. The optional arguments are used to configure the query builder of the edge.
func (amaq *AsMarketAppQuery) WithAppGroupDistribConfigs(opts ...func(*AsAppGroupDistributionDataQuery)) *AsMarketAppQuery {
	query := &AsAppGroupDistributionDataQuery{config: amaq.config}
	for _, opt := range opts {
		opt(query)
	}
	amaq.withAppGroupDistribConfigs = query
	return amaq
}

// WithAppGroupDistribsRelation tells the query-builder to eager-load the nodes that are connected to
// the "appGroupDistribsRelation" edge. The optional arguments are used to configure the query builder of the edge.
func (amaq *AsMarketAppQuery) WithAppGroupDistribsRelation(opts ...func(*AsMarketAppGroupDistributionRelationQuery)) *AsMarketAppQuery {
	query := &AsMarketAppGroupDistributionRelationQuery{config: amaq.config}
	for _, opt := range opts {
		opt(query)
	}
	amaq.withAppGroupDistribsRelation = query
	return amaq
}

// ThenAppMenus tells the query-builder to eager-load the nodes that are connected to
// the "appMenus" edge. The optional arguments are used to configure the query builder of the edge.
func (amaq *AsMarketAppQuery) ThenAppMenus(opts ...func(*AsMarketMenuQuery)) *AsMarketAppQuery {
	query := &AsMarketMenuQuery{config: amaq.config}
	for _, opt := range opts {
		opt(query.Where(asmarketmenu.IsDeleted(0)))
	}
	amaq.withAppMenus = query
	return amaq
}

// ThenAppRoles tells the query-builder to eager-load the nodes that are connected to
// the "appRoles" edge. The optional arguments are used to configure the query builder of the edge.
func (amaq *AsMarketAppQuery) ThenAppRoles(opts ...func(*AsMarketAppRoleQuery)) *AsMarketAppQuery {
	query := &AsMarketAppRoleQuery{config: amaq.config}
	for _, opt := range opts {
		opt(query.Where(asmarketapprole.IsDeleted(0)))
	}
	amaq.withAppRoles = query
	return amaq
}

// ThenUseds tells the query-builder to eager-load the nodes that are connected to
// the "useds" edge. The optional arguments are used to configure the query builder of the edge.
func (amaq *AsMarketAppQuery) ThenUseds(opts ...func(*AsMarketUsedAppQuery)) *AsMarketAppQuery {
	query := &AsMarketUsedAppQuery{config: amaq.config}
	for _, opt := range opts {
		opt(query.Where(asmarketusedapp.IsDeleted(0)))
	}
	amaq.withUseds = query
	return amaq
}

// ThenAppAlerts tells the query-builder to eager-load the nodes that are connected to
// the "appAlerts" edge. The optional arguments are used to configure the query builder of the edge.
func (amaq *AsMarketAppQuery) ThenAppAlerts(opts ...func(*AsMarketAppAlertQuery)) *AsMarketAppQuery {
	query := &AsMarketAppAlertQuery{config: amaq.config}
	for _, opt := range opts {
		opt(query.Where(asmarketappalert.IsDeleted(0)))
	}
	amaq.withAppAlerts = query
	return amaq
}

// ThenAppRedeploys tells the query-builder to eager-load the nodes that are connected to
// the "appRedeploys" edge. The optional arguments are used to configure the query builder of the edge.
func (amaq *AsMarketAppQuery) ThenAppRedeploys(opts ...func(*AsRedeployDataQuery)) *AsMarketAppQuery {
	query := &AsRedeployDataQuery{config: amaq.config}
	for _, opt := range opts {
		opt(query.Where(asredeploydata.IsDeleted(0)))
	}
	amaq.withAppRedeploys = query
	return amaq
}

// ThenAppKeys tells the query-builder to eager-load the nodes that are connected to
// the "appKeys" edge. The optional arguments are used to configure the query builder of the edge.
func (amaq *AsMarketAppQuery) ThenAppKeys(opts ...func(*AsMarketAppKeySecretQuery)) *AsMarketAppQuery {
	query := &AsMarketAppKeySecretQuery{config: amaq.config}
	for _, opt := range opts {
		opt(query.Where(asmarketappkeysecret.IsDeleted(0)))
	}
	amaq.withAppKeys = query
	return amaq
}

// ThenAppPurchases tells the query-builder to eager-load the nodes that are connected to
// the "appPurchases" edge. The optional arguments are used to configure the query builder of the edge.
func (amaq *AsMarketAppQuery) ThenAppPurchases(opts ...func(*AsMarketAppPurchaseQuery)) *AsMarketAppQuery {
	query := &AsMarketAppPurchaseQuery{config: amaq.config}
	for _, opt := range opts {
		opt(query.Where(asmarketapppurchase.IsDeleted(0)))
	}
	amaq.withAppPurchases = query
	return amaq
}

// ThenAppComponents tells the query-builder to eager-load the nodes that are connected to
// the "appComponents" edge. The optional arguments are used to configure the query builder of the edge.
func (amaq *AsMarketAppQuery) ThenAppComponents(opts ...func(*AsMarketAppComponentQuery)) *AsMarketAppQuery {
	query := &AsMarketAppComponentQuery{config: amaq.config}
	for _, opt := range opts {
		opt(query.Where(asmarketappcomponent.IsDeleted(0)))
	}
	amaq.withAppComponents = query
	return amaq
}

// ThenAppGroupDistribs tells the query-builder to eager-load the nodes that are connected to
// the "appGroupDistribs" edge. The optional arguments are used to configure the query builder of the edge.
func (amaq *AsMarketAppQuery) ThenAppGroupDistribs(opts ...func(*AsMarketAppGroupDistributionQuery)) *AsMarketAppQuery {
	query := &AsMarketAppGroupDistributionQuery{config: amaq.config}
	for _, opt := range opts {
		opt(query.Where(asmarketappgroupdistribution.IsDeleted(0)))
	}
	amaq.withAppGroupDistribs = query
	return amaq
}

// ThenAppGroupDistribConfigs tells the query-builder to eager-load the nodes that are connected to
// the "appGroupDistribConfigs" edge. The optional arguments are used to configure the query builder of the edge.
func (amaq *AsMarketAppQuery) ThenAppGroupDistribConfigs(opts ...func(*AsAppGroupDistributionDataQuery)) *AsMarketAppQuery {
	query := &AsAppGroupDistributionDataQuery{config: amaq.config}
	for _, opt := range opts {
		opt(query.Where(asappgroupdistributiondata.IsDeleted(0)))
	}
	amaq.withAppGroupDistribConfigs = query
	return amaq
}

// ThenAppGroupDistribsRelation tells the query-builder to eager-load the nodes that are connected to
// the "appGroupDistribsRelation" edge. The optional arguments are used to configure the query builder of the edge.
func (amaq *AsMarketAppQuery) ThenAppGroupDistribsRelation(opts ...func(*AsMarketAppGroupDistributionRelationQuery)) *AsMarketAppQuery {
	query := &AsMarketAppGroupDistributionRelationQuery{config: amaq.config}
	for _, opt := range opts {
		opt(query.Where(asmarketappgroupdistributionrelation.IsDeleted(0)))
	}
	amaq.withAppGroupDistribsRelation = query
	return amaq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		AppName string `json:"appName"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AsMarketApp.Query().
//		GroupBy(asmarketapp.FieldAppName).
//		Aggregate(schema.Count()).
//		Scan(ctx, &v)
//
func (amaq *AsMarketAppQuery) GroupBy(field string, fields ...string) *AsMarketAppGroupBy {
	group := &AsMarketAppGroupBy{config: amaq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := amaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return amaq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		AppName string `json:"appName"`
//	}
//
//	client.AsMarketApp.Query().
//		Select(asmarketapp.FieldAppName).
//		Scan(ctx, &v)
//
func (amaq *AsMarketAppQuery) Select(fields ...string) *AsMarketAppSelect {
	amaq.fields = append(amaq.fields, fields...)
	return &AsMarketAppSelect{AsMarketAppQuery: amaq}
}

func (amaq *AsMarketAppQuery) prepareQuery(ctx context.Context) error {
	for _, f := range amaq.fields {
		if !asmarketapp.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("schema: invalid field %q for query", f)}
		}
	}
	if amaq.path != nil {
		prev, err := amaq.path(ctx)
		if err != nil {
			return err
		}
		amaq.sql = prev
	}
	return nil
}

func (amaq *AsMarketAppQuery) sqlAll(ctx context.Context) ([]*AsMarketApp, error) {
	var (
		nodes       = []*AsMarketApp{}
		_spec       = amaq.querySpec()
		loadedTypes = [11]bool{
			amaq.withAppMenus != nil,
			amaq.withAppRoles != nil,
			amaq.withUseds != nil,
			amaq.withAppAlerts != nil,
			amaq.withAppRedeploys != nil,
			amaq.withAppKeys != nil,
			amaq.withAppPurchases != nil,
			amaq.withAppComponents != nil,
			amaq.withAppGroupDistribs != nil,
			amaq.withAppGroupDistribConfigs != nil,
			amaq.withAppGroupDistribsRelation != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &AsMarketApp{config: amaq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("schema: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, amaq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := amaq.withAppMenus; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int64]*AsMarketApp)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.AppMenus = []*AsMarketMenu{}
		}
		query.Where(predicate.AsMarketMenu(func(s *sql.Selector) {
			s.Where(sql.InValues(asmarketapp.AppMenusColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.AppID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "app_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.AppMenus = append(node.Edges.AppMenus, n)
		}
	}

	if query := amaq.withAppRoles; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int64]*AsMarketApp)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.AppRoles = []*AsMarketAppRole{}
		}
		query.Where(predicate.AsMarketAppRole(func(s *sql.Selector) {
			s.Where(sql.InValues(asmarketapp.AppRolesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.AppID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "app_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.AppRoles = append(node.Edges.AppRoles, n)
		}
	}

	if query := amaq.withUseds; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int64]*AsMarketApp)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Useds = []*AsMarketUsedApp{}
		}
		query.Where(predicate.AsMarketUsedApp(func(s *sql.Selector) {
			s.Where(sql.InValues(asmarketapp.UsedsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.AppID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "app_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.Useds = append(node.Edges.Useds, n)
		}
	}

	if query := amaq.withAppAlerts; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int64]*AsMarketApp)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.AppAlerts = []*AsMarketAppAlert{}
		}
		query.Where(predicate.AsMarketAppAlert(func(s *sql.Selector) {
			s.Where(sql.InValues(asmarketapp.AppAlertsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.AlertReleaseAppID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "alert_release_app_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.AppAlerts = append(node.Edges.AppAlerts, n)
		}
	}

	if query := amaq.withAppRedeploys; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int64]*AsMarketApp)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.AppRedeploys = []*AsRedeployData{}
		}
		query.Where(predicate.AsRedeployData(func(s *sql.Selector) {
			s.Where(sql.InValues(asmarketapp.AppRedeploysColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.AppID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "app_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.AppRedeploys = append(node.Edges.AppRedeploys, n)
		}
	}

	if query := amaq.withAppKeys; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int64]*AsMarketApp)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.AppKeys = []*AsMarketAppKeySecret{}
		}
		query.Where(predicate.AsMarketAppKeySecret(func(s *sql.Selector) {
			s.Where(sql.InValues(asmarketapp.AppKeysColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.AppID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "app_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.AppKeys = append(node.Edges.AppKeys, n)
		}
	}

	if query := amaq.withAppPurchases; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int64]*AsMarketApp)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.AppPurchases = []*AsMarketAppPurchase{}
		}
		query.Where(predicate.AsMarketAppPurchase(func(s *sql.Selector) {
			s.Where(sql.InValues(asmarketapp.AppPurchasesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.AppID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "app_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.AppPurchases = append(node.Edges.AppPurchases, n)
		}
	}

	if query := amaq.withAppComponents; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int64]*AsMarketApp)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.AppComponents = []*AsMarketAppComponent{}
		}
		query.Where(predicate.AsMarketAppComponent(func(s *sql.Selector) {
			s.Where(sql.InValues(asmarketapp.AppComponentsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.AppID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "app_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.AppComponents = append(node.Edges.AppComponents, n)
		}
	}

	if query := amaq.withAppGroupDistribs; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int64]*AsMarketApp)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.AppGroupDistribs = []*AsMarketAppGroupDistribution{}
		}
		query.Where(predicate.AsMarketAppGroupDistribution(func(s *sql.Selector) {
			s.Where(sql.InValues(asmarketapp.AppGroupDistribsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.AppID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "app_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.AppGroupDistribs = append(node.Edges.AppGroupDistribs, n)
		}
	}

	if query := amaq.withAppGroupDistribConfigs; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int64]*AsMarketApp)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.AppGroupDistribConfigs = []*AsAppGroupDistributionData{}
		}
		query.Where(predicate.AsAppGroupDistributionData(func(s *sql.Selector) {
			s.Where(sql.InValues(asmarketapp.AppGroupDistribConfigsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.AppID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "app_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.AppGroupDistribConfigs = append(node.Edges.AppGroupDistribConfigs, n)
		}
	}

	if query := amaq.withAppGroupDistribsRelation; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int64]*AsMarketApp)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.AppGroupDistribsRelation = []*AsMarketAppGroupDistributionRelation{}
		}
		query.Where(predicate.AsMarketAppGroupDistributionRelation(func(s *sql.Selector) {
			s.Where(sql.InValues(asmarketapp.AppGroupDistribsRelationColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.AppID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "app_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.AppGroupDistribsRelation = append(node.Edges.AppGroupDistribsRelation, n)
		}
	}

	return nodes, nil
}

func (amaq *AsMarketAppQuery) sqlCount(ctx context.Context) (int64, error) {
	_spec := amaq.querySpec()
	_spec.Node.Columns = amaq.fields
	if len(amaq.fields) > 0 {
		_spec.Unique = amaq.unique != nil && *amaq.unique
	}
	c, err := sqlgraph.CountNodes(ctx, amaq.driver, _spec)
	return int64(c), err
}

func (amaq *AsMarketAppQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := amaq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("schema: check existence: %w", err)
	}
	return n > 0, nil
}

func (amaq *AsMarketAppQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asmarketapp.Table,
			Columns: asmarketapp.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asmarketapp.FieldID,
			},
		},
		From:   amaq.sql,
		Unique: true,
	}
	if unique := amaq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := amaq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asmarketapp.FieldID)
		for i := range fields {
			if fields[i] != asmarketapp.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := amaq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := amaq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := amaq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := amaq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (amaq *AsMarketAppQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(amaq.driver.Dialect())
	t1 := builder.Table(asmarketapp.Table)
	columns := amaq.fields
	if len(columns) == 0 {
		columns = asmarketapp.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if amaq.sql != nil {
		selector = amaq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if amaq.unique != nil && *amaq.unique {
		selector.Distinct()
	}
	for _, p := range amaq.predicates {
		p(selector)
	}
	for _, p := range amaq.order {
		p(selector)
	}
	if offset := amaq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := amaq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AsMarketAppGroupBy is the group-by builder for AsMarketApp entities.
type AsMarketAppGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (amagb *AsMarketAppGroupBy) Aggregate(fns ...AggregateFunc) *AsMarketAppGroupBy {
	amagb.fns = append(amagb.fns, fns...)
	return amagb
}

// Scan applies the group-by query and scans the result into the given value.
func (amagb *AsMarketAppGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := amagb.path(ctx)
	if err != nil {
		return err
	}
	amagb.sql = query
	return amagb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (amagb *AsMarketAppGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := amagb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (amagb *AsMarketAppGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(amagb.fields) > 1 {
		return nil, errors.New("schema: AsMarketAppGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := amagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (amagb *AsMarketAppGroupBy) StringsX(ctx context.Context) []string {
	v, err := amagb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (amagb *AsMarketAppGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = amagb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketapp.Label}
	default:
		err = fmt.Errorf("schema: AsMarketAppGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (amagb *AsMarketAppGroupBy) StringX(ctx context.Context) string {
	v, err := amagb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (amagb *AsMarketAppGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(amagb.fields) > 1 {
		return nil, errors.New("schema: AsMarketAppGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := amagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (amagb *AsMarketAppGroupBy) IntsX(ctx context.Context) []int {
	v, err := amagb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (amagb *AsMarketAppGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = amagb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketapp.Label}
	default:
		err = fmt.Errorf("schema: AsMarketAppGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (amagb *AsMarketAppGroupBy) IntX(ctx context.Context) int {
	v, err := amagb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (amagb *AsMarketAppGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(amagb.fields) > 1 {
		return nil, errors.New("schema: AsMarketAppGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := amagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (amagb *AsMarketAppGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := amagb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (amagb *AsMarketAppGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = amagb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketapp.Label}
	default:
		err = fmt.Errorf("schema: AsMarketAppGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (amagb *AsMarketAppGroupBy) Float64X(ctx context.Context) float64 {
	v, err := amagb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (amagb *AsMarketAppGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(amagb.fields) > 1 {
		return nil, errors.New("schema: AsMarketAppGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := amagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (amagb *AsMarketAppGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := amagb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (amagb *AsMarketAppGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = amagb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketapp.Label}
	default:
		err = fmt.Errorf("schema: AsMarketAppGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (amagb *AsMarketAppGroupBy) BoolX(ctx context.Context) bool {
	v, err := amagb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64s returns list of int64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (amagb *AsMarketAppGroupBy) Int64s(ctx context.Context) ([]int64, error) {
	if len(amagb.fields) > 1 {
		return nil, errors.New("schema: AsMarketAppGroupBy.Int64s is not achievable when grouping more than 1 field")
	}
	var v []int64
	if err := amagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Int64sX is like Int64s, but panics if an error occurs.
func (amagb *AsMarketAppGroupBy) Int64sX(ctx context.Context) []int64 {
	v, err := amagb.Int64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64 returns a single int64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (amagb *AsMarketAppGroupBy) Int64(ctx context.Context) (_ int64, err error) {
	var v []int64
	if v, err = amagb.Int64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketapp.Label}
	default:
		err = fmt.Errorf("schema: AsMarketAppGroupBy.Int64s returned %d results when one was expected", len(v))
	}
	return
}

// Int64X is like Int64, but panics if an error occurs.
func (amagb *AsMarketAppGroupBy) Int64X(ctx context.Context) int64 {
	v, err := amagb.Int64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (amagb *AsMarketAppGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range amagb.fields {
		if !asmarketapp.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := amagb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := amagb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (amagb *AsMarketAppGroupBy) sqlQuery() *sql.Selector {
	selector := amagb.sql.Select()
	aggregation := make([]string, 0, len(amagb.fns))
	for _, fn := range amagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(amagb.fields)+len(amagb.fns))
		for _, f := range amagb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(amagb.fields...)...)
}

// AsMarketAppSelect is the builder for selecting fields of AsMarketApp entities.
type AsMarketAppSelect struct {
	*AsMarketAppQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (amas *AsMarketAppSelect) Scan(ctx context.Context, v interface{}) error {
	if err := amas.prepareQuery(ctx); err != nil {
		return err
	}
	amas.sql = amas.AsMarketAppQuery.sqlQuery(ctx)
	return amas.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (amas *AsMarketAppSelect) ScanX(ctx context.Context, v interface{}) {
	if err := amas.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (amas *AsMarketAppSelect) Strings(ctx context.Context) ([]string, error) {
	if len(amas.fields) > 1 {
		return nil, errors.New("schema: AsMarketAppSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := amas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (amas *AsMarketAppSelect) StringsX(ctx context.Context) []string {
	v, err := amas.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (amas *AsMarketAppSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = amas.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketapp.Label}
	default:
		err = fmt.Errorf("schema: AsMarketAppSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (amas *AsMarketAppSelect) StringX(ctx context.Context) string {
	v, err := amas.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (amas *AsMarketAppSelect) Ints(ctx context.Context) ([]int, error) {
	if len(amas.fields) > 1 {
		return nil, errors.New("schema: AsMarketAppSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := amas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (amas *AsMarketAppSelect) IntsX(ctx context.Context) []int {
	v, err := amas.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (amas *AsMarketAppSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = amas.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketapp.Label}
	default:
		err = fmt.Errorf("schema: AsMarketAppSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (amas *AsMarketAppSelect) IntX(ctx context.Context) int {
	v, err := amas.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (amas *AsMarketAppSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(amas.fields) > 1 {
		return nil, errors.New("schema: AsMarketAppSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := amas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (amas *AsMarketAppSelect) Float64sX(ctx context.Context) []float64 {
	v, err := amas.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (amas *AsMarketAppSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = amas.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketapp.Label}
	default:
		err = fmt.Errorf("schema: AsMarketAppSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (amas *AsMarketAppSelect) Float64X(ctx context.Context) float64 {
	v, err := amas.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (amas *AsMarketAppSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(amas.fields) > 1 {
		return nil, errors.New("schema: AsMarketAppSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := amas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (amas *AsMarketAppSelect) BoolsX(ctx context.Context) []bool {
	v, err := amas.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (amas *AsMarketAppSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = amas.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketapp.Label}
	default:
		err = fmt.Errorf("schema: AsMarketAppSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (amas *AsMarketAppSelect) BoolX(ctx context.Context) bool {
	v, err := amas.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64s returns list of int64s from a selector. It is only allowed when selecting one field.
func (amas *AsMarketAppSelect) Int64s(ctx context.Context) ([]int64, error) {
	if len(amas.fields) > 1 {
		return nil, errors.New("schema: AsMarketAppSelect.Int64s is not achievable when selecting more than 1 field")
	}
	var v []int64
	if err := amas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Int64sX is like Int64s, but panics if an error occurs.
func (amas *AsMarketAppSelect) Int64sX(ctx context.Context) []int64 {
	v, err := amas.Int64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64 returns a single int64 from a selector. It is only allowed when selecting one field.
func (amas *AsMarketAppSelect) Int64(ctx context.Context) (_ int64, err error) {
	var v []int64
	if v, err = amas.Int64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketapp.Label}
	default:
		err = fmt.Errorf("schema: AsMarketAppSelect.Int64s returned %d results when one was expected", len(v))
	}
	return
}

// Int64X is like Int64, but panics if an error occurs.
func (amas *AsMarketAppSelect) Int64X(ctx context.Context) int64 {
	v, err := amas.Int64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (amas *AsMarketAppSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := amas.sql.Query()
	if err := amas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
