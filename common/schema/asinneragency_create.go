// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/asinneragency"
	"orginone/common/schema/asjob"
	"orginone/common/schema/asmarketroledistribution"
	"orginone/common/schema/asperson"
	"orginone/common/schema/asuser"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsInnerAgencyCreate is the builder for creating a AsInnerAgency entity.
type AsInnerAgencyCreate struct {
	config
	mutation *AsInnerAgencyMutation
	hooks    []Hook
}

// SetAgencyName sets the "agency_name" field.
func (aiac *AsInnerAgencyCreate) SetAgencyName(s string) *AsInnerAgencyCreate {
	aiac.mutation.SetAgencyName(s)
	return aiac
}

// SetAgencyCode sets the "agency_code" field.
func (aiac *AsInnerAgencyCreate) SetAgencyCode(s string) *AsInnerAgencyCreate {
	aiac.mutation.SetAgencyCode(s)
	return aiac
}

// SetNillableAgencyCode sets the "agency_code" field if the given value is not nil.
func (aiac *AsInnerAgencyCreate) SetNillableAgencyCode(s *string) *AsInnerAgencyCreate {
	if s != nil {
		aiac.SetAgencyCode(*s)
	}
	return aiac
}

// SetTenantCode sets the "tenant_code" field.
func (aiac *AsInnerAgencyCreate) SetTenantCode(s string) *AsInnerAgencyCreate {
	aiac.mutation.SetTenantCode(s)
	return aiac
}

// SetParentID sets the "parent_id" field.
func (aiac *AsInnerAgencyCreate) SetParentID(i int64) *AsInnerAgencyCreate {
	aiac.mutation.SetParentID(i)
	return aiac
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (aiac *AsInnerAgencyCreate) SetNillableParentID(i *int64) *AsInnerAgencyCreate {
	if i != nil {
		aiac.SetParentID(*i)
	}
	return aiac
}

// SetIsDeleted sets the "is_deleted" field.
func (aiac *AsInnerAgencyCreate) SetIsDeleted(i int64) *AsInnerAgencyCreate {
	aiac.mutation.SetIsDeleted(i)
	return aiac
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (aiac *AsInnerAgencyCreate) SetNillableIsDeleted(i *int64) *AsInnerAgencyCreate {
	if i != nil {
		aiac.SetIsDeleted(*i)
	}
	return aiac
}

// SetStatus sets the "status" field.
func (aiac *AsInnerAgencyCreate) SetStatus(i int64) *AsInnerAgencyCreate {
	aiac.mutation.SetStatus(i)
	return aiac
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (aiac *AsInnerAgencyCreate) SetNillableStatus(i *int64) *AsInnerAgencyCreate {
	if i != nil {
		aiac.SetStatus(*i)
	}
	return aiac
}

// SetCreateUser sets the "create_user" field.
func (aiac *AsInnerAgencyCreate) SetCreateUser(i int64) *AsInnerAgencyCreate {
	aiac.mutation.SetCreateUser(i)
	return aiac
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (aiac *AsInnerAgencyCreate) SetNillableCreateUser(i *int64) *AsInnerAgencyCreate {
	if i != nil {
		aiac.SetCreateUser(*i)
	}
	return aiac
}

// SetUpdateUser sets the "update_user" field.
func (aiac *AsInnerAgencyCreate) SetUpdateUser(i int64) *AsInnerAgencyCreate {
	aiac.mutation.SetUpdateUser(i)
	return aiac
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (aiac *AsInnerAgencyCreate) SetNillableUpdateUser(i *int64) *AsInnerAgencyCreate {
	if i != nil {
		aiac.SetUpdateUser(*i)
	}
	return aiac
}

// SetCreateTime sets the "create_time" field.
func (aiac *AsInnerAgencyCreate) SetCreateTime(dt date.DateTime) *AsInnerAgencyCreate {
	aiac.mutation.SetCreateTime(dt)
	return aiac
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (aiac *AsInnerAgencyCreate) SetNillableCreateTime(dt *date.DateTime) *AsInnerAgencyCreate {
	if dt != nil {
		aiac.SetCreateTime(*dt)
	}
	return aiac
}

// SetUpdateTime sets the "update_time" field.
func (aiac *AsInnerAgencyCreate) SetUpdateTime(dt date.DateTime) *AsInnerAgencyCreate {
	aiac.mutation.SetUpdateTime(dt)
	return aiac
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (aiac *AsInnerAgencyCreate) SetNillableUpdateTime(dt *date.DateTime) *AsInnerAgencyCreate {
	if dt != nil {
		aiac.SetUpdateTime(*dt)
	}
	return aiac
}

// SetID sets the "id" field.
func (aiac *AsInnerAgencyCreate) SetID(i int64) *AsInnerAgencyCreate {
	aiac.mutation.SetID(i)
	return aiac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (aiac *AsInnerAgencyCreate) SetNillableID(i *int64) *AsInnerAgencyCreate {
	if i != nil {
		aiac.SetID(*i)
	}
	return aiac
}

// SetParent sets the "parent" edge to the AsInnerAgency entity.
func (aiac *AsInnerAgencyCreate) SetParent(a *AsInnerAgency) *AsInnerAgencyCreate {
	return aiac.SetParentID(a.ID)
}

// AddChildrenIDs adds the "childrens" edge to the AsInnerAgency entity by IDs.
func (aiac *AsInnerAgencyCreate) AddChildrenIDs(ids ...int64) *AsInnerAgencyCreate {
	aiac.mutation.AddChildrenIDs(ids...)
	return aiac
}

// AddChildrens adds the "childrens" edges to the AsInnerAgency entity.
func (aiac *AsInnerAgencyCreate) AddChildrens(a ...*AsInnerAgency) *AsInnerAgencyCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aiac.AddChildrenIDs(ids...)
}

// AddJobIDs adds the "jobs" edge to the AsJob entity by IDs.
func (aiac *AsInnerAgencyCreate) AddJobIDs(ids ...int64) *AsInnerAgencyCreate {
	aiac.mutation.AddJobIDs(ids...)
	return aiac
}

// AddJobs adds the "jobs" edges to the AsJob entity.
func (aiac *AsInnerAgencyCreate) AddJobs(a ...*AsJob) *AsInnerAgencyCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aiac.AddJobIDs(ids...)
}

// AddUserIDs adds the "users" edge to the AsUser entity by IDs.
func (aiac *AsInnerAgencyCreate) AddUserIDs(ids ...int64) *AsInnerAgencyCreate {
	aiac.mutation.AddUserIDs(ids...)
	return aiac
}

// AddUsers adds the "users" edges to the AsUser entity.
func (aiac *AsInnerAgencyCreate) AddUsers(a ...*AsUser) *AsInnerAgencyCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aiac.AddUserIDs(ids...)
}

// AddPersonIDs adds the "persons" edge to the AsPerson entity by IDs.
func (aiac *AsInnerAgencyCreate) AddPersonIDs(ids ...int64) *AsInnerAgencyCreate {
	aiac.mutation.AddPersonIDs(ids...)
	return aiac
}

// AddPersons adds the "persons" edges to the AsPerson entity.
func (aiac *AsInnerAgencyCreate) AddPersons(a ...*AsPerson) *AsInnerAgencyCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aiac.AddPersonIDs(ids...)
}

// AddRoleDistribIDs adds the "roleDistribs" edge to the AsMarketRoleDistribution entity by IDs.
func (aiac *AsInnerAgencyCreate) AddRoleDistribIDs(ids ...int64) *AsInnerAgencyCreate {
	aiac.mutation.AddRoleDistribIDs(ids...)
	return aiac
}

// AddRoleDistribs adds the "roleDistribs" edges to the AsMarketRoleDistribution entity.
func (aiac *AsInnerAgencyCreate) AddRoleDistribs(a ...*AsMarketRoleDistribution) *AsInnerAgencyCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aiac.AddRoleDistribIDs(ids...)
}

// Mutation returns the AsInnerAgencyMutation object of the builder.
func (aiac *AsInnerAgencyCreate) Mutation() *AsInnerAgencyMutation {
	return aiac.mutation
}

// Save creates the AsInnerAgency in the database.
func (aiac *AsInnerAgencyCreate) Save(ctx context.Context) (*AsInnerAgency, error) {
	var (
		err  error
		node *AsInnerAgency
	)
	aiac.defaults()
	if len(aiac.hooks) == 0 {
		if err = aiac.check(); err != nil {
			return nil, err
		}
		node, err = aiac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsInnerAgencyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aiac.check(); err != nil {
				return nil, err
			}
			aiac.mutation = mutation
			if node, err = aiac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(aiac.hooks) - 1; i >= 0; i-- {
			if aiac.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = aiac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aiac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (aiac *AsInnerAgencyCreate) SaveX(ctx context.Context) *AsInnerAgency {
	v, err := aiac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aiac *AsInnerAgencyCreate) Exec(ctx context.Context) error {
	_, err := aiac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aiac *AsInnerAgencyCreate) ExecX(ctx context.Context) {
	if err := aiac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aiac *AsInnerAgencyCreate) defaults() {
	if _, ok := aiac.mutation.IsDeleted(); !ok {
		v := asinneragency.DefaultIsDeleted
		aiac.mutation.SetIsDeleted(v)
	}
	if _, ok := aiac.mutation.Status(); !ok {
		v := asinneragency.DefaultStatus
		aiac.mutation.SetStatus(v)
	}
	if _, ok := aiac.mutation.CreateTime(); !ok {
		v := asinneragency.DefaultCreateTime()
		aiac.mutation.SetCreateTime(v)
	}
	if _, ok := aiac.mutation.UpdateTime(); !ok {
		v := asinneragency.DefaultUpdateTime()
		aiac.mutation.SetUpdateTime(v)
	}
	if _, ok := aiac.mutation.ID(); !ok {
		v := asinneragency.DefaultID()
		aiac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aiac *AsInnerAgencyCreate) check() error {
	if _, ok := aiac.mutation.AgencyName(); !ok {
		return &ValidationError{Name: "agency_name", err: errors.New(`schema: missing required field "AsInnerAgency.agency_name"`)}
	}
	if _, ok := aiac.mutation.TenantCode(); !ok {
		return &ValidationError{Name: "tenant_code", err: errors.New(`schema: missing required field "AsInnerAgency.tenant_code"`)}
	}
	if _, ok := aiac.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "is_deleted", err: errors.New(`schema: missing required field "AsInnerAgency.is_deleted"`)}
	}
	return nil
}

func (aiac *AsInnerAgencyCreate) sqlSave(ctx context.Context) (*AsInnerAgency, error) {
	_node, _spec := aiac.createSpec()
	if err := sqlgraph.CreateNode(ctx, aiac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (aiac *AsInnerAgencyCreate) createSpec() (*AsInnerAgency, *sqlgraph.CreateSpec) {
	var (
		_node = &AsInnerAgency{config: aiac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: asinneragency.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asinneragency.FieldID,
			},
		}
	)
	if id, ok := aiac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := aiac.mutation.AgencyName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asinneragency.FieldAgencyName,
		})
		_node.AgencyName = value
	}
	if value, ok := aiac.mutation.AgencyCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asinneragency.FieldAgencyCode,
		})
		_node.AgencyCode = value
	}
	if value, ok := aiac.mutation.TenantCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asinneragency.FieldTenantCode,
		})
		_node.TenantCode = value
	}
	if value, ok := aiac.mutation.IsDeleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinneragency.FieldIsDeleted,
		})
		_node.IsDeleted = value
	}
	if value, ok := aiac.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinneragency.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := aiac.mutation.CreateUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinneragency.FieldCreateUser,
		})
		_node.CreateUser = value
	}
	if value, ok := aiac.mutation.UpdateUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinneragency.FieldUpdateUser,
		})
		_node.UpdateUser = value
	}
	if value, ok := aiac.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asinneragency.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := aiac.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asinneragency.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if nodes := aiac.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asinneragency.ParentTable,
			Columns: []string{asinneragency.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asinneragency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := aiac.mutation.ChildrensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asinneragency.ChildrensTable,
			Columns: []string{asinneragency.ChildrensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asinneragency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := aiac.mutation.JobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asinneragency.JobsTable,
			Columns: asinneragency.JobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asjob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := aiac.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asinneragency.UsersTable,
			Columns: asinneragency.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := aiac.mutation.PersonsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asinneragency.PersonsTable,
			Columns: asinneragency.PersonsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asperson.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := aiac.mutation.RoleDistribsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asinneragency.RoleDistribsTable,
			Columns: []string{asinneragency.RoleDistribsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketroledistribution.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AsInnerAgencyCreateBulk is the builder for creating many AsInnerAgency entities in bulk.
type AsInnerAgencyCreateBulk struct {
	config
	builders []*AsInnerAgencyCreate
}

// Save creates the AsInnerAgency entities in the database.
func (aiacb *AsInnerAgencyCreateBulk) Save(ctx context.Context) ([]*AsInnerAgency, error) {
	specs := make([]*sqlgraph.CreateSpec, len(aiacb.builders))
	nodes := make([]*AsInnerAgency, len(aiacb.builders))
	mutators := make([]Mutator, len(aiacb.builders))
	for i := range aiacb.builders {
		func(i int, root context.Context) {
			builder := aiacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AsInnerAgencyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aiacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aiacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aiacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aiacb *AsInnerAgencyCreateBulk) SaveX(ctx context.Context) []*AsInnerAgency {
	v, err := aiacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aiacb *AsInnerAgencyCreateBulk) Exec(ctx context.Context) error {
	_, err := aiacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aiacb *AsInnerAgencyCreateBulk) ExecX(ctx context.Context) {
	if err := aiacb.Exec(ctx); err != nil {
		panic(err)
	}
}
