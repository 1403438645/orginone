// Code generated by entc, DO NOT EDIT.

package asmarketmenu

import (
	"orginone/common/schema/predicate"
	"orginone/common/tools/date"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// ParentID applies equality check predicate on the "parent_id" field. It's identical to ParentIDEQ.
func ParentID(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParentID), v))
	})
}

// MenuName applies equality check predicate on the "menu_name" field. It's identical to MenuNameEQ.
func MenuName(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMenuName), v))
	})
}

// MenuURL applies equality check predicate on the "menu_url" field. It's identical to MenuURLEQ.
func MenuURL(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMenuURL), v))
	})
}

// MenuColumn applies equality check predicate on the "menu_column" field. It's identical to MenuColumnEQ.
func MenuColumn(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMenuColumn), v))
	})
}

// Icon applies equality check predicate on the "icon" field. It's identical to IconEQ.
func Icon(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIcon), v))
	})
}

// Sort applies equality check predicate on the "sort" field. It's identical to SortEQ.
func Sort(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSort), v))
	})
}

// HTTPSMenuURL applies equality check predicate on the "https_menu_url" field. It's identical to HTTPSMenuURLEQ.
func HTTPSMenuURL(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHTTPSMenuURL), v))
	})
}

// ReformStatus applies equality check predicate on the "reform_status" field. It's identical to ReformStatusEQ.
func ReformStatus(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReformStatus), v))
	})
}

// OutIPMenuURL applies equality check predicate on the "out_ip_menu_url" field. It's identical to OutIPMenuURLEQ.
func OutIPMenuURL(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOutIPMenuURL), v))
	})
}

// IsDeleted applies equality check predicate on the "is_deleted" field. It's identical to IsDeletedEQ.
func IsDeleted(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDeleted), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// CreateUser applies equality check predicate on the "create_user" field. It's identical to CreateUserEQ.
func CreateUser(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateUser), v))
	})
}

// UpdateUser applies equality check predicate on the "update_user" field. It's identical to UpdateUserEQ.
func UpdateUser(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateUser), v))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v date.DateTime) predicate.AsMarketMenu {
	vc := time.Time(v)
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), vc))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v date.DateTime) predicate.AsMarketMenu {
	vc := time.Time(v)
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), vc))
	})
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppID), v))
	})
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...int64) predicate.AsMarketMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAppID), v...))
	})
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...int64) predicate.AsMarketMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAppID), v...))
	})
}

// AppIDIsNil applies the IsNil predicate on the "app_id" field.
func AppIDIsNil() predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAppID)))
	})
}

// AppIDNotNil applies the NotNil predicate on the "app_id" field.
func AppIDNotNil() predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAppID)))
	})
}

// ParentIDEQ applies the EQ predicate on the "parent_id" field.
func ParentIDEQ(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParentID), v))
	})
}

// ParentIDNEQ applies the NEQ predicate on the "parent_id" field.
func ParentIDNEQ(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldParentID), v))
	})
}

// ParentIDIn applies the In predicate on the "parent_id" field.
func ParentIDIn(vs ...int64) predicate.AsMarketMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldParentID), v...))
	})
}

// ParentIDNotIn applies the NotIn predicate on the "parent_id" field.
func ParentIDNotIn(vs ...int64) predicate.AsMarketMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldParentID), v...))
	})
}

// ParentIDIsNil applies the IsNil predicate on the "parent_id" field.
func ParentIDIsNil() predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldParentID)))
	})
}

// ParentIDNotNil applies the NotNil predicate on the "parent_id" field.
func ParentIDNotNil() predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldParentID)))
	})
}

// MenuNameEQ applies the EQ predicate on the "menu_name" field.
func MenuNameEQ(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMenuName), v))
	})
}

// MenuNameNEQ applies the NEQ predicate on the "menu_name" field.
func MenuNameNEQ(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMenuName), v))
	})
}

// MenuNameIn applies the In predicate on the "menu_name" field.
func MenuNameIn(vs ...string) predicate.AsMarketMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMenuName), v...))
	})
}

// MenuNameNotIn applies the NotIn predicate on the "menu_name" field.
func MenuNameNotIn(vs ...string) predicate.AsMarketMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMenuName), v...))
	})
}

// MenuNameGT applies the GT predicate on the "menu_name" field.
func MenuNameGT(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMenuName), v))
	})
}

// MenuNameGTE applies the GTE predicate on the "menu_name" field.
func MenuNameGTE(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMenuName), v))
	})
}

// MenuNameLT applies the LT predicate on the "menu_name" field.
func MenuNameLT(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMenuName), v))
	})
}

// MenuNameLTE applies the LTE predicate on the "menu_name" field.
func MenuNameLTE(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMenuName), v))
	})
}

// MenuNameContains applies the Contains predicate on the "menu_name" field.
func MenuNameContains(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMenuName), v))
	})
}

// MenuNameHasPrefix applies the HasPrefix predicate on the "menu_name" field.
func MenuNameHasPrefix(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMenuName), v))
	})
}

// MenuNameHasSuffix applies the HasSuffix predicate on the "menu_name" field.
func MenuNameHasSuffix(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMenuName), v))
	})
}

// MenuNameIsNil applies the IsNil predicate on the "menu_name" field.
func MenuNameIsNil() predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMenuName)))
	})
}

// MenuNameNotNil applies the NotNil predicate on the "menu_name" field.
func MenuNameNotNil() predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMenuName)))
	})
}

// MenuNameEqualFold applies the EqualFold predicate on the "menu_name" field.
func MenuNameEqualFold(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMenuName), v))
	})
}

// MenuNameContainsFold applies the ContainsFold predicate on the "menu_name" field.
func MenuNameContainsFold(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMenuName), v))
	})
}

// MenuURLEQ applies the EQ predicate on the "menu_url" field.
func MenuURLEQ(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMenuURL), v))
	})
}

// MenuURLNEQ applies the NEQ predicate on the "menu_url" field.
func MenuURLNEQ(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMenuURL), v))
	})
}

// MenuURLIn applies the In predicate on the "menu_url" field.
func MenuURLIn(vs ...string) predicate.AsMarketMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMenuURL), v...))
	})
}

// MenuURLNotIn applies the NotIn predicate on the "menu_url" field.
func MenuURLNotIn(vs ...string) predicate.AsMarketMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMenuURL), v...))
	})
}

// MenuURLGT applies the GT predicate on the "menu_url" field.
func MenuURLGT(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMenuURL), v))
	})
}

// MenuURLGTE applies the GTE predicate on the "menu_url" field.
func MenuURLGTE(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMenuURL), v))
	})
}

// MenuURLLT applies the LT predicate on the "menu_url" field.
func MenuURLLT(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMenuURL), v))
	})
}

// MenuURLLTE applies the LTE predicate on the "menu_url" field.
func MenuURLLTE(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMenuURL), v))
	})
}

// MenuURLContains applies the Contains predicate on the "menu_url" field.
func MenuURLContains(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMenuURL), v))
	})
}

// MenuURLHasPrefix applies the HasPrefix predicate on the "menu_url" field.
func MenuURLHasPrefix(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMenuURL), v))
	})
}

// MenuURLHasSuffix applies the HasSuffix predicate on the "menu_url" field.
func MenuURLHasSuffix(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMenuURL), v))
	})
}

// MenuURLIsNil applies the IsNil predicate on the "menu_url" field.
func MenuURLIsNil() predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMenuURL)))
	})
}

// MenuURLNotNil applies the NotNil predicate on the "menu_url" field.
func MenuURLNotNil() predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMenuURL)))
	})
}

// MenuURLEqualFold applies the EqualFold predicate on the "menu_url" field.
func MenuURLEqualFold(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMenuURL), v))
	})
}

// MenuURLContainsFold applies the ContainsFold predicate on the "menu_url" field.
func MenuURLContainsFold(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMenuURL), v))
	})
}

// MenuColumnEQ applies the EQ predicate on the "menu_column" field.
func MenuColumnEQ(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMenuColumn), v))
	})
}

// MenuColumnNEQ applies the NEQ predicate on the "menu_column" field.
func MenuColumnNEQ(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMenuColumn), v))
	})
}

// MenuColumnIn applies the In predicate on the "menu_column" field.
func MenuColumnIn(vs ...string) predicate.AsMarketMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMenuColumn), v...))
	})
}

// MenuColumnNotIn applies the NotIn predicate on the "menu_column" field.
func MenuColumnNotIn(vs ...string) predicate.AsMarketMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMenuColumn), v...))
	})
}

// MenuColumnGT applies the GT predicate on the "menu_column" field.
func MenuColumnGT(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMenuColumn), v))
	})
}

// MenuColumnGTE applies the GTE predicate on the "menu_column" field.
func MenuColumnGTE(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMenuColumn), v))
	})
}

// MenuColumnLT applies the LT predicate on the "menu_column" field.
func MenuColumnLT(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMenuColumn), v))
	})
}

// MenuColumnLTE applies the LTE predicate on the "menu_column" field.
func MenuColumnLTE(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMenuColumn), v))
	})
}

// MenuColumnContains applies the Contains predicate on the "menu_column" field.
func MenuColumnContains(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMenuColumn), v))
	})
}

// MenuColumnHasPrefix applies the HasPrefix predicate on the "menu_column" field.
func MenuColumnHasPrefix(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMenuColumn), v))
	})
}

// MenuColumnHasSuffix applies the HasSuffix predicate on the "menu_column" field.
func MenuColumnHasSuffix(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMenuColumn), v))
	})
}

// MenuColumnIsNil applies the IsNil predicate on the "menu_column" field.
func MenuColumnIsNil() predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMenuColumn)))
	})
}

// MenuColumnNotNil applies the NotNil predicate on the "menu_column" field.
func MenuColumnNotNil() predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMenuColumn)))
	})
}

// MenuColumnEqualFold applies the EqualFold predicate on the "menu_column" field.
func MenuColumnEqualFold(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMenuColumn), v))
	})
}

// MenuColumnContainsFold applies the ContainsFold predicate on the "menu_column" field.
func MenuColumnContainsFold(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMenuColumn), v))
	})
}

// IconEQ applies the EQ predicate on the "icon" field.
func IconEQ(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIcon), v))
	})
}

// IconNEQ applies the NEQ predicate on the "icon" field.
func IconNEQ(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIcon), v))
	})
}

// IconIn applies the In predicate on the "icon" field.
func IconIn(vs ...string) predicate.AsMarketMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIcon), v...))
	})
}

// IconNotIn applies the NotIn predicate on the "icon" field.
func IconNotIn(vs ...string) predicate.AsMarketMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIcon), v...))
	})
}

// IconGT applies the GT predicate on the "icon" field.
func IconGT(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIcon), v))
	})
}

// IconGTE applies the GTE predicate on the "icon" field.
func IconGTE(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIcon), v))
	})
}

// IconLT applies the LT predicate on the "icon" field.
func IconLT(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIcon), v))
	})
}

// IconLTE applies the LTE predicate on the "icon" field.
func IconLTE(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIcon), v))
	})
}

// IconContains applies the Contains predicate on the "icon" field.
func IconContains(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIcon), v))
	})
}

// IconHasPrefix applies the HasPrefix predicate on the "icon" field.
func IconHasPrefix(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIcon), v))
	})
}

// IconHasSuffix applies the HasSuffix predicate on the "icon" field.
func IconHasSuffix(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIcon), v))
	})
}

// IconIsNil applies the IsNil predicate on the "icon" field.
func IconIsNil() predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIcon)))
	})
}

// IconNotNil applies the NotNil predicate on the "icon" field.
func IconNotNil() predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIcon)))
	})
}

// IconEqualFold applies the EqualFold predicate on the "icon" field.
func IconEqualFold(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIcon), v))
	})
}

// IconContainsFold applies the ContainsFold predicate on the "icon" field.
func IconContainsFold(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIcon), v))
	})
}

// SortEQ applies the EQ predicate on the "sort" field.
func SortEQ(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSort), v))
	})
}

// SortNEQ applies the NEQ predicate on the "sort" field.
func SortNEQ(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSort), v))
	})
}

// SortIn applies the In predicate on the "sort" field.
func SortIn(vs ...int64) predicate.AsMarketMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSort), v...))
	})
}

// SortNotIn applies the NotIn predicate on the "sort" field.
func SortNotIn(vs ...int64) predicate.AsMarketMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSort), v...))
	})
}

// SortGT applies the GT predicate on the "sort" field.
func SortGT(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSort), v))
	})
}

// SortGTE applies the GTE predicate on the "sort" field.
func SortGTE(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSort), v))
	})
}

// SortLT applies the LT predicate on the "sort" field.
func SortLT(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSort), v))
	})
}

// SortLTE applies the LTE predicate on the "sort" field.
func SortLTE(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSort), v))
	})
}

// SortIsNil applies the IsNil predicate on the "sort" field.
func SortIsNil() predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSort)))
	})
}

// SortNotNil applies the NotNil predicate on the "sort" field.
func SortNotNil() predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSort)))
	})
}

// HTTPSMenuURLEQ applies the EQ predicate on the "https_menu_url" field.
func HTTPSMenuURLEQ(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHTTPSMenuURL), v))
	})
}

// HTTPSMenuURLNEQ applies the NEQ predicate on the "https_menu_url" field.
func HTTPSMenuURLNEQ(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHTTPSMenuURL), v))
	})
}

// HTTPSMenuURLIn applies the In predicate on the "https_menu_url" field.
func HTTPSMenuURLIn(vs ...string) predicate.AsMarketMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHTTPSMenuURL), v...))
	})
}

// HTTPSMenuURLNotIn applies the NotIn predicate on the "https_menu_url" field.
func HTTPSMenuURLNotIn(vs ...string) predicate.AsMarketMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHTTPSMenuURL), v...))
	})
}

// HTTPSMenuURLGT applies the GT predicate on the "https_menu_url" field.
func HTTPSMenuURLGT(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHTTPSMenuURL), v))
	})
}

// HTTPSMenuURLGTE applies the GTE predicate on the "https_menu_url" field.
func HTTPSMenuURLGTE(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHTTPSMenuURL), v))
	})
}

// HTTPSMenuURLLT applies the LT predicate on the "https_menu_url" field.
func HTTPSMenuURLLT(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHTTPSMenuURL), v))
	})
}

// HTTPSMenuURLLTE applies the LTE predicate on the "https_menu_url" field.
func HTTPSMenuURLLTE(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHTTPSMenuURL), v))
	})
}

// HTTPSMenuURLContains applies the Contains predicate on the "https_menu_url" field.
func HTTPSMenuURLContains(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHTTPSMenuURL), v))
	})
}

// HTTPSMenuURLHasPrefix applies the HasPrefix predicate on the "https_menu_url" field.
func HTTPSMenuURLHasPrefix(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHTTPSMenuURL), v))
	})
}

// HTTPSMenuURLHasSuffix applies the HasSuffix predicate on the "https_menu_url" field.
func HTTPSMenuURLHasSuffix(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHTTPSMenuURL), v))
	})
}

// HTTPSMenuURLIsNil applies the IsNil predicate on the "https_menu_url" field.
func HTTPSMenuURLIsNil() predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldHTTPSMenuURL)))
	})
}

// HTTPSMenuURLNotNil applies the NotNil predicate on the "https_menu_url" field.
func HTTPSMenuURLNotNil() predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldHTTPSMenuURL)))
	})
}

// HTTPSMenuURLEqualFold applies the EqualFold predicate on the "https_menu_url" field.
func HTTPSMenuURLEqualFold(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHTTPSMenuURL), v))
	})
}

// HTTPSMenuURLContainsFold applies the ContainsFold predicate on the "https_menu_url" field.
func HTTPSMenuURLContainsFold(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHTTPSMenuURL), v))
	})
}

// ReformStatusEQ applies the EQ predicate on the "reform_status" field.
func ReformStatusEQ(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReformStatus), v))
	})
}

// ReformStatusNEQ applies the NEQ predicate on the "reform_status" field.
func ReformStatusNEQ(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReformStatus), v))
	})
}

// ReformStatusIn applies the In predicate on the "reform_status" field.
func ReformStatusIn(vs ...int64) predicate.AsMarketMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReformStatus), v...))
	})
}

// ReformStatusNotIn applies the NotIn predicate on the "reform_status" field.
func ReformStatusNotIn(vs ...int64) predicate.AsMarketMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReformStatus), v...))
	})
}

// ReformStatusGT applies the GT predicate on the "reform_status" field.
func ReformStatusGT(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReformStatus), v))
	})
}

// ReformStatusGTE applies the GTE predicate on the "reform_status" field.
func ReformStatusGTE(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReformStatus), v))
	})
}

// ReformStatusLT applies the LT predicate on the "reform_status" field.
func ReformStatusLT(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReformStatus), v))
	})
}

// ReformStatusLTE applies the LTE predicate on the "reform_status" field.
func ReformStatusLTE(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReformStatus), v))
	})
}

// OutIPMenuURLEQ applies the EQ predicate on the "out_ip_menu_url" field.
func OutIPMenuURLEQ(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOutIPMenuURL), v))
	})
}

// OutIPMenuURLNEQ applies the NEQ predicate on the "out_ip_menu_url" field.
func OutIPMenuURLNEQ(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOutIPMenuURL), v))
	})
}

// OutIPMenuURLIn applies the In predicate on the "out_ip_menu_url" field.
func OutIPMenuURLIn(vs ...string) predicate.AsMarketMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOutIPMenuURL), v...))
	})
}

// OutIPMenuURLNotIn applies the NotIn predicate on the "out_ip_menu_url" field.
func OutIPMenuURLNotIn(vs ...string) predicate.AsMarketMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOutIPMenuURL), v...))
	})
}

// OutIPMenuURLGT applies the GT predicate on the "out_ip_menu_url" field.
func OutIPMenuURLGT(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOutIPMenuURL), v))
	})
}

// OutIPMenuURLGTE applies the GTE predicate on the "out_ip_menu_url" field.
func OutIPMenuURLGTE(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOutIPMenuURL), v))
	})
}

// OutIPMenuURLLT applies the LT predicate on the "out_ip_menu_url" field.
func OutIPMenuURLLT(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOutIPMenuURL), v))
	})
}

// OutIPMenuURLLTE applies the LTE predicate on the "out_ip_menu_url" field.
func OutIPMenuURLLTE(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOutIPMenuURL), v))
	})
}

// OutIPMenuURLContains applies the Contains predicate on the "out_ip_menu_url" field.
func OutIPMenuURLContains(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOutIPMenuURL), v))
	})
}

// OutIPMenuURLHasPrefix applies the HasPrefix predicate on the "out_ip_menu_url" field.
func OutIPMenuURLHasPrefix(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOutIPMenuURL), v))
	})
}

// OutIPMenuURLHasSuffix applies the HasSuffix predicate on the "out_ip_menu_url" field.
func OutIPMenuURLHasSuffix(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOutIPMenuURL), v))
	})
}

// OutIPMenuURLIsNil applies the IsNil predicate on the "out_ip_menu_url" field.
func OutIPMenuURLIsNil() predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOutIPMenuURL)))
	})
}

// OutIPMenuURLNotNil applies the NotNil predicate on the "out_ip_menu_url" field.
func OutIPMenuURLNotNil() predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOutIPMenuURL)))
	})
}

// OutIPMenuURLEqualFold applies the EqualFold predicate on the "out_ip_menu_url" field.
func OutIPMenuURLEqualFold(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOutIPMenuURL), v))
	})
}

// OutIPMenuURLContainsFold applies the ContainsFold predicate on the "out_ip_menu_url" field.
func OutIPMenuURLContainsFold(v string) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOutIPMenuURL), v))
	})
}

// IsDeletedEQ applies the EQ predicate on the "is_deleted" field.
func IsDeletedEQ(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedNEQ applies the NEQ predicate on the "is_deleted" field.
func IsDeletedNEQ(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedIn applies the In predicate on the "is_deleted" field.
func IsDeletedIn(vs ...int64) predicate.AsMarketMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsDeleted), v...))
	})
}

// IsDeletedNotIn applies the NotIn predicate on the "is_deleted" field.
func IsDeletedNotIn(vs ...int64) predicate.AsMarketMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsDeleted), v...))
	})
}

// IsDeletedGT applies the GT predicate on the "is_deleted" field.
func IsDeletedGT(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedGTE applies the GTE predicate on the "is_deleted" field.
func IsDeletedGTE(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedLT applies the LT predicate on the "is_deleted" field.
func IsDeletedLT(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedLTE applies the LTE predicate on the "is_deleted" field.
func IsDeletedLTE(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsDeleted), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int64) predicate.AsMarketMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int64) predicate.AsMarketMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStatus)))
	})
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStatus)))
	})
}

// CreateUserEQ applies the EQ predicate on the "create_user" field.
func CreateUserEQ(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateUser), v))
	})
}

// CreateUserNEQ applies the NEQ predicate on the "create_user" field.
func CreateUserNEQ(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateUser), v))
	})
}

// CreateUserIn applies the In predicate on the "create_user" field.
func CreateUserIn(vs ...int64) predicate.AsMarketMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateUser), v...))
	})
}

// CreateUserNotIn applies the NotIn predicate on the "create_user" field.
func CreateUserNotIn(vs ...int64) predicate.AsMarketMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateUser), v...))
	})
}

// CreateUserGT applies the GT predicate on the "create_user" field.
func CreateUserGT(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateUser), v))
	})
}

// CreateUserGTE applies the GTE predicate on the "create_user" field.
func CreateUserGTE(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateUser), v))
	})
}

// CreateUserLT applies the LT predicate on the "create_user" field.
func CreateUserLT(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateUser), v))
	})
}

// CreateUserLTE applies the LTE predicate on the "create_user" field.
func CreateUserLTE(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateUser), v))
	})
}

// CreateUserIsNil applies the IsNil predicate on the "create_user" field.
func CreateUserIsNil() predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreateUser)))
	})
}

// CreateUserNotNil applies the NotNil predicate on the "create_user" field.
func CreateUserNotNil() predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreateUser)))
	})
}

// UpdateUserEQ applies the EQ predicate on the "update_user" field.
func UpdateUserEQ(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserNEQ applies the NEQ predicate on the "update_user" field.
func UpdateUserNEQ(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserIn applies the In predicate on the "update_user" field.
func UpdateUserIn(vs ...int64) predicate.AsMarketMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateUser), v...))
	})
}

// UpdateUserNotIn applies the NotIn predicate on the "update_user" field.
func UpdateUserNotIn(vs ...int64) predicate.AsMarketMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateUser), v...))
	})
}

// UpdateUserGT applies the GT predicate on the "update_user" field.
func UpdateUserGT(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserGTE applies the GTE predicate on the "update_user" field.
func UpdateUserGTE(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserLT applies the LT predicate on the "update_user" field.
func UpdateUserLT(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserLTE applies the LTE predicate on the "update_user" field.
func UpdateUserLTE(v int64) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserIsNil applies the IsNil predicate on the "update_user" field.
func UpdateUserIsNil() predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdateUser)))
	})
}

// UpdateUserNotNil applies the NotNil predicate on the "update_user" field.
func UpdateUserNotNil() predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdateUser)))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v date.DateTime) predicate.AsMarketMenu {
	vc := time.Time(v)
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v date.DateTime) predicate.AsMarketMenu {
	vc := time.Time(v)
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...date.DateTime) predicate.AsMarketMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...date.DateTime) predicate.AsMarketMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v date.DateTime) predicate.AsMarketMenu {
	vc := time.Time(v)
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v date.DateTime) predicate.AsMarketMenu {
	vc := time.Time(v)
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v date.DateTime) predicate.AsMarketMenu {
	vc := time.Time(v)
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v date.DateTime) predicate.AsMarketMenu {
	vc := time.Time(v)
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeIsNil applies the IsNil predicate on the "create_time" field.
func CreateTimeIsNil() predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreateTime)))
	})
}

// CreateTimeNotNil applies the NotNil predicate on the "create_time" field.
func CreateTimeNotNil() predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreateTime)))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v date.DateTime) predicate.AsMarketMenu {
	vc := time.Time(v)
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v date.DateTime) predicate.AsMarketMenu {
	vc := time.Time(v)
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...date.DateTime) predicate.AsMarketMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...date.DateTime) predicate.AsMarketMenu {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v date.DateTime) predicate.AsMarketMenu {
	vc := time.Time(v)
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v date.DateTime) predicate.AsMarketMenu {
	vc := time.Time(v)
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v date.DateTime) predicate.AsMarketMenu {
	vc := time.Time(v)
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v date.DateTime) predicate.AsMarketMenu {
	vc := time.Time(v)
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeIsNil applies the IsNil predicate on the "update_time" field.
func UpdateTimeIsNil() predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdateTime)))
	})
}

// UpdateTimeNotNil applies the NotNil predicate on the "update_time" field.
func UpdateTimeNotNil() predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdateTime)))
	})
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ParentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.AsMarketMenu) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildrens applies the HasEdge predicate on the "childrens" edge.
func HasChildrens() predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChildrensTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildrensTable, ChildrensColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildrensWith applies the HasEdge predicate on the "childrens" edge with a given conditions (other predicates).
func HasChildrensWith(preds ...predicate.AsMarketMenu) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildrensTable, ChildrensColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAppx applies the HasEdge predicate on the "appx" edge.
func HasAppx() predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppxTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AppxTable, AppxColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppxWith applies the HasEdge predicate on the "appx" edge with a given conditions (other predicates).
func HasAppxWith(preds ...predicate.AsMarketApp) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppxInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AppxTable, AppxColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoleMenus applies the HasEdge predicate on the "roleMenus" edge.
func HasRoleMenus() predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RoleMenusTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RoleMenusTable, RoleMenusColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoleMenusWith applies the HasEdge predicate on the "roleMenus" edge with a given conditions (other predicates).
func HasRoleMenusWith(preds ...predicate.AsMarketRoleMenu) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RoleMenusInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RoleMenusTable, RoleMenusColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoles applies the HasEdge predicate on the "roles" edge.
func HasRoles() predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RolesTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, RolesTable, RolesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRolesWith applies the HasEdge predicate on the "roles" edge with a given conditions (other predicates).
func HasRolesWith(preds ...predicate.AsMarketAppRole) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RolesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, RolesTable, RolesPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserSorts applies the HasEdge predicate on the "UserSorts" edge.
func HasUserSorts() predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserSortsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserSortsTable, UserSortsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserSortsWith applies the HasEdge predicate on the "UserSorts" edge with a given conditions (other predicates).
func HasUserSortsWith(preds ...predicate.AsMarketMenuUserSort) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserSortsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserSortsTable, UserSortsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AsMarketMenu) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AsMarketMenu) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AsMarketMenu) predicate.AsMarketMenu {
	return predicate.AsMarketMenu(func(s *sql.Selector) {
		p(s.Not())
	})
}
