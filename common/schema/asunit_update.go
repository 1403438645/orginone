// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/astenant"
	"orginone/common/schema/asunit"
	"orginone/common/schema/predicate"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsUnitUpdate is the builder for updating AsUnit entities.
type AsUnitUpdate struct {
	config
	hooks    []Hook
	mutation *AsUnitMutation
}

// Where appends a list predicates to the AsUnitUpdate builder.
func (auu *AsUnitUpdate) Where(ps ...predicate.AsUnit) *AsUnitUpdate {
	auu.mutation.Where(ps...)
	return auu
}

// SetUnitName sets the "unit_name" field.
func (auu *AsUnitUpdate) SetUnitName(s string) *AsUnitUpdate {
	auu.mutation.SetUnitName(s)
	return auu
}

// SetUnitNameEn sets the "unit_name_en" field.
func (auu *AsUnitUpdate) SetUnitNameEn(s string) *AsUnitUpdate {
	auu.mutation.SetUnitNameEn(s)
	return auu
}

// SetNillableUnitNameEn sets the "unit_name_en" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableUnitNameEn(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetUnitNameEn(*s)
	}
	return auu
}

// ClearUnitNameEn clears the value of the "unit_name_en" field.
func (auu *AsUnitUpdate) ClearUnitNameEn() *AsUnitUpdate {
	auu.mutation.ClearUnitNameEn()
	return auu
}

// SetOrganizationForm sets the "organization_form" field.
func (auu *AsUnitUpdate) SetOrganizationForm(i int64) *AsUnitUpdate {
	auu.mutation.ResetOrganizationForm()
	auu.mutation.SetOrganizationForm(i)
	return auu
}

// SetNillableOrganizationForm sets the "organization_form" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableOrganizationForm(i *int64) *AsUnitUpdate {
	if i != nil {
		auu.SetOrganizationForm(*i)
	}
	return auu
}

// AddOrganizationForm adds i to the "organization_form" field.
func (auu *AsUnitUpdate) AddOrganizationForm(i int64) *AsUnitUpdate {
	auu.mutation.AddOrganizationForm(i)
	return auu
}

// ClearOrganizationForm clears the value of the "organization_form" field.
func (auu *AsUnitUpdate) ClearOrganizationForm() *AsUnitUpdate {
	auu.mutation.ClearOrganizationForm()
	return auu
}

// SetUnitType sets the "unit_type" field.
func (auu *AsUnitUpdate) SetUnitType(i int64) *AsUnitUpdate {
	auu.mutation.ResetUnitType()
	auu.mutation.SetUnitType(i)
	return auu
}

// SetNillableUnitType sets the "unit_type" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableUnitType(i *int64) *AsUnitUpdate {
	if i != nil {
		auu.SetUnitType(*i)
	}
	return auu
}

// AddUnitType adds i to the "unit_type" field.
func (auu *AsUnitUpdate) AddUnitType(i int64) *AsUnitUpdate {
	auu.mutation.AddUnitType(i)
	return auu
}

// ClearUnitType clears the value of the "unit_type" field.
func (auu *AsUnitUpdate) ClearUnitType() *AsUnitUpdate {
	auu.mutation.ClearUnitType()
	return auu
}

// SetParentNodeName sets the "parent_node_name" field.
func (auu *AsUnitUpdate) SetParentNodeName(s string) *AsUnitUpdate {
	auu.mutation.SetParentNodeName(s)
	return auu
}

// SetNillableParentNodeName sets the "parent_node_name" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableParentNodeName(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetParentNodeName(*s)
	}
	return auu
}

// ClearParentNodeName clears the value of the "parent_node_name" field.
func (auu *AsUnitUpdate) ClearParentNodeName() *AsUnitUpdate {
	auu.mutation.ClearParentNodeName()
	return auu
}

// SetChargeSectionID sets the "charge_section_id" field.
func (auu *AsUnitUpdate) SetChargeSectionID(i int64) *AsUnitUpdate {
	auu.mutation.ResetChargeSectionID()
	auu.mutation.SetChargeSectionID(i)
	return auu
}

// SetNillableChargeSectionID sets the "charge_section_id" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableChargeSectionID(i *int64) *AsUnitUpdate {
	if i != nil {
		auu.SetChargeSectionID(*i)
	}
	return auu
}

// AddChargeSectionID adds i to the "charge_section_id" field.
func (auu *AsUnitUpdate) AddChargeSectionID(i int64) *AsUnitUpdate {
	auu.mutation.AddChargeSectionID(i)
	return auu
}

// ClearChargeSectionID clears the value of the "charge_section_id" field.
func (auu *AsUnitUpdate) ClearChargeSectionID() *AsUnitUpdate {
	auu.mutation.ClearChargeSectionID()
	return auu
}

// SetChargeSectionCode sets the "charge_section_code" field.
func (auu *AsUnitUpdate) SetChargeSectionCode(s string) *AsUnitUpdate {
	auu.mutation.SetChargeSectionCode(s)
	return auu
}

// SetNillableChargeSectionCode sets the "charge_section_code" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableChargeSectionCode(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetChargeSectionCode(*s)
	}
	return auu
}

// ClearChargeSectionCode clears the value of the "charge_section_code" field.
func (auu *AsUnitUpdate) ClearChargeSectionCode() *AsUnitUpdate {
	auu.mutation.ClearChargeSectionCode()
	return auu
}

// SetChargeSectionName sets the "charge_section_name" field.
func (auu *AsUnitUpdate) SetChargeSectionName(s string) *AsUnitUpdate {
	auu.mutation.SetChargeSectionName(s)
	return auu
}

// SetNillableChargeSectionName sets the "charge_section_name" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableChargeSectionName(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetChargeSectionName(*s)
	}
	return auu
}

// ClearChargeSectionName clears the value of the "charge_section_name" field.
func (auu *AsUnitUpdate) ClearChargeSectionName() *AsUnitUpdate {
	auu.mutation.ClearChargeSectionName()
	return auu
}

// SetLocalFinancialCode sets the "local_financial_code" field.
func (auu *AsUnitUpdate) SetLocalFinancialCode(s string) *AsUnitUpdate {
	auu.mutation.SetLocalFinancialCode(s)
	return auu
}

// SetNillableLocalFinancialCode sets the "local_financial_code" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableLocalFinancialCode(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetLocalFinancialCode(*s)
	}
	return auu
}

// ClearLocalFinancialCode clears the value of the "local_financial_code" field.
func (auu *AsUnitUpdate) ClearLocalFinancialCode() *AsUnitUpdate {
	auu.mutation.ClearLocalFinancialCode()
	return auu
}

// SetLocalFinancialName sets the "local_financial_name" field.
func (auu *AsUnitUpdate) SetLocalFinancialName(s string) *AsUnitUpdate {
	auu.mutation.SetLocalFinancialName(s)
	return auu
}

// SetNillableLocalFinancialName sets the "local_financial_name" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableLocalFinancialName(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetLocalFinancialName(*s)
	}
	return auu
}

// ClearLocalFinancialName clears the value of the "local_financial_name" field.
func (auu *AsUnitUpdate) ClearLocalFinancialName() *AsUnitUpdate {
	auu.mutation.ClearLocalFinancialName()
	return auu
}

// SetLocalFinancialID sets the "local_financial_id" field.
func (auu *AsUnitUpdate) SetLocalFinancialID(s string) *AsUnitUpdate {
	auu.mutation.SetLocalFinancialID(s)
	return auu
}

// SetNillableLocalFinancialID sets the "local_financial_id" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableLocalFinancialID(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetLocalFinancialID(*s)
	}
	return auu
}

// ClearLocalFinancialID clears the value of the "local_financial_id" field.
func (auu *AsUnitUpdate) ClearLocalFinancialID() *AsUnitUpdate {
	auu.mutation.ClearLocalFinancialID()
	return auu
}

// SetOfficeAdministrationCode sets the "office_administration_code" field.
func (auu *AsUnitUpdate) SetOfficeAdministrationCode(s string) *AsUnitUpdate {
	auu.mutation.SetOfficeAdministrationCode(s)
	return auu
}

// SetNillableOfficeAdministrationCode sets the "office_administration_code" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableOfficeAdministrationCode(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetOfficeAdministrationCode(*s)
	}
	return auu
}

// ClearOfficeAdministrationCode clears the value of the "office_administration_code" field.
func (auu *AsUnitUpdate) ClearOfficeAdministrationCode() *AsUnitUpdate {
	auu.mutation.ClearOfficeAdministrationCode()
	return auu
}

// SetOfficeAdministrationName sets the "office_administration_name" field.
func (auu *AsUnitUpdate) SetOfficeAdministrationName(s string) *AsUnitUpdate {
	auu.mutation.SetOfficeAdministrationName(s)
	return auu
}

// SetNillableOfficeAdministrationName sets the "office_administration_name" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableOfficeAdministrationName(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetOfficeAdministrationName(*s)
	}
	return auu
}

// ClearOfficeAdministrationName clears the value of the "office_administration_name" field.
func (auu *AsUnitUpdate) ClearOfficeAdministrationName() *AsUnitUpdate {
	auu.mutation.ClearOfficeAdministrationName()
	return auu
}

// SetAdministrationDivisionCode sets the "administration_division_code" field.
func (auu *AsUnitUpdate) SetAdministrationDivisionCode(s string) *AsUnitUpdate {
	auu.mutation.SetAdministrationDivisionCode(s)
	return auu
}

// SetNillableAdministrationDivisionCode sets the "administration_division_code" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableAdministrationDivisionCode(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetAdministrationDivisionCode(*s)
	}
	return auu
}

// ClearAdministrationDivisionCode clears the value of the "administration_division_code" field.
func (auu *AsUnitUpdate) ClearAdministrationDivisionCode() *AsUnitUpdate {
	auu.mutation.ClearAdministrationDivisionCode()
	return auu
}

// SetAdministrationDivisionName sets the "administration_division_name" field.
func (auu *AsUnitUpdate) SetAdministrationDivisionName(s string) *AsUnitUpdate {
	auu.mutation.SetAdministrationDivisionName(s)
	return auu
}

// SetNillableAdministrationDivisionName sets the "administration_division_name" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableAdministrationDivisionName(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetAdministrationDivisionName(*s)
	}
	return auu
}

// ClearAdministrationDivisionName clears the value of the "administration_division_name" field.
func (auu *AsUnitUpdate) ClearAdministrationDivisionName() *AsUnitUpdate {
	auu.mutation.ClearAdministrationDivisionName()
	return auu
}

// SetBudgetCode sets the "budget_code" field.
func (auu *AsUnitUpdate) SetBudgetCode(i int64) *AsUnitUpdate {
	auu.mutation.ResetBudgetCode()
	auu.mutation.SetBudgetCode(i)
	return auu
}

// SetNillableBudgetCode sets the "budget_code" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableBudgetCode(i *int64) *AsUnitUpdate {
	if i != nil {
		auu.SetBudgetCode(*i)
	}
	return auu
}

// AddBudgetCode adds i to the "budget_code" field.
func (auu *AsUnitUpdate) AddBudgetCode(i int64) *AsUnitUpdate {
	auu.mutation.AddBudgetCode(i)
	return auu
}

// ClearBudgetCode clears the value of the "budget_code" field.
func (auu *AsUnitUpdate) ClearBudgetCode() *AsUnitUpdate {
	auu.mutation.ClearBudgetCode()
	return auu
}

// SetCollegeCode sets the "college_code" field.
func (auu *AsUnitUpdate) SetCollegeCode(s string) *AsUnitUpdate {
	auu.mutation.SetCollegeCode(s)
	return auu
}

// SetNillableCollegeCode sets the "college_code" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableCollegeCode(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetCollegeCode(*s)
	}
	return auu
}

// ClearCollegeCode clears the value of the "college_code" field.
func (auu *AsUnitUpdate) ClearCollegeCode() *AsUnitUpdate {
	auu.mutation.ClearCollegeCode()
	return auu
}

// SetOrganizationCode sets the "organization_code" field.
func (auu *AsUnitUpdate) SetOrganizationCode(s string) *AsUnitUpdate {
	auu.mutation.SetOrganizationCode(s)
	return auu
}

// SetNillableOrganizationCode sets the "organization_code" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableOrganizationCode(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetOrganizationCode(*s)
	}
	return auu
}

// ClearOrganizationCode clears the value of the "organization_code" field.
func (auu *AsUnitUpdate) ClearOrganizationCode() *AsUnitUpdate {
	auu.mutation.ClearOrganizationCode()
	return auu
}

// SetUnitTypeCode sets the "unit_type_code" field.
func (auu *AsUnitUpdate) SetUnitTypeCode(i int64) *AsUnitUpdate {
	auu.mutation.ResetUnitTypeCode()
	auu.mutation.SetUnitTypeCode(i)
	return auu
}

// SetNillableUnitTypeCode sets the "unit_type_code" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableUnitTypeCode(i *int64) *AsUnitUpdate {
	if i != nil {
		auu.SetUnitTypeCode(*i)
	}
	return auu
}

// AddUnitTypeCode adds i to the "unit_type_code" field.
func (auu *AsUnitUpdate) AddUnitTypeCode(i int64) *AsUnitUpdate {
	auu.mutation.AddUnitTypeCode(i)
	return auu
}

// ClearUnitTypeCode clears the value of the "unit_type_code" field.
func (auu *AsUnitUpdate) ClearUnitTypeCode() *AsUnitUpdate {
	auu.mutation.ClearUnitTypeCode()
	return auu
}

// SetUnitTypeName sets the "unit_type_name" field.
func (auu *AsUnitUpdate) SetUnitTypeName(i int64) *AsUnitUpdate {
	auu.mutation.ResetUnitTypeName()
	auu.mutation.SetUnitTypeName(i)
	return auu
}

// SetNillableUnitTypeName sets the "unit_type_name" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableUnitTypeName(i *int64) *AsUnitUpdate {
	if i != nil {
		auu.SetUnitTypeName(*i)
	}
	return auu
}

// AddUnitTypeName adds i to the "unit_type_name" field.
func (auu *AsUnitUpdate) AddUnitTypeName(i int64) *AsUnitUpdate {
	auu.mutation.AddUnitTypeName(i)
	return auu
}

// ClearUnitTypeName clears the value of the "unit_type_name" field.
func (auu *AsUnitUpdate) ClearUnitTypeName() *AsUnitUpdate {
	auu.mutation.ClearUnitTypeName()
	return auu
}

// SetUnitBasicProperty sets the "unit_basic_property" field.
func (auu *AsUnitUpdate) SetUnitBasicProperty(i int64) *AsUnitUpdate {
	auu.mutation.ResetUnitBasicProperty()
	auu.mutation.SetUnitBasicProperty(i)
	return auu
}

// SetNillableUnitBasicProperty sets the "unit_basic_property" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableUnitBasicProperty(i *int64) *AsUnitUpdate {
	if i != nil {
		auu.SetUnitBasicProperty(*i)
	}
	return auu
}

// AddUnitBasicProperty adds i to the "unit_basic_property" field.
func (auu *AsUnitUpdate) AddUnitBasicProperty(i int64) *AsUnitUpdate {
	auu.mutation.AddUnitBasicProperty(i)
	return auu
}

// ClearUnitBasicProperty clears the value of the "unit_basic_property" field.
func (auu *AsUnitUpdate) ClearUnitBasicProperty() *AsUnitUpdate {
	auu.mutation.ClearUnitBasicProperty()
	return auu
}

// SetSocialCreditCode sets the "social_credit_code" field.
func (auu *AsUnitUpdate) SetSocialCreditCode(s string) *AsUnitUpdate {
	auu.mutation.SetSocialCreditCode(s)
	return auu
}

// SetNillableSocialCreditCode sets the "social_credit_code" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableSocialCreditCode(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetSocialCreditCode(*s)
	}
	return auu
}

// ClearSocialCreditCode clears the value of the "social_credit_code" field.
func (auu *AsUnitUpdate) ClearSocialCreditCode() *AsUnitUpdate {
	auu.mutation.ClearSocialCreditCode()
	return auu
}

// SetBudgetUnitName sets the "budget_unit_name" field.
func (auu *AsUnitUpdate) SetBudgetUnitName(s string) *AsUnitUpdate {
	auu.mutation.SetBudgetUnitName(s)
	return auu
}

// SetNillableBudgetUnitName sets the "budget_unit_name" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableBudgetUnitName(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetBudgetUnitName(*s)
	}
	return auu
}

// ClearBudgetUnitName clears the value of the "budget_unit_name" field.
func (auu *AsUnitUpdate) ClearBudgetUnitName() *AsUnitUpdate {
	auu.mutation.ClearBudgetUnitName()
	return auu
}

// SetBudgetUnitCode sets the "budget_unit_code" field.
func (auu *AsUnitUpdate) SetBudgetUnitCode(s string) *AsUnitUpdate {
	auu.mutation.SetBudgetUnitCode(s)
	return auu
}

// SetNillableBudgetUnitCode sets the "budget_unit_code" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableBudgetUnitCode(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetBudgetUnitCode(*s)
	}
	return auu
}

// ClearBudgetUnitCode clears the value of the "budget_unit_code" field.
func (auu *AsUnitUpdate) ClearBudgetUnitCode() *AsUnitUpdate {
	auu.mutation.ClearBudgetUnitCode()
	return auu
}

// SetBudgetManagementLevel sets the "budget_management_level" field.
func (auu *AsUnitUpdate) SetBudgetManagementLevel(i int64) *AsUnitUpdate {
	auu.mutation.ResetBudgetManagementLevel()
	auu.mutation.SetBudgetManagementLevel(i)
	return auu
}

// SetNillableBudgetManagementLevel sets the "budget_management_level" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableBudgetManagementLevel(i *int64) *AsUnitUpdate {
	if i != nil {
		auu.SetBudgetManagementLevel(*i)
	}
	return auu
}

// AddBudgetManagementLevel adds i to the "budget_management_level" field.
func (auu *AsUnitUpdate) AddBudgetManagementLevel(i int64) *AsUnitUpdate {
	auu.mutation.AddBudgetManagementLevel(i)
	return auu
}

// ClearBudgetManagementLevel clears the value of the "budget_management_level" field.
func (auu *AsUnitUpdate) ClearBudgetManagementLevel() *AsUnitUpdate {
	auu.mutation.ClearBudgetManagementLevel()
	return auu
}

// SetFirmName sets the "firm_name" field.
func (auu *AsUnitUpdate) SetFirmName(s string) *AsUnitUpdate {
	auu.mutation.SetFirmName(s)
	return auu
}

// SetNillableFirmName sets the "firm_name" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableFirmName(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetFirmName(*s)
	}
	return auu
}

// ClearFirmName clears the value of the "firm_name" field.
func (auu *AsUnitUpdate) ClearFirmName() *AsUnitUpdate {
	auu.mutation.ClearFirmName()
	return auu
}

// SetFirmCode sets the "firm_code" field.
func (auu *AsUnitUpdate) SetFirmCode(s string) *AsUnitUpdate {
	auu.mutation.SetFirmCode(s)
	return auu
}

// SetNillableFirmCode sets the "firm_code" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableFirmCode(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetFirmCode(*s)
	}
	return auu
}

// ClearFirmCode clears the value of the "firm_code" field.
func (auu *AsUnitUpdate) ClearFirmCode() *AsUnitUpdate {
	auu.mutation.ClearFirmCode()
	return auu
}

// SetTelephoneNumber sets the "telephone_number" field.
func (auu *AsUnitUpdate) SetTelephoneNumber(s string) *AsUnitUpdate {
	auu.mutation.SetTelephoneNumber(s)
	return auu
}

// SetNillableTelephoneNumber sets the "telephone_number" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableTelephoneNumber(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetTelephoneNumber(*s)
	}
	return auu
}

// ClearTelephoneNumber clears the value of the "telephone_number" field.
func (auu *AsUnitUpdate) ClearTelephoneNumber() *AsUnitUpdate {
	auu.mutation.ClearTelephoneNumber()
	return auu
}

// SetPhoneNumber sets the "phone_number" field.
func (auu *AsUnitUpdate) SetPhoneNumber(s string) *AsUnitUpdate {
	auu.mutation.SetPhoneNumber(s)
	return auu
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillablePhoneNumber(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetPhoneNumber(*s)
	}
	return auu
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (auu *AsUnitUpdate) ClearPhoneNumber() *AsUnitUpdate {
	auu.mutation.ClearPhoneNumber()
	return auu
}

// SetFaxNumber sets the "fax_number" field.
func (auu *AsUnitUpdate) SetFaxNumber(s string) *AsUnitUpdate {
	auu.mutation.SetFaxNumber(s)
	return auu
}

// SetNillableFaxNumber sets the "fax_number" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableFaxNumber(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetFaxNumber(*s)
	}
	return auu
}

// ClearFaxNumber clears the value of the "fax_number" field.
func (auu *AsUnitUpdate) ClearFaxNumber() *AsUnitUpdate {
	auu.mutation.ClearFaxNumber()
	return auu
}

// SetEmailAddress sets the "email_address" field.
func (auu *AsUnitUpdate) SetEmailAddress(s string) *AsUnitUpdate {
	auu.mutation.SetEmailAddress(s)
	return auu
}

// SetNillableEmailAddress sets the "email_address" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableEmailAddress(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetEmailAddress(*s)
	}
	return auu
}

// ClearEmailAddress clears the value of the "email_address" field.
func (auu *AsUnitUpdate) ClearEmailAddress() *AsUnitUpdate {
	auu.mutation.ClearEmailAddress()
	return auu
}

// SetProvince sets the "province" field.
func (auu *AsUnitUpdate) SetProvince(s string) *AsUnitUpdate {
	auu.mutation.SetProvince(s)
	return auu
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableProvince(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetProvince(*s)
	}
	return auu
}

// ClearProvince clears the value of the "province" field.
func (auu *AsUnitUpdate) ClearProvince() *AsUnitUpdate {
	auu.mutation.ClearProvince()
	return auu
}

// SetCity sets the "city" field.
func (auu *AsUnitUpdate) SetCity(s string) *AsUnitUpdate {
	auu.mutation.SetCity(s)
	return auu
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableCity(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetCity(*s)
	}
	return auu
}

// ClearCity clears the value of the "city" field.
func (auu *AsUnitUpdate) ClearCity() *AsUnitUpdate {
	auu.mutation.ClearCity()
	return auu
}

// SetCounty sets the "county" field.
func (auu *AsUnitUpdate) SetCounty(s string) *AsUnitUpdate {
	auu.mutation.SetCounty(s)
	return auu
}

// SetNillableCounty sets the "county" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableCounty(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetCounty(*s)
	}
	return auu
}

// ClearCounty clears the value of the "county" field.
func (auu *AsUnitUpdate) ClearCounty() *AsUnitUpdate {
	auu.mutation.ClearCounty()
	return auu
}

// SetStreetAddress sets the "street_address" field.
func (auu *AsUnitUpdate) SetStreetAddress(s string) *AsUnitUpdate {
	auu.mutation.SetStreetAddress(s)
	return auu
}

// SetNillableStreetAddress sets the "street_address" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableStreetAddress(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetStreetAddress(*s)
	}
	return auu
}

// ClearStreetAddress clears the value of the "street_address" field.
func (auu *AsUnitUpdate) ClearStreetAddress() *AsUnitUpdate {
	auu.mutation.ClearStreetAddress()
	return auu
}

// SetPostalCode sets the "postal_code" field.
func (auu *AsUnitUpdate) SetPostalCode(s string) *AsUnitUpdate {
	auu.mutation.SetPostalCode(s)
	return auu
}

// SetNillablePostalCode sets the "postal_code" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillablePostalCode(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetPostalCode(*s)
	}
	return auu
}

// ClearPostalCode clears the value of the "postal_code" field.
func (auu *AsUnitUpdate) ClearPostalCode() *AsUnitUpdate {
	auu.mutation.ClearPostalCode()
	return auu
}

// SetFundSupplyModeName sets the "fund_supply_mode_name" field.
func (auu *AsUnitUpdate) SetFundSupplyModeName(i int64) *AsUnitUpdate {
	auu.mutation.ResetFundSupplyModeName()
	auu.mutation.SetFundSupplyModeName(i)
	return auu
}

// SetNillableFundSupplyModeName sets the "fund_supply_mode_name" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableFundSupplyModeName(i *int64) *AsUnitUpdate {
	if i != nil {
		auu.SetFundSupplyModeName(*i)
	}
	return auu
}

// AddFundSupplyModeName adds i to the "fund_supply_mode_name" field.
func (auu *AsUnitUpdate) AddFundSupplyModeName(i int64) *AsUnitUpdate {
	auu.mutation.AddFundSupplyModeName(i)
	return auu
}

// ClearFundSupplyModeName clears the value of the "fund_supply_mode_name" field.
func (auu *AsUnitUpdate) ClearFundSupplyModeName() *AsUnitUpdate {
	auu.mutation.ClearFundSupplyModeName()
	return auu
}

// SetFundSupplyModeCode sets the "fund_supply_mode_code" field.
func (auu *AsUnitUpdate) SetFundSupplyModeCode(i int64) *AsUnitUpdate {
	auu.mutation.ResetFundSupplyModeCode()
	auu.mutation.SetFundSupplyModeCode(i)
	return auu
}

// SetNillableFundSupplyModeCode sets the "fund_supply_mode_code" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableFundSupplyModeCode(i *int64) *AsUnitUpdate {
	if i != nil {
		auu.SetFundSupplyModeCode(*i)
	}
	return auu
}

// AddFundSupplyModeCode adds i to the "fund_supply_mode_code" field.
func (auu *AsUnitUpdate) AddFundSupplyModeCode(i int64) *AsUnitUpdate {
	auu.mutation.AddFundSupplyModeCode(i)
	return auu
}

// ClearFundSupplyModeCode clears the value of the "fund_supply_mode_code" field.
func (auu *AsUnitUpdate) ClearFundSupplyModeCode() *AsUnitUpdate {
	auu.mutation.ClearFundSupplyModeCode()
	return auu
}

// SetAdministrationLevelName sets the "administration_level_name" field.
func (auu *AsUnitUpdate) SetAdministrationLevelName(i int64) *AsUnitUpdate {
	auu.mutation.ResetAdministrationLevelName()
	auu.mutation.SetAdministrationLevelName(i)
	return auu
}

// SetNillableAdministrationLevelName sets the "administration_level_name" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableAdministrationLevelName(i *int64) *AsUnitUpdate {
	if i != nil {
		auu.SetAdministrationLevelName(*i)
	}
	return auu
}

// AddAdministrationLevelName adds i to the "administration_level_name" field.
func (auu *AsUnitUpdate) AddAdministrationLevelName(i int64) *AsUnitUpdate {
	auu.mutation.AddAdministrationLevelName(i)
	return auu
}

// ClearAdministrationLevelName clears the value of the "administration_level_name" field.
func (auu *AsUnitUpdate) ClearAdministrationLevelName() *AsUnitUpdate {
	auu.mutation.ClearAdministrationLevelName()
	return auu
}

// SetAdministrationLevelType sets the "administration_level_type" field.
func (auu *AsUnitUpdate) SetAdministrationLevelType(i int64) *AsUnitUpdate {
	auu.mutation.ResetAdministrationLevelType()
	auu.mutation.SetAdministrationLevelType(i)
	return auu
}

// SetNillableAdministrationLevelType sets the "administration_level_type" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableAdministrationLevelType(i *int64) *AsUnitUpdate {
	if i != nil {
		auu.SetAdministrationLevelType(*i)
	}
	return auu
}

// AddAdministrationLevelType adds i to the "administration_level_type" field.
func (auu *AsUnitUpdate) AddAdministrationLevelType(i int64) *AsUnitUpdate {
	auu.mutation.AddAdministrationLevelType(i)
	return auu
}

// ClearAdministrationLevelType clears the value of the "administration_level_type" field.
func (auu *AsUnitUpdate) ClearAdministrationLevelType() *AsUnitUpdate {
	auu.mutation.ClearAdministrationLevelType()
	return auu
}

// SetDepartmentCategoryName sets the "department_category_name" field.
func (auu *AsUnitUpdate) SetDepartmentCategoryName(i int64) *AsUnitUpdate {
	auu.mutation.ResetDepartmentCategoryName()
	auu.mutation.SetDepartmentCategoryName(i)
	return auu
}

// SetNillableDepartmentCategoryName sets the "department_category_name" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableDepartmentCategoryName(i *int64) *AsUnitUpdate {
	if i != nil {
		auu.SetDepartmentCategoryName(*i)
	}
	return auu
}

// AddDepartmentCategoryName adds i to the "department_category_name" field.
func (auu *AsUnitUpdate) AddDepartmentCategoryName(i int64) *AsUnitUpdate {
	auu.mutation.AddDepartmentCategoryName(i)
	return auu
}

// ClearDepartmentCategoryName clears the value of the "department_category_name" field.
func (auu *AsUnitUpdate) ClearDepartmentCategoryName() *AsUnitUpdate {
	auu.mutation.ClearDepartmentCategoryName()
	return auu
}

// SetBusinessDepartmentClassificationCode sets the "business_department_classification_code" field.
func (auu *AsUnitUpdate) SetBusinessDepartmentClassificationCode(i int64) *AsUnitUpdate {
	auu.mutation.ResetBusinessDepartmentClassificationCode()
	auu.mutation.SetBusinessDepartmentClassificationCode(i)
	return auu
}

// SetNillableBusinessDepartmentClassificationCode sets the "business_department_classification_code" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableBusinessDepartmentClassificationCode(i *int64) *AsUnitUpdate {
	if i != nil {
		auu.SetBusinessDepartmentClassificationCode(*i)
	}
	return auu
}

// AddBusinessDepartmentClassificationCode adds i to the "business_department_classification_code" field.
func (auu *AsUnitUpdate) AddBusinessDepartmentClassificationCode(i int64) *AsUnitUpdate {
	auu.mutation.AddBusinessDepartmentClassificationCode(i)
	return auu
}

// ClearBusinessDepartmentClassificationCode clears the value of the "business_department_classification_code" field.
func (auu *AsUnitUpdate) ClearBusinessDepartmentClassificationCode() *AsUnitUpdate {
	auu.mutation.ClearBusinessDepartmentClassificationCode()
	return auu
}

// SetPrincipal sets the "principal" field.
func (auu *AsUnitUpdate) SetPrincipal(s string) *AsUnitUpdate {
	auu.mutation.SetPrincipal(s)
	return auu
}

// SetNillablePrincipal sets the "principal" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillablePrincipal(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetPrincipal(*s)
	}
	return auu
}

// ClearPrincipal clears the value of the "principal" field.
func (auu *AsUnitUpdate) ClearPrincipal() *AsUnitUpdate {
	auu.mutation.ClearPrincipal()
	return auu
}

// SetContact sets the "contact" field.
func (auu *AsUnitUpdate) SetContact(s string) *AsUnitUpdate {
	auu.mutation.SetContact(s)
	return auu
}

// SetNillableContact sets the "contact" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableContact(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetContact(*s)
	}
	return auu
}

// ClearContact clears the value of the "contact" field.
func (auu *AsUnitUpdate) ClearContact() *AsUnitUpdate {
	auu.mutation.ClearContact()
	return auu
}

// SetCorporateRepresentative sets the "corporate_representative" field.
func (auu *AsUnitUpdate) SetCorporateRepresentative(s string) *AsUnitUpdate {
	auu.mutation.SetCorporateRepresentative(s)
	return auu
}

// SetNillableCorporateRepresentative sets the "corporate_representative" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableCorporateRepresentative(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetCorporateRepresentative(*s)
	}
	return auu
}

// ClearCorporateRepresentative clears the value of the "corporate_representative" field.
func (auu *AsUnitUpdate) ClearCorporateRepresentative() *AsUnitUpdate {
	auu.mutation.ClearCorporateRepresentative()
	return auu
}

// SetEconomicType sets the "economic_type" field.
func (auu *AsUnitUpdate) SetEconomicType(i int64) *AsUnitUpdate {
	auu.mutation.ResetEconomicType()
	auu.mutation.SetEconomicType(i)
	return auu
}

// SetNillableEconomicType sets the "economic_type" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableEconomicType(i *int64) *AsUnitUpdate {
	if i != nil {
		auu.SetEconomicType(*i)
	}
	return auu
}

// AddEconomicType adds i to the "economic_type" field.
func (auu *AsUnitUpdate) AddEconomicType(i int64) *AsUnitUpdate {
	auu.mutation.AddEconomicType(i)
	return auu
}

// ClearEconomicType clears the value of the "economic_type" field.
func (auu *AsUnitUpdate) ClearEconomicType() *AsUnitUpdate {
	auu.mutation.ClearEconomicType()
	return auu
}

// SetFinancialAffiliation sets the "financial_affiliation" field.
func (auu *AsUnitUpdate) SetFinancialAffiliation(s string) *AsUnitUpdate {
	auu.mutation.SetFinancialAffiliation(s)
	return auu
}

// SetNillableFinancialAffiliation sets the "financial_affiliation" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableFinancialAffiliation(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetFinancialAffiliation(*s)
	}
	return auu
}

// ClearFinancialAffiliation clears the value of the "financial_affiliation" field.
func (auu *AsUnitUpdate) ClearFinancialAffiliation() *AsUnitUpdate {
	auu.mutation.ClearFinancialAffiliation()
	return auu
}

// SetFinancialUnit sets the "financial_unit" field.
func (auu *AsUnitUpdate) SetFinancialUnit(i int64) *AsUnitUpdate {
	auu.mutation.ResetFinancialUnit()
	auu.mutation.SetFinancialUnit(i)
	return auu
}

// SetNillableFinancialUnit sets the "financial_unit" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableFinancialUnit(i *int64) *AsUnitUpdate {
	if i != nil {
		auu.SetFinancialUnit(*i)
	}
	return auu
}

// AddFinancialUnit adds i to the "financial_unit" field.
func (auu *AsUnitUpdate) AddFinancialUnit(i int64) *AsUnitUpdate {
	auu.mutation.AddFinancialUnit(i)
	return auu
}

// ClearFinancialUnit clears the value of the "financial_unit" field.
func (auu *AsUnitUpdate) ClearFinancialUnit() *AsUnitUpdate {
	auu.mutation.ClearFinancialUnit()
	return auu
}

// SetVerticalUnit sets the "vertical_unit" field.
func (auu *AsUnitUpdate) SetVerticalUnit(i int64) *AsUnitUpdate {
	auu.mutation.ResetVerticalUnit()
	auu.mutation.SetVerticalUnit(i)
	return auu
}

// SetNillableVerticalUnit sets the "vertical_unit" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableVerticalUnit(i *int64) *AsUnitUpdate {
	if i != nil {
		auu.SetVerticalUnit(*i)
	}
	return auu
}

// AddVerticalUnit adds i to the "vertical_unit" field.
func (auu *AsUnitUpdate) AddVerticalUnit(i int64) *AsUnitUpdate {
	auu.mutation.AddVerticalUnit(i)
	return auu
}

// ClearVerticalUnit clears the value of the "vertical_unit" field.
func (auu *AsUnitUpdate) ClearVerticalUnit() *AsUnitUpdate {
	auu.mutation.ClearVerticalUnit()
	return auu
}

// SetVirtualUnit sets the "virtual_unit" field.
func (auu *AsUnitUpdate) SetVirtualUnit(i int64) *AsUnitUpdate {
	auu.mutation.ResetVirtualUnit()
	auu.mutation.SetVirtualUnit(i)
	return auu
}

// SetNillableVirtualUnit sets the "virtual_unit" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableVirtualUnit(i *int64) *AsUnitUpdate {
	if i != nil {
		auu.SetVirtualUnit(*i)
	}
	return auu
}

// AddVirtualUnit adds i to the "virtual_unit" field.
func (auu *AsUnitUpdate) AddVirtualUnit(i int64) *AsUnitUpdate {
	auu.mutation.AddVirtualUnit(i)
	return auu
}

// ClearVirtualUnit clears the value of the "virtual_unit" field.
func (auu *AsUnitUpdate) ClearVirtualUnit() *AsUnitUpdate {
	auu.mutation.ClearVirtualUnit()
	return auu
}

// SetAccountingSystem sets the "accounting_system" field.
func (auu *AsUnitUpdate) SetAccountingSystem(i int64) *AsUnitUpdate {
	auu.mutation.ResetAccountingSystem()
	auu.mutation.SetAccountingSystem(i)
	return auu
}

// SetNillableAccountingSystem sets the "accounting_system" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableAccountingSystem(i *int64) *AsUnitUpdate {
	if i != nil {
		auu.SetAccountingSystem(*i)
	}
	return auu
}

// AddAccountingSystem adds i to the "accounting_system" field.
func (auu *AsUnitUpdate) AddAccountingSystem(i int64) *AsUnitUpdate {
	auu.mutation.AddAccountingSystem(i)
	return auu
}

// ClearAccountingSystem clears the value of the "accounting_system" field.
func (auu *AsUnitUpdate) ClearAccountingSystem() *AsUnitUpdate {
	auu.mutation.ClearAccountingSystem()
	return auu
}

// SetCorporateTag sets the "corporate_tag" field.
func (auu *AsUnitUpdate) SetCorporateTag(s string) *AsUnitUpdate {
	auu.mutation.SetCorporateTag(s)
	return auu
}

// SetNillableCorporateTag sets the "corporate_tag" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableCorporateTag(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetCorporateTag(*s)
	}
	return auu
}

// ClearCorporateTag clears the value of the "corporate_tag" field.
func (auu *AsUnitUpdate) ClearCorporateTag() *AsUnitUpdate {
	auu.mutation.ClearCorporateTag()
	return auu
}

// SetMaintainerMark sets the "maintainer_mark" field.
func (auu *AsUnitUpdate) SetMaintainerMark(s string) *AsUnitUpdate {
	auu.mutation.SetMaintainerMark(s)
	return auu
}

// SetNillableMaintainerMark sets the "maintainer_mark" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableMaintainerMark(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetMaintainerMark(*s)
	}
	return auu
}

// ClearMaintainerMark clears the value of the "maintainer_mark" field.
func (auu *AsUnitUpdate) ClearMaintainerMark() *AsUnitUpdate {
	auu.mutation.ClearMaintainerMark()
	return auu
}

// SetSupplierMark sets the "supplier_mark" field.
func (auu *AsUnitUpdate) SetSupplierMark(s string) *AsUnitUpdate {
	auu.mutation.SetSupplierMark(s)
	return auu
}

// SetNillableSupplierMark sets the "supplier_mark" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableSupplierMark(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetSupplierMark(*s)
	}
	return auu
}

// ClearSupplierMark clears the value of the "supplier_mark" field.
func (auu *AsUnitUpdate) ClearSupplierMark() *AsUnitUpdate {
	auu.mutation.ClearSupplierMark()
	return auu
}

// SetManufactureMark sets the "manufacture_mark" field.
func (auu *AsUnitUpdate) SetManufactureMark(s string) *AsUnitUpdate {
	auu.mutation.SetManufactureMark(s)
	return auu
}

// SetNillableManufactureMark sets the "manufacture_mark" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableManufactureMark(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetManufactureMark(*s)
	}
	return auu
}

// ClearManufactureMark clears the value of the "manufacture_mark" field.
func (auu *AsUnitUpdate) ClearManufactureMark() *AsUnitUpdate {
	auu.mutation.ClearManufactureMark()
	return auu
}

// SetAssetDisposalAgencyTag sets the "asset_disposal_agency_tag" field.
func (auu *AsUnitUpdate) SetAssetDisposalAgencyTag(s string) *AsUnitUpdate {
	auu.mutation.SetAssetDisposalAgencyTag(s)
	return auu
}

// SetNillableAssetDisposalAgencyTag sets the "asset_disposal_agency_tag" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableAssetDisposalAgencyTag(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetAssetDisposalAgencyTag(*s)
	}
	return auu
}

// ClearAssetDisposalAgencyTag clears the value of the "asset_disposal_agency_tag" field.
func (auu *AsUnitUpdate) ClearAssetDisposalAgencyTag() *AsUnitUpdate {
	auu.mutation.ClearAssetDisposalAgencyTag()
	return auu
}

// SetStateAssetManagementCompany sets the "state_asset_management_company" field.
func (auu *AsUnitUpdate) SetStateAssetManagementCompany(s string) *AsUnitUpdate {
	auu.mutation.SetStateAssetManagementCompany(s)
	return auu
}

// SetNillableStateAssetManagementCompany sets the "state_asset_management_company" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableStateAssetManagementCompany(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetStateAssetManagementCompany(*s)
	}
	return auu
}

// ClearStateAssetManagementCompany clears the value of the "state_asset_management_company" field.
func (auu *AsUnitUpdate) ClearStateAssetManagementCompany() *AsUnitUpdate {
	auu.mutation.ClearStateAssetManagementCompany()
	return auu
}

// SetInstitutionNumber sets the "institution_number" field.
func (auu *AsUnitUpdate) SetInstitutionNumber(i int64) *AsUnitUpdate {
	auu.mutation.ResetInstitutionNumber()
	auu.mutation.SetInstitutionNumber(i)
	return auu
}

// SetNillableInstitutionNumber sets the "institution_number" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableInstitutionNumber(i *int64) *AsUnitUpdate {
	if i != nil {
		auu.SetInstitutionNumber(*i)
	}
	return auu
}

// AddInstitutionNumber adds i to the "institution_number" field.
func (auu *AsUnitUpdate) AddInstitutionNumber(i int64) *AsUnitUpdate {
	auu.mutation.AddInstitutionNumber(i)
	return auu
}

// ClearInstitutionNumber clears the value of the "institution_number" field.
func (auu *AsUnitUpdate) ClearInstitutionNumber() *AsUnitUpdate {
	auu.mutation.ClearInstitutionNumber()
	return auu
}

// SetAuthorizedNumber sets the "authorized_number" field.
func (auu *AsUnitUpdate) SetAuthorizedNumber(i int64) *AsUnitUpdate {
	auu.mutation.ResetAuthorizedNumber()
	auu.mutation.SetAuthorizedNumber(i)
	return auu
}

// SetNillableAuthorizedNumber sets the "authorized_number" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableAuthorizedNumber(i *int64) *AsUnitUpdate {
	if i != nil {
		auu.SetAuthorizedNumber(*i)
	}
	return auu
}

// AddAuthorizedNumber adds i to the "authorized_number" field.
func (auu *AsUnitUpdate) AddAuthorizedNumber(i int64) *AsUnitUpdate {
	auu.mutation.AddAuthorizedNumber(i)
	return auu
}

// ClearAuthorizedNumber clears the value of the "authorized_number" field.
func (auu *AsUnitUpdate) ClearAuthorizedNumber() *AsUnitUpdate {
	auu.mutation.ClearAuthorizedNumber()
	return auu
}

// SetOfSideNumber sets the "of_side_number" field.
func (auu *AsUnitUpdate) SetOfSideNumber(i int64) *AsUnitUpdate {
	auu.mutation.ResetOfSideNumber()
	auu.mutation.SetOfSideNumber(i)
	return auu
}

// SetNillableOfSideNumber sets the "of_side_number" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableOfSideNumber(i *int64) *AsUnitUpdate {
	if i != nil {
		auu.SetOfSideNumber(*i)
	}
	return auu
}

// AddOfSideNumber adds i to the "of_side_number" field.
func (auu *AsUnitUpdate) AddOfSideNumber(i int64) *AsUnitUpdate {
	auu.mutation.AddOfSideNumber(i)
	return auu
}

// ClearOfSideNumber clears the value of the "of_side_number" field.
func (auu *AsUnitUpdate) ClearOfSideNumber() *AsUnitUpdate {
	auu.mutation.ClearOfSideNumber()
	return auu
}

// SetInstitutionAuthority sets the "institution_authority" field.
func (auu *AsUnitUpdate) SetInstitutionAuthority(s string) *AsUnitUpdate {
	auu.mutation.SetInstitutionAuthority(s)
	return auu
}

// SetNillableInstitutionAuthority sets the "institution_authority" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableInstitutionAuthority(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetInstitutionAuthority(*s)
	}
	return auu
}

// ClearInstitutionAuthority clears the value of the "institution_authority" field.
func (auu *AsUnitUpdate) ClearInstitutionAuthority() *AsUnitUpdate {
	auu.mutation.ClearInstitutionAuthority()
	return auu
}

// SetAdministrationAuthority sets the "administration_authority" field.
func (auu *AsUnitUpdate) SetAdministrationAuthority(s string) *AsUnitUpdate {
	auu.mutation.SetAdministrationAuthority(s)
	return auu
}

// SetNillableAdministrationAuthority sets the "administration_authority" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableAdministrationAuthority(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetAdministrationAuthority(*s)
	}
	return auu
}

// ClearAdministrationAuthority clears the value of the "administration_authority" field.
func (auu *AsUnitUpdate) ClearAdministrationAuthority() *AsUnitUpdate {
	auu.mutation.ClearAdministrationAuthority()
	return auu
}

// SetEnableTime sets the "enable_time" field.
func (auu *AsUnitUpdate) SetEnableTime(dt date.DateTime) *AsUnitUpdate {
	auu.mutation.SetEnableTime(dt)
	return auu
}

// SetNillableEnableTime sets the "enable_time" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableEnableTime(dt *date.DateTime) *AsUnitUpdate {
	if dt != nil {
		auu.SetEnableTime(*dt)
	}
	return auu
}

// ClearEnableTime clears the value of the "enable_time" field.
func (auu *AsUnitUpdate) ClearEnableTime() *AsUnitUpdate {
	auu.mutation.ClearEnableTime()
	return auu
}

// SetDisableTime sets the "disable_time" field.
func (auu *AsUnitUpdate) SetDisableTime(dt date.DateTime) *AsUnitUpdate {
	auu.mutation.SetDisableTime(dt)
	return auu
}

// SetNillableDisableTime sets the "disable_time" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableDisableTime(dt *date.DateTime) *AsUnitUpdate {
	if dt != nil {
		auu.SetDisableTime(*dt)
	}
	return auu
}

// ClearDisableTime clears the value of the "disable_time" field.
func (auu *AsUnitUpdate) ClearDisableTime() *AsUnitUpdate {
	auu.mutation.ClearDisableTime()
	return auu
}

// SetSealTime sets the "seal_time" field.
func (auu *AsUnitUpdate) SetSealTime(dt date.DateTime) *AsUnitUpdate {
	auu.mutation.SetSealTime(dt)
	return auu
}

// SetNillableSealTime sets the "seal_time" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableSealTime(dt *date.DateTime) *AsUnitUpdate {
	if dt != nil {
		auu.SetSealTime(*dt)
	}
	return auu
}

// ClearSealTime clears the value of the "seal_time" field.
func (auu *AsUnitUpdate) ClearSealTime() *AsUnitUpdate {
	auu.mutation.ClearSealTime()
	return auu
}

// SetUnitRemark sets the "unit_remark" field.
func (auu *AsUnitUpdate) SetUnitRemark(s string) *AsUnitUpdate {
	auu.mutation.SetUnitRemark(s)
	return auu
}

// SetNillableUnitRemark sets the "unit_remark" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableUnitRemark(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetUnitRemark(*s)
	}
	return auu
}

// ClearUnitRemark clears the value of the "unit_remark" field.
func (auu *AsUnitUpdate) ClearUnitRemark() *AsUnitUpdate {
	auu.mutation.ClearUnitRemark()
	return auu
}

// SetAssetDownloadStatus sets the "asset_download_status" field.
func (auu *AsUnitUpdate) SetAssetDownloadStatus(s string) *AsUnitUpdate {
	auu.mutation.SetAssetDownloadStatus(s)
	return auu
}

// SetNillableAssetDownloadStatus sets the "asset_download_status" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableAssetDownloadStatus(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetAssetDownloadStatus(*s)
	}
	return auu
}

// ClearAssetDownloadStatus clears the value of the "asset_download_status" field.
func (auu *AsUnitUpdate) ClearAssetDownloadStatus() *AsUnitUpdate {
	auu.mutation.ClearAssetDownloadStatus()
	return auu
}

// SetLatitudeAndLongitude sets the "latitude_and_longitude" field.
func (auu *AsUnitUpdate) SetLatitudeAndLongitude(s string) *AsUnitUpdate {
	auu.mutation.SetLatitudeAndLongitude(s)
	return auu
}

// SetNillableLatitudeAndLongitude sets the "latitude_and_longitude" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableLatitudeAndLongitude(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetLatitudeAndLongitude(*s)
	}
	return auu
}

// ClearLatitudeAndLongitude clears the value of the "latitude_and_longitude" field.
func (auu *AsUnitUpdate) ClearLatitudeAndLongitude() *AsUnitUpdate {
	auu.mutation.ClearLatitudeAndLongitude()
	return auu
}

// SetSort sets the "sort" field.
func (auu *AsUnitUpdate) SetSort(i int64) *AsUnitUpdate {
	auu.mutation.ResetSort()
	auu.mutation.SetSort(i)
	return auu
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableSort(i *int64) *AsUnitUpdate {
	if i != nil {
		auu.SetSort(*i)
	}
	return auu
}

// AddSort adds i to the "sort" field.
func (auu *AsUnitUpdate) AddSort(i int64) *AsUnitUpdate {
	auu.mutation.AddSort(i)
	return auu
}

// ClearSort clears the value of the "sort" field.
func (auu *AsUnitUpdate) ClearSort() *AsUnitUpdate {
	auu.mutation.ClearSort()
	return auu
}

// SetOrganCode sets the "organ_code" field.
func (auu *AsUnitUpdate) SetOrganCode(s string) *AsUnitUpdate {
	auu.mutation.SetOrganCode(s)
	return auu
}

// SetNillableOrganCode sets the "organ_code" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableOrganCode(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetOrganCode(*s)
	}
	return auu
}

// ClearOrganCode clears the value of the "organ_code" field.
func (auu *AsUnitUpdate) ClearOrganCode() *AsUnitUpdate {
	auu.mutation.ClearOrganCode()
	return auu
}

// SetHadInnerNumber sets the "had_inner_number" field.
func (auu *AsUnitUpdate) SetHadInnerNumber(i int64) *AsUnitUpdate {
	auu.mutation.ResetHadInnerNumber()
	auu.mutation.SetHadInnerNumber(i)
	return auu
}

// SetNillableHadInnerNumber sets the "had_inner_number" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableHadInnerNumber(i *int64) *AsUnitUpdate {
	if i != nil {
		auu.SetHadInnerNumber(*i)
	}
	return auu
}

// AddHadInnerNumber adds i to the "had_inner_number" field.
func (auu *AsUnitUpdate) AddHadInnerNumber(i int64) *AsUnitUpdate {
	auu.mutation.AddHadInnerNumber(i)
	return auu
}

// ClearHadInnerNumber clears the value of the "had_inner_number" field.
func (auu *AsUnitUpdate) ClearHadInnerNumber() *AsUnitUpdate {
	auu.mutation.ClearHadInnerNumber()
	return auu
}

// SetApproveInnerNumber sets the "approve_inner_number" field.
func (auu *AsUnitUpdate) SetApproveInnerNumber(i int64) *AsUnitUpdate {
	auu.mutation.ResetApproveInnerNumber()
	auu.mutation.SetApproveInnerNumber(i)
	return auu
}

// SetNillableApproveInnerNumber sets the "approve_inner_number" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableApproveInnerNumber(i *int64) *AsUnitUpdate {
	if i != nil {
		auu.SetApproveInnerNumber(*i)
	}
	return auu
}

// AddApproveInnerNumber adds i to the "approve_inner_number" field.
func (auu *AsUnitUpdate) AddApproveInnerNumber(i int64) *AsUnitUpdate {
	auu.mutation.AddApproveInnerNumber(i)
	return auu
}

// ClearApproveInnerNumber clears the value of the "approve_inner_number" field.
func (auu *AsUnitUpdate) ClearApproveInnerNumber() *AsUnitUpdate {
	auu.mutation.ClearApproveInnerNumber()
	return auu
}

// SetImg sets the "img" field.
func (auu *AsUnitUpdate) SetImg(s string) *AsUnitUpdate {
	auu.mutation.SetImg(s)
	return auu
}

// SetNillableImg sets the "img" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableImg(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetImg(*s)
	}
	return auu
}

// ClearImg clears the value of the "img" field.
func (auu *AsUnitUpdate) ClearImg() *AsUnitUpdate {
	auu.mutation.ClearImg()
	return auu
}

// SetLinkMan sets the "link_man" field.
func (auu *AsUnitUpdate) SetLinkMan(s string) *AsUnitUpdate {
	auu.mutation.SetLinkMan(s)
	return auu
}

// SetNillableLinkMan sets the "link_man" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableLinkMan(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetLinkMan(*s)
	}
	return auu
}

// ClearLinkMan clears the value of the "link_man" field.
func (auu *AsUnitUpdate) ClearLinkMan() *AsUnitUpdate {
	auu.mutation.ClearLinkMan()
	return auu
}

// SetLinkPhone sets the "link_phone" field.
func (auu *AsUnitUpdate) SetLinkPhone(s string) *AsUnitUpdate {
	auu.mutation.SetLinkPhone(s)
	return auu
}

// SetNillableLinkPhone sets the "link_phone" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableLinkPhone(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetLinkPhone(*s)
	}
	return auu
}

// ClearLinkPhone clears the value of the "link_phone" field.
func (auu *AsUnitUpdate) ClearLinkPhone() *AsUnitUpdate {
	auu.mutation.ClearLinkPhone()
	return auu
}

// SetTenantID sets the "tenant_id" field.
func (auu *AsUnitUpdate) SetTenantID(i int64) *AsUnitUpdate {
	auu.mutation.SetTenantID(i)
	return auu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableTenantID(i *int64) *AsUnitUpdate {
	if i != nil {
		auu.SetTenantID(*i)
	}
	return auu
}

// ClearTenantID clears the value of the "tenant_id" field.
func (auu *AsUnitUpdate) ClearTenantID() *AsUnitUpdate {
	auu.mutation.ClearTenantID()
	return auu
}

// SetUnitCode sets the "unit_code" field.
func (auu *AsUnitUpdate) SetUnitCode(s string) *AsUnitUpdate {
	auu.mutation.SetUnitCode(s)
	return auu
}

// SetNillableUnitCode sets the "unit_code" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableUnitCode(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetUnitCode(*s)
	}
	return auu
}

// ClearUnitCode clears the value of the "unit_code" field.
func (auu *AsUnitUpdate) ClearUnitCode() *AsUnitUpdate {
	auu.mutation.ClearUnitCode()
	return auu
}

// SetAuthorityTotal sets the "authority_total" field.
func (auu *AsUnitUpdate) SetAuthorityTotal(i int64) *AsUnitUpdate {
	auu.mutation.ResetAuthorityTotal()
	auu.mutation.SetAuthorityTotal(i)
	return auu
}

// SetNillableAuthorityTotal sets the "authority_total" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableAuthorityTotal(i *int64) *AsUnitUpdate {
	if i != nil {
		auu.SetAuthorityTotal(*i)
	}
	return auu
}

// AddAuthorityTotal adds i to the "authority_total" field.
func (auu *AsUnitUpdate) AddAuthorityTotal(i int64) *AsUnitUpdate {
	auu.mutation.AddAuthorityTotal(i)
	return auu
}

// ClearAuthorityTotal clears the value of the "authority_total" field.
func (auu *AsUnitUpdate) ClearAuthorityTotal() *AsUnitUpdate {
	auu.mutation.ClearAuthorityTotal()
	return auu
}

// SetStaffOnActiveDuty sets the "staff_on_active_duty" field.
func (auu *AsUnitUpdate) SetStaffOnActiveDuty(i int64) *AsUnitUpdate {
	auu.mutation.ResetStaffOnActiveDuty()
	auu.mutation.SetStaffOnActiveDuty(i)
	return auu
}

// SetNillableStaffOnActiveDuty sets the "staff_on_active_duty" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableStaffOnActiveDuty(i *int64) *AsUnitUpdate {
	if i != nil {
		auu.SetStaffOnActiveDuty(*i)
	}
	return auu
}

// AddStaffOnActiveDuty adds i to the "staff_on_active_duty" field.
func (auu *AsUnitUpdate) AddStaffOnActiveDuty(i int64) *AsUnitUpdate {
	auu.mutation.AddStaffOnActiveDuty(i)
	return auu
}

// ClearStaffOnActiveDuty clears the value of the "staff_on_active_duty" field.
func (auu *AsUnitUpdate) ClearStaffOnActiveDuty() *AsUnitUpdate {
	auu.mutation.ClearStaffOnActiveDuty()
	return auu
}

// SetRetiredStaff sets the "retired_staff" field.
func (auu *AsUnitUpdate) SetRetiredStaff(i int64) *AsUnitUpdate {
	auu.mutation.ResetRetiredStaff()
	auu.mutation.SetRetiredStaff(i)
	return auu
}

// SetNillableRetiredStaff sets the "retired_staff" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableRetiredStaff(i *int64) *AsUnitUpdate {
	if i != nil {
		auu.SetRetiredStaff(*i)
	}
	return auu
}

// AddRetiredStaff adds i to the "retired_staff" field.
func (auu *AsUnitUpdate) AddRetiredStaff(i int64) *AsUnitUpdate {
	auu.mutation.AddRetiredStaff(i)
	return auu
}

// ClearRetiredStaff clears the value of the "retired_staff" field.
func (auu *AsUnitUpdate) ClearRetiredStaff() *AsUnitUpdate {
	auu.mutation.ClearRetiredStaff()
	return auu
}

// SetOtherStaff sets the "other_staff" field.
func (auu *AsUnitUpdate) SetOtherStaff(i int64) *AsUnitUpdate {
	auu.mutation.ResetOtherStaff()
	auu.mutation.SetOtherStaff(i)
	return auu
}

// SetNillableOtherStaff sets the "other_staff" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableOtherStaff(i *int64) *AsUnitUpdate {
	if i != nil {
		auu.SetOtherStaff(*i)
	}
	return auu
}

// AddOtherStaff adds i to the "other_staff" field.
func (auu *AsUnitUpdate) AddOtherStaff(i int64) *AsUnitUpdate {
	auu.mutation.AddOtherStaff(i)
	return auu
}

// ClearOtherStaff clears the value of the "other_staff" field.
func (auu *AsUnitUpdate) ClearOtherStaff() *AsUnitUpdate {
	auu.mutation.ClearOtherStaff()
	return auu
}

// SetIsVirtual sets the "is_virtual" field.
func (auu *AsUnitUpdate) SetIsVirtual(s string) *AsUnitUpdate {
	auu.mutation.SetIsVirtual(s)
	return auu
}

// SetNillableIsVirtual sets the "is_virtual" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableIsVirtual(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetIsVirtual(*s)
	}
	return auu
}

// SetUnitReform sets the "unit_reform" field.
func (auu *AsUnitUpdate) SetUnitReform(i int64) *AsUnitUpdate {
	auu.mutation.ResetUnitReform()
	auu.mutation.SetUnitReform(i)
	return auu
}

// SetNillableUnitReform sets the "unit_reform" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableUnitReform(i *int64) *AsUnitUpdate {
	if i != nil {
		auu.SetUnitReform(*i)
	}
	return auu
}

// AddUnitReform adds i to the "unit_reform" field.
func (auu *AsUnitUpdate) AddUnitReform(i int64) *AsUnitUpdate {
	auu.mutation.AddUnitReform(i)
	return auu
}

// ClearUnitReform clears the value of the "unit_reform" field.
func (auu *AsUnitUpdate) ClearUnitReform() *AsUnitUpdate {
	auu.mutation.ClearUnitReform()
	return auu
}

// SetPersonExpenditure sets the "person_expenditure" field.
func (auu *AsUnitUpdate) SetPersonExpenditure(i int64) *AsUnitUpdate {
	auu.mutation.ResetPersonExpenditure()
	auu.mutation.SetPersonExpenditure(i)
	return auu
}

// SetNillablePersonExpenditure sets the "person_expenditure" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillablePersonExpenditure(i *int64) *AsUnitUpdate {
	if i != nil {
		auu.SetPersonExpenditure(*i)
	}
	return auu
}

// AddPersonExpenditure adds i to the "person_expenditure" field.
func (auu *AsUnitUpdate) AddPersonExpenditure(i int64) *AsUnitUpdate {
	auu.mutation.AddPersonExpenditure(i)
	return auu
}

// ClearPersonExpenditure clears the value of the "person_expenditure" field.
func (auu *AsUnitUpdate) ClearPersonExpenditure() *AsUnitUpdate {
	auu.mutation.ClearPersonExpenditure()
	return auu
}

// SetInstitutionType sets the "institution_type" field.
func (auu *AsUnitUpdate) SetInstitutionType(s string) *AsUnitUpdate {
	auu.mutation.SetInstitutionType(s)
	return auu
}

// SetNillableInstitutionType sets the "institution_type" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableInstitutionType(s *string) *AsUnitUpdate {
	if s != nil {
		auu.SetInstitutionType(*s)
	}
	return auu
}

// ClearInstitutionType clears the value of the "institution_type" field.
func (auu *AsUnitUpdate) ClearInstitutionType() *AsUnitUpdate {
	auu.mutation.ClearInstitutionType()
	return auu
}

// SetDepartmentIdentification sets the "department_identification" field.
func (auu *AsUnitUpdate) SetDepartmentIdentification(i int64) *AsUnitUpdate {
	auu.mutation.ResetDepartmentIdentification()
	auu.mutation.SetDepartmentIdentification(i)
	return auu
}

// SetNillableDepartmentIdentification sets the "department_identification" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableDepartmentIdentification(i *int64) *AsUnitUpdate {
	if i != nil {
		auu.SetDepartmentIdentification(*i)
	}
	return auu
}

// AddDepartmentIdentification adds i to the "department_identification" field.
func (auu *AsUnitUpdate) AddDepartmentIdentification(i int64) *AsUnitUpdate {
	auu.mutation.AddDepartmentIdentification(i)
	return auu
}

// ClearDepartmentIdentification clears the value of the "department_identification" field.
func (auu *AsUnitUpdate) ClearDepartmentIdentification() *AsUnitUpdate {
	auu.mutation.ClearDepartmentIdentification()
	return auu
}

// SetTotalHeadcount sets the "total_headcount" field.
func (auu *AsUnitUpdate) SetTotalHeadcount(i int64) *AsUnitUpdate {
	auu.mutation.ResetTotalHeadcount()
	auu.mutation.SetTotalHeadcount(i)
	return auu
}

// SetNillableTotalHeadcount sets the "total_headcount" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableTotalHeadcount(i *int64) *AsUnitUpdate {
	if i != nil {
		auu.SetTotalHeadcount(*i)
	}
	return auu
}

// AddTotalHeadcount adds i to the "total_headcount" field.
func (auu *AsUnitUpdate) AddTotalHeadcount(i int64) *AsUnitUpdate {
	auu.mutation.AddTotalHeadcount(i)
	return auu
}

// ClearTotalHeadcount clears the value of the "total_headcount" field.
func (auu *AsUnitUpdate) ClearTotalHeadcount() *AsUnitUpdate {
	auu.mutation.ClearTotalHeadcount()
	return auu
}

// SetIsDeleted sets the "is_deleted" field.
func (auu *AsUnitUpdate) SetIsDeleted(i int64) *AsUnitUpdate {
	auu.mutation.ResetIsDeleted()
	auu.mutation.SetIsDeleted(i)
	return auu
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableIsDeleted(i *int64) *AsUnitUpdate {
	if i != nil {
		auu.SetIsDeleted(*i)
	}
	return auu
}

// AddIsDeleted adds i to the "is_deleted" field.
func (auu *AsUnitUpdate) AddIsDeleted(i int64) *AsUnitUpdate {
	auu.mutation.AddIsDeleted(i)
	return auu
}

// SetStatus sets the "status" field.
func (auu *AsUnitUpdate) SetStatus(i int64) *AsUnitUpdate {
	auu.mutation.ResetStatus()
	auu.mutation.SetStatus(i)
	return auu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableStatus(i *int64) *AsUnitUpdate {
	if i != nil {
		auu.SetStatus(*i)
	}
	return auu
}

// AddStatus adds i to the "status" field.
func (auu *AsUnitUpdate) AddStatus(i int64) *AsUnitUpdate {
	auu.mutation.AddStatus(i)
	return auu
}

// ClearStatus clears the value of the "status" field.
func (auu *AsUnitUpdate) ClearStatus() *AsUnitUpdate {
	auu.mutation.ClearStatus()
	return auu
}

// SetCreateUser sets the "create_user" field.
func (auu *AsUnitUpdate) SetCreateUser(i int64) *AsUnitUpdate {
	auu.mutation.ResetCreateUser()
	auu.mutation.SetCreateUser(i)
	return auu
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableCreateUser(i *int64) *AsUnitUpdate {
	if i != nil {
		auu.SetCreateUser(*i)
	}
	return auu
}

// AddCreateUser adds i to the "create_user" field.
func (auu *AsUnitUpdate) AddCreateUser(i int64) *AsUnitUpdate {
	auu.mutation.AddCreateUser(i)
	return auu
}

// ClearCreateUser clears the value of the "create_user" field.
func (auu *AsUnitUpdate) ClearCreateUser() *AsUnitUpdate {
	auu.mutation.ClearCreateUser()
	return auu
}

// SetUpdateUser sets the "update_user" field.
func (auu *AsUnitUpdate) SetUpdateUser(i int64) *AsUnitUpdate {
	auu.mutation.ResetUpdateUser()
	auu.mutation.SetUpdateUser(i)
	return auu
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableUpdateUser(i *int64) *AsUnitUpdate {
	if i != nil {
		auu.SetUpdateUser(*i)
	}
	return auu
}

// AddUpdateUser adds i to the "update_user" field.
func (auu *AsUnitUpdate) AddUpdateUser(i int64) *AsUnitUpdate {
	auu.mutation.AddUpdateUser(i)
	return auu
}

// ClearUpdateUser clears the value of the "update_user" field.
func (auu *AsUnitUpdate) ClearUpdateUser() *AsUnitUpdate {
	auu.mutation.ClearUpdateUser()
	return auu
}

// SetUpdateTime sets the "update_time" field.
func (auu *AsUnitUpdate) SetUpdateTime(dt date.DateTime) *AsUnitUpdate {
	auu.mutation.SetUpdateTime(dt)
	return auu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (auu *AsUnitUpdate) ClearUpdateTime() *AsUnitUpdate {
	auu.mutation.ClearUpdateTime()
	return auu
}

// SetTenantxID sets the "tenantx" edge to the AsTenant entity by ID.
func (auu *AsUnitUpdate) SetTenantxID(id int64) *AsUnitUpdate {
	auu.mutation.SetTenantxID(id)
	return auu
}

// SetNillableTenantxID sets the "tenantx" edge to the AsTenant entity by ID if the given value is not nil.
func (auu *AsUnitUpdate) SetNillableTenantxID(id *int64) *AsUnitUpdate {
	if id != nil {
		auu = auu.SetTenantxID(*id)
	}
	return auu
}

// SetTenantx sets the "tenantx" edge to the AsTenant entity.
func (auu *AsUnitUpdate) SetTenantx(a *AsTenant) *AsUnitUpdate {
	return auu.SetTenantxID(a.ID)
}

// Mutation returns the AsUnitMutation object of the builder.
func (auu *AsUnitUpdate) Mutation() *AsUnitMutation {
	return auu.mutation
}

// ClearTenantx clears the "tenantx" edge to the AsTenant entity.
func (auu *AsUnitUpdate) ClearTenantx() *AsUnitUpdate {
	auu.mutation.ClearTenantx()
	return auu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (auu *AsUnitUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	auu.defaults()
	if len(auu.hooks) == 0 {
		affected, err = auu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsUnitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auu.mutation = mutation
			affected, err = auu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(auu.hooks) - 1; i >= 0; i-- {
			if auu.hooks[i] == nil {
				return 0, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = auu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (auu *AsUnitUpdate) SaveX(ctx context.Context) int {
	affected, err := auu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (auu *AsUnitUpdate) Exec(ctx context.Context) error {
	_, err := auu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auu *AsUnitUpdate) ExecX(ctx context.Context) {
	if err := auu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auu *AsUnitUpdate) defaults() {
	if _, ok := auu.mutation.UpdateTime(); !ok && !auu.mutation.UpdateTimeCleared() {
		v := asunit.UpdateDefaultUpdateTime()
		auu.mutation.SetUpdateTime(v)
	}
}

func (auu *AsUnitUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asunit.Table,
			Columns: asunit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asunit.FieldID,
			},
		},
	}
	if ps := auu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auu.mutation.UnitName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldUnitName,
		})
	}
	if value, ok := auu.mutation.UnitNameEn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldUnitNameEn,
		})
	}
	if auu.mutation.UnitNameEnCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldUnitNameEn,
		})
	}
	if value, ok := auu.mutation.OrganizationForm(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldOrganizationForm,
		})
	}
	if value, ok := auu.mutation.AddedOrganizationForm(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldOrganizationForm,
		})
	}
	if auu.mutation.OrganizationFormCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldOrganizationForm,
		})
	}
	if value, ok := auu.mutation.UnitType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldUnitType,
		})
	}
	if value, ok := auu.mutation.AddedUnitType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldUnitType,
		})
	}
	if auu.mutation.UnitTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldUnitType,
		})
	}
	if value, ok := auu.mutation.ParentNodeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldParentNodeName,
		})
	}
	if auu.mutation.ParentNodeNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldParentNodeName,
		})
	}
	if value, ok := auu.mutation.ChargeSectionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldChargeSectionID,
		})
	}
	if value, ok := auu.mutation.AddedChargeSectionID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldChargeSectionID,
		})
	}
	if auu.mutation.ChargeSectionIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldChargeSectionID,
		})
	}
	if value, ok := auu.mutation.ChargeSectionCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldChargeSectionCode,
		})
	}
	if auu.mutation.ChargeSectionCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldChargeSectionCode,
		})
	}
	if value, ok := auu.mutation.ChargeSectionName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldChargeSectionName,
		})
	}
	if auu.mutation.ChargeSectionNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldChargeSectionName,
		})
	}
	if value, ok := auu.mutation.LocalFinancialCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldLocalFinancialCode,
		})
	}
	if auu.mutation.LocalFinancialCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldLocalFinancialCode,
		})
	}
	if value, ok := auu.mutation.LocalFinancialName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldLocalFinancialName,
		})
	}
	if auu.mutation.LocalFinancialNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldLocalFinancialName,
		})
	}
	if value, ok := auu.mutation.LocalFinancialID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldLocalFinancialID,
		})
	}
	if auu.mutation.LocalFinancialIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldLocalFinancialID,
		})
	}
	if value, ok := auu.mutation.OfficeAdministrationCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldOfficeAdministrationCode,
		})
	}
	if auu.mutation.OfficeAdministrationCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldOfficeAdministrationCode,
		})
	}
	if value, ok := auu.mutation.OfficeAdministrationName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldOfficeAdministrationName,
		})
	}
	if auu.mutation.OfficeAdministrationNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldOfficeAdministrationName,
		})
	}
	if value, ok := auu.mutation.AdministrationDivisionCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldAdministrationDivisionCode,
		})
	}
	if auu.mutation.AdministrationDivisionCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldAdministrationDivisionCode,
		})
	}
	if value, ok := auu.mutation.AdministrationDivisionName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldAdministrationDivisionName,
		})
	}
	if auu.mutation.AdministrationDivisionNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldAdministrationDivisionName,
		})
	}
	if value, ok := auu.mutation.BudgetCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldBudgetCode,
		})
	}
	if value, ok := auu.mutation.AddedBudgetCode(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldBudgetCode,
		})
	}
	if auu.mutation.BudgetCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldBudgetCode,
		})
	}
	if value, ok := auu.mutation.CollegeCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldCollegeCode,
		})
	}
	if auu.mutation.CollegeCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldCollegeCode,
		})
	}
	if value, ok := auu.mutation.OrganizationCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldOrganizationCode,
		})
	}
	if auu.mutation.OrganizationCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldOrganizationCode,
		})
	}
	if value, ok := auu.mutation.UnitTypeCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldUnitTypeCode,
		})
	}
	if value, ok := auu.mutation.AddedUnitTypeCode(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldUnitTypeCode,
		})
	}
	if auu.mutation.UnitTypeCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldUnitTypeCode,
		})
	}
	if value, ok := auu.mutation.UnitTypeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldUnitTypeName,
		})
	}
	if value, ok := auu.mutation.AddedUnitTypeName(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldUnitTypeName,
		})
	}
	if auu.mutation.UnitTypeNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldUnitTypeName,
		})
	}
	if value, ok := auu.mutation.UnitBasicProperty(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldUnitBasicProperty,
		})
	}
	if value, ok := auu.mutation.AddedUnitBasicProperty(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldUnitBasicProperty,
		})
	}
	if auu.mutation.UnitBasicPropertyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldUnitBasicProperty,
		})
	}
	if value, ok := auu.mutation.SocialCreditCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldSocialCreditCode,
		})
	}
	if auu.mutation.SocialCreditCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldSocialCreditCode,
		})
	}
	if value, ok := auu.mutation.BudgetUnitName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldBudgetUnitName,
		})
	}
	if auu.mutation.BudgetUnitNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldBudgetUnitName,
		})
	}
	if value, ok := auu.mutation.BudgetUnitCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldBudgetUnitCode,
		})
	}
	if auu.mutation.BudgetUnitCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldBudgetUnitCode,
		})
	}
	if value, ok := auu.mutation.BudgetManagementLevel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldBudgetManagementLevel,
		})
	}
	if value, ok := auu.mutation.AddedBudgetManagementLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldBudgetManagementLevel,
		})
	}
	if auu.mutation.BudgetManagementLevelCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldBudgetManagementLevel,
		})
	}
	if value, ok := auu.mutation.FirmName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldFirmName,
		})
	}
	if auu.mutation.FirmNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldFirmName,
		})
	}
	if value, ok := auu.mutation.FirmCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldFirmCode,
		})
	}
	if auu.mutation.FirmCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldFirmCode,
		})
	}
	if value, ok := auu.mutation.TelephoneNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldTelephoneNumber,
		})
	}
	if auu.mutation.TelephoneNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldTelephoneNumber,
		})
	}
	if value, ok := auu.mutation.PhoneNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldPhoneNumber,
		})
	}
	if auu.mutation.PhoneNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldPhoneNumber,
		})
	}
	if value, ok := auu.mutation.FaxNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldFaxNumber,
		})
	}
	if auu.mutation.FaxNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldFaxNumber,
		})
	}
	if value, ok := auu.mutation.EmailAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldEmailAddress,
		})
	}
	if auu.mutation.EmailAddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldEmailAddress,
		})
	}
	if value, ok := auu.mutation.Province(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldProvince,
		})
	}
	if auu.mutation.ProvinceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldProvince,
		})
	}
	if value, ok := auu.mutation.City(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldCity,
		})
	}
	if auu.mutation.CityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldCity,
		})
	}
	if value, ok := auu.mutation.County(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldCounty,
		})
	}
	if auu.mutation.CountyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldCounty,
		})
	}
	if value, ok := auu.mutation.StreetAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldStreetAddress,
		})
	}
	if auu.mutation.StreetAddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldStreetAddress,
		})
	}
	if value, ok := auu.mutation.PostalCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldPostalCode,
		})
	}
	if auu.mutation.PostalCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldPostalCode,
		})
	}
	if value, ok := auu.mutation.FundSupplyModeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldFundSupplyModeName,
		})
	}
	if value, ok := auu.mutation.AddedFundSupplyModeName(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldFundSupplyModeName,
		})
	}
	if auu.mutation.FundSupplyModeNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldFundSupplyModeName,
		})
	}
	if value, ok := auu.mutation.FundSupplyModeCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldFundSupplyModeCode,
		})
	}
	if value, ok := auu.mutation.AddedFundSupplyModeCode(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldFundSupplyModeCode,
		})
	}
	if auu.mutation.FundSupplyModeCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldFundSupplyModeCode,
		})
	}
	if value, ok := auu.mutation.AdministrationLevelName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldAdministrationLevelName,
		})
	}
	if value, ok := auu.mutation.AddedAdministrationLevelName(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldAdministrationLevelName,
		})
	}
	if auu.mutation.AdministrationLevelNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldAdministrationLevelName,
		})
	}
	if value, ok := auu.mutation.AdministrationLevelType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldAdministrationLevelType,
		})
	}
	if value, ok := auu.mutation.AddedAdministrationLevelType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldAdministrationLevelType,
		})
	}
	if auu.mutation.AdministrationLevelTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldAdministrationLevelType,
		})
	}
	if value, ok := auu.mutation.DepartmentCategoryName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldDepartmentCategoryName,
		})
	}
	if value, ok := auu.mutation.AddedDepartmentCategoryName(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldDepartmentCategoryName,
		})
	}
	if auu.mutation.DepartmentCategoryNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldDepartmentCategoryName,
		})
	}
	if value, ok := auu.mutation.BusinessDepartmentClassificationCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldBusinessDepartmentClassificationCode,
		})
	}
	if value, ok := auu.mutation.AddedBusinessDepartmentClassificationCode(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldBusinessDepartmentClassificationCode,
		})
	}
	if auu.mutation.BusinessDepartmentClassificationCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldBusinessDepartmentClassificationCode,
		})
	}
	if value, ok := auu.mutation.Principal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldPrincipal,
		})
	}
	if auu.mutation.PrincipalCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldPrincipal,
		})
	}
	if value, ok := auu.mutation.Contact(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldContact,
		})
	}
	if auu.mutation.ContactCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldContact,
		})
	}
	if value, ok := auu.mutation.CorporateRepresentative(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldCorporateRepresentative,
		})
	}
	if auu.mutation.CorporateRepresentativeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldCorporateRepresentative,
		})
	}
	if value, ok := auu.mutation.EconomicType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldEconomicType,
		})
	}
	if value, ok := auu.mutation.AddedEconomicType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldEconomicType,
		})
	}
	if auu.mutation.EconomicTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldEconomicType,
		})
	}
	if value, ok := auu.mutation.FinancialAffiliation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldFinancialAffiliation,
		})
	}
	if auu.mutation.FinancialAffiliationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldFinancialAffiliation,
		})
	}
	if value, ok := auu.mutation.FinancialUnit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldFinancialUnit,
		})
	}
	if value, ok := auu.mutation.AddedFinancialUnit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldFinancialUnit,
		})
	}
	if auu.mutation.FinancialUnitCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldFinancialUnit,
		})
	}
	if value, ok := auu.mutation.VerticalUnit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldVerticalUnit,
		})
	}
	if value, ok := auu.mutation.AddedVerticalUnit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldVerticalUnit,
		})
	}
	if auu.mutation.VerticalUnitCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldVerticalUnit,
		})
	}
	if value, ok := auu.mutation.VirtualUnit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldVirtualUnit,
		})
	}
	if value, ok := auu.mutation.AddedVirtualUnit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldVirtualUnit,
		})
	}
	if auu.mutation.VirtualUnitCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldVirtualUnit,
		})
	}
	if value, ok := auu.mutation.AccountingSystem(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldAccountingSystem,
		})
	}
	if value, ok := auu.mutation.AddedAccountingSystem(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldAccountingSystem,
		})
	}
	if auu.mutation.AccountingSystemCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldAccountingSystem,
		})
	}
	if value, ok := auu.mutation.CorporateTag(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldCorporateTag,
		})
	}
	if auu.mutation.CorporateTagCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldCorporateTag,
		})
	}
	if value, ok := auu.mutation.MaintainerMark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldMaintainerMark,
		})
	}
	if auu.mutation.MaintainerMarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldMaintainerMark,
		})
	}
	if value, ok := auu.mutation.SupplierMark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldSupplierMark,
		})
	}
	if auu.mutation.SupplierMarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldSupplierMark,
		})
	}
	if value, ok := auu.mutation.ManufactureMark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldManufactureMark,
		})
	}
	if auu.mutation.ManufactureMarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldManufactureMark,
		})
	}
	if value, ok := auu.mutation.AssetDisposalAgencyTag(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldAssetDisposalAgencyTag,
		})
	}
	if auu.mutation.AssetDisposalAgencyTagCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldAssetDisposalAgencyTag,
		})
	}
	if value, ok := auu.mutation.StateAssetManagementCompany(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldStateAssetManagementCompany,
		})
	}
	if auu.mutation.StateAssetManagementCompanyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldStateAssetManagementCompany,
		})
	}
	if value, ok := auu.mutation.InstitutionNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldInstitutionNumber,
		})
	}
	if value, ok := auu.mutation.AddedInstitutionNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldInstitutionNumber,
		})
	}
	if auu.mutation.InstitutionNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldInstitutionNumber,
		})
	}
	if value, ok := auu.mutation.AuthorizedNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldAuthorizedNumber,
		})
	}
	if value, ok := auu.mutation.AddedAuthorizedNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldAuthorizedNumber,
		})
	}
	if auu.mutation.AuthorizedNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldAuthorizedNumber,
		})
	}
	if value, ok := auu.mutation.OfSideNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldOfSideNumber,
		})
	}
	if value, ok := auu.mutation.AddedOfSideNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldOfSideNumber,
		})
	}
	if auu.mutation.OfSideNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldOfSideNumber,
		})
	}
	if value, ok := auu.mutation.InstitutionAuthority(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldInstitutionAuthority,
		})
	}
	if auu.mutation.InstitutionAuthorityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldInstitutionAuthority,
		})
	}
	if value, ok := auu.mutation.AdministrationAuthority(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldAdministrationAuthority,
		})
	}
	if auu.mutation.AdministrationAuthorityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldAdministrationAuthority,
		})
	}
	if value, ok := auu.mutation.EnableTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asunit.FieldEnableTime,
		})
	}
	if auu.mutation.EnableTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asunit.FieldEnableTime,
		})
	}
	if value, ok := auu.mutation.DisableTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asunit.FieldDisableTime,
		})
	}
	if auu.mutation.DisableTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asunit.FieldDisableTime,
		})
	}
	if value, ok := auu.mutation.SealTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asunit.FieldSealTime,
		})
	}
	if auu.mutation.SealTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asunit.FieldSealTime,
		})
	}
	if value, ok := auu.mutation.UnitRemark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldUnitRemark,
		})
	}
	if auu.mutation.UnitRemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldUnitRemark,
		})
	}
	if value, ok := auu.mutation.AssetDownloadStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldAssetDownloadStatus,
		})
	}
	if auu.mutation.AssetDownloadStatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldAssetDownloadStatus,
		})
	}
	if value, ok := auu.mutation.LatitudeAndLongitude(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldLatitudeAndLongitude,
		})
	}
	if auu.mutation.LatitudeAndLongitudeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldLatitudeAndLongitude,
		})
	}
	if value, ok := auu.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldSort,
		})
	}
	if value, ok := auu.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldSort,
		})
	}
	if auu.mutation.SortCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldSort,
		})
	}
	if value, ok := auu.mutation.OrganCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldOrganCode,
		})
	}
	if auu.mutation.OrganCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldOrganCode,
		})
	}
	if value, ok := auu.mutation.HadInnerNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldHadInnerNumber,
		})
	}
	if value, ok := auu.mutation.AddedHadInnerNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldHadInnerNumber,
		})
	}
	if auu.mutation.HadInnerNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldHadInnerNumber,
		})
	}
	if value, ok := auu.mutation.ApproveInnerNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldApproveInnerNumber,
		})
	}
	if value, ok := auu.mutation.AddedApproveInnerNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldApproveInnerNumber,
		})
	}
	if auu.mutation.ApproveInnerNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldApproveInnerNumber,
		})
	}
	if value, ok := auu.mutation.Img(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldImg,
		})
	}
	if auu.mutation.ImgCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldImg,
		})
	}
	if value, ok := auu.mutation.LinkMan(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldLinkMan,
		})
	}
	if auu.mutation.LinkManCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldLinkMan,
		})
	}
	if value, ok := auu.mutation.LinkPhone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldLinkPhone,
		})
	}
	if auu.mutation.LinkPhoneCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldLinkPhone,
		})
	}
	if value, ok := auu.mutation.UnitCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldUnitCode,
		})
	}
	if auu.mutation.UnitCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldUnitCode,
		})
	}
	if value, ok := auu.mutation.AuthorityTotal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldAuthorityTotal,
		})
	}
	if value, ok := auu.mutation.AddedAuthorityTotal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldAuthorityTotal,
		})
	}
	if auu.mutation.AuthorityTotalCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldAuthorityTotal,
		})
	}
	if value, ok := auu.mutation.StaffOnActiveDuty(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldStaffOnActiveDuty,
		})
	}
	if value, ok := auu.mutation.AddedStaffOnActiveDuty(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldStaffOnActiveDuty,
		})
	}
	if auu.mutation.StaffOnActiveDutyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldStaffOnActiveDuty,
		})
	}
	if value, ok := auu.mutation.RetiredStaff(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldRetiredStaff,
		})
	}
	if value, ok := auu.mutation.AddedRetiredStaff(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldRetiredStaff,
		})
	}
	if auu.mutation.RetiredStaffCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldRetiredStaff,
		})
	}
	if value, ok := auu.mutation.OtherStaff(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldOtherStaff,
		})
	}
	if value, ok := auu.mutation.AddedOtherStaff(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldOtherStaff,
		})
	}
	if auu.mutation.OtherStaffCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldOtherStaff,
		})
	}
	if value, ok := auu.mutation.IsVirtual(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldIsVirtual,
		})
	}
	if value, ok := auu.mutation.UnitReform(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldUnitReform,
		})
	}
	if value, ok := auu.mutation.AddedUnitReform(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldUnitReform,
		})
	}
	if auu.mutation.UnitReformCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldUnitReform,
		})
	}
	if value, ok := auu.mutation.PersonExpenditure(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldPersonExpenditure,
		})
	}
	if value, ok := auu.mutation.AddedPersonExpenditure(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldPersonExpenditure,
		})
	}
	if auu.mutation.PersonExpenditureCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldPersonExpenditure,
		})
	}
	if value, ok := auu.mutation.InstitutionType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldInstitutionType,
		})
	}
	if auu.mutation.InstitutionTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldInstitutionType,
		})
	}
	if value, ok := auu.mutation.DepartmentIdentification(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldDepartmentIdentification,
		})
	}
	if value, ok := auu.mutation.AddedDepartmentIdentification(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldDepartmentIdentification,
		})
	}
	if auu.mutation.DepartmentIdentificationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldDepartmentIdentification,
		})
	}
	if value, ok := auu.mutation.TotalHeadcount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldTotalHeadcount,
		})
	}
	if value, ok := auu.mutation.AddedTotalHeadcount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldTotalHeadcount,
		})
	}
	if auu.mutation.TotalHeadcountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldTotalHeadcount,
		})
	}
	if value, ok := auu.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldIsDeleted,
		})
	}
	if value, ok := auu.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldIsDeleted,
		})
	}
	if value, ok := auu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldStatus,
		})
	}
	if value, ok := auu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldStatus,
		})
	}
	if auu.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldStatus,
		})
	}
	if value, ok := auu.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldCreateUser,
		})
	}
	if value, ok := auu.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldCreateUser,
		})
	}
	if auu.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldCreateUser,
		})
	}
	if value, ok := auu.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldUpdateUser,
		})
	}
	if value, ok := auu.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldUpdateUser,
		})
	}
	if auu.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldUpdateUser,
		})
	}
	if auu.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asunit.FieldCreateTime,
		})
	}
	if value, ok := auu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asunit.FieldUpdateTime,
		})
	}
	if auu.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asunit.FieldUpdateTime,
		})
	}
	if auu.mutation.TenantxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   asunit.TenantxTable,
			Columns: []string{asunit.TenantxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: astenant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.TenantxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   asunit.TenantxTable,
			Columns: []string{asunit.TenantxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: astenant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, auu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asunit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AsUnitUpdateOne is the builder for updating a single AsUnit entity.
type AsUnitUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AsUnitMutation
}

// SetUnitName sets the "unit_name" field.
func (auuo *AsUnitUpdateOne) SetUnitName(s string) *AsUnitUpdateOne {
	auuo.mutation.SetUnitName(s)
	return auuo
}

// SetUnitNameEn sets the "unit_name_en" field.
func (auuo *AsUnitUpdateOne) SetUnitNameEn(s string) *AsUnitUpdateOne {
	auuo.mutation.SetUnitNameEn(s)
	return auuo
}

// SetNillableUnitNameEn sets the "unit_name_en" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableUnitNameEn(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetUnitNameEn(*s)
	}
	return auuo
}

// ClearUnitNameEn clears the value of the "unit_name_en" field.
func (auuo *AsUnitUpdateOne) ClearUnitNameEn() *AsUnitUpdateOne {
	auuo.mutation.ClearUnitNameEn()
	return auuo
}

// SetOrganizationForm sets the "organization_form" field.
func (auuo *AsUnitUpdateOne) SetOrganizationForm(i int64) *AsUnitUpdateOne {
	auuo.mutation.ResetOrganizationForm()
	auuo.mutation.SetOrganizationForm(i)
	return auuo
}

// SetNillableOrganizationForm sets the "organization_form" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableOrganizationForm(i *int64) *AsUnitUpdateOne {
	if i != nil {
		auuo.SetOrganizationForm(*i)
	}
	return auuo
}

// AddOrganizationForm adds i to the "organization_form" field.
func (auuo *AsUnitUpdateOne) AddOrganizationForm(i int64) *AsUnitUpdateOne {
	auuo.mutation.AddOrganizationForm(i)
	return auuo
}

// ClearOrganizationForm clears the value of the "organization_form" field.
func (auuo *AsUnitUpdateOne) ClearOrganizationForm() *AsUnitUpdateOne {
	auuo.mutation.ClearOrganizationForm()
	return auuo
}

// SetUnitType sets the "unit_type" field.
func (auuo *AsUnitUpdateOne) SetUnitType(i int64) *AsUnitUpdateOne {
	auuo.mutation.ResetUnitType()
	auuo.mutation.SetUnitType(i)
	return auuo
}

// SetNillableUnitType sets the "unit_type" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableUnitType(i *int64) *AsUnitUpdateOne {
	if i != nil {
		auuo.SetUnitType(*i)
	}
	return auuo
}

// AddUnitType adds i to the "unit_type" field.
func (auuo *AsUnitUpdateOne) AddUnitType(i int64) *AsUnitUpdateOne {
	auuo.mutation.AddUnitType(i)
	return auuo
}

// ClearUnitType clears the value of the "unit_type" field.
func (auuo *AsUnitUpdateOne) ClearUnitType() *AsUnitUpdateOne {
	auuo.mutation.ClearUnitType()
	return auuo
}

// SetParentNodeName sets the "parent_node_name" field.
func (auuo *AsUnitUpdateOne) SetParentNodeName(s string) *AsUnitUpdateOne {
	auuo.mutation.SetParentNodeName(s)
	return auuo
}

// SetNillableParentNodeName sets the "parent_node_name" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableParentNodeName(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetParentNodeName(*s)
	}
	return auuo
}

// ClearParentNodeName clears the value of the "parent_node_name" field.
func (auuo *AsUnitUpdateOne) ClearParentNodeName() *AsUnitUpdateOne {
	auuo.mutation.ClearParentNodeName()
	return auuo
}

// SetChargeSectionID sets the "charge_section_id" field.
func (auuo *AsUnitUpdateOne) SetChargeSectionID(i int64) *AsUnitUpdateOne {
	auuo.mutation.ResetChargeSectionID()
	auuo.mutation.SetChargeSectionID(i)
	return auuo
}

// SetNillableChargeSectionID sets the "charge_section_id" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableChargeSectionID(i *int64) *AsUnitUpdateOne {
	if i != nil {
		auuo.SetChargeSectionID(*i)
	}
	return auuo
}

// AddChargeSectionID adds i to the "charge_section_id" field.
func (auuo *AsUnitUpdateOne) AddChargeSectionID(i int64) *AsUnitUpdateOne {
	auuo.mutation.AddChargeSectionID(i)
	return auuo
}

// ClearChargeSectionID clears the value of the "charge_section_id" field.
func (auuo *AsUnitUpdateOne) ClearChargeSectionID() *AsUnitUpdateOne {
	auuo.mutation.ClearChargeSectionID()
	return auuo
}

// SetChargeSectionCode sets the "charge_section_code" field.
func (auuo *AsUnitUpdateOne) SetChargeSectionCode(s string) *AsUnitUpdateOne {
	auuo.mutation.SetChargeSectionCode(s)
	return auuo
}

// SetNillableChargeSectionCode sets the "charge_section_code" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableChargeSectionCode(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetChargeSectionCode(*s)
	}
	return auuo
}

// ClearChargeSectionCode clears the value of the "charge_section_code" field.
func (auuo *AsUnitUpdateOne) ClearChargeSectionCode() *AsUnitUpdateOne {
	auuo.mutation.ClearChargeSectionCode()
	return auuo
}

// SetChargeSectionName sets the "charge_section_name" field.
func (auuo *AsUnitUpdateOne) SetChargeSectionName(s string) *AsUnitUpdateOne {
	auuo.mutation.SetChargeSectionName(s)
	return auuo
}

// SetNillableChargeSectionName sets the "charge_section_name" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableChargeSectionName(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetChargeSectionName(*s)
	}
	return auuo
}

// ClearChargeSectionName clears the value of the "charge_section_name" field.
func (auuo *AsUnitUpdateOne) ClearChargeSectionName() *AsUnitUpdateOne {
	auuo.mutation.ClearChargeSectionName()
	return auuo
}

// SetLocalFinancialCode sets the "local_financial_code" field.
func (auuo *AsUnitUpdateOne) SetLocalFinancialCode(s string) *AsUnitUpdateOne {
	auuo.mutation.SetLocalFinancialCode(s)
	return auuo
}

// SetNillableLocalFinancialCode sets the "local_financial_code" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableLocalFinancialCode(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetLocalFinancialCode(*s)
	}
	return auuo
}

// ClearLocalFinancialCode clears the value of the "local_financial_code" field.
func (auuo *AsUnitUpdateOne) ClearLocalFinancialCode() *AsUnitUpdateOne {
	auuo.mutation.ClearLocalFinancialCode()
	return auuo
}

// SetLocalFinancialName sets the "local_financial_name" field.
func (auuo *AsUnitUpdateOne) SetLocalFinancialName(s string) *AsUnitUpdateOne {
	auuo.mutation.SetLocalFinancialName(s)
	return auuo
}

// SetNillableLocalFinancialName sets the "local_financial_name" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableLocalFinancialName(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetLocalFinancialName(*s)
	}
	return auuo
}

// ClearLocalFinancialName clears the value of the "local_financial_name" field.
func (auuo *AsUnitUpdateOne) ClearLocalFinancialName() *AsUnitUpdateOne {
	auuo.mutation.ClearLocalFinancialName()
	return auuo
}

// SetLocalFinancialID sets the "local_financial_id" field.
func (auuo *AsUnitUpdateOne) SetLocalFinancialID(s string) *AsUnitUpdateOne {
	auuo.mutation.SetLocalFinancialID(s)
	return auuo
}

// SetNillableLocalFinancialID sets the "local_financial_id" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableLocalFinancialID(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetLocalFinancialID(*s)
	}
	return auuo
}

// ClearLocalFinancialID clears the value of the "local_financial_id" field.
func (auuo *AsUnitUpdateOne) ClearLocalFinancialID() *AsUnitUpdateOne {
	auuo.mutation.ClearLocalFinancialID()
	return auuo
}

// SetOfficeAdministrationCode sets the "office_administration_code" field.
func (auuo *AsUnitUpdateOne) SetOfficeAdministrationCode(s string) *AsUnitUpdateOne {
	auuo.mutation.SetOfficeAdministrationCode(s)
	return auuo
}

// SetNillableOfficeAdministrationCode sets the "office_administration_code" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableOfficeAdministrationCode(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetOfficeAdministrationCode(*s)
	}
	return auuo
}

// ClearOfficeAdministrationCode clears the value of the "office_administration_code" field.
func (auuo *AsUnitUpdateOne) ClearOfficeAdministrationCode() *AsUnitUpdateOne {
	auuo.mutation.ClearOfficeAdministrationCode()
	return auuo
}

// SetOfficeAdministrationName sets the "office_administration_name" field.
func (auuo *AsUnitUpdateOne) SetOfficeAdministrationName(s string) *AsUnitUpdateOne {
	auuo.mutation.SetOfficeAdministrationName(s)
	return auuo
}

// SetNillableOfficeAdministrationName sets the "office_administration_name" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableOfficeAdministrationName(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetOfficeAdministrationName(*s)
	}
	return auuo
}

// ClearOfficeAdministrationName clears the value of the "office_administration_name" field.
func (auuo *AsUnitUpdateOne) ClearOfficeAdministrationName() *AsUnitUpdateOne {
	auuo.mutation.ClearOfficeAdministrationName()
	return auuo
}

// SetAdministrationDivisionCode sets the "administration_division_code" field.
func (auuo *AsUnitUpdateOne) SetAdministrationDivisionCode(s string) *AsUnitUpdateOne {
	auuo.mutation.SetAdministrationDivisionCode(s)
	return auuo
}

// SetNillableAdministrationDivisionCode sets the "administration_division_code" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableAdministrationDivisionCode(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetAdministrationDivisionCode(*s)
	}
	return auuo
}

// ClearAdministrationDivisionCode clears the value of the "administration_division_code" field.
func (auuo *AsUnitUpdateOne) ClearAdministrationDivisionCode() *AsUnitUpdateOne {
	auuo.mutation.ClearAdministrationDivisionCode()
	return auuo
}

// SetAdministrationDivisionName sets the "administration_division_name" field.
func (auuo *AsUnitUpdateOne) SetAdministrationDivisionName(s string) *AsUnitUpdateOne {
	auuo.mutation.SetAdministrationDivisionName(s)
	return auuo
}

// SetNillableAdministrationDivisionName sets the "administration_division_name" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableAdministrationDivisionName(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetAdministrationDivisionName(*s)
	}
	return auuo
}

// ClearAdministrationDivisionName clears the value of the "administration_division_name" field.
func (auuo *AsUnitUpdateOne) ClearAdministrationDivisionName() *AsUnitUpdateOne {
	auuo.mutation.ClearAdministrationDivisionName()
	return auuo
}

// SetBudgetCode sets the "budget_code" field.
func (auuo *AsUnitUpdateOne) SetBudgetCode(i int64) *AsUnitUpdateOne {
	auuo.mutation.ResetBudgetCode()
	auuo.mutation.SetBudgetCode(i)
	return auuo
}

// SetNillableBudgetCode sets the "budget_code" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableBudgetCode(i *int64) *AsUnitUpdateOne {
	if i != nil {
		auuo.SetBudgetCode(*i)
	}
	return auuo
}

// AddBudgetCode adds i to the "budget_code" field.
func (auuo *AsUnitUpdateOne) AddBudgetCode(i int64) *AsUnitUpdateOne {
	auuo.mutation.AddBudgetCode(i)
	return auuo
}

// ClearBudgetCode clears the value of the "budget_code" field.
func (auuo *AsUnitUpdateOne) ClearBudgetCode() *AsUnitUpdateOne {
	auuo.mutation.ClearBudgetCode()
	return auuo
}

// SetCollegeCode sets the "college_code" field.
func (auuo *AsUnitUpdateOne) SetCollegeCode(s string) *AsUnitUpdateOne {
	auuo.mutation.SetCollegeCode(s)
	return auuo
}

// SetNillableCollegeCode sets the "college_code" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableCollegeCode(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetCollegeCode(*s)
	}
	return auuo
}

// ClearCollegeCode clears the value of the "college_code" field.
func (auuo *AsUnitUpdateOne) ClearCollegeCode() *AsUnitUpdateOne {
	auuo.mutation.ClearCollegeCode()
	return auuo
}

// SetOrganizationCode sets the "organization_code" field.
func (auuo *AsUnitUpdateOne) SetOrganizationCode(s string) *AsUnitUpdateOne {
	auuo.mutation.SetOrganizationCode(s)
	return auuo
}

// SetNillableOrganizationCode sets the "organization_code" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableOrganizationCode(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetOrganizationCode(*s)
	}
	return auuo
}

// ClearOrganizationCode clears the value of the "organization_code" field.
func (auuo *AsUnitUpdateOne) ClearOrganizationCode() *AsUnitUpdateOne {
	auuo.mutation.ClearOrganizationCode()
	return auuo
}

// SetUnitTypeCode sets the "unit_type_code" field.
func (auuo *AsUnitUpdateOne) SetUnitTypeCode(i int64) *AsUnitUpdateOne {
	auuo.mutation.ResetUnitTypeCode()
	auuo.mutation.SetUnitTypeCode(i)
	return auuo
}

// SetNillableUnitTypeCode sets the "unit_type_code" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableUnitTypeCode(i *int64) *AsUnitUpdateOne {
	if i != nil {
		auuo.SetUnitTypeCode(*i)
	}
	return auuo
}

// AddUnitTypeCode adds i to the "unit_type_code" field.
func (auuo *AsUnitUpdateOne) AddUnitTypeCode(i int64) *AsUnitUpdateOne {
	auuo.mutation.AddUnitTypeCode(i)
	return auuo
}

// ClearUnitTypeCode clears the value of the "unit_type_code" field.
func (auuo *AsUnitUpdateOne) ClearUnitTypeCode() *AsUnitUpdateOne {
	auuo.mutation.ClearUnitTypeCode()
	return auuo
}

// SetUnitTypeName sets the "unit_type_name" field.
func (auuo *AsUnitUpdateOne) SetUnitTypeName(i int64) *AsUnitUpdateOne {
	auuo.mutation.ResetUnitTypeName()
	auuo.mutation.SetUnitTypeName(i)
	return auuo
}

// SetNillableUnitTypeName sets the "unit_type_name" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableUnitTypeName(i *int64) *AsUnitUpdateOne {
	if i != nil {
		auuo.SetUnitTypeName(*i)
	}
	return auuo
}

// AddUnitTypeName adds i to the "unit_type_name" field.
func (auuo *AsUnitUpdateOne) AddUnitTypeName(i int64) *AsUnitUpdateOne {
	auuo.mutation.AddUnitTypeName(i)
	return auuo
}

// ClearUnitTypeName clears the value of the "unit_type_name" field.
func (auuo *AsUnitUpdateOne) ClearUnitTypeName() *AsUnitUpdateOne {
	auuo.mutation.ClearUnitTypeName()
	return auuo
}

// SetUnitBasicProperty sets the "unit_basic_property" field.
func (auuo *AsUnitUpdateOne) SetUnitBasicProperty(i int64) *AsUnitUpdateOne {
	auuo.mutation.ResetUnitBasicProperty()
	auuo.mutation.SetUnitBasicProperty(i)
	return auuo
}

// SetNillableUnitBasicProperty sets the "unit_basic_property" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableUnitBasicProperty(i *int64) *AsUnitUpdateOne {
	if i != nil {
		auuo.SetUnitBasicProperty(*i)
	}
	return auuo
}

// AddUnitBasicProperty adds i to the "unit_basic_property" field.
func (auuo *AsUnitUpdateOne) AddUnitBasicProperty(i int64) *AsUnitUpdateOne {
	auuo.mutation.AddUnitBasicProperty(i)
	return auuo
}

// ClearUnitBasicProperty clears the value of the "unit_basic_property" field.
func (auuo *AsUnitUpdateOne) ClearUnitBasicProperty() *AsUnitUpdateOne {
	auuo.mutation.ClearUnitBasicProperty()
	return auuo
}

// SetSocialCreditCode sets the "social_credit_code" field.
func (auuo *AsUnitUpdateOne) SetSocialCreditCode(s string) *AsUnitUpdateOne {
	auuo.mutation.SetSocialCreditCode(s)
	return auuo
}

// SetNillableSocialCreditCode sets the "social_credit_code" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableSocialCreditCode(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetSocialCreditCode(*s)
	}
	return auuo
}

// ClearSocialCreditCode clears the value of the "social_credit_code" field.
func (auuo *AsUnitUpdateOne) ClearSocialCreditCode() *AsUnitUpdateOne {
	auuo.mutation.ClearSocialCreditCode()
	return auuo
}

// SetBudgetUnitName sets the "budget_unit_name" field.
func (auuo *AsUnitUpdateOne) SetBudgetUnitName(s string) *AsUnitUpdateOne {
	auuo.mutation.SetBudgetUnitName(s)
	return auuo
}

// SetNillableBudgetUnitName sets the "budget_unit_name" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableBudgetUnitName(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetBudgetUnitName(*s)
	}
	return auuo
}

// ClearBudgetUnitName clears the value of the "budget_unit_name" field.
func (auuo *AsUnitUpdateOne) ClearBudgetUnitName() *AsUnitUpdateOne {
	auuo.mutation.ClearBudgetUnitName()
	return auuo
}

// SetBudgetUnitCode sets the "budget_unit_code" field.
func (auuo *AsUnitUpdateOne) SetBudgetUnitCode(s string) *AsUnitUpdateOne {
	auuo.mutation.SetBudgetUnitCode(s)
	return auuo
}

// SetNillableBudgetUnitCode sets the "budget_unit_code" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableBudgetUnitCode(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetBudgetUnitCode(*s)
	}
	return auuo
}

// ClearBudgetUnitCode clears the value of the "budget_unit_code" field.
func (auuo *AsUnitUpdateOne) ClearBudgetUnitCode() *AsUnitUpdateOne {
	auuo.mutation.ClearBudgetUnitCode()
	return auuo
}

// SetBudgetManagementLevel sets the "budget_management_level" field.
func (auuo *AsUnitUpdateOne) SetBudgetManagementLevel(i int64) *AsUnitUpdateOne {
	auuo.mutation.ResetBudgetManagementLevel()
	auuo.mutation.SetBudgetManagementLevel(i)
	return auuo
}

// SetNillableBudgetManagementLevel sets the "budget_management_level" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableBudgetManagementLevel(i *int64) *AsUnitUpdateOne {
	if i != nil {
		auuo.SetBudgetManagementLevel(*i)
	}
	return auuo
}

// AddBudgetManagementLevel adds i to the "budget_management_level" field.
func (auuo *AsUnitUpdateOne) AddBudgetManagementLevel(i int64) *AsUnitUpdateOne {
	auuo.mutation.AddBudgetManagementLevel(i)
	return auuo
}

// ClearBudgetManagementLevel clears the value of the "budget_management_level" field.
func (auuo *AsUnitUpdateOne) ClearBudgetManagementLevel() *AsUnitUpdateOne {
	auuo.mutation.ClearBudgetManagementLevel()
	return auuo
}

// SetFirmName sets the "firm_name" field.
func (auuo *AsUnitUpdateOne) SetFirmName(s string) *AsUnitUpdateOne {
	auuo.mutation.SetFirmName(s)
	return auuo
}

// SetNillableFirmName sets the "firm_name" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableFirmName(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetFirmName(*s)
	}
	return auuo
}

// ClearFirmName clears the value of the "firm_name" field.
func (auuo *AsUnitUpdateOne) ClearFirmName() *AsUnitUpdateOne {
	auuo.mutation.ClearFirmName()
	return auuo
}

// SetFirmCode sets the "firm_code" field.
func (auuo *AsUnitUpdateOne) SetFirmCode(s string) *AsUnitUpdateOne {
	auuo.mutation.SetFirmCode(s)
	return auuo
}

// SetNillableFirmCode sets the "firm_code" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableFirmCode(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetFirmCode(*s)
	}
	return auuo
}

// ClearFirmCode clears the value of the "firm_code" field.
func (auuo *AsUnitUpdateOne) ClearFirmCode() *AsUnitUpdateOne {
	auuo.mutation.ClearFirmCode()
	return auuo
}

// SetTelephoneNumber sets the "telephone_number" field.
func (auuo *AsUnitUpdateOne) SetTelephoneNumber(s string) *AsUnitUpdateOne {
	auuo.mutation.SetTelephoneNumber(s)
	return auuo
}

// SetNillableTelephoneNumber sets the "telephone_number" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableTelephoneNumber(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetTelephoneNumber(*s)
	}
	return auuo
}

// ClearTelephoneNumber clears the value of the "telephone_number" field.
func (auuo *AsUnitUpdateOne) ClearTelephoneNumber() *AsUnitUpdateOne {
	auuo.mutation.ClearTelephoneNumber()
	return auuo
}

// SetPhoneNumber sets the "phone_number" field.
func (auuo *AsUnitUpdateOne) SetPhoneNumber(s string) *AsUnitUpdateOne {
	auuo.mutation.SetPhoneNumber(s)
	return auuo
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillablePhoneNumber(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetPhoneNumber(*s)
	}
	return auuo
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (auuo *AsUnitUpdateOne) ClearPhoneNumber() *AsUnitUpdateOne {
	auuo.mutation.ClearPhoneNumber()
	return auuo
}

// SetFaxNumber sets the "fax_number" field.
func (auuo *AsUnitUpdateOne) SetFaxNumber(s string) *AsUnitUpdateOne {
	auuo.mutation.SetFaxNumber(s)
	return auuo
}

// SetNillableFaxNumber sets the "fax_number" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableFaxNumber(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetFaxNumber(*s)
	}
	return auuo
}

// ClearFaxNumber clears the value of the "fax_number" field.
func (auuo *AsUnitUpdateOne) ClearFaxNumber() *AsUnitUpdateOne {
	auuo.mutation.ClearFaxNumber()
	return auuo
}

// SetEmailAddress sets the "email_address" field.
func (auuo *AsUnitUpdateOne) SetEmailAddress(s string) *AsUnitUpdateOne {
	auuo.mutation.SetEmailAddress(s)
	return auuo
}

// SetNillableEmailAddress sets the "email_address" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableEmailAddress(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetEmailAddress(*s)
	}
	return auuo
}

// ClearEmailAddress clears the value of the "email_address" field.
func (auuo *AsUnitUpdateOne) ClearEmailAddress() *AsUnitUpdateOne {
	auuo.mutation.ClearEmailAddress()
	return auuo
}

// SetProvince sets the "province" field.
func (auuo *AsUnitUpdateOne) SetProvince(s string) *AsUnitUpdateOne {
	auuo.mutation.SetProvince(s)
	return auuo
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableProvince(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetProvince(*s)
	}
	return auuo
}

// ClearProvince clears the value of the "province" field.
func (auuo *AsUnitUpdateOne) ClearProvince() *AsUnitUpdateOne {
	auuo.mutation.ClearProvince()
	return auuo
}

// SetCity sets the "city" field.
func (auuo *AsUnitUpdateOne) SetCity(s string) *AsUnitUpdateOne {
	auuo.mutation.SetCity(s)
	return auuo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableCity(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetCity(*s)
	}
	return auuo
}

// ClearCity clears the value of the "city" field.
func (auuo *AsUnitUpdateOne) ClearCity() *AsUnitUpdateOne {
	auuo.mutation.ClearCity()
	return auuo
}

// SetCounty sets the "county" field.
func (auuo *AsUnitUpdateOne) SetCounty(s string) *AsUnitUpdateOne {
	auuo.mutation.SetCounty(s)
	return auuo
}

// SetNillableCounty sets the "county" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableCounty(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetCounty(*s)
	}
	return auuo
}

// ClearCounty clears the value of the "county" field.
func (auuo *AsUnitUpdateOne) ClearCounty() *AsUnitUpdateOne {
	auuo.mutation.ClearCounty()
	return auuo
}

// SetStreetAddress sets the "street_address" field.
func (auuo *AsUnitUpdateOne) SetStreetAddress(s string) *AsUnitUpdateOne {
	auuo.mutation.SetStreetAddress(s)
	return auuo
}

// SetNillableStreetAddress sets the "street_address" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableStreetAddress(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetStreetAddress(*s)
	}
	return auuo
}

// ClearStreetAddress clears the value of the "street_address" field.
func (auuo *AsUnitUpdateOne) ClearStreetAddress() *AsUnitUpdateOne {
	auuo.mutation.ClearStreetAddress()
	return auuo
}

// SetPostalCode sets the "postal_code" field.
func (auuo *AsUnitUpdateOne) SetPostalCode(s string) *AsUnitUpdateOne {
	auuo.mutation.SetPostalCode(s)
	return auuo
}

// SetNillablePostalCode sets the "postal_code" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillablePostalCode(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetPostalCode(*s)
	}
	return auuo
}

// ClearPostalCode clears the value of the "postal_code" field.
func (auuo *AsUnitUpdateOne) ClearPostalCode() *AsUnitUpdateOne {
	auuo.mutation.ClearPostalCode()
	return auuo
}

// SetFundSupplyModeName sets the "fund_supply_mode_name" field.
func (auuo *AsUnitUpdateOne) SetFundSupplyModeName(i int64) *AsUnitUpdateOne {
	auuo.mutation.ResetFundSupplyModeName()
	auuo.mutation.SetFundSupplyModeName(i)
	return auuo
}

// SetNillableFundSupplyModeName sets the "fund_supply_mode_name" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableFundSupplyModeName(i *int64) *AsUnitUpdateOne {
	if i != nil {
		auuo.SetFundSupplyModeName(*i)
	}
	return auuo
}

// AddFundSupplyModeName adds i to the "fund_supply_mode_name" field.
func (auuo *AsUnitUpdateOne) AddFundSupplyModeName(i int64) *AsUnitUpdateOne {
	auuo.mutation.AddFundSupplyModeName(i)
	return auuo
}

// ClearFundSupplyModeName clears the value of the "fund_supply_mode_name" field.
func (auuo *AsUnitUpdateOne) ClearFundSupplyModeName() *AsUnitUpdateOne {
	auuo.mutation.ClearFundSupplyModeName()
	return auuo
}

// SetFundSupplyModeCode sets the "fund_supply_mode_code" field.
func (auuo *AsUnitUpdateOne) SetFundSupplyModeCode(i int64) *AsUnitUpdateOne {
	auuo.mutation.ResetFundSupplyModeCode()
	auuo.mutation.SetFundSupplyModeCode(i)
	return auuo
}

// SetNillableFundSupplyModeCode sets the "fund_supply_mode_code" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableFundSupplyModeCode(i *int64) *AsUnitUpdateOne {
	if i != nil {
		auuo.SetFundSupplyModeCode(*i)
	}
	return auuo
}

// AddFundSupplyModeCode adds i to the "fund_supply_mode_code" field.
func (auuo *AsUnitUpdateOne) AddFundSupplyModeCode(i int64) *AsUnitUpdateOne {
	auuo.mutation.AddFundSupplyModeCode(i)
	return auuo
}

// ClearFundSupplyModeCode clears the value of the "fund_supply_mode_code" field.
func (auuo *AsUnitUpdateOne) ClearFundSupplyModeCode() *AsUnitUpdateOne {
	auuo.mutation.ClearFundSupplyModeCode()
	return auuo
}

// SetAdministrationLevelName sets the "administration_level_name" field.
func (auuo *AsUnitUpdateOne) SetAdministrationLevelName(i int64) *AsUnitUpdateOne {
	auuo.mutation.ResetAdministrationLevelName()
	auuo.mutation.SetAdministrationLevelName(i)
	return auuo
}

// SetNillableAdministrationLevelName sets the "administration_level_name" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableAdministrationLevelName(i *int64) *AsUnitUpdateOne {
	if i != nil {
		auuo.SetAdministrationLevelName(*i)
	}
	return auuo
}

// AddAdministrationLevelName adds i to the "administration_level_name" field.
func (auuo *AsUnitUpdateOne) AddAdministrationLevelName(i int64) *AsUnitUpdateOne {
	auuo.mutation.AddAdministrationLevelName(i)
	return auuo
}

// ClearAdministrationLevelName clears the value of the "administration_level_name" field.
func (auuo *AsUnitUpdateOne) ClearAdministrationLevelName() *AsUnitUpdateOne {
	auuo.mutation.ClearAdministrationLevelName()
	return auuo
}

// SetAdministrationLevelType sets the "administration_level_type" field.
func (auuo *AsUnitUpdateOne) SetAdministrationLevelType(i int64) *AsUnitUpdateOne {
	auuo.mutation.ResetAdministrationLevelType()
	auuo.mutation.SetAdministrationLevelType(i)
	return auuo
}

// SetNillableAdministrationLevelType sets the "administration_level_type" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableAdministrationLevelType(i *int64) *AsUnitUpdateOne {
	if i != nil {
		auuo.SetAdministrationLevelType(*i)
	}
	return auuo
}

// AddAdministrationLevelType adds i to the "administration_level_type" field.
func (auuo *AsUnitUpdateOne) AddAdministrationLevelType(i int64) *AsUnitUpdateOne {
	auuo.mutation.AddAdministrationLevelType(i)
	return auuo
}

// ClearAdministrationLevelType clears the value of the "administration_level_type" field.
func (auuo *AsUnitUpdateOne) ClearAdministrationLevelType() *AsUnitUpdateOne {
	auuo.mutation.ClearAdministrationLevelType()
	return auuo
}

// SetDepartmentCategoryName sets the "department_category_name" field.
func (auuo *AsUnitUpdateOne) SetDepartmentCategoryName(i int64) *AsUnitUpdateOne {
	auuo.mutation.ResetDepartmentCategoryName()
	auuo.mutation.SetDepartmentCategoryName(i)
	return auuo
}

// SetNillableDepartmentCategoryName sets the "department_category_name" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableDepartmentCategoryName(i *int64) *AsUnitUpdateOne {
	if i != nil {
		auuo.SetDepartmentCategoryName(*i)
	}
	return auuo
}

// AddDepartmentCategoryName adds i to the "department_category_name" field.
func (auuo *AsUnitUpdateOne) AddDepartmentCategoryName(i int64) *AsUnitUpdateOne {
	auuo.mutation.AddDepartmentCategoryName(i)
	return auuo
}

// ClearDepartmentCategoryName clears the value of the "department_category_name" field.
func (auuo *AsUnitUpdateOne) ClearDepartmentCategoryName() *AsUnitUpdateOne {
	auuo.mutation.ClearDepartmentCategoryName()
	return auuo
}

// SetBusinessDepartmentClassificationCode sets the "business_department_classification_code" field.
func (auuo *AsUnitUpdateOne) SetBusinessDepartmentClassificationCode(i int64) *AsUnitUpdateOne {
	auuo.mutation.ResetBusinessDepartmentClassificationCode()
	auuo.mutation.SetBusinessDepartmentClassificationCode(i)
	return auuo
}

// SetNillableBusinessDepartmentClassificationCode sets the "business_department_classification_code" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableBusinessDepartmentClassificationCode(i *int64) *AsUnitUpdateOne {
	if i != nil {
		auuo.SetBusinessDepartmentClassificationCode(*i)
	}
	return auuo
}

// AddBusinessDepartmentClassificationCode adds i to the "business_department_classification_code" field.
func (auuo *AsUnitUpdateOne) AddBusinessDepartmentClassificationCode(i int64) *AsUnitUpdateOne {
	auuo.mutation.AddBusinessDepartmentClassificationCode(i)
	return auuo
}

// ClearBusinessDepartmentClassificationCode clears the value of the "business_department_classification_code" field.
func (auuo *AsUnitUpdateOne) ClearBusinessDepartmentClassificationCode() *AsUnitUpdateOne {
	auuo.mutation.ClearBusinessDepartmentClassificationCode()
	return auuo
}

// SetPrincipal sets the "principal" field.
func (auuo *AsUnitUpdateOne) SetPrincipal(s string) *AsUnitUpdateOne {
	auuo.mutation.SetPrincipal(s)
	return auuo
}

// SetNillablePrincipal sets the "principal" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillablePrincipal(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetPrincipal(*s)
	}
	return auuo
}

// ClearPrincipal clears the value of the "principal" field.
func (auuo *AsUnitUpdateOne) ClearPrincipal() *AsUnitUpdateOne {
	auuo.mutation.ClearPrincipal()
	return auuo
}

// SetContact sets the "contact" field.
func (auuo *AsUnitUpdateOne) SetContact(s string) *AsUnitUpdateOne {
	auuo.mutation.SetContact(s)
	return auuo
}

// SetNillableContact sets the "contact" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableContact(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetContact(*s)
	}
	return auuo
}

// ClearContact clears the value of the "contact" field.
func (auuo *AsUnitUpdateOne) ClearContact() *AsUnitUpdateOne {
	auuo.mutation.ClearContact()
	return auuo
}

// SetCorporateRepresentative sets the "corporate_representative" field.
func (auuo *AsUnitUpdateOne) SetCorporateRepresentative(s string) *AsUnitUpdateOne {
	auuo.mutation.SetCorporateRepresentative(s)
	return auuo
}

// SetNillableCorporateRepresentative sets the "corporate_representative" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableCorporateRepresentative(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetCorporateRepresentative(*s)
	}
	return auuo
}

// ClearCorporateRepresentative clears the value of the "corporate_representative" field.
func (auuo *AsUnitUpdateOne) ClearCorporateRepresentative() *AsUnitUpdateOne {
	auuo.mutation.ClearCorporateRepresentative()
	return auuo
}

// SetEconomicType sets the "economic_type" field.
func (auuo *AsUnitUpdateOne) SetEconomicType(i int64) *AsUnitUpdateOne {
	auuo.mutation.ResetEconomicType()
	auuo.mutation.SetEconomicType(i)
	return auuo
}

// SetNillableEconomicType sets the "economic_type" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableEconomicType(i *int64) *AsUnitUpdateOne {
	if i != nil {
		auuo.SetEconomicType(*i)
	}
	return auuo
}

// AddEconomicType adds i to the "economic_type" field.
func (auuo *AsUnitUpdateOne) AddEconomicType(i int64) *AsUnitUpdateOne {
	auuo.mutation.AddEconomicType(i)
	return auuo
}

// ClearEconomicType clears the value of the "economic_type" field.
func (auuo *AsUnitUpdateOne) ClearEconomicType() *AsUnitUpdateOne {
	auuo.mutation.ClearEconomicType()
	return auuo
}

// SetFinancialAffiliation sets the "financial_affiliation" field.
func (auuo *AsUnitUpdateOne) SetFinancialAffiliation(s string) *AsUnitUpdateOne {
	auuo.mutation.SetFinancialAffiliation(s)
	return auuo
}

// SetNillableFinancialAffiliation sets the "financial_affiliation" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableFinancialAffiliation(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetFinancialAffiliation(*s)
	}
	return auuo
}

// ClearFinancialAffiliation clears the value of the "financial_affiliation" field.
func (auuo *AsUnitUpdateOne) ClearFinancialAffiliation() *AsUnitUpdateOne {
	auuo.mutation.ClearFinancialAffiliation()
	return auuo
}

// SetFinancialUnit sets the "financial_unit" field.
func (auuo *AsUnitUpdateOne) SetFinancialUnit(i int64) *AsUnitUpdateOne {
	auuo.mutation.ResetFinancialUnit()
	auuo.mutation.SetFinancialUnit(i)
	return auuo
}

// SetNillableFinancialUnit sets the "financial_unit" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableFinancialUnit(i *int64) *AsUnitUpdateOne {
	if i != nil {
		auuo.SetFinancialUnit(*i)
	}
	return auuo
}

// AddFinancialUnit adds i to the "financial_unit" field.
func (auuo *AsUnitUpdateOne) AddFinancialUnit(i int64) *AsUnitUpdateOne {
	auuo.mutation.AddFinancialUnit(i)
	return auuo
}

// ClearFinancialUnit clears the value of the "financial_unit" field.
func (auuo *AsUnitUpdateOne) ClearFinancialUnit() *AsUnitUpdateOne {
	auuo.mutation.ClearFinancialUnit()
	return auuo
}

// SetVerticalUnit sets the "vertical_unit" field.
func (auuo *AsUnitUpdateOne) SetVerticalUnit(i int64) *AsUnitUpdateOne {
	auuo.mutation.ResetVerticalUnit()
	auuo.mutation.SetVerticalUnit(i)
	return auuo
}

// SetNillableVerticalUnit sets the "vertical_unit" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableVerticalUnit(i *int64) *AsUnitUpdateOne {
	if i != nil {
		auuo.SetVerticalUnit(*i)
	}
	return auuo
}

// AddVerticalUnit adds i to the "vertical_unit" field.
func (auuo *AsUnitUpdateOne) AddVerticalUnit(i int64) *AsUnitUpdateOne {
	auuo.mutation.AddVerticalUnit(i)
	return auuo
}

// ClearVerticalUnit clears the value of the "vertical_unit" field.
func (auuo *AsUnitUpdateOne) ClearVerticalUnit() *AsUnitUpdateOne {
	auuo.mutation.ClearVerticalUnit()
	return auuo
}

// SetVirtualUnit sets the "virtual_unit" field.
func (auuo *AsUnitUpdateOne) SetVirtualUnit(i int64) *AsUnitUpdateOne {
	auuo.mutation.ResetVirtualUnit()
	auuo.mutation.SetVirtualUnit(i)
	return auuo
}

// SetNillableVirtualUnit sets the "virtual_unit" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableVirtualUnit(i *int64) *AsUnitUpdateOne {
	if i != nil {
		auuo.SetVirtualUnit(*i)
	}
	return auuo
}

// AddVirtualUnit adds i to the "virtual_unit" field.
func (auuo *AsUnitUpdateOne) AddVirtualUnit(i int64) *AsUnitUpdateOne {
	auuo.mutation.AddVirtualUnit(i)
	return auuo
}

// ClearVirtualUnit clears the value of the "virtual_unit" field.
func (auuo *AsUnitUpdateOne) ClearVirtualUnit() *AsUnitUpdateOne {
	auuo.mutation.ClearVirtualUnit()
	return auuo
}

// SetAccountingSystem sets the "accounting_system" field.
func (auuo *AsUnitUpdateOne) SetAccountingSystem(i int64) *AsUnitUpdateOne {
	auuo.mutation.ResetAccountingSystem()
	auuo.mutation.SetAccountingSystem(i)
	return auuo
}

// SetNillableAccountingSystem sets the "accounting_system" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableAccountingSystem(i *int64) *AsUnitUpdateOne {
	if i != nil {
		auuo.SetAccountingSystem(*i)
	}
	return auuo
}

// AddAccountingSystem adds i to the "accounting_system" field.
func (auuo *AsUnitUpdateOne) AddAccountingSystem(i int64) *AsUnitUpdateOne {
	auuo.mutation.AddAccountingSystem(i)
	return auuo
}

// ClearAccountingSystem clears the value of the "accounting_system" field.
func (auuo *AsUnitUpdateOne) ClearAccountingSystem() *AsUnitUpdateOne {
	auuo.mutation.ClearAccountingSystem()
	return auuo
}

// SetCorporateTag sets the "corporate_tag" field.
func (auuo *AsUnitUpdateOne) SetCorporateTag(s string) *AsUnitUpdateOne {
	auuo.mutation.SetCorporateTag(s)
	return auuo
}

// SetNillableCorporateTag sets the "corporate_tag" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableCorporateTag(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetCorporateTag(*s)
	}
	return auuo
}

// ClearCorporateTag clears the value of the "corporate_tag" field.
func (auuo *AsUnitUpdateOne) ClearCorporateTag() *AsUnitUpdateOne {
	auuo.mutation.ClearCorporateTag()
	return auuo
}

// SetMaintainerMark sets the "maintainer_mark" field.
func (auuo *AsUnitUpdateOne) SetMaintainerMark(s string) *AsUnitUpdateOne {
	auuo.mutation.SetMaintainerMark(s)
	return auuo
}

// SetNillableMaintainerMark sets the "maintainer_mark" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableMaintainerMark(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetMaintainerMark(*s)
	}
	return auuo
}

// ClearMaintainerMark clears the value of the "maintainer_mark" field.
func (auuo *AsUnitUpdateOne) ClearMaintainerMark() *AsUnitUpdateOne {
	auuo.mutation.ClearMaintainerMark()
	return auuo
}

// SetSupplierMark sets the "supplier_mark" field.
func (auuo *AsUnitUpdateOne) SetSupplierMark(s string) *AsUnitUpdateOne {
	auuo.mutation.SetSupplierMark(s)
	return auuo
}

// SetNillableSupplierMark sets the "supplier_mark" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableSupplierMark(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetSupplierMark(*s)
	}
	return auuo
}

// ClearSupplierMark clears the value of the "supplier_mark" field.
func (auuo *AsUnitUpdateOne) ClearSupplierMark() *AsUnitUpdateOne {
	auuo.mutation.ClearSupplierMark()
	return auuo
}

// SetManufactureMark sets the "manufacture_mark" field.
func (auuo *AsUnitUpdateOne) SetManufactureMark(s string) *AsUnitUpdateOne {
	auuo.mutation.SetManufactureMark(s)
	return auuo
}

// SetNillableManufactureMark sets the "manufacture_mark" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableManufactureMark(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetManufactureMark(*s)
	}
	return auuo
}

// ClearManufactureMark clears the value of the "manufacture_mark" field.
func (auuo *AsUnitUpdateOne) ClearManufactureMark() *AsUnitUpdateOne {
	auuo.mutation.ClearManufactureMark()
	return auuo
}

// SetAssetDisposalAgencyTag sets the "asset_disposal_agency_tag" field.
func (auuo *AsUnitUpdateOne) SetAssetDisposalAgencyTag(s string) *AsUnitUpdateOne {
	auuo.mutation.SetAssetDisposalAgencyTag(s)
	return auuo
}

// SetNillableAssetDisposalAgencyTag sets the "asset_disposal_agency_tag" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableAssetDisposalAgencyTag(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetAssetDisposalAgencyTag(*s)
	}
	return auuo
}

// ClearAssetDisposalAgencyTag clears the value of the "asset_disposal_agency_tag" field.
func (auuo *AsUnitUpdateOne) ClearAssetDisposalAgencyTag() *AsUnitUpdateOne {
	auuo.mutation.ClearAssetDisposalAgencyTag()
	return auuo
}

// SetStateAssetManagementCompany sets the "state_asset_management_company" field.
func (auuo *AsUnitUpdateOne) SetStateAssetManagementCompany(s string) *AsUnitUpdateOne {
	auuo.mutation.SetStateAssetManagementCompany(s)
	return auuo
}

// SetNillableStateAssetManagementCompany sets the "state_asset_management_company" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableStateAssetManagementCompany(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetStateAssetManagementCompany(*s)
	}
	return auuo
}

// ClearStateAssetManagementCompany clears the value of the "state_asset_management_company" field.
func (auuo *AsUnitUpdateOne) ClearStateAssetManagementCompany() *AsUnitUpdateOne {
	auuo.mutation.ClearStateAssetManagementCompany()
	return auuo
}

// SetInstitutionNumber sets the "institution_number" field.
func (auuo *AsUnitUpdateOne) SetInstitutionNumber(i int64) *AsUnitUpdateOne {
	auuo.mutation.ResetInstitutionNumber()
	auuo.mutation.SetInstitutionNumber(i)
	return auuo
}

// SetNillableInstitutionNumber sets the "institution_number" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableInstitutionNumber(i *int64) *AsUnitUpdateOne {
	if i != nil {
		auuo.SetInstitutionNumber(*i)
	}
	return auuo
}

// AddInstitutionNumber adds i to the "institution_number" field.
func (auuo *AsUnitUpdateOne) AddInstitutionNumber(i int64) *AsUnitUpdateOne {
	auuo.mutation.AddInstitutionNumber(i)
	return auuo
}

// ClearInstitutionNumber clears the value of the "institution_number" field.
func (auuo *AsUnitUpdateOne) ClearInstitutionNumber() *AsUnitUpdateOne {
	auuo.mutation.ClearInstitutionNumber()
	return auuo
}

// SetAuthorizedNumber sets the "authorized_number" field.
func (auuo *AsUnitUpdateOne) SetAuthorizedNumber(i int64) *AsUnitUpdateOne {
	auuo.mutation.ResetAuthorizedNumber()
	auuo.mutation.SetAuthorizedNumber(i)
	return auuo
}

// SetNillableAuthorizedNumber sets the "authorized_number" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableAuthorizedNumber(i *int64) *AsUnitUpdateOne {
	if i != nil {
		auuo.SetAuthorizedNumber(*i)
	}
	return auuo
}

// AddAuthorizedNumber adds i to the "authorized_number" field.
func (auuo *AsUnitUpdateOne) AddAuthorizedNumber(i int64) *AsUnitUpdateOne {
	auuo.mutation.AddAuthorizedNumber(i)
	return auuo
}

// ClearAuthorizedNumber clears the value of the "authorized_number" field.
func (auuo *AsUnitUpdateOne) ClearAuthorizedNumber() *AsUnitUpdateOne {
	auuo.mutation.ClearAuthorizedNumber()
	return auuo
}

// SetOfSideNumber sets the "of_side_number" field.
func (auuo *AsUnitUpdateOne) SetOfSideNumber(i int64) *AsUnitUpdateOne {
	auuo.mutation.ResetOfSideNumber()
	auuo.mutation.SetOfSideNumber(i)
	return auuo
}

// SetNillableOfSideNumber sets the "of_side_number" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableOfSideNumber(i *int64) *AsUnitUpdateOne {
	if i != nil {
		auuo.SetOfSideNumber(*i)
	}
	return auuo
}

// AddOfSideNumber adds i to the "of_side_number" field.
func (auuo *AsUnitUpdateOne) AddOfSideNumber(i int64) *AsUnitUpdateOne {
	auuo.mutation.AddOfSideNumber(i)
	return auuo
}

// ClearOfSideNumber clears the value of the "of_side_number" field.
func (auuo *AsUnitUpdateOne) ClearOfSideNumber() *AsUnitUpdateOne {
	auuo.mutation.ClearOfSideNumber()
	return auuo
}

// SetInstitutionAuthority sets the "institution_authority" field.
func (auuo *AsUnitUpdateOne) SetInstitutionAuthority(s string) *AsUnitUpdateOne {
	auuo.mutation.SetInstitutionAuthority(s)
	return auuo
}

// SetNillableInstitutionAuthority sets the "institution_authority" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableInstitutionAuthority(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetInstitutionAuthority(*s)
	}
	return auuo
}

// ClearInstitutionAuthority clears the value of the "institution_authority" field.
func (auuo *AsUnitUpdateOne) ClearInstitutionAuthority() *AsUnitUpdateOne {
	auuo.mutation.ClearInstitutionAuthority()
	return auuo
}

// SetAdministrationAuthority sets the "administration_authority" field.
func (auuo *AsUnitUpdateOne) SetAdministrationAuthority(s string) *AsUnitUpdateOne {
	auuo.mutation.SetAdministrationAuthority(s)
	return auuo
}

// SetNillableAdministrationAuthority sets the "administration_authority" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableAdministrationAuthority(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetAdministrationAuthority(*s)
	}
	return auuo
}

// ClearAdministrationAuthority clears the value of the "administration_authority" field.
func (auuo *AsUnitUpdateOne) ClearAdministrationAuthority() *AsUnitUpdateOne {
	auuo.mutation.ClearAdministrationAuthority()
	return auuo
}

// SetEnableTime sets the "enable_time" field.
func (auuo *AsUnitUpdateOne) SetEnableTime(dt date.DateTime) *AsUnitUpdateOne {
	auuo.mutation.SetEnableTime(dt)
	return auuo
}

// SetNillableEnableTime sets the "enable_time" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableEnableTime(dt *date.DateTime) *AsUnitUpdateOne {
	if dt != nil {
		auuo.SetEnableTime(*dt)
	}
	return auuo
}

// ClearEnableTime clears the value of the "enable_time" field.
func (auuo *AsUnitUpdateOne) ClearEnableTime() *AsUnitUpdateOne {
	auuo.mutation.ClearEnableTime()
	return auuo
}

// SetDisableTime sets the "disable_time" field.
func (auuo *AsUnitUpdateOne) SetDisableTime(dt date.DateTime) *AsUnitUpdateOne {
	auuo.mutation.SetDisableTime(dt)
	return auuo
}

// SetNillableDisableTime sets the "disable_time" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableDisableTime(dt *date.DateTime) *AsUnitUpdateOne {
	if dt != nil {
		auuo.SetDisableTime(*dt)
	}
	return auuo
}

// ClearDisableTime clears the value of the "disable_time" field.
func (auuo *AsUnitUpdateOne) ClearDisableTime() *AsUnitUpdateOne {
	auuo.mutation.ClearDisableTime()
	return auuo
}

// SetSealTime sets the "seal_time" field.
func (auuo *AsUnitUpdateOne) SetSealTime(dt date.DateTime) *AsUnitUpdateOne {
	auuo.mutation.SetSealTime(dt)
	return auuo
}

// SetNillableSealTime sets the "seal_time" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableSealTime(dt *date.DateTime) *AsUnitUpdateOne {
	if dt != nil {
		auuo.SetSealTime(*dt)
	}
	return auuo
}

// ClearSealTime clears the value of the "seal_time" field.
func (auuo *AsUnitUpdateOne) ClearSealTime() *AsUnitUpdateOne {
	auuo.mutation.ClearSealTime()
	return auuo
}

// SetUnitRemark sets the "unit_remark" field.
func (auuo *AsUnitUpdateOne) SetUnitRemark(s string) *AsUnitUpdateOne {
	auuo.mutation.SetUnitRemark(s)
	return auuo
}

// SetNillableUnitRemark sets the "unit_remark" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableUnitRemark(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetUnitRemark(*s)
	}
	return auuo
}

// ClearUnitRemark clears the value of the "unit_remark" field.
func (auuo *AsUnitUpdateOne) ClearUnitRemark() *AsUnitUpdateOne {
	auuo.mutation.ClearUnitRemark()
	return auuo
}

// SetAssetDownloadStatus sets the "asset_download_status" field.
func (auuo *AsUnitUpdateOne) SetAssetDownloadStatus(s string) *AsUnitUpdateOne {
	auuo.mutation.SetAssetDownloadStatus(s)
	return auuo
}

// SetNillableAssetDownloadStatus sets the "asset_download_status" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableAssetDownloadStatus(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetAssetDownloadStatus(*s)
	}
	return auuo
}

// ClearAssetDownloadStatus clears the value of the "asset_download_status" field.
func (auuo *AsUnitUpdateOne) ClearAssetDownloadStatus() *AsUnitUpdateOne {
	auuo.mutation.ClearAssetDownloadStatus()
	return auuo
}

// SetLatitudeAndLongitude sets the "latitude_and_longitude" field.
func (auuo *AsUnitUpdateOne) SetLatitudeAndLongitude(s string) *AsUnitUpdateOne {
	auuo.mutation.SetLatitudeAndLongitude(s)
	return auuo
}

// SetNillableLatitudeAndLongitude sets the "latitude_and_longitude" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableLatitudeAndLongitude(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetLatitudeAndLongitude(*s)
	}
	return auuo
}

// ClearLatitudeAndLongitude clears the value of the "latitude_and_longitude" field.
func (auuo *AsUnitUpdateOne) ClearLatitudeAndLongitude() *AsUnitUpdateOne {
	auuo.mutation.ClearLatitudeAndLongitude()
	return auuo
}

// SetSort sets the "sort" field.
func (auuo *AsUnitUpdateOne) SetSort(i int64) *AsUnitUpdateOne {
	auuo.mutation.ResetSort()
	auuo.mutation.SetSort(i)
	return auuo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableSort(i *int64) *AsUnitUpdateOne {
	if i != nil {
		auuo.SetSort(*i)
	}
	return auuo
}

// AddSort adds i to the "sort" field.
func (auuo *AsUnitUpdateOne) AddSort(i int64) *AsUnitUpdateOne {
	auuo.mutation.AddSort(i)
	return auuo
}

// ClearSort clears the value of the "sort" field.
func (auuo *AsUnitUpdateOne) ClearSort() *AsUnitUpdateOne {
	auuo.mutation.ClearSort()
	return auuo
}

// SetOrganCode sets the "organ_code" field.
func (auuo *AsUnitUpdateOne) SetOrganCode(s string) *AsUnitUpdateOne {
	auuo.mutation.SetOrganCode(s)
	return auuo
}

// SetNillableOrganCode sets the "organ_code" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableOrganCode(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetOrganCode(*s)
	}
	return auuo
}

// ClearOrganCode clears the value of the "organ_code" field.
func (auuo *AsUnitUpdateOne) ClearOrganCode() *AsUnitUpdateOne {
	auuo.mutation.ClearOrganCode()
	return auuo
}

// SetHadInnerNumber sets the "had_inner_number" field.
func (auuo *AsUnitUpdateOne) SetHadInnerNumber(i int64) *AsUnitUpdateOne {
	auuo.mutation.ResetHadInnerNumber()
	auuo.mutation.SetHadInnerNumber(i)
	return auuo
}

// SetNillableHadInnerNumber sets the "had_inner_number" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableHadInnerNumber(i *int64) *AsUnitUpdateOne {
	if i != nil {
		auuo.SetHadInnerNumber(*i)
	}
	return auuo
}

// AddHadInnerNumber adds i to the "had_inner_number" field.
func (auuo *AsUnitUpdateOne) AddHadInnerNumber(i int64) *AsUnitUpdateOne {
	auuo.mutation.AddHadInnerNumber(i)
	return auuo
}

// ClearHadInnerNumber clears the value of the "had_inner_number" field.
func (auuo *AsUnitUpdateOne) ClearHadInnerNumber() *AsUnitUpdateOne {
	auuo.mutation.ClearHadInnerNumber()
	return auuo
}

// SetApproveInnerNumber sets the "approve_inner_number" field.
func (auuo *AsUnitUpdateOne) SetApproveInnerNumber(i int64) *AsUnitUpdateOne {
	auuo.mutation.ResetApproveInnerNumber()
	auuo.mutation.SetApproveInnerNumber(i)
	return auuo
}

// SetNillableApproveInnerNumber sets the "approve_inner_number" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableApproveInnerNumber(i *int64) *AsUnitUpdateOne {
	if i != nil {
		auuo.SetApproveInnerNumber(*i)
	}
	return auuo
}

// AddApproveInnerNumber adds i to the "approve_inner_number" field.
func (auuo *AsUnitUpdateOne) AddApproveInnerNumber(i int64) *AsUnitUpdateOne {
	auuo.mutation.AddApproveInnerNumber(i)
	return auuo
}

// ClearApproveInnerNumber clears the value of the "approve_inner_number" field.
func (auuo *AsUnitUpdateOne) ClearApproveInnerNumber() *AsUnitUpdateOne {
	auuo.mutation.ClearApproveInnerNumber()
	return auuo
}

// SetImg sets the "img" field.
func (auuo *AsUnitUpdateOne) SetImg(s string) *AsUnitUpdateOne {
	auuo.mutation.SetImg(s)
	return auuo
}

// SetNillableImg sets the "img" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableImg(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetImg(*s)
	}
	return auuo
}

// ClearImg clears the value of the "img" field.
func (auuo *AsUnitUpdateOne) ClearImg() *AsUnitUpdateOne {
	auuo.mutation.ClearImg()
	return auuo
}

// SetLinkMan sets the "link_man" field.
func (auuo *AsUnitUpdateOne) SetLinkMan(s string) *AsUnitUpdateOne {
	auuo.mutation.SetLinkMan(s)
	return auuo
}

// SetNillableLinkMan sets the "link_man" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableLinkMan(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetLinkMan(*s)
	}
	return auuo
}

// ClearLinkMan clears the value of the "link_man" field.
func (auuo *AsUnitUpdateOne) ClearLinkMan() *AsUnitUpdateOne {
	auuo.mutation.ClearLinkMan()
	return auuo
}

// SetLinkPhone sets the "link_phone" field.
func (auuo *AsUnitUpdateOne) SetLinkPhone(s string) *AsUnitUpdateOne {
	auuo.mutation.SetLinkPhone(s)
	return auuo
}

// SetNillableLinkPhone sets the "link_phone" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableLinkPhone(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetLinkPhone(*s)
	}
	return auuo
}

// ClearLinkPhone clears the value of the "link_phone" field.
func (auuo *AsUnitUpdateOne) ClearLinkPhone() *AsUnitUpdateOne {
	auuo.mutation.ClearLinkPhone()
	return auuo
}

// SetTenantID sets the "tenant_id" field.
func (auuo *AsUnitUpdateOne) SetTenantID(i int64) *AsUnitUpdateOne {
	auuo.mutation.SetTenantID(i)
	return auuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableTenantID(i *int64) *AsUnitUpdateOne {
	if i != nil {
		auuo.SetTenantID(*i)
	}
	return auuo
}

// ClearTenantID clears the value of the "tenant_id" field.
func (auuo *AsUnitUpdateOne) ClearTenantID() *AsUnitUpdateOne {
	auuo.mutation.ClearTenantID()
	return auuo
}

// SetUnitCode sets the "unit_code" field.
func (auuo *AsUnitUpdateOne) SetUnitCode(s string) *AsUnitUpdateOne {
	auuo.mutation.SetUnitCode(s)
	return auuo
}

// SetNillableUnitCode sets the "unit_code" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableUnitCode(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetUnitCode(*s)
	}
	return auuo
}

// ClearUnitCode clears the value of the "unit_code" field.
func (auuo *AsUnitUpdateOne) ClearUnitCode() *AsUnitUpdateOne {
	auuo.mutation.ClearUnitCode()
	return auuo
}

// SetAuthorityTotal sets the "authority_total" field.
func (auuo *AsUnitUpdateOne) SetAuthorityTotal(i int64) *AsUnitUpdateOne {
	auuo.mutation.ResetAuthorityTotal()
	auuo.mutation.SetAuthorityTotal(i)
	return auuo
}

// SetNillableAuthorityTotal sets the "authority_total" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableAuthorityTotal(i *int64) *AsUnitUpdateOne {
	if i != nil {
		auuo.SetAuthorityTotal(*i)
	}
	return auuo
}

// AddAuthorityTotal adds i to the "authority_total" field.
func (auuo *AsUnitUpdateOne) AddAuthorityTotal(i int64) *AsUnitUpdateOne {
	auuo.mutation.AddAuthorityTotal(i)
	return auuo
}

// ClearAuthorityTotal clears the value of the "authority_total" field.
func (auuo *AsUnitUpdateOne) ClearAuthorityTotal() *AsUnitUpdateOne {
	auuo.mutation.ClearAuthorityTotal()
	return auuo
}

// SetStaffOnActiveDuty sets the "staff_on_active_duty" field.
func (auuo *AsUnitUpdateOne) SetStaffOnActiveDuty(i int64) *AsUnitUpdateOne {
	auuo.mutation.ResetStaffOnActiveDuty()
	auuo.mutation.SetStaffOnActiveDuty(i)
	return auuo
}

// SetNillableStaffOnActiveDuty sets the "staff_on_active_duty" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableStaffOnActiveDuty(i *int64) *AsUnitUpdateOne {
	if i != nil {
		auuo.SetStaffOnActiveDuty(*i)
	}
	return auuo
}

// AddStaffOnActiveDuty adds i to the "staff_on_active_duty" field.
func (auuo *AsUnitUpdateOne) AddStaffOnActiveDuty(i int64) *AsUnitUpdateOne {
	auuo.mutation.AddStaffOnActiveDuty(i)
	return auuo
}

// ClearStaffOnActiveDuty clears the value of the "staff_on_active_duty" field.
func (auuo *AsUnitUpdateOne) ClearStaffOnActiveDuty() *AsUnitUpdateOne {
	auuo.mutation.ClearStaffOnActiveDuty()
	return auuo
}

// SetRetiredStaff sets the "retired_staff" field.
func (auuo *AsUnitUpdateOne) SetRetiredStaff(i int64) *AsUnitUpdateOne {
	auuo.mutation.ResetRetiredStaff()
	auuo.mutation.SetRetiredStaff(i)
	return auuo
}

// SetNillableRetiredStaff sets the "retired_staff" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableRetiredStaff(i *int64) *AsUnitUpdateOne {
	if i != nil {
		auuo.SetRetiredStaff(*i)
	}
	return auuo
}

// AddRetiredStaff adds i to the "retired_staff" field.
func (auuo *AsUnitUpdateOne) AddRetiredStaff(i int64) *AsUnitUpdateOne {
	auuo.mutation.AddRetiredStaff(i)
	return auuo
}

// ClearRetiredStaff clears the value of the "retired_staff" field.
func (auuo *AsUnitUpdateOne) ClearRetiredStaff() *AsUnitUpdateOne {
	auuo.mutation.ClearRetiredStaff()
	return auuo
}

// SetOtherStaff sets the "other_staff" field.
func (auuo *AsUnitUpdateOne) SetOtherStaff(i int64) *AsUnitUpdateOne {
	auuo.mutation.ResetOtherStaff()
	auuo.mutation.SetOtherStaff(i)
	return auuo
}

// SetNillableOtherStaff sets the "other_staff" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableOtherStaff(i *int64) *AsUnitUpdateOne {
	if i != nil {
		auuo.SetOtherStaff(*i)
	}
	return auuo
}

// AddOtherStaff adds i to the "other_staff" field.
func (auuo *AsUnitUpdateOne) AddOtherStaff(i int64) *AsUnitUpdateOne {
	auuo.mutation.AddOtherStaff(i)
	return auuo
}

// ClearOtherStaff clears the value of the "other_staff" field.
func (auuo *AsUnitUpdateOne) ClearOtherStaff() *AsUnitUpdateOne {
	auuo.mutation.ClearOtherStaff()
	return auuo
}

// SetIsVirtual sets the "is_virtual" field.
func (auuo *AsUnitUpdateOne) SetIsVirtual(s string) *AsUnitUpdateOne {
	auuo.mutation.SetIsVirtual(s)
	return auuo
}

// SetNillableIsVirtual sets the "is_virtual" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableIsVirtual(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetIsVirtual(*s)
	}
	return auuo
}

// SetUnitReform sets the "unit_reform" field.
func (auuo *AsUnitUpdateOne) SetUnitReform(i int64) *AsUnitUpdateOne {
	auuo.mutation.ResetUnitReform()
	auuo.mutation.SetUnitReform(i)
	return auuo
}

// SetNillableUnitReform sets the "unit_reform" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableUnitReform(i *int64) *AsUnitUpdateOne {
	if i != nil {
		auuo.SetUnitReform(*i)
	}
	return auuo
}

// AddUnitReform adds i to the "unit_reform" field.
func (auuo *AsUnitUpdateOne) AddUnitReform(i int64) *AsUnitUpdateOne {
	auuo.mutation.AddUnitReform(i)
	return auuo
}

// ClearUnitReform clears the value of the "unit_reform" field.
func (auuo *AsUnitUpdateOne) ClearUnitReform() *AsUnitUpdateOne {
	auuo.mutation.ClearUnitReform()
	return auuo
}

// SetPersonExpenditure sets the "person_expenditure" field.
func (auuo *AsUnitUpdateOne) SetPersonExpenditure(i int64) *AsUnitUpdateOne {
	auuo.mutation.ResetPersonExpenditure()
	auuo.mutation.SetPersonExpenditure(i)
	return auuo
}

// SetNillablePersonExpenditure sets the "person_expenditure" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillablePersonExpenditure(i *int64) *AsUnitUpdateOne {
	if i != nil {
		auuo.SetPersonExpenditure(*i)
	}
	return auuo
}

// AddPersonExpenditure adds i to the "person_expenditure" field.
func (auuo *AsUnitUpdateOne) AddPersonExpenditure(i int64) *AsUnitUpdateOne {
	auuo.mutation.AddPersonExpenditure(i)
	return auuo
}

// ClearPersonExpenditure clears the value of the "person_expenditure" field.
func (auuo *AsUnitUpdateOne) ClearPersonExpenditure() *AsUnitUpdateOne {
	auuo.mutation.ClearPersonExpenditure()
	return auuo
}

// SetInstitutionType sets the "institution_type" field.
func (auuo *AsUnitUpdateOne) SetInstitutionType(s string) *AsUnitUpdateOne {
	auuo.mutation.SetInstitutionType(s)
	return auuo
}

// SetNillableInstitutionType sets the "institution_type" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableInstitutionType(s *string) *AsUnitUpdateOne {
	if s != nil {
		auuo.SetInstitutionType(*s)
	}
	return auuo
}

// ClearInstitutionType clears the value of the "institution_type" field.
func (auuo *AsUnitUpdateOne) ClearInstitutionType() *AsUnitUpdateOne {
	auuo.mutation.ClearInstitutionType()
	return auuo
}

// SetDepartmentIdentification sets the "department_identification" field.
func (auuo *AsUnitUpdateOne) SetDepartmentIdentification(i int64) *AsUnitUpdateOne {
	auuo.mutation.ResetDepartmentIdentification()
	auuo.mutation.SetDepartmentIdentification(i)
	return auuo
}

// SetNillableDepartmentIdentification sets the "department_identification" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableDepartmentIdentification(i *int64) *AsUnitUpdateOne {
	if i != nil {
		auuo.SetDepartmentIdentification(*i)
	}
	return auuo
}

// AddDepartmentIdentification adds i to the "department_identification" field.
func (auuo *AsUnitUpdateOne) AddDepartmentIdentification(i int64) *AsUnitUpdateOne {
	auuo.mutation.AddDepartmentIdentification(i)
	return auuo
}

// ClearDepartmentIdentification clears the value of the "department_identification" field.
func (auuo *AsUnitUpdateOne) ClearDepartmentIdentification() *AsUnitUpdateOne {
	auuo.mutation.ClearDepartmentIdentification()
	return auuo
}

// SetTotalHeadcount sets the "total_headcount" field.
func (auuo *AsUnitUpdateOne) SetTotalHeadcount(i int64) *AsUnitUpdateOne {
	auuo.mutation.ResetTotalHeadcount()
	auuo.mutation.SetTotalHeadcount(i)
	return auuo
}

// SetNillableTotalHeadcount sets the "total_headcount" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableTotalHeadcount(i *int64) *AsUnitUpdateOne {
	if i != nil {
		auuo.SetTotalHeadcount(*i)
	}
	return auuo
}

// AddTotalHeadcount adds i to the "total_headcount" field.
func (auuo *AsUnitUpdateOne) AddTotalHeadcount(i int64) *AsUnitUpdateOne {
	auuo.mutation.AddTotalHeadcount(i)
	return auuo
}

// ClearTotalHeadcount clears the value of the "total_headcount" field.
func (auuo *AsUnitUpdateOne) ClearTotalHeadcount() *AsUnitUpdateOne {
	auuo.mutation.ClearTotalHeadcount()
	return auuo
}

// SetIsDeleted sets the "is_deleted" field.
func (auuo *AsUnitUpdateOne) SetIsDeleted(i int64) *AsUnitUpdateOne {
	auuo.mutation.ResetIsDeleted()
	auuo.mutation.SetIsDeleted(i)
	return auuo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableIsDeleted(i *int64) *AsUnitUpdateOne {
	if i != nil {
		auuo.SetIsDeleted(*i)
	}
	return auuo
}

// AddIsDeleted adds i to the "is_deleted" field.
func (auuo *AsUnitUpdateOne) AddIsDeleted(i int64) *AsUnitUpdateOne {
	auuo.mutation.AddIsDeleted(i)
	return auuo
}

// SetStatus sets the "status" field.
func (auuo *AsUnitUpdateOne) SetStatus(i int64) *AsUnitUpdateOne {
	auuo.mutation.ResetStatus()
	auuo.mutation.SetStatus(i)
	return auuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableStatus(i *int64) *AsUnitUpdateOne {
	if i != nil {
		auuo.SetStatus(*i)
	}
	return auuo
}

// AddStatus adds i to the "status" field.
func (auuo *AsUnitUpdateOne) AddStatus(i int64) *AsUnitUpdateOne {
	auuo.mutation.AddStatus(i)
	return auuo
}

// ClearStatus clears the value of the "status" field.
func (auuo *AsUnitUpdateOne) ClearStatus() *AsUnitUpdateOne {
	auuo.mutation.ClearStatus()
	return auuo
}

// SetCreateUser sets the "create_user" field.
func (auuo *AsUnitUpdateOne) SetCreateUser(i int64) *AsUnitUpdateOne {
	auuo.mutation.ResetCreateUser()
	auuo.mutation.SetCreateUser(i)
	return auuo
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableCreateUser(i *int64) *AsUnitUpdateOne {
	if i != nil {
		auuo.SetCreateUser(*i)
	}
	return auuo
}

// AddCreateUser adds i to the "create_user" field.
func (auuo *AsUnitUpdateOne) AddCreateUser(i int64) *AsUnitUpdateOne {
	auuo.mutation.AddCreateUser(i)
	return auuo
}

// ClearCreateUser clears the value of the "create_user" field.
func (auuo *AsUnitUpdateOne) ClearCreateUser() *AsUnitUpdateOne {
	auuo.mutation.ClearCreateUser()
	return auuo
}

// SetUpdateUser sets the "update_user" field.
func (auuo *AsUnitUpdateOne) SetUpdateUser(i int64) *AsUnitUpdateOne {
	auuo.mutation.ResetUpdateUser()
	auuo.mutation.SetUpdateUser(i)
	return auuo
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableUpdateUser(i *int64) *AsUnitUpdateOne {
	if i != nil {
		auuo.SetUpdateUser(*i)
	}
	return auuo
}

// AddUpdateUser adds i to the "update_user" field.
func (auuo *AsUnitUpdateOne) AddUpdateUser(i int64) *AsUnitUpdateOne {
	auuo.mutation.AddUpdateUser(i)
	return auuo
}

// ClearUpdateUser clears the value of the "update_user" field.
func (auuo *AsUnitUpdateOne) ClearUpdateUser() *AsUnitUpdateOne {
	auuo.mutation.ClearUpdateUser()
	return auuo
}

// SetUpdateTime sets the "update_time" field.
func (auuo *AsUnitUpdateOne) SetUpdateTime(dt date.DateTime) *AsUnitUpdateOne {
	auuo.mutation.SetUpdateTime(dt)
	return auuo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (auuo *AsUnitUpdateOne) ClearUpdateTime() *AsUnitUpdateOne {
	auuo.mutation.ClearUpdateTime()
	return auuo
}

// SetTenantxID sets the "tenantx" edge to the AsTenant entity by ID.
func (auuo *AsUnitUpdateOne) SetTenantxID(id int64) *AsUnitUpdateOne {
	auuo.mutation.SetTenantxID(id)
	return auuo
}

// SetNillableTenantxID sets the "tenantx" edge to the AsTenant entity by ID if the given value is not nil.
func (auuo *AsUnitUpdateOne) SetNillableTenantxID(id *int64) *AsUnitUpdateOne {
	if id != nil {
		auuo = auuo.SetTenantxID(*id)
	}
	return auuo
}

// SetTenantx sets the "tenantx" edge to the AsTenant entity.
func (auuo *AsUnitUpdateOne) SetTenantx(a *AsTenant) *AsUnitUpdateOne {
	return auuo.SetTenantxID(a.ID)
}

// Mutation returns the AsUnitMutation object of the builder.
func (auuo *AsUnitUpdateOne) Mutation() *AsUnitMutation {
	return auuo.mutation
}

// ClearTenantx clears the "tenantx" edge to the AsTenant entity.
func (auuo *AsUnitUpdateOne) ClearTenantx() *AsUnitUpdateOne {
	auuo.mutation.ClearTenantx()
	return auuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auuo *AsUnitUpdateOne) Select(field string, fields ...string) *AsUnitUpdateOne {
	auuo.fields = append([]string{field}, fields...)
	return auuo
}

// Save executes the query and returns the updated AsUnit entity.
func (auuo *AsUnitUpdateOne) Save(ctx context.Context) (*AsUnit, error) {
	var (
		err  error
		node *AsUnit
	)
	auuo.defaults()
	if len(auuo.hooks) == 0 {
		node, err = auuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsUnitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auuo.mutation = mutation
			node, err = auuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auuo.hooks) - 1; i >= 0; i-- {
			if auuo.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = auuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auuo *AsUnitUpdateOne) SaveX(ctx context.Context) *AsUnit {
	node, err := auuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auuo *AsUnitUpdateOne) Exec(ctx context.Context) error {
	_, err := auuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auuo *AsUnitUpdateOne) ExecX(ctx context.Context) {
	if err := auuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auuo *AsUnitUpdateOne) defaults() {
	if _, ok := auuo.mutation.UpdateTime(); !ok && !auuo.mutation.UpdateTimeCleared() {
		v := asunit.UpdateDefaultUpdateTime()
		auuo.mutation.SetUpdateTime(v)
	}
}

func (auuo *AsUnitUpdateOne) sqlSave(ctx context.Context) (_node *AsUnit, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asunit.Table,
			Columns: asunit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asunit.FieldID,
			},
		},
	}
	id, ok := auuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`schema: missing "AsUnit.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asunit.FieldID)
		for _, f := range fields {
			if !asunit.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("schema: invalid field %q for query", f)}
			}
			if f != asunit.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auuo.mutation.UnitName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldUnitName,
		})
	}
	if value, ok := auuo.mutation.UnitNameEn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldUnitNameEn,
		})
	}
	if auuo.mutation.UnitNameEnCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldUnitNameEn,
		})
	}
	if value, ok := auuo.mutation.OrganizationForm(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldOrganizationForm,
		})
	}
	if value, ok := auuo.mutation.AddedOrganizationForm(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldOrganizationForm,
		})
	}
	if auuo.mutation.OrganizationFormCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldOrganizationForm,
		})
	}
	if value, ok := auuo.mutation.UnitType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldUnitType,
		})
	}
	if value, ok := auuo.mutation.AddedUnitType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldUnitType,
		})
	}
	if auuo.mutation.UnitTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldUnitType,
		})
	}
	if value, ok := auuo.mutation.ParentNodeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldParentNodeName,
		})
	}
	if auuo.mutation.ParentNodeNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldParentNodeName,
		})
	}
	if value, ok := auuo.mutation.ChargeSectionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldChargeSectionID,
		})
	}
	if value, ok := auuo.mutation.AddedChargeSectionID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldChargeSectionID,
		})
	}
	if auuo.mutation.ChargeSectionIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldChargeSectionID,
		})
	}
	if value, ok := auuo.mutation.ChargeSectionCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldChargeSectionCode,
		})
	}
	if auuo.mutation.ChargeSectionCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldChargeSectionCode,
		})
	}
	if value, ok := auuo.mutation.ChargeSectionName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldChargeSectionName,
		})
	}
	if auuo.mutation.ChargeSectionNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldChargeSectionName,
		})
	}
	if value, ok := auuo.mutation.LocalFinancialCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldLocalFinancialCode,
		})
	}
	if auuo.mutation.LocalFinancialCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldLocalFinancialCode,
		})
	}
	if value, ok := auuo.mutation.LocalFinancialName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldLocalFinancialName,
		})
	}
	if auuo.mutation.LocalFinancialNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldLocalFinancialName,
		})
	}
	if value, ok := auuo.mutation.LocalFinancialID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldLocalFinancialID,
		})
	}
	if auuo.mutation.LocalFinancialIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldLocalFinancialID,
		})
	}
	if value, ok := auuo.mutation.OfficeAdministrationCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldOfficeAdministrationCode,
		})
	}
	if auuo.mutation.OfficeAdministrationCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldOfficeAdministrationCode,
		})
	}
	if value, ok := auuo.mutation.OfficeAdministrationName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldOfficeAdministrationName,
		})
	}
	if auuo.mutation.OfficeAdministrationNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldOfficeAdministrationName,
		})
	}
	if value, ok := auuo.mutation.AdministrationDivisionCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldAdministrationDivisionCode,
		})
	}
	if auuo.mutation.AdministrationDivisionCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldAdministrationDivisionCode,
		})
	}
	if value, ok := auuo.mutation.AdministrationDivisionName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldAdministrationDivisionName,
		})
	}
	if auuo.mutation.AdministrationDivisionNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldAdministrationDivisionName,
		})
	}
	if value, ok := auuo.mutation.BudgetCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldBudgetCode,
		})
	}
	if value, ok := auuo.mutation.AddedBudgetCode(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldBudgetCode,
		})
	}
	if auuo.mutation.BudgetCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldBudgetCode,
		})
	}
	if value, ok := auuo.mutation.CollegeCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldCollegeCode,
		})
	}
	if auuo.mutation.CollegeCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldCollegeCode,
		})
	}
	if value, ok := auuo.mutation.OrganizationCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldOrganizationCode,
		})
	}
	if auuo.mutation.OrganizationCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldOrganizationCode,
		})
	}
	if value, ok := auuo.mutation.UnitTypeCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldUnitTypeCode,
		})
	}
	if value, ok := auuo.mutation.AddedUnitTypeCode(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldUnitTypeCode,
		})
	}
	if auuo.mutation.UnitTypeCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldUnitTypeCode,
		})
	}
	if value, ok := auuo.mutation.UnitTypeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldUnitTypeName,
		})
	}
	if value, ok := auuo.mutation.AddedUnitTypeName(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldUnitTypeName,
		})
	}
	if auuo.mutation.UnitTypeNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldUnitTypeName,
		})
	}
	if value, ok := auuo.mutation.UnitBasicProperty(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldUnitBasicProperty,
		})
	}
	if value, ok := auuo.mutation.AddedUnitBasicProperty(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldUnitBasicProperty,
		})
	}
	if auuo.mutation.UnitBasicPropertyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldUnitBasicProperty,
		})
	}
	if value, ok := auuo.mutation.SocialCreditCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldSocialCreditCode,
		})
	}
	if auuo.mutation.SocialCreditCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldSocialCreditCode,
		})
	}
	if value, ok := auuo.mutation.BudgetUnitName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldBudgetUnitName,
		})
	}
	if auuo.mutation.BudgetUnitNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldBudgetUnitName,
		})
	}
	if value, ok := auuo.mutation.BudgetUnitCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldBudgetUnitCode,
		})
	}
	if auuo.mutation.BudgetUnitCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldBudgetUnitCode,
		})
	}
	if value, ok := auuo.mutation.BudgetManagementLevel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldBudgetManagementLevel,
		})
	}
	if value, ok := auuo.mutation.AddedBudgetManagementLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldBudgetManagementLevel,
		})
	}
	if auuo.mutation.BudgetManagementLevelCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldBudgetManagementLevel,
		})
	}
	if value, ok := auuo.mutation.FirmName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldFirmName,
		})
	}
	if auuo.mutation.FirmNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldFirmName,
		})
	}
	if value, ok := auuo.mutation.FirmCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldFirmCode,
		})
	}
	if auuo.mutation.FirmCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldFirmCode,
		})
	}
	if value, ok := auuo.mutation.TelephoneNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldTelephoneNumber,
		})
	}
	if auuo.mutation.TelephoneNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldTelephoneNumber,
		})
	}
	if value, ok := auuo.mutation.PhoneNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldPhoneNumber,
		})
	}
	if auuo.mutation.PhoneNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldPhoneNumber,
		})
	}
	if value, ok := auuo.mutation.FaxNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldFaxNumber,
		})
	}
	if auuo.mutation.FaxNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldFaxNumber,
		})
	}
	if value, ok := auuo.mutation.EmailAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldEmailAddress,
		})
	}
	if auuo.mutation.EmailAddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldEmailAddress,
		})
	}
	if value, ok := auuo.mutation.Province(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldProvince,
		})
	}
	if auuo.mutation.ProvinceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldProvince,
		})
	}
	if value, ok := auuo.mutation.City(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldCity,
		})
	}
	if auuo.mutation.CityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldCity,
		})
	}
	if value, ok := auuo.mutation.County(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldCounty,
		})
	}
	if auuo.mutation.CountyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldCounty,
		})
	}
	if value, ok := auuo.mutation.StreetAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldStreetAddress,
		})
	}
	if auuo.mutation.StreetAddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldStreetAddress,
		})
	}
	if value, ok := auuo.mutation.PostalCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldPostalCode,
		})
	}
	if auuo.mutation.PostalCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldPostalCode,
		})
	}
	if value, ok := auuo.mutation.FundSupplyModeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldFundSupplyModeName,
		})
	}
	if value, ok := auuo.mutation.AddedFundSupplyModeName(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldFundSupplyModeName,
		})
	}
	if auuo.mutation.FundSupplyModeNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldFundSupplyModeName,
		})
	}
	if value, ok := auuo.mutation.FundSupplyModeCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldFundSupplyModeCode,
		})
	}
	if value, ok := auuo.mutation.AddedFundSupplyModeCode(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldFundSupplyModeCode,
		})
	}
	if auuo.mutation.FundSupplyModeCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldFundSupplyModeCode,
		})
	}
	if value, ok := auuo.mutation.AdministrationLevelName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldAdministrationLevelName,
		})
	}
	if value, ok := auuo.mutation.AddedAdministrationLevelName(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldAdministrationLevelName,
		})
	}
	if auuo.mutation.AdministrationLevelNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldAdministrationLevelName,
		})
	}
	if value, ok := auuo.mutation.AdministrationLevelType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldAdministrationLevelType,
		})
	}
	if value, ok := auuo.mutation.AddedAdministrationLevelType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldAdministrationLevelType,
		})
	}
	if auuo.mutation.AdministrationLevelTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldAdministrationLevelType,
		})
	}
	if value, ok := auuo.mutation.DepartmentCategoryName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldDepartmentCategoryName,
		})
	}
	if value, ok := auuo.mutation.AddedDepartmentCategoryName(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldDepartmentCategoryName,
		})
	}
	if auuo.mutation.DepartmentCategoryNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldDepartmentCategoryName,
		})
	}
	if value, ok := auuo.mutation.BusinessDepartmentClassificationCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldBusinessDepartmentClassificationCode,
		})
	}
	if value, ok := auuo.mutation.AddedBusinessDepartmentClassificationCode(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldBusinessDepartmentClassificationCode,
		})
	}
	if auuo.mutation.BusinessDepartmentClassificationCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldBusinessDepartmentClassificationCode,
		})
	}
	if value, ok := auuo.mutation.Principal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldPrincipal,
		})
	}
	if auuo.mutation.PrincipalCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldPrincipal,
		})
	}
	if value, ok := auuo.mutation.Contact(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldContact,
		})
	}
	if auuo.mutation.ContactCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldContact,
		})
	}
	if value, ok := auuo.mutation.CorporateRepresentative(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldCorporateRepresentative,
		})
	}
	if auuo.mutation.CorporateRepresentativeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldCorporateRepresentative,
		})
	}
	if value, ok := auuo.mutation.EconomicType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldEconomicType,
		})
	}
	if value, ok := auuo.mutation.AddedEconomicType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldEconomicType,
		})
	}
	if auuo.mutation.EconomicTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldEconomicType,
		})
	}
	if value, ok := auuo.mutation.FinancialAffiliation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldFinancialAffiliation,
		})
	}
	if auuo.mutation.FinancialAffiliationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldFinancialAffiliation,
		})
	}
	if value, ok := auuo.mutation.FinancialUnit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldFinancialUnit,
		})
	}
	if value, ok := auuo.mutation.AddedFinancialUnit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldFinancialUnit,
		})
	}
	if auuo.mutation.FinancialUnitCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldFinancialUnit,
		})
	}
	if value, ok := auuo.mutation.VerticalUnit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldVerticalUnit,
		})
	}
	if value, ok := auuo.mutation.AddedVerticalUnit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldVerticalUnit,
		})
	}
	if auuo.mutation.VerticalUnitCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldVerticalUnit,
		})
	}
	if value, ok := auuo.mutation.VirtualUnit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldVirtualUnit,
		})
	}
	if value, ok := auuo.mutation.AddedVirtualUnit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldVirtualUnit,
		})
	}
	if auuo.mutation.VirtualUnitCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldVirtualUnit,
		})
	}
	if value, ok := auuo.mutation.AccountingSystem(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldAccountingSystem,
		})
	}
	if value, ok := auuo.mutation.AddedAccountingSystem(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldAccountingSystem,
		})
	}
	if auuo.mutation.AccountingSystemCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldAccountingSystem,
		})
	}
	if value, ok := auuo.mutation.CorporateTag(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldCorporateTag,
		})
	}
	if auuo.mutation.CorporateTagCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldCorporateTag,
		})
	}
	if value, ok := auuo.mutation.MaintainerMark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldMaintainerMark,
		})
	}
	if auuo.mutation.MaintainerMarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldMaintainerMark,
		})
	}
	if value, ok := auuo.mutation.SupplierMark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldSupplierMark,
		})
	}
	if auuo.mutation.SupplierMarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldSupplierMark,
		})
	}
	if value, ok := auuo.mutation.ManufactureMark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldManufactureMark,
		})
	}
	if auuo.mutation.ManufactureMarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldManufactureMark,
		})
	}
	if value, ok := auuo.mutation.AssetDisposalAgencyTag(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldAssetDisposalAgencyTag,
		})
	}
	if auuo.mutation.AssetDisposalAgencyTagCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldAssetDisposalAgencyTag,
		})
	}
	if value, ok := auuo.mutation.StateAssetManagementCompany(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldStateAssetManagementCompany,
		})
	}
	if auuo.mutation.StateAssetManagementCompanyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldStateAssetManagementCompany,
		})
	}
	if value, ok := auuo.mutation.InstitutionNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldInstitutionNumber,
		})
	}
	if value, ok := auuo.mutation.AddedInstitutionNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldInstitutionNumber,
		})
	}
	if auuo.mutation.InstitutionNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldInstitutionNumber,
		})
	}
	if value, ok := auuo.mutation.AuthorizedNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldAuthorizedNumber,
		})
	}
	if value, ok := auuo.mutation.AddedAuthorizedNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldAuthorizedNumber,
		})
	}
	if auuo.mutation.AuthorizedNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldAuthorizedNumber,
		})
	}
	if value, ok := auuo.mutation.OfSideNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldOfSideNumber,
		})
	}
	if value, ok := auuo.mutation.AddedOfSideNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldOfSideNumber,
		})
	}
	if auuo.mutation.OfSideNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldOfSideNumber,
		})
	}
	if value, ok := auuo.mutation.InstitutionAuthority(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldInstitutionAuthority,
		})
	}
	if auuo.mutation.InstitutionAuthorityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldInstitutionAuthority,
		})
	}
	if value, ok := auuo.mutation.AdministrationAuthority(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldAdministrationAuthority,
		})
	}
	if auuo.mutation.AdministrationAuthorityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldAdministrationAuthority,
		})
	}
	if value, ok := auuo.mutation.EnableTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asunit.FieldEnableTime,
		})
	}
	if auuo.mutation.EnableTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asunit.FieldEnableTime,
		})
	}
	if value, ok := auuo.mutation.DisableTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asunit.FieldDisableTime,
		})
	}
	if auuo.mutation.DisableTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asunit.FieldDisableTime,
		})
	}
	if value, ok := auuo.mutation.SealTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asunit.FieldSealTime,
		})
	}
	if auuo.mutation.SealTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asunit.FieldSealTime,
		})
	}
	if value, ok := auuo.mutation.UnitRemark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldUnitRemark,
		})
	}
	if auuo.mutation.UnitRemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldUnitRemark,
		})
	}
	if value, ok := auuo.mutation.AssetDownloadStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldAssetDownloadStatus,
		})
	}
	if auuo.mutation.AssetDownloadStatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldAssetDownloadStatus,
		})
	}
	if value, ok := auuo.mutation.LatitudeAndLongitude(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldLatitudeAndLongitude,
		})
	}
	if auuo.mutation.LatitudeAndLongitudeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldLatitudeAndLongitude,
		})
	}
	if value, ok := auuo.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldSort,
		})
	}
	if value, ok := auuo.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldSort,
		})
	}
	if auuo.mutation.SortCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldSort,
		})
	}
	if value, ok := auuo.mutation.OrganCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldOrganCode,
		})
	}
	if auuo.mutation.OrganCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldOrganCode,
		})
	}
	if value, ok := auuo.mutation.HadInnerNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldHadInnerNumber,
		})
	}
	if value, ok := auuo.mutation.AddedHadInnerNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldHadInnerNumber,
		})
	}
	if auuo.mutation.HadInnerNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldHadInnerNumber,
		})
	}
	if value, ok := auuo.mutation.ApproveInnerNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldApproveInnerNumber,
		})
	}
	if value, ok := auuo.mutation.AddedApproveInnerNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldApproveInnerNumber,
		})
	}
	if auuo.mutation.ApproveInnerNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldApproveInnerNumber,
		})
	}
	if value, ok := auuo.mutation.Img(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldImg,
		})
	}
	if auuo.mutation.ImgCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldImg,
		})
	}
	if value, ok := auuo.mutation.LinkMan(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldLinkMan,
		})
	}
	if auuo.mutation.LinkManCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldLinkMan,
		})
	}
	if value, ok := auuo.mutation.LinkPhone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldLinkPhone,
		})
	}
	if auuo.mutation.LinkPhoneCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldLinkPhone,
		})
	}
	if value, ok := auuo.mutation.UnitCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldUnitCode,
		})
	}
	if auuo.mutation.UnitCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldUnitCode,
		})
	}
	if value, ok := auuo.mutation.AuthorityTotal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldAuthorityTotal,
		})
	}
	if value, ok := auuo.mutation.AddedAuthorityTotal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldAuthorityTotal,
		})
	}
	if auuo.mutation.AuthorityTotalCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldAuthorityTotal,
		})
	}
	if value, ok := auuo.mutation.StaffOnActiveDuty(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldStaffOnActiveDuty,
		})
	}
	if value, ok := auuo.mutation.AddedStaffOnActiveDuty(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldStaffOnActiveDuty,
		})
	}
	if auuo.mutation.StaffOnActiveDutyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldStaffOnActiveDuty,
		})
	}
	if value, ok := auuo.mutation.RetiredStaff(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldRetiredStaff,
		})
	}
	if value, ok := auuo.mutation.AddedRetiredStaff(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldRetiredStaff,
		})
	}
	if auuo.mutation.RetiredStaffCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldRetiredStaff,
		})
	}
	if value, ok := auuo.mutation.OtherStaff(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldOtherStaff,
		})
	}
	if value, ok := auuo.mutation.AddedOtherStaff(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldOtherStaff,
		})
	}
	if auuo.mutation.OtherStaffCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldOtherStaff,
		})
	}
	if value, ok := auuo.mutation.IsVirtual(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldIsVirtual,
		})
	}
	if value, ok := auuo.mutation.UnitReform(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldUnitReform,
		})
	}
	if value, ok := auuo.mutation.AddedUnitReform(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldUnitReform,
		})
	}
	if auuo.mutation.UnitReformCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldUnitReform,
		})
	}
	if value, ok := auuo.mutation.PersonExpenditure(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldPersonExpenditure,
		})
	}
	if value, ok := auuo.mutation.AddedPersonExpenditure(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldPersonExpenditure,
		})
	}
	if auuo.mutation.PersonExpenditureCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldPersonExpenditure,
		})
	}
	if value, ok := auuo.mutation.InstitutionType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldInstitutionType,
		})
	}
	if auuo.mutation.InstitutionTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asunit.FieldInstitutionType,
		})
	}
	if value, ok := auuo.mutation.DepartmentIdentification(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldDepartmentIdentification,
		})
	}
	if value, ok := auuo.mutation.AddedDepartmentIdentification(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldDepartmentIdentification,
		})
	}
	if auuo.mutation.DepartmentIdentificationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldDepartmentIdentification,
		})
	}
	if value, ok := auuo.mutation.TotalHeadcount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldTotalHeadcount,
		})
	}
	if value, ok := auuo.mutation.AddedTotalHeadcount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldTotalHeadcount,
		})
	}
	if auuo.mutation.TotalHeadcountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldTotalHeadcount,
		})
	}
	if value, ok := auuo.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldIsDeleted,
		})
	}
	if value, ok := auuo.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldIsDeleted,
		})
	}
	if value, ok := auuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldStatus,
		})
	}
	if value, ok := auuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldStatus,
		})
	}
	if auuo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldStatus,
		})
	}
	if value, ok := auuo.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldCreateUser,
		})
	}
	if value, ok := auuo.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldCreateUser,
		})
	}
	if auuo.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldCreateUser,
		})
	}
	if value, ok := auuo.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldUpdateUser,
		})
	}
	if value, ok := auuo.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldUpdateUser,
		})
	}
	if auuo.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asunit.FieldUpdateUser,
		})
	}
	if auuo.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asunit.FieldCreateTime,
		})
	}
	if value, ok := auuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asunit.FieldUpdateTime,
		})
	}
	if auuo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asunit.FieldUpdateTime,
		})
	}
	if auuo.mutation.TenantxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   asunit.TenantxTable,
			Columns: []string{asunit.TenantxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: astenant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.TenantxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   asunit.TenantxTable,
			Columns: []string{asunit.TenantxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: astenant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AsUnit{config: auuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asunit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
