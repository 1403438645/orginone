// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/asinneragency"
	"orginone/common/schema/asjob"
	"orginone/common/schema/asmarketroledistribution"
	"orginone/common/schema/asperson"
	"orginone/common/schema/asrole"
	"orginone/common/schema/asuser"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsJobCreate is the builder for creating a AsJob entity.
type AsJobCreate struct {
	config
	mutation *AsJobMutation
	hooks    []Hook
}

// SetJobName sets the "job_name" field.
func (ajc *AsJobCreate) SetJobName(s string) *AsJobCreate {
	ajc.mutation.SetJobName(s)
	return ajc
}

// SetTenantCode sets the "tenant_code" field.
func (ajc *AsJobCreate) SetTenantCode(s string) *AsJobCreate {
	ajc.mutation.SetTenantCode(s)
	return ajc
}

// SetType sets the "type" field.
func (ajc *AsJobCreate) SetType(i int64) *AsJobCreate {
	ajc.mutation.SetType(i)
	return ajc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ajc *AsJobCreate) SetNillableType(i *int64) *AsJobCreate {
	if i != nil {
		ajc.SetType(*i)
	}
	return ajc
}

// SetSort sets the "sort" field.
func (ajc *AsJobCreate) SetSort(i int64) *AsJobCreate {
	ajc.mutation.SetSort(i)
	return ajc
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (ajc *AsJobCreate) SetNillableSort(i *int64) *AsJobCreate {
	if i != nil {
		ajc.SetSort(*i)
	}
	return ajc
}

// SetIsDeleted sets the "is_deleted" field.
func (ajc *AsJobCreate) SetIsDeleted(i int64) *AsJobCreate {
	ajc.mutation.SetIsDeleted(i)
	return ajc
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (ajc *AsJobCreate) SetNillableIsDeleted(i *int64) *AsJobCreate {
	if i != nil {
		ajc.SetIsDeleted(*i)
	}
	return ajc
}

// SetStatus sets the "status" field.
func (ajc *AsJobCreate) SetStatus(i int64) *AsJobCreate {
	ajc.mutation.SetStatus(i)
	return ajc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ajc *AsJobCreate) SetNillableStatus(i *int64) *AsJobCreate {
	if i != nil {
		ajc.SetStatus(*i)
	}
	return ajc
}

// SetCreateUser sets the "create_user" field.
func (ajc *AsJobCreate) SetCreateUser(i int64) *AsJobCreate {
	ajc.mutation.SetCreateUser(i)
	return ajc
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (ajc *AsJobCreate) SetNillableCreateUser(i *int64) *AsJobCreate {
	if i != nil {
		ajc.SetCreateUser(*i)
	}
	return ajc
}

// SetUpdateUser sets the "update_user" field.
func (ajc *AsJobCreate) SetUpdateUser(i int64) *AsJobCreate {
	ajc.mutation.SetUpdateUser(i)
	return ajc
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (ajc *AsJobCreate) SetNillableUpdateUser(i *int64) *AsJobCreate {
	if i != nil {
		ajc.SetUpdateUser(*i)
	}
	return ajc
}

// SetCreateTime sets the "create_time" field.
func (ajc *AsJobCreate) SetCreateTime(dt date.DateTime) *AsJobCreate {
	ajc.mutation.SetCreateTime(dt)
	return ajc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ajc *AsJobCreate) SetNillableCreateTime(dt *date.DateTime) *AsJobCreate {
	if dt != nil {
		ajc.SetCreateTime(*dt)
	}
	return ajc
}

// SetUpdateTime sets the "update_time" field.
func (ajc *AsJobCreate) SetUpdateTime(dt date.DateTime) *AsJobCreate {
	ajc.mutation.SetUpdateTime(dt)
	return ajc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ajc *AsJobCreate) SetNillableUpdateTime(dt *date.DateTime) *AsJobCreate {
	if dt != nil {
		ajc.SetUpdateTime(*dt)
	}
	return ajc
}

// SetID sets the "id" field.
func (ajc *AsJobCreate) SetID(i int64) *AsJobCreate {
	ajc.mutation.SetID(i)
	return ajc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ajc *AsJobCreate) SetNillableID(i *int64) *AsJobCreate {
	if i != nil {
		ajc.SetID(*i)
	}
	return ajc
}

// AddPersonIDs adds the "persons" edge to the AsPerson entity by IDs.
func (ajc *AsJobCreate) AddPersonIDs(ids ...int64) *AsJobCreate {
	ajc.mutation.AddPersonIDs(ids...)
	return ajc
}

// AddPersons adds the "persons" edges to the AsPerson entity.
func (ajc *AsJobCreate) AddPersons(a ...*AsPerson) *AsJobCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ajc.AddPersonIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the AsRole entity by IDs.
func (ajc *AsJobCreate) AddRoleIDs(ids ...int64) *AsJobCreate {
	ajc.mutation.AddRoleIDs(ids...)
	return ajc
}

// AddRoles adds the "roles" edges to the AsRole entity.
func (ajc *AsJobCreate) AddRoles(a ...*AsRole) *AsJobCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ajc.AddRoleIDs(ids...)
}

// AddUserIDs adds the "users" edge to the AsUser entity by IDs.
func (ajc *AsJobCreate) AddUserIDs(ids ...int64) *AsJobCreate {
	ajc.mutation.AddUserIDs(ids...)
	return ajc
}

// AddUsers adds the "users" edges to the AsUser entity.
func (ajc *AsJobCreate) AddUsers(a ...*AsUser) *AsJobCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ajc.AddUserIDs(ids...)
}

// AddAgencyIDs adds the "agencys" edge to the AsInnerAgency entity by IDs.
func (ajc *AsJobCreate) AddAgencyIDs(ids ...int64) *AsJobCreate {
	ajc.mutation.AddAgencyIDs(ids...)
	return ajc
}

// AddAgencys adds the "agencys" edges to the AsInnerAgency entity.
func (ajc *AsJobCreate) AddAgencys(a ...*AsInnerAgency) *AsJobCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ajc.AddAgencyIDs(ids...)
}

// AddRoleDistribIDs adds the "roleDistribs" edge to the AsMarketRoleDistribution entity by IDs.
func (ajc *AsJobCreate) AddRoleDistribIDs(ids ...int64) *AsJobCreate {
	ajc.mutation.AddRoleDistribIDs(ids...)
	return ajc
}

// AddRoleDistribs adds the "roleDistribs" edges to the AsMarketRoleDistribution entity.
func (ajc *AsJobCreate) AddRoleDistribs(a ...*AsMarketRoleDistribution) *AsJobCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ajc.AddRoleDistribIDs(ids...)
}

// Mutation returns the AsJobMutation object of the builder.
func (ajc *AsJobCreate) Mutation() *AsJobMutation {
	return ajc.mutation
}

// Save creates the AsJob in the database.
func (ajc *AsJobCreate) Save(ctx context.Context) (*AsJob, error) {
	var (
		err  error
		node *AsJob
	)
	ajc.defaults()
	if len(ajc.hooks) == 0 {
		if err = ajc.check(); err != nil {
			return nil, err
		}
		node, err = ajc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsJobMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ajc.check(); err != nil {
				return nil, err
			}
			ajc.mutation = mutation
			if node, err = ajc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ajc.hooks) - 1; i >= 0; i-- {
			if ajc.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = ajc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ajc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ajc *AsJobCreate) SaveX(ctx context.Context) *AsJob {
	v, err := ajc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ajc *AsJobCreate) Exec(ctx context.Context) error {
	_, err := ajc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ajc *AsJobCreate) ExecX(ctx context.Context) {
	if err := ajc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ajc *AsJobCreate) defaults() {
	if _, ok := ajc.mutation.GetType(); !ok {
		v := asjob.DefaultType
		ajc.mutation.SetType(v)
	}
	if _, ok := ajc.mutation.IsDeleted(); !ok {
		v := asjob.DefaultIsDeleted
		ajc.mutation.SetIsDeleted(v)
	}
	if _, ok := ajc.mutation.Status(); !ok {
		v := asjob.DefaultStatus
		ajc.mutation.SetStatus(v)
	}
	if _, ok := ajc.mutation.CreateTime(); !ok {
		v := asjob.DefaultCreateTime()
		ajc.mutation.SetCreateTime(v)
	}
	if _, ok := ajc.mutation.UpdateTime(); !ok {
		v := asjob.DefaultUpdateTime()
		ajc.mutation.SetUpdateTime(v)
	}
	if _, ok := ajc.mutation.ID(); !ok {
		v := asjob.DefaultID()
		ajc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ajc *AsJobCreate) check() error {
	if _, ok := ajc.mutation.JobName(); !ok {
		return &ValidationError{Name: "job_name", err: errors.New(`schema: missing required field "AsJob.job_name"`)}
	}
	if _, ok := ajc.mutation.TenantCode(); !ok {
		return &ValidationError{Name: "tenant_code", err: errors.New(`schema: missing required field "AsJob.tenant_code"`)}
	}
	if _, ok := ajc.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "is_deleted", err: errors.New(`schema: missing required field "AsJob.is_deleted"`)}
	}
	return nil
}

func (ajc *AsJobCreate) sqlSave(ctx context.Context) (*AsJob, error) {
	_node, _spec := ajc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ajc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (ajc *AsJobCreate) createSpec() (*AsJob, *sqlgraph.CreateSpec) {
	var (
		_node = &AsJob{config: ajc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: asjob.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asjob.FieldID,
			},
		}
	)
	if id, ok := ajc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ajc.mutation.JobName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asjob.FieldJobName,
		})
		_node.JobName = value
	}
	if value, ok := ajc.mutation.TenantCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asjob.FieldTenantCode,
		})
		_node.TenantCode = value
	}
	if value, ok := ajc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asjob.FieldType,
		})
		_node.Type = value
	}
	if value, ok := ajc.mutation.Sort(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asjob.FieldSort,
		})
		_node.Sort = value
	}
	if value, ok := ajc.mutation.IsDeleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asjob.FieldIsDeleted,
		})
		_node.IsDeleted = value
	}
	if value, ok := ajc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asjob.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := ajc.mutation.CreateUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asjob.FieldCreateUser,
		})
		_node.CreateUser = value
	}
	if value, ok := ajc.mutation.UpdateUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asjob.FieldUpdateUser,
		})
		_node.UpdateUser = value
	}
	if value, ok := ajc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asjob.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := ajc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asjob.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if nodes := ajc.mutation.PersonsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asjob.PersonsTable,
			Columns: asjob.PersonsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asperson.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ajc.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asjob.RolesTable,
			Columns: asjob.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ajc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asjob.UsersTable,
			Columns: asjob.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ajc.mutation.AgencysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asjob.AgencysTable,
			Columns: asjob.AgencysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asinneragency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ajc.mutation.RoleDistribsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asjob.RoleDistribsTable,
			Columns: []string{asjob.RoleDistribsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketroledistribution.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AsJobCreateBulk is the builder for creating many AsJob entities in bulk.
type AsJobCreateBulk struct {
	config
	builders []*AsJobCreate
}

// Save creates the AsJob entities in the database.
func (ajcb *AsJobCreateBulk) Save(ctx context.Context) ([]*AsJob, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ajcb.builders))
	nodes := make([]*AsJob, len(ajcb.builders))
	mutators := make([]Mutator, len(ajcb.builders))
	for i := range ajcb.builders {
		func(i int, root context.Context) {
			builder := ajcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AsJobMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ajcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ajcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ajcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ajcb *AsJobCreateBulk) SaveX(ctx context.Context) []*AsJob {
	v, err := ajcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ajcb *AsJobCreateBulk) Exec(ctx context.Context) error {
	_, err := ajcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ajcb *AsJobCreateBulk) ExecX(ctx context.Context) {
	if err := ajcb.Exec(ctx); err != nil {
		panic(err)
	}
}
