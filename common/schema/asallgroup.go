// Code generated by entc, DO NOT EDIT.

package schema

import (
	"fmt"
	"orginone/common/schema/asallgroup"
	"orginone/common/tools/date"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// AsAllGroup is the model entity for the AsAllGroup schema.
type AsAllGroup struct {
	config `json:"-"`
	// ID of the ent.
	// 主键
	ID int64 `json:"id,string"`
	// TenantCode holds the value of the "tenant_code" field.
	// 租户编码(管理租户,默认为创建租户)
	TenantCode string `json:"tenantCode"`
	// GroupName holds the value of the "group_name" field.
	// 集团名称
	GroupName string `json:"groupName"`
	// GroupDescription holds the value of the "group_description" field.
	// 集团描述
	GroupDescription string `json:"groupDescription"`
	// GroupCode holds the value of the "group_code" field.
	// 集团编码
	GroupCode string `json:"groupCode"`
	// Depth holds the value of the "depth" field.
	// 深度
	Depth int64 `json:"depth"`
	// Type holds the value of the "type" field.
	// 类型1-集团,2-虚节点)
	Type int64 `json:"type"`
	// SocialCreditCode holds the value of the "social_credit_code" field.
	// 统一社会信用代码
	SocialCreditCode string `json:"socialCreditCode"`
	// IsDeleted holds the value of the "is_deleted" field.
	// 是否被删除
	IsDeleted int64 `json:"isDeleted"`
	// Status holds the value of the "status" field.
	// 状态
	Status int64 `json:"status"`
	// CreateUser holds the value of the "create_user" field.
	// 创建用户
	CreateUser int64 `json:"createUser"`
	// UpdateUser holds the value of the "update_user" field.
	// 更新用户
	UpdateUser int64 `json:"updateUser"`
	// CreateTime holds the value of the "create_time" field.
	// 创建时间
	CreateTime date.DateTime `json:"createTime"`
	// UpdateTime holds the value of the "update_time" field.
	// 更新时间
	UpdateTime date.DateTime `json:"updateTime"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AsAllGroupQuery when eager-loading is set.
	Edges AsAllGroupEdges `json:"edges"`
}

// AsAllGroupEdges holds the relations/edges for other nodes in the graph.
type AsAllGroupEdges struct {
	// AllLayer holds the value of the allLayer edge.
	AllLayer []*AsLayer `json:"alllayer"`
	// AppPurchases holds the value of the appPurchases edge.
	AppPurchases []*AsMarketAppPurchase `json:"apppurchases"`
	// AllTenants holds the value of the allTenants edge.
	AllTenants []*AsGroupTenantRelations `json:"alltenants"`
	// AppGroupDistribs holds the value of the appGroupDistribs edge.
	AppGroupDistribs []*AsMarketAppGroupDistribution `json:"appgroupdistribs"`
	// AppGroupDistribConfigs holds the value of the appGroupDistribConfigs edge.
	AppGroupDistribConfigs []*AsAppGroupDistributionData `json:"appgroupdistribconfigs"`
	// AppGroupDistribsRelation holds the value of the appGroupDistribsRelation edge.
	AppGroupDistribsRelation []*AsMarketAppGroupDistributionRelation `json:"appgroupdistribsrelation"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// AllLayerOrErr returns the AllLayer value or an error if the edge
// was not loaded in eager-loading.
func (e AsAllGroupEdges) AllLayerOrErr() ([]*AsLayer, error) {
	if e.loadedTypes[0] {
		return e.AllLayer, nil
	}
	return nil, &NotLoadedError{edge: "allLayer"}
}

// AppPurchasesOrErr returns the AppPurchases value or an error if the edge
// was not loaded in eager-loading.
func (e AsAllGroupEdges) AppPurchasesOrErr() ([]*AsMarketAppPurchase, error) {
	if e.loadedTypes[1] {
		return e.AppPurchases, nil
	}
	return nil, &NotLoadedError{edge: "appPurchases"}
}

// AllTenantsOrErr returns the AllTenants value or an error if the edge
// was not loaded in eager-loading.
func (e AsAllGroupEdges) AllTenantsOrErr() ([]*AsGroupTenantRelations, error) {
	if e.loadedTypes[2] {
		return e.AllTenants, nil
	}
	return nil, &NotLoadedError{edge: "allTenants"}
}

// AppGroupDistribsOrErr returns the AppGroupDistribs value or an error if the edge
// was not loaded in eager-loading.
func (e AsAllGroupEdges) AppGroupDistribsOrErr() ([]*AsMarketAppGroupDistribution, error) {
	if e.loadedTypes[3] {
		return e.AppGroupDistribs, nil
	}
	return nil, &NotLoadedError{edge: "appGroupDistribs"}
}

// AppGroupDistribConfigsOrErr returns the AppGroupDistribConfigs value or an error if the edge
// was not loaded in eager-loading.
func (e AsAllGroupEdges) AppGroupDistribConfigsOrErr() ([]*AsAppGroupDistributionData, error) {
	if e.loadedTypes[4] {
		return e.AppGroupDistribConfigs, nil
	}
	return nil, &NotLoadedError{edge: "appGroupDistribConfigs"}
}

// AppGroupDistribsRelationOrErr returns the AppGroupDistribsRelation value or an error if the edge
// was not loaded in eager-loading.
func (e AsAllGroupEdges) AppGroupDistribsRelationOrErr() ([]*AsMarketAppGroupDistributionRelation, error) {
	if e.loadedTypes[5] {
		return e.AppGroupDistribsRelation, nil
	}
	return nil, &NotLoadedError{edge: "appGroupDistribsRelation"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AsAllGroup) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case asallgroup.FieldID, asallgroup.FieldDepth, asallgroup.FieldType, asallgroup.FieldIsDeleted, asallgroup.FieldStatus, asallgroup.FieldCreateUser, asallgroup.FieldUpdateUser:
			values[i] = new(sql.NullInt64)
		case asallgroup.FieldTenantCode, asallgroup.FieldGroupName, asallgroup.FieldGroupDescription, asallgroup.FieldGroupCode, asallgroup.FieldSocialCreditCode:
			values[i] = new(sql.NullString)
		case asallgroup.FieldCreateTime, asallgroup.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AsAllGroup", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AsAllGroup fields.
func (aag *AsAllGroup) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case asallgroup.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			aag.ID = int64(value.Int64)
		case asallgroup.FieldTenantCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_code", values[i])
			} else if value.Valid {
				aag.TenantCode = value.String
			}
		case asallgroup.FieldGroupName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field group_name", values[i])
			} else if value.Valid {
				aag.GroupName = value.String
			}
		case asallgroup.FieldGroupDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field group_description", values[i])
			} else if value.Valid {
				aag.GroupDescription = value.String
			}
		case asallgroup.FieldGroupCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field group_code", values[i])
			} else if value.Valid {
				aag.GroupCode = value.String
			}
		case asallgroup.FieldDepth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field depth", values[i])
			} else if value.Valid {
				aag.Depth = value.Int64
			}
		case asallgroup.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				aag.Type = value.Int64
			}
		case asallgroup.FieldSocialCreditCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field social_credit_code", values[i])
			} else if value.Valid {
				aag.SocialCreditCode = value.String
			}
		case asallgroup.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				aag.IsDeleted = value.Int64
			}
		case asallgroup.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				aag.Status = value.Int64
			}
		case asallgroup.FieldCreateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_user", values[i])
			} else if value.Valid {
				aag.CreateUser = value.Int64
			}
		case asallgroup.FieldUpdateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_user", values[i])
			} else if value.Valid {
				aag.UpdateUser = value.Int64
			}
		case asallgroup.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				aag.CreateTime = date.DateTime(value.Time)
			}
		case asallgroup.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				aag.UpdateTime = date.DateTime(value.Time)
			}
		}
	}
	return nil
}

// QueryAllLayer queries the "allLayer" edge of the AsAllGroup entity.
func (aag *AsAllGroup) QueryAllLayer() *AsLayerQuery {
	return (&AsAllGroupClient{config: aag.config}).QueryAllLayer(aag)
}

// QueryAppPurchases queries the "appPurchases" edge of the AsAllGroup entity.
func (aag *AsAllGroup) QueryAppPurchases() *AsMarketAppPurchaseQuery {
	return (&AsAllGroupClient{config: aag.config}).QueryAppPurchases(aag)
}

// QueryAllTenants queries the "allTenants" edge of the AsAllGroup entity.
func (aag *AsAllGroup) QueryAllTenants() *AsGroupTenantRelationsQuery {
	return (&AsAllGroupClient{config: aag.config}).QueryAllTenants(aag)
}

// QueryAppGroupDistribs queries the "appGroupDistribs" edge of the AsAllGroup entity.
func (aag *AsAllGroup) QueryAppGroupDistribs() *AsMarketAppGroupDistributionQuery {
	return (&AsAllGroupClient{config: aag.config}).QueryAppGroupDistribs(aag)
}

// QueryAppGroupDistribConfigs queries the "appGroupDistribConfigs" edge of the AsAllGroup entity.
func (aag *AsAllGroup) QueryAppGroupDistribConfigs() *AsAppGroupDistributionDataQuery {
	return (&AsAllGroupClient{config: aag.config}).QueryAppGroupDistribConfigs(aag)
}

// QueryAppGroupDistribsRelation queries the "appGroupDistribsRelation" edge of the AsAllGroup entity.
func (aag *AsAllGroup) QueryAppGroupDistribsRelation() *AsMarketAppGroupDistributionRelationQuery {
	return (&AsAllGroupClient{config: aag.config}).QueryAppGroupDistribsRelation(aag)
}

// Update returns a builder for updating this AsAllGroup.
// Note that you need to call AsAllGroup.Unwrap() before calling this method if this AsAllGroup
// was returned from a transaction, and the transaction was committed or rolled back.
func (aag *AsAllGroup) Update() *AsAllGroupUpdateOne {
	return (&AsAllGroupClient{config: aag.config}).UpdateOne(aag)
}

// Unwrap unwraps the AsAllGroup entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (aag *AsAllGroup) Unwrap() *AsAllGroup {
	tx, ok := aag.config.driver.(*txDriver)
	if !ok {
		panic("schema: AsAllGroup is not a transactional entity")
	}
	aag.config.driver = tx.drv
	return aag
}

// String implements the fmt.Stringer.
func (aag *AsAllGroup) String() string {
	var builder strings.Builder
	builder.WriteString("AsAllGroup(")
	builder.WriteString(fmt.Sprintf("id=%v", aag.ID))
	builder.WriteString(", tenant_code=")
	builder.WriteString(aag.TenantCode)
	builder.WriteString(", group_name=")
	builder.WriteString(aag.GroupName)
	builder.WriteString(", group_description=")
	builder.WriteString(aag.GroupDescription)
	builder.WriteString(", group_code=")
	builder.WriteString(aag.GroupCode)
	builder.WriteString(", depth=")
	builder.WriteString(fmt.Sprintf("%v", aag.Depth))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", aag.Type))
	builder.WriteString(", social_credit_code=")
	builder.WriteString(aag.SocialCreditCode)
	builder.WriteString(", is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", aag.IsDeleted))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", aag.Status))
	builder.WriteString(", create_user=")
	builder.WriteString(fmt.Sprintf("%v", aag.CreateUser))
	builder.WriteString(", update_user=")
	builder.WriteString(fmt.Sprintf("%v", aag.UpdateUser))
	builder.WriteString(", create_time=")
	builder.WriteString(fmt.Sprintf("%v", aag.CreateTime))
	builder.WriteString(", update_time=")
	builder.WriteString(fmt.Sprintf("%v", aag.UpdateTime))
	builder.WriteByte(')')
	return builder.String()
}

// AsAllGroups is a parsable slice of AsAllGroup.
type AsAllGroups []*AsAllGroup

func (aag AsAllGroups) config(cfg config) {
	for _i := range aag {
		aag[_i].config = cfg
	}
}
