// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/asinneragency"
	"orginone/common/schema/asjob"
	"orginone/common/schema/asperson"
	"orginone/common/schema/asuser"
	"orginone/common/schema/predicate"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsPersonUpdate is the builder for updating AsPerson entities.
type AsPersonUpdate struct {
	config
	hooks    []Hook
	mutation *AsPersonMutation
}

// Where appends a list predicates to the AsPersonUpdate builder.
func (apu *AsPersonUpdate) Where(ps ...predicate.AsPerson) *AsPersonUpdate {
	apu.mutation.Where(ps...)
	return apu
}

// SetTenantCode sets the "tenant_code" field.
func (apu *AsPersonUpdate) SetTenantCode(s string) *AsPersonUpdate {
	apu.mutation.SetTenantCode(s)
	return apu
}

// SetNillableTenantCode sets the "tenant_code" field if the given value is not nil.
func (apu *AsPersonUpdate) SetNillableTenantCode(s *string) *AsPersonUpdate {
	if s != nil {
		apu.SetTenantCode(*s)
	}
	return apu
}

// ClearTenantCode clears the value of the "tenant_code" field.
func (apu *AsPersonUpdate) ClearTenantCode() *AsPersonUpdate {
	apu.mutation.ClearTenantCode()
	return apu
}

// SetRealName sets the "real_name" field.
func (apu *AsPersonUpdate) SetRealName(s string) *AsPersonUpdate {
	apu.mutation.SetRealName(s)
	return apu
}

// SetIDCard sets the "id_card" field.
func (apu *AsPersonUpdate) SetIDCard(s string) *AsPersonUpdate {
	apu.mutation.SetIDCard(s)
	return apu
}

// SetNillableIDCard sets the "id_card" field if the given value is not nil.
func (apu *AsPersonUpdate) SetNillableIDCard(s *string) *AsPersonUpdate {
	if s != nil {
		apu.SetIDCard(*s)
	}
	return apu
}

// ClearIDCard clears the value of the "id_card" field.
func (apu *AsPersonUpdate) ClearIDCard() *AsPersonUpdate {
	apu.mutation.ClearIDCard()
	return apu
}

// SetGender sets the "gender" field.
func (apu *AsPersonUpdate) SetGender(i int64) *AsPersonUpdate {
	apu.mutation.ResetGender()
	apu.mutation.SetGender(i)
	return apu
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (apu *AsPersonUpdate) SetNillableGender(i *int64) *AsPersonUpdate {
	if i != nil {
		apu.SetGender(*i)
	}
	return apu
}

// AddGender adds i to the "gender" field.
func (apu *AsPersonUpdate) AddGender(i int64) *AsPersonUpdate {
	apu.mutation.AddGender(i)
	return apu
}

// ClearGender clears the value of the "gender" field.
func (apu *AsPersonUpdate) ClearGender() *AsPersonUpdate {
	apu.mutation.ClearGender()
	return apu
}

// SetUserBirthday sets the "user_birthday" field.
func (apu *AsPersonUpdate) SetUserBirthday(dt date.DateTime) *AsPersonUpdate {
	apu.mutation.SetUserBirthday(dt)
	return apu
}

// SetNillableUserBirthday sets the "user_birthday" field if the given value is not nil.
func (apu *AsPersonUpdate) SetNillableUserBirthday(dt *date.DateTime) *AsPersonUpdate {
	if dt != nil {
		apu.SetUserBirthday(*dt)
	}
	return apu
}

// ClearUserBirthday clears the value of the "user_birthday" field.
func (apu *AsPersonUpdate) ClearUserBirthday() *AsPersonUpdate {
	apu.mutation.ClearUserBirthday()
	return apu
}

// SetUserEmail sets the "user_email" field.
func (apu *AsPersonUpdate) SetUserEmail(s string) *AsPersonUpdate {
	apu.mutation.SetUserEmail(s)
	return apu
}

// SetNillableUserEmail sets the "user_email" field if the given value is not nil.
func (apu *AsPersonUpdate) SetNillableUserEmail(s *string) *AsPersonUpdate {
	if s != nil {
		apu.SetUserEmail(*s)
	}
	return apu
}

// ClearUserEmail clears the value of the "user_email" field.
func (apu *AsPersonUpdate) ClearUserEmail() *AsPersonUpdate {
	apu.mutation.ClearUserEmail()
	return apu
}

// SetUserPhoto sets the "user_photo" field.
func (apu *AsPersonUpdate) SetUserPhoto(s string) *AsPersonUpdate {
	apu.mutation.SetUserPhoto(s)
	return apu
}

// SetNillableUserPhoto sets the "user_photo" field if the given value is not nil.
func (apu *AsPersonUpdate) SetNillableUserPhoto(s *string) *AsPersonUpdate {
	if s != nil {
		apu.SetUserPhoto(*s)
	}
	return apu
}

// ClearUserPhoto clears the value of the "user_photo" field.
func (apu *AsPersonUpdate) ClearUserPhoto() *AsPersonUpdate {
	apu.mutation.ClearUserPhoto()
	return apu
}

// SetUserID sets the "user_id" field.
func (apu *AsPersonUpdate) SetUserID(i int64) *AsPersonUpdate {
	apu.mutation.SetUserID(i)
	return apu
}

// SetPhoneNumber sets the "phone_number" field.
func (apu *AsPersonUpdate) SetPhoneNumber(s string) *AsPersonUpdate {
	apu.mutation.SetPhoneNumber(s)
	return apu
}

// SetProvince sets the "province" field.
func (apu *AsPersonUpdate) SetProvince(s string) *AsPersonUpdate {
	apu.mutation.SetProvince(s)
	return apu
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (apu *AsPersonUpdate) SetNillableProvince(s *string) *AsPersonUpdate {
	if s != nil {
		apu.SetProvince(*s)
	}
	return apu
}

// ClearProvince clears the value of the "province" field.
func (apu *AsPersonUpdate) ClearProvince() *AsPersonUpdate {
	apu.mutation.ClearProvince()
	return apu
}

// SetCity sets the "city" field.
func (apu *AsPersonUpdate) SetCity(s string) *AsPersonUpdate {
	apu.mutation.SetCity(s)
	return apu
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (apu *AsPersonUpdate) SetNillableCity(s *string) *AsPersonUpdate {
	if s != nil {
		apu.SetCity(*s)
	}
	return apu
}

// ClearCity clears the value of the "city" field.
func (apu *AsPersonUpdate) ClearCity() *AsPersonUpdate {
	apu.mutation.ClearCity()
	return apu
}

// SetStreetAddress sets the "street_address" field.
func (apu *AsPersonUpdate) SetStreetAddress(s string) *AsPersonUpdate {
	apu.mutation.SetStreetAddress(s)
	return apu
}

// SetNillableStreetAddress sets the "street_address" field if the given value is not nil.
func (apu *AsPersonUpdate) SetNillableStreetAddress(s *string) *AsPersonUpdate {
	if s != nil {
		apu.SetStreetAddress(*s)
	}
	return apu
}

// ClearStreetAddress clears the value of the "street_address" field.
func (apu *AsPersonUpdate) ClearStreetAddress() *AsPersonUpdate {
	apu.mutation.ClearStreetAddress()
	return apu
}

// SetUserCode sets the "user_code" field.
func (apu *AsPersonUpdate) SetUserCode(s string) *AsPersonUpdate {
	apu.mutation.SetUserCode(s)
	return apu
}

// SetNillableUserCode sets the "user_code" field if the given value is not nil.
func (apu *AsPersonUpdate) SetNillableUserCode(s *string) *AsPersonUpdate {
	if s != nil {
		apu.SetUserCode(*s)
	}
	return apu
}

// ClearUserCode clears the value of the "user_code" field.
func (apu *AsPersonUpdate) ClearUserCode() *AsPersonUpdate {
	apu.mutation.ClearUserCode()
	return apu
}

// SetIsMaster sets the "is_master" field.
func (apu *AsPersonUpdate) SetIsMaster(i int64) *AsPersonUpdate {
	apu.mutation.ResetIsMaster()
	apu.mutation.SetIsMaster(i)
	return apu
}

// SetNillableIsMaster sets the "is_master" field if the given value is not nil.
func (apu *AsPersonUpdate) SetNillableIsMaster(i *int64) *AsPersonUpdate {
	if i != nil {
		apu.SetIsMaster(*i)
	}
	return apu
}

// AddIsMaster adds i to the "is_master" field.
func (apu *AsPersonUpdate) AddIsMaster(i int64) *AsPersonUpdate {
	apu.mutation.AddIsMaster(i)
	return apu
}

// ClearIsMaster clears the value of the "is_master" field.
func (apu *AsPersonUpdate) ClearIsMaster() *AsPersonUpdate {
	apu.mutation.ClearIsMaster()
	return apu
}

// SetIsDeleted sets the "is_deleted" field.
func (apu *AsPersonUpdate) SetIsDeleted(i int64) *AsPersonUpdate {
	apu.mutation.ResetIsDeleted()
	apu.mutation.SetIsDeleted(i)
	return apu
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (apu *AsPersonUpdate) SetNillableIsDeleted(i *int64) *AsPersonUpdate {
	if i != nil {
		apu.SetIsDeleted(*i)
	}
	return apu
}

// AddIsDeleted adds i to the "is_deleted" field.
func (apu *AsPersonUpdate) AddIsDeleted(i int64) *AsPersonUpdate {
	apu.mutation.AddIsDeleted(i)
	return apu
}

// SetStatus sets the "status" field.
func (apu *AsPersonUpdate) SetStatus(i int64) *AsPersonUpdate {
	apu.mutation.ResetStatus()
	apu.mutation.SetStatus(i)
	return apu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (apu *AsPersonUpdate) SetNillableStatus(i *int64) *AsPersonUpdate {
	if i != nil {
		apu.SetStatus(*i)
	}
	return apu
}

// AddStatus adds i to the "status" field.
func (apu *AsPersonUpdate) AddStatus(i int64) *AsPersonUpdate {
	apu.mutation.AddStatus(i)
	return apu
}

// ClearStatus clears the value of the "status" field.
func (apu *AsPersonUpdate) ClearStatus() *AsPersonUpdate {
	apu.mutation.ClearStatus()
	return apu
}

// SetCreateUser sets the "create_user" field.
func (apu *AsPersonUpdate) SetCreateUser(i int64) *AsPersonUpdate {
	apu.mutation.ResetCreateUser()
	apu.mutation.SetCreateUser(i)
	return apu
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (apu *AsPersonUpdate) SetNillableCreateUser(i *int64) *AsPersonUpdate {
	if i != nil {
		apu.SetCreateUser(*i)
	}
	return apu
}

// AddCreateUser adds i to the "create_user" field.
func (apu *AsPersonUpdate) AddCreateUser(i int64) *AsPersonUpdate {
	apu.mutation.AddCreateUser(i)
	return apu
}

// ClearCreateUser clears the value of the "create_user" field.
func (apu *AsPersonUpdate) ClearCreateUser() *AsPersonUpdate {
	apu.mutation.ClearCreateUser()
	return apu
}

// SetUpdateUser sets the "update_user" field.
func (apu *AsPersonUpdate) SetUpdateUser(i int64) *AsPersonUpdate {
	apu.mutation.ResetUpdateUser()
	apu.mutation.SetUpdateUser(i)
	return apu
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (apu *AsPersonUpdate) SetNillableUpdateUser(i *int64) *AsPersonUpdate {
	if i != nil {
		apu.SetUpdateUser(*i)
	}
	return apu
}

// AddUpdateUser adds i to the "update_user" field.
func (apu *AsPersonUpdate) AddUpdateUser(i int64) *AsPersonUpdate {
	apu.mutation.AddUpdateUser(i)
	return apu
}

// ClearUpdateUser clears the value of the "update_user" field.
func (apu *AsPersonUpdate) ClearUpdateUser() *AsPersonUpdate {
	apu.mutation.ClearUpdateUser()
	return apu
}

// SetUpdateTime sets the "update_time" field.
func (apu *AsPersonUpdate) SetUpdateTime(dt date.DateTime) *AsPersonUpdate {
	apu.mutation.SetUpdateTime(dt)
	return apu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (apu *AsPersonUpdate) ClearUpdateTime() *AsPersonUpdate {
	apu.mutation.ClearUpdateTime()
	return apu
}

// SetUserxID sets the "userx" edge to the AsUser entity by ID.
func (apu *AsPersonUpdate) SetUserxID(id int64) *AsPersonUpdate {
	apu.mutation.SetUserxID(id)
	return apu
}

// SetUserx sets the "userx" edge to the AsUser entity.
func (apu *AsPersonUpdate) SetUserx(a *AsUser) *AsPersonUpdate {
	return apu.SetUserxID(a.ID)
}

// AddAgencyIDs adds the "agencys" edge to the AsInnerAgency entity by IDs.
func (apu *AsPersonUpdate) AddAgencyIDs(ids ...int64) *AsPersonUpdate {
	apu.mutation.AddAgencyIDs(ids...)
	return apu
}

// AddAgencys adds the "agencys" edges to the AsInnerAgency entity.
func (apu *AsPersonUpdate) AddAgencys(a ...*AsInnerAgency) *AsPersonUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apu.AddAgencyIDs(ids...)
}

// AddJobIDs adds the "jobs" edge to the AsJob entity by IDs.
func (apu *AsPersonUpdate) AddJobIDs(ids ...int64) *AsPersonUpdate {
	apu.mutation.AddJobIDs(ids...)
	return apu
}

// AddJobs adds the "jobs" edges to the AsJob entity.
func (apu *AsPersonUpdate) AddJobs(a ...*AsJob) *AsPersonUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apu.AddJobIDs(ids...)
}

// Mutation returns the AsPersonMutation object of the builder.
func (apu *AsPersonUpdate) Mutation() *AsPersonMutation {
	return apu.mutation
}

// ClearUserx clears the "userx" edge to the AsUser entity.
func (apu *AsPersonUpdate) ClearUserx() *AsPersonUpdate {
	apu.mutation.ClearUserx()
	return apu
}

// ClearAgencys clears all "agencys" edges to the AsInnerAgency entity.
func (apu *AsPersonUpdate) ClearAgencys() *AsPersonUpdate {
	apu.mutation.ClearAgencys()
	return apu
}

// RemoveAgencyIDs removes the "agencys" edge to AsInnerAgency entities by IDs.
func (apu *AsPersonUpdate) RemoveAgencyIDs(ids ...int64) *AsPersonUpdate {
	apu.mutation.RemoveAgencyIDs(ids...)
	return apu
}

// RemoveAgencys removes "agencys" edges to AsInnerAgency entities.
func (apu *AsPersonUpdate) RemoveAgencys(a ...*AsInnerAgency) *AsPersonUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apu.RemoveAgencyIDs(ids...)
}

// ClearJobs clears all "jobs" edges to the AsJob entity.
func (apu *AsPersonUpdate) ClearJobs() *AsPersonUpdate {
	apu.mutation.ClearJobs()
	return apu
}

// RemoveJobIDs removes the "jobs" edge to AsJob entities by IDs.
func (apu *AsPersonUpdate) RemoveJobIDs(ids ...int64) *AsPersonUpdate {
	apu.mutation.RemoveJobIDs(ids...)
	return apu
}

// RemoveJobs removes "jobs" edges to AsJob entities.
func (apu *AsPersonUpdate) RemoveJobs(a ...*AsJob) *AsPersonUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apu.RemoveJobIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (apu *AsPersonUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	apu.defaults()
	if len(apu.hooks) == 0 {
		if err = apu.check(); err != nil {
			return 0, err
		}
		affected, err = apu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsPersonMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = apu.check(); err != nil {
				return 0, err
			}
			apu.mutation = mutation
			affected, err = apu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(apu.hooks) - 1; i >= 0; i-- {
			if apu.hooks[i] == nil {
				return 0, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = apu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, apu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (apu *AsPersonUpdate) SaveX(ctx context.Context) int {
	affected, err := apu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (apu *AsPersonUpdate) Exec(ctx context.Context) error {
	_, err := apu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apu *AsPersonUpdate) ExecX(ctx context.Context) {
	if err := apu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (apu *AsPersonUpdate) defaults() {
	if _, ok := apu.mutation.UpdateTime(); !ok && !apu.mutation.UpdateTimeCleared() {
		v := asperson.UpdateDefaultUpdateTime()
		apu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (apu *AsPersonUpdate) check() error {
	if _, ok := apu.mutation.UserxID(); apu.mutation.UserxCleared() && !ok {
		return errors.New(`schema: clearing a required unique edge "AsPerson.userx"`)
	}
	return nil
}

func (apu *AsPersonUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asperson.Table,
			Columns: asperson.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asperson.FieldID,
			},
		},
	}
	if ps := apu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := apu.mutation.TenantCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asperson.FieldTenantCode,
		})
	}
	if apu.mutation.TenantCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asperson.FieldTenantCode,
		})
	}
	if value, ok := apu.mutation.RealName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asperson.FieldRealName,
		})
	}
	if value, ok := apu.mutation.IDCard(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asperson.FieldIDCard,
		})
	}
	if apu.mutation.IDCardCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asperson.FieldIDCard,
		})
	}
	if value, ok := apu.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asperson.FieldGender,
		})
	}
	if value, ok := apu.mutation.AddedGender(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asperson.FieldGender,
		})
	}
	if apu.mutation.GenderCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asperson.FieldGender,
		})
	}
	if value, ok := apu.mutation.UserBirthday(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asperson.FieldUserBirthday,
		})
	}
	if apu.mutation.UserBirthdayCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asperson.FieldUserBirthday,
		})
	}
	if value, ok := apu.mutation.UserEmail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asperson.FieldUserEmail,
		})
	}
	if apu.mutation.UserEmailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asperson.FieldUserEmail,
		})
	}
	if value, ok := apu.mutation.UserPhoto(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asperson.FieldUserPhoto,
		})
	}
	if apu.mutation.UserPhotoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asperson.FieldUserPhoto,
		})
	}
	if value, ok := apu.mutation.PhoneNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asperson.FieldPhoneNumber,
		})
	}
	if value, ok := apu.mutation.Province(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asperson.FieldProvince,
		})
	}
	if apu.mutation.ProvinceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asperson.FieldProvince,
		})
	}
	if value, ok := apu.mutation.City(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asperson.FieldCity,
		})
	}
	if apu.mutation.CityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asperson.FieldCity,
		})
	}
	if value, ok := apu.mutation.StreetAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asperson.FieldStreetAddress,
		})
	}
	if apu.mutation.StreetAddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asperson.FieldStreetAddress,
		})
	}
	if value, ok := apu.mutation.UserCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asperson.FieldUserCode,
		})
	}
	if apu.mutation.UserCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asperson.FieldUserCode,
		})
	}
	if value, ok := apu.mutation.IsMaster(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asperson.FieldIsMaster,
		})
	}
	if value, ok := apu.mutation.AddedIsMaster(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asperson.FieldIsMaster,
		})
	}
	if apu.mutation.IsMasterCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asperson.FieldIsMaster,
		})
	}
	if value, ok := apu.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asperson.FieldIsDeleted,
		})
	}
	if value, ok := apu.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asperson.FieldIsDeleted,
		})
	}
	if value, ok := apu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asperson.FieldStatus,
		})
	}
	if value, ok := apu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asperson.FieldStatus,
		})
	}
	if apu.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asperson.FieldStatus,
		})
	}
	if value, ok := apu.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asperson.FieldCreateUser,
		})
	}
	if value, ok := apu.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asperson.FieldCreateUser,
		})
	}
	if apu.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asperson.FieldCreateUser,
		})
	}
	if value, ok := apu.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asperson.FieldUpdateUser,
		})
	}
	if value, ok := apu.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asperson.FieldUpdateUser,
		})
	}
	if apu.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asperson.FieldUpdateUser,
		})
	}
	if apu.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asperson.FieldCreateTime,
		})
	}
	if value, ok := apu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asperson.FieldUpdateTime,
		})
	}
	if apu.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asperson.FieldUpdateTime,
		})
	}
	if apu.mutation.UserxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   asperson.UserxTable,
			Columns: []string{asperson.UserxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.UserxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   asperson.UserxTable,
			Columns: []string{asperson.UserxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apu.mutation.AgencysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asperson.AgencysTable,
			Columns: asperson.AgencysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asinneragency.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.RemovedAgencysIDs(); len(nodes) > 0 && !apu.mutation.AgencysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asperson.AgencysTable,
			Columns: asperson.AgencysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asinneragency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.AgencysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asperson.AgencysTable,
			Columns: asperson.AgencysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asinneragency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apu.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asperson.JobsTable,
			Columns: asperson.JobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asjob.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.RemovedJobsIDs(); len(nodes) > 0 && !apu.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asperson.JobsTable,
			Columns: asperson.JobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asjob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.JobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asperson.JobsTable,
			Columns: asperson.JobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asjob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, apu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asperson.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AsPersonUpdateOne is the builder for updating a single AsPerson entity.
type AsPersonUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AsPersonMutation
}

// SetTenantCode sets the "tenant_code" field.
func (apuo *AsPersonUpdateOne) SetTenantCode(s string) *AsPersonUpdateOne {
	apuo.mutation.SetTenantCode(s)
	return apuo
}

// SetNillableTenantCode sets the "tenant_code" field if the given value is not nil.
func (apuo *AsPersonUpdateOne) SetNillableTenantCode(s *string) *AsPersonUpdateOne {
	if s != nil {
		apuo.SetTenantCode(*s)
	}
	return apuo
}

// ClearTenantCode clears the value of the "tenant_code" field.
func (apuo *AsPersonUpdateOne) ClearTenantCode() *AsPersonUpdateOne {
	apuo.mutation.ClearTenantCode()
	return apuo
}

// SetRealName sets the "real_name" field.
func (apuo *AsPersonUpdateOne) SetRealName(s string) *AsPersonUpdateOne {
	apuo.mutation.SetRealName(s)
	return apuo
}

// SetIDCard sets the "id_card" field.
func (apuo *AsPersonUpdateOne) SetIDCard(s string) *AsPersonUpdateOne {
	apuo.mutation.SetIDCard(s)
	return apuo
}

// SetNillableIDCard sets the "id_card" field if the given value is not nil.
func (apuo *AsPersonUpdateOne) SetNillableIDCard(s *string) *AsPersonUpdateOne {
	if s != nil {
		apuo.SetIDCard(*s)
	}
	return apuo
}

// ClearIDCard clears the value of the "id_card" field.
func (apuo *AsPersonUpdateOne) ClearIDCard() *AsPersonUpdateOne {
	apuo.mutation.ClearIDCard()
	return apuo
}

// SetGender sets the "gender" field.
func (apuo *AsPersonUpdateOne) SetGender(i int64) *AsPersonUpdateOne {
	apuo.mutation.ResetGender()
	apuo.mutation.SetGender(i)
	return apuo
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (apuo *AsPersonUpdateOne) SetNillableGender(i *int64) *AsPersonUpdateOne {
	if i != nil {
		apuo.SetGender(*i)
	}
	return apuo
}

// AddGender adds i to the "gender" field.
func (apuo *AsPersonUpdateOne) AddGender(i int64) *AsPersonUpdateOne {
	apuo.mutation.AddGender(i)
	return apuo
}

// ClearGender clears the value of the "gender" field.
func (apuo *AsPersonUpdateOne) ClearGender() *AsPersonUpdateOne {
	apuo.mutation.ClearGender()
	return apuo
}

// SetUserBirthday sets the "user_birthday" field.
func (apuo *AsPersonUpdateOne) SetUserBirthday(dt date.DateTime) *AsPersonUpdateOne {
	apuo.mutation.SetUserBirthday(dt)
	return apuo
}

// SetNillableUserBirthday sets the "user_birthday" field if the given value is not nil.
func (apuo *AsPersonUpdateOne) SetNillableUserBirthday(dt *date.DateTime) *AsPersonUpdateOne {
	if dt != nil {
		apuo.SetUserBirthday(*dt)
	}
	return apuo
}

// ClearUserBirthday clears the value of the "user_birthday" field.
func (apuo *AsPersonUpdateOne) ClearUserBirthday() *AsPersonUpdateOne {
	apuo.mutation.ClearUserBirthday()
	return apuo
}

// SetUserEmail sets the "user_email" field.
func (apuo *AsPersonUpdateOne) SetUserEmail(s string) *AsPersonUpdateOne {
	apuo.mutation.SetUserEmail(s)
	return apuo
}

// SetNillableUserEmail sets the "user_email" field if the given value is not nil.
func (apuo *AsPersonUpdateOne) SetNillableUserEmail(s *string) *AsPersonUpdateOne {
	if s != nil {
		apuo.SetUserEmail(*s)
	}
	return apuo
}

// ClearUserEmail clears the value of the "user_email" field.
func (apuo *AsPersonUpdateOne) ClearUserEmail() *AsPersonUpdateOne {
	apuo.mutation.ClearUserEmail()
	return apuo
}

// SetUserPhoto sets the "user_photo" field.
func (apuo *AsPersonUpdateOne) SetUserPhoto(s string) *AsPersonUpdateOne {
	apuo.mutation.SetUserPhoto(s)
	return apuo
}

// SetNillableUserPhoto sets the "user_photo" field if the given value is not nil.
func (apuo *AsPersonUpdateOne) SetNillableUserPhoto(s *string) *AsPersonUpdateOne {
	if s != nil {
		apuo.SetUserPhoto(*s)
	}
	return apuo
}

// ClearUserPhoto clears the value of the "user_photo" field.
func (apuo *AsPersonUpdateOne) ClearUserPhoto() *AsPersonUpdateOne {
	apuo.mutation.ClearUserPhoto()
	return apuo
}

// SetUserID sets the "user_id" field.
func (apuo *AsPersonUpdateOne) SetUserID(i int64) *AsPersonUpdateOne {
	apuo.mutation.SetUserID(i)
	return apuo
}

// SetPhoneNumber sets the "phone_number" field.
func (apuo *AsPersonUpdateOne) SetPhoneNumber(s string) *AsPersonUpdateOne {
	apuo.mutation.SetPhoneNumber(s)
	return apuo
}

// SetProvince sets the "province" field.
func (apuo *AsPersonUpdateOne) SetProvince(s string) *AsPersonUpdateOne {
	apuo.mutation.SetProvince(s)
	return apuo
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (apuo *AsPersonUpdateOne) SetNillableProvince(s *string) *AsPersonUpdateOne {
	if s != nil {
		apuo.SetProvince(*s)
	}
	return apuo
}

// ClearProvince clears the value of the "province" field.
func (apuo *AsPersonUpdateOne) ClearProvince() *AsPersonUpdateOne {
	apuo.mutation.ClearProvince()
	return apuo
}

// SetCity sets the "city" field.
func (apuo *AsPersonUpdateOne) SetCity(s string) *AsPersonUpdateOne {
	apuo.mutation.SetCity(s)
	return apuo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (apuo *AsPersonUpdateOne) SetNillableCity(s *string) *AsPersonUpdateOne {
	if s != nil {
		apuo.SetCity(*s)
	}
	return apuo
}

// ClearCity clears the value of the "city" field.
func (apuo *AsPersonUpdateOne) ClearCity() *AsPersonUpdateOne {
	apuo.mutation.ClearCity()
	return apuo
}

// SetStreetAddress sets the "street_address" field.
func (apuo *AsPersonUpdateOne) SetStreetAddress(s string) *AsPersonUpdateOne {
	apuo.mutation.SetStreetAddress(s)
	return apuo
}

// SetNillableStreetAddress sets the "street_address" field if the given value is not nil.
func (apuo *AsPersonUpdateOne) SetNillableStreetAddress(s *string) *AsPersonUpdateOne {
	if s != nil {
		apuo.SetStreetAddress(*s)
	}
	return apuo
}

// ClearStreetAddress clears the value of the "street_address" field.
func (apuo *AsPersonUpdateOne) ClearStreetAddress() *AsPersonUpdateOne {
	apuo.mutation.ClearStreetAddress()
	return apuo
}

// SetUserCode sets the "user_code" field.
func (apuo *AsPersonUpdateOne) SetUserCode(s string) *AsPersonUpdateOne {
	apuo.mutation.SetUserCode(s)
	return apuo
}

// SetNillableUserCode sets the "user_code" field if the given value is not nil.
func (apuo *AsPersonUpdateOne) SetNillableUserCode(s *string) *AsPersonUpdateOne {
	if s != nil {
		apuo.SetUserCode(*s)
	}
	return apuo
}

// ClearUserCode clears the value of the "user_code" field.
func (apuo *AsPersonUpdateOne) ClearUserCode() *AsPersonUpdateOne {
	apuo.mutation.ClearUserCode()
	return apuo
}

// SetIsMaster sets the "is_master" field.
func (apuo *AsPersonUpdateOne) SetIsMaster(i int64) *AsPersonUpdateOne {
	apuo.mutation.ResetIsMaster()
	apuo.mutation.SetIsMaster(i)
	return apuo
}

// SetNillableIsMaster sets the "is_master" field if the given value is not nil.
func (apuo *AsPersonUpdateOne) SetNillableIsMaster(i *int64) *AsPersonUpdateOne {
	if i != nil {
		apuo.SetIsMaster(*i)
	}
	return apuo
}

// AddIsMaster adds i to the "is_master" field.
func (apuo *AsPersonUpdateOne) AddIsMaster(i int64) *AsPersonUpdateOne {
	apuo.mutation.AddIsMaster(i)
	return apuo
}

// ClearIsMaster clears the value of the "is_master" field.
func (apuo *AsPersonUpdateOne) ClearIsMaster() *AsPersonUpdateOne {
	apuo.mutation.ClearIsMaster()
	return apuo
}

// SetIsDeleted sets the "is_deleted" field.
func (apuo *AsPersonUpdateOne) SetIsDeleted(i int64) *AsPersonUpdateOne {
	apuo.mutation.ResetIsDeleted()
	apuo.mutation.SetIsDeleted(i)
	return apuo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (apuo *AsPersonUpdateOne) SetNillableIsDeleted(i *int64) *AsPersonUpdateOne {
	if i != nil {
		apuo.SetIsDeleted(*i)
	}
	return apuo
}

// AddIsDeleted adds i to the "is_deleted" field.
func (apuo *AsPersonUpdateOne) AddIsDeleted(i int64) *AsPersonUpdateOne {
	apuo.mutation.AddIsDeleted(i)
	return apuo
}

// SetStatus sets the "status" field.
func (apuo *AsPersonUpdateOne) SetStatus(i int64) *AsPersonUpdateOne {
	apuo.mutation.ResetStatus()
	apuo.mutation.SetStatus(i)
	return apuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (apuo *AsPersonUpdateOne) SetNillableStatus(i *int64) *AsPersonUpdateOne {
	if i != nil {
		apuo.SetStatus(*i)
	}
	return apuo
}

// AddStatus adds i to the "status" field.
func (apuo *AsPersonUpdateOne) AddStatus(i int64) *AsPersonUpdateOne {
	apuo.mutation.AddStatus(i)
	return apuo
}

// ClearStatus clears the value of the "status" field.
func (apuo *AsPersonUpdateOne) ClearStatus() *AsPersonUpdateOne {
	apuo.mutation.ClearStatus()
	return apuo
}

// SetCreateUser sets the "create_user" field.
func (apuo *AsPersonUpdateOne) SetCreateUser(i int64) *AsPersonUpdateOne {
	apuo.mutation.ResetCreateUser()
	apuo.mutation.SetCreateUser(i)
	return apuo
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (apuo *AsPersonUpdateOne) SetNillableCreateUser(i *int64) *AsPersonUpdateOne {
	if i != nil {
		apuo.SetCreateUser(*i)
	}
	return apuo
}

// AddCreateUser adds i to the "create_user" field.
func (apuo *AsPersonUpdateOne) AddCreateUser(i int64) *AsPersonUpdateOne {
	apuo.mutation.AddCreateUser(i)
	return apuo
}

// ClearCreateUser clears the value of the "create_user" field.
func (apuo *AsPersonUpdateOne) ClearCreateUser() *AsPersonUpdateOne {
	apuo.mutation.ClearCreateUser()
	return apuo
}

// SetUpdateUser sets the "update_user" field.
func (apuo *AsPersonUpdateOne) SetUpdateUser(i int64) *AsPersonUpdateOne {
	apuo.mutation.ResetUpdateUser()
	apuo.mutation.SetUpdateUser(i)
	return apuo
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (apuo *AsPersonUpdateOne) SetNillableUpdateUser(i *int64) *AsPersonUpdateOne {
	if i != nil {
		apuo.SetUpdateUser(*i)
	}
	return apuo
}

// AddUpdateUser adds i to the "update_user" field.
func (apuo *AsPersonUpdateOne) AddUpdateUser(i int64) *AsPersonUpdateOne {
	apuo.mutation.AddUpdateUser(i)
	return apuo
}

// ClearUpdateUser clears the value of the "update_user" field.
func (apuo *AsPersonUpdateOne) ClearUpdateUser() *AsPersonUpdateOne {
	apuo.mutation.ClearUpdateUser()
	return apuo
}

// SetUpdateTime sets the "update_time" field.
func (apuo *AsPersonUpdateOne) SetUpdateTime(dt date.DateTime) *AsPersonUpdateOne {
	apuo.mutation.SetUpdateTime(dt)
	return apuo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (apuo *AsPersonUpdateOne) ClearUpdateTime() *AsPersonUpdateOne {
	apuo.mutation.ClearUpdateTime()
	return apuo
}

// SetUserxID sets the "userx" edge to the AsUser entity by ID.
func (apuo *AsPersonUpdateOne) SetUserxID(id int64) *AsPersonUpdateOne {
	apuo.mutation.SetUserxID(id)
	return apuo
}

// SetUserx sets the "userx" edge to the AsUser entity.
func (apuo *AsPersonUpdateOne) SetUserx(a *AsUser) *AsPersonUpdateOne {
	return apuo.SetUserxID(a.ID)
}

// AddAgencyIDs adds the "agencys" edge to the AsInnerAgency entity by IDs.
func (apuo *AsPersonUpdateOne) AddAgencyIDs(ids ...int64) *AsPersonUpdateOne {
	apuo.mutation.AddAgencyIDs(ids...)
	return apuo
}

// AddAgencys adds the "agencys" edges to the AsInnerAgency entity.
func (apuo *AsPersonUpdateOne) AddAgencys(a ...*AsInnerAgency) *AsPersonUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apuo.AddAgencyIDs(ids...)
}

// AddJobIDs adds the "jobs" edge to the AsJob entity by IDs.
func (apuo *AsPersonUpdateOne) AddJobIDs(ids ...int64) *AsPersonUpdateOne {
	apuo.mutation.AddJobIDs(ids...)
	return apuo
}

// AddJobs adds the "jobs" edges to the AsJob entity.
func (apuo *AsPersonUpdateOne) AddJobs(a ...*AsJob) *AsPersonUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apuo.AddJobIDs(ids...)
}

// Mutation returns the AsPersonMutation object of the builder.
func (apuo *AsPersonUpdateOne) Mutation() *AsPersonMutation {
	return apuo.mutation
}

// ClearUserx clears the "userx" edge to the AsUser entity.
func (apuo *AsPersonUpdateOne) ClearUserx() *AsPersonUpdateOne {
	apuo.mutation.ClearUserx()
	return apuo
}

// ClearAgencys clears all "agencys" edges to the AsInnerAgency entity.
func (apuo *AsPersonUpdateOne) ClearAgencys() *AsPersonUpdateOne {
	apuo.mutation.ClearAgencys()
	return apuo
}

// RemoveAgencyIDs removes the "agencys" edge to AsInnerAgency entities by IDs.
func (apuo *AsPersonUpdateOne) RemoveAgencyIDs(ids ...int64) *AsPersonUpdateOne {
	apuo.mutation.RemoveAgencyIDs(ids...)
	return apuo
}

// RemoveAgencys removes "agencys" edges to AsInnerAgency entities.
func (apuo *AsPersonUpdateOne) RemoveAgencys(a ...*AsInnerAgency) *AsPersonUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apuo.RemoveAgencyIDs(ids...)
}

// ClearJobs clears all "jobs" edges to the AsJob entity.
func (apuo *AsPersonUpdateOne) ClearJobs() *AsPersonUpdateOne {
	apuo.mutation.ClearJobs()
	return apuo
}

// RemoveJobIDs removes the "jobs" edge to AsJob entities by IDs.
func (apuo *AsPersonUpdateOne) RemoveJobIDs(ids ...int64) *AsPersonUpdateOne {
	apuo.mutation.RemoveJobIDs(ids...)
	return apuo
}

// RemoveJobs removes "jobs" edges to AsJob entities.
func (apuo *AsPersonUpdateOne) RemoveJobs(a ...*AsJob) *AsPersonUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apuo.RemoveJobIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (apuo *AsPersonUpdateOne) Select(field string, fields ...string) *AsPersonUpdateOne {
	apuo.fields = append([]string{field}, fields...)
	return apuo
}

// Save executes the query and returns the updated AsPerson entity.
func (apuo *AsPersonUpdateOne) Save(ctx context.Context) (*AsPerson, error) {
	var (
		err  error
		node *AsPerson
	)
	apuo.defaults()
	if len(apuo.hooks) == 0 {
		if err = apuo.check(); err != nil {
			return nil, err
		}
		node, err = apuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsPersonMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = apuo.check(); err != nil {
				return nil, err
			}
			apuo.mutation = mutation
			node, err = apuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(apuo.hooks) - 1; i >= 0; i-- {
			if apuo.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = apuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, apuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (apuo *AsPersonUpdateOne) SaveX(ctx context.Context) *AsPerson {
	node, err := apuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (apuo *AsPersonUpdateOne) Exec(ctx context.Context) error {
	_, err := apuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apuo *AsPersonUpdateOne) ExecX(ctx context.Context) {
	if err := apuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (apuo *AsPersonUpdateOne) defaults() {
	if _, ok := apuo.mutation.UpdateTime(); !ok && !apuo.mutation.UpdateTimeCleared() {
		v := asperson.UpdateDefaultUpdateTime()
		apuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (apuo *AsPersonUpdateOne) check() error {
	if _, ok := apuo.mutation.UserxID(); apuo.mutation.UserxCleared() && !ok {
		return errors.New(`schema: clearing a required unique edge "AsPerson.userx"`)
	}
	return nil
}

func (apuo *AsPersonUpdateOne) sqlSave(ctx context.Context) (_node *AsPerson, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asperson.Table,
			Columns: asperson.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asperson.FieldID,
			},
		},
	}
	id, ok := apuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`schema: missing "AsPerson.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := apuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asperson.FieldID)
		for _, f := range fields {
			if !asperson.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("schema: invalid field %q for query", f)}
			}
			if f != asperson.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := apuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := apuo.mutation.TenantCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asperson.FieldTenantCode,
		})
	}
	if apuo.mutation.TenantCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asperson.FieldTenantCode,
		})
	}
	if value, ok := apuo.mutation.RealName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asperson.FieldRealName,
		})
	}
	if value, ok := apuo.mutation.IDCard(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asperson.FieldIDCard,
		})
	}
	if apuo.mutation.IDCardCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asperson.FieldIDCard,
		})
	}
	if value, ok := apuo.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asperson.FieldGender,
		})
	}
	if value, ok := apuo.mutation.AddedGender(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asperson.FieldGender,
		})
	}
	if apuo.mutation.GenderCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asperson.FieldGender,
		})
	}
	if value, ok := apuo.mutation.UserBirthday(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asperson.FieldUserBirthday,
		})
	}
	if apuo.mutation.UserBirthdayCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asperson.FieldUserBirthday,
		})
	}
	if value, ok := apuo.mutation.UserEmail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asperson.FieldUserEmail,
		})
	}
	if apuo.mutation.UserEmailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asperson.FieldUserEmail,
		})
	}
	if value, ok := apuo.mutation.UserPhoto(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asperson.FieldUserPhoto,
		})
	}
	if apuo.mutation.UserPhotoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asperson.FieldUserPhoto,
		})
	}
	if value, ok := apuo.mutation.PhoneNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asperson.FieldPhoneNumber,
		})
	}
	if value, ok := apuo.mutation.Province(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asperson.FieldProvince,
		})
	}
	if apuo.mutation.ProvinceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asperson.FieldProvince,
		})
	}
	if value, ok := apuo.mutation.City(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asperson.FieldCity,
		})
	}
	if apuo.mutation.CityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asperson.FieldCity,
		})
	}
	if value, ok := apuo.mutation.StreetAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asperson.FieldStreetAddress,
		})
	}
	if apuo.mutation.StreetAddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asperson.FieldStreetAddress,
		})
	}
	if value, ok := apuo.mutation.UserCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asperson.FieldUserCode,
		})
	}
	if apuo.mutation.UserCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asperson.FieldUserCode,
		})
	}
	if value, ok := apuo.mutation.IsMaster(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asperson.FieldIsMaster,
		})
	}
	if value, ok := apuo.mutation.AddedIsMaster(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asperson.FieldIsMaster,
		})
	}
	if apuo.mutation.IsMasterCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asperson.FieldIsMaster,
		})
	}
	if value, ok := apuo.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asperson.FieldIsDeleted,
		})
	}
	if value, ok := apuo.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asperson.FieldIsDeleted,
		})
	}
	if value, ok := apuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asperson.FieldStatus,
		})
	}
	if value, ok := apuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asperson.FieldStatus,
		})
	}
	if apuo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asperson.FieldStatus,
		})
	}
	if value, ok := apuo.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asperson.FieldCreateUser,
		})
	}
	if value, ok := apuo.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asperson.FieldCreateUser,
		})
	}
	if apuo.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asperson.FieldCreateUser,
		})
	}
	if value, ok := apuo.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asperson.FieldUpdateUser,
		})
	}
	if value, ok := apuo.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asperson.FieldUpdateUser,
		})
	}
	if apuo.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asperson.FieldUpdateUser,
		})
	}
	if apuo.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asperson.FieldCreateTime,
		})
	}
	if value, ok := apuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asperson.FieldUpdateTime,
		})
	}
	if apuo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asperson.FieldUpdateTime,
		})
	}
	if apuo.mutation.UserxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   asperson.UserxTable,
			Columns: []string{asperson.UserxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.UserxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   asperson.UserxTable,
			Columns: []string{asperson.UserxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apuo.mutation.AgencysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asperson.AgencysTable,
			Columns: asperson.AgencysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asinneragency.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.RemovedAgencysIDs(); len(nodes) > 0 && !apuo.mutation.AgencysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asperson.AgencysTable,
			Columns: asperson.AgencysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asinneragency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.AgencysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asperson.AgencysTable,
			Columns: asperson.AgencysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asinneragency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apuo.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asperson.JobsTable,
			Columns: asperson.JobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asjob.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.RemovedJobsIDs(); len(nodes) > 0 && !apuo.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asperson.JobsTable,
			Columns: asperson.JobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asjob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.JobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asperson.JobsTable,
			Columns: asperson.JobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asjob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AsPerson{config: apuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, apuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asperson.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
