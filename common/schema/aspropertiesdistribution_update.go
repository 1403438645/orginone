// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/asproperties"
	"orginone/common/schema/aspropertiesdistribution"
	"orginone/common/schema/astenant"
	"orginone/common/schema/predicate"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsPropertiesDistributionUpdate is the builder for updating AsPropertiesDistribution entities.
type AsPropertiesDistributionUpdate struct {
	config
	hooks    []Hook
	mutation *AsPropertiesDistributionMutation
}

// Where appends a list predicates to the AsPropertiesDistributionUpdate builder.
func (apdu *AsPropertiesDistributionUpdate) Where(ps ...predicate.AsPropertiesDistribution) *AsPropertiesDistributionUpdate {
	apdu.mutation.Where(ps...)
	return apdu
}

// SetPropertiesID sets the "properties_id" field.
func (apdu *AsPropertiesDistributionUpdate) SetPropertiesID(i int64) *AsPropertiesDistributionUpdate {
	apdu.mutation.SetPropertiesID(i)
	return apdu
}

// SetNillablePropertiesID sets the "properties_id" field if the given value is not nil.
func (apdu *AsPropertiesDistributionUpdate) SetNillablePropertiesID(i *int64) *AsPropertiesDistributionUpdate {
	if i != nil {
		apdu.SetPropertiesID(*i)
	}
	return apdu
}

// ClearPropertiesID clears the value of the "properties_id" field.
func (apdu *AsPropertiesDistributionUpdate) ClearPropertiesID() *AsPropertiesDistributionUpdate {
	apdu.mutation.ClearPropertiesID()
	return apdu
}

// SetTenantID sets the "tenant_id" field.
func (apdu *AsPropertiesDistributionUpdate) SetTenantID(i int64) *AsPropertiesDistributionUpdate {
	apdu.mutation.SetTenantID(i)
	return apdu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (apdu *AsPropertiesDistributionUpdate) SetNillableTenantID(i *int64) *AsPropertiesDistributionUpdate {
	if i != nil {
		apdu.SetTenantID(*i)
	}
	return apdu
}

// ClearTenantID clears the value of the "tenant_id" field.
func (apdu *AsPropertiesDistributionUpdate) ClearTenantID() *AsPropertiesDistributionUpdate {
	apdu.mutation.ClearTenantID()
	return apdu
}

// SetIsDeleted sets the "is_deleted" field.
func (apdu *AsPropertiesDistributionUpdate) SetIsDeleted(i int64) *AsPropertiesDistributionUpdate {
	apdu.mutation.ResetIsDeleted()
	apdu.mutation.SetIsDeleted(i)
	return apdu
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (apdu *AsPropertiesDistributionUpdate) SetNillableIsDeleted(i *int64) *AsPropertiesDistributionUpdate {
	if i != nil {
		apdu.SetIsDeleted(*i)
	}
	return apdu
}

// AddIsDeleted adds i to the "is_deleted" field.
func (apdu *AsPropertiesDistributionUpdate) AddIsDeleted(i int64) *AsPropertiesDistributionUpdate {
	apdu.mutation.AddIsDeleted(i)
	return apdu
}

// SetStatus sets the "status" field.
func (apdu *AsPropertiesDistributionUpdate) SetStatus(i int64) *AsPropertiesDistributionUpdate {
	apdu.mutation.ResetStatus()
	apdu.mutation.SetStatus(i)
	return apdu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (apdu *AsPropertiesDistributionUpdate) SetNillableStatus(i *int64) *AsPropertiesDistributionUpdate {
	if i != nil {
		apdu.SetStatus(*i)
	}
	return apdu
}

// AddStatus adds i to the "status" field.
func (apdu *AsPropertiesDistributionUpdate) AddStatus(i int64) *AsPropertiesDistributionUpdate {
	apdu.mutation.AddStatus(i)
	return apdu
}

// ClearStatus clears the value of the "status" field.
func (apdu *AsPropertiesDistributionUpdate) ClearStatus() *AsPropertiesDistributionUpdate {
	apdu.mutation.ClearStatus()
	return apdu
}

// SetCreateUser sets the "create_user" field.
func (apdu *AsPropertiesDistributionUpdate) SetCreateUser(i int64) *AsPropertiesDistributionUpdate {
	apdu.mutation.ResetCreateUser()
	apdu.mutation.SetCreateUser(i)
	return apdu
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (apdu *AsPropertiesDistributionUpdate) SetNillableCreateUser(i *int64) *AsPropertiesDistributionUpdate {
	if i != nil {
		apdu.SetCreateUser(*i)
	}
	return apdu
}

// AddCreateUser adds i to the "create_user" field.
func (apdu *AsPropertiesDistributionUpdate) AddCreateUser(i int64) *AsPropertiesDistributionUpdate {
	apdu.mutation.AddCreateUser(i)
	return apdu
}

// ClearCreateUser clears the value of the "create_user" field.
func (apdu *AsPropertiesDistributionUpdate) ClearCreateUser() *AsPropertiesDistributionUpdate {
	apdu.mutation.ClearCreateUser()
	return apdu
}

// SetUpdateUser sets the "update_user" field.
func (apdu *AsPropertiesDistributionUpdate) SetUpdateUser(i int64) *AsPropertiesDistributionUpdate {
	apdu.mutation.ResetUpdateUser()
	apdu.mutation.SetUpdateUser(i)
	return apdu
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (apdu *AsPropertiesDistributionUpdate) SetNillableUpdateUser(i *int64) *AsPropertiesDistributionUpdate {
	if i != nil {
		apdu.SetUpdateUser(*i)
	}
	return apdu
}

// AddUpdateUser adds i to the "update_user" field.
func (apdu *AsPropertiesDistributionUpdate) AddUpdateUser(i int64) *AsPropertiesDistributionUpdate {
	apdu.mutation.AddUpdateUser(i)
	return apdu
}

// ClearUpdateUser clears the value of the "update_user" field.
func (apdu *AsPropertiesDistributionUpdate) ClearUpdateUser() *AsPropertiesDistributionUpdate {
	apdu.mutation.ClearUpdateUser()
	return apdu
}

// SetUpdateTime sets the "update_time" field.
func (apdu *AsPropertiesDistributionUpdate) SetUpdateTime(dt date.DateTime) *AsPropertiesDistributionUpdate {
	apdu.mutation.SetUpdateTime(dt)
	return apdu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (apdu *AsPropertiesDistributionUpdate) ClearUpdateTime() *AsPropertiesDistributionUpdate {
	apdu.mutation.ClearUpdateTime()
	return apdu
}

// SetProperties sets the "properties" edge to the AsProperties entity.
func (apdu *AsPropertiesDistributionUpdate) SetProperties(a *AsProperties) *AsPropertiesDistributionUpdate {
	return apdu.SetPropertiesID(a.ID)
}

// SetTenant sets the "tenant" edge to the AsTenant entity.
func (apdu *AsPropertiesDistributionUpdate) SetTenant(a *AsTenant) *AsPropertiesDistributionUpdate {
	return apdu.SetTenantID(a.ID)
}

// Mutation returns the AsPropertiesDistributionMutation object of the builder.
func (apdu *AsPropertiesDistributionUpdate) Mutation() *AsPropertiesDistributionMutation {
	return apdu.mutation
}

// ClearProperties clears the "properties" edge to the AsProperties entity.
func (apdu *AsPropertiesDistributionUpdate) ClearProperties() *AsPropertiesDistributionUpdate {
	apdu.mutation.ClearProperties()
	return apdu
}

// ClearTenant clears the "tenant" edge to the AsTenant entity.
func (apdu *AsPropertiesDistributionUpdate) ClearTenant() *AsPropertiesDistributionUpdate {
	apdu.mutation.ClearTenant()
	return apdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (apdu *AsPropertiesDistributionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	apdu.defaults()
	if len(apdu.hooks) == 0 {
		affected, err = apdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsPropertiesDistributionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			apdu.mutation = mutation
			affected, err = apdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(apdu.hooks) - 1; i >= 0; i-- {
			if apdu.hooks[i] == nil {
				return 0, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = apdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, apdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (apdu *AsPropertiesDistributionUpdate) SaveX(ctx context.Context) int {
	affected, err := apdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (apdu *AsPropertiesDistributionUpdate) Exec(ctx context.Context) error {
	_, err := apdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apdu *AsPropertiesDistributionUpdate) ExecX(ctx context.Context) {
	if err := apdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (apdu *AsPropertiesDistributionUpdate) defaults() {
	if _, ok := apdu.mutation.UpdateTime(); !ok && !apdu.mutation.UpdateTimeCleared() {
		v := aspropertiesdistribution.UpdateDefaultUpdateTime()
		apdu.mutation.SetUpdateTime(v)
	}
}

func (apdu *AsPropertiesDistributionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   aspropertiesdistribution.Table,
			Columns: aspropertiesdistribution.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: aspropertiesdistribution.FieldID,
			},
		},
	}
	if ps := apdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := apdu.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aspropertiesdistribution.FieldIsDeleted,
		})
	}
	if value, ok := apdu.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aspropertiesdistribution.FieldIsDeleted,
		})
	}
	if value, ok := apdu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aspropertiesdistribution.FieldStatus,
		})
	}
	if value, ok := apdu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aspropertiesdistribution.FieldStatus,
		})
	}
	if apdu.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: aspropertiesdistribution.FieldStatus,
		})
	}
	if value, ok := apdu.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aspropertiesdistribution.FieldCreateUser,
		})
	}
	if value, ok := apdu.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aspropertiesdistribution.FieldCreateUser,
		})
	}
	if apdu.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: aspropertiesdistribution.FieldCreateUser,
		})
	}
	if value, ok := apdu.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aspropertiesdistribution.FieldUpdateUser,
		})
	}
	if value, ok := apdu.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aspropertiesdistribution.FieldUpdateUser,
		})
	}
	if apdu.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: aspropertiesdistribution.FieldUpdateUser,
		})
	}
	if apdu.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: aspropertiesdistribution.FieldCreateTime,
		})
	}
	if value, ok := apdu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: aspropertiesdistribution.FieldUpdateTime,
		})
	}
	if apdu.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: aspropertiesdistribution.FieldUpdateTime,
		})
	}
	if apdu.mutation.PropertiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   aspropertiesdistribution.PropertiesTable,
			Columns: []string{aspropertiesdistribution.PropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asproperties.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apdu.mutation.PropertiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   aspropertiesdistribution.PropertiesTable,
			Columns: []string{aspropertiesdistribution.PropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asproperties.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apdu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   aspropertiesdistribution.TenantTable,
			Columns: []string{aspropertiesdistribution.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: astenant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apdu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   aspropertiesdistribution.TenantTable,
			Columns: []string{aspropertiesdistribution.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: astenant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, apdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{aspropertiesdistribution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AsPropertiesDistributionUpdateOne is the builder for updating a single AsPropertiesDistribution entity.
type AsPropertiesDistributionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AsPropertiesDistributionMutation
}

// SetPropertiesID sets the "properties_id" field.
func (apduo *AsPropertiesDistributionUpdateOne) SetPropertiesID(i int64) *AsPropertiesDistributionUpdateOne {
	apduo.mutation.SetPropertiesID(i)
	return apduo
}

// SetNillablePropertiesID sets the "properties_id" field if the given value is not nil.
func (apduo *AsPropertiesDistributionUpdateOne) SetNillablePropertiesID(i *int64) *AsPropertiesDistributionUpdateOne {
	if i != nil {
		apduo.SetPropertiesID(*i)
	}
	return apduo
}

// ClearPropertiesID clears the value of the "properties_id" field.
func (apduo *AsPropertiesDistributionUpdateOne) ClearPropertiesID() *AsPropertiesDistributionUpdateOne {
	apduo.mutation.ClearPropertiesID()
	return apduo
}

// SetTenantID sets the "tenant_id" field.
func (apduo *AsPropertiesDistributionUpdateOne) SetTenantID(i int64) *AsPropertiesDistributionUpdateOne {
	apduo.mutation.SetTenantID(i)
	return apduo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (apduo *AsPropertiesDistributionUpdateOne) SetNillableTenantID(i *int64) *AsPropertiesDistributionUpdateOne {
	if i != nil {
		apduo.SetTenantID(*i)
	}
	return apduo
}

// ClearTenantID clears the value of the "tenant_id" field.
func (apduo *AsPropertiesDistributionUpdateOne) ClearTenantID() *AsPropertiesDistributionUpdateOne {
	apduo.mutation.ClearTenantID()
	return apduo
}

// SetIsDeleted sets the "is_deleted" field.
func (apduo *AsPropertiesDistributionUpdateOne) SetIsDeleted(i int64) *AsPropertiesDistributionUpdateOne {
	apduo.mutation.ResetIsDeleted()
	apduo.mutation.SetIsDeleted(i)
	return apduo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (apduo *AsPropertiesDistributionUpdateOne) SetNillableIsDeleted(i *int64) *AsPropertiesDistributionUpdateOne {
	if i != nil {
		apduo.SetIsDeleted(*i)
	}
	return apduo
}

// AddIsDeleted adds i to the "is_deleted" field.
func (apduo *AsPropertiesDistributionUpdateOne) AddIsDeleted(i int64) *AsPropertiesDistributionUpdateOne {
	apduo.mutation.AddIsDeleted(i)
	return apduo
}

// SetStatus sets the "status" field.
func (apduo *AsPropertiesDistributionUpdateOne) SetStatus(i int64) *AsPropertiesDistributionUpdateOne {
	apduo.mutation.ResetStatus()
	apduo.mutation.SetStatus(i)
	return apduo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (apduo *AsPropertiesDistributionUpdateOne) SetNillableStatus(i *int64) *AsPropertiesDistributionUpdateOne {
	if i != nil {
		apduo.SetStatus(*i)
	}
	return apduo
}

// AddStatus adds i to the "status" field.
func (apduo *AsPropertiesDistributionUpdateOne) AddStatus(i int64) *AsPropertiesDistributionUpdateOne {
	apduo.mutation.AddStatus(i)
	return apduo
}

// ClearStatus clears the value of the "status" field.
func (apduo *AsPropertiesDistributionUpdateOne) ClearStatus() *AsPropertiesDistributionUpdateOne {
	apduo.mutation.ClearStatus()
	return apduo
}

// SetCreateUser sets the "create_user" field.
func (apduo *AsPropertiesDistributionUpdateOne) SetCreateUser(i int64) *AsPropertiesDistributionUpdateOne {
	apduo.mutation.ResetCreateUser()
	apduo.mutation.SetCreateUser(i)
	return apduo
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (apduo *AsPropertiesDistributionUpdateOne) SetNillableCreateUser(i *int64) *AsPropertiesDistributionUpdateOne {
	if i != nil {
		apduo.SetCreateUser(*i)
	}
	return apduo
}

// AddCreateUser adds i to the "create_user" field.
func (apduo *AsPropertiesDistributionUpdateOne) AddCreateUser(i int64) *AsPropertiesDistributionUpdateOne {
	apduo.mutation.AddCreateUser(i)
	return apduo
}

// ClearCreateUser clears the value of the "create_user" field.
func (apduo *AsPropertiesDistributionUpdateOne) ClearCreateUser() *AsPropertiesDistributionUpdateOne {
	apduo.mutation.ClearCreateUser()
	return apduo
}

// SetUpdateUser sets the "update_user" field.
func (apduo *AsPropertiesDistributionUpdateOne) SetUpdateUser(i int64) *AsPropertiesDistributionUpdateOne {
	apduo.mutation.ResetUpdateUser()
	apduo.mutation.SetUpdateUser(i)
	return apduo
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (apduo *AsPropertiesDistributionUpdateOne) SetNillableUpdateUser(i *int64) *AsPropertiesDistributionUpdateOne {
	if i != nil {
		apduo.SetUpdateUser(*i)
	}
	return apduo
}

// AddUpdateUser adds i to the "update_user" field.
func (apduo *AsPropertiesDistributionUpdateOne) AddUpdateUser(i int64) *AsPropertiesDistributionUpdateOne {
	apduo.mutation.AddUpdateUser(i)
	return apduo
}

// ClearUpdateUser clears the value of the "update_user" field.
func (apduo *AsPropertiesDistributionUpdateOne) ClearUpdateUser() *AsPropertiesDistributionUpdateOne {
	apduo.mutation.ClearUpdateUser()
	return apduo
}

// SetUpdateTime sets the "update_time" field.
func (apduo *AsPropertiesDistributionUpdateOne) SetUpdateTime(dt date.DateTime) *AsPropertiesDistributionUpdateOne {
	apduo.mutation.SetUpdateTime(dt)
	return apduo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (apduo *AsPropertiesDistributionUpdateOne) ClearUpdateTime() *AsPropertiesDistributionUpdateOne {
	apduo.mutation.ClearUpdateTime()
	return apduo
}

// SetProperties sets the "properties" edge to the AsProperties entity.
func (apduo *AsPropertiesDistributionUpdateOne) SetProperties(a *AsProperties) *AsPropertiesDistributionUpdateOne {
	return apduo.SetPropertiesID(a.ID)
}

// SetTenant sets the "tenant" edge to the AsTenant entity.
func (apduo *AsPropertiesDistributionUpdateOne) SetTenant(a *AsTenant) *AsPropertiesDistributionUpdateOne {
	return apduo.SetTenantID(a.ID)
}

// Mutation returns the AsPropertiesDistributionMutation object of the builder.
func (apduo *AsPropertiesDistributionUpdateOne) Mutation() *AsPropertiesDistributionMutation {
	return apduo.mutation
}

// ClearProperties clears the "properties" edge to the AsProperties entity.
func (apduo *AsPropertiesDistributionUpdateOne) ClearProperties() *AsPropertiesDistributionUpdateOne {
	apduo.mutation.ClearProperties()
	return apduo
}

// ClearTenant clears the "tenant" edge to the AsTenant entity.
func (apduo *AsPropertiesDistributionUpdateOne) ClearTenant() *AsPropertiesDistributionUpdateOne {
	apduo.mutation.ClearTenant()
	return apduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (apduo *AsPropertiesDistributionUpdateOne) Select(field string, fields ...string) *AsPropertiesDistributionUpdateOne {
	apduo.fields = append([]string{field}, fields...)
	return apduo
}

// Save executes the query and returns the updated AsPropertiesDistribution entity.
func (apduo *AsPropertiesDistributionUpdateOne) Save(ctx context.Context) (*AsPropertiesDistribution, error) {
	var (
		err  error
		node *AsPropertiesDistribution
	)
	apduo.defaults()
	if len(apduo.hooks) == 0 {
		node, err = apduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsPropertiesDistributionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			apduo.mutation = mutation
			node, err = apduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(apduo.hooks) - 1; i >= 0; i-- {
			if apduo.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = apduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, apduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (apduo *AsPropertiesDistributionUpdateOne) SaveX(ctx context.Context) *AsPropertiesDistribution {
	node, err := apduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (apduo *AsPropertiesDistributionUpdateOne) Exec(ctx context.Context) error {
	_, err := apduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apduo *AsPropertiesDistributionUpdateOne) ExecX(ctx context.Context) {
	if err := apduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (apduo *AsPropertiesDistributionUpdateOne) defaults() {
	if _, ok := apduo.mutation.UpdateTime(); !ok && !apduo.mutation.UpdateTimeCleared() {
		v := aspropertiesdistribution.UpdateDefaultUpdateTime()
		apduo.mutation.SetUpdateTime(v)
	}
}

func (apduo *AsPropertiesDistributionUpdateOne) sqlSave(ctx context.Context) (_node *AsPropertiesDistribution, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   aspropertiesdistribution.Table,
			Columns: aspropertiesdistribution.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: aspropertiesdistribution.FieldID,
			},
		},
	}
	id, ok := apduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`schema: missing "AsPropertiesDistribution.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := apduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, aspropertiesdistribution.FieldID)
		for _, f := range fields {
			if !aspropertiesdistribution.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("schema: invalid field %q for query", f)}
			}
			if f != aspropertiesdistribution.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := apduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := apduo.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aspropertiesdistribution.FieldIsDeleted,
		})
	}
	if value, ok := apduo.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aspropertiesdistribution.FieldIsDeleted,
		})
	}
	if value, ok := apduo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aspropertiesdistribution.FieldStatus,
		})
	}
	if value, ok := apduo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aspropertiesdistribution.FieldStatus,
		})
	}
	if apduo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: aspropertiesdistribution.FieldStatus,
		})
	}
	if value, ok := apduo.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aspropertiesdistribution.FieldCreateUser,
		})
	}
	if value, ok := apduo.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aspropertiesdistribution.FieldCreateUser,
		})
	}
	if apduo.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: aspropertiesdistribution.FieldCreateUser,
		})
	}
	if value, ok := apduo.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aspropertiesdistribution.FieldUpdateUser,
		})
	}
	if value, ok := apduo.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aspropertiesdistribution.FieldUpdateUser,
		})
	}
	if apduo.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: aspropertiesdistribution.FieldUpdateUser,
		})
	}
	if apduo.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: aspropertiesdistribution.FieldCreateTime,
		})
	}
	if value, ok := apduo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: aspropertiesdistribution.FieldUpdateTime,
		})
	}
	if apduo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: aspropertiesdistribution.FieldUpdateTime,
		})
	}
	if apduo.mutation.PropertiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   aspropertiesdistribution.PropertiesTable,
			Columns: []string{aspropertiesdistribution.PropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asproperties.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apduo.mutation.PropertiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   aspropertiesdistribution.PropertiesTable,
			Columns: []string{aspropertiesdistribution.PropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asproperties.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apduo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   aspropertiesdistribution.TenantTable,
			Columns: []string{aspropertiesdistribution.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: astenant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apduo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   aspropertiesdistribution.TenantTable,
			Columns: []string{aspropertiesdistribution.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: astenant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AsPropertiesDistribution{config: apduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, apduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{aspropertiesdistribution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
