// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/asinneragency"
	"orginone/common/schema/asjob"
	"orginone/common/schema/asmarketappusertemplate"
	"orginone/common/schema/asmarketmenuusersort"
	"orginone/common/schema/asmarketroledistribution"
	"orginone/common/schema/asmarketusedapp"
	"orginone/common/schema/asperson"
	"orginone/common/schema/asrole"
	"orginone/common/schema/asuser"
	"orginone/common/schema/asworkingdata"
	"orginone/common/schema/predicate"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsUserUpdate is the builder for updating AsUser entities.
type AsUserUpdate struct {
	config
	hooks    []Hook
	mutation *AsUserMutation
}

// Where appends a list predicates to the AsUserUpdate builder.
func (auu *AsUserUpdate) Where(ps ...predicate.AsUser) *AsUserUpdate {
	auu.mutation.Where(ps...)
	return auu
}

// SetTenantCode sets the "tenant_code" field.
func (auu *AsUserUpdate) SetTenantCode(s string) *AsUserUpdate {
	auu.mutation.SetTenantCode(s)
	return auu
}

// SetNillableTenantCode sets the "tenant_code" field if the given value is not nil.
func (auu *AsUserUpdate) SetNillableTenantCode(s *string) *AsUserUpdate {
	if s != nil {
		auu.SetTenantCode(*s)
	}
	return auu
}

// ClearTenantCode clears the value of the "tenant_code" field.
func (auu *AsUserUpdate) ClearTenantCode() *AsUserUpdate {
	auu.mutation.ClearTenantCode()
	return auu
}

// SetPwd sets the "pwd" field.
func (auu *AsUserUpdate) SetPwd(s string) *AsUserUpdate {
	auu.mutation.SetPwd(s)
	return auu
}

// SetPhoneNumber sets the "phone_number" field.
func (auu *AsUserUpdate) SetPhoneNumber(s string) *AsUserUpdate {
	auu.mutation.SetPhoneNumber(s)
	return auu
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (auu *AsUserUpdate) SetNillablePhoneNumber(s *string) *AsUserUpdate {
	if s != nil {
		auu.SetPhoneNumber(*s)
	}
	return auu
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (auu *AsUserUpdate) ClearPhoneNumber() *AsUserUpdate {
	auu.mutation.ClearPhoneNumber()
	return auu
}

// SetIsAdmin sets the "is_admin" field.
func (auu *AsUserUpdate) SetIsAdmin(i int64) *AsUserUpdate {
	auu.mutation.ResetIsAdmin()
	auu.mutation.SetIsAdmin(i)
	return auu
}

// SetNillableIsAdmin sets the "is_admin" field if the given value is not nil.
func (auu *AsUserUpdate) SetNillableIsAdmin(i *int64) *AsUserUpdate {
	if i != nil {
		auu.SetIsAdmin(*i)
	}
	return auu
}

// AddIsAdmin adds i to the "is_admin" field.
func (auu *AsUserUpdate) AddIsAdmin(i int64) *AsUserUpdate {
	auu.mutation.AddIsAdmin(i)
	return auu
}

// SetTenantApplyingState sets the "tenant_applying_state" field.
func (auu *AsUserUpdate) SetTenantApplyingState(i int64) *AsUserUpdate {
	auu.mutation.ResetTenantApplyingState()
	auu.mutation.SetTenantApplyingState(i)
	return auu
}

// SetNillableTenantApplyingState sets the "tenant_applying_state" field if the given value is not nil.
func (auu *AsUserUpdate) SetNillableTenantApplyingState(i *int64) *AsUserUpdate {
	if i != nil {
		auu.SetTenantApplyingState(*i)
	}
	return auu
}

// AddTenantApplyingState adds i to the "tenant_applying_state" field.
func (auu *AsUserUpdate) AddTenantApplyingState(i int64) *AsUserUpdate {
	auu.mutation.AddTenantApplyingState(i)
	return auu
}

// SetIsMaster sets the "is_master" field.
func (auu *AsUserUpdate) SetIsMaster(i int64) *AsUserUpdate {
	auu.mutation.ResetIsMaster()
	auu.mutation.SetIsMaster(i)
	return auu
}

// SetNillableIsMaster sets the "is_master" field if the given value is not nil.
func (auu *AsUserUpdate) SetNillableIsMaster(i *int64) *AsUserUpdate {
	if i != nil {
		auu.SetIsMaster(*i)
	}
	return auu
}

// AddIsMaster adds i to the "is_master" field.
func (auu *AsUserUpdate) AddIsMaster(i int64) *AsUserUpdate {
	auu.mutation.AddIsMaster(i)
	return auu
}

// ClearIsMaster clears the value of the "is_master" field.
func (auu *AsUserUpdate) ClearIsMaster() *AsUserUpdate {
	auu.mutation.ClearIsMaster()
	return auu
}

// SetIsCreated sets the "is_created" field.
func (auu *AsUserUpdate) SetIsCreated(i int64) *AsUserUpdate {
	auu.mutation.ResetIsCreated()
	auu.mutation.SetIsCreated(i)
	return auu
}

// SetNillableIsCreated sets the "is_created" field if the given value is not nil.
func (auu *AsUserUpdate) SetNillableIsCreated(i *int64) *AsUserUpdate {
	if i != nil {
		auu.SetIsCreated(*i)
	}
	return auu
}

// AddIsCreated adds i to the "is_created" field.
func (auu *AsUserUpdate) AddIsCreated(i int64) *AsUserUpdate {
	auu.mutation.AddIsCreated(i)
	return auu
}

// SetOpenID sets the "open_id" field.
func (auu *AsUserUpdate) SetOpenID(s string) *AsUserUpdate {
	auu.mutation.SetOpenID(s)
	return auu
}

// SetNillableOpenID sets the "open_id" field if the given value is not nil.
func (auu *AsUserUpdate) SetNillableOpenID(s *string) *AsUserUpdate {
	if s != nil {
		auu.SetOpenID(*s)
	}
	return auu
}

// ClearOpenID clears the value of the "open_id" field.
func (auu *AsUserUpdate) ClearOpenID() *AsUserUpdate {
	auu.mutation.ClearOpenID()
	return auu
}

// SetUserName sets the "user_name" field.
func (auu *AsUserUpdate) SetUserName(s string) *AsUserUpdate {
	auu.mutation.SetUserName(s)
	return auu
}

// SetNillableUserName sets the "user_name" field if the given value is not nil.
func (auu *AsUserUpdate) SetNillableUserName(s *string) *AsUserUpdate {
	if s != nil {
		auu.SetUserName(*s)
	}
	return auu
}

// ClearUserName clears the value of the "user_name" field.
func (auu *AsUserUpdate) ClearUserName() *AsUserUpdate {
	auu.mutation.ClearUserName()
	return auu
}

// SetIsDeleted sets the "is_deleted" field.
func (auu *AsUserUpdate) SetIsDeleted(i int64) *AsUserUpdate {
	auu.mutation.ResetIsDeleted()
	auu.mutation.SetIsDeleted(i)
	return auu
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (auu *AsUserUpdate) SetNillableIsDeleted(i *int64) *AsUserUpdate {
	if i != nil {
		auu.SetIsDeleted(*i)
	}
	return auu
}

// AddIsDeleted adds i to the "is_deleted" field.
func (auu *AsUserUpdate) AddIsDeleted(i int64) *AsUserUpdate {
	auu.mutation.AddIsDeleted(i)
	return auu
}

// SetStatus sets the "status" field.
func (auu *AsUserUpdate) SetStatus(i int64) *AsUserUpdate {
	auu.mutation.ResetStatus()
	auu.mutation.SetStatus(i)
	return auu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (auu *AsUserUpdate) SetNillableStatus(i *int64) *AsUserUpdate {
	if i != nil {
		auu.SetStatus(*i)
	}
	return auu
}

// AddStatus adds i to the "status" field.
func (auu *AsUserUpdate) AddStatus(i int64) *AsUserUpdate {
	auu.mutation.AddStatus(i)
	return auu
}

// ClearStatus clears the value of the "status" field.
func (auu *AsUserUpdate) ClearStatus() *AsUserUpdate {
	auu.mutation.ClearStatus()
	return auu
}

// SetCreateUser sets the "create_user" field.
func (auu *AsUserUpdate) SetCreateUser(i int64) *AsUserUpdate {
	auu.mutation.ResetCreateUser()
	auu.mutation.SetCreateUser(i)
	return auu
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (auu *AsUserUpdate) SetNillableCreateUser(i *int64) *AsUserUpdate {
	if i != nil {
		auu.SetCreateUser(*i)
	}
	return auu
}

// AddCreateUser adds i to the "create_user" field.
func (auu *AsUserUpdate) AddCreateUser(i int64) *AsUserUpdate {
	auu.mutation.AddCreateUser(i)
	return auu
}

// ClearCreateUser clears the value of the "create_user" field.
func (auu *AsUserUpdate) ClearCreateUser() *AsUserUpdate {
	auu.mutation.ClearCreateUser()
	return auu
}

// SetUpdateUser sets the "update_user" field.
func (auu *AsUserUpdate) SetUpdateUser(i int64) *AsUserUpdate {
	auu.mutation.ResetUpdateUser()
	auu.mutation.SetUpdateUser(i)
	return auu
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (auu *AsUserUpdate) SetNillableUpdateUser(i *int64) *AsUserUpdate {
	if i != nil {
		auu.SetUpdateUser(*i)
	}
	return auu
}

// AddUpdateUser adds i to the "update_user" field.
func (auu *AsUserUpdate) AddUpdateUser(i int64) *AsUserUpdate {
	auu.mutation.AddUpdateUser(i)
	return auu
}

// ClearUpdateUser clears the value of the "update_user" field.
func (auu *AsUserUpdate) ClearUpdateUser() *AsUserUpdate {
	auu.mutation.ClearUpdateUser()
	return auu
}

// SetUpdateTime sets the "update_time" field.
func (auu *AsUserUpdate) SetUpdateTime(dt date.DateTime) *AsUserUpdate {
	auu.mutation.SetUpdateTime(dt)
	return auu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (auu *AsUserUpdate) ClearUpdateTime() *AsUserUpdate {
	auu.mutation.ClearUpdateTime()
	return auu
}

// SetPersonID sets the "person" edge to the AsPerson entity by ID.
func (auu *AsUserUpdate) SetPersonID(id int64) *AsUserUpdate {
	auu.mutation.SetPersonID(id)
	return auu
}

// SetNillablePersonID sets the "person" edge to the AsPerson entity by ID if the given value is not nil.
func (auu *AsUserUpdate) SetNillablePersonID(id *int64) *AsUserUpdate {
	if id != nil {
		auu = auu.SetPersonID(*id)
	}
	return auu
}

// SetPerson sets the "person" edge to the AsPerson entity.
func (auu *AsUserUpdate) SetPerson(a *AsPerson) *AsUserUpdate {
	return auu.SetPersonID(a.ID)
}

// AddRoleIDs adds the "roles" edge to the AsRole entity by IDs.
func (auu *AsUserUpdate) AddRoleIDs(ids ...int64) *AsUserUpdate {
	auu.mutation.AddRoleIDs(ids...)
	return auu
}

// AddRoles adds the "roles" edges to the AsRole entity.
func (auu *AsUserUpdate) AddRoles(a ...*AsRole) *AsUserUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auu.AddRoleIDs(ids...)
}

// AddJobIDs adds the "jobs" edge to the AsJob entity by IDs.
func (auu *AsUserUpdate) AddJobIDs(ids ...int64) *AsUserUpdate {
	auu.mutation.AddJobIDs(ids...)
	return auu
}

// AddJobs adds the "jobs" edges to the AsJob entity.
func (auu *AsUserUpdate) AddJobs(a ...*AsJob) *AsUserUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auu.AddJobIDs(ids...)
}

// AddUsedappIDs adds the "usedapps" edge to the AsMarketUsedApp entity by IDs.
func (auu *AsUserUpdate) AddUsedappIDs(ids ...int64) *AsUserUpdate {
	auu.mutation.AddUsedappIDs(ids...)
	return auu
}

// AddUsedapps adds the "usedapps" edges to the AsMarketUsedApp entity.
func (auu *AsUserUpdate) AddUsedapps(a ...*AsMarketUsedApp) *AsUserUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auu.AddUsedappIDs(ids...)
}

// AddWorkingDataIDs adds the "workingDatas" edge to the AsWorkingData entity by IDs.
func (auu *AsUserUpdate) AddWorkingDataIDs(ids ...int64) *AsUserUpdate {
	auu.mutation.AddWorkingDataIDs(ids...)
	return auu
}

// AddWorkingDatas adds the "workingDatas" edges to the AsWorkingData entity.
func (auu *AsUserUpdate) AddWorkingDatas(a ...*AsWorkingData) *AsUserUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auu.AddWorkingDataIDs(ids...)
}

// AddAgencyIDs adds the "agencys" edge to the AsInnerAgency entity by IDs.
func (auu *AsUserUpdate) AddAgencyIDs(ids ...int64) *AsUserUpdate {
	auu.mutation.AddAgencyIDs(ids...)
	return auu
}

// AddAgencys adds the "agencys" edges to the AsInnerAgency entity.
func (auu *AsUserUpdate) AddAgencys(a ...*AsInnerAgency) *AsUserUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auu.AddAgencyIDs(ids...)
}

// AddRoleDistribIDs adds the "roleDistribs" edge to the AsMarketRoleDistribution entity by IDs.
func (auu *AsUserUpdate) AddRoleDistribIDs(ids ...int64) *AsUserUpdate {
	auu.mutation.AddRoleDistribIDs(ids...)
	return auu
}

// AddRoleDistribs adds the "roleDistribs" edges to the AsMarketRoleDistribution entity.
func (auu *AsUserUpdate) AddRoleDistribs(a ...*AsMarketRoleDistribution) *AsUserUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auu.AddRoleDistribIDs(ids...)
}

// AddAppMenusUserSortIDs adds the "appMenusUserSorts" edge to the AsMarketMenuUserSort entity by IDs.
func (auu *AsUserUpdate) AddAppMenusUserSortIDs(ids ...int64) *AsUserUpdate {
	auu.mutation.AddAppMenusUserSortIDs(ids...)
	return auu
}

// AddAppMenusUserSorts adds the "appMenusUserSorts" edges to the AsMarketMenuUserSort entity.
func (auu *AsUserUpdate) AddAppMenusUserSorts(a ...*AsMarketMenuUserSort) *AsUserUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auu.AddAppMenusUserSortIDs(ids...)
}

// AddAppUserTemplateIDs adds the "appUserTemplates" edge to the AsMarketAppUserTemplate entity by IDs.
func (auu *AsUserUpdate) AddAppUserTemplateIDs(ids ...int64) *AsUserUpdate {
	auu.mutation.AddAppUserTemplateIDs(ids...)
	return auu
}

// AddAppUserTemplates adds the "appUserTemplates" edges to the AsMarketAppUserTemplate entity.
func (auu *AsUserUpdate) AddAppUserTemplates(a ...*AsMarketAppUserTemplate) *AsUserUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auu.AddAppUserTemplateIDs(ids...)
}

// Mutation returns the AsUserMutation object of the builder.
func (auu *AsUserUpdate) Mutation() *AsUserMutation {
	return auu.mutation
}

// ClearPerson clears the "person" edge to the AsPerson entity.
func (auu *AsUserUpdate) ClearPerson() *AsUserUpdate {
	auu.mutation.ClearPerson()
	return auu
}

// ClearRoles clears all "roles" edges to the AsRole entity.
func (auu *AsUserUpdate) ClearRoles() *AsUserUpdate {
	auu.mutation.ClearRoles()
	return auu
}

// RemoveRoleIDs removes the "roles" edge to AsRole entities by IDs.
func (auu *AsUserUpdate) RemoveRoleIDs(ids ...int64) *AsUserUpdate {
	auu.mutation.RemoveRoleIDs(ids...)
	return auu
}

// RemoveRoles removes "roles" edges to AsRole entities.
func (auu *AsUserUpdate) RemoveRoles(a ...*AsRole) *AsUserUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auu.RemoveRoleIDs(ids...)
}

// ClearJobs clears all "jobs" edges to the AsJob entity.
func (auu *AsUserUpdate) ClearJobs() *AsUserUpdate {
	auu.mutation.ClearJobs()
	return auu
}

// RemoveJobIDs removes the "jobs" edge to AsJob entities by IDs.
func (auu *AsUserUpdate) RemoveJobIDs(ids ...int64) *AsUserUpdate {
	auu.mutation.RemoveJobIDs(ids...)
	return auu
}

// RemoveJobs removes "jobs" edges to AsJob entities.
func (auu *AsUserUpdate) RemoveJobs(a ...*AsJob) *AsUserUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auu.RemoveJobIDs(ids...)
}

// ClearUsedapps clears all "usedapps" edges to the AsMarketUsedApp entity.
func (auu *AsUserUpdate) ClearUsedapps() *AsUserUpdate {
	auu.mutation.ClearUsedapps()
	return auu
}

// RemoveUsedappIDs removes the "usedapps" edge to AsMarketUsedApp entities by IDs.
func (auu *AsUserUpdate) RemoveUsedappIDs(ids ...int64) *AsUserUpdate {
	auu.mutation.RemoveUsedappIDs(ids...)
	return auu
}

// RemoveUsedapps removes "usedapps" edges to AsMarketUsedApp entities.
func (auu *AsUserUpdate) RemoveUsedapps(a ...*AsMarketUsedApp) *AsUserUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auu.RemoveUsedappIDs(ids...)
}

// ClearWorkingDatas clears all "workingDatas" edges to the AsWorkingData entity.
func (auu *AsUserUpdate) ClearWorkingDatas() *AsUserUpdate {
	auu.mutation.ClearWorkingDatas()
	return auu
}

// RemoveWorkingDataIDs removes the "workingDatas" edge to AsWorkingData entities by IDs.
func (auu *AsUserUpdate) RemoveWorkingDataIDs(ids ...int64) *AsUserUpdate {
	auu.mutation.RemoveWorkingDataIDs(ids...)
	return auu
}

// RemoveWorkingDatas removes "workingDatas" edges to AsWorkingData entities.
func (auu *AsUserUpdate) RemoveWorkingDatas(a ...*AsWorkingData) *AsUserUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auu.RemoveWorkingDataIDs(ids...)
}

// ClearAgencys clears all "agencys" edges to the AsInnerAgency entity.
func (auu *AsUserUpdate) ClearAgencys() *AsUserUpdate {
	auu.mutation.ClearAgencys()
	return auu
}

// RemoveAgencyIDs removes the "agencys" edge to AsInnerAgency entities by IDs.
func (auu *AsUserUpdate) RemoveAgencyIDs(ids ...int64) *AsUserUpdate {
	auu.mutation.RemoveAgencyIDs(ids...)
	return auu
}

// RemoveAgencys removes "agencys" edges to AsInnerAgency entities.
func (auu *AsUserUpdate) RemoveAgencys(a ...*AsInnerAgency) *AsUserUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auu.RemoveAgencyIDs(ids...)
}

// ClearRoleDistribs clears all "roleDistribs" edges to the AsMarketRoleDistribution entity.
func (auu *AsUserUpdate) ClearRoleDistribs() *AsUserUpdate {
	auu.mutation.ClearRoleDistribs()
	return auu
}

// RemoveRoleDistribIDs removes the "roleDistribs" edge to AsMarketRoleDistribution entities by IDs.
func (auu *AsUserUpdate) RemoveRoleDistribIDs(ids ...int64) *AsUserUpdate {
	auu.mutation.RemoveRoleDistribIDs(ids...)
	return auu
}

// RemoveRoleDistribs removes "roleDistribs" edges to AsMarketRoleDistribution entities.
func (auu *AsUserUpdate) RemoveRoleDistribs(a ...*AsMarketRoleDistribution) *AsUserUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auu.RemoveRoleDistribIDs(ids...)
}

// ClearAppMenusUserSorts clears all "appMenusUserSorts" edges to the AsMarketMenuUserSort entity.
func (auu *AsUserUpdate) ClearAppMenusUserSorts() *AsUserUpdate {
	auu.mutation.ClearAppMenusUserSorts()
	return auu
}

// RemoveAppMenusUserSortIDs removes the "appMenusUserSorts" edge to AsMarketMenuUserSort entities by IDs.
func (auu *AsUserUpdate) RemoveAppMenusUserSortIDs(ids ...int64) *AsUserUpdate {
	auu.mutation.RemoveAppMenusUserSortIDs(ids...)
	return auu
}

// RemoveAppMenusUserSorts removes "appMenusUserSorts" edges to AsMarketMenuUserSort entities.
func (auu *AsUserUpdate) RemoveAppMenusUserSorts(a ...*AsMarketMenuUserSort) *AsUserUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auu.RemoveAppMenusUserSortIDs(ids...)
}

// ClearAppUserTemplates clears all "appUserTemplates" edges to the AsMarketAppUserTemplate entity.
func (auu *AsUserUpdate) ClearAppUserTemplates() *AsUserUpdate {
	auu.mutation.ClearAppUserTemplates()
	return auu
}

// RemoveAppUserTemplateIDs removes the "appUserTemplates" edge to AsMarketAppUserTemplate entities by IDs.
func (auu *AsUserUpdate) RemoveAppUserTemplateIDs(ids ...int64) *AsUserUpdate {
	auu.mutation.RemoveAppUserTemplateIDs(ids...)
	return auu
}

// RemoveAppUserTemplates removes "appUserTemplates" edges to AsMarketAppUserTemplate entities.
func (auu *AsUserUpdate) RemoveAppUserTemplates(a ...*AsMarketAppUserTemplate) *AsUserUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auu.RemoveAppUserTemplateIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (auu *AsUserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	auu.defaults()
	if len(auu.hooks) == 0 {
		affected, err = auu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auu.mutation = mutation
			affected, err = auu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(auu.hooks) - 1; i >= 0; i-- {
			if auu.hooks[i] == nil {
				return 0, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = auu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (auu *AsUserUpdate) SaveX(ctx context.Context) int {
	affected, err := auu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (auu *AsUserUpdate) Exec(ctx context.Context) error {
	_, err := auu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auu *AsUserUpdate) ExecX(ctx context.Context) {
	if err := auu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auu *AsUserUpdate) defaults() {
	if _, ok := auu.mutation.UpdateTime(); !ok && !auu.mutation.UpdateTimeCleared() {
		v := asuser.UpdateDefaultUpdateTime()
		auu.mutation.SetUpdateTime(v)
	}
}

func (auu *AsUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asuser.Table,
			Columns: asuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asuser.FieldID,
			},
		},
	}
	if ps := auu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auu.mutation.TenantCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asuser.FieldTenantCode,
		})
	}
	if auu.mutation.TenantCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asuser.FieldTenantCode,
		})
	}
	if value, ok := auu.mutation.Pwd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asuser.FieldPwd,
		})
	}
	if value, ok := auu.mutation.PhoneNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asuser.FieldPhoneNumber,
		})
	}
	if auu.mutation.PhoneNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asuser.FieldPhoneNumber,
		})
	}
	if value, ok := auu.mutation.IsAdmin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asuser.FieldIsAdmin,
		})
	}
	if value, ok := auu.mutation.AddedIsAdmin(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asuser.FieldIsAdmin,
		})
	}
	if value, ok := auu.mutation.TenantApplyingState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asuser.FieldTenantApplyingState,
		})
	}
	if value, ok := auu.mutation.AddedTenantApplyingState(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asuser.FieldTenantApplyingState,
		})
	}
	if value, ok := auu.mutation.IsMaster(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asuser.FieldIsMaster,
		})
	}
	if value, ok := auu.mutation.AddedIsMaster(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asuser.FieldIsMaster,
		})
	}
	if auu.mutation.IsMasterCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asuser.FieldIsMaster,
		})
	}
	if value, ok := auu.mutation.IsCreated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asuser.FieldIsCreated,
		})
	}
	if value, ok := auu.mutation.AddedIsCreated(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asuser.FieldIsCreated,
		})
	}
	if value, ok := auu.mutation.OpenID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asuser.FieldOpenID,
		})
	}
	if auu.mutation.OpenIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asuser.FieldOpenID,
		})
	}
	if value, ok := auu.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asuser.FieldUserName,
		})
	}
	if auu.mutation.UserNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asuser.FieldUserName,
		})
	}
	if value, ok := auu.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asuser.FieldIsDeleted,
		})
	}
	if value, ok := auu.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asuser.FieldIsDeleted,
		})
	}
	if value, ok := auu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asuser.FieldStatus,
		})
	}
	if value, ok := auu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asuser.FieldStatus,
		})
	}
	if auu.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asuser.FieldStatus,
		})
	}
	if value, ok := auu.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asuser.FieldCreateUser,
		})
	}
	if value, ok := auu.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asuser.FieldCreateUser,
		})
	}
	if auu.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asuser.FieldCreateUser,
		})
	}
	if value, ok := auu.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asuser.FieldUpdateUser,
		})
	}
	if value, ok := auu.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asuser.FieldUpdateUser,
		})
	}
	if auu.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asuser.FieldUpdateUser,
		})
	}
	if auu.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asuser.FieldCreateTime,
		})
	}
	if value, ok := auu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asuser.FieldUpdateTime,
		})
	}
	if auu.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asuser.FieldUpdateTime,
		})
	}
	if auu.mutation.PersonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   asuser.PersonTable,
			Columns: []string{asuser.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asperson.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.PersonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   asuser.PersonTable,
			Columns: []string{asuser.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asperson.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asuser.RolesTable,
			Columns: asuser.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asrole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.RemovedRolesIDs(); len(nodes) > 0 && !auu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asuser.RolesTable,
			Columns: asuser.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asuser.RolesTable,
			Columns: asuser.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auu.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asuser.JobsTable,
			Columns: asuser.JobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asjob.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.RemovedJobsIDs(); len(nodes) > 0 && !auu.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asuser.JobsTable,
			Columns: asuser.JobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asjob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.JobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asuser.JobsTable,
			Columns: asuser.JobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asjob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auu.mutation.UsedappsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asuser.UsedappsTable,
			Columns: []string{asuser.UsedappsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketusedapp.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.RemovedUsedappsIDs(); len(nodes) > 0 && !auu.mutation.UsedappsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asuser.UsedappsTable,
			Columns: []string{asuser.UsedappsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketusedapp.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.UsedappsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asuser.UsedappsTable,
			Columns: []string{asuser.UsedappsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketusedapp.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auu.mutation.WorkingDatasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asuser.WorkingDatasTable,
			Columns: []string{asuser.WorkingDatasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asworkingdata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.RemovedWorkingDatasIDs(); len(nodes) > 0 && !auu.mutation.WorkingDatasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asuser.WorkingDatasTable,
			Columns: []string{asuser.WorkingDatasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asworkingdata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.WorkingDatasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asuser.WorkingDatasTable,
			Columns: []string{asuser.WorkingDatasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asworkingdata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auu.mutation.AgencysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asuser.AgencysTable,
			Columns: asuser.AgencysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asinneragency.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.RemovedAgencysIDs(); len(nodes) > 0 && !auu.mutation.AgencysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asuser.AgencysTable,
			Columns: asuser.AgencysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asinneragency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.AgencysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asuser.AgencysTable,
			Columns: asuser.AgencysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asinneragency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auu.mutation.RoleDistribsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asuser.RoleDistribsTable,
			Columns: []string{asuser.RoleDistribsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketroledistribution.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.RemovedRoleDistribsIDs(); len(nodes) > 0 && !auu.mutation.RoleDistribsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asuser.RoleDistribsTable,
			Columns: []string{asuser.RoleDistribsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketroledistribution.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.RoleDistribsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asuser.RoleDistribsTable,
			Columns: []string{asuser.RoleDistribsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketroledistribution.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auu.mutation.AppMenusUserSortsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asuser.AppMenusUserSortsTable,
			Columns: []string{asuser.AppMenusUserSortsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketmenuusersort.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.RemovedAppMenusUserSortsIDs(); len(nodes) > 0 && !auu.mutation.AppMenusUserSortsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asuser.AppMenusUserSortsTable,
			Columns: []string{asuser.AppMenusUserSortsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketmenuusersort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.AppMenusUserSortsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asuser.AppMenusUserSortsTable,
			Columns: []string{asuser.AppMenusUserSortsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketmenuusersort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auu.mutation.AppUserTemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asuser.AppUserTemplatesTable,
			Columns: []string{asuser.AppUserTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappusertemplate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.RemovedAppUserTemplatesIDs(); len(nodes) > 0 && !auu.mutation.AppUserTemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asuser.AppUserTemplatesTable,
			Columns: []string{asuser.AppUserTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappusertemplate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.AppUserTemplatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asuser.AppUserTemplatesTable,
			Columns: []string{asuser.AppUserTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappusertemplate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, auu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AsUserUpdateOne is the builder for updating a single AsUser entity.
type AsUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AsUserMutation
}

// SetTenantCode sets the "tenant_code" field.
func (auuo *AsUserUpdateOne) SetTenantCode(s string) *AsUserUpdateOne {
	auuo.mutation.SetTenantCode(s)
	return auuo
}

// SetNillableTenantCode sets the "tenant_code" field if the given value is not nil.
func (auuo *AsUserUpdateOne) SetNillableTenantCode(s *string) *AsUserUpdateOne {
	if s != nil {
		auuo.SetTenantCode(*s)
	}
	return auuo
}

// ClearTenantCode clears the value of the "tenant_code" field.
func (auuo *AsUserUpdateOne) ClearTenantCode() *AsUserUpdateOne {
	auuo.mutation.ClearTenantCode()
	return auuo
}

// SetPwd sets the "pwd" field.
func (auuo *AsUserUpdateOne) SetPwd(s string) *AsUserUpdateOne {
	auuo.mutation.SetPwd(s)
	return auuo
}

// SetPhoneNumber sets the "phone_number" field.
func (auuo *AsUserUpdateOne) SetPhoneNumber(s string) *AsUserUpdateOne {
	auuo.mutation.SetPhoneNumber(s)
	return auuo
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (auuo *AsUserUpdateOne) SetNillablePhoneNumber(s *string) *AsUserUpdateOne {
	if s != nil {
		auuo.SetPhoneNumber(*s)
	}
	return auuo
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (auuo *AsUserUpdateOne) ClearPhoneNumber() *AsUserUpdateOne {
	auuo.mutation.ClearPhoneNumber()
	return auuo
}

// SetIsAdmin sets the "is_admin" field.
func (auuo *AsUserUpdateOne) SetIsAdmin(i int64) *AsUserUpdateOne {
	auuo.mutation.ResetIsAdmin()
	auuo.mutation.SetIsAdmin(i)
	return auuo
}

// SetNillableIsAdmin sets the "is_admin" field if the given value is not nil.
func (auuo *AsUserUpdateOne) SetNillableIsAdmin(i *int64) *AsUserUpdateOne {
	if i != nil {
		auuo.SetIsAdmin(*i)
	}
	return auuo
}

// AddIsAdmin adds i to the "is_admin" field.
func (auuo *AsUserUpdateOne) AddIsAdmin(i int64) *AsUserUpdateOne {
	auuo.mutation.AddIsAdmin(i)
	return auuo
}

// SetTenantApplyingState sets the "tenant_applying_state" field.
func (auuo *AsUserUpdateOne) SetTenantApplyingState(i int64) *AsUserUpdateOne {
	auuo.mutation.ResetTenantApplyingState()
	auuo.mutation.SetTenantApplyingState(i)
	return auuo
}

// SetNillableTenantApplyingState sets the "tenant_applying_state" field if the given value is not nil.
func (auuo *AsUserUpdateOne) SetNillableTenantApplyingState(i *int64) *AsUserUpdateOne {
	if i != nil {
		auuo.SetTenantApplyingState(*i)
	}
	return auuo
}

// AddTenantApplyingState adds i to the "tenant_applying_state" field.
func (auuo *AsUserUpdateOne) AddTenantApplyingState(i int64) *AsUserUpdateOne {
	auuo.mutation.AddTenantApplyingState(i)
	return auuo
}

// SetIsMaster sets the "is_master" field.
func (auuo *AsUserUpdateOne) SetIsMaster(i int64) *AsUserUpdateOne {
	auuo.mutation.ResetIsMaster()
	auuo.mutation.SetIsMaster(i)
	return auuo
}

// SetNillableIsMaster sets the "is_master" field if the given value is not nil.
func (auuo *AsUserUpdateOne) SetNillableIsMaster(i *int64) *AsUserUpdateOne {
	if i != nil {
		auuo.SetIsMaster(*i)
	}
	return auuo
}

// AddIsMaster adds i to the "is_master" field.
func (auuo *AsUserUpdateOne) AddIsMaster(i int64) *AsUserUpdateOne {
	auuo.mutation.AddIsMaster(i)
	return auuo
}

// ClearIsMaster clears the value of the "is_master" field.
func (auuo *AsUserUpdateOne) ClearIsMaster() *AsUserUpdateOne {
	auuo.mutation.ClearIsMaster()
	return auuo
}

// SetIsCreated sets the "is_created" field.
func (auuo *AsUserUpdateOne) SetIsCreated(i int64) *AsUserUpdateOne {
	auuo.mutation.ResetIsCreated()
	auuo.mutation.SetIsCreated(i)
	return auuo
}

// SetNillableIsCreated sets the "is_created" field if the given value is not nil.
func (auuo *AsUserUpdateOne) SetNillableIsCreated(i *int64) *AsUserUpdateOne {
	if i != nil {
		auuo.SetIsCreated(*i)
	}
	return auuo
}

// AddIsCreated adds i to the "is_created" field.
func (auuo *AsUserUpdateOne) AddIsCreated(i int64) *AsUserUpdateOne {
	auuo.mutation.AddIsCreated(i)
	return auuo
}

// SetOpenID sets the "open_id" field.
func (auuo *AsUserUpdateOne) SetOpenID(s string) *AsUserUpdateOne {
	auuo.mutation.SetOpenID(s)
	return auuo
}

// SetNillableOpenID sets the "open_id" field if the given value is not nil.
func (auuo *AsUserUpdateOne) SetNillableOpenID(s *string) *AsUserUpdateOne {
	if s != nil {
		auuo.SetOpenID(*s)
	}
	return auuo
}

// ClearOpenID clears the value of the "open_id" field.
func (auuo *AsUserUpdateOne) ClearOpenID() *AsUserUpdateOne {
	auuo.mutation.ClearOpenID()
	return auuo
}

// SetUserName sets the "user_name" field.
func (auuo *AsUserUpdateOne) SetUserName(s string) *AsUserUpdateOne {
	auuo.mutation.SetUserName(s)
	return auuo
}

// SetNillableUserName sets the "user_name" field if the given value is not nil.
func (auuo *AsUserUpdateOne) SetNillableUserName(s *string) *AsUserUpdateOne {
	if s != nil {
		auuo.SetUserName(*s)
	}
	return auuo
}

// ClearUserName clears the value of the "user_name" field.
func (auuo *AsUserUpdateOne) ClearUserName() *AsUserUpdateOne {
	auuo.mutation.ClearUserName()
	return auuo
}

// SetIsDeleted sets the "is_deleted" field.
func (auuo *AsUserUpdateOne) SetIsDeleted(i int64) *AsUserUpdateOne {
	auuo.mutation.ResetIsDeleted()
	auuo.mutation.SetIsDeleted(i)
	return auuo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (auuo *AsUserUpdateOne) SetNillableIsDeleted(i *int64) *AsUserUpdateOne {
	if i != nil {
		auuo.SetIsDeleted(*i)
	}
	return auuo
}

// AddIsDeleted adds i to the "is_deleted" field.
func (auuo *AsUserUpdateOne) AddIsDeleted(i int64) *AsUserUpdateOne {
	auuo.mutation.AddIsDeleted(i)
	return auuo
}

// SetStatus sets the "status" field.
func (auuo *AsUserUpdateOne) SetStatus(i int64) *AsUserUpdateOne {
	auuo.mutation.ResetStatus()
	auuo.mutation.SetStatus(i)
	return auuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (auuo *AsUserUpdateOne) SetNillableStatus(i *int64) *AsUserUpdateOne {
	if i != nil {
		auuo.SetStatus(*i)
	}
	return auuo
}

// AddStatus adds i to the "status" field.
func (auuo *AsUserUpdateOne) AddStatus(i int64) *AsUserUpdateOne {
	auuo.mutation.AddStatus(i)
	return auuo
}

// ClearStatus clears the value of the "status" field.
func (auuo *AsUserUpdateOne) ClearStatus() *AsUserUpdateOne {
	auuo.mutation.ClearStatus()
	return auuo
}

// SetCreateUser sets the "create_user" field.
func (auuo *AsUserUpdateOne) SetCreateUser(i int64) *AsUserUpdateOne {
	auuo.mutation.ResetCreateUser()
	auuo.mutation.SetCreateUser(i)
	return auuo
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (auuo *AsUserUpdateOne) SetNillableCreateUser(i *int64) *AsUserUpdateOne {
	if i != nil {
		auuo.SetCreateUser(*i)
	}
	return auuo
}

// AddCreateUser adds i to the "create_user" field.
func (auuo *AsUserUpdateOne) AddCreateUser(i int64) *AsUserUpdateOne {
	auuo.mutation.AddCreateUser(i)
	return auuo
}

// ClearCreateUser clears the value of the "create_user" field.
func (auuo *AsUserUpdateOne) ClearCreateUser() *AsUserUpdateOne {
	auuo.mutation.ClearCreateUser()
	return auuo
}

// SetUpdateUser sets the "update_user" field.
func (auuo *AsUserUpdateOne) SetUpdateUser(i int64) *AsUserUpdateOne {
	auuo.mutation.ResetUpdateUser()
	auuo.mutation.SetUpdateUser(i)
	return auuo
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (auuo *AsUserUpdateOne) SetNillableUpdateUser(i *int64) *AsUserUpdateOne {
	if i != nil {
		auuo.SetUpdateUser(*i)
	}
	return auuo
}

// AddUpdateUser adds i to the "update_user" field.
func (auuo *AsUserUpdateOne) AddUpdateUser(i int64) *AsUserUpdateOne {
	auuo.mutation.AddUpdateUser(i)
	return auuo
}

// ClearUpdateUser clears the value of the "update_user" field.
func (auuo *AsUserUpdateOne) ClearUpdateUser() *AsUserUpdateOne {
	auuo.mutation.ClearUpdateUser()
	return auuo
}

// SetUpdateTime sets the "update_time" field.
func (auuo *AsUserUpdateOne) SetUpdateTime(dt date.DateTime) *AsUserUpdateOne {
	auuo.mutation.SetUpdateTime(dt)
	return auuo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (auuo *AsUserUpdateOne) ClearUpdateTime() *AsUserUpdateOne {
	auuo.mutation.ClearUpdateTime()
	return auuo
}

// SetPersonID sets the "person" edge to the AsPerson entity by ID.
func (auuo *AsUserUpdateOne) SetPersonID(id int64) *AsUserUpdateOne {
	auuo.mutation.SetPersonID(id)
	return auuo
}

// SetNillablePersonID sets the "person" edge to the AsPerson entity by ID if the given value is not nil.
func (auuo *AsUserUpdateOne) SetNillablePersonID(id *int64) *AsUserUpdateOne {
	if id != nil {
		auuo = auuo.SetPersonID(*id)
	}
	return auuo
}

// SetPerson sets the "person" edge to the AsPerson entity.
func (auuo *AsUserUpdateOne) SetPerson(a *AsPerson) *AsUserUpdateOne {
	return auuo.SetPersonID(a.ID)
}

// AddRoleIDs adds the "roles" edge to the AsRole entity by IDs.
func (auuo *AsUserUpdateOne) AddRoleIDs(ids ...int64) *AsUserUpdateOne {
	auuo.mutation.AddRoleIDs(ids...)
	return auuo
}

// AddRoles adds the "roles" edges to the AsRole entity.
func (auuo *AsUserUpdateOne) AddRoles(a ...*AsRole) *AsUserUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auuo.AddRoleIDs(ids...)
}

// AddJobIDs adds the "jobs" edge to the AsJob entity by IDs.
func (auuo *AsUserUpdateOne) AddJobIDs(ids ...int64) *AsUserUpdateOne {
	auuo.mutation.AddJobIDs(ids...)
	return auuo
}

// AddJobs adds the "jobs" edges to the AsJob entity.
func (auuo *AsUserUpdateOne) AddJobs(a ...*AsJob) *AsUserUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auuo.AddJobIDs(ids...)
}

// AddUsedappIDs adds the "usedapps" edge to the AsMarketUsedApp entity by IDs.
func (auuo *AsUserUpdateOne) AddUsedappIDs(ids ...int64) *AsUserUpdateOne {
	auuo.mutation.AddUsedappIDs(ids...)
	return auuo
}

// AddUsedapps adds the "usedapps" edges to the AsMarketUsedApp entity.
func (auuo *AsUserUpdateOne) AddUsedapps(a ...*AsMarketUsedApp) *AsUserUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auuo.AddUsedappIDs(ids...)
}

// AddWorkingDataIDs adds the "workingDatas" edge to the AsWorkingData entity by IDs.
func (auuo *AsUserUpdateOne) AddWorkingDataIDs(ids ...int64) *AsUserUpdateOne {
	auuo.mutation.AddWorkingDataIDs(ids...)
	return auuo
}

// AddWorkingDatas adds the "workingDatas" edges to the AsWorkingData entity.
func (auuo *AsUserUpdateOne) AddWorkingDatas(a ...*AsWorkingData) *AsUserUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auuo.AddWorkingDataIDs(ids...)
}

// AddAgencyIDs adds the "agencys" edge to the AsInnerAgency entity by IDs.
func (auuo *AsUserUpdateOne) AddAgencyIDs(ids ...int64) *AsUserUpdateOne {
	auuo.mutation.AddAgencyIDs(ids...)
	return auuo
}

// AddAgencys adds the "agencys" edges to the AsInnerAgency entity.
func (auuo *AsUserUpdateOne) AddAgencys(a ...*AsInnerAgency) *AsUserUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auuo.AddAgencyIDs(ids...)
}

// AddRoleDistribIDs adds the "roleDistribs" edge to the AsMarketRoleDistribution entity by IDs.
func (auuo *AsUserUpdateOne) AddRoleDistribIDs(ids ...int64) *AsUserUpdateOne {
	auuo.mutation.AddRoleDistribIDs(ids...)
	return auuo
}

// AddRoleDistribs adds the "roleDistribs" edges to the AsMarketRoleDistribution entity.
func (auuo *AsUserUpdateOne) AddRoleDistribs(a ...*AsMarketRoleDistribution) *AsUserUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auuo.AddRoleDistribIDs(ids...)
}

// AddAppMenusUserSortIDs adds the "appMenusUserSorts" edge to the AsMarketMenuUserSort entity by IDs.
func (auuo *AsUserUpdateOne) AddAppMenusUserSortIDs(ids ...int64) *AsUserUpdateOne {
	auuo.mutation.AddAppMenusUserSortIDs(ids...)
	return auuo
}

// AddAppMenusUserSorts adds the "appMenusUserSorts" edges to the AsMarketMenuUserSort entity.
func (auuo *AsUserUpdateOne) AddAppMenusUserSorts(a ...*AsMarketMenuUserSort) *AsUserUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auuo.AddAppMenusUserSortIDs(ids...)
}

// AddAppUserTemplateIDs adds the "appUserTemplates" edge to the AsMarketAppUserTemplate entity by IDs.
func (auuo *AsUserUpdateOne) AddAppUserTemplateIDs(ids ...int64) *AsUserUpdateOne {
	auuo.mutation.AddAppUserTemplateIDs(ids...)
	return auuo
}

// AddAppUserTemplates adds the "appUserTemplates" edges to the AsMarketAppUserTemplate entity.
func (auuo *AsUserUpdateOne) AddAppUserTemplates(a ...*AsMarketAppUserTemplate) *AsUserUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auuo.AddAppUserTemplateIDs(ids...)
}

// Mutation returns the AsUserMutation object of the builder.
func (auuo *AsUserUpdateOne) Mutation() *AsUserMutation {
	return auuo.mutation
}

// ClearPerson clears the "person" edge to the AsPerson entity.
func (auuo *AsUserUpdateOne) ClearPerson() *AsUserUpdateOne {
	auuo.mutation.ClearPerson()
	return auuo
}

// ClearRoles clears all "roles" edges to the AsRole entity.
func (auuo *AsUserUpdateOne) ClearRoles() *AsUserUpdateOne {
	auuo.mutation.ClearRoles()
	return auuo
}

// RemoveRoleIDs removes the "roles" edge to AsRole entities by IDs.
func (auuo *AsUserUpdateOne) RemoveRoleIDs(ids ...int64) *AsUserUpdateOne {
	auuo.mutation.RemoveRoleIDs(ids...)
	return auuo
}

// RemoveRoles removes "roles" edges to AsRole entities.
func (auuo *AsUserUpdateOne) RemoveRoles(a ...*AsRole) *AsUserUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auuo.RemoveRoleIDs(ids...)
}

// ClearJobs clears all "jobs" edges to the AsJob entity.
func (auuo *AsUserUpdateOne) ClearJobs() *AsUserUpdateOne {
	auuo.mutation.ClearJobs()
	return auuo
}

// RemoveJobIDs removes the "jobs" edge to AsJob entities by IDs.
func (auuo *AsUserUpdateOne) RemoveJobIDs(ids ...int64) *AsUserUpdateOne {
	auuo.mutation.RemoveJobIDs(ids...)
	return auuo
}

// RemoveJobs removes "jobs" edges to AsJob entities.
func (auuo *AsUserUpdateOne) RemoveJobs(a ...*AsJob) *AsUserUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auuo.RemoveJobIDs(ids...)
}

// ClearUsedapps clears all "usedapps" edges to the AsMarketUsedApp entity.
func (auuo *AsUserUpdateOne) ClearUsedapps() *AsUserUpdateOne {
	auuo.mutation.ClearUsedapps()
	return auuo
}

// RemoveUsedappIDs removes the "usedapps" edge to AsMarketUsedApp entities by IDs.
func (auuo *AsUserUpdateOne) RemoveUsedappIDs(ids ...int64) *AsUserUpdateOne {
	auuo.mutation.RemoveUsedappIDs(ids...)
	return auuo
}

// RemoveUsedapps removes "usedapps" edges to AsMarketUsedApp entities.
func (auuo *AsUserUpdateOne) RemoveUsedapps(a ...*AsMarketUsedApp) *AsUserUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auuo.RemoveUsedappIDs(ids...)
}

// ClearWorkingDatas clears all "workingDatas" edges to the AsWorkingData entity.
func (auuo *AsUserUpdateOne) ClearWorkingDatas() *AsUserUpdateOne {
	auuo.mutation.ClearWorkingDatas()
	return auuo
}

// RemoveWorkingDataIDs removes the "workingDatas" edge to AsWorkingData entities by IDs.
func (auuo *AsUserUpdateOne) RemoveWorkingDataIDs(ids ...int64) *AsUserUpdateOne {
	auuo.mutation.RemoveWorkingDataIDs(ids...)
	return auuo
}

// RemoveWorkingDatas removes "workingDatas" edges to AsWorkingData entities.
func (auuo *AsUserUpdateOne) RemoveWorkingDatas(a ...*AsWorkingData) *AsUserUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auuo.RemoveWorkingDataIDs(ids...)
}

// ClearAgencys clears all "agencys" edges to the AsInnerAgency entity.
func (auuo *AsUserUpdateOne) ClearAgencys() *AsUserUpdateOne {
	auuo.mutation.ClearAgencys()
	return auuo
}

// RemoveAgencyIDs removes the "agencys" edge to AsInnerAgency entities by IDs.
func (auuo *AsUserUpdateOne) RemoveAgencyIDs(ids ...int64) *AsUserUpdateOne {
	auuo.mutation.RemoveAgencyIDs(ids...)
	return auuo
}

// RemoveAgencys removes "agencys" edges to AsInnerAgency entities.
func (auuo *AsUserUpdateOne) RemoveAgencys(a ...*AsInnerAgency) *AsUserUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auuo.RemoveAgencyIDs(ids...)
}

// ClearRoleDistribs clears all "roleDistribs" edges to the AsMarketRoleDistribution entity.
func (auuo *AsUserUpdateOne) ClearRoleDistribs() *AsUserUpdateOne {
	auuo.mutation.ClearRoleDistribs()
	return auuo
}

// RemoveRoleDistribIDs removes the "roleDistribs" edge to AsMarketRoleDistribution entities by IDs.
func (auuo *AsUserUpdateOne) RemoveRoleDistribIDs(ids ...int64) *AsUserUpdateOne {
	auuo.mutation.RemoveRoleDistribIDs(ids...)
	return auuo
}

// RemoveRoleDistribs removes "roleDistribs" edges to AsMarketRoleDistribution entities.
func (auuo *AsUserUpdateOne) RemoveRoleDistribs(a ...*AsMarketRoleDistribution) *AsUserUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auuo.RemoveRoleDistribIDs(ids...)
}

// ClearAppMenusUserSorts clears all "appMenusUserSorts" edges to the AsMarketMenuUserSort entity.
func (auuo *AsUserUpdateOne) ClearAppMenusUserSorts() *AsUserUpdateOne {
	auuo.mutation.ClearAppMenusUserSorts()
	return auuo
}

// RemoveAppMenusUserSortIDs removes the "appMenusUserSorts" edge to AsMarketMenuUserSort entities by IDs.
func (auuo *AsUserUpdateOne) RemoveAppMenusUserSortIDs(ids ...int64) *AsUserUpdateOne {
	auuo.mutation.RemoveAppMenusUserSortIDs(ids...)
	return auuo
}

// RemoveAppMenusUserSorts removes "appMenusUserSorts" edges to AsMarketMenuUserSort entities.
func (auuo *AsUserUpdateOne) RemoveAppMenusUserSorts(a ...*AsMarketMenuUserSort) *AsUserUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auuo.RemoveAppMenusUserSortIDs(ids...)
}

// ClearAppUserTemplates clears all "appUserTemplates" edges to the AsMarketAppUserTemplate entity.
func (auuo *AsUserUpdateOne) ClearAppUserTemplates() *AsUserUpdateOne {
	auuo.mutation.ClearAppUserTemplates()
	return auuo
}

// RemoveAppUserTemplateIDs removes the "appUserTemplates" edge to AsMarketAppUserTemplate entities by IDs.
func (auuo *AsUserUpdateOne) RemoveAppUserTemplateIDs(ids ...int64) *AsUserUpdateOne {
	auuo.mutation.RemoveAppUserTemplateIDs(ids...)
	return auuo
}

// RemoveAppUserTemplates removes "appUserTemplates" edges to AsMarketAppUserTemplate entities.
func (auuo *AsUserUpdateOne) RemoveAppUserTemplates(a ...*AsMarketAppUserTemplate) *AsUserUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auuo.RemoveAppUserTemplateIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auuo *AsUserUpdateOne) Select(field string, fields ...string) *AsUserUpdateOne {
	auuo.fields = append([]string{field}, fields...)
	return auuo
}

// Save executes the query and returns the updated AsUser entity.
func (auuo *AsUserUpdateOne) Save(ctx context.Context) (*AsUser, error) {
	var (
		err  error
		node *AsUser
	)
	auuo.defaults()
	if len(auuo.hooks) == 0 {
		node, err = auuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auuo.mutation = mutation
			node, err = auuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auuo.hooks) - 1; i >= 0; i-- {
			if auuo.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = auuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auuo *AsUserUpdateOne) SaveX(ctx context.Context) *AsUser {
	node, err := auuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auuo *AsUserUpdateOne) Exec(ctx context.Context) error {
	_, err := auuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auuo *AsUserUpdateOne) ExecX(ctx context.Context) {
	if err := auuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auuo *AsUserUpdateOne) defaults() {
	if _, ok := auuo.mutation.UpdateTime(); !ok && !auuo.mutation.UpdateTimeCleared() {
		v := asuser.UpdateDefaultUpdateTime()
		auuo.mutation.SetUpdateTime(v)
	}
}

func (auuo *AsUserUpdateOne) sqlSave(ctx context.Context) (_node *AsUser, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asuser.Table,
			Columns: asuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asuser.FieldID,
			},
		},
	}
	id, ok := auuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`schema: missing "AsUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asuser.FieldID)
		for _, f := range fields {
			if !asuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("schema: invalid field %q for query", f)}
			}
			if f != asuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auuo.mutation.TenantCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asuser.FieldTenantCode,
		})
	}
	if auuo.mutation.TenantCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asuser.FieldTenantCode,
		})
	}
	if value, ok := auuo.mutation.Pwd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asuser.FieldPwd,
		})
	}
	if value, ok := auuo.mutation.PhoneNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asuser.FieldPhoneNumber,
		})
	}
	if auuo.mutation.PhoneNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asuser.FieldPhoneNumber,
		})
	}
	if value, ok := auuo.mutation.IsAdmin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asuser.FieldIsAdmin,
		})
	}
	if value, ok := auuo.mutation.AddedIsAdmin(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asuser.FieldIsAdmin,
		})
	}
	if value, ok := auuo.mutation.TenantApplyingState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asuser.FieldTenantApplyingState,
		})
	}
	if value, ok := auuo.mutation.AddedTenantApplyingState(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asuser.FieldTenantApplyingState,
		})
	}
	if value, ok := auuo.mutation.IsMaster(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asuser.FieldIsMaster,
		})
	}
	if value, ok := auuo.mutation.AddedIsMaster(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asuser.FieldIsMaster,
		})
	}
	if auuo.mutation.IsMasterCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asuser.FieldIsMaster,
		})
	}
	if value, ok := auuo.mutation.IsCreated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asuser.FieldIsCreated,
		})
	}
	if value, ok := auuo.mutation.AddedIsCreated(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asuser.FieldIsCreated,
		})
	}
	if value, ok := auuo.mutation.OpenID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asuser.FieldOpenID,
		})
	}
	if auuo.mutation.OpenIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asuser.FieldOpenID,
		})
	}
	if value, ok := auuo.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asuser.FieldUserName,
		})
	}
	if auuo.mutation.UserNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asuser.FieldUserName,
		})
	}
	if value, ok := auuo.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asuser.FieldIsDeleted,
		})
	}
	if value, ok := auuo.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asuser.FieldIsDeleted,
		})
	}
	if value, ok := auuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asuser.FieldStatus,
		})
	}
	if value, ok := auuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asuser.FieldStatus,
		})
	}
	if auuo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asuser.FieldStatus,
		})
	}
	if value, ok := auuo.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asuser.FieldCreateUser,
		})
	}
	if value, ok := auuo.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asuser.FieldCreateUser,
		})
	}
	if auuo.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asuser.FieldCreateUser,
		})
	}
	if value, ok := auuo.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asuser.FieldUpdateUser,
		})
	}
	if value, ok := auuo.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asuser.FieldUpdateUser,
		})
	}
	if auuo.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asuser.FieldUpdateUser,
		})
	}
	if auuo.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asuser.FieldCreateTime,
		})
	}
	if value, ok := auuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asuser.FieldUpdateTime,
		})
	}
	if auuo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asuser.FieldUpdateTime,
		})
	}
	if auuo.mutation.PersonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   asuser.PersonTable,
			Columns: []string{asuser.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asperson.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.PersonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   asuser.PersonTable,
			Columns: []string{asuser.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asperson.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auuo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asuser.RolesTable,
			Columns: asuser.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asrole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.RemovedRolesIDs(); len(nodes) > 0 && !auuo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asuser.RolesTable,
			Columns: asuser.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asuser.RolesTable,
			Columns: asuser.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auuo.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asuser.JobsTable,
			Columns: asuser.JobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asjob.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.RemovedJobsIDs(); len(nodes) > 0 && !auuo.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asuser.JobsTable,
			Columns: asuser.JobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asjob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.JobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asuser.JobsTable,
			Columns: asuser.JobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asjob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auuo.mutation.UsedappsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asuser.UsedappsTable,
			Columns: []string{asuser.UsedappsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketusedapp.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.RemovedUsedappsIDs(); len(nodes) > 0 && !auuo.mutation.UsedappsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asuser.UsedappsTable,
			Columns: []string{asuser.UsedappsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketusedapp.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.UsedappsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asuser.UsedappsTable,
			Columns: []string{asuser.UsedappsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketusedapp.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auuo.mutation.WorkingDatasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asuser.WorkingDatasTable,
			Columns: []string{asuser.WorkingDatasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asworkingdata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.RemovedWorkingDatasIDs(); len(nodes) > 0 && !auuo.mutation.WorkingDatasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asuser.WorkingDatasTable,
			Columns: []string{asuser.WorkingDatasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asworkingdata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.WorkingDatasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asuser.WorkingDatasTable,
			Columns: []string{asuser.WorkingDatasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asworkingdata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auuo.mutation.AgencysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asuser.AgencysTable,
			Columns: asuser.AgencysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asinneragency.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.RemovedAgencysIDs(); len(nodes) > 0 && !auuo.mutation.AgencysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asuser.AgencysTable,
			Columns: asuser.AgencysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asinneragency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.AgencysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asuser.AgencysTable,
			Columns: asuser.AgencysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asinneragency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auuo.mutation.RoleDistribsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asuser.RoleDistribsTable,
			Columns: []string{asuser.RoleDistribsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketroledistribution.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.RemovedRoleDistribsIDs(); len(nodes) > 0 && !auuo.mutation.RoleDistribsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asuser.RoleDistribsTable,
			Columns: []string{asuser.RoleDistribsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketroledistribution.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.RoleDistribsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asuser.RoleDistribsTable,
			Columns: []string{asuser.RoleDistribsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketroledistribution.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auuo.mutation.AppMenusUserSortsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asuser.AppMenusUserSortsTable,
			Columns: []string{asuser.AppMenusUserSortsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketmenuusersort.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.RemovedAppMenusUserSortsIDs(); len(nodes) > 0 && !auuo.mutation.AppMenusUserSortsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asuser.AppMenusUserSortsTable,
			Columns: []string{asuser.AppMenusUserSortsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketmenuusersort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.AppMenusUserSortsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asuser.AppMenusUserSortsTable,
			Columns: []string{asuser.AppMenusUserSortsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketmenuusersort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auuo.mutation.AppUserTemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asuser.AppUserTemplatesTable,
			Columns: []string{asuser.AppUserTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappusertemplate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.RemovedAppUserTemplatesIDs(); len(nodes) > 0 && !auuo.mutation.AppUserTemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asuser.AppUserTemplatesTable,
			Columns: []string{asuser.AppUserTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappusertemplate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.AppUserTemplatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asuser.AppUserTemplatesTable,
			Columns: []string{asuser.AppUserTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappusertemplate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AsUser{config: auuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
