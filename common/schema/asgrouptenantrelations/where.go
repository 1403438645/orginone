// Code generated by entc, DO NOT EDIT.

package asgrouptenantrelations

import (
	"orginone/common/schema/predicate"
	"orginone/common/tools/date"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ParentID applies equality check predicate on the "parent_id" field. It's identical to ParentIDEQ.
func ParentID(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParentID), v))
	})
}

// SonID applies equality check predicate on the "son_id" field. It's identical to SonIDEQ.
func SonID(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSonID), v))
	})
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// Sort applies equality check predicate on the "sort" field. It's identical to SortEQ.
func Sort(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSort), v))
	})
}

// Serial applies equality check predicate on the "serial" field. It's identical to SerialEQ.
func Serial(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSerial), v))
	})
}

// GroupCode applies equality check predicate on the "group_code" field. It's identical to GroupCodeEQ.
func GroupCode(v string) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGroupCode), v))
	})
}

// ExpiresTime applies equality check predicate on the "expires_time" field. It's identical to ExpiresTimeEQ.
func ExpiresTime(v date.DateTime) predicate.AsGroupTenantRelations {
	vc := time.Time(v)
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpiresTime), vc))
	})
}

// IsHide applies equality check predicate on the "is_hide" field. It's identical to IsHideEQ.
func IsHide(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsHide), v))
	})
}

// IsDeleted applies equality check predicate on the "is_deleted" field. It's identical to IsDeletedEQ.
func IsDeleted(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDeleted), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// CreateUser applies equality check predicate on the "create_user" field. It's identical to CreateUserEQ.
func CreateUser(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateUser), v))
	})
}

// UpdateUser applies equality check predicate on the "update_user" field. It's identical to UpdateUserEQ.
func UpdateUser(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateUser), v))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v date.DateTime) predicate.AsGroupTenantRelations {
	vc := time.Time(v)
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), vc))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v date.DateTime) predicate.AsGroupTenantRelations {
	vc := time.Time(v)
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), vc))
	})
}

// ParentIDEQ applies the EQ predicate on the "parent_id" field.
func ParentIDEQ(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParentID), v))
	})
}

// ParentIDNEQ applies the NEQ predicate on the "parent_id" field.
func ParentIDNEQ(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldParentID), v))
	})
}

// ParentIDIn applies the In predicate on the "parent_id" field.
func ParentIDIn(vs ...int64) predicate.AsGroupTenantRelations {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldParentID), v...))
	})
}

// ParentIDNotIn applies the NotIn predicate on the "parent_id" field.
func ParentIDNotIn(vs ...int64) predicate.AsGroupTenantRelations {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldParentID), v...))
	})
}

// ParentIDIsNil applies the IsNil predicate on the "parent_id" field.
func ParentIDIsNil() predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldParentID)))
	})
}

// ParentIDNotNil applies the NotNil predicate on the "parent_id" field.
func ParentIDNotNil() predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldParentID)))
	})
}

// SonIDEQ applies the EQ predicate on the "son_id" field.
func SonIDEQ(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSonID), v))
	})
}

// SonIDNEQ applies the NEQ predicate on the "son_id" field.
func SonIDNEQ(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSonID), v))
	})
}

// SonIDIn applies the In predicate on the "son_id" field.
func SonIDIn(vs ...int64) predicate.AsGroupTenantRelations {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSonID), v...))
	})
}

// SonIDNotIn applies the NotIn predicate on the "son_id" field.
func SonIDNotIn(vs ...int64) predicate.AsGroupTenantRelations {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSonID), v...))
	})
}

// SonIDIsNil applies the IsNil predicate on the "son_id" field.
func SonIDIsNil() predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSonID)))
	})
}

// SonIDNotNil applies the NotNil predicate on the "son_id" field.
func SonIDNotNil() predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSonID)))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...int64) predicate.AsGroupTenantRelations {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...int64) predicate.AsGroupTenantRelations {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldType), v))
	})
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldType), v))
	})
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldType), v))
	})
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldType), v))
	})
}

// TypeIsNil applies the IsNil predicate on the "type" field.
func TypeIsNil() predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldType)))
	})
}

// TypeNotNil applies the NotNil predicate on the "type" field.
func TypeNotNil() predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldType)))
	})
}

// SortEQ applies the EQ predicate on the "sort" field.
func SortEQ(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSort), v))
	})
}

// SortNEQ applies the NEQ predicate on the "sort" field.
func SortNEQ(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSort), v))
	})
}

// SortIn applies the In predicate on the "sort" field.
func SortIn(vs ...int64) predicate.AsGroupTenantRelations {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSort), v...))
	})
}

// SortNotIn applies the NotIn predicate on the "sort" field.
func SortNotIn(vs ...int64) predicate.AsGroupTenantRelations {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSort), v...))
	})
}

// SortGT applies the GT predicate on the "sort" field.
func SortGT(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSort), v))
	})
}

// SortGTE applies the GTE predicate on the "sort" field.
func SortGTE(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSort), v))
	})
}

// SortLT applies the LT predicate on the "sort" field.
func SortLT(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSort), v))
	})
}

// SortLTE applies the LTE predicate on the "sort" field.
func SortLTE(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSort), v))
	})
}

// SortIsNil applies the IsNil predicate on the "sort" field.
func SortIsNil() predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSort)))
	})
}

// SortNotNil applies the NotNil predicate on the "sort" field.
func SortNotNil() predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSort)))
	})
}

// SerialEQ applies the EQ predicate on the "serial" field.
func SerialEQ(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSerial), v))
	})
}

// SerialNEQ applies the NEQ predicate on the "serial" field.
func SerialNEQ(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSerial), v))
	})
}

// SerialIn applies the In predicate on the "serial" field.
func SerialIn(vs ...int64) predicate.AsGroupTenantRelations {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSerial), v...))
	})
}

// SerialNotIn applies the NotIn predicate on the "serial" field.
func SerialNotIn(vs ...int64) predicate.AsGroupTenantRelations {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSerial), v...))
	})
}

// SerialGT applies the GT predicate on the "serial" field.
func SerialGT(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSerial), v))
	})
}

// SerialGTE applies the GTE predicate on the "serial" field.
func SerialGTE(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSerial), v))
	})
}

// SerialLT applies the LT predicate on the "serial" field.
func SerialLT(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSerial), v))
	})
}

// SerialLTE applies the LTE predicate on the "serial" field.
func SerialLTE(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSerial), v))
	})
}

// SerialIsNil applies the IsNil predicate on the "serial" field.
func SerialIsNil() predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSerial)))
	})
}

// SerialNotNil applies the NotNil predicate on the "serial" field.
func SerialNotNil() predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSerial)))
	})
}

// GroupCodeEQ applies the EQ predicate on the "group_code" field.
func GroupCodeEQ(v string) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGroupCode), v))
	})
}

// GroupCodeNEQ applies the NEQ predicate on the "group_code" field.
func GroupCodeNEQ(v string) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGroupCode), v))
	})
}

// GroupCodeIn applies the In predicate on the "group_code" field.
func GroupCodeIn(vs ...string) predicate.AsGroupTenantRelations {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGroupCode), v...))
	})
}

// GroupCodeNotIn applies the NotIn predicate on the "group_code" field.
func GroupCodeNotIn(vs ...string) predicate.AsGroupTenantRelations {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGroupCode), v...))
	})
}

// GroupCodeGT applies the GT predicate on the "group_code" field.
func GroupCodeGT(v string) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGroupCode), v))
	})
}

// GroupCodeGTE applies the GTE predicate on the "group_code" field.
func GroupCodeGTE(v string) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGroupCode), v))
	})
}

// GroupCodeLT applies the LT predicate on the "group_code" field.
func GroupCodeLT(v string) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGroupCode), v))
	})
}

// GroupCodeLTE applies the LTE predicate on the "group_code" field.
func GroupCodeLTE(v string) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGroupCode), v))
	})
}

// GroupCodeContains applies the Contains predicate on the "group_code" field.
func GroupCodeContains(v string) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGroupCode), v))
	})
}

// GroupCodeHasPrefix applies the HasPrefix predicate on the "group_code" field.
func GroupCodeHasPrefix(v string) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGroupCode), v))
	})
}

// GroupCodeHasSuffix applies the HasSuffix predicate on the "group_code" field.
func GroupCodeHasSuffix(v string) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGroupCode), v))
	})
}

// GroupCodeIsNil applies the IsNil predicate on the "group_code" field.
func GroupCodeIsNil() predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldGroupCode)))
	})
}

// GroupCodeNotNil applies the NotNil predicate on the "group_code" field.
func GroupCodeNotNil() predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldGroupCode)))
	})
}

// GroupCodeEqualFold applies the EqualFold predicate on the "group_code" field.
func GroupCodeEqualFold(v string) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGroupCode), v))
	})
}

// GroupCodeContainsFold applies the ContainsFold predicate on the "group_code" field.
func GroupCodeContainsFold(v string) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGroupCode), v))
	})
}

// ExpiresTimeEQ applies the EQ predicate on the "expires_time" field.
func ExpiresTimeEQ(v date.DateTime) predicate.AsGroupTenantRelations {
	vc := time.Time(v)
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpiresTime), vc))
	})
}

// ExpiresTimeNEQ applies the NEQ predicate on the "expires_time" field.
func ExpiresTimeNEQ(v date.DateTime) predicate.AsGroupTenantRelations {
	vc := time.Time(v)
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExpiresTime), vc))
	})
}

// ExpiresTimeIn applies the In predicate on the "expires_time" field.
func ExpiresTimeIn(vs ...date.DateTime) predicate.AsGroupTenantRelations {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldExpiresTime), v...))
	})
}

// ExpiresTimeNotIn applies the NotIn predicate on the "expires_time" field.
func ExpiresTimeNotIn(vs ...date.DateTime) predicate.AsGroupTenantRelations {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldExpiresTime), v...))
	})
}

// ExpiresTimeGT applies the GT predicate on the "expires_time" field.
func ExpiresTimeGT(v date.DateTime) predicate.AsGroupTenantRelations {
	vc := time.Time(v)
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExpiresTime), vc))
	})
}

// ExpiresTimeGTE applies the GTE predicate on the "expires_time" field.
func ExpiresTimeGTE(v date.DateTime) predicate.AsGroupTenantRelations {
	vc := time.Time(v)
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExpiresTime), vc))
	})
}

// ExpiresTimeLT applies the LT predicate on the "expires_time" field.
func ExpiresTimeLT(v date.DateTime) predicate.AsGroupTenantRelations {
	vc := time.Time(v)
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExpiresTime), vc))
	})
}

// ExpiresTimeLTE applies the LTE predicate on the "expires_time" field.
func ExpiresTimeLTE(v date.DateTime) predicate.AsGroupTenantRelations {
	vc := time.Time(v)
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExpiresTime), vc))
	})
}

// ExpiresTimeIsNil applies the IsNil predicate on the "expires_time" field.
func ExpiresTimeIsNil() predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldExpiresTime)))
	})
}

// ExpiresTimeNotNil applies the NotNil predicate on the "expires_time" field.
func ExpiresTimeNotNil() predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldExpiresTime)))
	})
}

// IsHideEQ applies the EQ predicate on the "is_hide" field.
func IsHideEQ(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsHide), v))
	})
}

// IsHideNEQ applies the NEQ predicate on the "is_hide" field.
func IsHideNEQ(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsHide), v))
	})
}

// IsHideIn applies the In predicate on the "is_hide" field.
func IsHideIn(vs ...int64) predicate.AsGroupTenantRelations {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsHide), v...))
	})
}

// IsHideNotIn applies the NotIn predicate on the "is_hide" field.
func IsHideNotIn(vs ...int64) predicate.AsGroupTenantRelations {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsHide), v...))
	})
}

// IsHideGT applies the GT predicate on the "is_hide" field.
func IsHideGT(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsHide), v))
	})
}

// IsHideGTE applies the GTE predicate on the "is_hide" field.
func IsHideGTE(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsHide), v))
	})
}

// IsHideLT applies the LT predicate on the "is_hide" field.
func IsHideLT(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsHide), v))
	})
}

// IsHideLTE applies the LTE predicate on the "is_hide" field.
func IsHideLTE(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsHide), v))
	})
}

// IsHideIsNil applies the IsNil predicate on the "is_hide" field.
func IsHideIsNil() predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsHide)))
	})
}

// IsHideNotNil applies the NotNil predicate on the "is_hide" field.
func IsHideNotNil() predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsHide)))
	})
}

// IsDeletedEQ applies the EQ predicate on the "is_deleted" field.
func IsDeletedEQ(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedNEQ applies the NEQ predicate on the "is_deleted" field.
func IsDeletedNEQ(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedIn applies the In predicate on the "is_deleted" field.
func IsDeletedIn(vs ...int64) predicate.AsGroupTenantRelations {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsDeleted), v...))
	})
}

// IsDeletedNotIn applies the NotIn predicate on the "is_deleted" field.
func IsDeletedNotIn(vs ...int64) predicate.AsGroupTenantRelations {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsDeleted), v...))
	})
}

// IsDeletedGT applies the GT predicate on the "is_deleted" field.
func IsDeletedGT(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedGTE applies the GTE predicate on the "is_deleted" field.
func IsDeletedGTE(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedLT applies the LT predicate on the "is_deleted" field.
func IsDeletedLT(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedLTE applies the LTE predicate on the "is_deleted" field.
func IsDeletedLTE(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsDeleted), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int64) predicate.AsGroupTenantRelations {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int64) predicate.AsGroupTenantRelations {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStatus)))
	})
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStatus)))
	})
}

// CreateUserEQ applies the EQ predicate on the "create_user" field.
func CreateUserEQ(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateUser), v))
	})
}

// CreateUserNEQ applies the NEQ predicate on the "create_user" field.
func CreateUserNEQ(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateUser), v))
	})
}

// CreateUserIn applies the In predicate on the "create_user" field.
func CreateUserIn(vs ...int64) predicate.AsGroupTenantRelations {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateUser), v...))
	})
}

// CreateUserNotIn applies the NotIn predicate on the "create_user" field.
func CreateUserNotIn(vs ...int64) predicate.AsGroupTenantRelations {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateUser), v...))
	})
}

// CreateUserGT applies the GT predicate on the "create_user" field.
func CreateUserGT(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateUser), v))
	})
}

// CreateUserGTE applies the GTE predicate on the "create_user" field.
func CreateUserGTE(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateUser), v))
	})
}

// CreateUserLT applies the LT predicate on the "create_user" field.
func CreateUserLT(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateUser), v))
	})
}

// CreateUserLTE applies the LTE predicate on the "create_user" field.
func CreateUserLTE(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateUser), v))
	})
}

// CreateUserIsNil applies the IsNil predicate on the "create_user" field.
func CreateUserIsNil() predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreateUser)))
	})
}

// CreateUserNotNil applies the NotNil predicate on the "create_user" field.
func CreateUserNotNil() predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreateUser)))
	})
}

// UpdateUserEQ applies the EQ predicate on the "update_user" field.
func UpdateUserEQ(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserNEQ applies the NEQ predicate on the "update_user" field.
func UpdateUserNEQ(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserIn applies the In predicate on the "update_user" field.
func UpdateUserIn(vs ...int64) predicate.AsGroupTenantRelations {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateUser), v...))
	})
}

// UpdateUserNotIn applies the NotIn predicate on the "update_user" field.
func UpdateUserNotIn(vs ...int64) predicate.AsGroupTenantRelations {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateUser), v...))
	})
}

// UpdateUserGT applies the GT predicate on the "update_user" field.
func UpdateUserGT(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserGTE applies the GTE predicate on the "update_user" field.
func UpdateUserGTE(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserLT applies the LT predicate on the "update_user" field.
func UpdateUserLT(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserLTE applies the LTE predicate on the "update_user" field.
func UpdateUserLTE(v int64) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserIsNil applies the IsNil predicate on the "update_user" field.
func UpdateUserIsNil() predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdateUser)))
	})
}

// UpdateUserNotNil applies the NotNil predicate on the "update_user" field.
func UpdateUserNotNil() predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdateUser)))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v date.DateTime) predicate.AsGroupTenantRelations {
	vc := time.Time(v)
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v date.DateTime) predicate.AsGroupTenantRelations {
	vc := time.Time(v)
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...date.DateTime) predicate.AsGroupTenantRelations {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...date.DateTime) predicate.AsGroupTenantRelations {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v date.DateTime) predicate.AsGroupTenantRelations {
	vc := time.Time(v)
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v date.DateTime) predicate.AsGroupTenantRelations {
	vc := time.Time(v)
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v date.DateTime) predicate.AsGroupTenantRelations {
	vc := time.Time(v)
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v date.DateTime) predicate.AsGroupTenantRelations {
	vc := time.Time(v)
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeIsNil applies the IsNil predicate on the "create_time" field.
func CreateTimeIsNil() predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreateTime)))
	})
}

// CreateTimeNotNil applies the NotNil predicate on the "create_time" field.
func CreateTimeNotNil() predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreateTime)))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v date.DateTime) predicate.AsGroupTenantRelations {
	vc := time.Time(v)
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v date.DateTime) predicate.AsGroupTenantRelations {
	vc := time.Time(v)
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...date.DateTime) predicate.AsGroupTenantRelations {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...date.DateTime) predicate.AsGroupTenantRelations {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v date.DateTime) predicate.AsGroupTenantRelations {
	vc := time.Time(v)
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v date.DateTime) predicate.AsGroupTenantRelations {
	vc := time.Time(v)
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v date.DateTime) predicate.AsGroupTenantRelations {
	vc := time.Time(v)
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v date.DateTime) predicate.AsGroupTenantRelations {
	vc := time.Time(v)
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeIsNil applies the IsNil predicate on the "update_time" field.
func UpdateTimeIsNil() predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdateTime)))
	})
}

// UpdateTimeNotNil applies the NotNil predicate on the "update_time" field.
func UpdateTimeNotNil() predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdateTime)))
	})
}

// HasGroup applies the HasEdge predicate on the "group" edge.
func HasGroup() predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GroupTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GroupTable, GroupColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupWith applies the HasEdge predicate on the "group" edge with a given conditions (other predicates).
func HasGroupWith(preds ...predicate.AsAllGroup) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GroupInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GroupTable, GroupColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TenantTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.AsTenant) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TenantInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AsGroupTenantRelations) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AsGroupTenantRelations) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AsGroupTenantRelations) predicate.AsGroupTenantRelations {
	return predicate.AsGroupTenantRelations(func(s *sql.Selector) {
		p(s.Not())
	})
}
