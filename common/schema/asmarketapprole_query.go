// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"
	"orginone/common/schema/asmarketapp"
	"orginone/common/schema/asmarketapprole"
	"orginone/common/schema/asmarketmenu"
	"orginone/common/schema/asmarketroledistribution"
	"orginone/common/schema/asmarketrolemenu"
	"orginone/common/schema/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsMarketAppRoleQuery is the builder for querying AsMarketAppRole entities.
type AsMarketAppRoleQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.AsMarketAppRole
	// eager-loading edges.
	withRoleDistribs *AsMarketRoleDistributionQuery
	withRoleMenus    *AsMarketRoleMenuQuery
	withMenus        *AsMarketMenuQuery
	withAppx         *AsMarketAppQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AsMarketAppRoleQuery builder.
func (amarq *AsMarketAppRoleQuery) Where(ps ...predicate.AsMarketAppRole) *AsMarketAppRoleQuery {
	amarq.predicates = append(amarq.predicates, ps...)
	return amarq
}

// Limit adds a limit step to the query.
func (amarq *AsMarketAppRoleQuery) Limit(limit int) *AsMarketAppRoleQuery {
	amarq.limit = &limit
	return amarq
}

// Offset adds an offset step to the query.
func (amarq *AsMarketAppRoleQuery) Offset(offset int) *AsMarketAppRoleQuery {
	amarq.offset = &offset
	return amarq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (amarq *AsMarketAppRoleQuery) Unique(unique bool) *AsMarketAppRoleQuery {
	amarq.unique = &unique
	return amarq
}

// Order adds an order step to the query.
func (amarq *AsMarketAppRoleQuery) Order(o ...OrderFunc) *AsMarketAppRoleQuery {
	amarq.order = append(amarq.order, o...)
	return amarq
}

// QueryRoleDistribs chains the current query on the "roleDistribs" edge.
func (amarq *AsMarketAppRoleQuery) QueryRoleDistribs() *AsMarketRoleDistributionQuery {
	query := &AsMarketRoleDistributionQuery{config: amarq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := amarq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := amarq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketapprole.Table, asmarketapprole.FieldID, selector),
			sqlgraph.To(asmarketroledistribution.Table, asmarketroledistribution.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asmarketapprole.RoleDistribsTable, asmarketapprole.RoleDistribsColumn),
		)
		fromU = sqlgraph.SetNeighbors(amarq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRoleMenus chains the current query on the "roleMenus" edge.
func (amarq *AsMarketAppRoleQuery) QueryRoleMenus() *AsMarketRoleMenuQuery {
	query := &AsMarketRoleMenuQuery{config: amarq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := amarq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := amarq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketapprole.Table, asmarketapprole.FieldID, selector),
			sqlgraph.To(asmarketrolemenu.Table, asmarketrolemenu.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asmarketapprole.RoleMenusTable, asmarketapprole.RoleMenusColumn),
		)
		fromU = sqlgraph.SetNeighbors(amarq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMenus chains the current query on the "menus" edge.
func (amarq *AsMarketAppRoleQuery) QueryMenus() *AsMarketMenuQuery {
	query := &AsMarketMenuQuery{config: amarq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := amarq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := amarq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketapprole.Table, asmarketapprole.FieldID, selector),
			sqlgraph.To(asmarketmenu.Table, asmarketmenu.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, asmarketapprole.MenusTable, asmarketapprole.MenusPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(amarq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAppx chains the current query on the "appx" edge.
func (amarq *AsMarketAppRoleQuery) QueryAppx() *AsMarketAppQuery {
	query := &AsMarketAppQuery{config: amarq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := amarq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := amarq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketapprole.Table, asmarketapprole.FieldID, selector),
			sqlgraph.To(asmarketapp.Table, asmarketapp.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asmarketapprole.AppxTable, asmarketapprole.AppxColumn),
		)
		fromU = sqlgraph.SetNeighbors(amarq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AsMarketAppRole entity from the query.
// Returns a *NotFoundError when no AsMarketAppRole was found.
func (amarq *AsMarketAppRoleQuery) First(ctx context.Context) (*AsMarketAppRole, error) {
	nodes, err := amarq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{asmarketapprole.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (amarq *AsMarketAppRoleQuery) FirstX(ctx context.Context) *AsMarketAppRole {
	node, err := amarq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AsMarketAppRole ID from the query.
// Returns a *NotFoundError when no AsMarketAppRole ID was found.
func (amarq *AsMarketAppRoleQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = amarq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{asmarketapprole.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (amarq *AsMarketAppRoleQuery) FirstIDX(ctx context.Context) int64 {
	id, err := amarq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AsMarketAppRole entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AsMarketAppRole entity is found.
// Returns a *NotFoundError when no AsMarketAppRole entities are found.
func (amarq *AsMarketAppRoleQuery) Only(ctx context.Context) (*AsMarketAppRole, error) {
	nodes, err := amarq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{asmarketapprole.Label}
	default:
		return nil, &NotSingularError{asmarketapprole.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (amarq *AsMarketAppRoleQuery) OnlyX(ctx context.Context) *AsMarketAppRole {
	node, err := amarq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AsMarketAppRole ID in the query.
// Returns a *NotSingularError when more than one AsMarketAppRole ID is found.
// Returns a *NotFoundError when no entities are found.
func (amarq *AsMarketAppRoleQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = amarq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{asmarketapprole.Label}
	default:
		err = &NotSingularError{asmarketapprole.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (amarq *AsMarketAppRoleQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := amarq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AsMarketAppRoles.
func (amarq *AsMarketAppRoleQuery) All(ctx context.Context) ([]*AsMarketAppRole, error) {
	if err := amarq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return amarq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (amarq *AsMarketAppRoleQuery) AllX(ctx context.Context) []*AsMarketAppRole {
	nodes, err := amarq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AsMarketAppRole IDs.
func (amarq *AsMarketAppRoleQuery) IDs(ctx context.Context) ([]int64, error) {
	var ids []int64
	if err := amarq.Select(asmarketapprole.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (amarq *AsMarketAppRoleQuery) IDsX(ctx context.Context) []int64 {
	ids, err := amarq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (amarq *AsMarketAppRoleQuery) Count(ctx context.Context) (int64, error) {
	if err := amarq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return amarq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (amarq *AsMarketAppRoleQuery) CountX(ctx context.Context) int64 {
	count, err := amarq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (amarq *AsMarketAppRoleQuery) Exist(ctx context.Context) (bool, error) {
	if err := amarq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return amarq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (amarq *AsMarketAppRoleQuery) ExistX(ctx context.Context) bool {
	exist, err := amarq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AsMarketAppRoleQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (amarq *AsMarketAppRoleQuery) Clone() *AsMarketAppRoleQuery {
	if amarq == nil {
		return nil
	}
	return &AsMarketAppRoleQuery{
		config:           amarq.config,
		limit:            amarq.limit,
		offset:           amarq.offset,
		order:            append([]OrderFunc{}, amarq.order...),
		predicates:       append([]predicate.AsMarketAppRole{}, amarq.predicates...),
		withRoleDistribs: amarq.withRoleDistribs.Clone(),
		withRoleMenus:    amarq.withRoleMenus.Clone(),
		withMenus:        amarq.withMenus.Clone(),
		withAppx:         amarq.withAppx.Clone(),
		// clone intermediate query.
		sql:    amarq.sql.Clone(),
		path:   amarq.path,
		unique: amarq.unique,
	}
}

// WithRoleDistribs tells the query-builder to eager-load the nodes that are connected to
// the "roleDistribs" edge. The optional arguments are used to configure the query builder of the edge.
func (amarq *AsMarketAppRoleQuery) WithRoleDistribs(opts ...func(*AsMarketRoleDistributionQuery)) *AsMarketAppRoleQuery {
	query := &AsMarketRoleDistributionQuery{config: amarq.config}
	for _, opt := range opts {
		opt(query)
	}
	amarq.withRoleDistribs = query
	return amarq
}

// WithRoleMenus tells the query-builder to eager-load the nodes that are connected to
// the "roleMenus" edge. The optional arguments are used to configure the query builder of the edge.
func (amarq *AsMarketAppRoleQuery) WithRoleMenus(opts ...func(*AsMarketRoleMenuQuery)) *AsMarketAppRoleQuery {
	query := &AsMarketRoleMenuQuery{config: amarq.config}
	for _, opt := range opts {
		opt(query)
	}
	amarq.withRoleMenus = query
	return amarq
}

// WithMenus tells the query-builder to eager-load the nodes that are connected to
// the "menus" edge. The optional arguments are used to configure the query builder of the edge.
func (amarq *AsMarketAppRoleQuery) WithMenus(opts ...func(*AsMarketMenuQuery)) *AsMarketAppRoleQuery {
	query := &AsMarketMenuQuery{config: amarq.config}
	for _, opt := range opts {
		opt(query)
	}
	amarq.withMenus = query
	return amarq
}

// WithAppx tells the query-builder to eager-load the nodes that are connected to
// the "appx" edge. The optional arguments are used to configure the query builder of the edge.
func (amarq *AsMarketAppRoleQuery) WithAppx(opts ...func(*AsMarketAppQuery)) *AsMarketAppRoleQuery {
	query := &AsMarketAppQuery{config: amarq.config}
	for _, opt := range opts {
		opt(query)
	}
	amarq.withAppx = query
	return amarq
}

// ThenRoleDistribs tells the query-builder to eager-load the nodes that are connected to
// the "roleDistribs" edge. The optional arguments are used to configure the query builder of the edge.
func (amarq *AsMarketAppRoleQuery) ThenRoleDistribs(opts ...func(*AsMarketRoleDistributionQuery)) *AsMarketAppRoleQuery {
	query := &AsMarketRoleDistributionQuery{config: amarq.config}
	for _, opt := range opts {
		opt(query.Where(asmarketroledistribution.IsDeleted(0)))
	}
	amarq.withRoleDistribs = query
	return amarq
}

// ThenRoleMenus tells the query-builder to eager-load the nodes that are connected to
// the "roleMenus" edge. The optional arguments are used to configure the query builder of the edge.
func (amarq *AsMarketAppRoleQuery) ThenRoleMenus(opts ...func(*AsMarketRoleMenuQuery)) *AsMarketAppRoleQuery {
	query := &AsMarketRoleMenuQuery{config: amarq.config}
	for _, opt := range opts {
		opt(query.Where(asmarketrolemenu.IsDeleted(0)))
	}
	amarq.withRoleMenus = query
	return amarq
}

// ThenMenus tells the query-builder to eager-load the nodes that are connected to
// the "menus" edge. The optional arguments are used to configure the query builder of the edge.
func (amarq *AsMarketAppRoleQuery) ThenMenus(opts ...func(*AsMarketMenuQuery)) *AsMarketAppRoleQuery {
	query := &AsMarketMenuQuery{config: amarq.config}
	for _, opt := range opts {
		opt(query.Where(asmarketmenu.IsDeleted(0)))
	}
	amarq.withMenus = query
	return amarq
}

// ThenAppx tells the query-builder to eager-load the nodes that are connected to
// the "appx" edge. The optional arguments are used to configure the query builder of the edge.
func (amarq *AsMarketAppRoleQuery) ThenAppx(opts ...func(*AsMarketAppQuery)) *AsMarketAppRoleQuery {
	query := &AsMarketAppQuery{config: amarq.config}
	for _, opt := range opts {
		opt(query.Where(asmarketapp.IsDeleted(0)))
	}
	amarq.withAppx = query
	return amarq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		RoleName string `json:"roleName"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AsMarketAppRole.Query().
//		GroupBy(asmarketapprole.FieldRoleName).
//		Aggregate(schema.Count()).
//		Scan(ctx, &v)
//
func (amarq *AsMarketAppRoleQuery) GroupBy(field string, fields ...string) *AsMarketAppRoleGroupBy {
	group := &AsMarketAppRoleGroupBy{config: amarq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := amarq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return amarq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		RoleName string `json:"roleName"`
//	}
//
//	client.AsMarketAppRole.Query().
//		Select(asmarketapprole.FieldRoleName).
//		Scan(ctx, &v)
//
func (amarq *AsMarketAppRoleQuery) Select(fields ...string) *AsMarketAppRoleSelect {
	amarq.fields = append(amarq.fields, fields...)
	return &AsMarketAppRoleSelect{AsMarketAppRoleQuery: amarq}
}

func (amarq *AsMarketAppRoleQuery) prepareQuery(ctx context.Context) error {
	for _, f := range amarq.fields {
		if !asmarketapprole.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("schema: invalid field %q for query", f)}
		}
	}
	if amarq.path != nil {
		prev, err := amarq.path(ctx)
		if err != nil {
			return err
		}
		amarq.sql = prev
	}
	return nil
}

func (amarq *AsMarketAppRoleQuery) sqlAll(ctx context.Context) ([]*AsMarketAppRole, error) {
	var (
		nodes       = []*AsMarketAppRole{}
		_spec       = amarq.querySpec()
		loadedTypes = [4]bool{
			amarq.withRoleDistribs != nil,
			amarq.withRoleMenus != nil,
			amarq.withMenus != nil,
			amarq.withAppx != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &AsMarketAppRole{config: amarq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("schema: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, amarq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := amarq.withRoleDistribs; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int64]*AsMarketAppRole)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.RoleDistribs = []*AsMarketRoleDistribution{}
		}
		query.Where(predicate.AsMarketRoleDistribution(func(s *sql.Selector) {
			s.Where(sql.InValues(asmarketapprole.RoleDistribsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.RoleID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "role_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.RoleDistribs = append(node.Edges.RoleDistribs, n)
		}
	}

	if query := amarq.withRoleMenus; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int64]*AsMarketAppRole)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.RoleMenus = []*AsMarketRoleMenu{}
		}
		query.Where(predicate.AsMarketRoleMenu(func(s *sql.Selector) {
			s.Where(sql.InValues(asmarketapprole.RoleMenusColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.RoleID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "role_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.RoleMenus = append(node.Edges.RoleMenus, n)
		}
	}

	if query := amarq.withMenus; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int64]*AsMarketAppRole, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.Menus = []*AsMarketMenu{}
		}
		var (
			edgeids []int64
			edges   = make(map[int64][]*AsMarketAppRole)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: false,
				Table:   asmarketapprole.MenusTable,
				Columns: asmarketapprole.MenusPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(asmarketapprole.MenusPrimaryKey[0], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{new(sql.NullInt64), new(sql.NullInt64)}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := eout.Int64
				inValue := ein.Int64
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, amarq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "menus": %w`, err)
		}
		query.Where(asmarketmenu.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "menus" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Menus = append(nodes[i].Edges.Menus, n)
			}
		}
	}

	if query := amarq.withAppx; query != nil {
		ids := make([]int64, 0, len(nodes))
		nodeids := make(map[int64][]*AsMarketAppRole)
		for i := range nodes {
			fk := nodes[i].AppID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(asmarketapp.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "app_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Appx = n
			}
		}
	}

	return nodes, nil
}

func (amarq *AsMarketAppRoleQuery) sqlCount(ctx context.Context) (int64, error) {
	_spec := amarq.querySpec()
	_spec.Node.Columns = amarq.fields
	if len(amarq.fields) > 0 {
		_spec.Unique = amarq.unique != nil && *amarq.unique
	}
	c, err := sqlgraph.CountNodes(ctx, amarq.driver, _spec)
	return int64(c), err
}

func (amarq *AsMarketAppRoleQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := amarq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("schema: check existence: %w", err)
	}
	return n > 0, nil
}

func (amarq *AsMarketAppRoleQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asmarketapprole.Table,
			Columns: asmarketapprole.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asmarketapprole.FieldID,
			},
		},
		From:   amarq.sql,
		Unique: true,
	}
	if unique := amarq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := amarq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asmarketapprole.FieldID)
		for i := range fields {
			if fields[i] != asmarketapprole.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := amarq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := amarq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := amarq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := amarq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (amarq *AsMarketAppRoleQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(amarq.driver.Dialect())
	t1 := builder.Table(asmarketapprole.Table)
	columns := amarq.fields
	if len(columns) == 0 {
		columns = asmarketapprole.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if amarq.sql != nil {
		selector = amarq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if amarq.unique != nil && *amarq.unique {
		selector.Distinct()
	}
	for _, p := range amarq.predicates {
		p(selector)
	}
	for _, p := range amarq.order {
		p(selector)
	}
	if offset := amarq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := amarq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AsMarketAppRoleGroupBy is the group-by builder for AsMarketAppRole entities.
type AsMarketAppRoleGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (amargb *AsMarketAppRoleGroupBy) Aggregate(fns ...AggregateFunc) *AsMarketAppRoleGroupBy {
	amargb.fns = append(amargb.fns, fns...)
	return amargb
}

// Scan applies the group-by query and scans the result into the given value.
func (amargb *AsMarketAppRoleGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := amargb.path(ctx)
	if err != nil {
		return err
	}
	amargb.sql = query
	return amargb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (amargb *AsMarketAppRoleGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := amargb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (amargb *AsMarketAppRoleGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(amargb.fields) > 1 {
		return nil, errors.New("schema: AsMarketAppRoleGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := amargb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (amargb *AsMarketAppRoleGroupBy) StringsX(ctx context.Context) []string {
	v, err := amargb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (amargb *AsMarketAppRoleGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = amargb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketapprole.Label}
	default:
		err = fmt.Errorf("schema: AsMarketAppRoleGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (amargb *AsMarketAppRoleGroupBy) StringX(ctx context.Context) string {
	v, err := amargb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (amargb *AsMarketAppRoleGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(amargb.fields) > 1 {
		return nil, errors.New("schema: AsMarketAppRoleGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := amargb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (amargb *AsMarketAppRoleGroupBy) IntsX(ctx context.Context) []int {
	v, err := amargb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (amargb *AsMarketAppRoleGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = amargb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketapprole.Label}
	default:
		err = fmt.Errorf("schema: AsMarketAppRoleGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (amargb *AsMarketAppRoleGroupBy) IntX(ctx context.Context) int {
	v, err := amargb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (amargb *AsMarketAppRoleGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(amargb.fields) > 1 {
		return nil, errors.New("schema: AsMarketAppRoleGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := amargb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (amargb *AsMarketAppRoleGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := amargb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (amargb *AsMarketAppRoleGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = amargb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketapprole.Label}
	default:
		err = fmt.Errorf("schema: AsMarketAppRoleGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (amargb *AsMarketAppRoleGroupBy) Float64X(ctx context.Context) float64 {
	v, err := amargb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (amargb *AsMarketAppRoleGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(amargb.fields) > 1 {
		return nil, errors.New("schema: AsMarketAppRoleGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := amargb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (amargb *AsMarketAppRoleGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := amargb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (amargb *AsMarketAppRoleGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = amargb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketapprole.Label}
	default:
		err = fmt.Errorf("schema: AsMarketAppRoleGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (amargb *AsMarketAppRoleGroupBy) BoolX(ctx context.Context) bool {
	v, err := amargb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64s returns list of int64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (amargb *AsMarketAppRoleGroupBy) Int64s(ctx context.Context) ([]int64, error) {
	if len(amargb.fields) > 1 {
		return nil, errors.New("schema: AsMarketAppRoleGroupBy.Int64s is not achievable when grouping more than 1 field")
	}
	var v []int64
	if err := amargb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Int64sX is like Int64s, but panics if an error occurs.
func (amargb *AsMarketAppRoleGroupBy) Int64sX(ctx context.Context) []int64 {
	v, err := amargb.Int64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64 returns a single int64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (amargb *AsMarketAppRoleGroupBy) Int64(ctx context.Context) (_ int64, err error) {
	var v []int64
	if v, err = amargb.Int64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketapprole.Label}
	default:
		err = fmt.Errorf("schema: AsMarketAppRoleGroupBy.Int64s returned %d results when one was expected", len(v))
	}
	return
}

// Int64X is like Int64, but panics if an error occurs.
func (amargb *AsMarketAppRoleGroupBy) Int64X(ctx context.Context) int64 {
	v, err := amargb.Int64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (amargb *AsMarketAppRoleGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range amargb.fields {
		if !asmarketapprole.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := amargb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := amargb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (amargb *AsMarketAppRoleGroupBy) sqlQuery() *sql.Selector {
	selector := amargb.sql.Select()
	aggregation := make([]string, 0, len(amargb.fns))
	for _, fn := range amargb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(amargb.fields)+len(amargb.fns))
		for _, f := range amargb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(amargb.fields...)...)
}

// AsMarketAppRoleSelect is the builder for selecting fields of AsMarketAppRole entities.
type AsMarketAppRoleSelect struct {
	*AsMarketAppRoleQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (amars *AsMarketAppRoleSelect) Scan(ctx context.Context, v interface{}) error {
	if err := amars.prepareQuery(ctx); err != nil {
		return err
	}
	amars.sql = amars.AsMarketAppRoleQuery.sqlQuery(ctx)
	return amars.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (amars *AsMarketAppRoleSelect) ScanX(ctx context.Context, v interface{}) {
	if err := amars.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (amars *AsMarketAppRoleSelect) Strings(ctx context.Context) ([]string, error) {
	if len(amars.fields) > 1 {
		return nil, errors.New("schema: AsMarketAppRoleSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := amars.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (amars *AsMarketAppRoleSelect) StringsX(ctx context.Context) []string {
	v, err := amars.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (amars *AsMarketAppRoleSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = amars.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketapprole.Label}
	default:
		err = fmt.Errorf("schema: AsMarketAppRoleSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (amars *AsMarketAppRoleSelect) StringX(ctx context.Context) string {
	v, err := amars.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (amars *AsMarketAppRoleSelect) Ints(ctx context.Context) ([]int, error) {
	if len(amars.fields) > 1 {
		return nil, errors.New("schema: AsMarketAppRoleSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := amars.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (amars *AsMarketAppRoleSelect) IntsX(ctx context.Context) []int {
	v, err := amars.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (amars *AsMarketAppRoleSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = amars.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketapprole.Label}
	default:
		err = fmt.Errorf("schema: AsMarketAppRoleSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (amars *AsMarketAppRoleSelect) IntX(ctx context.Context) int {
	v, err := amars.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (amars *AsMarketAppRoleSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(amars.fields) > 1 {
		return nil, errors.New("schema: AsMarketAppRoleSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := amars.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (amars *AsMarketAppRoleSelect) Float64sX(ctx context.Context) []float64 {
	v, err := amars.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (amars *AsMarketAppRoleSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = amars.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketapprole.Label}
	default:
		err = fmt.Errorf("schema: AsMarketAppRoleSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (amars *AsMarketAppRoleSelect) Float64X(ctx context.Context) float64 {
	v, err := amars.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (amars *AsMarketAppRoleSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(amars.fields) > 1 {
		return nil, errors.New("schema: AsMarketAppRoleSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := amars.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (amars *AsMarketAppRoleSelect) BoolsX(ctx context.Context) []bool {
	v, err := amars.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (amars *AsMarketAppRoleSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = amars.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketapprole.Label}
	default:
		err = fmt.Errorf("schema: AsMarketAppRoleSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (amars *AsMarketAppRoleSelect) BoolX(ctx context.Context) bool {
	v, err := amars.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64s returns list of int64s from a selector. It is only allowed when selecting one field.
func (amars *AsMarketAppRoleSelect) Int64s(ctx context.Context) ([]int64, error) {
	if len(amars.fields) > 1 {
		return nil, errors.New("schema: AsMarketAppRoleSelect.Int64s is not achievable when selecting more than 1 field")
	}
	var v []int64
	if err := amars.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Int64sX is like Int64s, but panics if an error occurs.
func (amars *AsMarketAppRoleSelect) Int64sX(ctx context.Context) []int64 {
	v, err := amars.Int64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64 returns a single int64 from a selector. It is only allowed when selecting one field.
func (amars *AsMarketAppRoleSelect) Int64(ctx context.Context) (_ int64, err error) {
	var v []int64
	if v, err = amars.Int64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketapprole.Label}
	default:
		err = fmt.Errorf("schema: AsMarketAppRoleSelect.Int64s returned %d results when one was expected", len(v))
	}
	return
}

// Int64X is like Int64, but panics if an error occurs.
func (amars *AsMarketAppRoleSelect) Int64X(ctx context.Context) int64 {
	v, err := amars.Int64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (amars *AsMarketAppRoleSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := amars.sql.Query()
	if err := amars.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
