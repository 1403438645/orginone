// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/asallgroup"
	"orginone/common/schema/asappgroupdistributiondata"
	"orginone/common/schema/asgrouptenantrelations"
	"orginone/common/schema/aslayer"
	"orginone/common/schema/asmarketappgroupdistribution"
	"orginone/common/schema/asmarketappgroupdistributionrelation"
	"orginone/common/schema/asmarketapppurchase"
	"orginone/common/schema/predicate"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsAllGroupUpdate is the builder for updating AsAllGroup entities.
type AsAllGroupUpdate struct {
	config
	hooks    []Hook
	mutation *AsAllGroupMutation
}

// Where appends a list predicates to the AsAllGroupUpdate builder.
func (aagu *AsAllGroupUpdate) Where(ps ...predicate.AsAllGroup) *AsAllGroupUpdate {
	aagu.mutation.Where(ps...)
	return aagu
}

// SetTenantCode sets the "tenant_code" field.
func (aagu *AsAllGroupUpdate) SetTenantCode(s string) *AsAllGroupUpdate {
	aagu.mutation.SetTenantCode(s)
	return aagu
}

// SetNillableTenantCode sets the "tenant_code" field if the given value is not nil.
func (aagu *AsAllGroupUpdate) SetNillableTenantCode(s *string) *AsAllGroupUpdate {
	if s != nil {
		aagu.SetTenantCode(*s)
	}
	return aagu
}

// ClearTenantCode clears the value of the "tenant_code" field.
func (aagu *AsAllGroupUpdate) ClearTenantCode() *AsAllGroupUpdate {
	aagu.mutation.ClearTenantCode()
	return aagu
}

// SetGroupName sets the "group_name" field.
func (aagu *AsAllGroupUpdate) SetGroupName(s string) *AsAllGroupUpdate {
	aagu.mutation.SetGroupName(s)
	return aagu
}

// SetNillableGroupName sets the "group_name" field if the given value is not nil.
func (aagu *AsAllGroupUpdate) SetNillableGroupName(s *string) *AsAllGroupUpdate {
	if s != nil {
		aagu.SetGroupName(*s)
	}
	return aagu
}

// ClearGroupName clears the value of the "group_name" field.
func (aagu *AsAllGroupUpdate) ClearGroupName() *AsAllGroupUpdate {
	aagu.mutation.ClearGroupName()
	return aagu
}

// SetGroupDescription sets the "group_description" field.
func (aagu *AsAllGroupUpdate) SetGroupDescription(s string) *AsAllGroupUpdate {
	aagu.mutation.SetGroupDescription(s)
	return aagu
}

// SetNillableGroupDescription sets the "group_description" field if the given value is not nil.
func (aagu *AsAllGroupUpdate) SetNillableGroupDescription(s *string) *AsAllGroupUpdate {
	if s != nil {
		aagu.SetGroupDescription(*s)
	}
	return aagu
}

// ClearGroupDescription clears the value of the "group_description" field.
func (aagu *AsAllGroupUpdate) ClearGroupDescription() *AsAllGroupUpdate {
	aagu.mutation.ClearGroupDescription()
	return aagu
}

// SetGroupCode sets the "group_code" field.
func (aagu *AsAllGroupUpdate) SetGroupCode(s string) *AsAllGroupUpdate {
	aagu.mutation.SetGroupCode(s)
	return aagu
}

// SetNillableGroupCode sets the "group_code" field if the given value is not nil.
func (aagu *AsAllGroupUpdate) SetNillableGroupCode(s *string) *AsAllGroupUpdate {
	if s != nil {
		aagu.SetGroupCode(*s)
	}
	return aagu
}

// ClearGroupCode clears the value of the "group_code" field.
func (aagu *AsAllGroupUpdate) ClearGroupCode() *AsAllGroupUpdate {
	aagu.mutation.ClearGroupCode()
	return aagu
}

// SetDepth sets the "depth" field.
func (aagu *AsAllGroupUpdate) SetDepth(i int64) *AsAllGroupUpdate {
	aagu.mutation.ResetDepth()
	aagu.mutation.SetDepth(i)
	return aagu
}

// SetNillableDepth sets the "depth" field if the given value is not nil.
func (aagu *AsAllGroupUpdate) SetNillableDepth(i *int64) *AsAllGroupUpdate {
	if i != nil {
		aagu.SetDepth(*i)
	}
	return aagu
}

// AddDepth adds i to the "depth" field.
func (aagu *AsAllGroupUpdate) AddDepth(i int64) *AsAllGroupUpdate {
	aagu.mutation.AddDepth(i)
	return aagu
}

// ClearDepth clears the value of the "depth" field.
func (aagu *AsAllGroupUpdate) ClearDepth() *AsAllGroupUpdate {
	aagu.mutation.ClearDepth()
	return aagu
}

// SetType sets the "type" field.
func (aagu *AsAllGroupUpdate) SetType(i int64) *AsAllGroupUpdate {
	aagu.mutation.ResetType()
	aagu.mutation.SetType(i)
	return aagu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (aagu *AsAllGroupUpdate) SetNillableType(i *int64) *AsAllGroupUpdate {
	if i != nil {
		aagu.SetType(*i)
	}
	return aagu
}

// AddType adds i to the "type" field.
func (aagu *AsAllGroupUpdate) AddType(i int64) *AsAllGroupUpdate {
	aagu.mutation.AddType(i)
	return aagu
}

// ClearType clears the value of the "type" field.
func (aagu *AsAllGroupUpdate) ClearType() *AsAllGroupUpdate {
	aagu.mutation.ClearType()
	return aagu
}

// SetSocialCreditCode sets the "social_credit_code" field.
func (aagu *AsAllGroupUpdate) SetSocialCreditCode(s string) *AsAllGroupUpdate {
	aagu.mutation.SetSocialCreditCode(s)
	return aagu
}

// SetNillableSocialCreditCode sets the "social_credit_code" field if the given value is not nil.
func (aagu *AsAllGroupUpdate) SetNillableSocialCreditCode(s *string) *AsAllGroupUpdate {
	if s != nil {
		aagu.SetSocialCreditCode(*s)
	}
	return aagu
}

// ClearSocialCreditCode clears the value of the "social_credit_code" field.
func (aagu *AsAllGroupUpdate) ClearSocialCreditCode() *AsAllGroupUpdate {
	aagu.mutation.ClearSocialCreditCode()
	return aagu
}

// SetIsDeleted sets the "is_deleted" field.
func (aagu *AsAllGroupUpdate) SetIsDeleted(i int64) *AsAllGroupUpdate {
	aagu.mutation.ResetIsDeleted()
	aagu.mutation.SetIsDeleted(i)
	return aagu
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (aagu *AsAllGroupUpdate) SetNillableIsDeleted(i *int64) *AsAllGroupUpdate {
	if i != nil {
		aagu.SetIsDeleted(*i)
	}
	return aagu
}

// AddIsDeleted adds i to the "is_deleted" field.
func (aagu *AsAllGroupUpdate) AddIsDeleted(i int64) *AsAllGroupUpdate {
	aagu.mutation.AddIsDeleted(i)
	return aagu
}

// SetStatus sets the "status" field.
func (aagu *AsAllGroupUpdate) SetStatus(i int64) *AsAllGroupUpdate {
	aagu.mutation.ResetStatus()
	aagu.mutation.SetStatus(i)
	return aagu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (aagu *AsAllGroupUpdate) SetNillableStatus(i *int64) *AsAllGroupUpdate {
	if i != nil {
		aagu.SetStatus(*i)
	}
	return aagu
}

// AddStatus adds i to the "status" field.
func (aagu *AsAllGroupUpdate) AddStatus(i int64) *AsAllGroupUpdate {
	aagu.mutation.AddStatus(i)
	return aagu
}

// ClearStatus clears the value of the "status" field.
func (aagu *AsAllGroupUpdate) ClearStatus() *AsAllGroupUpdate {
	aagu.mutation.ClearStatus()
	return aagu
}

// SetCreateUser sets the "create_user" field.
func (aagu *AsAllGroupUpdate) SetCreateUser(i int64) *AsAllGroupUpdate {
	aagu.mutation.ResetCreateUser()
	aagu.mutation.SetCreateUser(i)
	return aagu
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (aagu *AsAllGroupUpdate) SetNillableCreateUser(i *int64) *AsAllGroupUpdate {
	if i != nil {
		aagu.SetCreateUser(*i)
	}
	return aagu
}

// AddCreateUser adds i to the "create_user" field.
func (aagu *AsAllGroupUpdate) AddCreateUser(i int64) *AsAllGroupUpdate {
	aagu.mutation.AddCreateUser(i)
	return aagu
}

// ClearCreateUser clears the value of the "create_user" field.
func (aagu *AsAllGroupUpdate) ClearCreateUser() *AsAllGroupUpdate {
	aagu.mutation.ClearCreateUser()
	return aagu
}

// SetUpdateUser sets the "update_user" field.
func (aagu *AsAllGroupUpdate) SetUpdateUser(i int64) *AsAllGroupUpdate {
	aagu.mutation.ResetUpdateUser()
	aagu.mutation.SetUpdateUser(i)
	return aagu
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (aagu *AsAllGroupUpdate) SetNillableUpdateUser(i *int64) *AsAllGroupUpdate {
	if i != nil {
		aagu.SetUpdateUser(*i)
	}
	return aagu
}

// AddUpdateUser adds i to the "update_user" field.
func (aagu *AsAllGroupUpdate) AddUpdateUser(i int64) *AsAllGroupUpdate {
	aagu.mutation.AddUpdateUser(i)
	return aagu
}

// ClearUpdateUser clears the value of the "update_user" field.
func (aagu *AsAllGroupUpdate) ClearUpdateUser() *AsAllGroupUpdate {
	aagu.mutation.ClearUpdateUser()
	return aagu
}

// SetUpdateTime sets the "update_time" field.
func (aagu *AsAllGroupUpdate) SetUpdateTime(dt date.DateTime) *AsAllGroupUpdate {
	aagu.mutation.SetUpdateTime(dt)
	return aagu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (aagu *AsAllGroupUpdate) ClearUpdateTime() *AsAllGroupUpdate {
	aagu.mutation.ClearUpdateTime()
	return aagu
}

// AddAllLayerIDs adds the "allLayer" edge to the AsLayer entity by IDs.
func (aagu *AsAllGroupUpdate) AddAllLayerIDs(ids ...int64) *AsAllGroupUpdate {
	aagu.mutation.AddAllLayerIDs(ids...)
	return aagu
}

// AddAllLayer adds the "allLayer" edges to the AsLayer entity.
func (aagu *AsAllGroupUpdate) AddAllLayer(a ...*AsLayer) *AsAllGroupUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aagu.AddAllLayerIDs(ids...)
}

// AddAppPurchaseIDs adds the "appPurchases" edge to the AsMarketAppPurchase entity by IDs.
func (aagu *AsAllGroupUpdate) AddAppPurchaseIDs(ids ...int64) *AsAllGroupUpdate {
	aagu.mutation.AddAppPurchaseIDs(ids...)
	return aagu
}

// AddAppPurchases adds the "appPurchases" edges to the AsMarketAppPurchase entity.
func (aagu *AsAllGroupUpdate) AddAppPurchases(a ...*AsMarketAppPurchase) *AsAllGroupUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aagu.AddAppPurchaseIDs(ids...)
}

// AddAllTenantIDs adds the "allTenants" edge to the AsGroupTenantRelations entity by IDs.
func (aagu *AsAllGroupUpdate) AddAllTenantIDs(ids ...int64) *AsAllGroupUpdate {
	aagu.mutation.AddAllTenantIDs(ids...)
	return aagu
}

// AddAllTenants adds the "allTenants" edges to the AsGroupTenantRelations entity.
func (aagu *AsAllGroupUpdate) AddAllTenants(a ...*AsGroupTenantRelations) *AsAllGroupUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aagu.AddAllTenantIDs(ids...)
}

// AddAppGroupDistribIDs adds the "appGroupDistribs" edge to the AsMarketAppGroupDistribution entity by IDs.
func (aagu *AsAllGroupUpdate) AddAppGroupDistribIDs(ids ...int64) *AsAllGroupUpdate {
	aagu.mutation.AddAppGroupDistribIDs(ids...)
	return aagu
}

// AddAppGroupDistribs adds the "appGroupDistribs" edges to the AsMarketAppGroupDistribution entity.
func (aagu *AsAllGroupUpdate) AddAppGroupDistribs(a ...*AsMarketAppGroupDistribution) *AsAllGroupUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aagu.AddAppGroupDistribIDs(ids...)
}

// AddAppGroupDistribConfigIDs adds the "appGroupDistribConfigs" edge to the AsAppGroupDistributionData entity by IDs.
func (aagu *AsAllGroupUpdate) AddAppGroupDistribConfigIDs(ids ...int64) *AsAllGroupUpdate {
	aagu.mutation.AddAppGroupDistribConfigIDs(ids...)
	return aagu
}

// AddAppGroupDistribConfigs adds the "appGroupDistribConfigs" edges to the AsAppGroupDistributionData entity.
func (aagu *AsAllGroupUpdate) AddAppGroupDistribConfigs(a ...*AsAppGroupDistributionData) *AsAllGroupUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aagu.AddAppGroupDistribConfigIDs(ids...)
}

// AddAppGroupDistribsRelationIDs adds the "appGroupDistribsRelation" edge to the AsMarketAppGroupDistributionRelation entity by IDs.
func (aagu *AsAllGroupUpdate) AddAppGroupDistribsRelationIDs(ids ...int64) *AsAllGroupUpdate {
	aagu.mutation.AddAppGroupDistribsRelationIDs(ids...)
	return aagu
}

// AddAppGroupDistribsRelation adds the "appGroupDistribsRelation" edges to the AsMarketAppGroupDistributionRelation entity.
func (aagu *AsAllGroupUpdate) AddAppGroupDistribsRelation(a ...*AsMarketAppGroupDistributionRelation) *AsAllGroupUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aagu.AddAppGroupDistribsRelationIDs(ids...)
}

// Mutation returns the AsAllGroupMutation object of the builder.
func (aagu *AsAllGroupUpdate) Mutation() *AsAllGroupMutation {
	return aagu.mutation
}

// ClearAllLayer clears all "allLayer" edges to the AsLayer entity.
func (aagu *AsAllGroupUpdate) ClearAllLayer() *AsAllGroupUpdate {
	aagu.mutation.ClearAllLayer()
	return aagu
}

// RemoveAllLayerIDs removes the "allLayer" edge to AsLayer entities by IDs.
func (aagu *AsAllGroupUpdate) RemoveAllLayerIDs(ids ...int64) *AsAllGroupUpdate {
	aagu.mutation.RemoveAllLayerIDs(ids...)
	return aagu
}

// RemoveAllLayer removes "allLayer" edges to AsLayer entities.
func (aagu *AsAllGroupUpdate) RemoveAllLayer(a ...*AsLayer) *AsAllGroupUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aagu.RemoveAllLayerIDs(ids...)
}

// ClearAppPurchases clears all "appPurchases" edges to the AsMarketAppPurchase entity.
func (aagu *AsAllGroupUpdate) ClearAppPurchases() *AsAllGroupUpdate {
	aagu.mutation.ClearAppPurchases()
	return aagu
}

// RemoveAppPurchaseIDs removes the "appPurchases" edge to AsMarketAppPurchase entities by IDs.
func (aagu *AsAllGroupUpdate) RemoveAppPurchaseIDs(ids ...int64) *AsAllGroupUpdate {
	aagu.mutation.RemoveAppPurchaseIDs(ids...)
	return aagu
}

// RemoveAppPurchases removes "appPurchases" edges to AsMarketAppPurchase entities.
func (aagu *AsAllGroupUpdate) RemoveAppPurchases(a ...*AsMarketAppPurchase) *AsAllGroupUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aagu.RemoveAppPurchaseIDs(ids...)
}

// ClearAllTenants clears all "allTenants" edges to the AsGroupTenantRelations entity.
func (aagu *AsAllGroupUpdate) ClearAllTenants() *AsAllGroupUpdate {
	aagu.mutation.ClearAllTenants()
	return aagu
}

// RemoveAllTenantIDs removes the "allTenants" edge to AsGroupTenantRelations entities by IDs.
func (aagu *AsAllGroupUpdate) RemoveAllTenantIDs(ids ...int64) *AsAllGroupUpdate {
	aagu.mutation.RemoveAllTenantIDs(ids...)
	return aagu
}

// RemoveAllTenants removes "allTenants" edges to AsGroupTenantRelations entities.
func (aagu *AsAllGroupUpdate) RemoveAllTenants(a ...*AsGroupTenantRelations) *AsAllGroupUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aagu.RemoveAllTenantIDs(ids...)
}

// ClearAppGroupDistribs clears all "appGroupDistribs" edges to the AsMarketAppGroupDistribution entity.
func (aagu *AsAllGroupUpdate) ClearAppGroupDistribs() *AsAllGroupUpdate {
	aagu.mutation.ClearAppGroupDistribs()
	return aagu
}

// RemoveAppGroupDistribIDs removes the "appGroupDistribs" edge to AsMarketAppGroupDistribution entities by IDs.
func (aagu *AsAllGroupUpdate) RemoveAppGroupDistribIDs(ids ...int64) *AsAllGroupUpdate {
	aagu.mutation.RemoveAppGroupDistribIDs(ids...)
	return aagu
}

// RemoveAppGroupDistribs removes "appGroupDistribs" edges to AsMarketAppGroupDistribution entities.
func (aagu *AsAllGroupUpdate) RemoveAppGroupDistribs(a ...*AsMarketAppGroupDistribution) *AsAllGroupUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aagu.RemoveAppGroupDistribIDs(ids...)
}

// ClearAppGroupDistribConfigs clears all "appGroupDistribConfigs" edges to the AsAppGroupDistributionData entity.
func (aagu *AsAllGroupUpdate) ClearAppGroupDistribConfigs() *AsAllGroupUpdate {
	aagu.mutation.ClearAppGroupDistribConfigs()
	return aagu
}

// RemoveAppGroupDistribConfigIDs removes the "appGroupDistribConfigs" edge to AsAppGroupDistributionData entities by IDs.
func (aagu *AsAllGroupUpdate) RemoveAppGroupDistribConfigIDs(ids ...int64) *AsAllGroupUpdate {
	aagu.mutation.RemoveAppGroupDistribConfigIDs(ids...)
	return aagu
}

// RemoveAppGroupDistribConfigs removes "appGroupDistribConfigs" edges to AsAppGroupDistributionData entities.
func (aagu *AsAllGroupUpdate) RemoveAppGroupDistribConfigs(a ...*AsAppGroupDistributionData) *AsAllGroupUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aagu.RemoveAppGroupDistribConfigIDs(ids...)
}

// ClearAppGroupDistribsRelation clears all "appGroupDistribsRelation" edges to the AsMarketAppGroupDistributionRelation entity.
func (aagu *AsAllGroupUpdate) ClearAppGroupDistribsRelation() *AsAllGroupUpdate {
	aagu.mutation.ClearAppGroupDistribsRelation()
	return aagu
}

// RemoveAppGroupDistribsRelationIDs removes the "appGroupDistribsRelation" edge to AsMarketAppGroupDistributionRelation entities by IDs.
func (aagu *AsAllGroupUpdate) RemoveAppGroupDistribsRelationIDs(ids ...int64) *AsAllGroupUpdate {
	aagu.mutation.RemoveAppGroupDistribsRelationIDs(ids...)
	return aagu
}

// RemoveAppGroupDistribsRelation removes "appGroupDistribsRelation" edges to AsMarketAppGroupDistributionRelation entities.
func (aagu *AsAllGroupUpdate) RemoveAppGroupDistribsRelation(a ...*AsMarketAppGroupDistributionRelation) *AsAllGroupUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aagu.RemoveAppGroupDistribsRelationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aagu *AsAllGroupUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	aagu.defaults()
	if len(aagu.hooks) == 0 {
		affected, err = aagu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsAllGroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aagu.mutation = mutation
			affected, err = aagu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(aagu.hooks) - 1; i >= 0; i-- {
			if aagu.hooks[i] == nil {
				return 0, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = aagu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aagu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (aagu *AsAllGroupUpdate) SaveX(ctx context.Context) int {
	affected, err := aagu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aagu *AsAllGroupUpdate) Exec(ctx context.Context) error {
	_, err := aagu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aagu *AsAllGroupUpdate) ExecX(ctx context.Context) {
	if err := aagu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aagu *AsAllGroupUpdate) defaults() {
	if _, ok := aagu.mutation.UpdateTime(); !ok && !aagu.mutation.UpdateTimeCleared() {
		v := asallgroup.UpdateDefaultUpdateTime()
		aagu.mutation.SetUpdateTime(v)
	}
}

func (aagu *AsAllGroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asallgroup.Table,
			Columns: asallgroup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asallgroup.FieldID,
			},
		},
	}
	if ps := aagu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aagu.mutation.TenantCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asallgroup.FieldTenantCode,
		})
	}
	if aagu.mutation.TenantCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asallgroup.FieldTenantCode,
		})
	}
	if value, ok := aagu.mutation.GroupName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asallgroup.FieldGroupName,
		})
	}
	if aagu.mutation.GroupNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asallgroup.FieldGroupName,
		})
	}
	if value, ok := aagu.mutation.GroupDescription(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asallgroup.FieldGroupDescription,
		})
	}
	if aagu.mutation.GroupDescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asallgroup.FieldGroupDescription,
		})
	}
	if value, ok := aagu.mutation.GroupCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asallgroup.FieldGroupCode,
		})
	}
	if aagu.mutation.GroupCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asallgroup.FieldGroupCode,
		})
	}
	if value, ok := aagu.mutation.Depth(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asallgroup.FieldDepth,
		})
	}
	if value, ok := aagu.mutation.AddedDepth(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asallgroup.FieldDepth,
		})
	}
	if aagu.mutation.DepthCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asallgroup.FieldDepth,
		})
	}
	if value, ok := aagu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asallgroup.FieldType,
		})
	}
	if value, ok := aagu.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asallgroup.FieldType,
		})
	}
	if aagu.mutation.TypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asallgroup.FieldType,
		})
	}
	if value, ok := aagu.mutation.SocialCreditCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asallgroup.FieldSocialCreditCode,
		})
	}
	if aagu.mutation.SocialCreditCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asallgroup.FieldSocialCreditCode,
		})
	}
	if value, ok := aagu.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asallgroup.FieldIsDeleted,
		})
	}
	if value, ok := aagu.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asallgroup.FieldIsDeleted,
		})
	}
	if value, ok := aagu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asallgroup.FieldStatus,
		})
	}
	if value, ok := aagu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asallgroup.FieldStatus,
		})
	}
	if aagu.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asallgroup.FieldStatus,
		})
	}
	if value, ok := aagu.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asallgroup.FieldCreateUser,
		})
	}
	if value, ok := aagu.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asallgroup.FieldCreateUser,
		})
	}
	if aagu.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asallgroup.FieldCreateUser,
		})
	}
	if value, ok := aagu.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asallgroup.FieldUpdateUser,
		})
	}
	if value, ok := aagu.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asallgroup.FieldUpdateUser,
		})
	}
	if aagu.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asallgroup.FieldUpdateUser,
		})
	}
	if aagu.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asallgroup.FieldCreateTime,
		})
	}
	if value, ok := aagu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asallgroup.FieldUpdateTime,
		})
	}
	if aagu.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asallgroup.FieldUpdateTime,
		})
	}
	if aagu.mutation.AllLayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asallgroup.AllLayerTable,
			Columns: []string{asallgroup.AllLayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: aslayer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aagu.mutation.RemovedAllLayerIDs(); len(nodes) > 0 && !aagu.mutation.AllLayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asallgroup.AllLayerTable,
			Columns: []string{asallgroup.AllLayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: aslayer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aagu.mutation.AllLayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asallgroup.AllLayerTable,
			Columns: []string{asallgroup.AllLayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: aslayer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aagu.mutation.AppPurchasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asallgroup.AppPurchasesTable,
			Columns: []string{asallgroup.AppPurchasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapppurchase.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aagu.mutation.RemovedAppPurchasesIDs(); len(nodes) > 0 && !aagu.mutation.AppPurchasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asallgroup.AppPurchasesTable,
			Columns: []string{asallgroup.AppPurchasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapppurchase.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aagu.mutation.AppPurchasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asallgroup.AppPurchasesTable,
			Columns: []string{asallgroup.AppPurchasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapppurchase.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aagu.mutation.AllTenantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asallgroup.AllTenantsTable,
			Columns: []string{asallgroup.AllTenantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asgrouptenantrelations.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aagu.mutation.RemovedAllTenantsIDs(); len(nodes) > 0 && !aagu.mutation.AllTenantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asallgroup.AllTenantsTable,
			Columns: []string{asallgroup.AllTenantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asgrouptenantrelations.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aagu.mutation.AllTenantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asallgroup.AllTenantsTable,
			Columns: []string{asallgroup.AllTenantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asgrouptenantrelations.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aagu.mutation.AppGroupDistribsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asallgroup.AppGroupDistribsTable,
			Columns: []string{asallgroup.AppGroupDistribsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappgroupdistribution.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aagu.mutation.RemovedAppGroupDistribsIDs(); len(nodes) > 0 && !aagu.mutation.AppGroupDistribsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asallgroup.AppGroupDistribsTable,
			Columns: []string{asallgroup.AppGroupDistribsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappgroupdistribution.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aagu.mutation.AppGroupDistribsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asallgroup.AppGroupDistribsTable,
			Columns: []string{asallgroup.AppGroupDistribsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappgroupdistribution.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aagu.mutation.AppGroupDistribConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asallgroup.AppGroupDistribConfigsTable,
			Columns: []string{asallgroup.AppGroupDistribConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asappgroupdistributiondata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aagu.mutation.RemovedAppGroupDistribConfigsIDs(); len(nodes) > 0 && !aagu.mutation.AppGroupDistribConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asallgroup.AppGroupDistribConfigsTable,
			Columns: []string{asallgroup.AppGroupDistribConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asappgroupdistributiondata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aagu.mutation.AppGroupDistribConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asallgroup.AppGroupDistribConfigsTable,
			Columns: []string{asallgroup.AppGroupDistribConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asappgroupdistributiondata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aagu.mutation.AppGroupDistribsRelationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asallgroup.AppGroupDistribsRelationTable,
			Columns: []string{asallgroup.AppGroupDistribsRelationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappgroupdistributionrelation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aagu.mutation.RemovedAppGroupDistribsRelationIDs(); len(nodes) > 0 && !aagu.mutation.AppGroupDistribsRelationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asallgroup.AppGroupDistribsRelationTable,
			Columns: []string{asallgroup.AppGroupDistribsRelationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappgroupdistributionrelation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aagu.mutation.AppGroupDistribsRelationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asallgroup.AppGroupDistribsRelationTable,
			Columns: []string{asallgroup.AppGroupDistribsRelationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappgroupdistributionrelation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aagu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asallgroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AsAllGroupUpdateOne is the builder for updating a single AsAllGroup entity.
type AsAllGroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AsAllGroupMutation
}

// SetTenantCode sets the "tenant_code" field.
func (aaguo *AsAllGroupUpdateOne) SetTenantCode(s string) *AsAllGroupUpdateOne {
	aaguo.mutation.SetTenantCode(s)
	return aaguo
}

// SetNillableTenantCode sets the "tenant_code" field if the given value is not nil.
func (aaguo *AsAllGroupUpdateOne) SetNillableTenantCode(s *string) *AsAllGroupUpdateOne {
	if s != nil {
		aaguo.SetTenantCode(*s)
	}
	return aaguo
}

// ClearTenantCode clears the value of the "tenant_code" field.
func (aaguo *AsAllGroupUpdateOne) ClearTenantCode() *AsAllGroupUpdateOne {
	aaguo.mutation.ClearTenantCode()
	return aaguo
}

// SetGroupName sets the "group_name" field.
func (aaguo *AsAllGroupUpdateOne) SetGroupName(s string) *AsAllGroupUpdateOne {
	aaguo.mutation.SetGroupName(s)
	return aaguo
}

// SetNillableGroupName sets the "group_name" field if the given value is not nil.
func (aaguo *AsAllGroupUpdateOne) SetNillableGroupName(s *string) *AsAllGroupUpdateOne {
	if s != nil {
		aaguo.SetGroupName(*s)
	}
	return aaguo
}

// ClearGroupName clears the value of the "group_name" field.
func (aaguo *AsAllGroupUpdateOne) ClearGroupName() *AsAllGroupUpdateOne {
	aaguo.mutation.ClearGroupName()
	return aaguo
}

// SetGroupDescription sets the "group_description" field.
func (aaguo *AsAllGroupUpdateOne) SetGroupDescription(s string) *AsAllGroupUpdateOne {
	aaguo.mutation.SetGroupDescription(s)
	return aaguo
}

// SetNillableGroupDescription sets the "group_description" field if the given value is not nil.
func (aaguo *AsAllGroupUpdateOne) SetNillableGroupDescription(s *string) *AsAllGroupUpdateOne {
	if s != nil {
		aaguo.SetGroupDescription(*s)
	}
	return aaguo
}

// ClearGroupDescription clears the value of the "group_description" field.
func (aaguo *AsAllGroupUpdateOne) ClearGroupDescription() *AsAllGroupUpdateOne {
	aaguo.mutation.ClearGroupDescription()
	return aaguo
}

// SetGroupCode sets the "group_code" field.
func (aaguo *AsAllGroupUpdateOne) SetGroupCode(s string) *AsAllGroupUpdateOne {
	aaguo.mutation.SetGroupCode(s)
	return aaguo
}

// SetNillableGroupCode sets the "group_code" field if the given value is not nil.
func (aaguo *AsAllGroupUpdateOne) SetNillableGroupCode(s *string) *AsAllGroupUpdateOne {
	if s != nil {
		aaguo.SetGroupCode(*s)
	}
	return aaguo
}

// ClearGroupCode clears the value of the "group_code" field.
func (aaguo *AsAllGroupUpdateOne) ClearGroupCode() *AsAllGroupUpdateOne {
	aaguo.mutation.ClearGroupCode()
	return aaguo
}

// SetDepth sets the "depth" field.
func (aaguo *AsAllGroupUpdateOne) SetDepth(i int64) *AsAllGroupUpdateOne {
	aaguo.mutation.ResetDepth()
	aaguo.mutation.SetDepth(i)
	return aaguo
}

// SetNillableDepth sets the "depth" field if the given value is not nil.
func (aaguo *AsAllGroupUpdateOne) SetNillableDepth(i *int64) *AsAllGroupUpdateOne {
	if i != nil {
		aaguo.SetDepth(*i)
	}
	return aaguo
}

// AddDepth adds i to the "depth" field.
func (aaguo *AsAllGroupUpdateOne) AddDepth(i int64) *AsAllGroupUpdateOne {
	aaguo.mutation.AddDepth(i)
	return aaguo
}

// ClearDepth clears the value of the "depth" field.
func (aaguo *AsAllGroupUpdateOne) ClearDepth() *AsAllGroupUpdateOne {
	aaguo.mutation.ClearDepth()
	return aaguo
}

// SetType sets the "type" field.
func (aaguo *AsAllGroupUpdateOne) SetType(i int64) *AsAllGroupUpdateOne {
	aaguo.mutation.ResetType()
	aaguo.mutation.SetType(i)
	return aaguo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (aaguo *AsAllGroupUpdateOne) SetNillableType(i *int64) *AsAllGroupUpdateOne {
	if i != nil {
		aaguo.SetType(*i)
	}
	return aaguo
}

// AddType adds i to the "type" field.
func (aaguo *AsAllGroupUpdateOne) AddType(i int64) *AsAllGroupUpdateOne {
	aaguo.mutation.AddType(i)
	return aaguo
}

// ClearType clears the value of the "type" field.
func (aaguo *AsAllGroupUpdateOne) ClearType() *AsAllGroupUpdateOne {
	aaguo.mutation.ClearType()
	return aaguo
}

// SetSocialCreditCode sets the "social_credit_code" field.
func (aaguo *AsAllGroupUpdateOne) SetSocialCreditCode(s string) *AsAllGroupUpdateOne {
	aaguo.mutation.SetSocialCreditCode(s)
	return aaguo
}

// SetNillableSocialCreditCode sets the "social_credit_code" field if the given value is not nil.
func (aaguo *AsAllGroupUpdateOne) SetNillableSocialCreditCode(s *string) *AsAllGroupUpdateOne {
	if s != nil {
		aaguo.SetSocialCreditCode(*s)
	}
	return aaguo
}

// ClearSocialCreditCode clears the value of the "social_credit_code" field.
func (aaguo *AsAllGroupUpdateOne) ClearSocialCreditCode() *AsAllGroupUpdateOne {
	aaguo.mutation.ClearSocialCreditCode()
	return aaguo
}

// SetIsDeleted sets the "is_deleted" field.
func (aaguo *AsAllGroupUpdateOne) SetIsDeleted(i int64) *AsAllGroupUpdateOne {
	aaguo.mutation.ResetIsDeleted()
	aaguo.mutation.SetIsDeleted(i)
	return aaguo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (aaguo *AsAllGroupUpdateOne) SetNillableIsDeleted(i *int64) *AsAllGroupUpdateOne {
	if i != nil {
		aaguo.SetIsDeleted(*i)
	}
	return aaguo
}

// AddIsDeleted adds i to the "is_deleted" field.
func (aaguo *AsAllGroupUpdateOne) AddIsDeleted(i int64) *AsAllGroupUpdateOne {
	aaguo.mutation.AddIsDeleted(i)
	return aaguo
}

// SetStatus sets the "status" field.
func (aaguo *AsAllGroupUpdateOne) SetStatus(i int64) *AsAllGroupUpdateOne {
	aaguo.mutation.ResetStatus()
	aaguo.mutation.SetStatus(i)
	return aaguo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (aaguo *AsAllGroupUpdateOne) SetNillableStatus(i *int64) *AsAllGroupUpdateOne {
	if i != nil {
		aaguo.SetStatus(*i)
	}
	return aaguo
}

// AddStatus adds i to the "status" field.
func (aaguo *AsAllGroupUpdateOne) AddStatus(i int64) *AsAllGroupUpdateOne {
	aaguo.mutation.AddStatus(i)
	return aaguo
}

// ClearStatus clears the value of the "status" field.
func (aaguo *AsAllGroupUpdateOne) ClearStatus() *AsAllGroupUpdateOne {
	aaguo.mutation.ClearStatus()
	return aaguo
}

// SetCreateUser sets the "create_user" field.
func (aaguo *AsAllGroupUpdateOne) SetCreateUser(i int64) *AsAllGroupUpdateOne {
	aaguo.mutation.ResetCreateUser()
	aaguo.mutation.SetCreateUser(i)
	return aaguo
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (aaguo *AsAllGroupUpdateOne) SetNillableCreateUser(i *int64) *AsAllGroupUpdateOne {
	if i != nil {
		aaguo.SetCreateUser(*i)
	}
	return aaguo
}

// AddCreateUser adds i to the "create_user" field.
func (aaguo *AsAllGroupUpdateOne) AddCreateUser(i int64) *AsAllGroupUpdateOne {
	aaguo.mutation.AddCreateUser(i)
	return aaguo
}

// ClearCreateUser clears the value of the "create_user" field.
func (aaguo *AsAllGroupUpdateOne) ClearCreateUser() *AsAllGroupUpdateOne {
	aaguo.mutation.ClearCreateUser()
	return aaguo
}

// SetUpdateUser sets the "update_user" field.
func (aaguo *AsAllGroupUpdateOne) SetUpdateUser(i int64) *AsAllGroupUpdateOne {
	aaguo.mutation.ResetUpdateUser()
	aaguo.mutation.SetUpdateUser(i)
	return aaguo
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (aaguo *AsAllGroupUpdateOne) SetNillableUpdateUser(i *int64) *AsAllGroupUpdateOne {
	if i != nil {
		aaguo.SetUpdateUser(*i)
	}
	return aaguo
}

// AddUpdateUser adds i to the "update_user" field.
func (aaguo *AsAllGroupUpdateOne) AddUpdateUser(i int64) *AsAllGroupUpdateOne {
	aaguo.mutation.AddUpdateUser(i)
	return aaguo
}

// ClearUpdateUser clears the value of the "update_user" field.
func (aaguo *AsAllGroupUpdateOne) ClearUpdateUser() *AsAllGroupUpdateOne {
	aaguo.mutation.ClearUpdateUser()
	return aaguo
}

// SetUpdateTime sets the "update_time" field.
func (aaguo *AsAllGroupUpdateOne) SetUpdateTime(dt date.DateTime) *AsAllGroupUpdateOne {
	aaguo.mutation.SetUpdateTime(dt)
	return aaguo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (aaguo *AsAllGroupUpdateOne) ClearUpdateTime() *AsAllGroupUpdateOne {
	aaguo.mutation.ClearUpdateTime()
	return aaguo
}

// AddAllLayerIDs adds the "allLayer" edge to the AsLayer entity by IDs.
func (aaguo *AsAllGroupUpdateOne) AddAllLayerIDs(ids ...int64) *AsAllGroupUpdateOne {
	aaguo.mutation.AddAllLayerIDs(ids...)
	return aaguo
}

// AddAllLayer adds the "allLayer" edges to the AsLayer entity.
func (aaguo *AsAllGroupUpdateOne) AddAllLayer(a ...*AsLayer) *AsAllGroupUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aaguo.AddAllLayerIDs(ids...)
}

// AddAppPurchaseIDs adds the "appPurchases" edge to the AsMarketAppPurchase entity by IDs.
func (aaguo *AsAllGroupUpdateOne) AddAppPurchaseIDs(ids ...int64) *AsAllGroupUpdateOne {
	aaguo.mutation.AddAppPurchaseIDs(ids...)
	return aaguo
}

// AddAppPurchases adds the "appPurchases" edges to the AsMarketAppPurchase entity.
func (aaguo *AsAllGroupUpdateOne) AddAppPurchases(a ...*AsMarketAppPurchase) *AsAllGroupUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aaguo.AddAppPurchaseIDs(ids...)
}

// AddAllTenantIDs adds the "allTenants" edge to the AsGroupTenantRelations entity by IDs.
func (aaguo *AsAllGroupUpdateOne) AddAllTenantIDs(ids ...int64) *AsAllGroupUpdateOne {
	aaguo.mutation.AddAllTenantIDs(ids...)
	return aaguo
}

// AddAllTenants adds the "allTenants" edges to the AsGroupTenantRelations entity.
func (aaguo *AsAllGroupUpdateOne) AddAllTenants(a ...*AsGroupTenantRelations) *AsAllGroupUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aaguo.AddAllTenantIDs(ids...)
}

// AddAppGroupDistribIDs adds the "appGroupDistribs" edge to the AsMarketAppGroupDistribution entity by IDs.
func (aaguo *AsAllGroupUpdateOne) AddAppGroupDistribIDs(ids ...int64) *AsAllGroupUpdateOne {
	aaguo.mutation.AddAppGroupDistribIDs(ids...)
	return aaguo
}

// AddAppGroupDistribs adds the "appGroupDistribs" edges to the AsMarketAppGroupDistribution entity.
func (aaguo *AsAllGroupUpdateOne) AddAppGroupDistribs(a ...*AsMarketAppGroupDistribution) *AsAllGroupUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aaguo.AddAppGroupDistribIDs(ids...)
}

// AddAppGroupDistribConfigIDs adds the "appGroupDistribConfigs" edge to the AsAppGroupDistributionData entity by IDs.
func (aaguo *AsAllGroupUpdateOne) AddAppGroupDistribConfigIDs(ids ...int64) *AsAllGroupUpdateOne {
	aaguo.mutation.AddAppGroupDistribConfigIDs(ids...)
	return aaguo
}

// AddAppGroupDistribConfigs adds the "appGroupDistribConfigs" edges to the AsAppGroupDistributionData entity.
func (aaguo *AsAllGroupUpdateOne) AddAppGroupDistribConfigs(a ...*AsAppGroupDistributionData) *AsAllGroupUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aaguo.AddAppGroupDistribConfigIDs(ids...)
}

// AddAppGroupDistribsRelationIDs adds the "appGroupDistribsRelation" edge to the AsMarketAppGroupDistributionRelation entity by IDs.
func (aaguo *AsAllGroupUpdateOne) AddAppGroupDistribsRelationIDs(ids ...int64) *AsAllGroupUpdateOne {
	aaguo.mutation.AddAppGroupDistribsRelationIDs(ids...)
	return aaguo
}

// AddAppGroupDistribsRelation adds the "appGroupDistribsRelation" edges to the AsMarketAppGroupDistributionRelation entity.
func (aaguo *AsAllGroupUpdateOne) AddAppGroupDistribsRelation(a ...*AsMarketAppGroupDistributionRelation) *AsAllGroupUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aaguo.AddAppGroupDistribsRelationIDs(ids...)
}

// Mutation returns the AsAllGroupMutation object of the builder.
func (aaguo *AsAllGroupUpdateOne) Mutation() *AsAllGroupMutation {
	return aaguo.mutation
}

// ClearAllLayer clears all "allLayer" edges to the AsLayer entity.
func (aaguo *AsAllGroupUpdateOne) ClearAllLayer() *AsAllGroupUpdateOne {
	aaguo.mutation.ClearAllLayer()
	return aaguo
}

// RemoveAllLayerIDs removes the "allLayer" edge to AsLayer entities by IDs.
func (aaguo *AsAllGroupUpdateOne) RemoveAllLayerIDs(ids ...int64) *AsAllGroupUpdateOne {
	aaguo.mutation.RemoveAllLayerIDs(ids...)
	return aaguo
}

// RemoveAllLayer removes "allLayer" edges to AsLayer entities.
func (aaguo *AsAllGroupUpdateOne) RemoveAllLayer(a ...*AsLayer) *AsAllGroupUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aaguo.RemoveAllLayerIDs(ids...)
}

// ClearAppPurchases clears all "appPurchases" edges to the AsMarketAppPurchase entity.
func (aaguo *AsAllGroupUpdateOne) ClearAppPurchases() *AsAllGroupUpdateOne {
	aaguo.mutation.ClearAppPurchases()
	return aaguo
}

// RemoveAppPurchaseIDs removes the "appPurchases" edge to AsMarketAppPurchase entities by IDs.
func (aaguo *AsAllGroupUpdateOne) RemoveAppPurchaseIDs(ids ...int64) *AsAllGroupUpdateOne {
	aaguo.mutation.RemoveAppPurchaseIDs(ids...)
	return aaguo
}

// RemoveAppPurchases removes "appPurchases" edges to AsMarketAppPurchase entities.
func (aaguo *AsAllGroupUpdateOne) RemoveAppPurchases(a ...*AsMarketAppPurchase) *AsAllGroupUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aaguo.RemoveAppPurchaseIDs(ids...)
}

// ClearAllTenants clears all "allTenants" edges to the AsGroupTenantRelations entity.
func (aaguo *AsAllGroupUpdateOne) ClearAllTenants() *AsAllGroupUpdateOne {
	aaguo.mutation.ClearAllTenants()
	return aaguo
}

// RemoveAllTenantIDs removes the "allTenants" edge to AsGroupTenantRelations entities by IDs.
func (aaguo *AsAllGroupUpdateOne) RemoveAllTenantIDs(ids ...int64) *AsAllGroupUpdateOne {
	aaguo.mutation.RemoveAllTenantIDs(ids...)
	return aaguo
}

// RemoveAllTenants removes "allTenants" edges to AsGroupTenantRelations entities.
func (aaguo *AsAllGroupUpdateOne) RemoveAllTenants(a ...*AsGroupTenantRelations) *AsAllGroupUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aaguo.RemoveAllTenantIDs(ids...)
}

// ClearAppGroupDistribs clears all "appGroupDistribs" edges to the AsMarketAppGroupDistribution entity.
func (aaguo *AsAllGroupUpdateOne) ClearAppGroupDistribs() *AsAllGroupUpdateOne {
	aaguo.mutation.ClearAppGroupDistribs()
	return aaguo
}

// RemoveAppGroupDistribIDs removes the "appGroupDistribs" edge to AsMarketAppGroupDistribution entities by IDs.
func (aaguo *AsAllGroupUpdateOne) RemoveAppGroupDistribIDs(ids ...int64) *AsAllGroupUpdateOne {
	aaguo.mutation.RemoveAppGroupDistribIDs(ids...)
	return aaguo
}

// RemoveAppGroupDistribs removes "appGroupDistribs" edges to AsMarketAppGroupDistribution entities.
func (aaguo *AsAllGroupUpdateOne) RemoveAppGroupDistribs(a ...*AsMarketAppGroupDistribution) *AsAllGroupUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aaguo.RemoveAppGroupDistribIDs(ids...)
}

// ClearAppGroupDistribConfigs clears all "appGroupDistribConfigs" edges to the AsAppGroupDistributionData entity.
func (aaguo *AsAllGroupUpdateOne) ClearAppGroupDistribConfigs() *AsAllGroupUpdateOne {
	aaguo.mutation.ClearAppGroupDistribConfigs()
	return aaguo
}

// RemoveAppGroupDistribConfigIDs removes the "appGroupDistribConfigs" edge to AsAppGroupDistributionData entities by IDs.
func (aaguo *AsAllGroupUpdateOne) RemoveAppGroupDistribConfigIDs(ids ...int64) *AsAllGroupUpdateOne {
	aaguo.mutation.RemoveAppGroupDistribConfigIDs(ids...)
	return aaguo
}

// RemoveAppGroupDistribConfigs removes "appGroupDistribConfigs" edges to AsAppGroupDistributionData entities.
func (aaguo *AsAllGroupUpdateOne) RemoveAppGroupDistribConfigs(a ...*AsAppGroupDistributionData) *AsAllGroupUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aaguo.RemoveAppGroupDistribConfigIDs(ids...)
}

// ClearAppGroupDistribsRelation clears all "appGroupDistribsRelation" edges to the AsMarketAppGroupDistributionRelation entity.
func (aaguo *AsAllGroupUpdateOne) ClearAppGroupDistribsRelation() *AsAllGroupUpdateOne {
	aaguo.mutation.ClearAppGroupDistribsRelation()
	return aaguo
}

// RemoveAppGroupDistribsRelationIDs removes the "appGroupDistribsRelation" edge to AsMarketAppGroupDistributionRelation entities by IDs.
func (aaguo *AsAllGroupUpdateOne) RemoveAppGroupDistribsRelationIDs(ids ...int64) *AsAllGroupUpdateOne {
	aaguo.mutation.RemoveAppGroupDistribsRelationIDs(ids...)
	return aaguo
}

// RemoveAppGroupDistribsRelation removes "appGroupDistribsRelation" edges to AsMarketAppGroupDistributionRelation entities.
func (aaguo *AsAllGroupUpdateOne) RemoveAppGroupDistribsRelation(a ...*AsMarketAppGroupDistributionRelation) *AsAllGroupUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aaguo.RemoveAppGroupDistribsRelationIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aaguo *AsAllGroupUpdateOne) Select(field string, fields ...string) *AsAllGroupUpdateOne {
	aaguo.fields = append([]string{field}, fields...)
	return aaguo
}

// Save executes the query and returns the updated AsAllGroup entity.
func (aaguo *AsAllGroupUpdateOne) Save(ctx context.Context) (*AsAllGroup, error) {
	var (
		err  error
		node *AsAllGroup
	)
	aaguo.defaults()
	if len(aaguo.hooks) == 0 {
		node, err = aaguo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsAllGroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aaguo.mutation = mutation
			node, err = aaguo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aaguo.hooks) - 1; i >= 0; i-- {
			if aaguo.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = aaguo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aaguo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aaguo *AsAllGroupUpdateOne) SaveX(ctx context.Context) *AsAllGroup {
	node, err := aaguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aaguo *AsAllGroupUpdateOne) Exec(ctx context.Context) error {
	_, err := aaguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aaguo *AsAllGroupUpdateOne) ExecX(ctx context.Context) {
	if err := aaguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aaguo *AsAllGroupUpdateOne) defaults() {
	if _, ok := aaguo.mutation.UpdateTime(); !ok && !aaguo.mutation.UpdateTimeCleared() {
		v := asallgroup.UpdateDefaultUpdateTime()
		aaguo.mutation.SetUpdateTime(v)
	}
}

func (aaguo *AsAllGroupUpdateOne) sqlSave(ctx context.Context) (_node *AsAllGroup, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asallgroup.Table,
			Columns: asallgroup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asallgroup.FieldID,
			},
		},
	}
	id, ok := aaguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`schema: missing "AsAllGroup.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aaguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asallgroup.FieldID)
		for _, f := range fields {
			if !asallgroup.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("schema: invalid field %q for query", f)}
			}
			if f != asallgroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aaguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aaguo.mutation.TenantCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asallgroup.FieldTenantCode,
		})
	}
	if aaguo.mutation.TenantCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asallgroup.FieldTenantCode,
		})
	}
	if value, ok := aaguo.mutation.GroupName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asallgroup.FieldGroupName,
		})
	}
	if aaguo.mutation.GroupNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asallgroup.FieldGroupName,
		})
	}
	if value, ok := aaguo.mutation.GroupDescription(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asallgroup.FieldGroupDescription,
		})
	}
	if aaguo.mutation.GroupDescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asallgroup.FieldGroupDescription,
		})
	}
	if value, ok := aaguo.mutation.GroupCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asallgroup.FieldGroupCode,
		})
	}
	if aaguo.mutation.GroupCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asallgroup.FieldGroupCode,
		})
	}
	if value, ok := aaguo.mutation.Depth(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asallgroup.FieldDepth,
		})
	}
	if value, ok := aaguo.mutation.AddedDepth(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asallgroup.FieldDepth,
		})
	}
	if aaguo.mutation.DepthCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asallgroup.FieldDepth,
		})
	}
	if value, ok := aaguo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asallgroup.FieldType,
		})
	}
	if value, ok := aaguo.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asallgroup.FieldType,
		})
	}
	if aaguo.mutation.TypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asallgroup.FieldType,
		})
	}
	if value, ok := aaguo.mutation.SocialCreditCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asallgroup.FieldSocialCreditCode,
		})
	}
	if aaguo.mutation.SocialCreditCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asallgroup.FieldSocialCreditCode,
		})
	}
	if value, ok := aaguo.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asallgroup.FieldIsDeleted,
		})
	}
	if value, ok := aaguo.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asallgroup.FieldIsDeleted,
		})
	}
	if value, ok := aaguo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asallgroup.FieldStatus,
		})
	}
	if value, ok := aaguo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asallgroup.FieldStatus,
		})
	}
	if aaguo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asallgroup.FieldStatus,
		})
	}
	if value, ok := aaguo.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asallgroup.FieldCreateUser,
		})
	}
	if value, ok := aaguo.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asallgroup.FieldCreateUser,
		})
	}
	if aaguo.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asallgroup.FieldCreateUser,
		})
	}
	if value, ok := aaguo.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asallgroup.FieldUpdateUser,
		})
	}
	if value, ok := aaguo.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asallgroup.FieldUpdateUser,
		})
	}
	if aaguo.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asallgroup.FieldUpdateUser,
		})
	}
	if aaguo.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asallgroup.FieldCreateTime,
		})
	}
	if value, ok := aaguo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asallgroup.FieldUpdateTime,
		})
	}
	if aaguo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asallgroup.FieldUpdateTime,
		})
	}
	if aaguo.mutation.AllLayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asallgroup.AllLayerTable,
			Columns: []string{asallgroup.AllLayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: aslayer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aaguo.mutation.RemovedAllLayerIDs(); len(nodes) > 0 && !aaguo.mutation.AllLayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asallgroup.AllLayerTable,
			Columns: []string{asallgroup.AllLayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: aslayer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aaguo.mutation.AllLayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asallgroup.AllLayerTable,
			Columns: []string{asallgroup.AllLayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: aslayer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aaguo.mutation.AppPurchasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asallgroup.AppPurchasesTable,
			Columns: []string{asallgroup.AppPurchasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapppurchase.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aaguo.mutation.RemovedAppPurchasesIDs(); len(nodes) > 0 && !aaguo.mutation.AppPurchasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asallgroup.AppPurchasesTable,
			Columns: []string{asallgroup.AppPurchasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapppurchase.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aaguo.mutation.AppPurchasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asallgroup.AppPurchasesTable,
			Columns: []string{asallgroup.AppPurchasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapppurchase.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aaguo.mutation.AllTenantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asallgroup.AllTenantsTable,
			Columns: []string{asallgroup.AllTenantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asgrouptenantrelations.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aaguo.mutation.RemovedAllTenantsIDs(); len(nodes) > 0 && !aaguo.mutation.AllTenantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asallgroup.AllTenantsTable,
			Columns: []string{asallgroup.AllTenantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asgrouptenantrelations.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aaguo.mutation.AllTenantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asallgroup.AllTenantsTable,
			Columns: []string{asallgroup.AllTenantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asgrouptenantrelations.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aaguo.mutation.AppGroupDistribsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asallgroup.AppGroupDistribsTable,
			Columns: []string{asallgroup.AppGroupDistribsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappgroupdistribution.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aaguo.mutation.RemovedAppGroupDistribsIDs(); len(nodes) > 0 && !aaguo.mutation.AppGroupDistribsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asallgroup.AppGroupDistribsTable,
			Columns: []string{asallgroup.AppGroupDistribsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappgroupdistribution.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aaguo.mutation.AppGroupDistribsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asallgroup.AppGroupDistribsTable,
			Columns: []string{asallgroup.AppGroupDistribsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappgroupdistribution.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aaguo.mutation.AppGroupDistribConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asallgroup.AppGroupDistribConfigsTable,
			Columns: []string{asallgroup.AppGroupDistribConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asappgroupdistributiondata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aaguo.mutation.RemovedAppGroupDistribConfigsIDs(); len(nodes) > 0 && !aaguo.mutation.AppGroupDistribConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asallgroup.AppGroupDistribConfigsTable,
			Columns: []string{asallgroup.AppGroupDistribConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asappgroupdistributiondata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aaguo.mutation.AppGroupDistribConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asallgroup.AppGroupDistribConfigsTable,
			Columns: []string{asallgroup.AppGroupDistribConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asappgroupdistributiondata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aaguo.mutation.AppGroupDistribsRelationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asallgroup.AppGroupDistribsRelationTable,
			Columns: []string{asallgroup.AppGroupDistribsRelationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappgroupdistributionrelation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aaguo.mutation.RemovedAppGroupDistribsRelationIDs(); len(nodes) > 0 && !aaguo.mutation.AppGroupDistribsRelationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asallgroup.AppGroupDistribsRelationTable,
			Columns: []string{asallgroup.AppGroupDistribsRelationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappgroupdistributionrelation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aaguo.mutation.AppGroupDistribsRelationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asallgroup.AppGroupDistribsRelationTable,
			Columns: []string{asallgroup.AppGroupDistribsRelationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappgroupdistributionrelation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AsAllGroup{config: aaguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aaguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asallgroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
