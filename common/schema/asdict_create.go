// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/asdict"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsDictCreate is the builder for creating a AsDict entity.
type AsDictCreate struct {
	config
	mutation *AsDictMutation
	hooks    []Hook
}

// SetParentID sets the "parent_id" field.
func (adc *AsDictCreate) SetParentID(i int64) *AsDictCreate {
	adc.mutation.SetParentID(i)
	return adc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (adc *AsDictCreate) SetNillableParentID(i *int64) *AsDictCreate {
	if i != nil {
		adc.SetParentID(*i)
	}
	return adc
}

// SetCode sets the "code" field.
func (adc *AsDictCreate) SetCode(s string) *AsDictCreate {
	adc.mutation.SetCode(s)
	return adc
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (adc *AsDictCreate) SetNillableCode(s *string) *AsDictCreate {
	if s != nil {
		adc.SetCode(*s)
	}
	return adc
}

// SetDictKey sets the "dict_key" field.
func (adc *AsDictCreate) SetDictKey(i int64) *AsDictCreate {
	adc.mutation.SetDictKey(i)
	return adc
}

// SetNillableDictKey sets the "dict_key" field if the given value is not nil.
func (adc *AsDictCreate) SetNillableDictKey(i *int64) *AsDictCreate {
	if i != nil {
		adc.SetDictKey(*i)
	}
	return adc
}

// SetDictValue sets the "dict_value" field.
func (adc *AsDictCreate) SetDictValue(s string) *AsDictCreate {
	adc.mutation.SetDictValue(s)
	return adc
}

// SetNillableDictValue sets the "dict_value" field if the given value is not nil.
func (adc *AsDictCreate) SetNillableDictValue(s *string) *AsDictCreate {
	if s != nil {
		adc.SetDictValue(*s)
	}
	return adc
}

// SetSort sets the "sort" field.
func (adc *AsDictCreate) SetSort(i int64) *AsDictCreate {
	adc.mutation.SetSort(i)
	return adc
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (adc *AsDictCreate) SetNillableSort(i *int64) *AsDictCreate {
	if i != nil {
		adc.SetSort(*i)
	}
	return adc
}

// SetRemark sets the "remark" field.
func (adc *AsDictCreate) SetRemark(s string) *AsDictCreate {
	adc.mutation.SetRemark(s)
	return adc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (adc *AsDictCreate) SetNillableRemark(s *string) *AsDictCreate {
	if s != nil {
		adc.SetRemark(*s)
	}
	return adc
}

// SetCurrversion sets the "currversion" field.
func (adc *AsDictCreate) SetCurrversion(i int64) *AsDictCreate {
	adc.mutation.SetCurrversion(i)
	return adc
}

// SetNillableCurrversion sets the "currversion" field if the given value is not nil.
func (adc *AsDictCreate) SetNillableCurrversion(i *int64) *AsDictCreate {
	if i != nil {
		adc.SetCurrversion(*i)
	}
	return adc
}

// SetVersion sets the "version" field.
func (adc *AsDictCreate) SetVersion(i int64) *AsDictCreate {
	adc.mutation.SetVersion(i)
	return adc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (adc *AsDictCreate) SetNillableVersion(i *int64) *AsDictCreate {
	if i != nil {
		adc.SetVersion(*i)
	}
	return adc
}

// SetDictparentID sets the "dictparent_id" field.
func (adc *AsDictCreate) SetDictparentID(i int64) *AsDictCreate {
	adc.mutation.SetDictparentID(i)
	return adc
}

// SetNillableDictparentID sets the "dictparent_id" field if the given value is not nil.
func (adc *AsDictCreate) SetNillableDictparentID(i *int64) *AsDictCreate {
	if i != nil {
		adc.SetDictparentID(*i)
	}
	return adc
}

// SetIsDeleted sets the "is_deleted" field.
func (adc *AsDictCreate) SetIsDeleted(i int64) *AsDictCreate {
	adc.mutation.SetIsDeleted(i)
	return adc
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (adc *AsDictCreate) SetNillableIsDeleted(i *int64) *AsDictCreate {
	if i != nil {
		adc.SetIsDeleted(*i)
	}
	return adc
}

// SetStatus sets the "status" field.
func (adc *AsDictCreate) SetStatus(i int64) *AsDictCreate {
	adc.mutation.SetStatus(i)
	return adc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (adc *AsDictCreate) SetNillableStatus(i *int64) *AsDictCreate {
	if i != nil {
		adc.SetStatus(*i)
	}
	return adc
}

// SetCreateUser sets the "create_user" field.
func (adc *AsDictCreate) SetCreateUser(i int64) *AsDictCreate {
	adc.mutation.SetCreateUser(i)
	return adc
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (adc *AsDictCreate) SetNillableCreateUser(i *int64) *AsDictCreate {
	if i != nil {
		adc.SetCreateUser(*i)
	}
	return adc
}

// SetUpdateUser sets the "update_user" field.
func (adc *AsDictCreate) SetUpdateUser(i int64) *AsDictCreate {
	adc.mutation.SetUpdateUser(i)
	return adc
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (adc *AsDictCreate) SetNillableUpdateUser(i *int64) *AsDictCreate {
	if i != nil {
		adc.SetUpdateUser(*i)
	}
	return adc
}

// SetCreateTime sets the "create_time" field.
func (adc *AsDictCreate) SetCreateTime(dt date.DateTime) *AsDictCreate {
	adc.mutation.SetCreateTime(dt)
	return adc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (adc *AsDictCreate) SetNillableCreateTime(dt *date.DateTime) *AsDictCreate {
	if dt != nil {
		adc.SetCreateTime(*dt)
	}
	return adc
}

// SetUpdateTime sets the "update_time" field.
func (adc *AsDictCreate) SetUpdateTime(dt date.DateTime) *AsDictCreate {
	adc.mutation.SetUpdateTime(dt)
	return adc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (adc *AsDictCreate) SetNillableUpdateTime(dt *date.DateTime) *AsDictCreate {
	if dt != nil {
		adc.SetUpdateTime(*dt)
	}
	return adc
}

// SetID sets the "id" field.
func (adc *AsDictCreate) SetID(i int64) *AsDictCreate {
	adc.mutation.SetID(i)
	return adc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (adc *AsDictCreate) SetNillableID(i *int64) *AsDictCreate {
	if i != nil {
		adc.SetID(*i)
	}
	return adc
}

// SetParentxID sets the "parentx" edge to the AsDict entity by ID.
func (adc *AsDictCreate) SetParentxID(id int64) *AsDictCreate {
	adc.mutation.SetParentxID(id)
	return adc
}

// SetNillableParentxID sets the "parentx" edge to the AsDict entity by ID if the given value is not nil.
func (adc *AsDictCreate) SetNillableParentxID(id *int64) *AsDictCreate {
	if id != nil {
		adc = adc.SetParentxID(*id)
	}
	return adc
}

// SetParentx sets the "parentx" edge to the AsDict entity.
func (adc *AsDictCreate) SetParentx(a *AsDict) *AsDictCreate {
	return adc.SetParentxID(a.ID)
}

// AddChildrenIDs adds the "childrens" edge to the AsDict entity by IDs.
func (adc *AsDictCreate) AddChildrenIDs(ids ...int64) *AsDictCreate {
	adc.mutation.AddChildrenIDs(ids...)
	return adc
}

// AddChildrens adds the "childrens" edges to the AsDict entity.
func (adc *AsDictCreate) AddChildrens(a ...*AsDict) *AsDictCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return adc.AddChildrenIDs(ids...)
}

// Mutation returns the AsDictMutation object of the builder.
func (adc *AsDictCreate) Mutation() *AsDictMutation {
	return adc.mutation
}

// Save creates the AsDict in the database.
func (adc *AsDictCreate) Save(ctx context.Context) (*AsDict, error) {
	var (
		err  error
		node *AsDict
	)
	adc.defaults()
	if len(adc.hooks) == 0 {
		if err = adc.check(); err != nil {
			return nil, err
		}
		node, err = adc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsDictMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = adc.check(); err != nil {
				return nil, err
			}
			adc.mutation = mutation
			if node, err = adc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(adc.hooks) - 1; i >= 0; i-- {
			if adc.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = adc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, adc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (adc *AsDictCreate) SaveX(ctx context.Context) *AsDict {
	v, err := adc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (adc *AsDictCreate) Exec(ctx context.Context) error {
	_, err := adc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (adc *AsDictCreate) ExecX(ctx context.Context) {
	if err := adc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (adc *AsDictCreate) defaults() {
	if _, ok := adc.mutation.Version(); !ok {
		v := asdict.DefaultVersion
		adc.mutation.SetVersion(v)
	}
	if _, ok := adc.mutation.IsDeleted(); !ok {
		v := asdict.DefaultIsDeleted
		adc.mutation.SetIsDeleted(v)
	}
	if _, ok := adc.mutation.Status(); !ok {
		v := asdict.DefaultStatus
		adc.mutation.SetStatus(v)
	}
	if _, ok := adc.mutation.CreateTime(); !ok {
		v := asdict.DefaultCreateTime()
		adc.mutation.SetCreateTime(v)
	}
	if _, ok := adc.mutation.UpdateTime(); !ok {
		v := asdict.DefaultUpdateTime()
		adc.mutation.SetUpdateTime(v)
	}
	if _, ok := adc.mutation.ID(); !ok {
		v := asdict.DefaultID()
		adc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (adc *AsDictCreate) check() error {
	if _, ok := adc.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "is_deleted", err: errors.New(`schema: missing required field "AsDict.is_deleted"`)}
	}
	return nil
}

func (adc *AsDictCreate) sqlSave(ctx context.Context) (*AsDict, error) {
	_node, _spec := adc.createSpec()
	if err := sqlgraph.CreateNode(ctx, adc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (adc *AsDictCreate) createSpec() (*AsDict, *sqlgraph.CreateSpec) {
	var (
		_node = &AsDict{config: adc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: asdict.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asdict.FieldID,
			},
		}
	)
	if id, ok := adc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := adc.mutation.Code(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asdict.FieldCode,
		})
		_node.Code = value
	}
	if value, ok := adc.mutation.DictKey(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asdict.FieldDictKey,
		})
		_node.DictKey = value
	}
	if value, ok := adc.mutation.DictValue(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asdict.FieldDictValue,
		})
		_node.DictValue = value
	}
	if value, ok := adc.mutation.Sort(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asdict.FieldSort,
		})
		_node.Sort = value
	}
	if value, ok := adc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asdict.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := adc.mutation.Currversion(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asdict.FieldCurrversion,
		})
		_node.Currversion = value
	}
	if value, ok := adc.mutation.Version(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asdict.FieldVersion,
		})
		_node.Version = value
	}
	if value, ok := adc.mutation.DictparentID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asdict.FieldDictparentID,
		})
		_node.DictparentID = value
	}
	if value, ok := adc.mutation.IsDeleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asdict.FieldIsDeleted,
		})
		_node.IsDeleted = value
	}
	if value, ok := adc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asdict.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := adc.mutation.CreateUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asdict.FieldCreateUser,
		})
		_node.CreateUser = value
	}
	if value, ok := adc.mutation.UpdateUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asdict.FieldUpdateUser,
		})
		_node.UpdateUser = value
	}
	if value, ok := adc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asdict.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := adc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asdict.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if nodes := adc.mutation.ParentxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asdict.ParentxTable,
			Columns: []string{asdict.ParentxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asdict.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := adc.mutation.ChildrensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asdict.ChildrensTable,
			Columns: []string{asdict.ChildrensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asdict.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AsDictCreateBulk is the builder for creating many AsDict entities in bulk.
type AsDictCreateBulk struct {
	config
	builders []*AsDictCreate
}

// Save creates the AsDict entities in the database.
func (adcb *AsDictCreateBulk) Save(ctx context.Context) ([]*AsDict, error) {
	specs := make([]*sqlgraph.CreateSpec, len(adcb.builders))
	nodes := make([]*AsDict, len(adcb.builders))
	mutators := make([]Mutator, len(adcb.builders))
	for i := range adcb.builders {
		func(i int, root context.Context) {
			builder := adcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AsDictMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, adcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, adcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, adcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (adcb *AsDictCreateBulk) SaveX(ctx context.Context) []*AsDict {
	v, err := adcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (adcb *AsDictCreateBulk) Exec(ctx context.Context) error {
	_, err := adcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (adcb *AsDictCreateBulk) ExecX(ctx context.Context) {
	if err := adcb.Exec(ctx); err != nil {
		panic(err)
	}
}
