// Code generated by entc, DO NOT EDIT.

package schema

import (
	"fmt"
	"orginone/common/schema/asmarketappcomponenttemplate"
	"orginone/common/tools/date"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// AsMarketAppComponentTemplate is the model entity for the AsMarketAppComponentTemplate schema.
type AsMarketAppComponentTemplate struct {
	config `json:"-"`
	// ID of the ent.
	// 主键
	ID int64 `json:"id,string"`
	// Name holds the value of the "name" field.
	// 模板名称
	Name string `json:"name"`
	// Config holds the value of the "config" field.
	// 配置
	Config string `json:"config"`
	// IsDefault holds the value of the "is_default" field.
	// 是否是默认模板
	IsDefault int64 `json:"isDefault"`
	// IsDeleted holds the value of the "is_deleted" field.
	// 是否被删除
	IsDeleted int64 `json:"isDeleted"`
	// Status holds the value of the "status" field.
	// 状态
	Status int64 `json:"status"`
	// CreateUser holds the value of the "create_user" field.
	// 创建用户
	CreateUser int64 `json:"createUser"`
	// UpdateUser holds the value of the "update_user" field.
	// 更新用户
	UpdateUser int64 `json:"updateUser"`
	// CreateTime holds the value of the "create_time" field.
	// 创建时间
	CreateTime date.DateTime `json:"createTime"`
	// UpdateTime holds the value of the "update_time" field.
	// 更新时间
	UpdateTime date.DateTime `json:"updateTime"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AsMarketAppComponentTemplateQuery when eager-loading is set.
	Edges AsMarketAppComponentTemplateEdges `json:"edges"`
}

// AsMarketAppComponentTemplateEdges holds the relations/edges for other nodes in the graph.
type AsMarketAppComponentTemplateEdges struct {
	// AppUserTemplates holds the value of the appUserTemplates edge.
	AppUserTemplates []*AsMarketAppUserTemplate `json:"appusertemplates"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AppUserTemplatesOrErr returns the AppUserTemplates value or an error if the edge
// was not loaded in eager-loading.
func (e AsMarketAppComponentTemplateEdges) AppUserTemplatesOrErr() ([]*AsMarketAppUserTemplate, error) {
	if e.loadedTypes[0] {
		return e.AppUserTemplates, nil
	}
	return nil, &NotLoadedError{edge: "appUserTemplates"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AsMarketAppComponentTemplate) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case asmarketappcomponenttemplate.FieldID, asmarketappcomponenttemplate.FieldIsDefault, asmarketappcomponenttemplate.FieldIsDeleted, asmarketappcomponenttemplate.FieldStatus, asmarketappcomponenttemplate.FieldCreateUser, asmarketappcomponenttemplate.FieldUpdateUser:
			values[i] = new(sql.NullInt64)
		case asmarketappcomponenttemplate.FieldName, asmarketappcomponenttemplate.FieldConfig:
			values[i] = new(sql.NullString)
		case asmarketappcomponenttemplate.FieldCreateTime, asmarketappcomponenttemplate.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AsMarketAppComponentTemplate", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AsMarketAppComponentTemplate fields.
func (amact *AsMarketAppComponentTemplate) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case asmarketappcomponenttemplate.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			amact.ID = int64(value.Int64)
		case asmarketappcomponenttemplate.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				amact.Name = value.String
			}
		case asmarketappcomponenttemplate.FieldConfig:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field config", values[i])
			} else if value.Valid {
				amact.Config = value.String
			}
		case asmarketappcomponenttemplate.FieldIsDefault:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_default", values[i])
			} else if value.Valid {
				amact.IsDefault = value.Int64
			}
		case asmarketappcomponenttemplate.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				amact.IsDeleted = value.Int64
			}
		case asmarketappcomponenttemplate.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				amact.Status = value.Int64
			}
		case asmarketappcomponenttemplate.FieldCreateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_user", values[i])
			} else if value.Valid {
				amact.CreateUser = value.Int64
			}
		case asmarketappcomponenttemplate.FieldUpdateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_user", values[i])
			} else if value.Valid {
				amact.UpdateUser = value.Int64
			}
		case asmarketappcomponenttemplate.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				amact.CreateTime = date.DateTime(value.Time)
			}
		case asmarketappcomponenttemplate.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				amact.UpdateTime = date.DateTime(value.Time)
			}
		}
	}
	return nil
}

// QueryAppUserTemplates queries the "appUserTemplates" edge of the AsMarketAppComponentTemplate entity.
func (amact *AsMarketAppComponentTemplate) QueryAppUserTemplates() *AsMarketAppUserTemplateQuery {
	return (&AsMarketAppComponentTemplateClient{config: amact.config}).QueryAppUserTemplates(amact)
}

// Update returns a builder for updating this AsMarketAppComponentTemplate.
// Note that you need to call AsMarketAppComponentTemplate.Unwrap() before calling this method if this AsMarketAppComponentTemplate
// was returned from a transaction, and the transaction was committed or rolled back.
func (amact *AsMarketAppComponentTemplate) Update() *AsMarketAppComponentTemplateUpdateOne {
	return (&AsMarketAppComponentTemplateClient{config: amact.config}).UpdateOne(amact)
}

// Unwrap unwraps the AsMarketAppComponentTemplate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (amact *AsMarketAppComponentTemplate) Unwrap() *AsMarketAppComponentTemplate {
	tx, ok := amact.config.driver.(*txDriver)
	if !ok {
		panic("schema: AsMarketAppComponentTemplate is not a transactional entity")
	}
	amact.config.driver = tx.drv
	return amact
}

// String implements the fmt.Stringer.
func (amact *AsMarketAppComponentTemplate) String() string {
	var builder strings.Builder
	builder.WriteString("AsMarketAppComponentTemplate(")
	builder.WriteString(fmt.Sprintf("id=%v", amact.ID))
	builder.WriteString(", name=")
	builder.WriteString(amact.Name)
	builder.WriteString(", config=")
	builder.WriteString(amact.Config)
	builder.WriteString(", is_default=")
	builder.WriteString(fmt.Sprintf("%v", amact.IsDefault))
	builder.WriteString(", is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", amact.IsDeleted))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", amact.Status))
	builder.WriteString(", create_user=")
	builder.WriteString(fmt.Sprintf("%v", amact.CreateUser))
	builder.WriteString(", update_user=")
	builder.WriteString(fmt.Sprintf("%v", amact.UpdateUser))
	builder.WriteString(", create_time=")
	builder.WriteString(fmt.Sprintf("%v", amact.CreateTime))
	builder.WriteString(", update_time=")
	builder.WriteString(fmt.Sprintf("%v", amact.UpdateTime))
	builder.WriteByte(')')
	return builder.String()
}

// AsMarketAppComponentTemplates is a parsable slice of AsMarketAppComponentTemplate.
type AsMarketAppComponentTemplates []*AsMarketAppComponentTemplate

func (amact AsMarketAppComponentTemplates) config(cfg config) {
	for _i := range amact {
		amact[_i].config = cfg
	}
}
