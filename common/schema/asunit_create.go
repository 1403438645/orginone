// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/astenant"
	"orginone/common/schema/asunit"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsUnitCreate is the builder for creating a AsUnit entity.
type AsUnitCreate struct {
	config
	mutation *AsUnitMutation
	hooks    []Hook
}

// SetUnitName sets the "unit_name" field.
func (auc *AsUnitCreate) SetUnitName(s string) *AsUnitCreate {
	auc.mutation.SetUnitName(s)
	return auc
}

// SetUnitNameEn sets the "unit_name_en" field.
func (auc *AsUnitCreate) SetUnitNameEn(s string) *AsUnitCreate {
	auc.mutation.SetUnitNameEn(s)
	return auc
}

// SetNillableUnitNameEn sets the "unit_name_en" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableUnitNameEn(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetUnitNameEn(*s)
	}
	return auc
}

// SetOrganizationForm sets the "organization_form" field.
func (auc *AsUnitCreate) SetOrganizationForm(i int64) *AsUnitCreate {
	auc.mutation.SetOrganizationForm(i)
	return auc
}

// SetNillableOrganizationForm sets the "organization_form" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableOrganizationForm(i *int64) *AsUnitCreate {
	if i != nil {
		auc.SetOrganizationForm(*i)
	}
	return auc
}

// SetUnitType sets the "unit_type" field.
func (auc *AsUnitCreate) SetUnitType(i int64) *AsUnitCreate {
	auc.mutation.SetUnitType(i)
	return auc
}

// SetNillableUnitType sets the "unit_type" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableUnitType(i *int64) *AsUnitCreate {
	if i != nil {
		auc.SetUnitType(*i)
	}
	return auc
}

// SetParentNodeName sets the "parent_node_name" field.
func (auc *AsUnitCreate) SetParentNodeName(s string) *AsUnitCreate {
	auc.mutation.SetParentNodeName(s)
	return auc
}

// SetNillableParentNodeName sets the "parent_node_name" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableParentNodeName(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetParentNodeName(*s)
	}
	return auc
}

// SetChargeSectionID sets the "charge_section_id" field.
func (auc *AsUnitCreate) SetChargeSectionID(i int64) *AsUnitCreate {
	auc.mutation.SetChargeSectionID(i)
	return auc
}

// SetNillableChargeSectionID sets the "charge_section_id" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableChargeSectionID(i *int64) *AsUnitCreate {
	if i != nil {
		auc.SetChargeSectionID(*i)
	}
	return auc
}

// SetChargeSectionCode sets the "charge_section_code" field.
func (auc *AsUnitCreate) SetChargeSectionCode(s string) *AsUnitCreate {
	auc.mutation.SetChargeSectionCode(s)
	return auc
}

// SetNillableChargeSectionCode sets the "charge_section_code" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableChargeSectionCode(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetChargeSectionCode(*s)
	}
	return auc
}

// SetChargeSectionName sets the "charge_section_name" field.
func (auc *AsUnitCreate) SetChargeSectionName(s string) *AsUnitCreate {
	auc.mutation.SetChargeSectionName(s)
	return auc
}

// SetNillableChargeSectionName sets the "charge_section_name" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableChargeSectionName(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetChargeSectionName(*s)
	}
	return auc
}

// SetLocalFinancialCode sets the "local_financial_code" field.
func (auc *AsUnitCreate) SetLocalFinancialCode(s string) *AsUnitCreate {
	auc.mutation.SetLocalFinancialCode(s)
	return auc
}

// SetNillableLocalFinancialCode sets the "local_financial_code" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableLocalFinancialCode(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetLocalFinancialCode(*s)
	}
	return auc
}

// SetLocalFinancialName sets the "local_financial_name" field.
func (auc *AsUnitCreate) SetLocalFinancialName(s string) *AsUnitCreate {
	auc.mutation.SetLocalFinancialName(s)
	return auc
}

// SetNillableLocalFinancialName sets the "local_financial_name" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableLocalFinancialName(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetLocalFinancialName(*s)
	}
	return auc
}

// SetLocalFinancialID sets the "local_financial_id" field.
func (auc *AsUnitCreate) SetLocalFinancialID(s string) *AsUnitCreate {
	auc.mutation.SetLocalFinancialID(s)
	return auc
}

// SetNillableLocalFinancialID sets the "local_financial_id" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableLocalFinancialID(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetLocalFinancialID(*s)
	}
	return auc
}

// SetOfficeAdministrationCode sets the "office_administration_code" field.
func (auc *AsUnitCreate) SetOfficeAdministrationCode(s string) *AsUnitCreate {
	auc.mutation.SetOfficeAdministrationCode(s)
	return auc
}

// SetNillableOfficeAdministrationCode sets the "office_administration_code" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableOfficeAdministrationCode(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetOfficeAdministrationCode(*s)
	}
	return auc
}

// SetOfficeAdministrationName sets the "office_administration_name" field.
func (auc *AsUnitCreate) SetOfficeAdministrationName(s string) *AsUnitCreate {
	auc.mutation.SetOfficeAdministrationName(s)
	return auc
}

// SetNillableOfficeAdministrationName sets the "office_administration_name" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableOfficeAdministrationName(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetOfficeAdministrationName(*s)
	}
	return auc
}

// SetAdministrationDivisionCode sets the "administration_division_code" field.
func (auc *AsUnitCreate) SetAdministrationDivisionCode(s string) *AsUnitCreate {
	auc.mutation.SetAdministrationDivisionCode(s)
	return auc
}

// SetNillableAdministrationDivisionCode sets the "administration_division_code" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableAdministrationDivisionCode(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetAdministrationDivisionCode(*s)
	}
	return auc
}

// SetAdministrationDivisionName sets the "administration_division_name" field.
func (auc *AsUnitCreate) SetAdministrationDivisionName(s string) *AsUnitCreate {
	auc.mutation.SetAdministrationDivisionName(s)
	return auc
}

// SetNillableAdministrationDivisionName sets the "administration_division_name" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableAdministrationDivisionName(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetAdministrationDivisionName(*s)
	}
	return auc
}

// SetBudgetCode sets the "budget_code" field.
func (auc *AsUnitCreate) SetBudgetCode(i int64) *AsUnitCreate {
	auc.mutation.SetBudgetCode(i)
	return auc
}

// SetNillableBudgetCode sets the "budget_code" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableBudgetCode(i *int64) *AsUnitCreate {
	if i != nil {
		auc.SetBudgetCode(*i)
	}
	return auc
}

// SetCollegeCode sets the "college_code" field.
func (auc *AsUnitCreate) SetCollegeCode(s string) *AsUnitCreate {
	auc.mutation.SetCollegeCode(s)
	return auc
}

// SetNillableCollegeCode sets the "college_code" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableCollegeCode(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetCollegeCode(*s)
	}
	return auc
}

// SetOrganizationCode sets the "organization_code" field.
func (auc *AsUnitCreate) SetOrganizationCode(s string) *AsUnitCreate {
	auc.mutation.SetOrganizationCode(s)
	return auc
}

// SetNillableOrganizationCode sets the "organization_code" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableOrganizationCode(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetOrganizationCode(*s)
	}
	return auc
}

// SetUnitTypeCode sets the "unit_type_code" field.
func (auc *AsUnitCreate) SetUnitTypeCode(i int64) *AsUnitCreate {
	auc.mutation.SetUnitTypeCode(i)
	return auc
}

// SetNillableUnitTypeCode sets the "unit_type_code" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableUnitTypeCode(i *int64) *AsUnitCreate {
	if i != nil {
		auc.SetUnitTypeCode(*i)
	}
	return auc
}

// SetUnitTypeName sets the "unit_type_name" field.
func (auc *AsUnitCreate) SetUnitTypeName(i int64) *AsUnitCreate {
	auc.mutation.SetUnitTypeName(i)
	return auc
}

// SetNillableUnitTypeName sets the "unit_type_name" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableUnitTypeName(i *int64) *AsUnitCreate {
	if i != nil {
		auc.SetUnitTypeName(*i)
	}
	return auc
}

// SetUnitBasicProperty sets the "unit_basic_property" field.
func (auc *AsUnitCreate) SetUnitBasicProperty(i int64) *AsUnitCreate {
	auc.mutation.SetUnitBasicProperty(i)
	return auc
}

// SetNillableUnitBasicProperty sets the "unit_basic_property" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableUnitBasicProperty(i *int64) *AsUnitCreate {
	if i != nil {
		auc.SetUnitBasicProperty(*i)
	}
	return auc
}

// SetSocialCreditCode sets the "social_credit_code" field.
func (auc *AsUnitCreate) SetSocialCreditCode(s string) *AsUnitCreate {
	auc.mutation.SetSocialCreditCode(s)
	return auc
}

// SetNillableSocialCreditCode sets the "social_credit_code" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableSocialCreditCode(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetSocialCreditCode(*s)
	}
	return auc
}

// SetBudgetUnitName sets the "budget_unit_name" field.
func (auc *AsUnitCreate) SetBudgetUnitName(s string) *AsUnitCreate {
	auc.mutation.SetBudgetUnitName(s)
	return auc
}

// SetNillableBudgetUnitName sets the "budget_unit_name" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableBudgetUnitName(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetBudgetUnitName(*s)
	}
	return auc
}

// SetBudgetUnitCode sets the "budget_unit_code" field.
func (auc *AsUnitCreate) SetBudgetUnitCode(s string) *AsUnitCreate {
	auc.mutation.SetBudgetUnitCode(s)
	return auc
}

// SetNillableBudgetUnitCode sets the "budget_unit_code" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableBudgetUnitCode(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetBudgetUnitCode(*s)
	}
	return auc
}

// SetBudgetManagementLevel sets the "budget_management_level" field.
func (auc *AsUnitCreate) SetBudgetManagementLevel(i int64) *AsUnitCreate {
	auc.mutation.SetBudgetManagementLevel(i)
	return auc
}

// SetNillableBudgetManagementLevel sets the "budget_management_level" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableBudgetManagementLevel(i *int64) *AsUnitCreate {
	if i != nil {
		auc.SetBudgetManagementLevel(*i)
	}
	return auc
}

// SetFirmName sets the "firm_name" field.
func (auc *AsUnitCreate) SetFirmName(s string) *AsUnitCreate {
	auc.mutation.SetFirmName(s)
	return auc
}

// SetNillableFirmName sets the "firm_name" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableFirmName(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetFirmName(*s)
	}
	return auc
}

// SetFirmCode sets the "firm_code" field.
func (auc *AsUnitCreate) SetFirmCode(s string) *AsUnitCreate {
	auc.mutation.SetFirmCode(s)
	return auc
}

// SetNillableFirmCode sets the "firm_code" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableFirmCode(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetFirmCode(*s)
	}
	return auc
}

// SetTelephoneNumber sets the "telephone_number" field.
func (auc *AsUnitCreate) SetTelephoneNumber(s string) *AsUnitCreate {
	auc.mutation.SetTelephoneNumber(s)
	return auc
}

// SetNillableTelephoneNumber sets the "telephone_number" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableTelephoneNumber(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetTelephoneNumber(*s)
	}
	return auc
}

// SetPhoneNumber sets the "phone_number" field.
func (auc *AsUnitCreate) SetPhoneNumber(s string) *AsUnitCreate {
	auc.mutation.SetPhoneNumber(s)
	return auc
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillablePhoneNumber(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetPhoneNumber(*s)
	}
	return auc
}

// SetFaxNumber sets the "fax_number" field.
func (auc *AsUnitCreate) SetFaxNumber(s string) *AsUnitCreate {
	auc.mutation.SetFaxNumber(s)
	return auc
}

// SetNillableFaxNumber sets the "fax_number" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableFaxNumber(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetFaxNumber(*s)
	}
	return auc
}

// SetEmailAddress sets the "email_address" field.
func (auc *AsUnitCreate) SetEmailAddress(s string) *AsUnitCreate {
	auc.mutation.SetEmailAddress(s)
	return auc
}

// SetNillableEmailAddress sets the "email_address" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableEmailAddress(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetEmailAddress(*s)
	}
	return auc
}

// SetProvince sets the "province" field.
func (auc *AsUnitCreate) SetProvince(s string) *AsUnitCreate {
	auc.mutation.SetProvince(s)
	return auc
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableProvince(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetProvince(*s)
	}
	return auc
}

// SetCity sets the "city" field.
func (auc *AsUnitCreate) SetCity(s string) *AsUnitCreate {
	auc.mutation.SetCity(s)
	return auc
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableCity(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetCity(*s)
	}
	return auc
}

// SetCounty sets the "county" field.
func (auc *AsUnitCreate) SetCounty(s string) *AsUnitCreate {
	auc.mutation.SetCounty(s)
	return auc
}

// SetNillableCounty sets the "county" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableCounty(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetCounty(*s)
	}
	return auc
}

// SetStreetAddress sets the "street_address" field.
func (auc *AsUnitCreate) SetStreetAddress(s string) *AsUnitCreate {
	auc.mutation.SetStreetAddress(s)
	return auc
}

// SetNillableStreetAddress sets the "street_address" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableStreetAddress(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetStreetAddress(*s)
	}
	return auc
}

// SetPostalCode sets the "postal_code" field.
func (auc *AsUnitCreate) SetPostalCode(s string) *AsUnitCreate {
	auc.mutation.SetPostalCode(s)
	return auc
}

// SetNillablePostalCode sets the "postal_code" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillablePostalCode(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetPostalCode(*s)
	}
	return auc
}

// SetFundSupplyModeName sets the "fund_supply_mode_name" field.
func (auc *AsUnitCreate) SetFundSupplyModeName(i int64) *AsUnitCreate {
	auc.mutation.SetFundSupplyModeName(i)
	return auc
}

// SetNillableFundSupplyModeName sets the "fund_supply_mode_name" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableFundSupplyModeName(i *int64) *AsUnitCreate {
	if i != nil {
		auc.SetFundSupplyModeName(*i)
	}
	return auc
}

// SetFundSupplyModeCode sets the "fund_supply_mode_code" field.
func (auc *AsUnitCreate) SetFundSupplyModeCode(i int64) *AsUnitCreate {
	auc.mutation.SetFundSupplyModeCode(i)
	return auc
}

// SetNillableFundSupplyModeCode sets the "fund_supply_mode_code" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableFundSupplyModeCode(i *int64) *AsUnitCreate {
	if i != nil {
		auc.SetFundSupplyModeCode(*i)
	}
	return auc
}

// SetAdministrationLevelName sets the "administration_level_name" field.
func (auc *AsUnitCreate) SetAdministrationLevelName(i int64) *AsUnitCreate {
	auc.mutation.SetAdministrationLevelName(i)
	return auc
}

// SetNillableAdministrationLevelName sets the "administration_level_name" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableAdministrationLevelName(i *int64) *AsUnitCreate {
	if i != nil {
		auc.SetAdministrationLevelName(*i)
	}
	return auc
}

// SetAdministrationLevelType sets the "administration_level_type" field.
func (auc *AsUnitCreate) SetAdministrationLevelType(i int64) *AsUnitCreate {
	auc.mutation.SetAdministrationLevelType(i)
	return auc
}

// SetNillableAdministrationLevelType sets the "administration_level_type" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableAdministrationLevelType(i *int64) *AsUnitCreate {
	if i != nil {
		auc.SetAdministrationLevelType(*i)
	}
	return auc
}

// SetDepartmentCategoryName sets the "department_category_name" field.
func (auc *AsUnitCreate) SetDepartmentCategoryName(i int64) *AsUnitCreate {
	auc.mutation.SetDepartmentCategoryName(i)
	return auc
}

// SetNillableDepartmentCategoryName sets the "department_category_name" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableDepartmentCategoryName(i *int64) *AsUnitCreate {
	if i != nil {
		auc.SetDepartmentCategoryName(*i)
	}
	return auc
}

// SetBusinessDepartmentClassificationCode sets the "business_department_classification_code" field.
func (auc *AsUnitCreate) SetBusinessDepartmentClassificationCode(i int64) *AsUnitCreate {
	auc.mutation.SetBusinessDepartmentClassificationCode(i)
	return auc
}

// SetNillableBusinessDepartmentClassificationCode sets the "business_department_classification_code" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableBusinessDepartmentClassificationCode(i *int64) *AsUnitCreate {
	if i != nil {
		auc.SetBusinessDepartmentClassificationCode(*i)
	}
	return auc
}

// SetPrincipal sets the "principal" field.
func (auc *AsUnitCreate) SetPrincipal(s string) *AsUnitCreate {
	auc.mutation.SetPrincipal(s)
	return auc
}

// SetNillablePrincipal sets the "principal" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillablePrincipal(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetPrincipal(*s)
	}
	return auc
}

// SetContact sets the "contact" field.
func (auc *AsUnitCreate) SetContact(s string) *AsUnitCreate {
	auc.mutation.SetContact(s)
	return auc
}

// SetNillableContact sets the "contact" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableContact(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetContact(*s)
	}
	return auc
}

// SetCorporateRepresentative sets the "corporate_representative" field.
func (auc *AsUnitCreate) SetCorporateRepresentative(s string) *AsUnitCreate {
	auc.mutation.SetCorporateRepresentative(s)
	return auc
}

// SetNillableCorporateRepresentative sets the "corporate_representative" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableCorporateRepresentative(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetCorporateRepresentative(*s)
	}
	return auc
}

// SetEconomicType sets the "economic_type" field.
func (auc *AsUnitCreate) SetEconomicType(i int64) *AsUnitCreate {
	auc.mutation.SetEconomicType(i)
	return auc
}

// SetNillableEconomicType sets the "economic_type" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableEconomicType(i *int64) *AsUnitCreate {
	if i != nil {
		auc.SetEconomicType(*i)
	}
	return auc
}

// SetFinancialAffiliation sets the "financial_affiliation" field.
func (auc *AsUnitCreate) SetFinancialAffiliation(s string) *AsUnitCreate {
	auc.mutation.SetFinancialAffiliation(s)
	return auc
}

// SetNillableFinancialAffiliation sets the "financial_affiliation" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableFinancialAffiliation(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetFinancialAffiliation(*s)
	}
	return auc
}

// SetFinancialUnit sets the "financial_unit" field.
func (auc *AsUnitCreate) SetFinancialUnit(i int64) *AsUnitCreate {
	auc.mutation.SetFinancialUnit(i)
	return auc
}

// SetNillableFinancialUnit sets the "financial_unit" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableFinancialUnit(i *int64) *AsUnitCreate {
	if i != nil {
		auc.SetFinancialUnit(*i)
	}
	return auc
}

// SetVerticalUnit sets the "vertical_unit" field.
func (auc *AsUnitCreate) SetVerticalUnit(i int64) *AsUnitCreate {
	auc.mutation.SetVerticalUnit(i)
	return auc
}

// SetNillableVerticalUnit sets the "vertical_unit" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableVerticalUnit(i *int64) *AsUnitCreate {
	if i != nil {
		auc.SetVerticalUnit(*i)
	}
	return auc
}

// SetVirtualUnit sets the "virtual_unit" field.
func (auc *AsUnitCreate) SetVirtualUnit(i int64) *AsUnitCreate {
	auc.mutation.SetVirtualUnit(i)
	return auc
}

// SetNillableVirtualUnit sets the "virtual_unit" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableVirtualUnit(i *int64) *AsUnitCreate {
	if i != nil {
		auc.SetVirtualUnit(*i)
	}
	return auc
}

// SetAccountingSystem sets the "accounting_system" field.
func (auc *AsUnitCreate) SetAccountingSystem(i int64) *AsUnitCreate {
	auc.mutation.SetAccountingSystem(i)
	return auc
}

// SetNillableAccountingSystem sets the "accounting_system" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableAccountingSystem(i *int64) *AsUnitCreate {
	if i != nil {
		auc.SetAccountingSystem(*i)
	}
	return auc
}

// SetCorporateTag sets the "corporate_tag" field.
func (auc *AsUnitCreate) SetCorporateTag(s string) *AsUnitCreate {
	auc.mutation.SetCorporateTag(s)
	return auc
}

// SetNillableCorporateTag sets the "corporate_tag" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableCorporateTag(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetCorporateTag(*s)
	}
	return auc
}

// SetMaintainerMark sets the "maintainer_mark" field.
func (auc *AsUnitCreate) SetMaintainerMark(s string) *AsUnitCreate {
	auc.mutation.SetMaintainerMark(s)
	return auc
}

// SetNillableMaintainerMark sets the "maintainer_mark" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableMaintainerMark(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetMaintainerMark(*s)
	}
	return auc
}

// SetSupplierMark sets the "supplier_mark" field.
func (auc *AsUnitCreate) SetSupplierMark(s string) *AsUnitCreate {
	auc.mutation.SetSupplierMark(s)
	return auc
}

// SetNillableSupplierMark sets the "supplier_mark" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableSupplierMark(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetSupplierMark(*s)
	}
	return auc
}

// SetManufactureMark sets the "manufacture_mark" field.
func (auc *AsUnitCreate) SetManufactureMark(s string) *AsUnitCreate {
	auc.mutation.SetManufactureMark(s)
	return auc
}

// SetNillableManufactureMark sets the "manufacture_mark" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableManufactureMark(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetManufactureMark(*s)
	}
	return auc
}

// SetAssetDisposalAgencyTag sets the "asset_disposal_agency_tag" field.
func (auc *AsUnitCreate) SetAssetDisposalAgencyTag(s string) *AsUnitCreate {
	auc.mutation.SetAssetDisposalAgencyTag(s)
	return auc
}

// SetNillableAssetDisposalAgencyTag sets the "asset_disposal_agency_tag" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableAssetDisposalAgencyTag(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetAssetDisposalAgencyTag(*s)
	}
	return auc
}

// SetStateAssetManagementCompany sets the "state_asset_management_company" field.
func (auc *AsUnitCreate) SetStateAssetManagementCompany(s string) *AsUnitCreate {
	auc.mutation.SetStateAssetManagementCompany(s)
	return auc
}

// SetNillableStateAssetManagementCompany sets the "state_asset_management_company" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableStateAssetManagementCompany(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetStateAssetManagementCompany(*s)
	}
	return auc
}

// SetInstitutionNumber sets the "institution_number" field.
func (auc *AsUnitCreate) SetInstitutionNumber(i int64) *AsUnitCreate {
	auc.mutation.SetInstitutionNumber(i)
	return auc
}

// SetNillableInstitutionNumber sets the "institution_number" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableInstitutionNumber(i *int64) *AsUnitCreate {
	if i != nil {
		auc.SetInstitutionNumber(*i)
	}
	return auc
}

// SetAuthorizedNumber sets the "authorized_number" field.
func (auc *AsUnitCreate) SetAuthorizedNumber(i int64) *AsUnitCreate {
	auc.mutation.SetAuthorizedNumber(i)
	return auc
}

// SetNillableAuthorizedNumber sets the "authorized_number" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableAuthorizedNumber(i *int64) *AsUnitCreate {
	if i != nil {
		auc.SetAuthorizedNumber(*i)
	}
	return auc
}

// SetOfSideNumber sets the "of_side_number" field.
func (auc *AsUnitCreate) SetOfSideNumber(i int64) *AsUnitCreate {
	auc.mutation.SetOfSideNumber(i)
	return auc
}

// SetNillableOfSideNumber sets the "of_side_number" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableOfSideNumber(i *int64) *AsUnitCreate {
	if i != nil {
		auc.SetOfSideNumber(*i)
	}
	return auc
}

// SetInstitutionAuthority sets the "institution_authority" field.
func (auc *AsUnitCreate) SetInstitutionAuthority(s string) *AsUnitCreate {
	auc.mutation.SetInstitutionAuthority(s)
	return auc
}

// SetNillableInstitutionAuthority sets the "institution_authority" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableInstitutionAuthority(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetInstitutionAuthority(*s)
	}
	return auc
}

// SetAdministrationAuthority sets the "administration_authority" field.
func (auc *AsUnitCreate) SetAdministrationAuthority(s string) *AsUnitCreate {
	auc.mutation.SetAdministrationAuthority(s)
	return auc
}

// SetNillableAdministrationAuthority sets the "administration_authority" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableAdministrationAuthority(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetAdministrationAuthority(*s)
	}
	return auc
}

// SetEnableTime sets the "enable_time" field.
func (auc *AsUnitCreate) SetEnableTime(dt date.DateTime) *AsUnitCreate {
	auc.mutation.SetEnableTime(dt)
	return auc
}

// SetNillableEnableTime sets the "enable_time" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableEnableTime(dt *date.DateTime) *AsUnitCreate {
	if dt != nil {
		auc.SetEnableTime(*dt)
	}
	return auc
}

// SetDisableTime sets the "disable_time" field.
func (auc *AsUnitCreate) SetDisableTime(dt date.DateTime) *AsUnitCreate {
	auc.mutation.SetDisableTime(dt)
	return auc
}

// SetNillableDisableTime sets the "disable_time" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableDisableTime(dt *date.DateTime) *AsUnitCreate {
	if dt != nil {
		auc.SetDisableTime(*dt)
	}
	return auc
}

// SetSealTime sets the "seal_time" field.
func (auc *AsUnitCreate) SetSealTime(dt date.DateTime) *AsUnitCreate {
	auc.mutation.SetSealTime(dt)
	return auc
}

// SetNillableSealTime sets the "seal_time" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableSealTime(dt *date.DateTime) *AsUnitCreate {
	if dt != nil {
		auc.SetSealTime(*dt)
	}
	return auc
}

// SetUnitRemark sets the "unit_remark" field.
func (auc *AsUnitCreate) SetUnitRemark(s string) *AsUnitCreate {
	auc.mutation.SetUnitRemark(s)
	return auc
}

// SetNillableUnitRemark sets the "unit_remark" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableUnitRemark(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetUnitRemark(*s)
	}
	return auc
}

// SetAssetDownloadStatus sets the "asset_download_status" field.
func (auc *AsUnitCreate) SetAssetDownloadStatus(s string) *AsUnitCreate {
	auc.mutation.SetAssetDownloadStatus(s)
	return auc
}

// SetNillableAssetDownloadStatus sets the "asset_download_status" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableAssetDownloadStatus(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetAssetDownloadStatus(*s)
	}
	return auc
}

// SetLatitudeAndLongitude sets the "latitude_and_longitude" field.
func (auc *AsUnitCreate) SetLatitudeAndLongitude(s string) *AsUnitCreate {
	auc.mutation.SetLatitudeAndLongitude(s)
	return auc
}

// SetNillableLatitudeAndLongitude sets the "latitude_and_longitude" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableLatitudeAndLongitude(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetLatitudeAndLongitude(*s)
	}
	return auc
}

// SetSort sets the "sort" field.
func (auc *AsUnitCreate) SetSort(i int64) *AsUnitCreate {
	auc.mutation.SetSort(i)
	return auc
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableSort(i *int64) *AsUnitCreate {
	if i != nil {
		auc.SetSort(*i)
	}
	return auc
}

// SetOrganCode sets the "organ_code" field.
func (auc *AsUnitCreate) SetOrganCode(s string) *AsUnitCreate {
	auc.mutation.SetOrganCode(s)
	return auc
}

// SetNillableOrganCode sets the "organ_code" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableOrganCode(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetOrganCode(*s)
	}
	return auc
}

// SetHadInnerNumber sets the "had_inner_number" field.
func (auc *AsUnitCreate) SetHadInnerNumber(i int64) *AsUnitCreate {
	auc.mutation.SetHadInnerNumber(i)
	return auc
}

// SetNillableHadInnerNumber sets the "had_inner_number" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableHadInnerNumber(i *int64) *AsUnitCreate {
	if i != nil {
		auc.SetHadInnerNumber(*i)
	}
	return auc
}

// SetApproveInnerNumber sets the "approve_inner_number" field.
func (auc *AsUnitCreate) SetApproveInnerNumber(i int64) *AsUnitCreate {
	auc.mutation.SetApproveInnerNumber(i)
	return auc
}

// SetNillableApproveInnerNumber sets the "approve_inner_number" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableApproveInnerNumber(i *int64) *AsUnitCreate {
	if i != nil {
		auc.SetApproveInnerNumber(*i)
	}
	return auc
}

// SetImg sets the "img" field.
func (auc *AsUnitCreate) SetImg(s string) *AsUnitCreate {
	auc.mutation.SetImg(s)
	return auc
}

// SetNillableImg sets the "img" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableImg(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetImg(*s)
	}
	return auc
}

// SetLinkMan sets the "link_man" field.
func (auc *AsUnitCreate) SetLinkMan(s string) *AsUnitCreate {
	auc.mutation.SetLinkMan(s)
	return auc
}

// SetNillableLinkMan sets the "link_man" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableLinkMan(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetLinkMan(*s)
	}
	return auc
}

// SetLinkPhone sets the "link_phone" field.
func (auc *AsUnitCreate) SetLinkPhone(s string) *AsUnitCreate {
	auc.mutation.SetLinkPhone(s)
	return auc
}

// SetNillableLinkPhone sets the "link_phone" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableLinkPhone(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetLinkPhone(*s)
	}
	return auc
}

// SetTenantID sets the "tenant_id" field.
func (auc *AsUnitCreate) SetTenantID(i int64) *AsUnitCreate {
	auc.mutation.SetTenantID(i)
	return auc
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableTenantID(i *int64) *AsUnitCreate {
	if i != nil {
		auc.SetTenantID(*i)
	}
	return auc
}

// SetUnitCode sets the "unit_code" field.
func (auc *AsUnitCreate) SetUnitCode(s string) *AsUnitCreate {
	auc.mutation.SetUnitCode(s)
	return auc
}

// SetNillableUnitCode sets the "unit_code" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableUnitCode(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetUnitCode(*s)
	}
	return auc
}

// SetAuthorityTotal sets the "authority_total" field.
func (auc *AsUnitCreate) SetAuthorityTotal(i int64) *AsUnitCreate {
	auc.mutation.SetAuthorityTotal(i)
	return auc
}

// SetNillableAuthorityTotal sets the "authority_total" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableAuthorityTotal(i *int64) *AsUnitCreate {
	if i != nil {
		auc.SetAuthorityTotal(*i)
	}
	return auc
}

// SetStaffOnActiveDuty sets the "staff_on_active_duty" field.
func (auc *AsUnitCreate) SetStaffOnActiveDuty(i int64) *AsUnitCreate {
	auc.mutation.SetStaffOnActiveDuty(i)
	return auc
}

// SetNillableStaffOnActiveDuty sets the "staff_on_active_duty" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableStaffOnActiveDuty(i *int64) *AsUnitCreate {
	if i != nil {
		auc.SetStaffOnActiveDuty(*i)
	}
	return auc
}

// SetRetiredStaff sets the "retired_staff" field.
func (auc *AsUnitCreate) SetRetiredStaff(i int64) *AsUnitCreate {
	auc.mutation.SetRetiredStaff(i)
	return auc
}

// SetNillableRetiredStaff sets the "retired_staff" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableRetiredStaff(i *int64) *AsUnitCreate {
	if i != nil {
		auc.SetRetiredStaff(*i)
	}
	return auc
}

// SetOtherStaff sets the "other_staff" field.
func (auc *AsUnitCreate) SetOtherStaff(i int64) *AsUnitCreate {
	auc.mutation.SetOtherStaff(i)
	return auc
}

// SetNillableOtherStaff sets the "other_staff" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableOtherStaff(i *int64) *AsUnitCreate {
	if i != nil {
		auc.SetOtherStaff(*i)
	}
	return auc
}

// SetIsVirtual sets the "is_virtual" field.
func (auc *AsUnitCreate) SetIsVirtual(s string) *AsUnitCreate {
	auc.mutation.SetIsVirtual(s)
	return auc
}

// SetNillableIsVirtual sets the "is_virtual" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableIsVirtual(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetIsVirtual(*s)
	}
	return auc
}

// SetUnitReform sets the "unit_reform" field.
func (auc *AsUnitCreate) SetUnitReform(i int64) *AsUnitCreate {
	auc.mutation.SetUnitReform(i)
	return auc
}

// SetNillableUnitReform sets the "unit_reform" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableUnitReform(i *int64) *AsUnitCreate {
	if i != nil {
		auc.SetUnitReform(*i)
	}
	return auc
}

// SetPersonExpenditure sets the "person_expenditure" field.
func (auc *AsUnitCreate) SetPersonExpenditure(i int64) *AsUnitCreate {
	auc.mutation.SetPersonExpenditure(i)
	return auc
}

// SetNillablePersonExpenditure sets the "person_expenditure" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillablePersonExpenditure(i *int64) *AsUnitCreate {
	if i != nil {
		auc.SetPersonExpenditure(*i)
	}
	return auc
}

// SetInstitutionType sets the "institution_type" field.
func (auc *AsUnitCreate) SetInstitutionType(s string) *AsUnitCreate {
	auc.mutation.SetInstitutionType(s)
	return auc
}

// SetNillableInstitutionType sets the "institution_type" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableInstitutionType(s *string) *AsUnitCreate {
	if s != nil {
		auc.SetInstitutionType(*s)
	}
	return auc
}

// SetDepartmentIdentification sets the "department_identification" field.
func (auc *AsUnitCreate) SetDepartmentIdentification(i int64) *AsUnitCreate {
	auc.mutation.SetDepartmentIdentification(i)
	return auc
}

// SetNillableDepartmentIdentification sets the "department_identification" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableDepartmentIdentification(i *int64) *AsUnitCreate {
	if i != nil {
		auc.SetDepartmentIdentification(*i)
	}
	return auc
}

// SetTotalHeadcount sets the "total_headcount" field.
func (auc *AsUnitCreate) SetTotalHeadcount(i int64) *AsUnitCreate {
	auc.mutation.SetTotalHeadcount(i)
	return auc
}

// SetNillableTotalHeadcount sets the "total_headcount" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableTotalHeadcount(i *int64) *AsUnitCreate {
	if i != nil {
		auc.SetTotalHeadcount(*i)
	}
	return auc
}

// SetIsDeleted sets the "is_deleted" field.
func (auc *AsUnitCreate) SetIsDeleted(i int64) *AsUnitCreate {
	auc.mutation.SetIsDeleted(i)
	return auc
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableIsDeleted(i *int64) *AsUnitCreate {
	if i != nil {
		auc.SetIsDeleted(*i)
	}
	return auc
}

// SetStatus sets the "status" field.
func (auc *AsUnitCreate) SetStatus(i int64) *AsUnitCreate {
	auc.mutation.SetStatus(i)
	return auc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableStatus(i *int64) *AsUnitCreate {
	if i != nil {
		auc.SetStatus(*i)
	}
	return auc
}

// SetCreateUser sets the "create_user" field.
func (auc *AsUnitCreate) SetCreateUser(i int64) *AsUnitCreate {
	auc.mutation.SetCreateUser(i)
	return auc
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableCreateUser(i *int64) *AsUnitCreate {
	if i != nil {
		auc.SetCreateUser(*i)
	}
	return auc
}

// SetUpdateUser sets the "update_user" field.
func (auc *AsUnitCreate) SetUpdateUser(i int64) *AsUnitCreate {
	auc.mutation.SetUpdateUser(i)
	return auc
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableUpdateUser(i *int64) *AsUnitCreate {
	if i != nil {
		auc.SetUpdateUser(*i)
	}
	return auc
}

// SetCreateTime sets the "create_time" field.
func (auc *AsUnitCreate) SetCreateTime(dt date.DateTime) *AsUnitCreate {
	auc.mutation.SetCreateTime(dt)
	return auc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableCreateTime(dt *date.DateTime) *AsUnitCreate {
	if dt != nil {
		auc.SetCreateTime(*dt)
	}
	return auc
}

// SetUpdateTime sets the "update_time" field.
func (auc *AsUnitCreate) SetUpdateTime(dt date.DateTime) *AsUnitCreate {
	auc.mutation.SetUpdateTime(dt)
	return auc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableUpdateTime(dt *date.DateTime) *AsUnitCreate {
	if dt != nil {
		auc.SetUpdateTime(*dt)
	}
	return auc
}

// SetID sets the "id" field.
func (auc *AsUnitCreate) SetID(i int64) *AsUnitCreate {
	auc.mutation.SetID(i)
	return auc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (auc *AsUnitCreate) SetNillableID(i *int64) *AsUnitCreate {
	if i != nil {
		auc.SetID(*i)
	}
	return auc
}

// SetTenantxID sets the "tenantx" edge to the AsTenant entity by ID.
func (auc *AsUnitCreate) SetTenantxID(id int64) *AsUnitCreate {
	auc.mutation.SetTenantxID(id)
	return auc
}

// SetNillableTenantxID sets the "tenantx" edge to the AsTenant entity by ID if the given value is not nil.
func (auc *AsUnitCreate) SetNillableTenantxID(id *int64) *AsUnitCreate {
	if id != nil {
		auc = auc.SetTenantxID(*id)
	}
	return auc
}

// SetTenantx sets the "tenantx" edge to the AsTenant entity.
func (auc *AsUnitCreate) SetTenantx(a *AsTenant) *AsUnitCreate {
	return auc.SetTenantxID(a.ID)
}

// Mutation returns the AsUnitMutation object of the builder.
func (auc *AsUnitCreate) Mutation() *AsUnitMutation {
	return auc.mutation
}

// Save creates the AsUnit in the database.
func (auc *AsUnitCreate) Save(ctx context.Context) (*AsUnit, error) {
	var (
		err  error
		node *AsUnit
	)
	auc.defaults()
	if len(auc.hooks) == 0 {
		if err = auc.check(); err != nil {
			return nil, err
		}
		node, err = auc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsUnitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = auc.check(); err != nil {
				return nil, err
			}
			auc.mutation = mutation
			if node, err = auc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(auc.hooks) - 1; i >= 0; i-- {
			if auc.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = auc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (auc *AsUnitCreate) SaveX(ctx context.Context) *AsUnit {
	v, err := auc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (auc *AsUnitCreate) Exec(ctx context.Context) error {
	_, err := auc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auc *AsUnitCreate) ExecX(ctx context.Context) {
	if err := auc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auc *AsUnitCreate) defaults() {
	if _, ok := auc.mutation.IsVirtual(); !ok {
		v := asunit.DefaultIsVirtual
		auc.mutation.SetIsVirtual(v)
	}
	if _, ok := auc.mutation.IsDeleted(); !ok {
		v := asunit.DefaultIsDeleted
		auc.mutation.SetIsDeleted(v)
	}
	if _, ok := auc.mutation.Status(); !ok {
		v := asunit.DefaultStatus
		auc.mutation.SetStatus(v)
	}
	if _, ok := auc.mutation.CreateTime(); !ok {
		v := asunit.DefaultCreateTime()
		auc.mutation.SetCreateTime(v)
	}
	if _, ok := auc.mutation.UpdateTime(); !ok {
		v := asunit.DefaultUpdateTime()
		auc.mutation.SetUpdateTime(v)
	}
	if _, ok := auc.mutation.ID(); !ok {
		v := asunit.DefaultID()
		auc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auc *AsUnitCreate) check() error {
	if _, ok := auc.mutation.UnitName(); !ok {
		return &ValidationError{Name: "unit_name", err: errors.New(`schema: missing required field "AsUnit.unit_name"`)}
	}
	if _, ok := auc.mutation.IsVirtual(); !ok {
		return &ValidationError{Name: "is_virtual", err: errors.New(`schema: missing required field "AsUnit.is_virtual"`)}
	}
	if _, ok := auc.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "is_deleted", err: errors.New(`schema: missing required field "AsUnit.is_deleted"`)}
	}
	return nil
}

func (auc *AsUnitCreate) sqlSave(ctx context.Context) (*AsUnit, error) {
	_node, _spec := auc.createSpec()
	if err := sqlgraph.CreateNode(ctx, auc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (auc *AsUnitCreate) createSpec() (*AsUnit, *sqlgraph.CreateSpec) {
	var (
		_node = &AsUnit{config: auc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: asunit.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asunit.FieldID,
			},
		}
	)
	if id, ok := auc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := auc.mutation.UnitName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldUnitName,
		})
		_node.UnitName = value
	}
	if value, ok := auc.mutation.UnitNameEn(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldUnitNameEn,
		})
		_node.UnitNameEn = value
	}
	if value, ok := auc.mutation.OrganizationForm(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldOrganizationForm,
		})
		_node.OrganizationForm = value
	}
	if value, ok := auc.mutation.UnitType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldUnitType,
		})
		_node.UnitType = value
	}
	if value, ok := auc.mutation.ParentNodeName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldParentNodeName,
		})
		_node.ParentNodeName = value
	}
	if value, ok := auc.mutation.ChargeSectionID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldChargeSectionID,
		})
		_node.ChargeSectionID = value
	}
	if value, ok := auc.mutation.ChargeSectionCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldChargeSectionCode,
		})
		_node.ChargeSectionCode = value
	}
	if value, ok := auc.mutation.ChargeSectionName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldChargeSectionName,
		})
		_node.ChargeSectionName = value
	}
	if value, ok := auc.mutation.LocalFinancialCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldLocalFinancialCode,
		})
		_node.LocalFinancialCode = value
	}
	if value, ok := auc.mutation.LocalFinancialName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldLocalFinancialName,
		})
		_node.LocalFinancialName = value
	}
	if value, ok := auc.mutation.LocalFinancialID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldLocalFinancialID,
		})
		_node.LocalFinancialID = value
	}
	if value, ok := auc.mutation.OfficeAdministrationCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldOfficeAdministrationCode,
		})
		_node.OfficeAdministrationCode = value
	}
	if value, ok := auc.mutation.OfficeAdministrationName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldOfficeAdministrationName,
		})
		_node.OfficeAdministrationName = value
	}
	if value, ok := auc.mutation.AdministrationDivisionCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldAdministrationDivisionCode,
		})
		_node.AdministrationDivisionCode = value
	}
	if value, ok := auc.mutation.AdministrationDivisionName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldAdministrationDivisionName,
		})
		_node.AdministrationDivisionName = value
	}
	if value, ok := auc.mutation.BudgetCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldBudgetCode,
		})
		_node.BudgetCode = value
	}
	if value, ok := auc.mutation.CollegeCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldCollegeCode,
		})
		_node.CollegeCode = value
	}
	if value, ok := auc.mutation.OrganizationCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldOrganizationCode,
		})
		_node.OrganizationCode = value
	}
	if value, ok := auc.mutation.UnitTypeCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldUnitTypeCode,
		})
		_node.UnitTypeCode = value
	}
	if value, ok := auc.mutation.UnitTypeName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldUnitTypeName,
		})
		_node.UnitTypeName = value
	}
	if value, ok := auc.mutation.UnitBasicProperty(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldUnitBasicProperty,
		})
		_node.UnitBasicProperty = value
	}
	if value, ok := auc.mutation.SocialCreditCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldSocialCreditCode,
		})
		_node.SocialCreditCode = value
	}
	if value, ok := auc.mutation.BudgetUnitName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldBudgetUnitName,
		})
		_node.BudgetUnitName = value
	}
	if value, ok := auc.mutation.BudgetUnitCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldBudgetUnitCode,
		})
		_node.BudgetUnitCode = value
	}
	if value, ok := auc.mutation.BudgetManagementLevel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldBudgetManagementLevel,
		})
		_node.BudgetManagementLevel = value
	}
	if value, ok := auc.mutation.FirmName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldFirmName,
		})
		_node.FirmName = value
	}
	if value, ok := auc.mutation.FirmCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldFirmCode,
		})
		_node.FirmCode = value
	}
	if value, ok := auc.mutation.TelephoneNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldTelephoneNumber,
		})
		_node.TelephoneNumber = value
	}
	if value, ok := auc.mutation.PhoneNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldPhoneNumber,
		})
		_node.PhoneNumber = value
	}
	if value, ok := auc.mutation.FaxNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldFaxNumber,
		})
		_node.FaxNumber = value
	}
	if value, ok := auc.mutation.EmailAddress(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldEmailAddress,
		})
		_node.EmailAddress = value
	}
	if value, ok := auc.mutation.Province(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldProvince,
		})
		_node.Province = value
	}
	if value, ok := auc.mutation.City(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldCity,
		})
		_node.City = value
	}
	if value, ok := auc.mutation.County(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldCounty,
		})
		_node.County = value
	}
	if value, ok := auc.mutation.StreetAddress(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldStreetAddress,
		})
		_node.StreetAddress = value
	}
	if value, ok := auc.mutation.PostalCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldPostalCode,
		})
		_node.PostalCode = value
	}
	if value, ok := auc.mutation.FundSupplyModeName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldFundSupplyModeName,
		})
		_node.FundSupplyModeName = value
	}
	if value, ok := auc.mutation.FundSupplyModeCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldFundSupplyModeCode,
		})
		_node.FundSupplyModeCode = value
	}
	if value, ok := auc.mutation.AdministrationLevelName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldAdministrationLevelName,
		})
		_node.AdministrationLevelName = value
	}
	if value, ok := auc.mutation.AdministrationLevelType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldAdministrationLevelType,
		})
		_node.AdministrationLevelType = value
	}
	if value, ok := auc.mutation.DepartmentCategoryName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldDepartmentCategoryName,
		})
		_node.DepartmentCategoryName = value
	}
	if value, ok := auc.mutation.BusinessDepartmentClassificationCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldBusinessDepartmentClassificationCode,
		})
		_node.BusinessDepartmentClassificationCode = value
	}
	if value, ok := auc.mutation.Principal(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldPrincipal,
		})
		_node.Principal = value
	}
	if value, ok := auc.mutation.Contact(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldContact,
		})
		_node.Contact = value
	}
	if value, ok := auc.mutation.CorporateRepresentative(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldCorporateRepresentative,
		})
		_node.CorporateRepresentative = value
	}
	if value, ok := auc.mutation.EconomicType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldEconomicType,
		})
		_node.EconomicType = value
	}
	if value, ok := auc.mutation.FinancialAffiliation(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldFinancialAffiliation,
		})
		_node.FinancialAffiliation = value
	}
	if value, ok := auc.mutation.FinancialUnit(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldFinancialUnit,
		})
		_node.FinancialUnit = value
	}
	if value, ok := auc.mutation.VerticalUnit(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldVerticalUnit,
		})
		_node.VerticalUnit = value
	}
	if value, ok := auc.mutation.VirtualUnit(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldVirtualUnit,
		})
		_node.VirtualUnit = value
	}
	if value, ok := auc.mutation.AccountingSystem(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldAccountingSystem,
		})
		_node.AccountingSystem = value
	}
	if value, ok := auc.mutation.CorporateTag(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldCorporateTag,
		})
		_node.CorporateTag = value
	}
	if value, ok := auc.mutation.MaintainerMark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldMaintainerMark,
		})
		_node.MaintainerMark = value
	}
	if value, ok := auc.mutation.SupplierMark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldSupplierMark,
		})
		_node.SupplierMark = value
	}
	if value, ok := auc.mutation.ManufactureMark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldManufactureMark,
		})
		_node.ManufactureMark = value
	}
	if value, ok := auc.mutation.AssetDisposalAgencyTag(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldAssetDisposalAgencyTag,
		})
		_node.AssetDisposalAgencyTag = value
	}
	if value, ok := auc.mutation.StateAssetManagementCompany(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldStateAssetManagementCompany,
		})
		_node.StateAssetManagementCompany = value
	}
	if value, ok := auc.mutation.InstitutionNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldInstitutionNumber,
		})
		_node.InstitutionNumber = value
	}
	if value, ok := auc.mutation.AuthorizedNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldAuthorizedNumber,
		})
		_node.AuthorizedNumber = value
	}
	if value, ok := auc.mutation.OfSideNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldOfSideNumber,
		})
		_node.OfSideNumber = value
	}
	if value, ok := auc.mutation.InstitutionAuthority(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldInstitutionAuthority,
		})
		_node.InstitutionAuthority = value
	}
	if value, ok := auc.mutation.AdministrationAuthority(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldAdministrationAuthority,
		})
		_node.AdministrationAuthority = value
	}
	if value, ok := auc.mutation.EnableTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asunit.FieldEnableTime,
		})
		_node.EnableTime = value
	}
	if value, ok := auc.mutation.DisableTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asunit.FieldDisableTime,
		})
		_node.DisableTime = value
	}
	if value, ok := auc.mutation.SealTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asunit.FieldSealTime,
		})
		_node.SealTime = value
	}
	if value, ok := auc.mutation.UnitRemark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldUnitRemark,
		})
		_node.UnitRemark = value
	}
	if value, ok := auc.mutation.AssetDownloadStatus(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldAssetDownloadStatus,
		})
		_node.AssetDownloadStatus = value
	}
	if value, ok := auc.mutation.LatitudeAndLongitude(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldLatitudeAndLongitude,
		})
		_node.LatitudeAndLongitude = value
	}
	if value, ok := auc.mutation.Sort(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldSort,
		})
		_node.Sort = value
	}
	if value, ok := auc.mutation.OrganCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldOrganCode,
		})
		_node.OrganCode = value
	}
	if value, ok := auc.mutation.HadInnerNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldHadInnerNumber,
		})
		_node.HadInnerNumber = value
	}
	if value, ok := auc.mutation.ApproveInnerNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldApproveInnerNumber,
		})
		_node.ApproveInnerNumber = value
	}
	if value, ok := auc.mutation.Img(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldImg,
		})
		_node.Img = value
	}
	if value, ok := auc.mutation.LinkMan(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldLinkMan,
		})
		_node.LinkMan = value
	}
	if value, ok := auc.mutation.LinkPhone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldLinkPhone,
		})
		_node.LinkPhone = value
	}
	if value, ok := auc.mutation.UnitCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldUnitCode,
		})
		_node.UnitCode = value
	}
	if value, ok := auc.mutation.AuthorityTotal(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldAuthorityTotal,
		})
		_node.AuthorityTotal = value
	}
	if value, ok := auc.mutation.StaffOnActiveDuty(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldStaffOnActiveDuty,
		})
		_node.StaffOnActiveDuty = value
	}
	if value, ok := auc.mutation.RetiredStaff(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldRetiredStaff,
		})
		_node.RetiredStaff = value
	}
	if value, ok := auc.mutation.OtherStaff(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldOtherStaff,
		})
		_node.OtherStaff = value
	}
	if value, ok := auc.mutation.IsVirtual(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldIsVirtual,
		})
		_node.IsVirtual = value
	}
	if value, ok := auc.mutation.UnitReform(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldUnitReform,
		})
		_node.UnitReform = value
	}
	if value, ok := auc.mutation.PersonExpenditure(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldPersonExpenditure,
		})
		_node.PersonExpenditure = value
	}
	if value, ok := auc.mutation.InstitutionType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asunit.FieldInstitutionType,
		})
		_node.InstitutionType = value
	}
	if value, ok := auc.mutation.DepartmentIdentification(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldDepartmentIdentification,
		})
		_node.DepartmentIdentification = value
	}
	if value, ok := auc.mutation.TotalHeadcount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldTotalHeadcount,
		})
		_node.TotalHeadcount = value
	}
	if value, ok := auc.mutation.IsDeleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldIsDeleted,
		})
		_node.IsDeleted = value
	}
	if value, ok := auc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := auc.mutation.CreateUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldCreateUser,
		})
		_node.CreateUser = value
	}
	if value, ok := auc.mutation.UpdateUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asunit.FieldUpdateUser,
		})
		_node.UpdateUser = value
	}
	if value, ok := auc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asunit.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := auc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asunit.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if nodes := auc.mutation.TenantxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   asunit.TenantxTable,
			Columns: []string{asunit.TenantxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: astenant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AsUnitCreateBulk is the builder for creating many AsUnit entities in bulk.
type AsUnitCreateBulk struct {
	config
	builders []*AsUnitCreate
}

// Save creates the AsUnit entities in the database.
func (aucb *AsUnitCreateBulk) Save(ctx context.Context) ([]*AsUnit, error) {
	specs := make([]*sqlgraph.CreateSpec, len(aucb.builders))
	nodes := make([]*AsUnit, len(aucb.builders))
	mutators := make([]Mutator, len(aucb.builders))
	for i := range aucb.builders {
		func(i int, root context.Context) {
			builder := aucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AsUnitMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aucb *AsUnitCreateBulk) SaveX(ctx context.Context) []*AsUnit {
	v, err := aucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aucb *AsUnitCreateBulk) Exec(ctx context.Context) error {
	_, err := aucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aucb *AsUnitCreateBulk) ExecX(ctx context.Context) {
	if err := aucb.Exec(ctx); err != nil {
		panic(err)
	}
}
