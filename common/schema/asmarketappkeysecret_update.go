// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/asmarketapp"
	"orginone/common/schema/asmarketappkeysecret"
	"orginone/common/schema/predicate"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsMarketAppKeySecretUpdate is the builder for updating AsMarketAppKeySecret entities.
type AsMarketAppKeySecretUpdate struct {
	config
	hooks    []Hook
	mutation *AsMarketAppKeySecretMutation
}

// Where appends a list predicates to the AsMarketAppKeySecretUpdate builder.
func (amaksu *AsMarketAppKeySecretUpdate) Where(ps ...predicate.AsMarketAppKeySecret) *AsMarketAppKeySecretUpdate {
	amaksu.mutation.Where(ps...)
	return amaksu
}

// SetAppID sets the "app_id" field.
func (amaksu *AsMarketAppKeySecretUpdate) SetAppID(i int64) *AsMarketAppKeySecretUpdate {
	amaksu.mutation.SetAppID(i)
	return amaksu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (amaksu *AsMarketAppKeySecretUpdate) SetNillableAppID(i *int64) *AsMarketAppKeySecretUpdate {
	if i != nil {
		amaksu.SetAppID(*i)
	}
	return amaksu
}

// ClearAppID clears the value of the "app_id" field.
func (amaksu *AsMarketAppKeySecretUpdate) ClearAppID() *AsMarketAppKeySecretUpdate {
	amaksu.mutation.ClearAppID()
	return amaksu
}

// SetAppKey sets the "app_key" field.
func (amaksu *AsMarketAppKeySecretUpdate) SetAppKey(s string) *AsMarketAppKeySecretUpdate {
	amaksu.mutation.SetAppKey(s)
	return amaksu
}

// SetNillableAppKey sets the "app_key" field if the given value is not nil.
func (amaksu *AsMarketAppKeySecretUpdate) SetNillableAppKey(s *string) *AsMarketAppKeySecretUpdate {
	if s != nil {
		amaksu.SetAppKey(*s)
	}
	return amaksu
}

// ClearAppKey clears the value of the "app_key" field.
func (amaksu *AsMarketAppKeySecretUpdate) ClearAppKey() *AsMarketAppKeySecretUpdate {
	amaksu.mutation.ClearAppKey()
	return amaksu
}

// SetAppSecret sets the "app_secret" field.
func (amaksu *AsMarketAppKeySecretUpdate) SetAppSecret(s string) *AsMarketAppKeySecretUpdate {
	amaksu.mutation.SetAppSecret(s)
	return amaksu
}

// SetNillableAppSecret sets the "app_secret" field if the given value is not nil.
func (amaksu *AsMarketAppKeySecretUpdate) SetNillableAppSecret(s *string) *AsMarketAppKeySecretUpdate {
	if s != nil {
		amaksu.SetAppSecret(*s)
	}
	return amaksu
}

// ClearAppSecret clears the value of the "app_secret" field.
func (amaksu *AsMarketAppKeySecretUpdate) ClearAppSecret() *AsMarketAppKeySecretUpdate {
	amaksu.mutation.ClearAppSecret()
	return amaksu
}

// SetIsDeleted sets the "is_deleted" field.
func (amaksu *AsMarketAppKeySecretUpdate) SetIsDeleted(i int64) *AsMarketAppKeySecretUpdate {
	amaksu.mutation.ResetIsDeleted()
	amaksu.mutation.SetIsDeleted(i)
	return amaksu
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (amaksu *AsMarketAppKeySecretUpdate) SetNillableIsDeleted(i *int64) *AsMarketAppKeySecretUpdate {
	if i != nil {
		amaksu.SetIsDeleted(*i)
	}
	return amaksu
}

// AddIsDeleted adds i to the "is_deleted" field.
func (amaksu *AsMarketAppKeySecretUpdate) AddIsDeleted(i int64) *AsMarketAppKeySecretUpdate {
	amaksu.mutation.AddIsDeleted(i)
	return amaksu
}

// SetStatus sets the "status" field.
func (amaksu *AsMarketAppKeySecretUpdate) SetStatus(i int64) *AsMarketAppKeySecretUpdate {
	amaksu.mutation.ResetStatus()
	amaksu.mutation.SetStatus(i)
	return amaksu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (amaksu *AsMarketAppKeySecretUpdate) SetNillableStatus(i *int64) *AsMarketAppKeySecretUpdate {
	if i != nil {
		amaksu.SetStatus(*i)
	}
	return amaksu
}

// AddStatus adds i to the "status" field.
func (amaksu *AsMarketAppKeySecretUpdate) AddStatus(i int64) *AsMarketAppKeySecretUpdate {
	amaksu.mutation.AddStatus(i)
	return amaksu
}

// ClearStatus clears the value of the "status" field.
func (amaksu *AsMarketAppKeySecretUpdate) ClearStatus() *AsMarketAppKeySecretUpdate {
	amaksu.mutation.ClearStatus()
	return amaksu
}

// SetCreateUser sets the "create_user" field.
func (amaksu *AsMarketAppKeySecretUpdate) SetCreateUser(i int64) *AsMarketAppKeySecretUpdate {
	amaksu.mutation.ResetCreateUser()
	amaksu.mutation.SetCreateUser(i)
	return amaksu
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (amaksu *AsMarketAppKeySecretUpdate) SetNillableCreateUser(i *int64) *AsMarketAppKeySecretUpdate {
	if i != nil {
		amaksu.SetCreateUser(*i)
	}
	return amaksu
}

// AddCreateUser adds i to the "create_user" field.
func (amaksu *AsMarketAppKeySecretUpdate) AddCreateUser(i int64) *AsMarketAppKeySecretUpdate {
	amaksu.mutation.AddCreateUser(i)
	return amaksu
}

// ClearCreateUser clears the value of the "create_user" field.
func (amaksu *AsMarketAppKeySecretUpdate) ClearCreateUser() *AsMarketAppKeySecretUpdate {
	amaksu.mutation.ClearCreateUser()
	return amaksu
}

// SetUpdateUser sets the "update_user" field.
func (amaksu *AsMarketAppKeySecretUpdate) SetUpdateUser(i int64) *AsMarketAppKeySecretUpdate {
	amaksu.mutation.ResetUpdateUser()
	amaksu.mutation.SetUpdateUser(i)
	return amaksu
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (amaksu *AsMarketAppKeySecretUpdate) SetNillableUpdateUser(i *int64) *AsMarketAppKeySecretUpdate {
	if i != nil {
		amaksu.SetUpdateUser(*i)
	}
	return amaksu
}

// AddUpdateUser adds i to the "update_user" field.
func (amaksu *AsMarketAppKeySecretUpdate) AddUpdateUser(i int64) *AsMarketAppKeySecretUpdate {
	amaksu.mutation.AddUpdateUser(i)
	return amaksu
}

// ClearUpdateUser clears the value of the "update_user" field.
func (amaksu *AsMarketAppKeySecretUpdate) ClearUpdateUser() *AsMarketAppKeySecretUpdate {
	amaksu.mutation.ClearUpdateUser()
	return amaksu
}

// SetUpdateTime sets the "update_time" field.
func (amaksu *AsMarketAppKeySecretUpdate) SetUpdateTime(dt date.DateTime) *AsMarketAppKeySecretUpdate {
	amaksu.mutation.SetUpdateTime(dt)
	return amaksu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (amaksu *AsMarketAppKeySecretUpdate) ClearUpdateTime() *AsMarketAppKeySecretUpdate {
	amaksu.mutation.ClearUpdateTime()
	return amaksu
}

// SetAppxID sets the "appx" edge to the AsMarketApp entity by ID.
func (amaksu *AsMarketAppKeySecretUpdate) SetAppxID(id int64) *AsMarketAppKeySecretUpdate {
	amaksu.mutation.SetAppxID(id)
	return amaksu
}

// SetNillableAppxID sets the "appx" edge to the AsMarketApp entity by ID if the given value is not nil.
func (amaksu *AsMarketAppKeySecretUpdate) SetNillableAppxID(id *int64) *AsMarketAppKeySecretUpdate {
	if id != nil {
		amaksu = amaksu.SetAppxID(*id)
	}
	return amaksu
}

// SetAppx sets the "appx" edge to the AsMarketApp entity.
func (amaksu *AsMarketAppKeySecretUpdate) SetAppx(a *AsMarketApp) *AsMarketAppKeySecretUpdate {
	return amaksu.SetAppxID(a.ID)
}

// Mutation returns the AsMarketAppKeySecretMutation object of the builder.
func (amaksu *AsMarketAppKeySecretUpdate) Mutation() *AsMarketAppKeySecretMutation {
	return amaksu.mutation
}

// ClearAppx clears the "appx" edge to the AsMarketApp entity.
func (amaksu *AsMarketAppKeySecretUpdate) ClearAppx() *AsMarketAppKeySecretUpdate {
	amaksu.mutation.ClearAppx()
	return amaksu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (amaksu *AsMarketAppKeySecretUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	amaksu.defaults()
	if len(amaksu.hooks) == 0 {
		affected, err = amaksu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsMarketAppKeySecretMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			amaksu.mutation = mutation
			affected, err = amaksu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(amaksu.hooks) - 1; i >= 0; i-- {
			if amaksu.hooks[i] == nil {
				return 0, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = amaksu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, amaksu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (amaksu *AsMarketAppKeySecretUpdate) SaveX(ctx context.Context) int {
	affected, err := amaksu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (amaksu *AsMarketAppKeySecretUpdate) Exec(ctx context.Context) error {
	_, err := amaksu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amaksu *AsMarketAppKeySecretUpdate) ExecX(ctx context.Context) {
	if err := amaksu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amaksu *AsMarketAppKeySecretUpdate) defaults() {
	if _, ok := amaksu.mutation.UpdateTime(); !ok && !amaksu.mutation.UpdateTimeCleared() {
		v := asmarketappkeysecret.UpdateDefaultUpdateTime()
		amaksu.mutation.SetUpdateTime(v)
	}
}

func (amaksu *AsMarketAppKeySecretUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asmarketappkeysecret.Table,
			Columns: asmarketappkeysecret.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asmarketappkeysecret.FieldID,
			},
		},
	}
	if ps := amaksu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amaksu.mutation.AppKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappkeysecret.FieldAppKey,
		})
	}
	if amaksu.mutation.AppKeyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappkeysecret.FieldAppKey,
		})
	}
	if value, ok := amaksu.mutation.AppSecret(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappkeysecret.FieldAppSecret,
		})
	}
	if amaksu.mutation.AppSecretCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappkeysecret.FieldAppSecret,
		})
	}
	if value, ok := amaksu.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappkeysecret.FieldIsDeleted,
		})
	}
	if value, ok := amaksu.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappkeysecret.FieldIsDeleted,
		})
	}
	if value, ok := amaksu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappkeysecret.FieldStatus,
		})
	}
	if value, ok := amaksu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappkeysecret.FieldStatus,
		})
	}
	if amaksu.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappkeysecret.FieldStatus,
		})
	}
	if value, ok := amaksu.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappkeysecret.FieldCreateUser,
		})
	}
	if value, ok := amaksu.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappkeysecret.FieldCreateUser,
		})
	}
	if amaksu.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappkeysecret.FieldCreateUser,
		})
	}
	if value, ok := amaksu.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappkeysecret.FieldUpdateUser,
		})
	}
	if value, ok := amaksu.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappkeysecret.FieldUpdateUser,
		})
	}
	if amaksu.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappkeysecret.FieldUpdateUser,
		})
	}
	if amaksu.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketappkeysecret.FieldCreateTime,
		})
	}
	if value, ok := amaksu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketappkeysecret.FieldUpdateTime,
		})
	}
	if amaksu.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketappkeysecret.FieldUpdateTime,
		})
	}
	if amaksu.mutation.AppxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketappkeysecret.AppxTable,
			Columns: []string{asmarketappkeysecret.AppxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapp.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amaksu.mutation.AppxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketappkeysecret.AppxTable,
			Columns: []string{asmarketappkeysecret.AppxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapp.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, amaksu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asmarketappkeysecret.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AsMarketAppKeySecretUpdateOne is the builder for updating a single AsMarketAppKeySecret entity.
type AsMarketAppKeySecretUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AsMarketAppKeySecretMutation
}

// SetAppID sets the "app_id" field.
func (amaksuo *AsMarketAppKeySecretUpdateOne) SetAppID(i int64) *AsMarketAppKeySecretUpdateOne {
	amaksuo.mutation.SetAppID(i)
	return amaksuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (amaksuo *AsMarketAppKeySecretUpdateOne) SetNillableAppID(i *int64) *AsMarketAppKeySecretUpdateOne {
	if i != nil {
		amaksuo.SetAppID(*i)
	}
	return amaksuo
}

// ClearAppID clears the value of the "app_id" field.
func (amaksuo *AsMarketAppKeySecretUpdateOne) ClearAppID() *AsMarketAppKeySecretUpdateOne {
	amaksuo.mutation.ClearAppID()
	return amaksuo
}

// SetAppKey sets the "app_key" field.
func (amaksuo *AsMarketAppKeySecretUpdateOne) SetAppKey(s string) *AsMarketAppKeySecretUpdateOne {
	amaksuo.mutation.SetAppKey(s)
	return amaksuo
}

// SetNillableAppKey sets the "app_key" field if the given value is not nil.
func (amaksuo *AsMarketAppKeySecretUpdateOne) SetNillableAppKey(s *string) *AsMarketAppKeySecretUpdateOne {
	if s != nil {
		amaksuo.SetAppKey(*s)
	}
	return amaksuo
}

// ClearAppKey clears the value of the "app_key" field.
func (amaksuo *AsMarketAppKeySecretUpdateOne) ClearAppKey() *AsMarketAppKeySecretUpdateOne {
	amaksuo.mutation.ClearAppKey()
	return amaksuo
}

// SetAppSecret sets the "app_secret" field.
func (amaksuo *AsMarketAppKeySecretUpdateOne) SetAppSecret(s string) *AsMarketAppKeySecretUpdateOne {
	amaksuo.mutation.SetAppSecret(s)
	return amaksuo
}

// SetNillableAppSecret sets the "app_secret" field if the given value is not nil.
func (amaksuo *AsMarketAppKeySecretUpdateOne) SetNillableAppSecret(s *string) *AsMarketAppKeySecretUpdateOne {
	if s != nil {
		amaksuo.SetAppSecret(*s)
	}
	return amaksuo
}

// ClearAppSecret clears the value of the "app_secret" field.
func (amaksuo *AsMarketAppKeySecretUpdateOne) ClearAppSecret() *AsMarketAppKeySecretUpdateOne {
	amaksuo.mutation.ClearAppSecret()
	return amaksuo
}

// SetIsDeleted sets the "is_deleted" field.
func (amaksuo *AsMarketAppKeySecretUpdateOne) SetIsDeleted(i int64) *AsMarketAppKeySecretUpdateOne {
	amaksuo.mutation.ResetIsDeleted()
	amaksuo.mutation.SetIsDeleted(i)
	return amaksuo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (amaksuo *AsMarketAppKeySecretUpdateOne) SetNillableIsDeleted(i *int64) *AsMarketAppKeySecretUpdateOne {
	if i != nil {
		amaksuo.SetIsDeleted(*i)
	}
	return amaksuo
}

// AddIsDeleted adds i to the "is_deleted" field.
func (amaksuo *AsMarketAppKeySecretUpdateOne) AddIsDeleted(i int64) *AsMarketAppKeySecretUpdateOne {
	amaksuo.mutation.AddIsDeleted(i)
	return amaksuo
}

// SetStatus sets the "status" field.
func (amaksuo *AsMarketAppKeySecretUpdateOne) SetStatus(i int64) *AsMarketAppKeySecretUpdateOne {
	amaksuo.mutation.ResetStatus()
	amaksuo.mutation.SetStatus(i)
	return amaksuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (amaksuo *AsMarketAppKeySecretUpdateOne) SetNillableStatus(i *int64) *AsMarketAppKeySecretUpdateOne {
	if i != nil {
		amaksuo.SetStatus(*i)
	}
	return amaksuo
}

// AddStatus adds i to the "status" field.
func (amaksuo *AsMarketAppKeySecretUpdateOne) AddStatus(i int64) *AsMarketAppKeySecretUpdateOne {
	amaksuo.mutation.AddStatus(i)
	return amaksuo
}

// ClearStatus clears the value of the "status" field.
func (amaksuo *AsMarketAppKeySecretUpdateOne) ClearStatus() *AsMarketAppKeySecretUpdateOne {
	amaksuo.mutation.ClearStatus()
	return amaksuo
}

// SetCreateUser sets the "create_user" field.
func (amaksuo *AsMarketAppKeySecretUpdateOne) SetCreateUser(i int64) *AsMarketAppKeySecretUpdateOne {
	amaksuo.mutation.ResetCreateUser()
	amaksuo.mutation.SetCreateUser(i)
	return amaksuo
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (amaksuo *AsMarketAppKeySecretUpdateOne) SetNillableCreateUser(i *int64) *AsMarketAppKeySecretUpdateOne {
	if i != nil {
		amaksuo.SetCreateUser(*i)
	}
	return amaksuo
}

// AddCreateUser adds i to the "create_user" field.
func (amaksuo *AsMarketAppKeySecretUpdateOne) AddCreateUser(i int64) *AsMarketAppKeySecretUpdateOne {
	amaksuo.mutation.AddCreateUser(i)
	return amaksuo
}

// ClearCreateUser clears the value of the "create_user" field.
func (amaksuo *AsMarketAppKeySecretUpdateOne) ClearCreateUser() *AsMarketAppKeySecretUpdateOne {
	amaksuo.mutation.ClearCreateUser()
	return amaksuo
}

// SetUpdateUser sets the "update_user" field.
func (amaksuo *AsMarketAppKeySecretUpdateOne) SetUpdateUser(i int64) *AsMarketAppKeySecretUpdateOne {
	amaksuo.mutation.ResetUpdateUser()
	amaksuo.mutation.SetUpdateUser(i)
	return amaksuo
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (amaksuo *AsMarketAppKeySecretUpdateOne) SetNillableUpdateUser(i *int64) *AsMarketAppKeySecretUpdateOne {
	if i != nil {
		amaksuo.SetUpdateUser(*i)
	}
	return amaksuo
}

// AddUpdateUser adds i to the "update_user" field.
func (amaksuo *AsMarketAppKeySecretUpdateOne) AddUpdateUser(i int64) *AsMarketAppKeySecretUpdateOne {
	amaksuo.mutation.AddUpdateUser(i)
	return amaksuo
}

// ClearUpdateUser clears the value of the "update_user" field.
func (amaksuo *AsMarketAppKeySecretUpdateOne) ClearUpdateUser() *AsMarketAppKeySecretUpdateOne {
	amaksuo.mutation.ClearUpdateUser()
	return amaksuo
}

// SetUpdateTime sets the "update_time" field.
func (amaksuo *AsMarketAppKeySecretUpdateOne) SetUpdateTime(dt date.DateTime) *AsMarketAppKeySecretUpdateOne {
	amaksuo.mutation.SetUpdateTime(dt)
	return amaksuo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (amaksuo *AsMarketAppKeySecretUpdateOne) ClearUpdateTime() *AsMarketAppKeySecretUpdateOne {
	amaksuo.mutation.ClearUpdateTime()
	return amaksuo
}

// SetAppxID sets the "appx" edge to the AsMarketApp entity by ID.
func (amaksuo *AsMarketAppKeySecretUpdateOne) SetAppxID(id int64) *AsMarketAppKeySecretUpdateOne {
	amaksuo.mutation.SetAppxID(id)
	return amaksuo
}

// SetNillableAppxID sets the "appx" edge to the AsMarketApp entity by ID if the given value is not nil.
func (amaksuo *AsMarketAppKeySecretUpdateOne) SetNillableAppxID(id *int64) *AsMarketAppKeySecretUpdateOne {
	if id != nil {
		amaksuo = amaksuo.SetAppxID(*id)
	}
	return amaksuo
}

// SetAppx sets the "appx" edge to the AsMarketApp entity.
func (amaksuo *AsMarketAppKeySecretUpdateOne) SetAppx(a *AsMarketApp) *AsMarketAppKeySecretUpdateOne {
	return amaksuo.SetAppxID(a.ID)
}

// Mutation returns the AsMarketAppKeySecretMutation object of the builder.
func (amaksuo *AsMarketAppKeySecretUpdateOne) Mutation() *AsMarketAppKeySecretMutation {
	return amaksuo.mutation
}

// ClearAppx clears the "appx" edge to the AsMarketApp entity.
func (amaksuo *AsMarketAppKeySecretUpdateOne) ClearAppx() *AsMarketAppKeySecretUpdateOne {
	amaksuo.mutation.ClearAppx()
	return amaksuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (amaksuo *AsMarketAppKeySecretUpdateOne) Select(field string, fields ...string) *AsMarketAppKeySecretUpdateOne {
	amaksuo.fields = append([]string{field}, fields...)
	return amaksuo
}

// Save executes the query and returns the updated AsMarketAppKeySecret entity.
func (amaksuo *AsMarketAppKeySecretUpdateOne) Save(ctx context.Context) (*AsMarketAppKeySecret, error) {
	var (
		err  error
		node *AsMarketAppKeySecret
	)
	amaksuo.defaults()
	if len(amaksuo.hooks) == 0 {
		node, err = amaksuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsMarketAppKeySecretMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			amaksuo.mutation = mutation
			node, err = amaksuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(amaksuo.hooks) - 1; i >= 0; i-- {
			if amaksuo.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = amaksuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, amaksuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (amaksuo *AsMarketAppKeySecretUpdateOne) SaveX(ctx context.Context) *AsMarketAppKeySecret {
	node, err := amaksuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (amaksuo *AsMarketAppKeySecretUpdateOne) Exec(ctx context.Context) error {
	_, err := amaksuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amaksuo *AsMarketAppKeySecretUpdateOne) ExecX(ctx context.Context) {
	if err := amaksuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amaksuo *AsMarketAppKeySecretUpdateOne) defaults() {
	if _, ok := amaksuo.mutation.UpdateTime(); !ok && !amaksuo.mutation.UpdateTimeCleared() {
		v := asmarketappkeysecret.UpdateDefaultUpdateTime()
		amaksuo.mutation.SetUpdateTime(v)
	}
}

func (amaksuo *AsMarketAppKeySecretUpdateOne) sqlSave(ctx context.Context) (_node *AsMarketAppKeySecret, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asmarketappkeysecret.Table,
			Columns: asmarketappkeysecret.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asmarketappkeysecret.FieldID,
			},
		},
	}
	id, ok := amaksuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`schema: missing "AsMarketAppKeySecret.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := amaksuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asmarketappkeysecret.FieldID)
		for _, f := range fields {
			if !asmarketappkeysecret.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("schema: invalid field %q for query", f)}
			}
			if f != asmarketappkeysecret.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := amaksuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amaksuo.mutation.AppKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappkeysecret.FieldAppKey,
		})
	}
	if amaksuo.mutation.AppKeyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappkeysecret.FieldAppKey,
		})
	}
	if value, ok := amaksuo.mutation.AppSecret(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappkeysecret.FieldAppSecret,
		})
	}
	if amaksuo.mutation.AppSecretCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappkeysecret.FieldAppSecret,
		})
	}
	if value, ok := amaksuo.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappkeysecret.FieldIsDeleted,
		})
	}
	if value, ok := amaksuo.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappkeysecret.FieldIsDeleted,
		})
	}
	if value, ok := amaksuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappkeysecret.FieldStatus,
		})
	}
	if value, ok := amaksuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappkeysecret.FieldStatus,
		})
	}
	if amaksuo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappkeysecret.FieldStatus,
		})
	}
	if value, ok := amaksuo.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappkeysecret.FieldCreateUser,
		})
	}
	if value, ok := amaksuo.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappkeysecret.FieldCreateUser,
		})
	}
	if amaksuo.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappkeysecret.FieldCreateUser,
		})
	}
	if value, ok := amaksuo.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappkeysecret.FieldUpdateUser,
		})
	}
	if value, ok := amaksuo.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappkeysecret.FieldUpdateUser,
		})
	}
	if amaksuo.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappkeysecret.FieldUpdateUser,
		})
	}
	if amaksuo.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketappkeysecret.FieldCreateTime,
		})
	}
	if value, ok := amaksuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketappkeysecret.FieldUpdateTime,
		})
	}
	if amaksuo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketappkeysecret.FieldUpdateTime,
		})
	}
	if amaksuo.mutation.AppxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketappkeysecret.AppxTable,
			Columns: []string{asmarketappkeysecret.AppxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapp.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amaksuo.mutation.AppxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketappkeysecret.AppxTable,
			Columns: []string{asmarketappkeysecret.AppxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapp.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AsMarketAppKeySecret{config: amaksuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, amaksuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asmarketappkeysecret.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
