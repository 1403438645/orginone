// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"
	"orginone/common/schema/asinneragency"
	"orginone/common/schema/asjob"
	"orginone/common/schema/asmarketroledistribution"
	"orginone/common/schema/asperson"
	"orginone/common/schema/asuser"
	"orginone/common/schema/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsInnerAgencyQuery is the builder for querying AsInnerAgency entities.
type AsInnerAgencyQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.AsInnerAgency
	// eager-loading edges.
	withParent       *AsInnerAgencyQuery
	withChildrens    *AsInnerAgencyQuery
	withJobs         *AsJobQuery
	withUsers        *AsUserQuery
	withPersons      *AsPersonQuery
	withRoleDistribs *AsMarketRoleDistributionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AsInnerAgencyQuery builder.
func (aiaq *AsInnerAgencyQuery) Where(ps ...predicate.AsInnerAgency) *AsInnerAgencyQuery {
	aiaq.predicates = append(aiaq.predicates, ps...)
	return aiaq
}

// Limit adds a limit step to the query.
func (aiaq *AsInnerAgencyQuery) Limit(limit int) *AsInnerAgencyQuery {
	aiaq.limit = &limit
	return aiaq
}

// Offset adds an offset step to the query.
func (aiaq *AsInnerAgencyQuery) Offset(offset int) *AsInnerAgencyQuery {
	aiaq.offset = &offset
	return aiaq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (aiaq *AsInnerAgencyQuery) Unique(unique bool) *AsInnerAgencyQuery {
	aiaq.unique = &unique
	return aiaq
}

// Order adds an order step to the query.
func (aiaq *AsInnerAgencyQuery) Order(o ...OrderFunc) *AsInnerAgencyQuery {
	aiaq.order = append(aiaq.order, o...)
	return aiaq
}

// QueryParent chains the current query on the "parent" edge.
func (aiaq *AsInnerAgencyQuery) QueryParent() *AsInnerAgencyQuery {
	query := &AsInnerAgencyQuery{config: aiaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aiaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aiaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asinneragency.Table, asinneragency.FieldID, selector),
			sqlgraph.To(asinneragency.Table, asinneragency.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asinneragency.ParentTable, asinneragency.ParentColumn),
		)
		fromU = sqlgraph.SetNeighbors(aiaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChildrens chains the current query on the "childrens" edge.
func (aiaq *AsInnerAgencyQuery) QueryChildrens() *AsInnerAgencyQuery {
	query := &AsInnerAgencyQuery{config: aiaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aiaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aiaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asinneragency.Table, asinneragency.FieldID, selector),
			sqlgraph.To(asinneragency.Table, asinneragency.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asinneragency.ChildrensTable, asinneragency.ChildrensColumn),
		)
		fromU = sqlgraph.SetNeighbors(aiaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryJobs chains the current query on the "jobs" edge.
func (aiaq *AsInnerAgencyQuery) QueryJobs() *AsJobQuery {
	query := &AsJobQuery{config: aiaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aiaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aiaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asinneragency.Table, asinneragency.FieldID, selector),
			sqlgraph.To(asjob.Table, asjob.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, asinneragency.JobsTable, asinneragency.JobsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(aiaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUsers chains the current query on the "users" edge.
func (aiaq *AsInnerAgencyQuery) QueryUsers() *AsUserQuery {
	query := &AsUserQuery{config: aiaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aiaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aiaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asinneragency.Table, asinneragency.FieldID, selector),
			sqlgraph.To(asuser.Table, asuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, asinneragency.UsersTable, asinneragency.UsersPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(aiaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPersons chains the current query on the "persons" edge.
func (aiaq *AsInnerAgencyQuery) QueryPersons() *AsPersonQuery {
	query := &AsPersonQuery{config: aiaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aiaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aiaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asinneragency.Table, asinneragency.FieldID, selector),
			sqlgraph.To(asperson.Table, asperson.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, asinneragency.PersonsTable, asinneragency.PersonsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(aiaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRoleDistribs chains the current query on the "roleDistribs" edge.
func (aiaq *AsInnerAgencyQuery) QueryRoleDistribs() *AsMarketRoleDistributionQuery {
	query := &AsMarketRoleDistributionQuery{config: aiaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aiaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aiaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asinneragency.Table, asinneragency.FieldID, selector),
			sqlgraph.To(asmarketroledistribution.Table, asmarketroledistribution.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asinneragency.RoleDistribsTable, asinneragency.RoleDistribsColumn),
		)
		fromU = sqlgraph.SetNeighbors(aiaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AsInnerAgency entity from the query.
// Returns a *NotFoundError when no AsInnerAgency was found.
func (aiaq *AsInnerAgencyQuery) First(ctx context.Context) (*AsInnerAgency, error) {
	nodes, err := aiaq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{asinneragency.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (aiaq *AsInnerAgencyQuery) FirstX(ctx context.Context) *AsInnerAgency {
	node, err := aiaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AsInnerAgency ID from the query.
// Returns a *NotFoundError when no AsInnerAgency ID was found.
func (aiaq *AsInnerAgencyQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = aiaq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{asinneragency.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (aiaq *AsInnerAgencyQuery) FirstIDX(ctx context.Context) int64 {
	id, err := aiaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AsInnerAgency entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AsInnerAgency entity is found.
// Returns a *NotFoundError when no AsInnerAgency entities are found.
func (aiaq *AsInnerAgencyQuery) Only(ctx context.Context) (*AsInnerAgency, error) {
	nodes, err := aiaq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{asinneragency.Label}
	default:
		return nil, &NotSingularError{asinneragency.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (aiaq *AsInnerAgencyQuery) OnlyX(ctx context.Context) *AsInnerAgency {
	node, err := aiaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AsInnerAgency ID in the query.
// Returns a *NotSingularError when more than one AsInnerAgency ID is found.
// Returns a *NotFoundError when no entities are found.
func (aiaq *AsInnerAgencyQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = aiaq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{asinneragency.Label}
	default:
		err = &NotSingularError{asinneragency.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (aiaq *AsInnerAgencyQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := aiaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AsInnerAgencies.
func (aiaq *AsInnerAgencyQuery) All(ctx context.Context) ([]*AsInnerAgency, error) {
	if err := aiaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return aiaq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (aiaq *AsInnerAgencyQuery) AllX(ctx context.Context) []*AsInnerAgency {
	nodes, err := aiaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AsInnerAgency IDs.
func (aiaq *AsInnerAgencyQuery) IDs(ctx context.Context) ([]int64, error) {
	var ids []int64
	if err := aiaq.Select(asinneragency.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (aiaq *AsInnerAgencyQuery) IDsX(ctx context.Context) []int64 {
	ids, err := aiaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (aiaq *AsInnerAgencyQuery) Count(ctx context.Context) (int64, error) {
	if err := aiaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return aiaq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (aiaq *AsInnerAgencyQuery) CountX(ctx context.Context) int64 {
	count, err := aiaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (aiaq *AsInnerAgencyQuery) Exist(ctx context.Context) (bool, error) {
	if err := aiaq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return aiaq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (aiaq *AsInnerAgencyQuery) ExistX(ctx context.Context) bool {
	exist, err := aiaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AsInnerAgencyQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (aiaq *AsInnerAgencyQuery) Clone() *AsInnerAgencyQuery {
	if aiaq == nil {
		return nil
	}
	return &AsInnerAgencyQuery{
		config:           aiaq.config,
		limit:            aiaq.limit,
		offset:           aiaq.offset,
		order:            append([]OrderFunc{}, aiaq.order...),
		predicates:       append([]predicate.AsInnerAgency{}, aiaq.predicates...),
		withParent:       aiaq.withParent.Clone(),
		withChildrens:    aiaq.withChildrens.Clone(),
		withJobs:         aiaq.withJobs.Clone(),
		withUsers:        aiaq.withUsers.Clone(),
		withPersons:      aiaq.withPersons.Clone(),
		withRoleDistribs: aiaq.withRoleDistribs.Clone(),
		// clone intermediate query.
		sql:    aiaq.sql.Clone(),
		path:   aiaq.path,
		unique: aiaq.unique,
	}
}

// WithParent tells the query-builder to eager-load the nodes that are connected to
// the "parent" edge. The optional arguments are used to configure the query builder of the edge.
func (aiaq *AsInnerAgencyQuery) WithParent(opts ...func(*AsInnerAgencyQuery)) *AsInnerAgencyQuery {
	query := &AsInnerAgencyQuery{config: aiaq.config}
	for _, opt := range opts {
		opt(query)
	}
	aiaq.withParent = query
	return aiaq
}

// WithChildrens tells the query-builder to eager-load the nodes that are connected to
// the "childrens" edge. The optional arguments are used to configure the query builder of the edge.
func (aiaq *AsInnerAgencyQuery) WithChildrens(opts ...func(*AsInnerAgencyQuery)) *AsInnerAgencyQuery {
	query := &AsInnerAgencyQuery{config: aiaq.config}
	for _, opt := range opts {
		opt(query)
	}
	aiaq.withChildrens = query
	return aiaq
}

// WithJobs tells the query-builder to eager-load the nodes that are connected to
// the "jobs" edge. The optional arguments are used to configure the query builder of the edge.
func (aiaq *AsInnerAgencyQuery) WithJobs(opts ...func(*AsJobQuery)) *AsInnerAgencyQuery {
	query := &AsJobQuery{config: aiaq.config}
	for _, opt := range opts {
		opt(query)
	}
	aiaq.withJobs = query
	return aiaq
}

// WithUsers tells the query-builder to eager-load the nodes that are connected to
// the "users" edge. The optional arguments are used to configure the query builder of the edge.
func (aiaq *AsInnerAgencyQuery) WithUsers(opts ...func(*AsUserQuery)) *AsInnerAgencyQuery {
	query := &AsUserQuery{config: aiaq.config}
	for _, opt := range opts {
		opt(query)
	}
	aiaq.withUsers = query
	return aiaq
}

// WithPersons tells the query-builder to eager-load the nodes that are connected to
// the "persons" edge. The optional arguments are used to configure the query builder of the edge.
func (aiaq *AsInnerAgencyQuery) WithPersons(opts ...func(*AsPersonQuery)) *AsInnerAgencyQuery {
	query := &AsPersonQuery{config: aiaq.config}
	for _, opt := range opts {
		opt(query)
	}
	aiaq.withPersons = query
	return aiaq
}

// WithRoleDistribs tells the query-builder to eager-load the nodes that are connected to
// the "roleDistribs" edge. The optional arguments are used to configure the query builder of the edge.
func (aiaq *AsInnerAgencyQuery) WithRoleDistribs(opts ...func(*AsMarketRoleDistributionQuery)) *AsInnerAgencyQuery {
	query := &AsMarketRoleDistributionQuery{config: aiaq.config}
	for _, opt := range opts {
		opt(query)
	}
	aiaq.withRoleDistribs = query
	return aiaq
}

// ThenParent tells the query-builder to eager-load the nodes that are connected to
// the "parent" edge. The optional arguments are used to configure the query builder of the edge.
func (aiaq *AsInnerAgencyQuery) ThenParent(opts ...func(*AsInnerAgencyQuery)) *AsInnerAgencyQuery {
	query := &AsInnerAgencyQuery{config: aiaq.config}
	for _, opt := range opts {
		opt(query.Where(asinneragency.IsDeleted(0)))
	}
	aiaq.withParent = query
	return aiaq
}

// ThenChildrens tells the query-builder to eager-load the nodes that are connected to
// the "childrens" edge. The optional arguments are used to configure the query builder of the edge.
func (aiaq *AsInnerAgencyQuery) ThenChildrens(opts ...func(*AsInnerAgencyQuery)) *AsInnerAgencyQuery {
	query := &AsInnerAgencyQuery{config: aiaq.config}
	for _, opt := range opts {
		opt(query.Where(asinneragency.IsDeleted(0)))
	}
	aiaq.withChildrens = query
	return aiaq
}

// ThenJobs tells the query-builder to eager-load the nodes that are connected to
// the "jobs" edge. The optional arguments are used to configure the query builder of the edge.
func (aiaq *AsInnerAgencyQuery) ThenJobs(opts ...func(*AsJobQuery)) *AsInnerAgencyQuery {
	query := &AsJobQuery{config: aiaq.config}
	for _, opt := range opts {
		opt(query.Where(asjob.IsDeleted(0)))
	}
	aiaq.withJobs = query
	return aiaq
}

// ThenUsers tells the query-builder to eager-load the nodes that are connected to
// the "users" edge. The optional arguments are used to configure the query builder of the edge.
func (aiaq *AsInnerAgencyQuery) ThenUsers(opts ...func(*AsUserQuery)) *AsInnerAgencyQuery {
	query := &AsUserQuery{config: aiaq.config}
	for _, opt := range opts {
		opt(query.Where(asuser.IsDeleted(0)))
	}
	aiaq.withUsers = query
	return aiaq
}

// ThenPersons tells the query-builder to eager-load the nodes that are connected to
// the "persons" edge. The optional arguments are used to configure the query builder of the edge.
func (aiaq *AsInnerAgencyQuery) ThenPersons(opts ...func(*AsPersonQuery)) *AsInnerAgencyQuery {
	query := &AsPersonQuery{config: aiaq.config}
	for _, opt := range opts {
		opt(query.Where(asperson.IsDeleted(0)))
	}
	aiaq.withPersons = query
	return aiaq
}

// ThenRoleDistribs tells the query-builder to eager-load the nodes that are connected to
// the "roleDistribs" edge. The optional arguments are used to configure the query builder of the edge.
func (aiaq *AsInnerAgencyQuery) ThenRoleDistribs(opts ...func(*AsMarketRoleDistributionQuery)) *AsInnerAgencyQuery {
	query := &AsMarketRoleDistributionQuery{config: aiaq.config}
	for _, opt := range opts {
		opt(query.Where(asmarketroledistribution.IsDeleted(0)))
	}
	aiaq.withRoleDistribs = query
	return aiaq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		AgencyName string `json:"agencyName"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AsInnerAgency.Query().
//		GroupBy(asinneragency.FieldAgencyName).
//		Aggregate(schema.Count()).
//		Scan(ctx, &v)
//
func (aiaq *AsInnerAgencyQuery) GroupBy(field string, fields ...string) *AsInnerAgencyGroupBy {
	group := &AsInnerAgencyGroupBy{config: aiaq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := aiaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return aiaq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		AgencyName string `json:"agencyName"`
//	}
//
//	client.AsInnerAgency.Query().
//		Select(asinneragency.FieldAgencyName).
//		Scan(ctx, &v)
//
func (aiaq *AsInnerAgencyQuery) Select(fields ...string) *AsInnerAgencySelect {
	aiaq.fields = append(aiaq.fields, fields...)
	return &AsInnerAgencySelect{AsInnerAgencyQuery: aiaq}
}

func (aiaq *AsInnerAgencyQuery) prepareQuery(ctx context.Context) error {
	for _, f := range aiaq.fields {
		if !asinneragency.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("schema: invalid field %q for query", f)}
		}
	}
	if aiaq.path != nil {
		prev, err := aiaq.path(ctx)
		if err != nil {
			return err
		}
		aiaq.sql = prev
	}
	return nil
}

func (aiaq *AsInnerAgencyQuery) sqlAll(ctx context.Context) ([]*AsInnerAgency, error) {
	var (
		nodes       = []*AsInnerAgency{}
		_spec       = aiaq.querySpec()
		loadedTypes = [6]bool{
			aiaq.withParent != nil,
			aiaq.withChildrens != nil,
			aiaq.withJobs != nil,
			aiaq.withUsers != nil,
			aiaq.withPersons != nil,
			aiaq.withRoleDistribs != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &AsInnerAgency{config: aiaq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("schema: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, aiaq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := aiaq.withParent; query != nil {
		ids := make([]int64, 0, len(nodes))
		nodeids := make(map[int64][]*AsInnerAgency)
		for i := range nodes {
			fk := nodes[i].ParentID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(asinneragency.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "parent_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Parent = n
			}
		}
	}

	if query := aiaq.withChildrens; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int64]*AsInnerAgency)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Childrens = []*AsInnerAgency{}
		}
		query.Where(predicate.AsInnerAgency(func(s *sql.Selector) {
			s.Where(sql.InValues(asinneragency.ChildrensColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.ParentID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "parent_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.Childrens = append(node.Edges.Childrens, n)
		}
	}

	if query := aiaq.withJobs; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int64]*AsInnerAgency, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.Jobs = []*AsJob{}
		}
		var (
			edgeids []int64
			edges   = make(map[int64][]*AsInnerAgency)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: false,
				Table:   asinneragency.JobsTable,
				Columns: asinneragency.JobsPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(asinneragency.JobsPrimaryKey[0], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{new(sql.NullInt64), new(sql.NullInt64)}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := eout.Int64
				inValue := ein.Int64
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, aiaq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "jobs": %w`, err)
		}
		query.Where(asjob.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "jobs" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Jobs = append(nodes[i].Edges.Jobs, n)
			}
		}
	}

	if query := aiaq.withUsers; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int64]*AsInnerAgency, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.Users = []*AsUser{}
		}
		var (
			edgeids []int64
			edges   = make(map[int64][]*AsInnerAgency)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: false,
				Table:   asinneragency.UsersTable,
				Columns: asinneragency.UsersPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(asinneragency.UsersPrimaryKey[0], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{new(sql.NullInt64), new(sql.NullInt64)}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := eout.Int64
				inValue := ein.Int64
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, aiaq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "users": %w`, err)
		}
		query.Where(asuser.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "users" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Users = append(nodes[i].Edges.Users, n)
			}
		}
	}

	if query := aiaq.withPersons; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int64]*AsInnerAgency, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.Persons = []*AsPerson{}
		}
		var (
			edgeids []int64
			edges   = make(map[int64][]*AsInnerAgency)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: false,
				Table:   asinneragency.PersonsTable,
				Columns: asinneragency.PersonsPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(asinneragency.PersonsPrimaryKey[0], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{new(sql.NullInt64), new(sql.NullInt64)}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := eout.Int64
				inValue := ein.Int64
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, aiaq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "persons": %w`, err)
		}
		query.Where(asperson.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "persons" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Persons = append(nodes[i].Edges.Persons, n)
			}
		}
	}

	if query := aiaq.withRoleDistribs; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int64]*AsInnerAgency)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.RoleDistribs = []*AsMarketRoleDistribution{}
		}
		query.Where(predicate.AsMarketRoleDistribution(func(s *sql.Selector) {
			s.Where(sql.InValues(asinneragency.RoleDistribsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.AgencyID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "agency_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.RoleDistribs = append(node.Edges.RoleDistribs, n)
		}
	}

	return nodes, nil
}

func (aiaq *AsInnerAgencyQuery) sqlCount(ctx context.Context) (int64, error) {
	_spec := aiaq.querySpec()
	_spec.Node.Columns = aiaq.fields
	if len(aiaq.fields) > 0 {
		_spec.Unique = aiaq.unique != nil && *aiaq.unique
	}
	c, err := sqlgraph.CountNodes(ctx, aiaq.driver, _spec)
	return int64(c), err
}

func (aiaq *AsInnerAgencyQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := aiaq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("schema: check existence: %w", err)
	}
	return n > 0, nil
}

func (aiaq *AsInnerAgencyQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asinneragency.Table,
			Columns: asinneragency.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asinneragency.FieldID,
			},
		},
		From:   aiaq.sql,
		Unique: true,
	}
	if unique := aiaq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := aiaq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asinneragency.FieldID)
		for i := range fields {
			if fields[i] != asinneragency.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := aiaq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := aiaq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := aiaq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := aiaq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (aiaq *AsInnerAgencyQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(aiaq.driver.Dialect())
	t1 := builder.Table(asinneragency.Table)
	columns := aiaq.fields
	if len(columns) == 0 {
		columns = asinneragency.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if aiaq.sql != nil {
		selector = aiaq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if aiaq.unique != nil && *aiaq.unique {
		selector.Distinct()
	}
	for _, p := range aiaq.predicates {
		p(selector)
	}
	for _, p := range aiaq.order {
		p(selector)
	}
	if offset := aiaq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := aiaq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AsInnerAgencyGroupBy is the group-by builder for AsInnerAgency entities.
type AsInnerAgencyGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (aiagb *AsInnerAgencyGroupBy) Aggregate(fns ...AggregateFunc) *AsInnerAgencyGroupBy {
	aiagb.fns = append(aiagb.fns, fns...)
	return aiagb
}

// Scan applies the group-by query and scans the result into the given value.
func (aiagb *AsInnerAgencyGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := aiagb.path(ctx)
	if err != nil {
		return err
	}
	aiagb.sql = query
	return aiagb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (aiagb *AsInnerAgencyGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := aiagb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (aiagb *AsInnerAgencyGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(aiagb.fields) > 1 {
		return nil, errors.New("schema: AsInnerAgencyGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := aiagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (aiagb *AsInnerAgencyGroupBy) StringsX(ctx context.Context) []string {
	v, err := aiagb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (aiagb *AsInnerAgencyGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = aiagb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asinneragency.Label}
	default:
		err = fmt.Errorf("schema: AsInnerAgencyGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (aiagb *AsInnerAgencyGroupBy) StringX(ctx context.Context) string {
	v, err := aiagb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (aiagb *AsInnerAgencyGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(aiagb.fields) > 1 {
		return nil, errors.New("schema: AsInnerAgencyGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := aiagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (aiagb *AsInnerAgencyGroupBy) IntsX(ctx context.Context) []int {
	v, err := aiagb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (aiagb *AsInnerAgencyGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = aiagb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asinneragency.Label}
	default:
		err = fmt.Errorf("schema: AsInnerAgencyGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (aiagb *AsInnerAgencyGroupBy) IntX(ctx context.Context) int {
	v, err := aiagb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (aiagb *AsInnerAgencyGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(aiagb.fields) > 1 {
		return nil, errors.New("schema: AsInnerAgencyGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := aiagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (aiagb *AsInnerAgencyGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := aiagb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (aiagb *AsInnerAgencyGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = aiagb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asinneragency.Label}
	default:
		err = fmt.Errorf("schema: AsInnerAgencyGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (aiagb *AsInnerAgencyGroupBy) Float64X(ctx context.Context) float64 {
	v, err := aiagb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (aiagb *AsInnerAgencyGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(aiagb.fields) > 1 {
		return nil, errors.New("schema: AsInnerAgencyGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := aiagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (aiagb *AsInnerAgencyGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := aiagb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (aiagb *AsInnerAgencyGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = aiagb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asinneragency.Label}
	default:
		err = fmt.Errorf("schema: AsInnerAgencyGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (aiagb *AsInnerAgencyGroupBy) BoolX(ctx context.Context) bool {
	v, err := aiagb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64s returns list of int64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (aiagb *AsInnerAgencyGroupBy) Int64s(ctx context.Context) ([]int64, error) {
	if len(aiagb.fields) > 1 {
		return nil, errors.New("schema: AsInnerAgencyGroupBy.Int64s is not achievable when grouping more than 1 field")
	}
	var v []int64
	if err := aiagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Int64sX is like Int64s, but panics if an error occurs.
func (aiagb *AsInnerAgencyGroupBy) Int64sX(ctx context.Context) []int64 {
	v, err := aiagb.Int64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64 returns a single int64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (aiagb *AsInnerAgencyGroupBy) Int64(ctx context.Context) (_ int64, err error) {
	var v []int64
	if v, err = aiagb.Int64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asinneragency.Label}
	default:
		err = fmt.Errorf("schema: AsInnerAgencyGroupBy.Int64s returned %d results when one was expected", len(v))
	}
	return
}

// Int64X is like Int64, but panics if an error occurs.
func (aiagb *AsInnerAgencyGroupBy) Int64X(ctx context.Context) int64 {
	v, err := aiagb.Int64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (aiagb *AsInnerAgencyGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range aiagb.fields {
		if !asinneragency.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := aiagb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := aiagb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (aiagb *AsInnerAgencyGroupBy) sqlQuery() *sql.Selector {
	selector := aiagb.sql.Select()
	aggregation := make([]string, 0, len(aiagb.fns))
	for _, fn := range aiagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(aiagb.fields)+len(aiagb.fns))
		for _, f := range aiagb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(aiagb.fields...)...)
}

// AsInnerAgencySelect is the builder for selecting fields of AsInnerAgency entities.
type AsInnerAgencySelect struct {
	*AsInnerAgencyQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (aias *AsInnerAgencySelect) Scan(ctx context.Context, v interface{}) error {
	if err := aias.prepareQuery(ctx); err != nil {
		return err
	}
	aias.sql = aias.AsInnerAgencyQuery.sqlQuery(ctx)
	return aias.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (aias *AsInnerAgencySelect) ScanX(ctx context.Context, v interface{}) {
	if err := aias.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (aias *AsInnerAgencySelect) Strings(ctx context.Context) ([]string, error) {
	if len(aias.fields) > 1 {
		return nil, errors.New("schema: AsInnerAgencySelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := aias.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (aias *AsInnerAgencySelect) StringsX(ctx context.Context) []string {
	v, err := aias.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (aias *AsInnerAgencySelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = aias.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asinneragency.Label}
	default:
		err = fmt.Errorf("schema: AsInnerAgencySelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (aias *AsInnerAgencySelect) StringX(ctx context.Context) string {
	v, err := aias.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (aias *AsInnerAgencySelect) Ints(ctx context.Context) ([]int, error) {
	if len(aias.fields) > 1 {
		return nil, errors.New("schema: AsInnerAgencySelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := aias.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (aias *AsInnerAgencySelect) IntsX(ctx context.Context) []int {
	v, err := aias.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (aias *AsInnerAgencySelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = aias.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asinneragency.Label}
	default:
		err = fmt.Errorf("schema: AsInnerAgencySelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (aias *AsInnerAgencySelect) IntX(ctx context.Context) int {
	v, err := aias.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (aias *AsInnerAgencySelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(aias.fields) > 1 {
		return nil, errors.New("schema: AsInnerAgencySelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := aias.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (aias *AsInnerAgencySelect) Float64sX(ctx context.Context) []float64 {
	v, err := aias.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (aias *AsInnerAgencySelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = aias.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asinneragency.Label}
	default:
		err = fmt.Errorf("schema: AsInnerAgencySelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (aias *AsInnerAgencySelect) Float64X(ctx context.Context) float64 {
	v, err := aias.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (aias *AsInnerAgencySelect) Bools(ctx context.Context) ([]bool, error) {
	if len(aias.fields) > 1 {
		return nil, errors.New("schema: AsInnerAgencySelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := aias.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (aias *AsInnerAgencySelect) BoolsX(ctx context.Context) []bool {
	v, err := aias.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (aias *AsInnerAgencySelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = aias.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asinneragency.Label}
	default:
		err = fmt.Errorf("schema: AsInnerAgencySelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (aias *AsInnerAgencySelect) BoolX(ctx context.Context) bool {
	v, err := aias.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64s returns list of int64s from a selector. It is only allowed when selecting one field.
func (aias *AsInnerAgencySelect) Int64s(ctx context.Context) ([]int64, error) {
	if len(aias.fields) > 1 {
		return nil, errors.New("schema: AsInnerAgencySelect.Int64s is not achievable when selecting more than 1 field")
	}
	var v []int64
	if err := aias.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Int64sX is like Int64s, but panics if an error occurs.
func (aias *AsInnerAgencySelect) Int64sX(ctx context.Context) []int64 {
	v, err := aias.Int64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64 returns a single int64 from a selector. It is only allowed when selecting one field.
func (aias *AsInnerAgencySelect) Int64(ctx context.Context) (_ int64, err error) {
	var v []int64
	if v, err = aias.Int64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asinneragency.Label}
	default:
		err = fmt.Errorf("schema: AsInnerAgencySelect.Int64s returned %d results when one was expected", len(v))
	}
	return
}

// Int64X is like Int64, but panics if an error occurs.
func (aias *AsInnerAgencySelect) Int64X(ctx context.Context) int64 {
	v, err := aias.Int64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (aias *AsInnerAgencySelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := aias.sql.Query()
	if err := aias.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
