// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"math"
	"orginone/common/schema/asallgroup"
	"orginone/common/schema/asgrouptenantrelations"
	"orginone/common/schema/astenant"
	"orginone/common/schema/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsGroupTenantRelationsQuery is the builder for querying AsGroupTenantRelations entities.
type AsGroupTenantRelationsQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.AsGroupTenantRelations
	// eager-loading edges.
	withGroup  *AsAllGroupQuery
	withTenant *AsTenantQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AsGroupTenantRelationsQuery builder.
func (agtrq *AsGroupTenantRelationsQuery) Where(ps ...predicate.AsGroupTenantRelations) *AsGroupTenantRelationsQuery {
	agtrq.predicates = append(agtrq.predicates, ps...)
	return agtrq
}

// Limit adds a limit step to the query.
func (agtrq *AsGroupTenantRelationsQuery) Limit(limit int) *AsGroupTenantRelationsQuery {
	agtrq.limit = &limit
	return agtrq
}

// Offset adds an offset step to the query.
func (agtrq *AsGroupTenantRelationsQuery) Offset(offset int) *AsGroupTenantRelationsQuery {
	agtrq.offset = &offset
	return agtrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (agtrq *AsGroupTenantRelationsQuery) Unique(unique bool) *AsGroupTenantRelationsQuery {
	agtrq.unique = &unique
	return agtrq
}

// Order adds an order step to the query.
func (agtrq *AsGroupTenantRelationsQuery) Order(o ...OrderFunc) *AsGroupTenantRelationsQuery {
	agtrq.order = append(agtrq.order, o...)
	return agtrq
}

// QueryGroup chains the current query on the "group" edge.
func (agtrq *AsGroupTenantRelationsQuery) QueryGroup() *AsAllGroupQuery {
	query := &AsAllGroupQuery{config: agtrq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := agtrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := agtrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asgrouptenantrelations.Table, asgrouptenantrelations.FieldID, selector),
			sqlgraph.To(asallgroup.Table, asallgroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asgrouptenantrelations.GroupTable, asgrouptenantrelations.GroupColumn),
		)
		fromU = sqlgraph.SetNeighbors(agtrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTenant chains the current query on the "tenant" edge.
func (agtrq *AsGroupTenantRelationsQuery) QueryTenant() *AsTenantQuery {
	query := &AsTenantQuery{config: agtrq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := agtrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := agtrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asgrouptenantrelations.Table, asgrouptenantrelations.FieldID, selector),
			sqlgraph.To(astenant.Table, astenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asgrouptenantrelations.TenantTable, asgrouptenantrelations.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(agtrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AsGroupTenantRelations entity from the query.
// Returns a *NotFoundError when no AsGroupTenantRelations was found.
func (agtrq *AsGroupTenantRelationsQuery) First(ctx context.Context) (*AsGroupTenantRelations, error) {
	nodes, err := agtrq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{asgrouptenantrelations.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (agtrq *AsGroupTenantRelationsQuery) FirstX(ctx context.Context) *AsGroupTenantRelations {
	node, err := agtrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AsGroupTenantRelations ID from the query.
// Returns a *NotFoundError when no AsGroupTenantRelations ID was found.
func (agtrq *AsGroupTenantRelationsQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = agtrq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{asgrouptenantrelations.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (agtrq *AsGroupTenantRelationsQuery) FirstIDX(ctx context.Context) int64 {
	id, err := agtrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AsGroupTenantRelations entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AsGroupTenantRelations entity is found.
// Returns a *NotFoundError when no AsGroupTenantRelations entities are found.
func (agtrq *AsGroupTenantRelationsQuery) Only(ctx context.Context) (*AsGroupTenantRelations, error) {
	nodes, err := agtrq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{asgrouptenantrelations.Label}
	default:
		return nil, &NotSingularError{asgrouptenantrelations.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (agtrq *AsGroupTenantRelationsQuery) OnlyX(ctx context.Context) *AsGroupTenantRelations {
	node, err := agtrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AsGroupTenantRelations ID in the query.
// Returns a *NotSingularError when more than one AsGroupTenantRelations ID is found.
// Returns a *NotFoundError when no entities are found.
func (agtrq *AsGroupTenantRelationsQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = agtrq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{asgrouptenantrelations.Label}
	default:
		err = &NotSingularError{asgrouptenantrelations.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (agtrq *AsGroupTenantRelationsQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := agtrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AsGroupTenantRelationsSlice.
func (agtrq *AsGroupTenantRelationsQuery) All(ctx context.Context) ([]*AsGroupTenantRelations, error) {
	if err := agtrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return agtrq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (agtrq *AsGroupTenantRelationsQuery) AllX(ctx context.Context) []*AsGroupTenantRelations {
	nodes, err := agtrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AsGroupTenantRelations IDs.
func (agtrq *AsGroupTenantRelationsQuery) IDs(ctx context.Context) ([]int64, error) {
	var ids []int64
	if err := agtrq.Select(asgrouptenantrelations.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (agtrq *AsGroupTenantRelationsQuery) IDsX(ctx context.Context) []int64 {
	ids, err := agtrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (agtrq *AsGroupTenantRelationsQuery) Count(ctx context.Context) (int64, error) {
	if err := agtrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return agtrq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (agtrq *AsGroupTenantRelationsQuery) CountX(ctx context.Context) int64 {
	count, err := agtrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (agtrq *AsGroupTenantRelationsQuery) Exist(ctx context.Context) (bool, error) {
	if err := agtrq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return agtrq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (agtrq *AsGroupTenantRelationsQuery) ExistX(ctx context.Context) bool {
	exist, err := agtrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AsGroupTenantRelationsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (agtrq *AsGroupTenantRelationsQuery) Clone() *AsGroupTenantRelationsQuery {
	if agtrq == nil {
		return nil
	}
	return &AsGroupTenantRelationsQuery{
		config:     agtrq.config,
		limit:      agtrq.limit,
		offset:     agtrq.offset,
		order:      append([]OrderFunc{}, agtrq.order...),
		predicates: append([]predicate.AsGroupTenantRelations{}, agtrq.predicates...),
		withGroup:  agtrq.withGroup.Clone(),
		withTenant: agtrq.withTenant.Clone(),
		// clone intermediate query.
		sql:    agtrq.sql.Clone(),
		path:   agtrq.path,
		unique: agtrq.unique,
	}
}

// WithGroup tells the query-builder to eager-load the nodes that are connected to
// the "group" edge. The optional arguments are used to configure the query builder of the edge.
func (agtrq *AsGroupTenantRelationsQuery) WithGroup(opts ...func(*AsAllGroupQuery)) *AsGroupTenantRelationsQuery {
	query := &AsAllGroupQuery{config: agtrq.config}
	for _, opt := range opts {
		opt(query)
	}
	agtrq.withGroup = query
	return agtrq
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (agtrq *AsGroupTenantRelationsQuery) WithTenant(opts ...func(*AsTenantQuery)) *AsGroupTenantRelationsQuery {
	query := &AsTenantQuery{config: agtrq.config}
	for _, opt := range opts {
		opt(query)
	}
	agtrq.withTenant = query
	return agtrq
}

// ThenGroup tells the query-builder to eager-load the nodes that are connected to
// the "group" edge. The optional arguments are used to configure the query builder of the edge.
func (agtrq *AsGroupTenantRelationsQuery) ThenGroup(opts ...func(*AsAllGroupQuery)) *AsGroupTenantRelationsQuery {
	query := &AsAllGroupQuery{config: agtrq.config}
	for _, opt := range opts {
		opt(query.Where(asallgroup.IsDeleted(0)))
	}
	agtrq.withGroup = query
	return agtrq
}

// ThenTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (agtrq *AsGroupTenantRelationsQuery) ThenTenant(opts ...func(*AsTenantQuery)) *AsGroupTenantRelationsQuery {
	query := &AsTenantQuery{config: agtrq.config}
	for _, opt := range opts {
		opt(query.Where(astenant.IsDeleted(0)))
	}
	agtrq.withTenant = query
	return agtrq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ParentID int64 `json:"parentId"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AsGroupTenantRelations.Query().
//		GroupBy(asgrouptenantrelations.FieldParentID).
//		Aggregate(schema.Count()).
//		Scan(ctx, &v)
//
func (agtrq *AsGroupTenantRelationsQuery) GroupBy(field string, fields ...string) *AsGroupTenantRelationsGroupBy {
	group := &AsGroupTenantRelationsGroupBy{config: agtrq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := agtrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return agtrq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ParentID int64 `json:"parentId"`
//	}
//
//	client.AsGroupTenantRelations.Query().
//		Select(asgrouptenantrelations.FieldParentID).
//		Scan(ctx, &v)
//
func (agtrq *AsGroupTenantRelationsQuery) Select(fields ...string) *AsGroupTenantRelationsSelect {
	agtrq.fields = append(agtrq.fields, fields...)
	return &AsGroupTenantRelationsSelect{AsGroupTenantRelationsQuery: agtrq}
}

func (agtrq *AsGroupTenantRelationsQuery) prepareQuery(ctx context.Context) error {
	for _, f := range agtrq.fields {
		if !asgrouptenantrelations.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("schema: invalid field %q for query", f)}
		}
	}
	if agtrq.path != nil {
		prev, err := agtrq.path(ctx)
		if err != nil {
			return err
		}
		agtrq.sql = prev
	}
	return nil
}

func (agtrq *AsGroupTenantRelationsQuery) sqlAll(ctx context.Context) ([]*AsGroupTenantRelations, error) {
	var (
		nodes       = []*AsGroupTenantRelations{}
		_spec       = agtrq.querySpec()
		loadedTypes = [2]bool{
			agtrq.withGroup != nil,
			agtrq.withTenant != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &AsGroupTenantRelations{config: agtrq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("schema: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, agtrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := agtrq.withGroup; query != nil {
		ids := make([]int64, 0, len(nodes))
		nodeids := make(map[int64][]*AsGroupTenantRelations)
		for i := range nodes {
			fk := nodes[i].ParentID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(asallgroup.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "parent_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Group = n
			}
		}
	}

	if query := agtrq.withTenant; query != nil {
		ids := make([]int64, 0, len(nodes))
		nodeids := make(map[int64][]*AsGroupTenantRelations)
		for i := range nodes {
			fk := nodes[i].SonID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(astenant.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "son_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Tenant = n
			}
		}
	}

	return nodes, nil
}

func (agtrq *AsGroupTenantRelationsQuery) sqlCount(ctx context.Context) (int64, error) {
	_spec := agtrq.querySpec()
	_spec.Node.Columns = agtrq.fields
	if len(agtrq.fields) > 0 {
		_spec.Unique = agtrq.unique != nil && *agtrq.unique
	}
	c, err := sqlgraph.CountNodes(ctx, agtrq.driver, _spec)
	return int64(c), err
}

func (agtrq *AsGroupTenantRelationsQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := agtrq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("schema: check existence: %w", err)
	}
	return n > 0, nil
}

func (agtrq *AsGroupTenantRelationsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asgrouptenantrelations.Table,
			Columns: asgrouptenantrelations.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asgrouptenantrelations.FieldID,
			},
		},
		From:   agtrq.sql,
		Unique: true,
	}
	if unique := agtrq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := agtrq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asgrouptenantrelations.FieldID)
		for i := range fields {
			if fields[i] != asgrouptenantrelations.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := agtrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := agtrq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := agtrq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := agtrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (agtrq *AsGroupTenantRelationsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(agtrq.driver.Dialect())
	t1 := builder.Table(asgrouptenantrelations.Table)
	columns := agtrq.fields
	if len(columns) == 0 {
		columns = asgrouptenantrelations.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if agtrq.sql != nil {
		selector = agtrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if agtrq.unique != nil && *agtrq.unique {
		selector.Distinct()
	}
	for _, p := range agtrq.predicates {
		p(selector)
	}
	for _, p := range agtrq.order {
		p(selector)
	}
	if offset := agtrq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := agtrq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AsGroupTenantRelationsGroupBy is the group-by builder for AsGroupTenantRelations entities.
type AsGroupTenantRelationsGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (agtrgb *AsGroupTenantRelationsGroupBy) Aggregate(fns ...AggregateFunc) *AsGroupTenantRelationsGroupBy {
	agtrgb.fns = append(agtrgb.fns, fns...)
	return agtrgb
}

// Scan applies the group-by query and scans the result into the given value.
func (agtrgb *AsGroupTenantRelationsGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := agtrgb.path(ctx)
	if err != nil {
		return err
	}
	agtrgb.sql = query
	return agtrgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (agtrgb *AsGroupTenantRelationsGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := agtrgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (agtrgb *AsGroupTenantRelationsGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(agtrgb.fields) > 1 {
		return nil, errors.New("schema: AsGroupTenantRelationsGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := agtrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (agtrgb *AsGroupTenantRelationsGroupBy) StringsX(ctx context.Context) []string {
	v, err := agtrgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (agtrgb *AsGroupTenantRelationsGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = agtrgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asgrouptenantrelations.Label}
	default:
		err = fmt.Errorf("schema: AsGroupTenantRelationsGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (agtrgb *AsGroupTenantRelationsGroupBy) StringX(ctx context.Context) string {
	v, err := agtrgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (agtrgb *AsGroupTenantRelationsGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(agtrgb.fields) > 1 {
		return nil, errors.New("schema: AsGroupTenantRelationsGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := agtrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (agtrgb *AsGroupTenantRelationsGroupBy) IntsX(ctx context.Context) []int {
	v, err := agtrgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (agtrgb *AsGroupTenantRelationsGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = agtrgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asgrouptenantrelations.Label}
	default:
		err = fmt.Errorf("schema: AsGroupTenantRelationsGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (agtrgb *AsGroupTenantRelationsGroupBy) IntX(ctx context.Context) int {
	v, err := agtrgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (agtrgb *AsGroupTenantRelationsGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(agtrgb.fields) > 1 {
		return nil, errors.New("schema: AsGroupTenantRelationsGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := agtrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (agtrgb *AsGroupTenantRelationsGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := agtrgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (agtrgb *AsGroupTenantRelationsGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = agtrgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asgrouptenantrelations.Label}
	default:
		err = fmt.Errorf("schema: AsGroupTenantRelationsGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (agtrgb *AsGroupTenantRelationsGroupBy) Float64X(ctx context.Context) float64 {
	v, err := agtrgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (agtrgb *AsGroupTenantRelationsGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(agtrgb.fields) > 1 {
		return nil, errors.New("schema: AsGroupTenantRelationsGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := agtrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (agtrgb *AsGroupTenantRelationsGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := agtrgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (agtrgb *AsGroupTenantRelationsGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = agtrgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asgrouptenantrelations.Label}
	default:
		err = fmt.Errorf("schema: AsGroupTenantRelationsGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (agtrgb *AsGroupTenantRelationsGroupBy) BoolX(ctx context.Context) bool {
	v, err := agtrgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64s returns list of int64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (agtrgb *AsGroupTenantRelationsGroupBy) Int64s(ctx context.Context) ([]int64, error) {
	if len(agtrgb.fields) > 1 {
		return nil, errors.New("schema: AsGroupTenantRelationsGroupBy.Int64s is not achievable when grouping more than 1 field")
	}
	var v []int64
	if err := agtrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Int64sX is like Int64s, but panics if an error occurs.
func (agtrgb *AsGroupTenantRelationsGroupBy) Int64sX(ctx context.Context) []int64 {
	v, err := agtrgb.Int64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64 returns a single int64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (agtrgb *AsGroupTenantRelationsGroupBy) Int64(ctx context.Context) (_ int64, err error) {
	var v []int64
	if v, err = agtrgb.Int64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asgrouptenantrelations.Label}
	default:
		err = fmt.Errorf("schema: AsGroupTenantRelationsGroupBy.Int64s returned %d results when one was expected", len(v))
	}
	return
}

// Int64X is like Int64, but panics if an error occurs.
func (agtrgb *AsGroupTenantRelationsGroupBy) Int64X(ctx context.Context) int64 {
	v, err := agtrgb.Int64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (agtrgb *AsGroupTenantRelationsGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range agtrgb.fields {
		if !asgrouptenantrelations.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := agtrgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := agtrgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (agtrgb *AsGroupTenantRelationsGroupBy) sqlQuery() *sql.Selector {
	selector := agtrgb.sql.Select()
	aggregation := make([]string, 0, len(agtrgb.fns))
	for _, fn := range agtrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(agtrgb.fields)+len(agtrgb.fns))
		for _, f := range agtrgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(agtrgb.fields...)...)
}

// AsGroupTenantRelationsSelect is the builder for selecting fields of AsGroupTenantRelations entities.
type AsGroupTenantRelationsSelect struct {
	*AsGroupTenantRelationsQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (agtrs *AsGroupTenantRelationsSelect) Scan(ctx context.Context, v interface{}) error {
	if err := agtrs.prepareQuery(ctx); err != nil {
		return err
	}
	agtrs.sql = agtrs.AsGroupTenantRelationsQuery.sqlQuery(ctx)
	return agtrs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (agtrs *AsGroupTenantRelationsSelect) ScanX(ctx context.Context, v interface{}) {
	if err := agtrs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (agtrs *AsGroupTenantRelationsSelect) Strings(ctx context.Context) ([]string, error) {
	if len(agtrs.fields) > 1 {
		return nil, errors.New("schema: AsGroupTenantRelationsSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := agtrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (agtrs *AsGroupTenantRelationsSelect) StringsX(ctx context.Context) []string {
	v, err := agtrs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (agtrs *AsGroupTenantRelationsSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = agtrs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asgrouptenantrelations.Label}
	default:
		err = fmt.Errorf("schema: AsGroupTenantRelationsSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (agtrs *AsGroupTenantRelationsSelect) StringX(ctx context.Context) string {
	v, err := agtrs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (agtrs *AsGroupTenantRelationsSelect) Ints(ctx context.Context) ([]int, error) {
	if len(agtrs.fields) > 1 {
		return nil, errors.New("schema: AsGroupTenantRelationsSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := agtrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (agtrs *AsGroupTenantRelationsSelect) IntsX(ctx context.Context) []int {
	v, err := agtrs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (agtrs *AsGroupTenantRelationsSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = agtrs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asgrouptenantrelations.Label}
	default:
		err = fmt.Errorf("schema: AsGroupTenantRelationsSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (agtrs *AsGroupTenantRelationsSelect) IntX(ctx context.Context) int {
	v, err := agtrs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (agtrs *AsGroupTenantRelationsSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(agtrs.fields) > 1 {
		return nil, errors.New("schema: AsGroupTenantRelationsSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := agtrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (agtrs *AsGroupTenantRelationsSelect) Float64sX(ctx context.Context) []float64 {
	v, err := agtrs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (agtrs *AsGroupTenantRelationsSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = agtrs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asgrouptenantrelations.Label}
	default:
		err = fmt.Errorf("schema: AsGroupTenantRelationsSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (agtrs *AsGroupTenantRelationsSelect) Float64X(ctx context.Context) float64 {
	v, err := agtrs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (agtrs *AsGroupTenantRelationsSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(agtrs.fields) > 1 {
		return nil, errors.New("schema: AsGroupTenantRelationsSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := agtrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (agtrs *AsGroupTenantRelationsSelect) BoolsX(ctx context.Context) []bool {
	v, err := agtrs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (agtrs *AsGroupTenantRelationsSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = agtrs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asgrouptenantrelations.Label}
	default:
		err = fmt.Errorf("schema: AsGroupTenantRelationsSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (agtrs *AsGroupTenantRelationsSelect) BoolX(ctx context.Context) bool {
	v, err := agtrs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64s returns list of int64s from a selector. It is only allowed when selecting one field.
func (agtrs *AsGroupTenantRelationsSelect) Int64s(ctx context.Context) ([]int64, error) {
	if len(agtrs.fields) > 1 {
		return nil, errors.New("schema: AsGroupTenantRelationsSelect.Int64s is not achievable when selecting more than 1 field")
	}
	var v []int64
	if err := agtrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Int64sX is like Int64s, but panics if an error occurs.
func (agtrs *AsGroupTenantRelationsSelect) Int64sX(ctx context.Context) []int64 {
	v, err := agtrs.Int64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64 returns a single int64 from a selector. It is only allowed when selecting one field.
func (agtrs *AsGroupTenantRelationsSelect) Int64(ctx context.Context) (_ int64, err error) {
	var v []int64
	if v, err = agtrs.Int64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asgrouptenantrelations.Label}
	default:
		err = fmt.Errorf("schema: AsGroupTenantRelationsSelect.Int64s returned %d results when one was expected", len(v))
	}
	return
}

// Int64X is like Int64, but panics if an error occurs.
func (agtrs *AsGroupTenantRelationsSelect) Int64X(ctx context.Context) int64 {
	v, err := agtrs.Int64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (agtrs *AsGroupTenantRelationsSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := agtrs.sql.Query()
	if err := agtrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
