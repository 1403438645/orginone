// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/asmarketappnotice"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsMarketAppNoticeCreate is the builder for creating a AsMarketAppNotice entity.
type AsMarketAppNoticeCreate struct {
	config
	mutation *AsMarketAppNoticeMutation
	hooks    []Hook
}

// SetNoticeTitle sets the "notice_title" field.
func (amanc *AsMarketAppNoticeCreate) SetNoticeTitle(s string) *AsMarketAppNoticeCreate {
	amanc.mutation.SetNoticeTitle(s)
	return amanc
}

// SetNillableNoticeTitle sets the "notice_title" field if the given value is not nil.
func (amanc *AsMarketAppNoticeCreate) SetNillableNoticeTitle(s *string) *AsMarketAppNoticeCreate {
	if s != nil {
		amanc.SetNoticeTitle(*s)
	}
	return amanc
}

// SetNoticeContent sets the "notice_content" field.
func (amanc *AsMarketAppNoticeCreate) SetNoticeContent(s string) *AsMarketAppNoticeCreate {
	amanc.mutation.SetNoticeContent(s)
	return amanc
}

// SetNillableNoticeContent sets the "notice_content" field if the given value is not nil.
func (amanc *AsMarketAppNoticeCreate) SetNillableNoticeContent(s *string) *AsMarketAppNoticeCreate {
	if s != nil {
		amanc.SetNoticeContent(*s)
	}
	return amanc
}

// SetNoticeReleaseUnitID sets the "notice_release_unit_id" field.
func (amanc *AsMarketAppNoticeCreate) SetNoticeReleaseUnitID(i int64) *AsMarketAppNoticeCreate {
	amanc.mutation.SetNoticeReleaseUnitID(i)
	return amanc
}

// SetNillableNoticeReleaseUnitID sets the "notice_release_unit_id" field if the given value is not nil.
func (amanc *AsMarketAppNoticeCreate) SetNillableNoticeReleaseUnitID(i *int64) *AsMarketAppNoticeCreate {
	if i != nil {
		amanc.SetNoticeReleaseUnitID(*i)
	}
	return amanc
}

// SetNoticeReleaseStatus sets the "notice_release_status" field.
func (amanc *AsMarketAppNoticeCreate) SetNoticeReleaseStatus(i int64) *AsMarketAppNoticeCreate {
	amanc.mutation.SetNoticeReleaseStatus(i)
	return amanc
}

// SetNoticeReleaseTime sets the "notice_release_time" field.
func (amanc *AsMarketAppNoticeCreate) SetNoticeReleaseTime(dt date.DateTime) *AsMarketAppNoticeCreate {
	amanc.mutation.SetNoticeReleaseTime(dt)
	return amanc
}

// SetNillableNoticeReleaseTime sets the "notice_release_time" field if the given value is not nil.
func (amanc *AsMarketAppNoticeCreate) SetNillableNoticeReleaseTime(dt *date.DateTime) *AsMarketAppNoticeCreate {
	if dt != nil {
		amanc.SetNoticeReleaseTime(*dt)
	}
	return amanc
}

// SetNoticeRoleIds sets the "notice_role_ids" field.
func (amanc *AsMarketAppNoticeCreate) SetNoticeRoleIds(s string) *AsMarketAppNoticeCreate {
	amanc.mutation.SetNoticeRoleIds(s)
	return amanc
}

// SetNillableNoticeRoleIds sets the "notice_role_ids" field if the given value is not nil.
func (amanc *AsMarketAppNoticeCreate) SetNillableNoticeRoleIds(s *string) *AsMarketAppNoticeCreate {
	if s != nil {
		amanc.SetNoticeRoleIds(*s)
	}
	return amanc
}

// SetNoticeUnitIds sets the "notice_unit_ids" field.
func (amanc *AsMarketAppNoticeCreate) SetNoticeUnitIds(s string) *AsMarketAppNoticeCreate {
	amanc.mutation.SetNoticeUnitIds(s)
	return amanc
}

// SetNillableNoticeUnitIds sets the "notice_unit_ids" field if the given value is not nil.
func (amanc *AsMarketAppNoticeCreate) SetNillableNoticeUnitIds(s *string) *AsMarketAppNoticeCreate {
	if s != nil {
		amanc.SetNoticeUnitIds(*s)
	}
	return amanc
}

// SetGroupOrUnit sets the "group_or_unit" field.
func (amanc *AsMarketAppNoticeCreate) SetGroupOrUnit(i int64) *AsMarketAppNoticeCreate {
	amanc.mutation.SetGroupOrUnit(i)
	return amanc
}

// SetNillableGroupOrUnit sets the "group_or_unit" field if the given value is not nil.
func (amanc *AsMarketAppNoticeCreate) SetNillableGroupOrUnit(i *int64) *AsMarketAppNoticeCreate {
	if i != nil {
		amanc.SetGroupOrUnit(*i)
	}
	return amanc
}

// SetUnitQueryIds sets the "unit_query_ids" field.
func (amanc *AsMarketAppNoticeCreate) SetUnitQueryIds(s string) *AsMarketAppNoticeCreate {
	amanc.mutation.SetUnitQueryIds(s)
	return amanc
}

// SetNillableUnitQueryIds sets the "unit_query_ids" field if the given value is not nil.
func (amanc *AsMarketAppNoticeCreate) SetNillableUnitQueryIds(s *string) *AsMarketAppNoticeCreate {
	if s != nil {
		amanc.SetUnitQueryIds(*s)
	}
	return amanc
}

// SetIsDeleted sets the "is_deleted" field.
func (amanc *AsMarketAppNoticeCreate) SetIsDeleted(i int64) *AsMarketAppNoticeCreate {
	amanc.mutation.SetIsDeleted(i)
	return amanc
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (amanc *AsMarketAppNoticeCreate) SetNillableIsDeleted(i *int64) *AsMarketAppNoticeCreate {
	if i != nil {
		amanc.SetIsDeleted(*i)
	}
	return amanc
}

// SetStatus sets the "status" field.
func (amanc *AsMarketAppNoticeCreate) SetStatus(i int64) *AsMarketAppNoticeCreate {
	amanc.mutation.SetStatus(i)
	return amanc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (amanc *AsMarketAppNoticeCreate) SetNillableStatus(i *int64) *AsMarketAppNoticeCreate {
	if i != nil {
		amanc.SetStatus(*i)
	}
	return amanc
}

// SetCreateUser sets the "create_user" field.
func (amanc *AsMarketAppNoticeCreate) SetCreateUser(i int64) *AsMarketAppNoticeCreate {
	amanc.mutation.SetCreateUser(i)
	return amanc
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (amanc *AsMarketAppNoticeCreate) SetNillableCreateUser(i *int64) *AsMarketAppNoticeCreate {
	if i != nil {
		amanc.SetCreateUser(*i)
	}
	return amanc
}

// SetUpdateUser sets the "update_user" field.
func (amanc *AsMarketAppNoticeCreate) SetUpdateUser(i int64) *AsMarketAppNoticeCreate {
	amanc.mutation.SetUpdateUser(i)
	return amanc
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (amanc *AsMarketAppNoticeCreate) SetNillableUpdateUser(i *int64) *AsMarketAppNoticeCreate {
	if i != nil {
		amanc.SetUpdateUser(*i)
	}
	return amanc
}

// SetCreateTime sets the "create_time" field.
func (amanc *AsMarketAppNoticeCreate) SetCreateTime(dt date.DateTime) *AsMarketAppNoticeCreate {
	amanc.mutation.SetCreateTime(dt)
	return amanc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (amanc *AsMarketAppNoticeCreate) SetNillableCreateTime(dt *date.DateTime) *AsMarketAppNoticeCreate {
	if dt != nil {
		amanc.SetCreateTime(*dt)
	}
	return amanc
}

// SetUpdateTime sets the "update_time" field.
func (amanc *AsMarketAppNoticeCreate) SetUpdateTime(dt date.DateTime) *AsMarketAppNoticeCreate {
	amanc.mutation.SetUpdateTime(dt)
	return amanc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (amanc *AsMarketAppNoticeCreate) SetNillableUpdateTime(dt *date.DateTime) *AsMarketAppNoticeCreate {
	if dt != nil {
		amanc.SetUpdateTime(*dt)
	}
	return amanc
}

// SetID sets the "id" field.
func (amanc *AsMarketAppNoticeCreate) SetID(i int64) *AsMarketAppNoticeCreate {
	amanc.mutation.SetID(i)
	return amanc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (amanc *AsMarketAppNoticeCreate) SetNillableID(i *int64) *AsMarketAppNoticeCreate {
	if i != nil {
		amanc.SetID(*i)
	}
	return amanc
}

// Mutation returns the AsMarketAppNoticeMutation object of the builder.
func (amanc *AsMarketAppNoticeCreate) Mutation() *AsMarketAppNoticeMutation {
	return amanc.mutation
}

// Save creates the AsMarketAppNotice in the database.
func (amanc *AsMarketAppNoticeCreate) Save(ctx context.Context) (*AsMarketAppNotice, error) {
	var (
		err  error
		node *AsMarketAppNotice
	)
	amanc.defaults()
	if len(amanc.hooks) == 0 {
		if err = amanc.check(); err != nil {
			return nil, err
		}
		node, err = amanc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsMarketAppNoticeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = amanc.check(); err != nil {
				return nil, err
			}
			amanc.mutation = mutation
			if node, err = amanc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(amanc.hooks) - 1; i >= 0; i-- {
			if amanc.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = amanc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, amanc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (amanc *AsMarketAppNoticeCreate) SaveX(ctx context.Context) *AsMarketAppNotice {
	v, err := amanc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (amanc *AsMarketAppNoticeCreate) Exec(ctx context.Context) error {
	_, err := amanc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amanc *AsMarketAppNoticeCreate) ExecX(ctx context.Context) {
	if err := amanc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amanc *AsMarketAppNoticeCreate) defaults() {
	if _, ok := amanc.mutation.IsDeleted(); !ok {
		v := asmarketappnotice.DefaultIsDeleted
		amanc.mutation.SetIsDeleted(v)
	}
	if _, ok := amanc.mutation.Status(); !ok {
		v := asmarketappnotice.DefaultStatus
		amanc.mutation.SetStatus(v)
	}
	if _, ok := amanc.mutation.CreateTime(); !ok {
		v := asmarketappnotice.DefaultCreateTime()
		amanc.mutation.SetCreateTime(v)
	}
	if _, ok := amanc.mutation.UpdateTime(); !ok {
		v := asmarketappnotice.DefaultUpdateTime()
		amanc.mutation.SetUpdateTime(v)
	}
	if _, ok := amanc.mutation.ID(); !ok {
		v := asmarketappnotice.DefaultID()
		amanc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (amanc *AsMarketAppNoticeCreate) check() error {
	if _, ok := amanc.mutation.NoticeReleaseStatus(); !ok {
		return &ValidationError{Name: "notice_release_status", err: errors.New(`schema: missing required field "AsMarketAppNotice.notice_release_status"`)}
	}
	if _, ok := amanc.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "is_deleted", err: errors.New(`schema: missing required field "AsMarketAppNotice.is_deleted"`)}
	}
	return nil
}

func (amanc *AsMarketAppNoticeCreate) sqlSave(ctx context.Context) (*AsMarketAppNotice, error) {
	_node, _spec := amanc.createSpec()
	if err := sqlgraph.CreateNode(ctx, amanc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (amanc *AsMarketAppNoticeCreate) createSpec() (*AsMarketAppNotice, *sqlgraph.CreateSpec) {
	var (
		_node = &AsMarketAppNotice{config: amanc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: asmarketappnotice.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asmarketappnotice.FieldID,
			},
		}
	)
	if id, ok := amanc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := amanc.mutation.NoticeTitle(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappnotice.FieldNoticeTitle,
		})
		_node.NoticeTitle = value
	}
	if value, ok := amanc.mutation.NoticeContent(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappnotice.FieldNoticeContent,
		})
		_node.NoticeContent = value
	}
	if value, ok := amanc.mutation.NoticeReleaseUnitID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappnotice.FieldNoticeReleaseUnitID,
		})
		_node.NoticeReleaseUnitID = value
	}
	if value, ok := amanc.mutation.NoticeReleaseStatus(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappnotice.FieldNoticeReleaseStatus,
		})
		_node.NoticeReleaseStatus = value
	}
	if value, ok := amanc.mutation.NoticeReleaseTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketappnotice.FieldNoticeReleaseTime,
		})
		_node.NoticeReleaseTime = value
	}
	if value, ok := amanc.mutation.NoticeRoleIds(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappnotice.FieldNoticeRoleIds,
		})
		_node.NoticeRoleIds = value
	}
	if value, ok := amanc.mutation.NoticeUnitIds(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappnotice.FieldNoticeUnitIds,
		})
		_node.NoticeUnitIds = value
	}
	if value, ok := amanc.mutation.GroupOrUnit(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappnotice.FieldGroupOrUnit,
		})
		_node.GroupOrUnit = value
	}
	if value, ok := amanc.mutation.UnitQueryIds(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappnotice.FieldUnitQueryIds,
		})
		_node.UnitQueryIds = value
	}
	if value, ok := amanc.mutation.IsDeleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappnotice.FieldIsDeleted,
		})
		_node.IsDeleted = value
	}
	if value, ok := amanc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappnotice.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := amanc.mutation.CreateUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappnotice.FieldCreateUser,
		})
		_node.CreateUser = value
	}
	if value, ok := amanc.mutation.UpdateUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappnotice.FieldUpdateUser,
		})
		_node.UpdateUser = value
	}
	if value, ok := amanc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketappnotice.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := amanc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketappnotice.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	return _node, _spec
}

// AsMarketAppNoticeCreateBulk is the builder for creating many AsMarketAppNotice entities in bulk.
type AsMarketAppNoticeCreateBulk struct {
	config
	builders []*AsMarketAppNoticeCreate
}

// Save creates the AsMarketAppNotice entities in the database.
func (amancb *AsMarketAppNoticeCreateBulk) Save(ctx context.Context) ([]*AsMarketAppNotice, error) {
	specs := make([]*sqlgraph.CreateSpec, len(amancb.builders))
	nodes := make([]*AsMarketAppNotice, len(amancb.builders))
	mutators := make([]Mutator, len(amancb.builders))
	for i := range amancb.builders {
		func(i int, root context.Context) {
			builder := amancb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AsMarketAppNoticeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, amancb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, amancb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, amancb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (amancb *AsMarketAppNoticeCreateBulk) SaveX(ctx context.Context) []*AsMarketAppNotice {
	v, err := amancb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (amancb *AsMarketAppNoticeCreateBulk) Exec(ctx context.Context) error {
	_, err := amancb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amancb *AsMarketAppNoticeCreateBulk) ExecX(ctx context.Context) {
	if err := amancb.Exec(ctx); err != nil {
		panic(err)
	}
}
