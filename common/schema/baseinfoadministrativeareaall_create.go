// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/baseinfoadministrativeareaall"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BaseinfoadministrativeareaallCreate is the builder for creating a Baseinfoadministrativeareaall entity.
type BaseinfoadministrativeareaallCreate struct {
	config
	mutation *BaseinfoadministrativeareaallMutation
	hooks    []Hook
}

// SetPid sets the "pid" field.
func (bc *BaseinfoadministrativeareaallCreate) SetPid(i int64) *BaseinfoadministrativeareaallCreate {
	bc.mutation.SetPid(i)
	return bc
}

// SetNillablePid sets the "pid" field if the given value is not nil.
func (bc *BaseinfoadministrativeareaallCreate) SetNillablePid(i *int64) *BaseinfoadministrativeareaallCreate {
	if i != nil {
		bc.SetPid(*i)
	}
	return bc
}

// SetCode sets the "code" field.
func (bc *BaseinfoadministrativeareaallCreate) SetCode(s string) *BaseinfoadministrativeareaallCreate {
	bc.mutation.SetCode(s)
	return bc
}

// SetName sets the "name" field.
func (bc *BaseinfoadministrativeareaallCreate) SetName(s string) *BaseinfoadministrativeareaallCreate {
	bc.mutation.SetName(s)
	return bc
}

// SetProvince sets the "province" field.
func (bc *BaseinfoadministrativeareaallCreate) SetProvince(s string) *BaseinfoadministrativeareaallCreate {
	bc.mutation.SetProvince(s)
	return bc
}

// SetCity sets the "city" field.
func (bc *BaseinfoadministrativeareaallCreate) SetCity(s string) *BaseinfoadministrativeareaallCreate {
	bc.mutation.SetCity(s)
	return bc
}

// SetArea sets the "area" field.
func (bc *BaseinfoadministrativeareaallCreate) SetArea(s string) *BaseinfoadministrativeareaallCreate {
	bc.mutation.SetArea(s)
	return bc
}

// SetTown sets the "town" field.
func (bc *BaseinfoadministrativeareaallCreate) SetTown(s string) *BaseinfoadministrativeareaallCreate {
	bc.mutation.SetTown(s)
	return bc
}

// SetAllName sets the "all_name" field.
func (bc *BaseinfoadministrativeareaallCreate) SetAllName(s string) *BaseinfoadministrativeareaallCreate {
	bc.mutation.SetAllName(s)
	return bc
}

// SetType sets the "type" field.
func (bc *BaseinfoadministrativeareaallCreate) SetType(i int32) *BaseinfoadministrativeareaallCreate {
	bc.mutation.SetType(i)
	return bc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (bc *BaseinfoadministrativeareaallCreate) SetNillableType(i *int32) *BaseinfoadministrativeareaallCreate {
	if i != nil {
		bc.SetType(*i)
	}
	return bc
}

// SetTsVersion sets the "ts_version" field.
func (bc *BaseinfoadministrativeareaallCreate) SetTsVersion(i int32) *BaseinfoadministrativeareaallCreate {
	bc.mutation.SetTsVersion(i)
	return bc
}

// SetNillableTsVersion sets the "ts_version" field if the given value is not nil.
func (bc *BaseinfoadministrativeareaallCreate) SetNillableTsVersion(i *int32) *BaseinfoadministrativeareaallCreate {
	if i != nil {
		bc.SetTsVersion(*i)
	}
	return bc
}

// SetIsDeleted sets the "is_deleted" field.
func (bc *BaseinfoadministrativeareaallCreate) SetIsDeleted(i int64) *BaseinfoadministrativeareaallCreate {
	bc.mutation.SetIsDeleted(i)
	return bc
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (bc *BaseinfoadministrativeareaallCreate) SetNillableIsDeleted(i *int64) *BaseinfoadministrativeareaallCreate {
	if i != nil {
		bc.SetIsDeleted(*i)
	}
	return bc
}

// SetStatus sets the "status" field.
func (bc *BaseinfoadministrativeareaallCreate) SetStatus(i int64) *BaseinfoadministrativeareaallCreate {
	bc.mutation.SetStatus(i)
	return bc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bc *BaseinfoadministrativeareaallCreate) SetNillableStatus(i *int64) *BaseinfoadministrativeareaallCreate {
	if i != nil {
		bc.SetStatus(*i)
	}
	return bc
}

// SetCreateUser sets the "create_user" field.
func (bc *BaseinfoadministrativeareaallCreate) SetCreateUser(i int64) *BaseinfoadministrativeareaallCreate {
	bc.mutation.SetCreateUser(i)
	return bc
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (bc *BaseinfoadministrativeareaallCreate) SetNillableCreateUser(i *int64) *BaseinfoadministrativeareaallCreate {
	if i != nil {
		bc.SetCreateUser(*i)
	}
	return bc
}

// SetUpdateUser sets the "update_user" field.
func (bc *BaseinfoadministrativeareaallCreate) SetUpdateUser(i int64) *BaseinfoadministrativeareaallCreate {
	bc.mutation.SetUpdateUser(i)
	return bc
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (bc *BaseinfoadministrativeareaallCreate) SetNillableUpdateUser(i *int64) *BaseinfoadministrativeareaallCreate {
	if i != nil {
		bc.SetUpdateUser(*i)
	}
	return bc
}

// SetCreateTime sets the "create_time" field.
func (bc *BaseinfoadministrativeareaallCreate) SetCreateTime(dt date.DateTime) *BaseinfoadministrativeareaallCreate {
	bc.mutation.SetCreateTime(dt)
	return bc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (bc *BaseinfoadministrativeareaallCreate) SetNillableCreateTime(dt *date.DateTime) *BaseinfoadministrativeareaallCreate {
	if dt != nil {
		bc.SetCreateTime(*dt)
	}
	return bc
}

// SetUpdateTime sets the "update_time" field.
func (bc *BaseinfoadministrativeareaallCreate) SetUpdateTime(dt date.DateTime) *BaseinfoadministrativeareaallCreate {
	bc.mutation.SetUpdateTime(dt)
	return bc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (bc *BaseinfoadministrativeareaallCreate) SetNillableUpdateTime(dt *date.DateTime) *BaseinfoadministrativeareaallCreate {
	if dt != nil {
		bc.SetUpdateTime(*dt)
	}
	return bc
}

// SetID sets the "id" field.
func (bc *BaseinfoadministrativeareaallCreate) SetID(i int64) *BaseinfoadministrativeareaallCreate {
	bc.mutation.SetID(i)
	return bc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bc *BaseinfoadministrativeareaallCreate) SetNillableID(i *int64) *BaseinfoadministrativeareaallCreate {
	if i != nil {
		bc.SetID(*i)
	}
	return bc
}

// SetParentxID sets the "parentx" edge to the Baseinfoadministrativeareaall entity by ID.
func (bc *BaseinfoadministrativeareaallCreate) SetParentxID(id int64) *BaseinfoadministrativeareaallCreate {
	bc.mutation.SetParentxID(id)
	return bc
}

// SetNillableParentxID sets the "parentx" edge to the Baseinfoadministrativeareaall entity by ID if the given value is not nil.
func (bc *BaseinfoadministrativeareaallCreate) SetNillableParentxID(id *int64) *BaseinfoadministrativeareaallCreate {
	if id != nil {
		bc = bc.SetParentxID(*id)
	}
	return bc
}

// SetParentx sets the "parentx" edge to the Baseinfoadministrativeareaall entity.
func (bc *BaseinfoadministrativeareaallCreate) SetParentx(b *Baseinfoadministrativeareaall) *BaseinfoadministrativeareaallCreate {
	return bc.SetParentxID(b.ID)
}

// AddChildrenIDs adds the "childrens" edge to the Baseinfoadministrativeareaall entity by IDs.
func (bc *BaseinfoadministrativeareaallCreate) AddChildrenIDs(ids ...int64) *BaseinfoadministrativeareaallCreate {
	bc.mutation.AddChildrenIDs(ids...)
	return bc
}

// AddChildrens adds the "childrens" edges to the Baseinfoadministrativeareaall entity.
func (bc *BaseinfoadministrativeareaallCreate) AddChildrens(b ...*Baseinfoadministrativeareaall) *BaseinfoadministrativeareaallCreate {
	ids := make([]int64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bc.AddChildrenIDs(ids...)
}

// Mutation returns the BaseinfoadministrativeareaallMutation object of the builder.
func (bc *BaseinfoadministrativeareaallCreate) Mutation() *BaseinfoadministrativeareaallMutation {
	return bc.mutation
}

// Save creates the Baseinfoadministrativeareaall in the database.
func (bc *BaseinfoadministrativeareaallCreate) Save(ctx context.Context) (*Baseinfoadministrativeareaall, error) {
	var (
		err  error
		node *Baseinfoadministrativeareaall
	)
	bc.defaults()
	if len(bc.hooks) == 0 {
		if err = bc.check(); err != nil {
			return nil, err
		}
		node, err = bc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BaseinfoadministrativeareaallMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bc.check(); err != nil {
				return nil, err
			}
			bc.mutation = mutation
			if node, err = bc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(bc.hooks) - 1; i >= 0; i-- {
			if bc.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = bc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BaseinfoadministrativeareaallCreate) SaveX(ctx context.Context) *Baseinfoadministrativeareaall {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BaseinfoadministrativeareaallCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BaseinfoadministrativeareaallCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BaseinfoadministrativeareaallCreate) defaults() {
	if _, ok := bc.mutation.GetType(); !ok {
		v := baseinfoadministrativeareaall.DefaultType
		bc.mutation.SetType(v)
	}
	if _, ok := bc.mutation.TsVersion(); !ok {
		v := baseinfoadministrativeareaall.DefaultTsVersion
		bc.mutation.SetTsVersion(v)
	}
	if _, ok := bc.mutation.IsDeleted(); !ok {
		v := baseinfoadministrativeareaall.DefaultIsDeleted
		bc.mutation.SetIsDeleted(v)
	}
	if _, ok := bc.mutation.Status(); !ok {
		v := baseinfoadministrativeareaall.DefaultStatus
		bc.mutation.SetStatus(v)
	}
	if _, ok := bc.mutation.CreateTime(); !ok {
		v := baseinfoadministrativeareaall.DefaultCreateTime()
		bc.mutation.SetCreateTime(v)
	}
	if _, ok := bc.mutation.UpdateTime(); !ok {
		v := baseinfoadministrativeareaall.DefaultUpdateTime()
		bc.mutation.SetUpdateTime(v)
	}
	if _, ok := bc.mutation.ID(); !ok {
		v := baseinfoadministrativeareaall.DefaultID()
		bc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BaseinfoadministrativeareaallCreate) check() error {
	if _, ok := bc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`schema: missing required field "Baseinfoadministrativeareaall.code"`)}
	}
	if _, ok := bc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`schema: missing required field "Baseinfoadministrativeareaall.name"`)}
	}
	if _, ok := bc.mutation.Province(); !ok {
		return &ValidationError{Name: "province", err: errors.New(`schema: missing required field "Baseinfoadministrativeareaall.province"`)}
	}
	if _, ok := bc.mutation.City(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`schema: missing required field "Baseinfoadministrativeareaall.city"`)}
	}
	if _, ok := bc.mutation.Area(); !ok {
		return &ValidationError{Name: "area", err: errors.New(`schema: missing required field "Baseinfoadministrativeareaall.area"`)}
	}
	if _, ok := bc.mutation.Town(); !ok {
		return &ValidationError{Name: "town", err: errors.New(`schema: missing required field "Baseinfoadministrativeareaall.town"`)}
	}
	if _, ok := bc.mutation.AllName(); !ok {
		return &ValidationError{Name: "all_name", err: errors.New(`schema: missing required field "Baseinfoadministrativeareaall.all_name"`)}
	}
	if _, ok := bc.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "is_deleted", err: errors.New(`schema: missing required field "Baseinfoadministrativeareaall.is_deleted"`)}
	}
	return nil
}

func (bc *BaseinfoadministrativeareaallCreate) sqlSave(ctx context.Context) (*Baseinfoadministrativeareaall, error) {
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (bc *BaseinfoadministrativeareaallCreate) createSpec() (*Baseinfoadministrativeareaall, *sqlgraph.CreateSpec) {
	var (
		_node = &Baseinfoadministrativeareaall{config: bc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: baseinfoadministrativeareaall.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: baseinfoadministrativeareaall.FieldID,
			},
		}
	)
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bc.mutation.Code(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldCode,
		})
		_node.Code = value
	}
	if value, ok := bc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldName,
		})
		_node.Name = value
	}
	if value, ok := bc.mutation.Province(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldProvince,
		})
		_node.Province = value
	}
	if value, ok := bc.mutation.City(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldCity,
		})
		_node.City = value
	}
	if value, ok := bc.mutation.Area(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldArea,
		})
		_node.Area = value
	}
	if value, ok := bc.mutation.Town(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldTown,
		})
		_node.Town = value
	}
	if value, ok := bc.mutation.AllName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldAllName,
		})
		_node.AllName = value
	}
	if value, ok := bc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldType,
		})
		_node.Type = value
	}
	if value, ok := bc.mutation.TsVersion(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldTsVersion,
		})
		_node.TsVersion = value
	}
	if value, ok := bc.mutation.IsDeleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldIsDeleted,
		})
		_node.IsDeleted = value
	}
	if value, ok := bc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := bc.mutation.CreateUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldCreateUser,
		})
		_node.CreateUser = value
	}
	if value, ok := bc.mutation.UpdateUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldUpdateUser,
		})
		_node.UpdateUser = value
	}
	if value, ok := bc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := bc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: baseinfoadministrativeareaall.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if nodes := bc.mutation.ParentxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   baseinfoadministrativeareaall.ParentxTable,
			Columns: []string{baseinfoadministrativeareaall.ParentxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: baseinfoadministrativeareaall.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.Pid = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.ChildrensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   baseinfoadministrativeareaall.ChildrensTable,
			Columns: []string{baseinfoadministrativeareaall.ChildrensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: baseinfoadministrativeareaall.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BaseinfoadministrativeareaallCreateBulk is the builder for creating many Baseinfoadministrativeareaall entities in bulk.
type BaseinfoadministrativeareaallCreateBulk struct {
	config
	builders []*BaseinfoadministrativeareaallCreate
}

// Save creates the Baseinfoadministrativeareaall entities in the database.
func (bcb *BaseinfoadministrativeareaallCreateBulk) Save(ctx context.Context) ([]*Baseinfoadministrativeareaall, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Baseinfoadministrativeareaall, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BaseinfoadministrativeareaallMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BaseinfoadministrativeareaallCreateBulk) SaveX(ctx context.Context) []*Baseinfoadministrativeareaall {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BaseinfoadministrativeareaallCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BaseinfoadministrativeareaallCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
