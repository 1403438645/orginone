// Code generated by entc, DO NOT EDIT.

package schema

import (
	"fmt"
	"orginone/common/schema/asmarketapprole"
	"orginone/common/schema/asmarketmenu"
	"orginone/common/schema/asmarketrolemenu"
	"orginone/common/tools/date"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// AsMarketRoleMenu is the model entity for the AsMarketRoleMenu schema.
type AsMarketRoleMenu struct {
	config `json:"-"`
	// ID of the ent.
	// 主键
	ID int64 `json:"id,string"`
	// RoleID holds the value of the "role_id" field.
	// 角色id
	RoleID int64 `json:"roleId"`
	// MenuID holds the value of the "menu_id" field.
	// 菜单id
	MenuID int64 `json:"menuId"`
	// IsDeleted holds the value of the "is_deleted" field.
	// 是否被删除
	IsDeleted int64 `json:"isDeleted"`
	// Status holds the value of the "status" field.
	// 状态
	Status int64 `json:"status"`
	// CreateUser holds the value of the "create_user" field.
	// 创建用户
	CreateUser int64 `json:"createUser"`
	// UpdateUser holds the value of the "update_user" field.
	// 更新用户
	UpdateUser int64 `json:"updateUser"`
	// CreateTime holds the value of the "create_time" field.
	// 创建时间
	CreateTime date.DateTime `json:"createTime"`
	// UpdateTime holds the value of the "update_time" field.
	// 更新时间
	UpdateTime date.DateTime `json:"updateTime"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AsMarketRoleMenuQuery when eager-loading is set.
	Edges AsMarketRoleMenuEdges `json:"edges"`
}

// AsMarketRoleMenuEdges holds the relations/edges for other nodes in the graph.
type AsMarketRoleMenuEdges struct {
	// Menux holds the value of the menux edge.
	Menux *AsMarketMenu `json:"menux"`
	// Rolex holds the value of the rolex edge.
	Rolex *AsMarketAppRole `json:"rolex"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// MenuxOrErr returns the Menux value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AsMarketRoleMenuEdges) MenuxOrErr() (*AsMarketMenu, error) {
	if e.loadedTypes[0] {
		if e.Menux == nil {
			// The edge menux was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: asmarketmenu.Label}
		}
		return e.Menux, nil
	}
	return nil, &NotLoadedError{edge: "menux"}
}

// RolexOrErr returns the Rolex value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AsMarketRoleMenuEdges) RolexOrErr() (*AsMarketAppRole, error) {
	if e.loadedTypes[1] {
		if e.Rolex == nil {
			// The edge rolex was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: asmarketapprole.Label}
		}
		return e.Rolex, nil
	}
	return nil, &NotLoadedError{edge: "rolex"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AsMarketRoleMenu) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case asmarketrolemenu.FieldID, asmarketrolemenu.FieldRoleID, asmarketrolemenu.FieldMenuID, asmarketrolemenu.FieldIsDeleted, asmarketrolemenu.FieldStatus, asmarketrolemenu.FieldCreateUser, asmarketrolemenu.FieldUpdateUser:
			values[i] = new(sql.NullInt64)
		case asmarketrolemenu.FieldCreateTime, asmarketrolemenu.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AsMarketRoleMenu", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AsMarketRoleMenu fields.
func (amrm *AsMarketRoleMenu) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case asmarketrolemenu.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			amrm.ID = int64(value.Int64)
		case asmarketrolemenu.FieldRoleID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field role_id", values[i])
			} else if value.Valid {
				amrm.RoleID = value.Int64
			}
		case asmarketrolemenu.FieldMenuID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field menu_id", values[i])
			} else if value.Valid {
				amrm.MenuID = value.Int64
			}
		case asmarketrolemenu.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				amrm.IsDeleted = value.Int64
			}
		case asmarketrolemenu.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				amrm.Status = value.Int64
			}
		case asmarketrolemenu.FieldCreateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_user", values[i])
			} else if value.Valid {
				amrm.CreateUser = value.Int64
			}
		case asmarketrolemenu.FieldUpdateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_user", values[i])
			} else if value.Valid {
				amrm.UpdateUser = value.Int64
			}
		case asmarketrolemenu.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				amrm.CreateTime = date.DateTime(value.Time)
			}
		case asmarketrolemenu.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				amrm.UpdateTime = date.DateTime(value.Time)
			}
		}
	}
	return nil
}

// QueryMenux queries the "menux" edge of the AsMarketRoleMenu entity.
func (amrm *AsMarketRoleMenu) QueryMenux() *AsMarketMenuQuery {
	return (&AsMarketRoleMenuClient{config: amrm.config}).QueryMenux(amrm)
}

// QueryRolex queries the "rolex" edge of the AsMarketRoleMenu entity.
func (amrm *AsMarketRoleMenu) QueryRolex() *AsMarketAppRoleQuery {
	return (&AsMarketRoleMenuClient{config: amrm.config}).QueryRolex(amrm)
}

// Update returns a builder for updating this AsMarketRoleMenu.
// Note that you need to call AsMarketRoleMenu.Unwrap() before calling this method if this AsMarketRoleMenu
// was returned from a transaction, and the transaction was committed or rolled back.
func (amrm *AsMarketRoleMenu) Update() *AsMarketRoleMenuUpdateOne {
	return (&AsMarketRoleMenuClient{config: amrm.config}).UpdateOne(amrm)
}

// Unwrap unwraps the AsMarketRoleMenu entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (amrm *AsMarketRoleMenu) Unwrap() *AsMarketRoleMenu {
	tx, ok := amrm.config.driver.(*txDriver)
	if !ok {
		panic("schema: AsMarketRoleMenu is not a transactional entity")
	}
	amrm.config.driver = tx.drv
	return amrm
}

// String implements the fmt.Stringer.
func (amrm *AsMarketRoleMenu) String() string {
	var builder strings.Builder
	builder.WriteString("AsMarketRoleMenu(")
	builder.WriteString(fmt.Sprintf("id=%v", amrm.ID))
	builder.WriteString(", role_id=")
	builder.WriteString(fmt.Sprintf("%v", amrm.RoleID))
	builder.WriteString(", menu_id=")
	builder.WriteString(fmt.Sprintf("%v", amrm.MenuID))
	builder.WriteString(", is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", amrm.IsDeleted))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", amrm.Status))
	builder.WriteString(", create_user=")
	builder.WriteString(fmt.Sprintf("%v", amrm.CreateUser))
	builder.WriteString(", update_user=")
	builder.WriteString(fmt.Sprintf("%v", amrm.UpdateUser))
	builder.WriteString(", create_time=")
	builder.WriteString(fmt.Sprintf("%v", amrm.CreateTime))
	builder.WriteString(", update_time=")
	builder.WriteString(fmt.Sprintf("%v", amrm.UpdateTime))
	builder.WriteByte(')')
	return builder.String()
}

// AsMarketRoleMenus is a parsable slice of AsMarketRoleMenu.
type AsMarketRoleMenus []*AsMarketRoleMenu

func (amrm AsMarketRoleMenus) config(cfg config) {
	for _i := range amrm {
		amrm[_i].config = cfg
	}
}
