// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/aspersonsingle"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsPersonSingleCreate is the builder for creating a AsPersonSingle entity.
type AsPersonSingleCreate struct {
	config
	mutation *AsPersonSingleMutation
	hooks    []Hook
}

// SetRealName sets the "real_name" field.
func (apsc *AsPersonSingleCreate) SetRealName(s string) *AsPersonSingleCreate {
	apsc.mutation.SetRealName(s)
	return apsc
}

// SetIDCard sets the "id_card" field.
func (apsc *AsPersonSingleCreate) SetIDCard(s string) *AsPersonSingleCreate {
	apsc.mutation.SetIDCard(s)
	return apsc
}

// SetNillableIDCard sets the "id_card" field if the given value is not nil.
func (apsc *AsPersonSingleCreate) SetNillableIDCard(s *string) *AsPersonSingleCreate {
	if s != nil {
		apsc.SetIDCard(*s)
	}
	return apsc
}

// SetGender sets the "gender" field.
func (apsc *AsPersonSingleCreate) SetGender(i int64) *AsPersonSingleCreate {
	apsc.mutation.SetGender(i)
	return apsc
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (apsc *AsPersonSingleCreate) SetNillableGender(i *int64) *AsPersonSingleCreate {
	if i != nil {
		apsc.SetGender(*i)
	}
	return apsc
}

// SetUserBirthday sets the "user_birthday" field.
func (apsc *AsPersonSingleCreate) SetUserBirthday(dt date.DateTime) *AsPersonSingleCreate {
	apsc.mutation.SetUserBirthday(dt)
	return apsc
}

// SetNillableUserBirthday sets the "user_birthday" field if the given value is not nil.
func (apsc *AsPersonSingleCreate) SetNillableUserBirthday(dt *date.DateTime) *AsPersonSingleCreate {
	if dt != nil {
		apsc.SetUserBirthday(*dt)
	}
	return apsc
}

// SetUserEmail sets the "user_email" field.
func (apsc *AsPersonSingleCreate) SetUserEmail(s string) *AsPersonSingleCreate {
	apsc.mutation.SetUserEmail(s)
	return apsc
}

// SetNillableUserEmail sets the "user_email" field if the given value is not nil.
func (apsc *AsPersonSingleCreate) SetNillableUserEmail(s *string) *AsPersonSingleCreate {
	if s != nil {
		apsc.SetUserEmail(*s)
	}
	return apsc
}

// SetUserPhoto sets the "user_photo" field.
func (apsc *AsPersonSingleCreate) SetUserPhoto(s string) *AsPersonSingleCreate {
	apsc.mutation.SetUserPhoto(s)
	return apsc
}

// SetNillableUserPhoto sets the "user_photo" field if the given value is not nil.
func (apsc *AsPersonSingleCreate) SetNillableUserPhoto(s *string) *AsPersonSingleCreate {
	if s != nil {
		apsc.SetUserPhoto(*s)
	}
	return apsc
}

// SetPhoneNumber sets the "phone_number" field.
func (apsc *AsPersonSingleCreate) SetPhoneNumber(s string) *AsPersonSingleCreate {
	apsc.mutation.SetPhoneNumber(s)
	return apsc
}

// SetProvince sets the "province" field.
func (apsc *AsPersonSingleCreate) SetProvince(s string) *AsPersonSingleCreate {
	apsc.mutation.SetProvince(s)
	return apsc
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (apsc *AsPersonSingleCreate) SetNillableProvince(s *string) *AsPersonSingleCreate {
	if s != nil {
		apsc.SetProvince(*s)
	}
	return apsc
}

// SetCity sets the "city" field.
func (apsc *AsPersonSingleCreate) SetCity(s string) *AsPersonSingleCreate {
	apsc.mutation.SetCity(s)
	return apsc
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (apsc *AsPersonSingleCreate) SetNillableCity(s *string) *AsPersonSingleCreate {
	if s != nil {
		apsc.SetCity(*s)
	}
	return apsc
}

// SetStreetAddress sets the "street_address" field.
func (apsc *AsPersonSingleCreate) SetStreetAddress(s string) *AsPersonSingleCreate {
	apsc.mutation.SetStreetAddress(s)
	return apsc
}

// SetNillableStreetAddress sets the "street_address" field if the given value is not nil.
func (apsc *AsPersonSingleCreate) SetNillableStreetAddress(s *string) *AsPersonSingleCreate {
	if s != nil {
		apsc.SetStreetAddress(*s)
	}
	return apsc
}

// SetIsDeleted sets the "is_deleted" field.
func (apsc *AsPersonSingleCreate) SetIsDeleted(i int64) *AsPersonSingleCreate {
	apsc.mutation.SetIsDeleted(i)
	return apsc
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (apsc *AsPersonSingleCreate) SetNillableIsDeleted(i *int64) *AsPersonSingleCreate {
	if i != nil {
		apsc.SetIsDeleted(*i)
	}
	return apsc
}

// SetStatus sets the "status" field.
func (apsc *AsPersonSingleCreate) SetStatus(i int64) *AsPersonSingleCreate {
	apsc.mutation.SetStatus(i)
	return apsc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (apsc *AsPersonSingleCreate) SetNillableStatus(i *int64) *AsPersonSingleCreate {
	if i != nil {
		apsc.SetStatus(*i)
	}
	return apsc
}

// SetCreateUser sets the "create_user" field.
func (apsc *AsPersonSingleCreate) SetCreateUser(i int64) *AsPersonSingleCreate {
	apsc.mutation.SetCreateUser(i)
	return apsc
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (apsc *AsPersonSingleCreate) SetNillableCreateUser(i *int64) *AsPersonSingleCreate {
	if i != nil {
		apsc.SetCreateUser(*i)
	}
	return apsc
}

// SetUpdateUser sets the "update_user" field.
func (apsc *AsPersonSingleCreate) SetUpdateUser(i int64) *AsPersonSingleCreate {
	apsc.mutation.SetUpdateUser(i)
	return apsc
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (apsc *AsPersonSingleCreate) SetNillableUpdateUser(i *int64) *AsPersonSingleCreate {
	if i != nil {
		apsc.SetUpdateUser(*i)
	}
	return apsc
}

// SetCreateTime sets the "create_time" field.
func (apsc *AsPersonSingleCreate) SetCreateTime(dt date.DateTime) *AsPersonSingleCreate {
	apsc.mutation.SetCreateTime(dt)
	return apsc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (apsc *AsPersonSingleCreate) SetNillableCreateTime(dt *date.DateTime) *AsPersonSingleCreate {
	if dt != nil {
		apsc.SetCreateTime(*dt)
	}
	return apsc
}

// SetUpdateTime sets the "update_time" field.
func (apsc *AsPersonSingleCreate) SetUpdateTime(dt date.DateTime) *AsPersonSingleCreate {
	apsc.mutation.SetUpdateTime(dt)
	return apsc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (apsc *AsPersonSingleCreate) SetNillableUpdateTime(dt *date.DateTime) *AsPersonSingleCreate {
	if dt != nil {
		apsc.SetUpdateTime(*dt)
	}
	return apsc
}

// SetID sets the "id" field.
func (apsc *AsPersonSingleCreate) SetID(i int64) *AsPersonSingleCreate {
	apsc.mutation.SetID(i)
	return apsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (apsc *AsPersonSingleCreate) SetNillableID(i *int64) *AsPersonSingleCreate {
	if i != nil {
		apsc.SetID(*i)
	}
	return apsc
}

// Mutation returns the AsPersonSingleMutation object of the builder.
func (apsc *AsPersonSingleCreate) Mutation() *AsPersonSingleMutation {
	return apsc.mutation
}

// Save creates the AsPersonSingle in the database.
func (apsc *AsPersonSingleCreate) Save(ctx context.Context) (*AsPersonSingle, error) {
	var (
		err  error
		node *AsPersonSingle
	)
	apsc.defaults()
	if len(apsc.hooks) == 0 {
		if err = apsc.check(); err != nil {
			return nil, err
		}
		node, err = apsc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsPersonSingleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = apsc.check(); err != nil {
				return nil, err
			}
			apsc.mutation = mutation
			if node, err = apsc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(apsc.hooks) - 1; i >= 0; i-- {
			if apsc.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = apsc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, apsc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (apsc *AsPersonSingleCreate) SaveX(ctx context.Context) *AsPersonSingle {
	v, err := apsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (apsc *AsPersonSingleCreate) Exec(ctx context.Context) error {
	_, err := apsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apsc *AsPersonSingleCreate) ExecX(ctx context.Context) {
	if err := apsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (apsc *AsPersonSingleCreate) defaults() {
	if _, ok := apsc.mutation.IsDeleted(); !ok {
		v := aspersonsingle.DefaultIsDeleted
		apsc.mutation.SetIsDeleted(v)
	}
	if _, ok := apsc.mutation.Status(); !ok {
		v := aspersonsingle.DefaultStatus
		apsc.mutation.SetStatus(v)
	}
	if _, ok := apsc.mutation.CreateTime(); !ok {
		v := aspersonsingle.DefaultCreateTime()
		apsc.mutation.SetCreateTime(v)
	}
	if _, ok := apsc.mutation.UpdateTime(); !ok {
		v := aspersonsingle.DefaultUpdateTime()
		apsc.mutation.SetUpdateTime(v)
	}
	if _, ok := apsc.mutation.ID(); !ok {
		v := aspersonsingle.DefaultID()
		apsc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (apsc *AsPersonSingleCreate) check() error {
	if _, ok := apsc.mutation.RealName(); !ok {
		return &ValidationError{Name: "real_name", err: errors.New(`schema: missing required field "AsPersonSingle.real_name"`)}
	}
	if _, ok := apsc.mutation.PhoneNumber(); !ok {
		return &ValidationError{Name: "phone_number", err: errors.New(`schema: missing required field "AsPersonSingle.phone_number"`)}
	}
	if _, ok := apsc.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "is_deleted", err: errors.New(`schema: missing required field "AsPersonSingle.is_deleted"`)}
	}
	return nil
}

func (apsc *AsPersonSingleCreate) sqlSave(ctx context.Context) (*AsPersonSingle, error) {
	_node, _spec := apsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, apsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (apsc *AsPersonSingleCreate) createSpec() (*AsPersonSingle, *sqlgraph.CreateSpec) {
	var (
		_node = &AsPersonSingle{config: apsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: aspersonsingle.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: aspersonsingle.FieldID,
			},
		}
	)
	if id, ok := apsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := apsc.mutation.RealName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aspersonsingle.FieldRealName,
		})
		_node.RealName = value
	}
	if value, ok := apsc.mutation.IDCard(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aspersonsingle.FieldIDCard,
		})
		_node.IDCard = value
	}
	if value, ok := apsc.mutation.Gender(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aspersonsingle.FieldGender,
		})
		_node.Gender = value
	}
	if value, ok := apsc.mutation.UserBirthday(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: aspersonsingle.FieldUserBirthday,
		})
		_node.UserBirthday = value
	}
	if value, ok := apsc.mutation.UserEmail(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aspersonsingle.FieldUserEmail,
		})
		_node.UserEmail = value
	}
	if value, ok := apsc.mutation.UserPhoto(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aspersonsingle.FieldUserPhoto,
		})
		_node.UserPhoto = value
	}
	if value, ok := apsc.mutation.PhoneNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aspersonsingle.FieldPhoneNumber,
		})
		_node.PhoneNumber = value
	}
	if value, ok := apsc.mutation.Province(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aspersonsingle.FieldProvince,
		})
		_node.Province = value
	}
	if value, ok := apsc.mutation.City(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aspersonsingle.FieldCity,
		})
		_node.City = value
	}
	if value, ok := apsc.mutation.StreetAddress(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aspersonsingle.FieldStreetAddress,
		})
		_node.StreetAddress = value
	}
	if value, ok := apsc.mutation.IsDeleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aspersonsingle.FieldIsDeleted,
		})
		_node.IsDeleted = value
	}
	if value, ok := apsc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aspersonsingle.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := apsc.mutation.CreateUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aspersonsingle.FieldCreateUser,
		})
		_node.CreateUser = value
	}
	if value, ok := apsc.mutation.UpdateUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aspersonsingle.FieldUpdateUser,
		})
		_node.UpdateUser = value
	}
	if value, ok := apsc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: aspersonsingle.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := apsc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: aspersonsingle.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	return _node, _spec
}

// AsPersonSingleCreateBulk is the builder for creating many AsPersonSingle entities in bulk.
type AsPersonSingleCreateBulk struct {
	config
	builders []*AsPersonSingleCreate
}

// Save creates the AsPersonSingle entities in the database.
func (apscb *AsPersonSingleCreateBulk) Save(ctx context.Context) ([]*AsPersonSingle, error) {
	specs := make([]*sqlgraph.CreateSpec, len(apscb.builders))
	nodes := make([]*AsPersonSingle, len(apscb.builders))
	mutators := make([]Mutator, len(apscb.builders))
	for i := range apscb.builders {
		func(i int, root context.Context) {
			builder := apscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AsPersonSingleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, apscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, apscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, apscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (apscb *AsPersonSingleCreateBulk) SaveX(ctx context.Context) []*AsPersonSingle {
	v, err := apscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (apscb *AsPersonSingleCreateBulk) Exec(ctx context.Context) error {
	_, err := apscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apscb *AsPersonSingleCreateBulk) ExecX(ctx context.Context) {
	if err := apscb.Exec(ctx); err != nil {
		panic(err)
	}
}
