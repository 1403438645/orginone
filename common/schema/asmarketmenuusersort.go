// Code generated by entc, DO NOT EDIT.

package schema

import (
	"fmt"
	"orginone/common/schema/asmarketmenu"
	"orginone/common/schema/asmarketmenuusersort"
	"orginone/common/schema/asuser"
	"orginone/common/tools/date"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// AsMarketMenuUserSort is the model entity for the AsMarketMenuUserSort schema.
type AsMarketMenuUserSort struct {
	config `json:"-"`
	// ID of the ent.
	// 主键
	ID int64 `json:"id,string"`
	// UserID holds the value of the "user_id" field.
	// 用户id
	UserID int64 `json:"userId"`
	// MenuID holds the value of the "menu_id" field.
	// 一级应用菜单
	MenuID int64 `json:"menuId"`
	// Sort holds the value of the "sort" field.
	// 排序字段
	Sort int64 `json:"sort"`
	// IsDeleted holds the value of the "is_deleted" field.
	// 是否被删除
	IsDeleted int64 `json:"isDeleted"`
	// Status holds the value of the "status" field.
	// 状态
	Status int64 `json:"status"`
	// CreateUser holds the value of the "create_user" field.
	// 创建用户
	CreateUser int64 `json:"createUser"`
	// UpdateUser holds the value of the "update_user" field.
	// 更新用户
	UpdateUser int64 `json:"updateUser"`
	// CreateTime holds the value of the "create_time" field.
	// 创建时间
	CreateTime date.DateTime `json:"createTime"`
	// UpdateTime holds the value of the "update_time" field.
	// 更新时间
	UpdateTime date.DateTime `json:"updateTime"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AsMarketMenuUserSortQuery when eager-loading is set.
	Edges AsMarketMenuUserSortEdges `json:"edges"`
}

// AsMarketMenuUserSortEdges holds the relations/edges for other nodes in the graph.
type AsMarketMenuUserSortEdges struct {
	// Userx holds the value of the userx edge.
	Userx *AsUser `json:"userx"`
	// Appmenux holds the value of the appmenux edge.
	Appmenux *AsMarketMenu `json:"appmenux"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserxOrErr returns the Userx value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AsMarketMenuUserSortEdges) UserxOrErr() (*AsUser, error) {
	if e.loadedTypes[0] {
		if e.Userx == nil {
			// The edge userx was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: asuser.Label}
		}
		return e.Userx, nil
	}
	return nil, &NotLoadedError{edge: "userx"}
}

// AppmenuxOrErr returns the Appmenux value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AsMarketMenuUserSortEdges) AppmenuxOrErr() (*AsMarketMenu, error) {
	if e.loadedTypes[1] {
		if e.Appmenux == nil {
			// The edge appmenux was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: asmarketmenu.Label}
		}
		return e.Appmenux, nil
	}
	return nil, &NotLoadedError{edge: "appmenux"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AsMarketMenuUserSort) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case asmarketmenuusersort.FieldID, asmarketmenuusersort.FieldUserID, asmarketmenuusersort.FieldMenuID, asmarketmenuusersort.FieldSort, asmarketmenuusersort.FieldIsDeleted, asmarketmenuusersort.FieldStatus, asmarketmenuusersort.FieldCreateUser, asmarketmenuusersort.FieldUpdateUser:
			values[i] = new(sql.NullInt64)
		case asmarketmenuusersort.FieldCreateTime, asmarketmenuusersort.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AsMarketMenuUserSort", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AsMarketMenuUserSort fields.
func (ammus *AsMarketMenuUserSort) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case asmarketmenuusersort.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ammus.ID = int64(value.Int64)
		case asmarketmenuusersort.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ammus.UserID = value.Int64
			}
		case asmarketmenuusersort.FieldMenuID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field menu_id", values[i])
			} else if value.Valid {
				ammus.MenuID = value.Int64
			}
		case asmarketmenuusersort.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				ammus.Sort = value.Int64
			}
		case asmarketmenuusersort.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				ammus.IsDeleted = value.Int64
			}
		case asmarketmenuusersort.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ammus.Status = value.Int64
			}
		case asmarketmenuusersort.FieldCreateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_user", values[i])
			} else if value.Valid {
				ammus.CreateUser = value.Int64
			}
		case asmarketmenuusersort.FieldUpdateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_user", values[i])
			} else if value.Valid {
				ammus.UpdateUser = value.Int64
			}
		case asmarketmenuusersort.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ammus.CreateTime = date.DateTime(value.Time)
			}
		case asmarketmenuusersort.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ammus.UpdateTime = date.DateTime(value.Time)
			}
		}
	}
	return nil
}

// QueryUserx queries the "userx" edge of the AsMarketMenuUserSort entity.
func (ammus *AsMarketMenuUserSort) QueryUserx() *AsUserQuery {
	return (&AsMarketMenuUserSortClient{config: ammus.config}).QueryUserx(ammus)
}

// QueryAppmenux queries the "appmenux" edge of the AsMarketMenuUserSort entity.
func (ammus *AsMarketMenuUserSort) QueryAppmenux() *AsMarketMenuQuery {
	return (&AsMarketMenuUserSortClient{config: ammus.config}).QueryAppmenux(ammus)
}

// Update returns a builder for updating this AsMarketMenuUserSort.
// Note that you need to call AsMarketMenuUserSort.Unwrap() before calling this method if this AsMarketMenuUserSort
// was returned from a transaction, and the transaction was committed or rolled back.
func (ammus *AsMarketMenuUserSort) Update() *AsMarketMenuUserSortUpdateOne {
	return (&AsMarketMenuUserSortClient{config: ammus.config}).UpdateOne(ammus)
}

// Unwrap unwraps the AsMarketMenuUserSort entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ammus *AsMarketMenuUserSort) Unwrap() *AsMarketMenuUserSort {
	tx, ok := ammus.config.driver.(*txDriver)
	if !ok {
		panic("schema: AsMarketMenuUserSort is not a transactional entity")
	}
	ammus.config.driver = tx.drv
	return ammus
}

// String implements the fmt.Stringer.
func (ammus *AsMarketMenuUserSort) String() string {
	var builder strings.Builder
	builder.WriteString("AsMarketMenuUserSort(")
	builder.WriteString(fmt.Sprintf("id=%v", ammus.ID))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", ammus.UserID))
	builder.WriteString(", menu_id=")
	builder.WriteString(fmt.Sprintf("%v", ammus.MenuID))
	builder.WriteString(", sort=")
	builder.WriteString(fmt.Sprintf("%v", ammus.Sort))
	builder.WriteString(", is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", ammus.IsDeleted))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", ammus.Status))
	builder.WriteString(", create_user=")
	builder.WriteString(fmt.Sprintf("%v", ammus.CreateUser))
	builder.WriteString(", update_user=")
	builder.WriteString(fmt.Sprintf("%v", ammus.UpdateUser))
	builder.WriteString(", create_time=")
	builder.WriteString(fmt.Sprintf("%v", ammus.CreateTime))
	builder.WriteString(", update_time=")
	builder.WriteString(fmt.Sprintf("%v", ammus.UpdateTime))
	builder.WriteByte(')')
	return builder.String()
}

// AsMarketMenuUserSorts is a parsable slice of AsMarketMenuUserSort.
type AsMarketMenuUserSorts []*AsMarketMenuUserSort

func (ammus AsMarketMenuUserSorts) config(cfg config) {
	for _i := range ammus {
		ammus[_i].config = cfg
	}
}
