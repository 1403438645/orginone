// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/asmarketapp"
	"orginone/common/schema/asmarketapprole"
	"orginone/common/schema/asmarketmenu"
	"orginone/common/schema/asmarketroledistribution"
	"orginone/common/schema/asmarketrolemenu"
	"orginone/common/schema/predicate"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsMarketAppRoleUpdate is the builder for updating AsMarketAppRole entities.
type AsMarketAppRoleUpdate struct {
	config
	hooks    []Hook
	mutation *AsMarketAppRoleMutation
}

// Where appends a list predicates to the AsMarketAppRoleUpdate builder.
func (amaru *AsMarketAppRoleUpdate) Where(ps ...predicate.AsMarketAppRole) *AsMarketAppRoleUpdate {
	amaru.mutation.Where(ps...)
	return amaru
}

// SetRoleName sets the "role_name" field.
func (amaru *AsMarketAppRoleUpdate) SetRoleName(s string) *AsMarketAppRoleUpdate {
	amaru.mutation.SetRoleName(s)
	return amaru
}

// SetNillableRoleName sets the "role_name" field if the given value is not nil.
func (amaru *AsMarketAppRoleUpdate) SetNillableRoleName(s *string) *AsMarketAppRoleUpdate {
	if s != nil {
		amaru.SetRoleName(*s)
	}
	return amaru
}

// ClearRoleName clears the value of the "role_name" field.
func (amaru *AsMarketAppRoleUpdate) ClearRoleName() *AsMarketAppRoleUpdate {
	amaru.mutation.ClearRoleName()
	return amaru
}

// SetAppID sets the "app_id" field.
func (amaru *AsMarketAppRoleUpdate) SetAppID(i int64) *AsMarketAppRoleUpdate {
	amaru.mutation.SetAppID(i)
	return amaru
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (amaru *AsMarketAppRoleUpdate) SetNillableAppID(i *int64) *AsMarketAppRoleUpdate {
	if i != nil {
		amaru.SetAppID(*i)
	}
	return amaru
}

// ClearAppID clears the value of the "app_id" field.
func (amaru *AsMarketAppRoleUpdate) ClearAppID() *AsMarketAppRoleUpdate {
	amaru.mutation.ClearAppID()
	return amaru
}

// SetIsDeleted sets the "is_deleted" field.
func (amaru *AsMarketAppRoleUpdate) SetIsDeleted(i int64) *AsMarketAppRoleUpdate {
	amaru.mutation.ResetIsDeleted()
	amaru.mutation.SetIsDeleted(i)
	return amaru
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (amaru *AsMarketAppRoleUpdate) SetNillableIsDeleted(i *int64) *AsMarketAppRoleUpdate {
	if i != nil {
		amaru.SetIsDeleted(*i)
	}
	return amaru
}

// AddIsDeleted adds i to the "is_deleted" field.
func (amaru *AsMarketAppRoleUpdate) AddIsDeleted(i int64) *AsMarketAppRoleUpdate {
	amaru.mutation.AddIsDeleted(i)
	return amaru
}

// SetStatus sets the "status" field.
func (amaru *AsMarketAppRoleUpdate) SetStatus(i int64) *AsMarketAppRoleUpdate {
	amaru.mutation.ResetStatus()
	amaru.mutation.SetStatus(i)
	return amaru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (amaru *AsMarketAppRoleUpdate) SetNillableStatus(i *int64) *AsMarketAppRoleUpdate {
	if i != nil {
		amaru.SetStatus(*i)
	}
	return amaru
}

// AddStatus adds i to the "status" field.
func (amaru *AsMarketAppRoleUpdate) AddStatus(i int64) *AsMarketAppRoleUpdate {
	amaru.mutation.AddStatus(i)
	return amaru
}

// ClearStatus clears the value of the "status" field.
func (amaru *AsMarketAppRoleUpdate) ClearStatus() *AsMarketAppRoleUpdate {
	amaru.mutation.ClearStatus()
	return amaru
}

// SetCreateUser sets the "create_user" field.
func (amaru *AsMarketAppRoleUpdate) SetCreateUser(i int64) *AsMarketAppRoleUpdate {
	amaru.mutation.ResetCreateUser()
	amaru.mutation.SetCreateUser(i)
	return amaru
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (amaru *AsMarketAppRoleUpdate) SetNillableCreateUser(i *int64) *AsMarketAppRoleUpdate {
	if i != nil {
		amaru.SetCreateUser(*i)
	}
	return amaru
}

// AddCreateUser adds i to the "create_user" field.
func (amaru *AsMarketAppRoleUpdate) AddCreateUser(i int64) *AsMarketAppRoleUpdate {
	amaru.mutation.AddCreateUser(i)
	return amaru
}

// ClearCreateUser clears the value of the "create_user" field.
func (amaru *AsMarketAppRoleUpdate) ClearCreateUser() *AsMarketAppRoleUpdate {
	amaru.mutation.ClearCreateUser()
	return amaru
}

// SetUpdateUser sets the "update_user" field.
func (amaru *AsMarketAppRoleUpdate) SetUpdateUser(i int64) *AsMarketAppRoleUpdate {
	amaru.mutation.ResetUpdateUser()
	amaru.mutation.SetUpdateUser(i)
	return amaru
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (amaru *AsMarketAppRoleUpdate) SetNillableUpdateUser(i *int64) *AsMarketAppRoleUpdate {
	if i != nil {
		amaru.SetUpdateUser(*i)
	}
	return amaru
}

// AddUpdateUser adds i to the "update_user" field.
func (amaru *AsMarketAppRoleUpdate) AddUpdateUser(i int64) *AsMarketAppRoleUpdate {
	amaru.mutation.AddUpdateUser(i)
	return amaru
}

// ClearUpdateUser clears the value of the "update_user" field.
func (amaru *AsMarketAppRoleUpdate) ClearUpdateUser() *AsMarketAppRoleUpdate {
	amaru.mutation.ClearUpdateUser()
	return amaru
}

// SetUpdateTime sets the "update_time" field.
func (amaru *AsMarketAppRoleUpdate) SetUpdateTime(dt date.DateTime) *AsMarketAppRoleUpdate {
	amaru.mutation.SetUpdateTime(dt)
	return amaru
}

// ClearUpdateTime clears the value of the "update_time" field.
func (amaru *AsMarketAppRoleUpdate) ClearUpdateTime() *AsMarketAppRoleUpdate {
	amaru.mutation.ClearUpdateTime()
	return amaru
}

// AddRoleDistribIDs adds the "roleDistribs" edge to the AsMarketRoleDistribution entity by IDs.
func (amaru *AsMarketAppRoleUpdate) AddRoleDistribIDs(ids ...int64) *AsMarketAppRoleUpdate {
	amaru.mutation.AddRoleDistribIDs(ids...)
	return amaru
}

// AddRoleDistribs adds the "roleDistribs" edges to the AsMarketRoleDistribution entity.
func (amaru *AsMarketAppRoleUpdate) AddRoleDistribs(a ...*AsMarketRoleDistribution) *AsMarketAppRoleUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amaru.AddRoleDistribIDs(ids...)
}

// AddRoleMenuIDs adds the "roleMenus" edge to the AsMarketRoleMenu entity by IDs.
func (amaru *AsMarketAppRoleUpdate) AddRoleMenuIDs(ids ...int64) *AsMarketAppRoleUpdate {
	amaru.mutation.AddRoleMenuIDs(ids...)
	return amaru
}

// AddRoleMenus adds the "roleMenus" edges to the AsMarketRoleMenu entity.
func (amaru *AsMarketAppRoleUpdate) AddRoleMenus(a ...*AsMarketRoleMenu) *AsMarketAppRoleUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amaru.AddRoleMenuIDs(ids...)
}

// AddMenuIDs adds the "menus" edge to the AsMarketMenu entity by IDs.
func (amaru *AsMarketAppRoleUpdate) AddMenuIDs(ids ...int64) *AsMarketAppRoleUpdate {
	amaru.mutation.AddMenuIDs(ids...)
	return amaru
}

// AddMenus adds the "menus" edges to the AsMarketMenu entity.
func (amaru *AsMarketAppRoleUpdate) AddMenus(a ...*AsMarketMenu) *AsMarketAppRoleUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amaru.AddMenuIDs(ids...)
}

// SetAppxID sets the "appx" edge to the AsMarketApp entity by ID.
func (amaru *AsMarketAppRoleUpdate) SetAppxID(id int64) *AsMarketAppRoleUpdate {
	amaru.mutation.SetAppxID(id)
	return amaru
}

// SetNillableAppxID sets the "appx" edge to the AsMarketApp entity by ID if the given value is not nil.
func (amaru *AsMarketAppRoleUpdate) SetNillableAppxID(id *int64) *AsMarketAppRoleUpdate {
	if id != nil {
		amaru = amaru.SetAppxID(*id)
	}
	return amaru
}

// SetAppx sets the "appx" edge to the AsMarketApp entity.
func (amaru *AsMarketAppRoleUpdate) SetAppx(a *AsMarketApp) *AsMarketAppRoleUpdate {
	return amaru.SetAppxID(a.ID)
}

// Mutation returns the AsMarketAppRoleMutation object of the builder.
func (amaru *AsMarketAppRoleUpdate) Mutation() *AsMarketAppRoleMutation {
	return amaru.mutation
}

// ClearRoleDistribs clears all "roleDistribs" edges to the AsMarketRoleDistribution entity.
func (amaru *AsMarketAppRoleUpdate) ClearRoleDistribs() *AsMarketAppRoleUpdate {
	amaru.mutation.ClearRoleDistribs()
	return amaru
}

// RemoveRoleDistribIDs removes the "roleDistribs" edge to AsMarketRoleDistribution entities by IDs.
func (amaru *AsMarketAppRoleUpdate) RemoveRoleDistribIDs(ids ...int64) *AsMarketAppRoleUpdate {
	amaru.mutation.RemoveRoleDistribIDs(ids...)
	return amaru
}

// RemoveRoleDistribs removes "roleDistribs" edges to AsMarketRoleDistribution entities.
func (amaru *AsMarketAppRoleUpdate) RemoveRoleDistribs(a ...*AsMarketRoleDistribution) *AsMarketAppRoleUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amaru.RemoveRoleDistribIDs(ids...)
}

// ClearRoleMenus clears all "roleMenus" edges to the AsMarketRoleMenu entity.
func (amaru *AsMarketAppRoleUpdate) ClearRoleMenus() *AsMarketAppRoleUpdate {
	amaru.mutation.ClearRoleMenus()
	return amaru
}

// RemoveRoleMenuIDs removes the "roleMenus" edge to AsMarketRoleMenu entities by IDs.
func (amaru *AsMarketAppRoleUpdate) RemoveRoleMenuIDs(ids ...int64) *AsMarketAppRoleUpdate {
	amaru.mutation.RemoveRoleMenuIDs(ids...)
	return amaru
}

// RemoveRoleMenus removes "roleMenus" edges to AsMarketRoleMenu entities.
func (amaru *AsMarketAppRoleUpdate) RemoveRoleMenus(a ...*AsMarketRoleMenu) *AsMarketAppRoleUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amaru.RemoveRoleMenuIDs(ids...)
}

// ClearMenus clears all "menus" edges to the AsMarketMenu entity.
func (amaru *AsMarketAppRoleUpdate) ClearMenus() *AsMarketAppRoleUpdate {
	amaru.mutation.ClearMenus()
	return amaru
}

// RemoveMenuIDs removes the "menus" edge to AsMarketMenu entities by IDs.
func (amaru *AsMarketAppRoleUpdate) RemoveMenuIDs(ids ...int64) *AsMarketAppRoleUpdate {
	amaru.mutation.RemoveMenuIDs(ids...)
	return amaru
}

// RemoveMenus removes "menus" edges to AsMarketMenu entities.
func (amaru *AsMarketAppRoleUpdate) RemoveMenus(a ...*AsMarketMenu) *AsMarketAppRoleUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amaru.RemoveMenuIDs(ids...)
}

// ClearAppx clears the "appx" edge to the AsMarketApp entity.
func (amaru *AsMarketAppRoleUpdate) ClearAppx() *AsMarketAppRoleUpdate {
	amaru.mutation.ClearAppx()
	return amaru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (amaru *AsMarketAppRoleUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	amaru.defaults()
	if len(amaru.hooks) == 0 {
		affected, err = amaru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsMarketAppRoleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			amaru.mutation = mutation
			affected, err = amaru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(amaru.hooks) - 1; i >= 0; i-- {
			if amaru.hooks[i] == nil {
				return 0, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = amaru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, amaru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (amaru *AsMarketAppRoleUpdate) SaveX(ctx context.Context) int {
	affected, err := amaru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (amaru *AsMarketAppRoleUpdate) Exec(ctx context.Context) error {
	_, err := amaru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amaru *AsMarketAppRoleUpdate) ExecX(ctx context.Context) {
	if err := amaru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amaru *AsMarketAppRoleUpdate) defaults() {
	if _, ok := amaru.mutation.UpdateTime(); !ok && !amaru.mutation.UpdateTimeCleared() {
		v := asmarketapprole.UpdateDefaultUpdateTime()
		amaru.mutation.SetUpdateTime(v)
	}
}

func (amaru *AsMarketAppRoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asmarketapprole.Table,
			Columns: asmarketapprole.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asmarketapprole.FieldID,
			},
		},
	}
	if ps := amaru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amaru.mutation.RoleName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapprole.FieldRoleName,
		})
	}
	if amaru.mutation.RoleNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketapprole.FieldRoleName,
		})
	}
	if value, ok := amaru.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapprole.FieldIsDeleted,
		})
	}
	if value, ok := amaru.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapprole.FieldIsDeleted,
		})
	}
	if value, ok := amaru.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapprole.FieldStatus,
		})
	}
	if value, ok := amaru.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapprole.FieldStatus,
		})
	}
	if amaru.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketapprole.FieldStatus,
		})
	}
	if value, ok := amaru.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapprole.FieldCreateUser,
		})
	}
	if value, ok := amaru.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapprole.FieldCreateUser,
		})
	}
	if amaru.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketapprole.FieldCreateUser,
		})
	}
	if value, ok := amaru.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapprole.FieldUpdateUser,
		})
	}
	if value, ok := amaru.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapprole.FieldUpdateUser,
		})
	}
	if amaru.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketapprole.FieldUpdateUser,
		})
	}
	if amaru.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketapprole.FieldCreateTime,
		})
	}
	if value, ok := amaru.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketapprole.FieldUpdateTime,
		})
	}
	if amaru.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketapprole.FieldUpdateTime,
		})
	}
	if amaru.mutation.RoleDistribsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapprole.RoleDistribsTable,
			Columns: []string{asmarketapprole.RoleDistribsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketroledistribution.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amaru.mutation.RemovedRoleDistribsIDs(); len(nodes) > 0 && !amaru.mutation.RoleDistribsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapprole.RoleDistribsTable,
			Columns: []string{asmarketapprole.RoleDistribsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketroledistribution.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amaru.mutation.RoleDistribsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapprole.RoleDistribsTable,
			Columns: []string{asmarketapprole.RoleDistribsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketroledistribution.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amaru.mutation.RoleMenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapprole.RoleMenusTable,
			Columns: []string{asmarketapprole.RoleMenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketrolemenu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amaru.mutation.RemovedRoleMenusIDs(); len(nodes) > 0 && !amaru.mutation.RoleMenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapprole.RoleMenusTable,
			Columns: []string{asmarketapprole.RoleMenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketrolemenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amaru.mutation.RoleMenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapprole.RoleMenusTable,
			Columns: []string{asmarketapprole.RoleMenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketrolemenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amaru.mutation.MenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asmarketapprole.MenusTable,
			Columns: asmarketapprole.MenusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketmenu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amaru.mutation.RemovedMenusIDs(); len(nodes) > 0 && !amaru.mutation.MenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asmarketapprole.MenusTable,
			Columns: asmarketapprole.MenusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amaru.mutation.MenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asmarketapprole.MenusTable,
			Columns: asmarketapprole.MenusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amaru.mutation.AppxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketapprole.AppxTable,
			Columns: []string{asmarketapprole.AppxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapp.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amaru.mutation.AppxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketapprole.AppxTable,
			Columns: []string{asmarketapprole.AppxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapp.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, amaru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asmarketapprole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AsMarketAppRoleUpdateOne is the builder for updating a single AsMarketAppRole entity.
type AsMarketAppRoleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AsMarketAppRoleMutation
}

// SetRoleName sets the "role_name" field.
func (amaruo *AsMarketAppRoleUpdateOne) SetRoleName(s string) *AsMarketAppRoleUpdateOne {
	amaruo.mutation.SetRoleName(s)
	return amaruo
}

// SetNillableRoleName sets the "role_name" field if the given value is not nil.
func (amaruo *AsMarketAppRoleUpdateOne) SetNillableRoleName(s *string) *AsMarketAppRoleUpdateOne {
	if s != nil {
		amaruo.SetRoleName(*s)
	}
	return amaruo
}

// ClearRoleName clears the value of the "role_name" field.
func (amaruo *AsMarketAppRoleUpdateOne) ClearRoleName() *AsMarketAppRoleUpdateOne {
	amaruo.mutation.ClearRoleName()
	return amaruo
}

// SetAppID sets the "app_id" field.
func (amaruo *AsMarketAppRoleUpdateOne) SetAppID(i int64) *AsMarketAppRoleUpdateOne {
	amaruo.mutation.SetAppID(i)
	return amaruo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (amaruo *AsMarketAppRoleUpdateOne) SetNillableAppID(i *int64) *AsMarketAppRoleUpdateOne {
	if i != nil {
		amaruo.SetAppID(*i)
	}
	return amaruo
}

// ClearAppID clears the value of the "app_id" field.
func (amaruo *AsMarketAppRoleUpdateOne) ClearAppID() *AsMarketAppRoleUpdateOne {
	amaruo.mutation.ClearAppID()
	return amaruo
}

// SetIsDeleted sets the "is_deleted" field.
func (amaruo *AsMarketAppRoleUpdateOne) SetIsDeleted(i int64) *AsMarketAppRoleUpdateOne {
	amaruo.mutation.ResetIsDeleted()
	amaruo.mutation.SetIsDeleted(i)
	return amaruo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (amaruo *AsMarketAppRoleUpdateOne) SetNillableIsDeleted(i *int64) *AsMarketAppRoleUpdateOne {
	if i != nil {
		amaruo.SetIsDeleted(*i)
	}
	return amaruo
}

// AddIsDeleted adds i to the "is_deleted" field.
func (amaruo *AsMarketAppRoleUpdateOne) AddIsDeleted(i int64) *AsMarketAppRoleUpdateOne {
	amaruo.mutation.AddIsDeleted(i)
	return amaruo
}

// SetStatus sets the "status" field.
func (amaruo *AsMarketAppRoleUpdateOne) SetStatus(i int64) *AsMarketAppRoleUpdateOne {
	amaruo.mutation.ResetStatus()
	amaruo.mutation.SetStatus(i)
	return amaruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (amaruo *AsMarketAppRoleUpdateOne) SetNillableStatus(i *int64) *AsMarketAppRoleUpdateOne {
	if i != nil {
		amaruo.SetStatus(*i)
	}
	return amaruo
}

// AddStatus adds i to the "status" field.
func (amaruo *AsMarketAppRoleUpdateOne) AddStatus(i int64) *AsMarketAppRoleUpdateOne {
	amaruo.mutation.AddStatus(i)
	return amaruo
}

// ClearStatus clears the value of the "status" field.
func (amaruo *AsMarketAppRoleUpdateOne) ClearStatus() *AsMarketAppRoleUpdateOne {
	amaruo.mutation.ClearStatus()
	return amaruo
}

// SetCreateUser sets the "create_user" field.
func (amaruo *AsMarketAppRoleUpdateOne) SetCreateUser(i int64) *AsMarketAppRoleUpdateOne {
	amaruo.mutation.ResetCreateUser()
	amaruo.mutation.SetCreateUser(i)
	return amaruo
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (amaruo *AsMarketAppRoleUpdateOne) SetNillableCreateUser(i *int64) *AsMarketAppRoleUpdateOne {
	if i != nil {
		amaruo.SetCreateUser(*i)
	}
	return amaruo
}

// AddCreateUser adds i to the "create_user" field.
func (amaruo *AsMarketAppRoleUpdateOne) AddCreateUser(i int64) *AsMarketAppRoleUpdateOne {
	amaruo.mutation.AddCreateUser(i)
	return amaruo
}

// ClearCreateUser clears the value of the "create_user" field.
func (amaruo *AsMarketAppRoleUpdateOne) ClearCreateUser() *AsMarketAppRoleUpdateOne {
	amaruo.mutation.ClearCreateUser()
	return amaruo
}

// SetUpdateUser sets the "update_user" field.
func (amaruo *AsMarketAppRoleUpdateOne) SetUpdateUser(i int64) *AsMarketAppRoleUpdateOne {
	amaruo.mutation.ResetUpdateUser()
	amaruo.mutation.SetUpdateUser(i)
	return amaruo
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (amaruo *AsMarketAppRoleUpdateOne) SetNillableUpdateUser(i *int64) *AsMarketAppRoleUpdateOne {
	if i != nil {
		amaruo.SetUpdateUser(*i)
	}
	return amaruo
}

// AddUpdateUser adds i to the "update_user" field.
func (amaruo *AsMarketAppRoleUpdateOne) AddUpdateUser(i int64) *AsMarketAppRoleUpdateOne {
	amaruo.mutation.AddUpdateUser(i)
	return amaruo
}

// ClearUpdateUser clears the value of the "update_user" field.
func (amaruo *AsMarketAppRoleUpdateOne) ClearUpdateUser() *AsMarketAppRoleUpdateOne {
	amaruo.mutation.ClearUpdateUser()
	return amaruo
}

// SetUpdateTime sets the "update_time" field.
func (amaruo *AsMarketAppRoleUpdateOne) SetUpdateTime(dt date.DateTime) *AsMarketAppRoleUpdateOne {
	amaruo.mutation.SetUpdateTime(dt)
	return amaruo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (amaruo *AsMarketAppRoleUpdateOne) ClearUpdateTime() *AsMarketAppRoleUpdateOne {
	amaruo.mutation.ClearUpdateTime()
	return amaruo
}

// AddRoleDistribIDs adds the "roleDistribs" edge to the AsMarketRoleDistribution entity by IDs.
func (amaruo *AsMarketAppRoleUpdateOne) AddRoleDistribIDs(ids ...int64) *AsMarketAppRoleUpdateOne {
	amaruo.mutation.AddRoleDistribIDs(ids...)
	return amaruo
}

// AddRoleDistribs adds the "roleDistribs" edges to the AsMarketRoleDistribution entity.
func (amaruo *AsMarketAppRoleUpdateOne) AddRoleDistribs(a ...*AsMarketRoleDistribution) *AsMarketAppRoleUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amaruo.AddRoleDistribIDs(ids...)
}

// AddRoleMenuIDs adds the "roleMenus" edge to the AsMarketRoleMenu entity by IDs.
func (amaruo *AsMarketAppRoleUpdateOne) AddRoleMenuIDs(ids ...int64) *AsMarketAppRoleUpdateOne {
	amaruo.mutation.AddRoleMenuIDs(ids...)
	return amaruo
}

// AddRoleMenus adds the "roleMenus" edges to the AsMarketRoleMenu entity.
func (amaruo *AsMarketAppRoleUpdateOne) AddRoleMenus(a ...*AsMarketRoleMenu) *AsMarketAppRoleUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amaruo.AddRoleMenuIDs(ids...)
}

// AddMenuIDs adds the "menus" edge to the AsMarketMenu entity by IDs.
func (amaruo *AsMarketAppRoleUpdateOne) AddMenuIDs(ids ...int64) *AsMarketAppRoleUpdateOne {
	amaruo.mutation.AddMenuIDs(ids...)
	return amaruo
}

// AddMenus adds the "menus" edges to the AsMarketMenu entity.
func (amaruo *AsMarketAppRoleUpdateOne) AddMenus(a ...*AsMarketMenu) *AsMarketAppRoleUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amaruo.AddMenuIDs(ids...)
}

// SetAppxID sets the "appx" edge to the AsMarketApp entity by ID.
func (amaruo *AsMarketAppRoleUpdateOne) SetAppxID(id int64) *AsMarketAppRoleUpdateOne {
	amaruo.mutation.SetAppxID(id)
	return amaruo
}

// SetNillableAppxID sets the "appx" edge to the AsMarketApp entity by ID if the given value is not nil.
func (amaruo *AsMarketAppRoleUpdateOne) SetNillableAppxID(id *int64) *AsMarketAppRoleUpdateOne {
	if id != nil {
		amaruo = amaruo.SetAppxID(*id)
	}
	return amaruo
}

// SetAppx sets the "appx" edge to the AsMarketApp entity.
func (amaruo *AsMarketAppRoleUpdateOne) SetAppx(a *AsMarketApp) *AsMarketAppRoleUpdateOne {
	return amaruo.SetAppxID(a.ID)
}

// Mutation returns the AsMarketAppRoleMutation object of the builder.
func (amaruo *AsMarketAppRoleUpdateOne) Mutation() *AsMarketAppRoleMutation {
	return amaruo.mutation
}

// ClearRoleDistribs clears all "roleDistribs" edges to the AsMarketRoleDistribution entity.
func (amaruo *AsMarketAppRoleUpdateOne) ClearRoleDistribs() *AsMarketAppRoleUpdateOne {
	amaruo.mutation.ClearRoleDistribs()
	return amaruo
}

// RemoveRoleDistribIDs removes the "roleDistribs" edge to AsMarketRoleDistribution entities by IDs.
func (amaruo *AsMarketAppRoleUpdateOne) RemoveRoleDistribIDs(ids ...int64) *AsMarketAppRoleUpdateOne {
	amaruo.mutation.RemoveRoleDistribIDs(ids...)
	return amaruo
}

// RemoveRoleDistribs removes "roleDistribs" edges to AsMarketRoleDistribution entities.
func (amaruo *AsMarketAppRoleUpdateOne) RemoveRoleDistribs(a ...*AsMarketRoleDistribution) *AsMarketAppRoleUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amaruo.RemoveRoleDistribIDs(ids...)
}

// ClearRoleMenus clears all "roleMenus" edges to the AsMarketRoleMenu entity.
func (amaruo *AsMarketAppRoleUpdateOne) ClearRoleMenus() *AsMarketAppRoleUpdateOne {
	amaruo.mutation.ClearRoleMenus()
	return amaruo
}

// RemoveRoleMenuIDs removes the "roleMenus" edge to AsMarketRoleMenu entities by IDs.
func (amaruo *AsMarketAppRoleUpdateOne) RemoveRoleMenuIDs(ids ...int64) *AsMarketAppRoleUpdateOne {
	amaruo.mutation.RemoveRoleMenuIDs(ids...)
	return amaruo
}

// RemoveRoleMenus removes "roleMenus" edges to AsMarketRoleMenu entities.
func (amaruo *AsMarketAppRoleUpdateOne) RemoveRoleMenus(a ...*AsMarketRoleMenu) *AsMarketAppRoleUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amaruo.RemoveRoleMenuIDs(ids...)
}

// ClearMenus clears all "menus" edges to the AsMarketMenu entity.
func (amaruo *AsMarketAppRoleUpdateOne) ClearMenus() *AsMarketAppRoleUpdateOne {
	amaruo.mutation.ClearMenus()
	return amaruo
}

// RemoveMenuIDs removes the "menus" edge to AsMarketMenu entities by IDs.
func (amaruo *AsMarketAppRoleUpdateOne) RemoveMenuIDs(ids ...int64) *AsMarketAppRoleUpdateOne {
	amaruo.mutation.RemoveMenuIDs(ids...)
	return amaruo
}

// RemoveMenus removes "menus" edges to AsMarketMenu entities.
func (amaruo *AsMarketAppRoleUpdateOne) RemoveMenus(a ...*AsMarketMenu) *AsMarketAppRoleUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amaruo.RemoveMenuIDs(ids...)
}

// ClearAppx clears the "appx" edge to the AsMarketApp entity.
func (amaruo *AsMarketAppRoleUpdateOne) ClearAppx() *AsMarketAppRoleUpdateOne {
	amaruo.mutation.ClearAppx()
	return amaruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (amaruo *AsMarketAppRoleUpdateOne) Select(field string, fields ...string) *AsMarketAppRoleUpdateOne {
	amaruo.fields = append([]string{field}, fields...)
	return amaruo
}

// Save executes the query and returns the updated AsMarketAppRole entity.
func (amaruo *AsMarketAppRoleUpdateOne) Save(ctx context.Context) (*AsMarketAppRole, error) {
	var (
		err  error
		node *AsMarketAppRole
	)
	amaruo.defaults()
	if len(amaruo.hooks) == 0 {
		node, err = amaruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsMarketAppRoleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			amaruo.mutation = mutation
			node, err = amaruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(amaruo.hooks) - 1; i >= 0; i-- {
			if amaruo.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = amaruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, amaruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (amaruo *AsMarketAppRoleUpdateOne) SaveX(ctx context.Context) *AsMarketAppRole {
	node, err := amaruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (amaruo *AsMarketAppRoleUpdateOne) Exec(ctx context.Context) error {
	_, err := amaruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amaruo *AsMarketAppRoleUpdateOne) ExecX(ctx context.Context) {
	if err := amaruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amaruo *AsMarketAppRoleUpdateOne) defaults() {
	if _, ok := amaruo.mutation.UpdateTime(); !ok && !amaruo.mutation.UpdateTimeCleared() {
		v := asmarketapprole.UpdateDefaultUpdateTime()
		amaruo.mutation.SetUpdateTime(v)
	}
}

func (amaruo *AsMarketAppRoleUpdateOne) sqlSave(ctx context.Context) (_node *AsMarketAppRole, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asmarketapprole.Table,
			Columns: asmarketapprole.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asmarketapprole.FieldID,
			},
		},
	}
	id, ok := amaruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`schema: missing "AsMarketAppRole.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := amaruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asmarketapprole.FieldID)
		for _, f := range fields {
			if !asmarketapprole.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("schema: invalid field %q for query", f)}
			}
			if f != asmarketapprole.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := amaruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amaruo.mutation.RoleName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapprole.FieldRoleName,
		})
	}
	if amaruo.mutation.RoleNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketapprole.FieldRoleName,
		})
	}
	if value, ok := amaruo.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapprole.FieldIsDeleted,
		})
	}
	if value, ok := amaruo.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapprole.FieldIsDeleted,
		})
	}
	if value, ok := amaruo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapprole.FieldStatus,
		})
	}
	if value, ok := amaruo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapprole.FieldStatus,
		})
	}
	if amaruo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketapprole.FieldStatus,
		})
	}
	if value, ok := amaruo.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapprole.FieldCreateUser,
		})
	}
	if value, ok := amaruo.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapprole.FieldCreateUser,
		})
	}
	if amaruo.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketapprole.FieldCreateUser,
		})
	}
	if value, ok := amaruo.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapprole.FieldUpdateUser,
		})
	}
	if value, ok := amaruo.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapprole.FieldUpdateUser,
		})
	}
	if amaruo.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketapprole.FieldUpdateUser,
		})
	}
	if amaruo.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketapprole.FieldCreateTime,
		})
	}
	if value, ok := amaruo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketapprole.FieldUpdateTime,
		})
	}
	if amaruo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketapprole.FieldUpdateTime,
		})
	}
	if amaruo.mutation.RoleDistribsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapprole.RoleDistribsTable,
			Columns: []string{asmarketapprole.RoleDistribsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketroledistribution.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amaruo.mutation.RemovedRoleDistribsIDs(); len(nodes) > 0 && !amaruo.mutation.RoleDistribsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapprole.RoleDistribsTable,
			Columns: []string{asmarketapprole.RoleDistribsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketroledistribution.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amaruo.mutation.RoleDistribsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapprole.RoleDistribsTable,
			Columns: []string{asmarketapprole.RoleDistribsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketroledistribution.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amaruo.mutation.RoleMenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapprole.RoleMenusTable,
			Columns: []string{asmarketapprole.RoleMenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketrolemenu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amaruo.mutation.RemovedRoleMenusIDs(); len(nodes) > 0 && !amaruo.mutation.RoleMenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapprole.RoleMenusTable,
			Columns: []string{asmarketapprole.RoleMenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketrolemenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amaruo.mutation.RoleMenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapprole.RoleMenusTable,
			Columns: []string{asmarketapprole.RoleMenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketrolemenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amaruo.mutation.MenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asmarketapprole.MenusTable,
			Columns: asmarketapprole.MenusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketmenu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amaruo.mutation.RemovedMenusIDs(); len(nodes) > 0 && !amaruo.mutation.MenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asmarketapprole.MenusTable,
			Columns: asmarketapprole.MenusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amaruo.mutation.MenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asmarketapprole.MenusTable,
			Columns: asmarketapprole.MenusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amaruo.mutation.AppxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketapprole.AppxTable,
			Columns: []string{asmarketapprole.AppxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapp.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amaruo.mutation.AppxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketapprole.AppxTable,
			Columns: []string{asmarketapprole.AppxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapp.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AsMarketAppRole{config: amaruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, amaruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asmarketapprole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
