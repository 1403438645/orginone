// Code generated by entc, DO NOT EDIT.

package schema

import (
	"fmt"
	"orginone/common/schema/asrole"
	"orginone/common/schema/astenantattr"
	"orginone/common/schema/astenantattrrole"
	"orginone/common/tools/date"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// AsTenantAttrRole is the model entity for the AsTenantAttrRole schema.
type AsTenantAttrRole struct {
	config `json:"-"`
	// ID of the ent.
	// 主键
	ID int64 `json:"id,string"`
	// AttrID holds the value of the "attr_id" field.
	// 租户特性ID
	AttrID int64 `json:"attrId"`
	// RoleID holds the value of the "role_id" field.
	// 角色ID
	RoleID int64 `json:"roleId"`
	// IsDefault holds the value of the "is_default" field.
	// 是否为默认角色;1-为默认,
	IsDefault int64 `json:"isDefault"`
	// IsDeleted holds the value of the "is_deleted" field.
	// 是否被删除
	IsDeleted int64 `json:"isDeleted"`
	// Status holds the value of the "status" field.
	// 状态
	Status int64 `json:"status"`
	// CreateUser holds the value of the "create_user" field.
	// 创建用户
	CreateUser int64 `json:"createUser"`
	// UpdateUser holds the value of the "update_user" field.
	// 更新用户
	UpdateUser int64 `json:"updateUser"`
	// CreateTime holds the value of the "create_time" field.
	// 创建时间
	CreateTime date.DateTime `json:"createTime"`
	// UpdateTime holds the value of the "update_time" field.
	// 更新时间
	UpdateTime date.DateTime `json:"updateTime"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AsTenantAttrRoleQuery when eager-loading is set.
	Edges AsTenantAttrRoleEdges `json:"edges"`
}

// AsTenantAttrRoleEdges holds the relations/edges for other nodes in the graph.
type AsTenantAttrRoleEdges struct {
	// TenantAttrx holds the value of the tenantAttrx edge.
	TenantAttrx *AsTenantAttr `json:"tenantattrx"`
	// Rolex holds the value of the rolex edge.
	Rolex *AsRole `json:"rolex"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TenantAttrxOrErr returns the TenantAttrx value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AsTenantAttrRoleEdges) TenantAttrxOrErr() (*AsTenantAttr, error) {
	if e.loadedTypes[0] {
		if e.TenantAttrx == nil {
			// The edge tenantAttrx was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: astenantattr.Label}
		}
		return e.TenantAttrx, nil
	}
	return nil, &NotLoadedError{edge: "tenantAttrx"}
}

// RolexOrErr returns the Rolex value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AsTenantAttrRoleEdges) RolexOrErr() (*AsRole, error) {
	if e.loadedTypes[1] {
		if e.Rolex == nil {
			// The edge rolex was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: asrole.Label}
		}
		return e.Rolex, nil
	}
	return nil, &NotLoadedError{edge: "rolex"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AsTenantAttrRole) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case astenantattrrole.FieldID, astenantattrrole.FieldAttrID, astenantattrrole.FieldRoleID, astenantattrrole.FieldIsDefault, astenantattrrole.FieldIsDeleted, astenantattrrole.FieldStatus, astenantattrrole.FieldCreateUser, astenantattrrole.FieldUpdateUser:
			values[i] = new(sql.NullInt64)
		case astenantattrrole.FieldCreateTime, astenantattrrole.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AsTenantAttrRole", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AsTenantAttrRole fields.
func (atar *AsTenantAttrRole) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case astenantattrrole.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			atar.ID = int64(value.Int64)
		case astenantattrrole.FieldAttrID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field attr_id", values[i])
			} else if value.Valid {
				atar.AttrID = value.Int64
			}
		case astenantattrrole.FieldRoleID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field role_id", values[i])
			} else if value.Valid {
				atar.RoleID = value.Int64
			}
		case astenantattrrole.FieldIsDefault:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_default", values[i])
			} else if value.Valid {
				atar.IsDefault = value.Int64
			}
		case astenantattrrole.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				atar.IsDeleted = value.Int64
			}
		case astenantattrrole.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				atar.Status = value.Int64
			}
		case astenantattrrole.FieldCreateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_user", values[i])
			} else if value.Valid {
				atar.CreateUser = value.Int64
			}
		case astenantattrrole.FieldUpdateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_user", values[i])
			} else if value.Valid {
				atar.UpdateUser = value.Int64
			}
		case astenantattrrole.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				atar.CreateTime = date.DateTime(value.Time)
			}
		case astenantattrrole.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				atar.UpdateTime = date.DateTime(value.Time)
			}
		}
	}
	return nil
}

// QueryTenantAttrx queries the "tenantAttrx" edge of the AsTenantAttrRole entity.
func (atar *AsTenantAttrRole) QueryTenantAttrx() *AsTenantAttrQuery {
	return (&AsTenantAttrRoleClient{config: atar.config}).QueryTenantAttrx(atar)
}

// QueryRolex queries the "rolex" edge of the AsTenantAttrRole entity.
func (atar *AsTenantAttrRole) QueryRolex() *AsRoleQuery {
	return (&AsTenantAttrRoleClient{config: atar.config}).QueryRolex(atar)
}

// Update returns a builder for updating this AsTenantAttrRole.
// Note that you need to call AsTenantAttrRole.Unwrap() before calling this method if this AsTenantAttrRole
// was returned from a transaction, and the transaction was committed or rolled back.
func (atar *AsTenantAttrRole) Update() *AsTenantAttrRoleUpdateOne {
	return (&AsTenantAttrRoleClient{config: atar.config}).UpdateOne(atar)
}

// Unwrap unwraps the AsTenantAttrRole entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (atar *AsTenantAttrRole) Unwrap() *AsTenantAttrRole {
	tx, ok := atar.config.driver.(*txDriver)
	if !ok {
		panic("schema: AsTenantAttrRole is not a transactional entity")
	}
	atar.config.driver = tx.drv
	return atar
}

// String implements the fmt.Stringer.
func (atar *AsTenantAttrRole) String() string {
	var builder strings.Builder
	builder.WriteString("AsTenantAttrRole(")
	builder.WriteString(fmt.Sprintf("id=%v", atar.ID))
	builder.WriteString(", attr_id=")
	builder.WriteString(fmt.Sprintf("%v", atar.AttrID))
	builder.WriteString(", role_id=")
	builder.WriteString(fmt.Sprintf("%v", atar.RoleID))
	builder.WriteString(", is_default=")
	builder.WriteString(fmt.Sprintf("%v", atar.IsDefault))
	builder.WriteString(", is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", atar.IsDeleted))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", atar.Status))
	builder.WriteString(", create_user=")
	builder.WriteString(fmt.Sprintf("%v", atar.CreateUser))
	builder.WriteString(", update_user=")
	builder.WriteString(fmt.Sprintf("%v", atar.UpdateUser))
	builder.WriteString(", create_time=")
	builder.WriteString(fmt.Sprintf("%v", atar.CreateTime))
	builder.WriteString(", update_time=")
	builder.WriteString(fmt.Sprintf("%v", atar.UpdateTime))
	builder.WriteByte(')')
	return builder.String()
}

// AsTenantAttrRoles is a parsable slice of AsTenantAttrRole.
type AsTenantAttrRoles []*AsTenantAttrRole

func (atar AsTenantAttrRoles) config(cfg config) {
	for _i := range atar {
		atar[_i].config = cfg
	}
}
