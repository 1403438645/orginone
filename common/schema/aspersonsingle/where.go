// Code generated by entc, DO NOT EDIT.

package aspersonsingle

import (
	"orginone/common/schema/predicate"
	"orginone/common/tools/date"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// RealName applies equality check predicate on the "real_name" field. It's identical to RealNameEQ.
func RealName(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRealName), v))
	})
}

// IDCard applies equality check predicate on the "id_card" field. It's identical to IDCardEQ.
func IDCard(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIDCard), v))
	})
}

// Gender applies equality check predicate on the "gender" field. It's identical to GenderEQ.
func Gender(v int64) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGender), v))
	})
}

// UserBirthday applies equality check predicate on the "user_birthday" field. It's identical to UserBirthdayEQ.
func UserBirthday(v date.DateTime) predicate.AsPersonSingle {
	vc := time.Time(v)
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserBirthday), vc))
	})
}

// UserEmail applies equality check predicate on the "user_email" field. It's identical to UserEmailEQ.
func UserEmail(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserEmail), v))
	})
}

// UserPhoto applies equality check predicate on the "user_photo" field. It's identical to UserPhotoEQ.
func UserPhoto(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserPhoto), v))
	})
}

// PhoneNumber applies equality check predicate on the "phone_number" field. It's identical to PhoneNumberEQ.
func PhoneNumber(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhoneNumber), v))
	})
}

// Province applies equality check predicate on the "province" field. It's identical to ProvinceEQ.
func Province(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProvince), v))
	})
}

// City applies equality check predicate on the "city" field. It's identical to CityEQ.
func City(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCity), v))
	})
}

// StreetAddress applies equality check predicate on the "street_address" field. It's identical to StreetAddressEQ.
func StreetAddress(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStreetAddress), v))
	})
}

// IsDeleted applies equality check predicate on the "is_deleted" field. It's identical to IsDeletedEQ.
func IsDeleted(v int64) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDeleted), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int64) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// CreateUser applies equality check predicate on the "create_user" field. It's identical to CreateUserEQ.
func CreateUser(v int64) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateUser), v))
	})
}

// UpdateUser applies equality check predicate on the "update_user" field. It's identical to UpdateUserEQ.
func UpdateUser(v int64) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateUser), v))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v date.DateTime) predicate.AsPersonSingle {
	vc := time.Time(v)
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), vc))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v date.DateTime) predicate.AsPersonSingle {
	vc := time.Time(v)
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), vc))
	})
}

// RealNameEQ applies the EQ predicate on the "real_name" field.
func RealNameEQ(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRealName), v))
	})
}

// RealNameNEQ applies the NEQ predicate on the "real_name" field.
func RealNameNEQ(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRealName), v))
	})
}

// RealNameIn applies the In predicate on the "real_name" field.
func RealNameIn(vs ...string) predicate.AsPersonSingle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRealName), v...))
	})
}

// RealNameNotIn applies the NotIn predicate on the "real_name" field.
func RealNameNotIn(vs ...string) predicate.AsPersonSingle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRealName), v...))
	})
}

// RealNameGT applies the GT predicate on the "real_name" field.
func RealNameGT(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRealName), v))
	})
}

// RealNameGTE applies the GTE predicate on the "real_name" field.
func RealNameGTE(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRealName), v))
	})
}

// RealNameLT applies the LT predicate on the "real_name" field.
func RealNameLT(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRealName), v))
	})
}

// RealNameLTE applies the LTE predicate on the "real_name" field.
func RealNameLTE(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRealName), v))
	})
}

// RealNameContains applies the Contains predicate on the "real_name" field.
func RealNameContains(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRealName), v))
	})
}

// RealNameHasPrefix applies the HasPrefix predicate on the "real_name" field.
func RealNameHasPrefix(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRealName), v))
	})
}

// RealNameHasSuffix applies the HasSuffix predicate on the "real_name" field.
func RealNameHasSuffix(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRealName), v))
	})
}

// RealNameEqualFold applies the EqualFold predicate on the "real_name" field.
func RealNameEqualFold(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRealName), v))
	})
}

// RealNameContainsFold applies the ContainsFold predicate on the "real_name" field.
func RealNameContainsFold(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRealName), v))
	})
}

// IDCardEQ applies the EQ predicate on the "id_card" field.
func IDCardEQ(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIDCard), v))
	})
}

// IDCardNEQ applies the NEQ predicate on the "id_card" field.
func IDCardNEQ(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIDCard), v))
	})
}

// IDCardIn applies the In predicate on the "id_card" field.
func IDCardIn(vs ...string) predicate.AsPersonSingle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIDCard), v...))
	})
}

// IDCardNotIn applies the NotIn predicate on the "id_card" field.
func IDCardNotIn(vs ...string) predicate.AsPersonSingle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIDCard), v...))
	})
}

// IDCardGT applies the GT predicate on the "id_card" field.
func IDCardGT(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIDCard), v))
	})
}

// IDCardGTE applies the GTE predicate on the "id_card" field.
func IDCardGTE(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIDCard), v))
	})
}

// IDCardLT applies the LT predicate on the "id_card" field.
func IDCardLT(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIDCard), v))
	})
}

// IDCardLTE applies the LTE predicate on the "id_card" field.
func IDCardLTE(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIDCard), v))
	})
}

// IDCardContains applies the Contains predicate on the "id_card" field.
func IDCardContains(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIDCard), v))
	})
}

// IDCardHasPrefix applies the HasPrefix predicate on the "id_card" field.
func IDCardHasPrefix(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIDCard), v))
	})
}

// IDCardHasSuffix applies the HasSuffix predicate on the "id_card" field.
func IDCardHasSuffix(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIDCard), v))
	})
}

// IDCardIsNil applies the IsNil predicate on the "id_card" field.
func IDCardIsNil() predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIDCard)))
	})
}

// IDCardNotNil applies the NotNil predicate on the "id_card" field.
func IDCardNotNil() predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIDCard)))
	})
}

// IDCardEqualFold applies the EqualFold predicate on the "id_card" field.
func IDCardEqualFold(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIDCard), v))
	})
}

// IDCardContainsFold applies the ContainsFold predicate on the "id_card" field.
func IDCardContainsFold(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIDCard), v))
	})
}

// GenderEQ applies the EQ predicate on the "gender" field.
func GenderEQ(v int64) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGender), v))
	})
}

// GenderNEQ applies the NEQ predicate on the "gender" field.
func GenderNEQ(v int64) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGender), v))
	})
}

// GenderIn applies the In predicate on the "gender" field.
func GenderIn(vs ...int64) predicate.AsPersonSingle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGender), v...))
	})
}

// GenderNotIn applies the NotIn predicate on the "gender" field.
func GenderNotIn(vs ...int64) predicate.AsPersonSingle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGender), v...))
	})
}

// GenderGT applies the GT predicate on the "gender" field.
func GenderGT(v int64) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGender), v))
	})
}

// GenderGTE applies the GTE predicate on the "gender" field.
func GenderGTE(v int64) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGender), v))
	})
}

// GenderLT applies the LT predicate on the "gender" field.
func GenderLT(v int64) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGender), v))
	})
}

// GenderLTE applies the LTE predicate on the "gender" field.
func GenderLTE(v int64) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGender), v))
	})
}

// GenderIsNil applies the IsNil predicate on the "gender" field.
func GenderIsNil() predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldGender)))
	})
}

// GenderNotNil applies the NotNil predicate on the "gender" field.
func GenderNotNil() predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldGender)))
	})
}

// UserBirthdayEQ applies the EQ predicate on the "user_birthday" field.
func UserBirthdayEQ(v date.DateTime) predicate.AsPersonSingle {
	vc := time.Time(v)
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserBirthday), vc))
	})
}

// UserBirthdayNEQ applies the NEQ predicate on the "user_birthday" field.
func UserBirthdayNEQ(v date.DateTime) predicate.AsPersonSingle {
	vc := time.Time(v)
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserBirthday), vc))
	})
}

// UserBirthdayIn applies the In predicate on the "user_birthday" field.
func UserBirthdayIn(vs ...date.DateTime) predicate.AsPersonSingle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserBirthday), v...))
	})
}

// UserBirthdayNotIn applies the NotIn predicate on the "user_birthday" field.
func UserBirthdayNotIn(vs ...date.DateTime) predicate.AsPersonSingle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserBirthday), v...))
	})
}

// UserBirthdayGT applies the GT predicate on the "user_birthday" field.
func UserBirthdayGT(v date.DateTime) predicate.AsPersonSingle {
	vc := time.Time(v)
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserBirthday), vc))
	})
}

// UserBirthdayGTE applies the GTE predicate on the "user_birthday" field.
func UserBirthdayGTE(v date.DateTime) predicate.AsPersonSingle {
	vc := time.Time(v)
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserBirthday), vc))
	})
}

// UserBirthdayLT applies the LT predicate on the "user_birthday" field.
func UserBirthdayLT(v date.DateTime) predicate.AsPersonSingle {
	vc := time.Time(v)
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserBirthday), vc))
	})
}

// UserBirthdayLTE applies the LTE predicate on the "user_birthday" field.
func UserBirthdayLTE(v date.DateTime) predicate.AsPersonSingle {
	vc := time.Time(v)
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserBirthday), vc))
	})
}

// UserBirthdayIsNil applies the IsNil predicate on the "user_birthday" field.
func UserBirthdayIsNil() predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserBirthday)))
	})
}

// UserBirthdayNotNil applies the NotNil predicate on the "user_birthday" field.
func UserBirthdayNotNil() predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserBirthday)))
	})
}

// UserEmailEQ applies the EQ predicate on the "user_email" field.
func UserEmailEQ(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserEmail), v))
	})
}

// UserEmailNEQ applies the NEQ predicate on the "user_email" field.
func UserEmailNEQ(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserEmail), v))
	})
}

// UserEmailIn applies the In predicate on the "user_email" field.
func UserEmailIn(vs ...string) predicate.AsPersonSingle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserEmail), v...))
	})
}

// UserEmailNotIn applies the NotIn predicate on the "user_email" field.
func UserEmailNotIn(vs ...string) predicate.AsPersonSingle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserEmail), v...))
	})
}

// UserEmailGT applies the GT predicate on the "user_email" field.
func UserEmailGT(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserEmail), v))
	})
}

// UserEmailGTE applies the GTE predicate on the "user_email" field.
func UserEmailGTE(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserEmail), v))
	})
}

// UserEmailLT applies the LT predicate on the "user_email" field.
func UserEmailLT(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserEmail), v))
	})
}

// UserEmailLTE applies the LTE predicate on the "user_email" field.
func UserEmailLTE(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserEmail), v))
	})
}

// UserEmailContains applies the Contains predicate on the "user_email" field.
func UserEmailContains(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUserEmail), v))
	})
}

// UserEmailHasPrefix applies the HasPrefix predicate on the "user_email" field.
func UserEmailHasPrefix(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUserEmail), v))
	})
}

// UserEmailHasSuffix applies the HasSuffix predicate on the "user_email" field.
func UserEmailHasSuffix(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUserEmail), v))
	})
}

// UserEmailIsNil applies the IsNil predicate on the "user_email" field.
func UserEmailIsNil() predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserEmail)))
	})
}

// UserEmailNotNil applies the NotNil predicate on the "user_email" field.
func UserEmailNotNil() predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserEmail)))
	})
}

// UserEmailEqualFold applies the EqualFold predicate on the "user_email" field.
func UserEmailEqualFold(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUserEmail), v))
	})
}

// UserEmailContainsFold applies the ContainsFold predicate on the "user_email" field.
func UserEmailContainsFold(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUserEmail), v))
	})
}

// UserPhotoEQ applies the EQ predicate on the "user_photo" field.
func UserPhotoEQ(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserPhoto), v))
	})
}

// UserPhotoNEQ applies the NEQ predicate on the "user_photo" field.
func UserPhotoNEQ(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserPhoto), v))
	})
}

// UserPhotoIn applies the In predicate on the "user_photo" field.
func UserPhotoIn(vs ...string) predicate.AsPersonSingle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserPhoto), v...))
	})
}

// UserPhotoNotIn applies the NotIn predicate on the "user_photo" field.
func UserPhotoNotIn(vs ...string) predicate.AsPersonSingle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserPhoto), v...))
	})
}

// UserPhotoGT applies the GT predicate on the "user_photo" field.
func UserPhotoGT(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserPhoto), v))
	})
}

// UserPhotoGTE applies the GTE predicate on the "user_photo" field.
func UserPhotoGTE(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserPhoto), v))
	})
}

// UserPhotoLT applies the LT predicate on the "user_photo" field.
func UserPhotoLT(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserPhoto), v))
	})
}

// UserPhotoLTE applies the LTE predicate on the "user_photo" field.
func UserPhotoLTE(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserPhoto), v))
	})
}

// UserPhotoContains applies the Contains predicate on the "user_photo" field.
func UserPhotoContains(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUserPhoto), v))
	})
}

// UserPhotoHasPrefix applies the HasPrefix predicate on the "user_photo" field.
func UserPhotoHasPrefix(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUserPhoto), v))
	})
}

// UserPhotoHasSuffix applies the HasSuffix predicate on the "user_photo" field.
func UserPhotoHasSuffix(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUserPhoto), v))
	})
}

// UserPhotoIsNil applies the IsNil predicate on the "user_photo" field.
func UserPhotoIsNil() predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserPhoto)))
	})
}

// UserPhotoNotNil applies the NotNil predicate on the "user_photo" field.
func UserPhotoNotNil() predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserPhoto)))
	})
}

// UserPhotoEqualFold applies the EqualFold predicate on the "user_photo" field.
func UserPhotoEqualFold(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUserPhoto), v))
	})
}

// UserPhotoContainsFold applies the ContainsFold predicate on the "user_photo" field.
func UserPhotoContainsFold(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUserPhoto), v))
	})
}

// PhoneNumberEQ applies the EQ predicate on the "phone_number" field.
func PhoneNumberEQ(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberNEQ applies the NEQ predicate on the "phone_number" field.
func PhoneNumberNEQ(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberIn applies the In predicate on the "phone_number" field.
func PhoneNumberIn(vs ...string) predicate.AsPersonSingle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPhoneNumber), v...))
	})
}

// PhoneNumberNotIn applies the NotIn predicate on the "phone_number" field.
func PhoneNumberNotIn(vs ...string) predicate.AsPersonSingle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPhoneNumber), v...))
	})
}

// PhoneNumberGT applies the GT predicate on the "phone_number" field.
func PhoneNumberGT(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberGTE applies the GTE predicate on the "phone_number" field.
func PhoneNumberGTE(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberLT applies the LT predicate on the "phone_number" field.
func PhoneNumberLT(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberLTE applies the LTE predicate on the "phone_number" field.
func PhoneNumberLTE(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberContains applies the Contains predicate on the "phone_number" field.
func PhoneNumberContains(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberHasPrefix applies the HasPrefix predicate on the "phone_number" field.
func PhoneNumberHasPrefix(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberHasSuffix applies the HasSuffix predicate on the "phone_number" field.
func PhoneNumberHasSuffix(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberEqualFold applies the EqualFold predicate on the "phone_number" field.
func PhoneNumberEqualFold(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberContainsFold applies the ContainsFold predicate on the "phone_number" field.
func PhoneNumberContainsFold(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPhoneNumber), v))
	})
}

// ProvinceEQ applies the EQ predicate on the "province" field.
func ProvinceEQ(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProvince), v))
	})
}

// ProvinceNEQ applies the NEQ predicate on the "province" field.
func ProvinceNEQ(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProvince), v))
	})
}

// ProvinceIn applies the In predicate on the "province" field.
func ProvinceIn(vs ...string) predicate.AsPersonSingle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProvince), v...))
	})
}

// ProvinceNotIn applies the NotIn predicate on the "province" field.
func ProvinceNotIn(vs ...string) predicate.AsPersonSingle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProvince), v...))
	})
}

// ProvinceGT applies the GT predicate on the "province" field.
func ProvinceGT(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProvince), v))
	})
}

// ProvinceGTE applies the GTE predicate on the "province" field.
func ProvinceGTE(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProvince), v))
	})
}

// ProvinceLT applies the LT predicate on the "province" field.
func ProvinceLT(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProvince), v))
	})
}

// ProvinceLTE applies the LTE predicate on the "province" field.
func ProvinceLTE(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProvince), v))
	})
}

// ProvinceContains applies the Contains predicate on the "province" field.
func ProvinceContains(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProvince), v))
	})
}

// ProvinceHasPrefix applies the HasPrefix predicate on the "province" field.
func ProvinceHasPrefix(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProvince), v))
	})
}

// ProvinceHasSuffix applies the HasSuffix predicate on the "province" field.
func ProvinceHasSuffix(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProvince), v))
	})
}

// ProvinceIsNil applies the IsNil predicate on the "province" field.
func ProvinceIsNil() predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProvince)))
	})
}

// ProvinceNotNil applies the NotNil predicate on the "province" field.
func ProvinceNotNil() predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProvince)))
	})
}

// ProvinceEqualFold applies the EqualFold predicate on the "province" field.
func ProvinceEqualFold(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProvince), v))
	})
}

// ProvinceContainsFold applies the ContainsFold predicate on the "province" field.
func ProvinceContainsFold(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProvince), v))
	})
}

// CityEQ applies the EQ predicate on the "city" field.
func CityEQ(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCity), v))
	})
}

// CityNEQ applies the NEQ predicate on the "city" field.
func CityNEQ(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCity), v))
	})
}

// CityIn applies the In predicate on the "city" field.
func CityIn(vs ...string) predicate.AsPersonSingle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCity), v...))
	})
}

// CityNotIn applies the NotIn predicate on the "city" field.
func CityNotIn(vs ...string) predicate.AsPersonSingle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCity), v...))
	})
}

// CityGT applies the GT predicate on the "city" field.
func CityGT(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCity), v))
	})
}

// CityGTE applies the GTE predicate on the "city" field.
func CityGTE(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCity), v))
	})
}

// CityLT applies the LT predicate on the "city" field.
func CityLT(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCity), v))
	})
}

// CityLTE applies the LTE predicate on the "city" field.
func CityLTE(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCity), v))
	})
}

// CityContains applies the Contains predicate on the "city" field.
func CityContains(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCity), v))
	})
}

// CityHasPrefix applies the HasPrefix predicate on the "city" field.
func CityHasPrefix(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCity), v))
	})
}

// CityHasSuffix applies the HasSuffix predicate on the "city" field.
func CityHasSuffix(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCity), v))
	})
}

// CityIsNil applies the IsNil predicate on the "city" field.
func CityIsNil() predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCity)))
	})
}

// CityNotNil applies the NotNil predicate on the "city" field.
func CityNotNil() predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCity)))
	})
}

// CityEqualFold applies the EqualFold predicate on the "city" field.
func CityEqualFold(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCity), v))
	})
}

// CityContainsFold applies the ContainsFold predicate on the "city" field.
func CityContainsFold(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCity), v))
	})
}

// StreetAddressEQ applies the EQ predicate on the "street_address" field.
func StreetAddressEQ(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStreetAddress), v))
	})
}

// StreetAddressNEQ applies the NEQ predicate on the "street_address" field.
func StreetAddressNEQ(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStreetAddress), v))
	})
}

// StreetAddressIn applies the In predicate on the "street_address" field.
func StreetAddressIn(vs ...string) predicate.AsPersonSingle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStreetAddress), v...))
	})
}

// StreetAddressNotIn applies the NotIn predicate on the "street_address" field.
func StreetAddressNotIn(vs ...string) predicate.AsPersonSingle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStreetAddress), v...))
	})
}

// StreetAddressGT applies the GT predicate on the "street_address" field.
func StreetAddressGT(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStreetAddress), v))
	})
}

// StreetAddressGTE applies the GTE predicate on the "street_address" field.
func StreetAddressGTE(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStreetAddress), v))
	})
}

// StreetAddressLT applies the LT predicate on the "street_address" field.
func StreetAddressLT(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStreetAddress), v))
	})
}

// StreetAddressLTE applies the LTE predicate on the "street_address" field.
func StreetAddressLTE(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStreetAddress), v))
	})
}

// StreetAddressContains applies the Contains predicate on the "street_address" field.
func StreetAddressContains(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStreetAddress), v))
	})
}

// StreetAddressHasPrefix applies the HasPrefix predicate on the "street_address" field.
func StreetAddressHasPrefix(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStreetAddress), v))
	})
}

// StreetAddressHasSuffix applies the HasSuffix predicate on the "street_address" field.
func StreetAddressHasSuffix(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStreetAddress), v))
	})
}

// StreetAddressIsNil applies the IsNil predicate on the "street_address" field.
func StreetAddressIsNil() predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStreetAddress)))
	})
}

// StreetAddressNotNil applies the NotNil predicate on the "street_address" field.
func StreetAddressNotNil() predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStreetAddress)))
	})
}

// StreetAddressEqualFold applies the EqualFold predicate on the "street_address" field.
func StreetAddressEqualFold(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStreetAddress), v))
	})
}

// StreetAddressContainsFold applies the ContainsFold predicate on the "street_address" field.
func StreetAddressContainsFold(v string) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStreetAddress), v))
	})
}

// IsDeletedEQ applies the EQ predicate on the "is_deleted" field.
func IsDeletedEQ(v int64) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedNEQ applies the NEQ predicate on the "is_deleted" field.
func IsDeletedNEQ(v int64) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedIn applies the In predicate on the "is_deleted" field.
func IsDeletedIn(vs ...int64) predicate.AsPersonSingle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsDeleted), v...))
	})
}

// IsDeletedNotIn applies the NotIn predicate on the "is_deleted" field.
func IsDeletedNotIn(vs ...int64) predicate.AsPersonSingle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsDeleted), v...))
	})
}

// IsDeletedGT applies the GT predicate on the "is_deleted" field.
func IsDeletedGT(v int64) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedGTE applies the GTE predicate on the "is_deleted" field.
func IsDeletedGTE(v int64) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedLT applies the LT predicate on the "is_deleted" field.
func IsDeletedLT(v int64) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedLTE applies the LTE predicate on the "is_deleted" field.
func IsDeletedLTE(v int64) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsDeleted), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int64) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int64) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int64) predicate.AsPersonSingle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int64) predicate.AsPersonSingle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int64) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int64) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int64) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int64) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStatus)))
	})
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStatus)))
	})
}

// CreateUserEQ applies the EQ predicate on the "create_user" field.
func CreateUserEQ(v int64) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateUser), v))
	})
}

// CreateUserNEQ applies the NEQ predicate on the "create_user" field.
func CreateUserNEQ(v int64) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateUser), v))
	})
}

// CreateUserIn applies the In predicate on the "create_user" field.
func CreateUserIn(vs ...int64) predicate.AsPersonSingle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateUser), v...))
	})
}

// CreateUserNotIn applies the NotIn predicate on the "create_user" field.
func CreateUserNotIn(vs ...int64) predicate.AsPersonSingle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateUser), v...))
	})
}

// CreateUserGT applies the GT predicate on the "create_user" field.
func CreateUserGT(v int64) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateUser), v))
	})
}

// CreateUserGTE applies the GTE predicate on the "create_user" field.
func CreateUserGTE(v int64) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateUser), v))
	})
}

// CreateUserLT applies the LT predicate on the "create_user" field.
func CreateUserLT(v int64) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateUser), v))
	})
}

// CreateUserLTE applies the LTE predicate on the "create_user" field.
func CreateUserLTE(v int64) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateUser), v))
	})
}

// CreateUserIsNil applies the IsNil predicate on the "create_user" field.
func CreateUserIsNil() predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreateUser)))
	})
}

// CreateUserNotNil applies the NotNil predicate on the "create_user" field.
func CreateUserNotNil() predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreateUser)))
	})
}

// UpdateUserEQ applies the EQ predicate on the "update_user" field.
func UpdateUserEQ(v int64) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserNEQ applies the NEQ predicate on the "update_user" field.
func UpdateUserNEQ(v int64) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserIn applies the In predicate on the "update_user" field.
func UpdateUserIn(vs ...int64) predicate.AsPersonSingle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateUser), v...))
	})
}

// UpdateUserNotIn applies the NotIn predicate on the "update_user" field.
func UpdateUserNotIn(vs ...int64) predicate.AsPersonSingle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateUser), v...))
	})
}

// UpdateUserGT applies the GT predicate on the "update_user" field.
func UpdateUserGT(v int64) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserGTE applies the GTE predicate on the "update_user" field.
func UpdateUserGTE(v int64) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserLT applies the LT predicate on the "update_user" field.
func UpdateUserLT(v int64) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserLTE applies the LTE predicate on the "update_user" field.
func UpdateUserLTE(v int64) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserIsNil applies the IsNil predicate on the "update_user" field.
func UpdateUserIsNil() predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdateUser)))
	})
}

// UpdateUserNotNil applies the NotNil predicate on the "update_user" field.
func UpdateUserNotNil() predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdateUser)))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v date.DateTime) predicate.AsPersonSingle {
	vc := time.Time(v)
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v date.DateTime) predicate.AsPersonSingle {
	vc := time.Time(v)
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...date.DateTime) predicate.AsPersonSingle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...date.DateTime) predicate.AsPersonSingle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v date.DateTime) predicate.AsPersonSingle {
	vc := time.Time(v)
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v date.DateTime) predicate.AsPersonSingle {
	vc := time.Time(v)
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v date.DateTime) predicate.AsPersonSingle {
	vc := time.Time(v)
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v date.DateTime) predicate.AsPersonSingle {
	vc := time.Time(v)
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeIsNil applies the IsNil predicate on the "create_time" field.
func CreateTimeIsNil() predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreateTime)))
	})
}

// CreateTimeNotNil applies the NotNil predicate on the "create_time" field.
func CreateTimeNotNil() predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreateTime)))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v date.DateTime) predicate.AsPersonSingle {
	vc := time.Time(v)
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v date.DateTime) predicate.AsPersonSingle {
	vc := time.Time(v)
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...date.DateTime) predicate.AsPersonSingle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...date.DateTime) predicate.AsPersonSingle {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v date.DateTime) predicate.AsPersonSingle {
	vc := time.Time(v)
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v date.DateTime) predicate.AsPersonSingle {
	vc := time.Time(v)
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v date.DateTime) predicate.AsPersonSingle {
	vc := time.Time(v)
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v date.DateTime) predicate.AsPersonSingle {
	vc := time.Time(v)
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeIsNil applies the IsNil predicate on the "update_time" field.
func UpdateTimeIsNil() predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdateTime)))
	})
}

// UpdateTimeNotNil applies the NotNil predicate on the "update_time" field.
func UpdateTimeNotNil() predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdateTime)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AsPersonSingle) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AsPersonSingle) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AsPersonSingle) predicate.AsPersonSingle {
	return predicate.AsPersonSingle(func(s *sql.Selector) {
		p(s.Not())
	})
}
