// Code generated by entc, DO NOT EDIT.

package schema

import (
	"fmt"
	"orginone/common/schema/asmarketappnotice"
	"orginone/common/tools/date"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// AsMarketAppNotice is the model entity for the AsMarketAppNotice schema.
type AsMarketAppNotice struct {
	config `json:"-"`
	// ID of the ent.
	// 主键
	ID int64 `json:"id,string"`
	// NoticeTitle holds the value of the "notice_title" field.
	// 标题
	NoticeTitle string `json:"noticeTitle"`
	// NoticeContent holds the value of the "notice_content" field.
	// 内容
	NoticeContent string `json:"noticeContent"`
	// NoticeReleaseUnitID holds the value of the "notice_release_unit_id" field.
	// 发布方
	NoticeReleaseUnitID int64 `json:"noticeReleaseUnitId"`
	// NoticeReleaseStatus holds the value of the "notice_release_status" field.
	// 发布状态
	NoticeReleaseStatus int64 `json:"noticeReleaseStatus"`
	// NoticeReleaseTime holds the value of the "notice_release_time" field.
	// 发布时间
	NoticeReleaseTime date.DateTime `json:"noticeReleaseTime"`
	// NoticeRoleIds holds the value of the "notice_role_ids" field.
	// 发布对象角色
	NoticeRoleIds string `json:"noticeRoleIds"`
	// NoticeUnitIds holds the value of the "notice_unit_ids" field.
	// 发布对象单位
	NoticeUnitIds string `json:"noticeUnitIds"`
	// GroupOrUnit holds the value of the "group_or_unit" field.
	// 集团或单位
	GroupOrUnit int64 `json:"groupOrUnit"`
	// UnitQueryIds holds the value of the "unit_query_ids" field.
	// 单位ids用于查询
	UnitQueryIds string `json:"unitQueryIds"`
	// IsDeleted holds the value of the "is_deleted" field.
	// 是否被删除
	IsDeleted int64 `json:"isDeleted"`
	// Status holds the value of the "status" field.
	// 状态
	Status int64 `json:"status"`
	// CreateUser holds the value of the "create_user" field.
	// 创建用户
	CreateUser int64 `json:"createUser"`
	// UpdateUser holds the value of the "update_user" field.
	// 更新用户
	UpdateUser int64 `json:"updateUser"`
	// CreateTime holds the value of the "create_time" field.
	// 创建时间
	CreateTime date.DateTime `json:"createTime"`
	// UpdateTime holds the value of the "update_time" field.
	// 更新时间
	UpdateTime date.DateTime `json:"updateTime"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AsMarketAppNotice) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case asmarketappnotice.FieldID, asmarketappnotice.FieldNoticeReleaseUnitID, asmarketappnotice.FieldNoticeReleaseStatus, asmarketappnotice.FieldGroupOrUnit, asmarketappnotice.FieldIsDeleted, asmarketappnotice.FieldStatus, asmarketappnotice.FieldCreateUser, asmarketappnotice.FieldUpdateUser:
			values[i] = new(sql.NullInt64)
		case asmarketappnotice.FieldNoticeTitle, asmarketappnotice.FieldNoticeContent, asmarketappnotice.FieldNoticeRoleIds, asmarketappnotice.FieldNoticeUnitIds, asmarketappnotice.FieldUnitQueryIds:
			values[i] = new(sql.NullString)
		case asmarketappnotice.FieldNoticeReleaseTime, asmarketappnotice.FieldCreateTime, asmarketappnotice.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AsMarketAppNotice", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AsMarketAppNotice fields.
func (aman *AsMarketAppNotice) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case asmarketappnotice.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			aman.ID = int64(value.Int64)
		case asmarketappnotice.FieldNoticeTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notice_title", values[i])
			} else if value.Valid {
				aman.NoticeTitle = value.String
			}
		case asmarketappnotice.FieldNoticeContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notice_content", values[i])
			} else if value.Valid {
				aman.NoticeContent = value.String
			}
		case asmarketappnotice.FieldNoticeReleaseUnitID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field notice_release_unit_id", values[i])
			} else if value.Valid {
				aman.NoticeReleaseUnitID = value.Int64
			}
		case asmarketappnotice.FieldNoticeReleaseStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field notice_release_status", values[i])
			} else if value.Valid {
				aman.NoticeReleaseStatus = value.Int64
			}
		case asmarketappnotice.FieldNoticeReleaseTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field notice_release_time", values[i])
			} else if value.Valid {
				aman.NoticeReleaseTime = date.DateTime(value.Time)
			}
		case asmarketappnotice.FieldNoticeRoleIds:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notice_role_ids", values[i])
			} else if value.Valid {
				aman.NoticeRoleIds = value.String
			}
		case asmarketappnotice.FieldNoticeUnitIds:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notice_unit_ids", values[i])
			} else if value.Valid {
				aman.NoticeUnitIds = value.String
			}
		case asmarketappnotice.FieldGroupOrUnit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field group_or_unit", values[i])
			} else if value.Valid {
				aman.GroupOrUnit = value.Int64
			}
		case asmarketappnotice.FieldUnitQueryIds:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field unit_query_ids", values[i])
			} else if value.Valid {
				aman.UnitQueryIds = value.String
			}
		case asmarketappnotice.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				aman.IsDeleted = value.Int64
			}
		case asmarketappnotice.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				aman.Status = value.Int64
			}
		case asmarketappnotice.FieldCreateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_user", values[i])
			} else if value.Valid {
				aman.CreateUser = value.Int64
			}
		case asmarketappnotice.FieldUpdateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_user", values[i])
			} else if value.Valid {
				aman.UpdateUser = value.Int64
			}
		case asmarketappnotice.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				aman.CreateTime = date.DateTime(value.Time)
			}
		case asmarketappnotice.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				aman.UpdateTime = date.DateTime(value.Time)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AsMarketAppNotice.
// Note that you need to call AsMarketAppNotice.Unwrap() before calling this method if this AsMarketAppNotice
// was returned from a transaction, and the transaction was committed or rolled back.
func (aman *AsMarketAppNotice) Update() *AsMarketAppNoticeUpdateOne {
	return (&AsMarketAppNoticeClient{config: aman.config}).UpdateOne(aman)
}

// Unwrap unwraps the AsMarketAppNotice entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (aman *AsMarketAppNotice) Unwrap() *AsMarketAppNotice {
	tx, ok := aman.config.driver.(*txDriver)
	if !ok {
		panic("schema: AsMarketAppNotice is not a transactional entity")
	}
	aman.config.driver = tx.drv
	return aman
}

// String implements the fmt.Stringer.
func (aman *AsMarketAppNotice) String() string {
	var builder strings.Builder
	builder.WriteString("AsMarketAppNotice(")
	builder.WriteString(fmt.Sprintf("id=%v", aman.ID))
	builder.WriteString(", notice_title=")
	builder.WriteString(aman.NoticeTitle)
	builder.WriteString(", notice_content=")
	builder.WriteString(aman.NoticeContent)
	builder.WriteString(", notice_release_unit_id=")
	builder.WriteString(fmt.Sprintf("%v", aman.NoticeReleaseUnitID))
	builder.WriteString(", notice_release_status=")
	builder.WriteString(fmt.Sprintf("%v", aman.NoticeReleaseStatus))
	builder.WriteString(", notice_release_time=")
	builder.WriteString(fmt.Sprintf("%v", aman.NoticeReleaseTime))
	builder.WriteString(", notice_role_ids=")
	builder.WriteString(aman.NoticeRoleIds)
	builder.WriteString(", notice_unit_ids=")
	builder.WriteString(aman.NoticeUnitIds)
	builder.WriteString(", group_or_unit=")
	builder.WriteString(fmt.Sprintf("%v", aman.GroupOrUnit))
	builder.WriteString(", unit_query_ids=")
	builder.WriteString(aman.UnitQueryIds)
	builder.WriteString(", is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", aman.IsDeleted))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", aman.Status))
	builder.WriteString(", create_user=")
	builder.WriteString(fmt.Sprintf("%v", aman.CreateUser))
	builder.WriteString(", update_user=")
	builder.WriteString(fmt.Sprintf("%v", aman.UpdateUser))
	builder.WriteString(", create_time=")
	builder.WriteString(fmt.Sprintf("%v", aman.CreateTime))
	builder.WriteString(", update_time=")
	builder.WriteString(fmt.Sprintf("%v", aman.UpdateTime))
	builder.WriteByte(')')
	return builder.String()
}

// AsMarketAppNotices is a parsable slice of AsMarketAppNotice.
type AsMarketAppNotices []*AsMarketAppNotice

func (aman AsMarketAppNotices) config(cfg config) {
	for _i := range aman {
		aman[_i].config = cfg
	}
}
