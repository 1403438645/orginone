// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/asallgroup"
	"orginone/common/schema/asmarketapp"
	"orginone/common/schema/asmarketappgroupdistribution"
	"orginone/common/schema/predicate"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsMarketAppGroupDistributionUpdate is the builder for updating AsMarketAppGroupDistribution entities.
type AsMarketAppGroupDistributionUpdate struct {
	config
	hooks    []Hook
	mutation *AsMarketAppGroupDistributionMutation
}

// Where appends a list predicates to the AsMarketAppGroupDistributionUpdate builder.
func (amagdu *AsMarketAppGroupDistributionUpdate) Where(ps ...predicate.AsMarketAppGroupDistribution) *AsMarketAppGroupDistributionUpdate {
	amagdu.mutation.Where(ps...)
	return amagdu
}

// SetRemark sets the "remark" field.
func (amagdu *AsMarketAppGroupDistributionUpdate) SetRemark(s string) *AsMarketAppGroupDistributionUpdate {
	amagdu.mutation.SetRemark(s)
	return amagdu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (amagdu *AsMarketAppGroupDistributionUpdate) SetNillableRemark(s *string) *AsMarketAppGroupDistributionUpdate {
	if s != nil {
		amagdu.SetRemark(*s)
	}
	return amagdu
}

// ClearRemark clears the value of the "remark" field.
func (amagdu *AsMarketAppGroupDistributionUpdate) ClearRemark() *AsMarketAppGroupDistributionUpdate {
	amagdu.mutation.ClearRemark()
	return amagdu
}

// SetAppID sets the "app_id" field.
func (amagdu *AsMarketAppGroupDistributionUpdate) SetAppID(i int64) *AsMarketAppGroupDistributionUpdate {
	amagdu.mutation.SetAppID(i)
	return amagdu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (amagdu *AsMarketAppGroupDistributionUpdate) SetNillableAppID(i *int64) *AsMarketAppGroupDistributionUpdate {
	if i != nil {
		amagdu.SetAppID(*i)
	}
	return amagdu
}

// ClearAppID clears the value of the "app_id" field.
func (amagdu *AsMarketAppGroupDistributionUpdate) ClearAppID() *AsMarketAppGroupDistributionUpdate {
	amagdu.mutation.ClearAppID()
	return amagdu
}

// SetTenantID sets the "tenant_id" field.
func (amagdu *AsMarketAppGroupDistributionUpdate) SetTenantID(s string) *AsMarketAppGroupDistributionUpdate {
	amagdu.mutation.SetTenantID(s)
	return amagdu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (amagdu *AsMarketAppGroupDistributionUpdate) SetNillableTenantID(s *string) *AsMarketAppGroupDistributionUpdate {
	if s != nil {
		amagdu.SetTenantID(*s)
	}
	return amagdu
}

// ClearTenantID clears the value of the "tenant_id" field.
func (amagdu *AsMarketAppGroupDistributionUpdate) ClearTenantID() *AsMarketAppGroupDistributionUpdate {
	amagdu.mutation.ClearTenantID()
	return amagdu
}

// SetGroupID sets the "group_id" field.
func (amagdu *AsMarketAppGroupDistributionUpdate) SetGroupID(i int64) *AsMarketAppGroupDistributionUpdate {
	amagdu.mutation.SetGroupID(i)
	return amagdu
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (amagdu *AsMarketAppGroupDistributionUpdate) SetNillableGroupID(i *int64) *AsMarketAppGroupDistributionUpdate {
	if i != nil {
		amagdu.SetGroupID(*i)
	}
	return amagdu
}

// ClearGroupID clears the value of the "group_id" field.
func (amagdu *AsMarketAppGroupDistributionUpdate) ClearGroupID() *AsMarketAppGroupDistributionUpdate {
	amagdu.mutation.ClearGroupID()
	return amagdu
}

// SetUseStatus sets the "use_status" field.
func (amagdu *AsMarketAppGroupDistributionUpdate) SetUseStatus(i int64) *AsMarketAppGroupDistributionUpdate {
	amagdu.mutation.ResetUseStatus()
	amagdu.mutation.SetUseStatus(i)
	return amagdu
}

// SetNillableUseStatus sets the "use_status" field if the given value is not nil.
func (amagdu *AsMarketAppGroupDistributionUpdate) SetNillableUseStatus(i *int64) *AsMarketAppGroupDistributionUpdate {
	if i != nil {
		amagdu.SetUseStatus(*i)
	}
	return amagdu
}

// AddUseStatus adds i to the "use_status" field.
func (amagdu *AsMarketAppGroupDistributionUpdate) AddUseStatus(i int64) *AsMarketAppGroupDistributionUpdate {
	amagdu.mutation.AddUseStatus(i)
	return amagdu
}

// ClearUseStatus clears the value of the "use_status" field.
func (amagdu *AsMarketAppGroupDistributionUpdate) ClearUseStatus() *AsMarketAppGroupDistributionUpdate {
	amagdu.mutation.ClearUseStatus()
	return amagdu
}

// SetIsDeleted sets the "is_deleted" field.
func (amagdu *AsMarketAppGroupDistributionUpdate) SetIsDeleted(i int64) *AsMarketAppGroupDistributionUpdate {
	amagdu.mutation.ResetIsDeleted()
	amagdu.mutation.SetIsDeleted(i)
	return amagdu
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (amagdu *AsMarketAppGroupDistributionUpdate) SetNillableIsDeleted(i *int64) *AsMarketAppGroupDistributionUpdate {
	if i != nil {
		amagdu.SetIsDeleted(*i)
	}
	return amagdu
}

// AddIsDeleted adds i to the "is_deleted" field.
func (amagdu *AsMarketAppGroupDistributionUpdate) AddIsDeleted(i int64) *AsMarketAppGroupDistributionUpdate {
	amagdu.mutation.AddIsDeleted(i)
	return amagdu
}

// SetStatus sets the "status" field.
func (amagdu *AsMarketAppGroupDistributionUpdate) SetStatus(i int64) *AsMarketAppGroupDistributionUpdate {
	amagdu.mutation.ResetStatus()
	amagdu.mutation.SetStatus(i)
	return amagdu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (amagdu *AsMarketAppGroupDistributionUpdate) SetNillableStatus(i *int64) *AsMarketAppGroupDistributionUpdate {
	if i != nil {
		amagdu.SetStatus(*i)
	}
	return amagdu
}

// AddStatus adds i to the "status" field.
func (amagdu *AsMarketAppGroupDistributionUpdate) AddStatus(i int64) *AsMarketAppGroupDistributionUpdate {
	amagdu.mutation.AddStatus(i)
	return amagdu
}

// ClearStatus clears the value of the "status" field.
func (amagdu *AsMarketAppGroupDistributionUpdate) ClearStatus() *AsMarketAppGroupDistributionUpdate {
	amagdu.mutation.ClearStatus()
	return amagdu
}

// SetCreateUser sets the "create_user" field.
func (amagdu *AsMarketAppGroupDistributionUpdate) SetCreateUser(i int64) *AsMarketAppGroupDistributionUpdate {
	amagdu.mutation.ResetCreateUser()
	amagdu.mutation.SetCreateUser(i)
	return amagdu
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (amagdu *AsMarketAppGroupDistributionUpdate) SetNillableCreateUser(i *int64) *AsMarketAppGroupDistributionUpdate {
	if i != nil {
		amagdu.SetCreateUser(*i)
	}
	return amagdu
}

// AddCreateUser adds i to the "create_user" field.
func (amagdu *AsMarketAppGroupDistributionUpdate) AddCreateUser(i int64) *AsMarketAppGroupDistributionUpdate {
	amagdu.mutation.AddCreateUser(i)
	return amagdu
}

// ClearCreateUser clears the value of the "create_user" field.
func (amagdu *AsMarketAppGroupDistributionUpdate) ClearCreateUser() *AsMarketAppGroupDistributionUpdate {
	amagdu.mutation.ClearCreateUser()
	return amagdu
}

// SetUpdateUser sets the "update_user" field.
func (amagdu *AsMarketAppGroupDistributionUpdate) SetUpdateUser(i int64) *AsMarketAppGroupDistributionUpdate {
	amagdu.mutation.ResetUpdateUser()
	amagdu.mutation.SetUpdateUser(i)
	return amagdu
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (amagdu *AsMarketAppGroupDistributionUpdate) SetNillableUpdateUser(i *int64) *AsMarketAppGroupDistributionUpdate {
	if i != nil {
		amagdu.SetUpdateUser(*i)
	}
	return amagdu
}

// AddUpdateUser adds i to the "update_user" field.
func (amagdu *AsMarketAppGroupDistributionUpdate) AddUpdateUser(i int64) *AsMarketAppGroupDistributionUpdate {
	amagdu.mutation.AddUpdateUser(i)
	return amagdu
}

// ClearUpdateUser clears the value of the "update_user" field.
func (amagdu *AsMarketAppGroupDistributionUpdate) ClearUpdateUser() *AsMarketAppGroupDistributionUpdate {
	amagdu.mutation.ClearUpdateUser()
	return amagdu
}

// SetUpdateTime sets the "update_time" field.
func (amagdu *AsMarketAppGroupDistributionUpdate) SetUpdateTime(dt date.DateTime) *AsMarketAppGroupDistributionUpdate {
	amagdu.mutation.SetUpdateTime(dt)
	return amagdu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (amagdu *AsMarketAppGroupDistributionUpdate) ClearUpdateTime() *AsMarketAppGroupDistributionUpdate {
	amagdu.mutation.ClearUpdateTime()
	return amagdu
}

// SetAppxID sets the "appx" edge to the AsMarketApp entity by ID.
func (amagdu *AsMarketAppGroupDistributionUpdate) SetAppxID(id int64) *AsMarketAppGroupDistributionUpdate {
	amagdu.mutation.SetAppxID(id)
	return amagdu
}

// SetNillableAppxID sets the "appx" edge to the AsMarketApp entity by ID if the given value is not nil.
func (amagdu *AsMarketAppGroupDistributionUpdate) SetNillableAppxID(id *int64) *AsMarketAppGroupDistributionUpdate {
	if id != nil {
		amagdu = amagdu.SetAppxID(*id)
	}
	return amagdu
}

// SetAppx sets the "appx" edge to the AsMarketApp entity.
func (amagdu *AsMarketAppGroupDistributionUpdate) SetAppx(a *AsMarketApp) *AsMarketAppGroupDistributionUpdate {
	return amagdu.SetAppxID(a.ID)
}

// SetGroupxID sets the "groupx" edge to the AsAllGroup entity by ID.
func (amagdu *AsMarketAppGroupDistributionUpdate) SetGroupxID(id int64) *AsMarketAppGroupDistributionUpdate {
	amagdu.mutation.SetGroupxID(id)
	return amagdu
}

// SetNillableGroupxID sets the "groupx" edge to the AsAllGroup entity by ID if the given value is not nil.
func (amagdu *AsMarketAppGroupDistributionUpdate) SetNillableGroupxID(id *int64) *AsMarketAppGroupDistributionUpdate {
	if id != nil {
		amagdu = amagdu.SetGroupxID(*id)
	}
	return amagdu
}

// SetGroupx sets the "groupx" edge to the AsAllGroup entity.
func (amagdu *AsMarketAppGroupDistributionUpdate) SetGroupx(a *AsAllGroup) *AsMarketAppGroupDistributionUpdate {
	return amagdu.SetGroupxID(a.ID)
}

// Mutation returns the AsMarketAppGroupDistributionMutation object of the builder.
func (amagdu *AsMarketAppGroupDistributionUpdate) Mutation() *AsMarketAppGroupDistributionMutation {
	return amagdu.mutation
}

// ClearAppx clears the "appx" edge to the AsMarketApp entity.
func (amagdu *AsMarketAppGroupDistributionUpdate) ClearAppx() *AsMarketAppGroupDistributionUpdate {
	amagdu.mutation.ClearAppx()
	return amagdu
}

// ClearGroupx clears the "groupx" edge to the AsAllGroup entity.
func (amagdu *AsMarketAppGroupDistributionUpdate) ClearGroupx() *AsMarketAppGroupDistributionUpdate {
	amagdu.mutation.ClearGroupx()
	return amagdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (amagdu *AsMarketAppGroupDistributionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	amagdu.defaults()
	if len(amagdu.hooks) == 0 {
		affected, err = amagdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsMarketAppGroupDistributionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			amagdu.mutation = mutation
			affected, err = amagdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(amagdu.hooks) - 1; i >= 0; i-- {
			if amagdu.hooks[i] == nil {
				return 0, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = amagdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, amagdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (amagdu *AsMarketAppGroupDistributionUpdate) SaveX(ctx context.Context) int {
	affected, err := amagdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (amagdu *AsMarketAppGroupDistributionUpdate) Exec(ctx context.Context) error {
	_, err := amagdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amagdu *AsMarketAppGroupDistributionUpdate) ExecX(ctx context.Context) {
	if err := amagdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amagdu *AsMarketAppGroupDistributionUpdate) defaults() {
	if _, ok := amagdu.mutation.UpdateTime(); !ok && !amagdu.mutation.UpdateTimeCleared() {
		v := asmarketappgroupdistribution.UpdateDefaultUpdateTime()
		amagdu.mutation.SetUpdateTime(v)
	}
}

func (amagdu *AsMarketAppGroupDistributionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asmarketappgroupdistribution.Table,
			Columns: asmarketappgroupdistribution.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asmarketappgroupdistribution.FieldID,
			},
		},
	}
	if ps := amagdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amagdu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappgroupdistribution.FieldRemark,
		})
	}
	if amagdu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappgroupdistribution.FieldRemark,
		})
	}
	if value, ok := amagdu.mutation.TenantID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappgroupdistribution.FieldTenantID,
		})
	}
	if amagdu.mutation.TenantIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappgroupdistribution.FieldTenantID,
		})
	}
	if value, ok := amagdu.mutation.UseStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappgroupdistribution.FieldUseStatus,
		})
	}
	if value, ok := amagdu.mutation.AddedUseStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappgroupdistribution.FieldUseStatus,
		})
	}
	if amagdu.mutation.UseStatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappgroupdistribution.FieldUseStatus,
		})
	}
	if value, ok := amagdu.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappgroupdistribution.FieldIsDeleted,
		})
	}
	if value, ok := amagdu.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappgroupdistribution.FieldIsDeleted,
		})
	}
	if value, ok := amagdu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappgroupdistribution.FieldStatus,
		})
	}
	if value, ok := amagdu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappgroupdistribution.FieldStatus,
		})
	}
	if amagdu.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappgroupdistribution.FieldStatus,
		})
	}
	if value, ok := amagdu.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappgroupdistribution.FieldCreateUser,
		})
	}
	if value, ok := amagdu.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappgroupdistribution.FieldCreateUser,
		})
	}
	if amagdu.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappgroupdistribution.FieldCreateUser,
		})
	}
	if value, ok := amagdu.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappgroupdistribution.FieldUpdateUser,
		})
	}
	if value, ok := amagdu.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappgroupdistribution.FieldUpdateUser,
		})
	}
	if amagdu.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappgroupdistribution.FieldUpdateUser,
		})
	}
	if amagdu.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketappgroupdistribution.FieldCreateTime,
		})
	}
	if value, ok := amagdu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketappgroupdistribution.FieldUpdateTime,
		})
	}
	if amagdu.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketappgroupdistribution.FieldUpdateTime,
		})
	}
	if amagdu.mutation.AppxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketappgroupdistribution.AppxTable,
			Columns: []string{asmarketappgroupdistribution.AppxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapp.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amagdu.mutation.AppxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketappgroupdistribution.AppxTable,
			Columns: []string{asmarketappgroupdistribution.AppxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapp.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amagdu.mutation.GroupxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketappgroupdistribution.GroupxTable,
			Columns: []string{asmarketappgroupdistribution.GroupxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asallgroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amagdu.mutation.GroupxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketappgroupdistribution.GroupxTable,
			Columns: []string{asmarketappgroupdistribution.GroupxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asallgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, amagdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asmarketappgroupdistribution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AsMarketAppGroupDistributionUpdateOne is the builder for updating a single AsMarketAppGroupDistribution entity.
type AsMarketAppGroupDistributionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AsMarketAppGroupDistributionMutation
}

// SetRemark sets the "remark" field.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) SetRemark(s string) *AsMarketAppGroupDistributionUpdateOne {
	amagduo.mutation.SetRemark(s)
	return amagduo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) SetNillableRemark(s *string) *AsMarketAppGroupDistributionUpdateOne {
	if s != nil {
		amagduo.SetRemark(*s)
	}
	return amagduo
}

// ClearRemark clears the value of the "remark" field.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) ClearRemark() *AsMarketAppGroupDistributionUpdateOne {
	amagduo.mutation.ClearRemark()
	return amagduo
}

// SetAppID sets the "app_id" field.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) SetAppID(i int64) *AsMarketAppGroupDistributionUpdateOne {
	amagduo.mutation.SetAppID(i)
	return amagduo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) SetNillableAppID(i *int64) *AsMarketAppGroupDistributionUpdateOne {
	if i != nil {
		amagduo.SetAppID(*i)
	}
	return amagduo
}

// ClearAppID clears the value of the "app_id" field.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) ClearAppID() *AsMarketAppGroupDistributionUpdateOne {
	amagduo.mutation.ClearAppID()
	return amagduo
}

// SetTenantID sets the "tenant_id" field.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) SetTenantID(s string) *AsMarketAppGroupDistributionUpdateOne {
	amagduo.mutation.SetTenantID(s)
	return amagduo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) SetNillableTenantID(s *string) *AsMarketAppGroupDistributionUpdateOne {
	if s != nil {
		amagduo.SetTenantID(*s)
	}
	return amagduo
}

// ClearTenantID clears the value of the "tenant_id" field.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) ClearTenantID() *AsMarketAppGroupDistributionUpdateOne {
	amagduo.mutation.ClearTenantID()
	return amagduo
}

// SetGroupID sets the "group_id" field.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) SetGroupID(i int64) *AsMarketAppGroupDistributionUpdateOne {
	amagduo.mutation.SetGroupID(i)
	return amagduo
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) SetNillableGroupID(i *int64) *AsMarketAppGroupDistributionUpdateOne {
	if i != nil {
		amagduo.SetGroupID(*i)
	}
	return amagduo
}

// ClearGroupID clears the value of the "group_id" field.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) ClearGroupID() *AsMarketAppGroupDistributionUpdateOne {
	amagduo.mutation.ClearGroupID()
	return amagduo
}

// SetUseStatus sets the "use_status" field.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) SetUseStatus(i int64) *AsMarketAppGroupDistributionUpdateOne {
	amagduo.mutation.ResetUseStatus()
	amagduo.mutation.SetUseStatus(i)
	return amagduo
}

// SetNillableUseStatus sets the "use_status" field if the given value is not nil.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) SetNillableUseStatus(i *int64) *AsMarketAppGroupDistributionUpdateOne {
	if i != nil {
		amagduo.SetUseStatus(*i)
	}
	return amagduo
}

// AddUseStatus adds i to the "use_status" field.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) AddUseStatus(i int64) *AsMarketAppGroupDistributionUpdateOne {
	amagduo.mutation.AddUseStatus(i)
	return amagduo
}

// ClearUseStatus clears the value of the "use_status" field.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) ClearUseStatus() *AsMarketAppGroupDistributionUpdateOne {
	amagduo.mutation.ClearUseStatus()
	return amagduo
}

// SetIsDeleted sets the "is_deleted" field.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) SetIsDeleted(i int64) *AsMarketAppGroupDistributionUpdateOne {
	amagduo.mutation.ResetIsDeleted()
	amagduo.mutation.SetIsDeleted(i)
	return amagduo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) SetNillableIsDeleted(i *int64) *AsMarketAppGroupDistributionUpdateOne {
	if i != nil {
		amagduo.SetIsDeleted(*i)
	}
	return amagduo
}

// AddIsDeleted adds i to the "is_deleted" field.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) AddIsDeleted(i int64) *AsMarketAppGroupDistributionUpdateOne {
	amagduo.mutation.AddIsDeleted(i)
	return amagduo
}

// SetStatus sets the "status" field.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) SetStatus(i int64) *AsMarketAppGroupDistributionUpdateOne {
	amagduo.mutation.ResetStatus()
	amagduo.mutation.SetStatus(i)
	return amagduo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) SetNillableStatus(i *int64) *AsMarketAppGroupDistributionUpdateOne {
	if i != nil {
		amagduo.SetStatus(*i)
	}
	return amagduo
}

// AddStatus adds i to the "status" field.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) AddStatus(i int64) *AsMarketAppGroupDistributionUpdateOne {
	amagduo.mutation.AddStatus(i)
	return amagduo
}

// ClearStatus clears the value of the "status" field.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) ClearStatus() *AsMarketAppGroupDistributionUpdateOne {
	amagduo.mutation.ClearStatus()
	return amagduo
}

// SetCreateUser sets the "create_user" field.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) SetCreateUser(i int64) *AsMarketAppGroupDistributionUpdateOne {
	amagduo.mutation.ResetCreateUser()
	amagduo.mutation.SetCreateUser(i)
	return amagduo
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) SetNillableCreateUser(i *int64) *AsMarketAppGroupDistributionUpdateOne {
	if i != nil {
		amagduo.SetCreateUser(*i)
	}
	return amagduo
}

// AddCreateUser adds i to the "create_user" field.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) AddCreateUser(i int64) *AsMarketAppGroupDistributionUpdateOne {
	amagduo.mutation.AddCreateUser(i)
	return amagduo
}

// ClearCreateUser clears the value of the "create_user" field.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) ClearCreateUser() *AsMarketAppGroupDistributionUpdateOne {
	amagduo.mutation.ClearCreateUser()
	return amagduo
}

// SetUpdateUser sets the "update_user" field.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) SetUpdateUser(i int64) *AsMarketAppGroupDistributionUpdateOne {
	amagduo.mutation.ResetUpdateUser()
	amagduo.mutation.SetUpdateUser(i)
	return amagduo
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) SetNillableUpdateUser(i *int64) *AsMarketAppGroupDistributionUpdateOne {
	if i != nil {
		amagduo.SetUpdateUser(*i)
	}
	return amagduo
}

// AddUpdateUser adds i to the "update_user" field.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) AddUpdateUser(i int64) *AsMarketAppGroupDistributionUpdateOne {
	amagduo.mutation.AddUpdateUser(i)
	return amagduo
}

// ClearUpdateUser clears the value of the "update_user" field.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) ClearUpdateUser() *AsMarketAppGroupDistributionUpdateOne {
	amagduo.mutation.ClearUpdateUser()
	return amagduo
}

// SetUpdateTime sets the "update_time" field.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) SetUpdateTime(dt date.DateTime) *AsMarketAppGroupDistributionUpdateOne {
	amagduo.mutation.SetUpdateTime(dt)
	return amagduo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) ClearUpdateTime() *AsMarketAppGroupDistributionUpdateOne {
	amagduo.mutation.ClearUpdateTime()
	return amagduo
}

// SetAppxID sets the "appx" edge to the AsMarketApp entity by ID.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) SetAppxID(id int64) *AsMarketAppGroupDistributionUpdateOne {
	amagduo.mutation.SetAppxID(id)
	return amagduo
}

// SetNillableAppxID sets the "appx" edge to the AsMarketApp entity by ID if the given value is not nil.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) SetNillableAppxID(id *int64) *AsMarketAppGroupDistributionUpdateOne {
	if id != nil {
		amagduo = amagduo.SetAppxID(*id)
	}
	return amagduo
}

// SetAppx sets the "appx" edge to the AsMarketApp entity.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) SetAppx(a *AsMarketApp) *AsMarketAppGroupDistributionUpdateOne {
	return amagduo.SetAppxID(a.ID)
}

// SetGroupxID sets the "groupx" edge to the AsAllGroup entity by ID.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) SetGroupxID(id int64) *AsMarketAppGroupDistributionUpdateOne {
	amagduo.mutation.SetGroupxID(id)
	return amagduo
}

// SetNillableGroupxID sets the "groupx" edge to the AsAllGroup entity by ID if the given value is not nil.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) SetNillableGroupxID(id *int64) *AsMarketAppGroupDistributionUpdateOne {
	if id != nil {
		amagduo = amagduo.SetGroupxID(*id)
	}
	return amagduo
}

// SetGroupx sets the "groupx" edge to the AsAllGroup entity.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) SetGroupx(a *AsAllGroup) *AsMarketAppGroupDistributionUpdateOne {
	return amagduo.SetGroupxID(a.ID)
}

// Mutation returns the AsMarketAppGroupDistributionMutation object of the builder.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) Mutation() *AsMarketAppGroupDistributionMutation {
	return amagduo.mutation
}

// ClearAppx clears the "appx" edge to the AsMarketApp entity.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) ClearAppx() *AsMarketAppGroupDistributionUpdateOne {
	amagduo.mutation.ClearAppx()
	return amagduo
}

// ClearGroupx clears the "groupx" edge to the AsAllGroup entity.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) ClearGroupx() *AsMarketAppGroupDistributionUpdateOne {
	amagduo.mutation.ClearGroupx()
	return amagduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) Select(field string, fields ...string) *AsMarketAppGroupDistributionUpdateOne {
	amagduo.fields = append([]string{field}, fields...)
	return amagduo
}

// Save executes the query and returns the updated AsMarketAppGroupDistribution entity.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) Save(ctx context.Context) (*AsMarketAppGroupDistribution, error) {
	var (
		err  error
		node *AsMarketAppGroupDistribution
	)
	amagduo.defaults()
	if len(amagduo.hooks) == 0 {
		node, err = amagduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsMarketAppGroupDistributionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			amagduo.mutation = mutation
			node, err = amagduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(amagduo.hooks) - 1; i >= 0; i-- {
			if amagduo.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = amagduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, amagduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) SaveX(ctx context.Context) *AsMarketAppGroupDistribution {
	node, err := amagduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) Exec(ctx context.Context) error {
	_, err := amagduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) ExecX(ctx context.Context) {
	if err := amagduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amagduo *AsMarketAppGroupDistributionUpdateOne) defaults() {
	if _, ok := amagduo.mutation.UpdateTime(); !ok && !amagduo.mutation.UpdateTimeCleared() {
		v := asmarketappgroupdistribution.UpdateDefaultUpdateTime()
		amagduo.mutation.SetUpdateTime(v)
	}
}

func (amagduo *AsMarketAppGroupDistributionUpdateOne) sqlSave(ctx context.Context) (_node *AsMarketAppGroupDistribution, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asmarketappgroupdistribution.Table,
			Columns: asmarketappgroupdistribution.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asmarketappgroupdistribution.FieldID,
			},
		},
	}
	id, ok := amagduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`schema: missing "AsMarketAppGroupDistribution.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := amagduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asmarketappgroupdistribution.FieldID)
		for _, f := range fields {
			if !asmarketappgroupdistribution.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("schema: invalid field %q for query", f)}
			}
			if f != asmarketappgroupdistribution.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := amagduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amagduo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappgroupdistribution.FieldRemark,
		})
	}
	if amagduo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappgroupdistribution.FieldRemark,
		})
	}
	if value, ok := amagduo.mutation.TenantID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappgroupdistribution.FieldTenantID,
		})
	}
	if amagduo.mutation.TenantIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappgroupdistribution.FieldTenantID,
		})
	}
	if value, ok := amagduo.mutation.UseStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappgroupdistribution.FieldUseStatus,
		})
	}
	if value, ok := amagduo.mutation.AddedUseStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappgroupdistribution.FieldUseStatus,
		})
	}
	if amagduo.mutation.UseStatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappgroupdistribution.FieldUseStatus,
		})
	}
	if value, ok := amagduo.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappgroupdistribution.FieldIsDeleted,
		})
	}
	if value, ok := amagduo.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappgroupdistribution.FieldIsDeleted,
		})
	}
	if value, ok := amagduo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappgroupdistribution.FieldStatus,
		})
	}
	if value, ok := amagduo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappgroupdistribution.FieldStatus,
		})
	}
	if amagduo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappgroupdistribution.FieldStatus,
		})
	}
	if value, ok := amagduo.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappgroupdistribution.FieldCreateUser,
		})
	}
	if value, ok := amagduo.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappgroupdistribution.FieldCreateUser,
		})
	}
	if amagduo.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappgroupdistribution.FieldCreateUser,
		})
	}
	if value, ok := amagduo.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappgroupdistribution.FieldUpdateUser,
		})
	}
	if value, ok := amagduo.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappgroupdistribution.FieldUpdateUser,
		})
	}
	if amagduo.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappgroupdistribution.FieldUpdateUser,
		})
	}
	if amagduo.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketappgroupdistribution.FieldCreateTime,
		})
	}
	if value, ok := amagduo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketappgroupdistribution.FieldUpdateTime,
		})
	}
	if amagduo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketappgroupdistribution.FieldUpdateTime,
		})
	}
	if amagduo.mutation.AppxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketappgroupdistribution.AppxTable,
			Columns: []string{asmarketappgroupdistribution.AppxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapp.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amagduo.mutation.AppxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketappgroupdistribution.AppxTable,
			Columns: []string{asmarketappgroupdistribution.AppxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapp.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amagduo.mutation.GroupxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketappgroupdistribution.GroupxTable,
			Columns: []string{asmarketappgroupdistribution.GroupxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asallgroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amagduo.mutation.GroupxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketappgroupdistribution.GroupxTable,
			Columns: []string{asmarketappgroupdistribution.GroupxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asallgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AsMarketAppGroupDistribution{config: amagduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, amagduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asmarketappgroupdistribution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
