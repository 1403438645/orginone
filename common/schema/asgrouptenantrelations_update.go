// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/asallgroup"
	"orginone/common/schema/asgrouptenantrelations"
	"orginone/common/schema/astenant"
	"orginone/common/schema/predicate"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsGroupTenantRelationsUpdate is the builder for updating AsGroupTenantRelations entities.
type AsGroupTenantRelationsUpdate struct {
	config
	hooks    []Hook
	mutation *AsGroupTenantRelationsMutation
}

// Where appends a list predicates to the AsGroupTenantRelationsUpdate builder.
func (agtru *AsGroupTenantRelationsUpdate) Where(ps ...predicate.AsGroupTenantRelations) *AsGroupTenantRelationsUpdate {
	agtru.mutation.Where(ps...)
	return agtru
}

// SetParentID sets the "parent_id" field.
func (agtru *AsGroupTenantRelationsUpdate) SetParentID(i int64) *AsGroupTenantRelationsUpdate {
	agtru.mutation.SetParentID(i)
	return agtru
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (agtru *AsGroupTenantRelationsUpdate) SetNillableParentID(i *int64) *AsGroupTenantRelationsUpdate {
	if i != nil {
		agtru.SetParentID(*i)
	}
	return agtru
}

// ClearParentID clears the value of the "parent_id" field.
func (agtru *AsGroupTenantRelationsUpdate) ClearParentID() *AsGroupTenantRelationsUpdate {
	agtru.mutation.ClearParentID()
	return agtru
}

// SetSonID sets the "son_id" field.
func (agtru *AsGroupTenantRelationsUpdate) SetSonID(i int64) *AsGroupTenantRelationsUpdate {
	agtru.mutation.SetSonID(i)
	return agtru
}

// SetNillableSonID sets the "son_id" field if the given value is not nil.
func (agtru *AsGroupTenantRelationsUpdate) SetNillableSonID(i *int64) *AsGroupTenantRelationsUpdate {
	if i != nil {
		agtru.SetSonID(*i)
	}
	return agtru
}

// ClearSonID clears the value of the "son_id" field.
func (agtru *AsGroupTenantRelationsUpdate) ClearSonID() *AsGroupTenantRelationsUpdate {
	agtru.mutation.ClearSonID()
	return agtru
}

// SetType sets the "type" field.
func (agtru *AsGroupTenantRelationsUpdate) SetType(i int64) *AsGroupTenantRelationsUpdate {
	agtru.mutation.ResetType()
	agtru.mutation.SetType(i)
	return agtru
}

// SetNillableType sets the "type" field if the given value is not nil.
func (agtru *AsGroupTenantRelationsUpdate) SetNillableType(i *int64) *AsGroupTenantRelationsUpdate {
	if i != nil {
		agtru.SetType(*i)
	}
	return agtru
}

// AddType adds i to the "type" field.
func (agtru *AsGroupTenantRelationsUpdate) AddType(i int64) *AsGroupTenantRelationsUpdate {
	agtru.mutation.AddType(i)
	return agtru
}

// ClearType clears the value of the "type" field.
func (agtru *AsGroupTenantRelationsUpdate) ClearType() *AsGroupTenantRelationsUpdate {
	agtru.mutation.ClearType()
	return agtru
}

// SetSort sets the "sort" field.
func (agtru *AsGroupTenantRelationsUpdate) SetSort(i int64) *AsGroupTenantRelationsUpdate {
	agtru.mutation.ResetSort()
	agtru.mutation.SetSort(i)
	return agtru
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (agtru *AsGroupTenantRelationsUpdate) SetNillableSort(i *int64) *AsGroupTenantRelationsUpdate {
	if i != nil {
		agtru.SetSort(*i)
	}
	return agtru
}

// AddSort adds i to the "sort" field.
func (agtru *AsGroupTenantRelationsUpdate) AddSort(i int64) *AsGroupTenantRelationsUpdate {
	agtru.mutation.AddSort(i)
	return agtru
}

// ClearSort clears the value of the "sort" field.
func (agtru *AsGroupTenantRelationsUpdate) ClearSort() *AsGroupTenantRelationsUpdate {
	agtru.mutation.ClearSort()
	return agtru
}

// SetSerial sets the "serial" field.
func (agtru *AsGroupTenantRelationsUpdate) SetSerial(i int64) *AsGroupTenantRelationsUpdate {
	agtru.mutation.ResetSerial()
	agtru.mutation.SetSerial(i)
	return agtru
}

// SetNillableSerial sets the "serial" field if the given value is not nil.
func (agtru *AsGroupTenantRelationsUpdate) SetNillableSerial(i *int64) *AsGroupTenantRelationsUpdate {
	if i != nil {
		agtru.SetSerial(*i)
	}
	return agtru
}

// AddSerial adds i to the "serial" field.
func (agtru *AsGroupTenantRelationsUpdate) AddSerial(i int64) *AsGroupTenantRelationsUpdate {
	agtru.mutation.AddSerial(i)
	return agtru
}

// ClearSerial clears the value of the "serial" field.
func (agtru *AsGroupTenantRelationsUpdate) ClearSerial() *AsGroupTenantRelationsUpdate {
	agtru.mutation.ClearSerial()
	return agtru
}

// SetGroupCode sets the "group_code" field.
func (agtru *AsGroupTenantRelationsUpdate) SetGroupCode(s string) *AsGroupTenantRelationsUpdate {
	agtru.mutation.SetGroupCode(s)
	return agtru
}

// SetNillableGroupCode sets the "group_code" field if the given value is not nil.
func (agtru *AsGroupTenantRelationsUpdate) SetNillableGroupCode(s *string) *AsGroupTenantRelationsUpdate {
	if s != nil {
		agtru.SetGroupCode(*s)
	}
	return agtru
}

// ClearGroupCode clears the value of the "group_code" field.
func (agtru *AsGroupTenantRelationsUpdate) ClearGroupCode() *AsGroupTenantRelationsUpdate {
	agtru.mutation.ClearGroupCode()
	return agtru
}

// SetExpiresTime sets the "expires_time" field.
func (agtru *AsGroupTenantRelationsUpdate) SetExpiresTime(dt date.DateTime) *AsGroupTenantRelationsUpdate {
	agtru.mutation.SetExpiresTime(dt)
	return agtru
}

// SetNillableExpiresTime sets the "expires_time" field if the given value is not nil.
func (agtru *AsGroupTenantRelationsUpdate) SetNillableExpiresTime(dt *date.DateTime) *AsGroupTenantRelationsUpdate {
	if dt != nil {
		agtru.SetExpiresTime(*dt)
	}
	return agtru
}

// ClearExpiresTime clears the value of the "expires_time" field.
func (agtru *AsGroupTenantRelationsUpdate) ClearExpiresTime() *AsGroupTenantRelationsUpdate {
	agtru.mutation.ClearExpiresTime()
	return agtru
}

// SetIsHide sets the "is_hide" field.
func (agtru *AsGroupTenantRelationsUpdate) SetIsHide(i int64) *AsGroupTenantRelationsUpdate {
	agtru.mutation.ResetIsHide()
	agtru.mutation.SetIsHide(i)
	return agtru
}

// SetNillableIsHide sets the "is_hide" field if the given value is not nil.
func (agtru *AsGroupTenantRelationsUpdate) SetNillableIsHide(i *int64) *AsGroupTenantRelationsUpdate {
	if i != nil {
		agtru.SetIsHide(*i)
	}
	return agtru
}

// AddIsHide adds i to the "is_hide" field.
func (agtru *AsGroupTenantRelationsUpdate) AddIsHide(i int64) *AsGroupTenantRelationsUpdate {
	agtru.mutation.AddIsHide(i)
	return agtru
}

// ClearIsHide clears the value of the "is_hide" field.
func (agtru *AsGroupTenantRelationsUpdate) ClearIsHide() *AsGroupTenantRelationsUpdate {
	agtru.mutation.ClearIsHide()
	return agtru
}

// SetIsDeleted sets the "is_deleted" field.
func (agtru *AsGroupTenantRelationsUpdate) SetIsDeleted(i int64) *AsGroupTenantRelationsUpdate {
	agtru.mutation.ResetIsDeleted()
	agtru.mutation.SetIsDeleted(i)
	return agtru
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (agtru *AsGroupTenantRelationsUpdate) SetNillableIsDeleted(i *int64) *AsGroupTenantRelationsUpdate {
	if i != nil {
		agtru.SetIsDeleted(*i)
	}
	return agtru
}

// AddIsDeleted adds i to the "is_deleted" field.
func (agtru *AsGroupTenantRelationsUpdate) AddIsDeleted(i int64) *AsGroupTenantRelationsUpdate {
	agtru.mutation.AddIsDeleted(i)
	return agtru
}

// SetStatus sets the "status" field.
func (agtru *AsGroupTenantRelationsUpdate) SetStatus(i int64) *AsGroupTenantRelationsUpdate {
	agtru.mutation.ResetStatus()
	agtru.mutation.SetStatus(i)
	return agtru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (agtru *AsGroupTenantRelationsUpdate) SetNillableStatus(i *int64) *AsGroupTenantRelationsUpdate {
	if i != nil {
		agtru.SetStatus(*i)
	}
	return agtru
}

// AddStatus adds i to the "status" field.
func (agtru *AsGroupTenantRelationsUpdate) AddStatus(i int64) *AsGroupTenantRelationsUpdate {
	agtru.mutation.AddStatus(i)
	return agtru
}

// ClearStatus clears the value of the "status" field.
func (agtru *AsGroupTenantRelationsUpdate) ClearStatus() *AsGroupTenantRelationsUpdate {
	agtru.mutation.ClearStatus()
	return agtru
}

// SetCreateUser sets the "create_user" field.
func (agtru *AsGroupTenantRelationsUpdate) SetCreateUser(i int64) *AsGroupTenantRelationsUpdate {
	agtru.mutation.ResetCreateUser()
	agtru.mutation.SetCreateUser(i)
	return agtru
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (agtru *AsGroupTenantRelationsUpdate) SetNillableCreateUser(i *int64) *AsGroupTenantRelationsUpdate {
	if i != nil {
		agtru.SetCreateUser(*i)
	}
	return agtru
}

// AddCreateUser adds i to the "create_user" field.
func (agtru *AsGroupTenantRelationsUpdate) AddCreateUser(i int64) *AsGroupTenantRelationsUpdate {
	agtru.mutation.AddCreateUser(i)
	return agtru
}

// ClearCreateUser clears the value of the "create_user" field.
func (agtru *AsGroupTenantRelationsUpdate) ClearCreateUser() *AsGroupTenantRelationsUpdate {
	agtru.mutation.ClearCreateUser()
	return agtru
}

// SetUpdateUser sets the "update_user" field.
func (agtru *AsGroupTenantRelationsUpdate) SetUpdateUser(i int64) *AsGroupTenantRelationsUpdate {
	agtru.mutation.ResetUpdateUser()
	agtru.mutation.SetUpdateUser(i)
	return agtru
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (agtru *AsGroupTenantRelationsUpdate) SetNillableUpdateUser(i *int64) *AsGroupTenantRelationsUpdate {
	if i != nil {
		agtru.SetUpdateUser(*i)
	}
	return agtru
}

// AddUpdateUser adds i to the "update_user" field.
func (agtru *AsGroupTenantRelationsUpdate) AddUpdateUser(i int64) *AsGroupTenantRelationsUpdate {
	agtru.mutation.AddUpdateUser(i)
	return agtru
}

// ClearUpdateUser clears the value of the "update_user" field.
func (agtru *AsGroupTenantRelationsUpdate) ClearUpdateUser() *AsGroupTenantRelationsUpdate {
	agtru.mutation.ClearUpdateUser()
	return agtru
}

// SetUpdateTime sets the "update_time" field.
func (agtru *AsGroupTenantRelationsUpdate) SetUpdateTime(dt date.DateTime) *AsGroupTenantRelationsUpdate {
	agtru.mutation.SetUpdateTime(dt)
	return agtru
}

// ClearUpdateTime clears the value of the "update_time" field.
func (agtru *AsGroupTenantRelationsUpdate) ClearUpdateTime() *AsGroupTenantRelationsUpdate {
	agtru.mutation.ClearUpdateTime()
	return agtru
}

// SetGroupID sets the "group" edge to the AsAllGroup entity by ID.
func (agtru *AsGroupTenantRelationsUpdate) SetGroupID(id int64) *AsGroupTenantRelationsUpdate {
	agtru.mutation.SetGroupID(id)
	return agtru
}

// SetNillableGroupID sets the "group" edge to the AsAllGroup entity by ID if the given value is not nil.
func (agtru *AsGroupTenantRelationsUpdate) SetNillableGroupID(id *int64) *AsGroupTenantRelationsUpdate {
	if id != nil {
		agtru = agtru.SetGroupID(*id)
	}
	return agtru
}

// SetGroup sets the "group" edge to the AsAllGroup entity.
func (agtru *AsGroupTenantRelationsUpdate) SetGroup(a *AsAllGroup) *AsGroupTenantRelationsUpdate {
	return agtru.SetGroupID(a.ID)
}

// SetTenantID sets the "tenant" edge to the AsTenant entity by ID.
func (agtru *AsGroupTenantRelationsUpdate) SetTenantID(id int64) *AsGroupTenantRelationsUpdate {
	agtru.mutation.SetTenantID(id)
	return agtru
}

// SetNillableTenantID sets the "tenant" edge to the AsTenant entity by ID if the given value is not nil.
func (agtru *AsGroupTenantRelationsUpdate) SetNillableTenantID(id *int64) *AsGroupTenantRelationsUpdate {
	if id != nil {
		agtru = agtru.SetTenantID(*id)
	}
	return agtru
}

// SetTenant sets the "tenant" edge to the AsTenant entity.
func (agtru *AsGroupTenantRelationsUpdate) SetTenant(a *AsTenant) *AsGroupTenantRelationsUpdate {
	return agtru.SetTenantID(a.ID)
}

// Mutation returns the AsGroupTenantRelationsMutation object of the builder.
func (agtru *AsGroupTenantRelationsUpdate) Mutation() *AsGroupTenantRelationsMutation {
	return agtru.mutation
}

// ClearGroup clears the "group" edge to the AsAllGroup entity.
func (agtru *AsGroupTenantRelationsUpdate) ClearGroup() *AsGroupTenantRelationsUpdate {
	agtru.mutation.ClearGroup()
	return agtru
}

// ClearTenant clears the "tenant" edge to the AsTenant entity.
func (agtru *AsGroupTenantRelationsUpdate) ClearTenant() *AsGroupTenantRelationsUpdate {
	agtru.mutation.ClearTenant()
	return agtru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (agtru *AsGroupTenantRelationsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	agtru.defaults()
	if len(agtru.hooks) == 0 {
		affected, err = agtru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsGroupTenantRelationsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			agtru.mutation = mutation
			affected, err = agtru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(agtru.hooks) - 1; i >= 0; i-- {
			if agtru.hooks[i] == nil {
				return 0, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = agtru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, agtru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (agtru *AsGroupTenantRelationsUpdate) SaveX(ctx context.Context) int {
	affected, err := agtru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (agtru *AsGroupTenantRelationsUpdate) Exec(ctx context.Context) error {
	_, err := agtru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agtru *AsGroupTenantRelationsUpdate) ExecX(ctx context.Context) {
	if err := agtru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (agtru *AsGroupTenantRelationsUpdate) defaults() {
	if _, ok := agtru.mutation.UpdateTime(); !ok && !agtru.mutation.UpdateTimeCleared() {
		v := asgrouptenantrelations.UpdateDefaultUpdateTime()
		agtru.mutation.SetUpdateTime(v)
	}
}

func (agtru *AsGroupTenantRelationsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asgrouptenantrelations.Table,
			Columns: asgrouptenantrelations.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asgrouptenantrelations.FieldID,
			},
		},
	}
	if ps := agtru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := agtru.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asgrouptenantrelations.FieldType,
		})
	}
	if value, ok := agtru.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asgrouptenantrelations.FieldType,
		})
	}
	if agtru.mutation.TypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asgrouptenantrelations.FieldType,
		})
	}
	if value, ok := agtru.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asgrouptenantrelations.FieldSort,
		})
	}
	if value, ok := agtru.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asgrouptenantrelations.FieldSort,
		})
	}
	if agtru.mutation.SortCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asgrouptenantrelations.FieldSort,
		})
	}
	if value, ok := agtru.mutation.Serial(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asgrouptenantrelations.FieldSerial,
		})
	}
	if value, ok := agtru.mutation.AddedSerial(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asgrouptenantrelations.FieldSerial,
		})
	}
	if agtru.mutation.SerialCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asgrouptenantrelations.FieldSerial,
		})
	}
	if value, ok := agtru.mutation.GroupCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asgrouptenantrelations.FieldGroupCode,
		})
	}
	if agtru.mutation.GroupCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asgrouptenantrelations.FieldGroupCode,
		})
	}
	if value, ok := agtru.mutation.ExpiresTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asgrouptenantrelations.FieldExpiresTime,
		})
	}
	if agtru.mutation.ExpiresTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asgrouptenantrelations.FieldExpiresTime,
		})
	}
	if value, ok := agtru.mutation.IsHide(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asgrouptenantrelations.FieldIsHide,
		})
	}
	if value, ok := agtru.mutation.AddedIsHide(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asgrouptenantrelations.FieldIsHide,
		})
	}
	if agtru.mutation.IsHideCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asgrouptenantrelations.FieldIsHide,
		})
	}
	if value, ok := agtru.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asgrouptenantrelations.FieldIsDeleted,
		})
	}
	if value, ok := agtru.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asgrouptenantrelations.FieldIsDeleted,
		})
	}
	if value, ok := agtru.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asgrouptenantrelations.FieldStatus,
		})
	}
	if value, ok := agtru.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asgrouptenantrelations.FieldStatus,
		})
	}
	if agtru.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asgrouptenantrelations.FieldStatus,
		})
	}
	if value, ok := agtru.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asgrouptenantrelations.FieldCreateUser,
		})
	}
	if value, ok := agtru.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asgrouptenantrelations.FieldCreateUser,
		})
	}
	if agtru.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asgrouptenantrelations.FieldCreateUser,
		})
	}
	if value, ok := agtru.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asgrouptenantrelations.FieldUpdateUser,
		})
	}
	if value, ok := agtru.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asgrouptenantrelations.FieldUpdateUser,
		})
	}
	if agtru.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asgrouptenantrelations.FieldUpdateUser,
		})
	}
	if agtru.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asgrouptenantrelations.FieldCreateTime,
		})
	}
	if value, ok := agtru.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asgrouptenantrelations.FieldUpdateTime,
		})
	}
	if agtru.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asgrouptenantrelations.FieldUpdateTime,
		})
	}
	if agtru.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asgrouptenantrelations.GroupTable,
			Columns: []string{asgrouptenantrelations.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asallgroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := agtru.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asgrouptenantrelations.GroupTable,
			Columns: []string{asgrouptenantrelations.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asallgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if agtru.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asgrouptenantrelations.TenantTable,
			Columns: []string{asgrouptenantrelations.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: astenant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := agtru.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asgrouptenantrelations.TenantTable,
			Columns: []string{asgrouptenantrelations.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: astenant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, agtru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asgrouptenantrelations.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AsGroupTenantRelationsUpdateOne is the builder for updating a single AsGroupTenantRelations entity.
type AsGroupTenantRelationsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AsGroupTenantRelationsMutation
}

// SetParentID sets the "parent_id" field.
func (agtruo *AsGroupTenantRelationsUpdateOne) SetParentID(i int64) *AsGroupTenantRelationsUpdateOne {
	agtruo.mutation.SetParentID(i)
	return agtruo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (agtruo *AsGroupTenantRelationsUpdateOne) SetNillableParentID(i *int64) *AsGroupTenantRelationsUpdateOne {
	if i != nil {
		agtruo.SetParentID(*i)
	}
	return agtruo
}

// ClearParentID clears the value of the "parent_id" field.
func (agtruo *AsGroupTenantRelationsUpdateOne) ClearParentID() *AsGroupTenantRelationsUpdateOne {
	agtruo.mutation.ClearParentID()
	return agtruo
}

// SetSonID sets the "son_id" field.
func (agtruo *AsGroupTenantRelationsUpdateOne) SetSonID(i int64) *AsGroupTenantRelationsUpdateOne {
	agtruo.mutation.SetSonID(i)
	return agtruo
}

// SetNillableSonID sets the "son_id" field if the given value is not nil.
func (agtruo *AsGroupTenantRelationsUpdateOne) SetNillableSonID(i *int64) *AsGroupTenantRelationsUpdateOne {
	if i != nil {
		agtruo.SetSonID(*i)
	}
	return agtruo
}

// ClearSonID clears the value of the "son_id" field.
func (agtruo *AsGroupTenantRelationsUpdateOne) ClearSonID() *AsGroupTenantRelationsUpdateOne {
	agtruo.mutation.ClearSonID()
	return agtruo
}

// SetType sets the "type" field.
func (agtruo *AsGroupTenantRelationsUpdateOne) SetType(i int64) *AsGroupTenantRelationsUpdateOne {
	agtruo.mutation.ResetType()
	agtruo.mutation.SetType(i)
	return agtruo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (agtruo *AsGroupTenantRelationsUpdateOne) SetNillableType(i *int64) *AsGroupTenantRelationsUpdateOne {
	if i != nil {
		agtruo.SetType(*i)
	}
	return agtruo
}

// AddType adds i to the "type" field.
func (agtruo *AsGroupTenantRelationsUpdateOne) AddType(i int64) *AsGroupTenantRelationsUpdateOne {
	agtruo.mutation.AddType(i)
	return agtruo
}

// ClearType clears the value of the "type" field.
func (agtruo *AsGroupTenantRelationsUpdateOne) ClearType() *AsGroupTenantRelationsUpdateOne {
	agtruo.mutation.ClearType()
	return agtruo
}

// SetSort sets the "sort" field.
func (agtruo *AsGroupTenantRelationsUpdateOne) SetSort(i int64) *AsGroupTenantRelationsUpdateOne {
	agtruo.mutation.ResetSort()
	agtruo.mutation.SetSort(i)
	return agtruo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (agtruo *AsGroupTenantRelationsUpdateOne) SetNillableSort(i *int64) *AsGroupTenantRelationsUpdateOne {
	if i != nil {
		agtruo.SetSort(*i)
	}
	return agtruo
}

// AddSort adds i to the "sort" field.
func (agtruo *AsGroupTenantRelationsUpdateOne) AddSort(i int64) *AsGroupTenantRelationsUpdateOne {
	agtruo.mutation.AddSort(i)
	return agtruo
}

// ClearSort clears the value of the "sort" field.
func (agtruo *AsGroupTenantRelationsUpdateOne) ClearSort() *AsGroupTenantRelationsUpdateOne {
	agtruo.mutation.ClearSort()
	return agtruo
}

// SetSerial sets the "serial" field.
func (agtruo *AsGroupTenantRelationsUpdateOne) SetSerial(i int64) *AsGroupTenantRelationsUpdateOne {
	agtruo.mutation.ResetSerial()
	agtruo.mutation.SetSerial(i)
	return agtruo
}

// SetNillableSerial sets the "serial" field if the given value is not nil.
func (agtruo *AsGroupTenantRelationsUpdateOne) SetNillableSerial(i *int64) *AsGroupTenantRelationsUpdateOne {
	if i != nil {
		agtruo.SetSerial(*i)
	}
	return agtruo
}

// AddSerial adds i to the "serial" field.
func (agtruo *AsGroupTenantRelationsUpdateOne) AddSerial(i int64) *AsGroupTenantRelationsUpdateOne {
	agtruo.mutation.AddSerial(i)
	return agtruo
}

// ClearSerial clears the value of the "serial" field.
func (agtruo *AsGroupTenantRelationsUpdateOne) ClearSerial() *AsGroupTenantRelationsUpdateOne {
	agtruo.mutation.ClearSerial()
	return agtruo
}

// SetGroupCode sets the "group_code" field.
func (agtruo *AsGroupTenantRelationsUpdateOne) SetGroupCode(s string) *AsGroupTenantRelationsUpdateOne {
	agtruo.mutation.SetGroupCode(s)
	return agtruo
}

// SetNillableGroupCode sets the "group_code" field if the given value is not nil.
func (agtruo *AsGroupTenantRelationsUpdateOne) SetNillableGroupCode(s *string) *AsGroupTenantRelationsUpdateOne {
	if s != nil {
		agtruo.SetGroupCode(*s)
	}
	return agtruo
}

// ClearGroupCode clears the value of the "group_code" field.
func (agtruo *AsGroupTenantRelationsUpdateOne) ClearGroupCode() *AsGroupTenantRelationsUpdateOne {
	agtruo.mutation.ClearGroupCode()
	return agtruo
}

// SetExpiresTime sets the "expires_time" field.
func (agtruo *AsGroupTenantRelationsUpdateOne) SetExpiresTime(dt date.DateTime) *AsGroupTenantRelationsUpdateOne {
	agtruo.mutation.SetExpiresTime(dt)
	return agtruo
}

// SetNillableExpiresTime sets the "expires_time" field if the given value is not nil.
func (agtruo *AsGroupTenantRelationsUpdateOne) SetNillableExpiresTime(dt *date.DateTime) *AsGroupTenantRelationsUpdateOne {
	if dt != nil {
		agtruo.SetExpiresTime(*dt)
	}
	return agtruo
}

// ClearExpiresTime clears the value of the "expires_time" field.
func (agtruo *AsGroupTenantRelationsUpdateOne) ClearExpiresTime() *AsGroupTenantRelationsUpdateOne {
	agtruo.mutation.ClearExpiresTime()
	return agtruo
}

// SetIsHide sets the "is_hide" field.
func (agtruo *AsGroupTenantRelationsUpdateOne) SetIsHide(i int64) *AsGroupTenantRelationsUpdateOne {
	agtruo.mutation.ResetIsHide()
	agtruo.mutation.SetIsHide(i)
	return agtruo
}

// SetNillableIsHide sets the "is_hide" field if the given value is not nil.
func (agtruo *AsGroupTenantRelationsUpdateOne) SetNillableIsHide(i *int64) *AsGroupTenantRelationsUpdateOne {
	if i != nil {
		agtruo.SetIsHide(*i)
	}
	return agtruo
}

// AddIsHide adds i to the "is_hide" field.
func (agtruo *AsGroupTenantRelationsUpdateOne) AddIsHide(i int64) *AsGroupTenantRelationsUpdateOne {
	agtruo.mutation.AddIsHide(i)
	return agtruo
}

// ClearIsHide clears the value of the "is_hide" field.
func (agtruo *AsGroupTenantRelationsUpdateOne) ClearIsHide() *AsGroupTenantRelationsUpdateOne {
	agtruo.mutation.ClearIsHide()
	return agtruo
}

// SetIsDeleted sets the "is_deleted" field.
func (agtruo *AsGroupTenantRelationsUpdateOne) SetIsDeleted(i int64) *AsGroupTenantRelationsUpdateOne {
	agtruo.mutation.ResetIsDeleted()
	agtruo.mutation.SetIsDeleted(i)
	return agtruo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (agtruo *AsGroupTenantRelationsUpdateOne) SetNillableIsDeleted(i *int64) *AsGroupTenantRelationsUpdateOne {
	if i != nil {
		agtruo.SetIsDeleted(*i)
	}
	return agtruo
}

// AddIsDeleted adds i to the "is_deleted" field.
func (agtruo *AsGroupTenantRelationsUpdateOne) AddIsDeleted(i int64) *AsGroupTenantRelationsUpdateOne {
	agtruo.mutation.AddIsDeleted(i)
	return agtruo
}

// SetStatus sets the "status" field.
func (agtruo *AsGroupTenantRelationsUpdateOne) SetStatus(i int64) *AsGroupTenantRelationsUpdateOne {
	agtruo.mutation.ResetStatus()
	agtruo.mutation.SetStatus(i)
	return agtruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (agtruo *AsGroupTenantRelationsUpdateOne) SetNillableStatus(i *int64) *AsGroupTenantRelationsUpdateOne {
	if i != nil {
		agtruo.SetStatus(*i)
	}
	return agtruo
}

// AddStatus adds i to the "status" field.
func (agtruo *AsGroupTenantRelationsUpdateOne) AddStatus(i int64) *AsGroupTenantRelationsUpdateOne {
	agtruo.mutation.AddStatus(i)
	return agtruo
}

// ClearStatus clears the value of the "status" field.
func (agtruo *AsGroupTenantRelationsUpdateOne) ClearStatus() *AsGroupTenantRelationsUpdateOne {
	agtruo.mutation.ClearStatus()
	return agtruo
}

// SetCreateUser sets the "create_user" field.
func (agtruo *AsGroupTenantRelationsUpdateOne) SetCreateUser(i int64) *AsGroupTenantRelationsUpdateOne {
	agtruo.mutation.ResetCreateUser()
	agtruo.mutation.SetCreateUser(i)
	return agtruo
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (agtruo *AsGroupTenantRelationsUpdateOne) SetNillableCreateUser(i *int64) *AsGroupTenantRelationsUpdateOne {
	if i != nil {
		agtruo.SetCreateUser(*i)
	}
	return agtruo
}

// AddCreateUser adds i to the "create_user" field.
func (agtruo *AsGroupTenantRelationsUpdateOne) AddCreateUser(i int64) *AsGroupTenantRelationsUpdateOne {
	agtruo.mutation.AddCreateUser(i)
	return agtruo
}

// ClearCreateUser clears the value of the "create_user" field.
func (agtruo *AsGroupTenantRelationsUpdateOne) ClearCreateUser() *AsGroupTenantRelationsUpdateOne {
	agtruo.mutation.ClearCreateUser()
	return agtruo
}

// SetUpdateUser sets the "update_user" field.
func (agtruo *AsGroupTenantRelationsUpdateOne) SetUpdateUser(i int64) *AsGroupTenantRelationsUpdateOne {
	agtruo.mutation.ResetUpdateUser()
	agtruo.mutation.SetUpdateUser(i)
	return agtruo
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (agtruo *AsGroupTenantRelationsUpdateOne) SetNillableUpdateUser(i *int64) *AsGroupTenantRelationsUpdateOne {
	if i != nil {
		agtruo.SetUpdateUser(*i)
	}
	return agtruo
}

// AddUpdateUser adds i to the "update_user" field.
func (agtruo *AsGroupTenantRelationsUpdateOne) AddUpdateUser(i int64) *AsGroupTenantRelationsUpdateOne {
	agtruo.mutation.AddUpdateUser(i)
	return agtruo
}

// ClearUpdateUser clears the value of the "update_user" field.
func (agtruo *AsGroupTenantRelationsUpdateOne) ClearUpdateUser() *AsGroupTenantRelationsUpdateOne {
	agtruo.mutation.ClearUpdateUser()
	return agtruo
}

// SetUpdateTime sets the "update_time" field.
func (agtruo *AsGroupTenantRelationsUpdateOne) SetUpdateTime(dt date.DateTime) *AsGroupTenantRelationsUpdateOne {
	agtruo.mutation.SetUpdateTime(dt)
	return agtruo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (agtruo *AsGroupTenantRelationsUpdateOne) ClearUpdateTime() *AsGroupTenantRelationsUpdateOne {
	agtruo.mutation.ClearUpdateTime()
	return agtruo
}

// SetGroupID sets the "group" edge to the AsAllGroup entity by ID.
func (agtruo *AsGroupTenantRelationsUpdateOne) SetGroupID(id int64) *AsGroupTenantRelationsUpdateOne {
	agtruo.mutation.SetGroupID(id)
	return agtruo
}

// SetNillableGroupID sets the "group" edge to the AsAllGroup entity by ID if the given value is not nil.
func (agtruo *AsGroupTenantRelationsUpdateOne) SetNillableGroupID(id *int64) *AsGroupTenantRelationsUpdateOne {
	if id != nil {
		agtruo = agtruo.SetGroupID(*id)
	}
	return agtruo
}

// SetGroup sets the "group" edge to the AsAllGroup entity.
func (agtruo *AsGroupTenantRelationsUpdateOne) SetGroup(a *AsAllGroup) *AsGroupTenantRelationsUpdateOne {
	return agtruo.SetGroupID(a.ID)
}

// SetTenantID sets the "tenant" edge to the AsTenant entity by ID.
func (agtruo *AsGroupTenantRelationsUpdateOne) SetTenantID(id int64) *AsGroupTenantRelationsUpdateOne {
	agtruo.mutation.SetTenantID(id)
	return agtruo
}

// SetNillableTenantID sets the "tenant" edge to the AsTenant entity by ID if the given value is not nil.
func (agtruo *AsGroupTenantRelationsUpdateOne) SetNillableTenantID(id *int64) *AsGroupTenantRelationsUpdateOne {
	if id != nil {
		agtruo = agtruo.SetTenantID(*id)
	}
	return agtruo
}

// SetTenant sets the "tenant" edge to the AsTenant entity.
func (agtruo *AsGroupTenantRelationsUpdateOne) SetTenant(a *AsTenant) *AsGroupTenantRelationsUpdateOne {
	return agtruo.SetTenantID(a.ID)
}

// Mutation returns the AsGroupTenantRelationsMutation object of the builder.
func (agtruo *AsGroupTenantRelationsUpdateOne) Mutation() *AsGroupTenantRelationsMutation {
	return agtruo.mutation
}

// ClearGroup clears the "group" edge to the AsAllGroup entity.
func (agtruo *AsGroupTenantRelationsUpdateOne) ClearGroup() *AsGroupTenantRelationsUpdateOne {
	agtruo.mutation.ClearGroup()
	return agtruo
}

// ClearTenant clears the "tenant" edge to the AsTenant entity.
func (agtruo *AsGroupTenantRelationsUpdateOne) ClearTenant() *AsGroupTenantRelationsUpdateOne {
	agtruo.mutation.ClearTenant()
	return agtruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (agtruo *AsGroupTenantRelationsUpdateOne) Select(field string, fields ...string) *AsGroupTenantRelationsUpdateOne {
	agtruo.fields = append([]string{field}, fields...)
	return agtruo
}

// Save executes the query and returns the updated AsGroupTenantRelations entity.
func (agtruo *AsGroupTenantRelationsUpdateOne) Save(ctx context.Context) (*AsGroupTenantRelations, error) {
	var (
		err  error
		node *AsGroupTenantRelations
	)
	agtruo.defaults()
	if len(agtruo.hooks) == 0 {
		node, err = agtruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsGroupTenantRelationsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			agtruo.mutation = mutation
			node, err = agtruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(agtruo.hooks) - 1; i >= 0; i-- {
			if agtruo.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = agtruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, agtruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (agtruo *AsGroupTenantRelationsUpdateOne) SaveX(ctx context.Context) *AsGroupTenantRelations {
	node, err := agtruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (agtruo *AsGroupTenantRelationsUpdateOne) Exec(ctx context.Context) error {
	_, err := agtruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agtruo *AsGroupTenantRelationsUpdateOne) ExecX(ctx context.Context) {
	if err := agtruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (agtruo *AsGroupTenantRelationsUpdateOne) defaults() {
	if _, ok := agtruo.mutation.UpdateTime(); !ok && !agtruo.mutation.UpdateTimeCleared() {
		v := asgrouptenantrelations.UpdateDefaultUpdateTime()
		agtruo.mutation.SetUpdateTime(v)
	}
}

func (agtruo *AsGroupTenantRelationsUpdateOne) sqlSave(ctx context.Context) (_node *AsGroupTenantRelations, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asgrouptenantrelations.Table,
			Columns: asgrouptenantrelations.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asgrouptenantrelations.FieldID,
			},
		},
	}
	id, ok := agtruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`schema: missing "AsGroupTenantRelations.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := agtruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asgrouptenantrelations.FieldID)
		for _, f := range fields {
			if !asgrouptenantrelations.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("schema: invalid field %q for query", f)}
			}
			if f != asgrouptenantrelations.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := agtruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := agtruo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asgrouptenantrelations.FieldType,
		})
	}
	if value, ok := agtruo.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asgrouptenantrelations.FieldType,
		})
	}
	if agtruo.mutation.TypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asgrouptenantrelations.FieldType,
		})
	}
	if value, ok := agtruo.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asgrouptenantrelations.FieldSort,
		})
	}
	if value, ok := agtruo.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asgrouptenantrelations.FieldSort,
		})
	}
	if agtruo.mutation.SortCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asgrouptenantrelations.FieldSort,
		})
	}
	if value, ok := agtruo.mutation.Serial(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asgrouptenantrelations.FieldSerial,
		})
	}
	if value, ok := agtruo.mutation.AddedSerial(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asgrouptenantrelations.FieldSerial,
		})
	}
	if agtruo.mutation.SerialCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asgrouptenantrelations.FieldSerial,
		})
	}
	if value, ok := agtruo.mutation.GroupCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asgrouptenantrelations.FieldGroupCode,
		})
	}
	if agtruo.mutation.GroupCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asgrouptenantrelations.FieldGroupCode,
		})
	}
	if value, ok := agtruo.mutation.ExpiresTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asgrouptenantrelations.FieldExpiresTime,
		})
	}
	if agtruo.mutation.ExpiresTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asgrouptenantrelations.FieldExpiresTime,
		})
	}
	if value, ok := agtruo.mutation.IsHide(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asgrouptenantrelations.FieldIsHide,
		})
	}
	if value, ok := agtruo.mutation.AddedIsHide(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asgrouptenantrelations.FieldIsHide,
		})
	}
	if agtruo.mutation.IsHideCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asgrouptenantrelations.FieldIsHide,
		})
	}
	if value, ok := agtruo.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asgrouptenantrelations.FieldIsDeleted,
		})
	}
	if value, ok := agtruo.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asgrouptenantrelations.FieldIsDeleted,
		})
	}
	if value, ok := agtruo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asgrouptenantrelations.FieldStatus,
		})
	}
	if value, ok := agtruo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asgrouptenantrelations.FieldStatus,
		})
	}
	if agtruo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asgrouptenantrelations.FieldStatus,
		})
	}
	if value, ok := agtruo.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asgrouptenantrelations.FieldCreateUser,
		})
	}
	if value, ok := agtruo.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asgrouptenantrelations.FieldCreateUser,
		})
	}
	if agtruo.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asgrouptenantrelations.FieldCreateUser,
		})
	}
	if value, ok := agtruo.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asgrouptenantrelations.FieldUpdateUser,
		})
	}
	if value, ok := agtruo.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asgrouptenantrelations.FieldUpdateUser,
		})
	}
	if agtruo.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asgrouptenantrelations.FieldUpdateUser,
		})
	}
	if agtruo.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asgrouptenantrelations.FieldCreateTime,
		})
	}
	if value, ok := agtruo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asgrouptenantrelations.FieldUpdateTime,
		})
	}
	if agtruo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asgrouptenantrelations.FieldUpdateTime,
		})
	}
	if agtruo.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asgrouptenantrelations.GroupTable,
			Columns: []string{asgrouptenantrelations.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asallgroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := agtruo.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asgrouptenantrelations.GroupTable,
			Columns: []string{asgrouptenantrelations.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asallgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if agtruo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asgrouptenantrelations.TenantTable,
			Columns: []string{asgrouptenantrelations.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: astenant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := agtruo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asgrouptenantrelations.TenantTable,
			Columns: []string{asgrouptenantrelations.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: astenant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AsGroupTenantRelations{config: agtruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, agtruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asgrouptenantrelations.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
