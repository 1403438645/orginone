// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/aspersonsingle"
	"orginone/common/schema/predicate"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsPersonSingleUpdate is the builder for updating AsPersonSingle entities.
type AsPersonSingleUpdate struct {
	config
	hooks    []Hook
	mutation *AsPersonSingleMutation
}

// Where appends a list predicates to the AsPersonSingleUpdate builder.
func (apsu *AsPersonSingleUpdate) Where(ps ...predicate.AsPersonSingle) *AsPersonSingleUpdate {
	apsu.mutation.Where(ps...)
	return apsu
}

// SetRealName sets the "real_name" field.
func (apsu *AsPersonSingleUpdate) SetRealName(s string) *AsPersonSingleUpdate {
	apsu.mutation.SetRealName(s)
	return apsu
}

// SetGender sets the "gender" field.
func (apsu *AsPersonSingleUpdate) SetGender(i int64) *AsPersonSingleUpdate {
	apsu.mutation.ResetGender()
	apsu.mutation.SetGender(i)
	return apsu
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (apsu *AsPersonSingleUpdate) SetNillableGender(i *int64) *AsPersonSingleUpdate {
	if i != nil {
		apsu.SetGender(*i)
	}
	return apsu
}

// AddGender adds i to the "gender" field.
func (apsu *AsPersonSingleUpdate) AddGender(i int64) *AsPersonSingleUpdate {
	apsu.mutation.AddGender(i)
	return apsu
}

// ClearGender clears the value of the "gender" field.
func (apsu *AsPersonSingleUpdate) ClearGender() *AsPersonSingleUpdate {
	apsu.mutation.ClearGender()
	return apsu
}

// SetUserBirthday sets the "user_birthday" field.
func (apsu *AsPersonSingleUpdate) SetUserBirthday(dt date.DateTime) *AsPersonSingleUpdate {
	apsu.mutation.SetUserBirthday(dt)
	return apsu
}

// SetNillableUserBirthday sets the "user_birthday" field if the given value is not nil.
func (apsu *AsPersonSingleUpdate) SetNillableUserBirthday(dt *date.DateTime) *AsPersonSingleUpdate {
	if dt != nil {
		apsu.SetUserBirthday(*dt)
	}
	return apsu
}

// ClearUserBirthday clears the value of the "user_birthday" field.
func (apsu *AsPersonSingleUpdate) ClearUserBirthday() *AsPersonSingleUpdate {
	apsu.mutation.ClearUserBirthday()
	return apsu
}

// SetUserEmail sets the "user_email" field.
func (apsu *AsPersonSingleUpdate) SetUserEmail(s string) *AsPersonSingleUpdate {
	apsu.mutation.SetUserEmail(s)
	return apsu
}

// SetNillableUserEmail sets the "user_email" field if the given value is not nil.
func (apsu *AsPersonSingleUpdate) SetNillableUserEmail(s *string) *AsPersonSingleUpdate {
	if s != nil {
		apsu.SetUserEmail(*s)
	}
	return apsu
}

// ClearUserEmail clears the value of the "user_email" field.
func (apsu *AsPersonSingleUpdate) ClearUserEmail() *AsPersonSingleUpdate {
	apsu.mutation.ClearUserEmail()
	return apsu
}

// SetUserPhoto sets the "user_photo" field.
func (apsu *AsPersonSingleUpdate) SetUserPhoto(s string) *AsPersonSingleUpdate {
	apsu.mutation.SetUserPhoto(s)
	return apsu
}

// SetNillableUserPhoto sets the "user_photo" field if the given value is not nil.
func (apsu *AsPersonSingleUpdate) SetNillableUserPhoto(s *string) *AsPersonSingleUpdate {
	if s != nil {
		apsu.SetUserPhoto(*s)
	}
	return apsu
}

// ClearUserPhoto clears the value of the "user_photo" field.
func (apsu *AsPersonSingleUpdate) ClearUserPhoto() *AsPersonSingleUpdate {
	apsu.mutation.ClearUserPhoto()
	return apsu
}

// SetPhoneNumber sets the "phone_number" field.
func (apsu *AsPersonSingleUpdate) SetPhoneNumber(s string) *AsPersonSingleUpdate {
	apsu.mutation.SetPhoneNumber(s)
	return apsu
}

// SetProvince sets the "province" field.
func (apsu *AsPersonSingleUpdate) SetProvince(s string) *AsPersonSingleUpdate {
	apsu.mutation.SetProvince(s)
	return apsu
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (apsu *AsPersonSingleUpdate) SetNillableProvince(s *string) *AsPersonSingleUpdate {
	if s != nil {
		apsu.SetProvince(*s)
	}
	return apsu
}

// ClearProvince clears the value of the "province" field.
func (apsu *AsPersonSingleUpdate) ClearProvince() *AsPersonSingleUpdate {
	apsu.mutation.ClearProvince()
	return apsu
}

// SetCity sets the "city" field.
func (apsu *AsPersonSingleUpdate) SetCity(s string) *AsPersonSingleUpdate {
	apsu.mutation.SetCity(s)
	return apsu
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (apsu *AsPersonSingleUpdate) SetNillableCity(s *string) *AsPersonSingleUpdate {
	if s != nil {
		apsu.SetCity(*s)
	}
	return apsu
}

// ClearCity clears the value of the "city" field.
func (apsu *AsPersonSingleUpdate) ClearCity() *AsPersonSingleUpdate {
	apsu.mutation.ClearCity()
	return apsu
}

// SetStreetAddress sets the "street_address" field.
func (apsu *AsPersonSingleUpdate) SetStreetAddress(s string) *AsPersonSingleUpdate {
	apsu.mutation.SetStreetAddress(s)
	return apsu
}

// SetNillableStreetAddress sets the "street_address" field if the given value is not nil.
func (apsu *AsPersonSingleUpdate) SetNillableStreetAddress(s *string) *AsPersonSingleUpdate {
	if s != nil {
		apsu.SetStreetAddress(*s)
	}
	return apsu
}

// ClearStreetAddress clears the value of the "street_address" field.
func (apsu *AsPersonSingleUpdate) ClearStreetAddress() *AsPersonSingleUpdate {
	apsu.mutation.ClearStreetAddress()
	return apsu
}

// SetIsDeleted sets the "is_deleted" field.
func (apsu *AsPersonSingleUpdate) SetIsDeleted(i int64) *AsPersonSingleUpdate {
	apsu.mutation.ResetIsDeleted()
	apsu.mutation.SetIsDeleted(i)
	return apsu
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (apsu *AsPersonSingleUpdate) SetNillableIsDeleted(i *int64) *AsPersonSingleUpdate {
	if i != nil {
		apsu.SetIsDeleted(*i)
	}
	return apsu
}

// AddIsDeleted adds i to the "is_deleted" field.
func (apsu *AsPersonSingleUpdate) AddIsDeleted(i int64) *AsPersonSingleUpdate {
	apsu.mutation.AddIsDeleted(i)
	return apsu
}

// SetStatus sets the "status" field.
func (apsu *AsPersonSingleUpdate) SetStatus(i int64) *AsPersonSingleUpdate {
	apsu.mutation.ResetStatus()
	apsu.mutation.SetStatus(i)
	return apsu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (apsu *AsPersonSingleUpdate) SetNillableStatus(i *int64) *AsPersonSingleUpdate {
	if i != nil {
		apsu.SetStatus(*i)
	}
	return apsu
}

// AddStatus adds i to the "status" field.
func (apsu *AsPersonSingleUpdate) AddStatus(i int64) *AsPersonSingleUpdate {
	apsu.mutation.AddStatus(i)
	return apsu
}

// ClearStatus clears the value of the "status" field.
func (apsu *AsPersonSingleUpdate) ClearStatus() *AsPersonSingleUpdate {
	apsu.mutation.ClearStatus()
	return apsu
}

// SetCreateUser sets the "create_user" field.
func (apsu *AsPersonSingleUpdate) SetCreateUser(i int64) *AsPersonSingleUpdate {
	apsu.mutation.ResetCreateUser()
	apsu.mutation.SetCreateUser(i)
	return apsu
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (apsu *AsPersonSingleUpdate) SetNillableCreateUser(i *int64) *AsPersonSingleUpdate {
	if i != nil {
		apsu.SetCreateUser(*i)
	}
	return apsu
}

// AddCreateUser adds i to the "create_user" field.
func (apsu *AsPersonSingleUpdate) AddCreateUser(i int64) *AsPersonSingleUpdate {
	apsu.mutation.AddCreateUser(i)
	return apsu
}

// ClearCreateUser clears the value of the "create_user" field.
func (apsu *AsPersonSingleUpdate) ClearCreateUser() *AsPersonSingleUpdate {
	apsu.mutation.ClearCreateUser()
	return apsu
}

// SetUpdateUser sets the "update_user" field.
func (apsu *AsPersonSingleUpdate) SetUpdateUser(i int64) *AsPersonSingleUpdate {
	apsu.mutation.ResetUpdateUser()
	apsu.mutation.SetUpdateUser(i)
	return apsu
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (apsu *AsPersonSingleUpdate) SetNillableUpdateUser(i *int64) *AsPersonSingleUpdate {
	if i != nil {
		apsu.SetUpdateUser(*i)
	}
	return apsu
}

// AddUpdateUser adds i to the "update_user" field.
func (apsu *AsPersonSingleUpdate) AddUpdateUser(i int64) *AsPersonSingleUpdate {
	apsu.mutation.AddUpdateUser(i)
	return apsu
}

// ClearUpdateUser clears the value of the "update_user" field.
func (apsu *AsPersonSingleUpdate) ClearUpdateUser() *AsPersonSingleUpdate {
	apsu.mutation.ClearUpdateUser()
	return apsu
}

// SetUpdateTime sets the "update_time" field.
func (apsu *AsPersonSingleUpdate) SetUpdateTime(dt date.DateTime) *AsPersonSingleUpdate {
	apsu.mutation.SetUpdateTime(dt)
	return apsu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (apsu *AsPersonSingleUpdate) ClearUpdateTime() *AsPersonSingleUpdate {
	apsu.mutation.ClearUpdateTime()
	return apsu
}

// Mutation returns the AsPersonSingleMutation object of the builder.
func (apsu *AsPersonSingleUpdate) Mutation() *AsPersonSingleMutation {
	return apsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (apsu *AsPersonSingleUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	apsu.defaults()
	if len(apsu.hooks) == 0 {
		affected, err = apsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsPersonSingleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			apsu.mutation = mutation
			affected, err = apsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(apsu.hooks) - 1; i >= 0; i-- {
			if apsu.hooks[i] == nil {
				return 0, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = apsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, apsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (apsu *AsPersonSingleUpdate) SaveX(ctx context.Context) int {
	affected, err := apsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (apsu *AsPersonSingleUpdate) Exec(ctx context.Context) error {
	_, err := apsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apsu *AsPersonSingleUpdate) ExecX(ctx context.Context) {
	if err := apsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (apsu *AsPersonSingleUpdate) defaults() {
	if _, ok := apsu.mutation.UpdateTime(); !ok && !apsu.mutation.UpdateTimeCleared() {
		v := aspersonsingle.UpdateDefaultUpdateTime()
		apsu.mutation.SetUpdateTime(v)
	}
}

func (apsu *AsPersonSingleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   aspersonsingle.Table,
			Columns: aspersonsingle.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: aspersonsingle.FieldID,
			},
		},
	}
	if ps := apsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := apsu.mutation.RealName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aspersonsingle.FieldRealName,
		})
	}
	if apsu.mutation.IDCardCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: aspersonsingle.FieldIDCard,
		})
	}
	if value, ok := apsu.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aspersonsingle.FieldGender,
		})
	}
	if value, ok := apsu.mutation.AddedGender(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aspersonsingle.FieldGender,
		})
	}
	if apsu.mutation.GenderCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: aspersonsingle.FieldGender,
		})
	}
	if value, ok := apsu.mutation.UserBirthday(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: aspersonsingle.FieldUserBirthday,
		})
	}
	if apsu.mutation.UserBirthdayCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: aspersonsingle.FieldUserBirthday,
		})
	}
	if value, ok := apsu.mutation.UserEmail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aspersonsingle.FieldUserEmail,
		})
	}
	if apsu.mutation.UserEmailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: aspersonsingle.FieldUserEmail,
		})
	}
	if value, ok := apsu.mutation.UserPhoto(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aspersonsingle.FieldUserPhoto,
		})
	}
	if apsu.mutation.UserPhotoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: aspersonsingle.FieldUserPhoto,
		})
	}
	if value, ok := apsu.mutation.PhoneNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aspersonsingle.FieldPhoneNumber,
		})
	}
	if value, ok := apsu.mutation.Province(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aspersonsingle.FieldProvince,
		})
	}
	if apsu.mutation.ProvinceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: aspersonsingle.FieldProvince,
		})
	}
	if value, ok := apsu.mutation.City(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aspersonsingle.FieldCity,
		})
	}
	if apsu.mutation.CityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: aspersonsingle.FieldCity,
		})
	}
	if value, ok := apsu.mutation.StreetAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aspersonsingle.FieldStreetAddress,
		})
	}
	if apsu.mutation.StreetAddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: aspersonsingle.FieldStreetAddress,
		})
	}
	if value, ok := apsu.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aspersonsingle.FieldIsDeleted,
		})
	}
	if value, ok := apsu.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aspersonsingle.FieldIsDeleted,
		})
	}
	if value, ok := apsu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aspersonsingle.FieldStatus,
		})
	}
	if value, ok := apsu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aspersonsingle.FieldStatus,
		})
	}
	if apsu.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: aspersonsingle.FieldStatus,
		})
	}
	if value, ok := apsu.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aspersonsingle.FieldCreateUser,
		})
	}
	if value, ok := apsu.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aspersonsingle.FieldCreateUser,
		})
	}
	if apsu.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: aspersonsingle.FieldCreateUser,
		})
	}
	if value, ok := apsu.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aspersonsingle.FieldUpdateUser,
		})
	}
	if value, ok := apsu.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aspersonsingle.FieldUpdateUser,
		})
	}
	if apsu.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: aspersonsingle.FieldUpdateUser,
		})
	}
	if apsu.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: aspersonsingle.FieldCreateTime,
		})
	}
	if value, ok := apsu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: aspersonsingle.FieldUpdateTime,
		})
	}
	if apsu.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: aspersonsingle.FieldUpdateTime,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, apsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{aspersonsingle.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AsPersonSingleUpdateOne is the builder for updating a single AsPersonSingle entity.
type AsPersonSingleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AsPersonSingleMutation
}

// SetRealName sets the "real_name" field.
func (apsuo *AsPersonSingleUpdateOne) SetRealName(s string) *AsPersonSingleUpdateOne {
	apsuo.mutation.SetRealName(s)
	return apsuo
}

// SetGender sets the "gender" field.
func (apsuo *AsPersonSingleUpdateOne) SetGender(i int64) *AsPersonSingleUpdateOne {
	apsuo.mutation.ResetGender()
	apsuo.mutation.SetGender(i)
	return apsuo
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (apsuo *AsPersonSingleUpdateOne) SetNillableGender(i *int64) *AsPersonSingleUpdateOne {
	if i != nil {
		apsuo.SetGender(*i)
	}
	return apsuo
}

// AddGender adds i to the "gender" field.
func (apsuo *AsPersonSingleUpdateOne) AddGender(i int64) *AsPersonSingleUpdateOne {
	apsuo.mutation.AddGender(i)
	return apsuo
}

// ClearGender clears the value of the "gender" field.
func (apsuo *AsPersonSingleUpdateOne) ClearGender() *AsPersonSingleUpdateOne {
	apsuo.mutation.ClearGender()
	return apsuo
}

// SetUserBirthday sets the "user_birthday" field.
func (apsuo *AsPersonSingleUpdateOne) SetUserBirthday(dt date.DateTime) *AsPersonSingleUpdateOne {
	apsuo.mutation.SetUserBirthday(dt)
	return apsuo
}

// SetNillableUserBirthday sets the "user_birthday" field if the given value is not nil.
func (apsuo *AsPersonSingleUpdateOne) SetNillableUserBirthday(dt *date.DateTime) *AsPersonSingleUpdateOne {
	if dt != nil {
		apsuo.SetUserBirthday(*dt)
	}
	return apsuo
}

// ClearUserBirthday clears the value of the "user_birthday" field.
func (apsuo *AsPersonSingleUpdateOne) ClearUserBirthday() *AsPersonSingleUpdateOne {
	apsuo.mutation.ClearUserBirthday()
	return apsuo
}

// SetUserEmail sets the "user_email" field.
func (apsuo *AsPersonSingleUpdateOne) SetUserEmail(s string) *AsPersonSingleUpdateOne {
	apsuo.mutation.SetUserEmail(s)
	return apsuo
}

// SetNillableUserEmail sets the "user_email" field if the given value is not nil.
func (apsuo *AsPersonSingleUpdateOne) SetNillableUserEmail(s *string) *AsPersonSingleUpdateOne {
	if s != nil {
		apsuo.SetUserEmail(*s)
	}
	return apsuo
}

// ClearUserEmail clears the value of the "user_email" field.
func (apsuo *AsPersonSingleUpdateOne) ClearUserEmail() *AsPersonSingleUpdateOne {
	apsuo.mutation.ClearUserEmail()
	return apsuo
}

// SetUserPhoto sets the "user_photo" field.
func (apsuo *AsPersonSingleUpdateOne) SetUserPhoto(s string) *AsPersonSingleUpdateOne {
	apsuo.mutation.SetUserPhoto(s)
	return apsuo
}

// SetNillableUserPhoto sets the "user_photo" field if the given value is not nil.
func (apsuo *AsPersonSingleUpdateOne) SetNillableUserPhoto(s *string) *AsPersonSingleUpdateOne {
	if s != nil {
		apsuo.SetUserPhoto(*s)
	}
	return apsuo
}

// ClearUserPhoto clears the value of the "user_photo" field.
func (apsuo *AsPersonSingleUpdateOne) ClearUserPhoto() *AsPersonSingleUpdateOne {
	apsuo.mutation.ClearUserPhoto()
	return apsuo
}

// SetPhoneNumber sets the "phone_number" field.
func (apsuo *AsPersonSingleUpdateOne) SetPhoneNumber(s string) *AsPersonSingleUpdateOne {
	apsuo.mutation.SetPhoneNumber(s)
	return apsuo
}

// SetProvince sets the "province" field.
func (apsuo *AsPersonSingleUpdateOne) SetProvince(s string) *AsPersonSingleUpdateOne {
	apsuo.mutation.SetProvince(s)
	return apsuo
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (apsuo *AsPersonSingleUpdateOne) SetNillableProvince(s *string) *AsPersonSingleUpdateOne {
	if s != nil {
		apsuo.SetProvince(*s)
	}
	return apsuo
}

// ClearProvince clears the value of the "province" field.
func (apsuo *AsPersonSingleUpdateOne) ClearProvince() *AsPersonSingleUpdateOne {
	apsuo.mutation.ClearProvince()
	return apsuo
}

// SetCity sets the "city" field.
func (apsuo *AsPersonSingleUpdateOne) SetCity(s string) *AsPersonSingleUpdateOne {
	apsuo.mutation.SetCity(s)
	return apsuo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (apsuo *AsPersonSingleUpdateOne) SetNillableCity(s *string) *AsPersonSingleUpdateOne {
	if s != nil {
		apsuo.SetCity(*s)
	}
	return apsuo
}

// ClearCity clears the value of the "city" field.
func (apsuo *AsPersonSingleUpdateOne) ClearCity() *AsPersonSingleUpdateOne {
	apsuo.mutation.ClearCity()
	return apsuo
}

// SetStreetAddress sets the "street_address" field.
func (apsuo *AsPersonSingleUpdateOne) SetStreetAddress(s string) *AsPersonSingleUpdateOne {
	apsuo.mutation.SetStreetAddress(s)
	return apsuo
}

// SetNillableStreetAddress sets the "street_address" field if the given value is not nil.
func (apsuo *AsPersonSingleUpdateOne) SetNillableStreetAddress(s *string) *AsPersonSingleUpdateOne {
	if s != nil {
		apsuo.SetStreetAddress(*s)
	}
	return apsuo
}

// ClearStreetAddress clears the value of the "street_address" field.
func (apsuo *AsPersonSingleUpdateOne) ClearStreetAddress() *AsPersonSingleUpdateOne {
	apsuo.mutation.ClearStreetAddress()
	return apsuo
}

// SetIsDeleted sets the "is_deleted" field.
func (apsuo *AsPersonSingleUpdateOne) SetIsDeleted(i int64) *AsPersonSingleUpdateOne {
	apsuo.mutation.ResetIsDeleted()
	apsuo.mutation.SetIsDeleted(i)
	return apsuo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (apsuo *AsPersonSingleUpdateOne) SetNillableIsDeleted(i *int64) *AsPersonSingleUpdateOne {
	if i != nil {
		apsuo.SetIsDeleted(*i)
	}
	return apsuo
}

// AddIsDeleted adds i to the "is_deleted" field.
func (apsuo *AsPersonSingleUpdateOne) AddIsDeleted(i int64) *AsPersonSingleUpdateOne {
	apsuo.mutation.AddIsDeleted(i)
	return apsuo
}

// SetStatus sets the "status" field.
func (apsuo *AsPersonSingleUpdateOne) SetStatus(i int64) *AsPersonSingleUpdateOne {
	apsuo.mutation.ResetStatus()
	apsuo.mutation.SetStatus(i)
	return apsuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (apsuo *AsPersonSingleUpdateOne) SetNillableStatus(i *int64) *AsPersonSingleUpdateOne {
	if i != nil {
		apsuo.SetStatus(*i)
	}
	return apsuo
}

// AddStatus adds i to the "status" field.
func (apsuo *AsPersonSingleUpdateOne) AddStatus(i int64) *AsPersonSingleUpdateOne {
	apsuo.mutation.AddStatus(i)
	return apsuo
}

// ClearStatus clears the value of the "status" field.
func (apsuo *AsPersonSingleUpdateOne) ClearStatus() *AsPersonSingleUpdateOne {
	apsuo.mutation.ClearStatus()
	return apsuo
}

// SetCreateUser sets the "create_user" field.
func (apsuo *AsPersonSingleUpdateOne) SetCreateUser(i int64) *AsPersonSingleUpdateOne {
	apsuo.mutation.ResetCreateUser()
	apsuo.mutation.SetCreateUser(i)
	return apsuo
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (apsuo *AsPersonSingleUpdateOne) SetNillableCreateUser(i *int64) *AsPersonSingleUpdateOne {
	if i != nil {
		apsuo.SetCreateUser(*i)
	}
	return apsuo
}

// AddCreateUser adds i to the "create_user" field.
func (apsuo *AsPersonSingleUpdateOne) AddCreateUser(i int64) *AsPersonSingleUpdateOne {
	apsuo.mutation.AddCreateUser(i)
	return apsuo
}

// ClearCreateUser clears the value of the "create_user" field.
func (apsuo *AsPersonSingleUpdateOne) ClearCreateUser() *AsPersonSingleUpdateOne {
	apsuo.mutation.ClearCreateUser()
	return apsuo
}

// SetUpdateUser sets the "update_user" field.
func (apsuo *AsPersonSingleUpdateOne) SetUpdateUser(i int64) *AsPersonSingleUpdateOne {
	apsuo.mutation.ResetUpdateUser()
	apsuo.mutation.SetUpdateUser(i)
	return apsuo
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (apsuo *AsPersonSingleUpdateOne) SetNillableUpdateUser(i *int64) *AsPersonSingleUpdateOne {
	if i != nil {
		apsuo.SetUpdateUser(*i)
	}
	return apsuo
}

// AddUpdateUser adds i to the "update_user" field.
func (apsuo *AsPersonSingleUpdateOne) AddUpdateUser(i int64) *AsPersonSingleUpdateOne {
	apsuo.mutation.AddUpdateUser(i)
	return apsuo
}

// ClearUpdateUser clears the value of the "update_user" field.
func (apsuo *AsPersonSingleUpdateOne) ClearUpdateUser() *AsPersonSingleUpdateOne {
	apsuo.mutation.ClearUpdateUser()
	return apsuo
}

// SetUpdateTime sets the "update_time" field.
func (apsuo *AsPersonSingleUpdateOne) SetUpdateTime(dt date.DateTime) *AsPersonSingleUpdateOne {
	apsuo.mutation.SetUpdateTime(dt)
	return apsuo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (apsuo *AsPersonSingleUpdateOne) ClearUpdateTime() *AsPersonSingleUpdateOne {
	apsuo.mutation.ClearUpdateTime()
	return apsuo
}

// Mutation returns the AsPersonSingleMutation object of the builder.
func (apsuo *AsPersonSingleUpdateOne) Mutation() *AsPersonSingleMutation {
	return apsuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (apsuo *AsPersonSingleUpdateOne) Select(field string, fields ...string) *AsPersonSingleUpdateOne {
	apsuo.fields = append([]string{field}, fields...)
	return apsuo
}

// Save executes the query and returns the updated AsPersonSingle entity.
func (apsuo *AsPersonSingleUpdateOne) Save(ctx context.Context) (*AsPersonSingle, error) {
	var (
		err  error
		node *AsPersonSingle
	)
	apsuo.defaults()
	if len(apsuo.hooks) == 0 {
		node, err = apsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsPersonSingleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			apsuo.mutation = mutation
			node, err = apsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(apsuo.hooks) - 1; i >= 0; i-- {
			if apsuo.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = apsuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, apsuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (apsuo *AsPersonSingleUpdateOne) SaveX(ctx context.Context) *AsPersonSingle {
	node, err := apsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (apsuo *AsPersonSingleUpdateOne) Exec(ctx context.Context) error {
	_, err := apsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apsuo *AsPersonSingleUpdateOne) ExecX(ctx context.Context) {
	if err := apsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (apsuo *AsPersonSingleUpdateOne) defaults() {
	if _, ok := apsuo.mutation.UpdateTime(); !ok && !apsuo.mutation.UpdateTimeCleared() {
		v := aspersonsingle.UpdateDefaultUpdateTime()
		apsuo.mutation.SetUpdateTime(v)
	}
}

func (apsuo *AsPersonSingleUpdateOne) sqlSave(ctx context.Context) (_node *AsPersonSingle, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   aspersonsingle.Table,
			Columns: aspersonsingle.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: aspersonsingle.FieldID,
			},
		},
	}
	id, ok := apsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`schema: missing "AsPersonSingle.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := apsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, aspersonsingle.FieldID)
		for _, f := range fields {
			if !aspersonsingle.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("schema: invalid field %q for query", f)}
			}
			if f != aspersonsingle.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := apsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := apsuo.mutation.RealName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aspersonsingle.FieldRealName,
		})
	}
	if apsuo.mutation.IDCardCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: aspersonsingle.FieldIDCard,
		})
	}
	if value, ok := apsuo.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aspersonsingle.FieldGender,
		})
	}
	if value, ok := apsuo.mutation.AddedGender(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aspersonsingle.FieldGender,
		})
	}
	if apsuo.mutation.GenderCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: aspersonsingle.FieldGender,
		})
	}
	if value, ok := apsuo.mutation.UserBirthday(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: aspersonsingle.FieldUserBirthday,
		})
	}
	if apsuo.mutation.UserBirthdayCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: aspersonsingle.FieldUserBirthday,
		})
	}
	if value, ok := apsuo.mutation.UserEmail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aspersonsingle.FieldUserEmail,
		})
	}
	if apsuo.mutation.UserEmailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: aspersonsingle.FieldUserEmail,
		})
	}
	if value, ok := apsuo.mutation.UserPhoto(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aspersonsingle.FieldUserPhoto,
		})
	}
	if apsuo.mutation.UserPhotoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: aspersonsingle.FieldUserPhoto,
		})
	}
	if value, ok := apsuo.mutation.PhoneNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aspersonsingle.FieldPhoneNumber,
		})
	}
	if value, ok := apsuo.mutation.Province(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aspersonsingle.FieldProvince,
		})
	}
	if apsuo.mutation.ProvinceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: aspersonsingle.FieldProvince,
		})
	}
	if value, ok := apsuo.mutation.City(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aspersonsingle.FieldCity,
		})
	}
	if apsuo.mutation.CityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: aspersonsingle.FieldCity,
		})
	}
	if value, ok := apsuo.mutation.StreetAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: aspersonsingle.FieldStreetAddress,
		})
	}
	if apsuo.mutation.StreetAddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: aspersonsingle.FieldStreetAddress,
		})
	}
	if value, ok := apsuo.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aspersonsingle.FieldIsDeleted,
		})
	}
	if value, ok := apsuo.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aspersonsingle.FieldIsDeleted,
		})
	}
	if value, ok := apsuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aspersonsingle.FieldStatus,
		})
	}
	if value, ok := apsuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aspersonsingle.FieldStatus,
		})
	}
	if apsuo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: aspersonsingle.FieldStatus,
		})
	}
	if value, ok := apsuo.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aspersonsingle.FieldCreateUser,
		})
	}
	if value, ok := apsuo.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aspersonsingle.FieldCreateUser,
		})
	}
	if apsuo.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: aspersonsingle.FieldCreateUser,
		})
	}
	if value, ok := apsuo.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aspersonsingle.FieldUpdateUser,
		})
	}
	if value, ok := apsuo.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aspersonsingle.FieldUpdateUser,
		})
	}
	if apsuo.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: aspersonsingle.FieldUpdateUser,
		})
	}
	if apsuo.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: aspersonsingle.FieldCreateTime,
		})
	}
	if value, ok := apsuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: aspersonsingle.FieldUpdateTime,
		})
	}
	if apsuo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: aspersonsingle.FieldUpdateTime,
		})
	}
	_node = &AsPersonSingle{config: apsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, apsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{aspersonsingle.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
