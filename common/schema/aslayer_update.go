// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/asallgroup"
	"orginone/common/schema/aslayer"
	"orginone/common/schema/predicate"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsLayerUpdate is the builder for updating AsLayer entities.
type AsLayerUpdate struct {
	config
	hooks    []Hook
	mutation *AsLayerMutation
}

// Where appends a list predicates to the AsLayerUpdate builder.
func (alu *AsLayerUpdate) Where(ps ...predicate.AsLayer) *AsLayerUpdate {
	alu.mutation.Where(ps...)
	return alu
}

// SetLayer sets the "layer" field.
func (alu *AsLayerUpdate) SetLayer(i int64) *AsLayerUpdate {
	alu.mutation.ResetLayer()
	alu.mutation.SetLayer(i)
	return alu
}

// SetNillableLayer sets the "layer" field if the given value is not nil.
func (alu *AsLayerUpdate) SetNillableLayer(i *int64) *AsLayerUpdate {
	if i != nil {
		alu.SetLayer(*i)
	}
	return alu
}

// AddLayer adds i to the "layer" field.
func (alu *AsLayerUpdate) AddLayer(i int64) *AsLayerUpdate {
	alu.mutation.AddLayer(i)
	return alu
}

// ClearLayer clears the value of the "layer" field.
func (alu *AsLayerUpdate) ClearLayer() *AsLayerUpdate {
	alu.mutation.ClearLayer()
	return alu
}

// SetWidth sets the "width" field.
func (alu *AsLayerUpdate) SetWidth(i int64) *AsLayerUpdate {
	alu.mutation.ResetWidth()
	alu.mutation.SetWidth(i)
	return alu
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (alu *AsLayerUpdate) SetNillableWidth(i *int64) *AsLayerUpdate {
	if i != nil {
		alu.SetWidth(*i)
	}
	return alu
}

// AddWidth adds i to the "width" field.
func (alu *AsLayerUpdate) AddWidth(i int64) *AsLayerUpdate {
	alu.mutation.AddWidth(i)
	return alu
}

// ClearWidth clears the value of the "width" field.
func (alu *AsLayerUpdate) ClearWidth() *AsLayerUpdate {
	alu.mutation.ClearWidth()
	return alu
}

// SetGroupID sets the "group_id" field.
func (alu *AsLayerUpdate) SetGroupID(i int64) *AsLayerUpdate {
	alu.mutation.SetGroupID(i)
	return alu
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (alu *AsLayerUpdate) SetNillableGroupID(i *int64) *AsLayerUpdate {
	if i != nil {
		alu.SetGroupID(*i)
	}
	return alu
}

// ClearGroupID clears the value of the "group_id" field.
func (alu *AsLayerUpdate) ClearGroupID() *AsLayerUpdate {
	alu.mutation.ClearGroupID()
	return alu
}

// SetIsDeleted sets the "is_deleted" field.
func (alu *AsLayerUpdate) SetIsDeleted(i int64) *AsLayerUpdate {
	alu.mutation.ResetIsDeleted()
	alu.mutation.SetIsDeleted(i)
	return alu
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (alu *AsLayerUpdate) SetNillableIsDeleted(i *int64) *AsLayerUpdate {
	if i != nil {
		alu.SetIsDeleted(*i)
	}
	return alu
}

// AddIsDeleted adds i to the "is_deleted" field.
func (alu *AsLayerUpdate) AddIsDeleted(i int64) *AsLayerUpdate {
	alu.mutation.AddIsDeleted(i)
	return alu
}

// SetStatus sets the "status" field.
func (alu *AsLayerUpdate) SetStatus(i int64) *AsLayerUpdate {
	alu.mutation.ResetStatus()
	alu.mutation.SetStatus(i)
	return alu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (alu *AsLayerUpdate) SetNillableStatus(i *int64) *AsLayerUpdate {
	if i != nil {
		alu.SetStatus(*i)
	}
	return alu
}

// AddStatus adds i to the "status" field.
func (alu *AsLayerUpdate) AddStatus(i int64) *AsLayerUpdate {
	alu.mutation.AddStatus(i)
	return alu
}

// ClearStatus clears the value of the "status" field.
func (alu *AsLayerUpdate) ClearStatus() *AsLayerUpdate {
	alu.mutation.ClearStatus()
	return alu
}

// SetCreateUser sets the "create_user" field.
func (alu *AsLayerUpdate) SetCreateUser(i int64) *AsLayerUpdate {
	alu.mutation.ResetCreateUser()
	alu.mutation.SetCreateUser(i)
	return alu
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (alu *AsLayerUpdate) SetNillableCreateUser(i *int64) *AsLayerUpdate {
	if i != nil {
		alu.SetCreateUser(*i)
	}
	return alu
}

// AddCreateUser adds i to the "create_user" field.
func (alu *AsLayerUpdate) AddCreateUser(i int64) *AsLayerUpdate {
	alu.mutation.AddCreateUser(i)
	return alu
}

// ClearCreateUser clears the value of the "create_user" field.
func (alu *AsLayerUpdate) ClearCreateUser() *AsLayerUpdate {
	alu.mutation.ClearCreateUser()
	return alu
}

// SetUpdateUser sets the "update_user" field.
func (alu *AsLayerUpdate) SetUpdateUser(i int64) *AsLayerUpdate {
	alu.mutation.ResetUpdateUser()
	alu.mutation.SetUpdateUser(i)
	return alu
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (alu *AsLayerUpdate) SetNillableUpdateUser(i *int64) *AsLayerUpdate {
	if i != nil {
		alu.SetUpdateUser(*i)
	}
	return alu
}

// AddUpdateUser adds i to the "update_user" field.
func (alu *AsLayerUpdate) AddUpdateUser(i int64) *AsLayerUpdate {
	alu.mutation.AddUpdateUser(i)
	return alu
}

// ClearUpdateUser clears the value of the "update_user" field.
func (alu *AsLayerUpdate) ClearUpdateUser() *AsLayerUpdate {
	alu.mutation.ClearUpdateUser()
	return alu
}

// SetUpdateTime sets the "update_time" field.
func (alu *AsLayerUpdate) SetUpdateTime(dt date.DateTime) *AsLayerUpdate {
	alu.mutation.SetUpdateTime(dt)
	return alu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (alu *AsLayerUpdate) ClearUpdateTime() *AsLayerUpdate {
	alu.mutation.ClearUpdateTime()
	return alu
}

// SetGroup sets the "group" edge to the AsAllGroup entity.
func (alu *AsLayerUpdate) SetGroup(a *AsAllGroup) *AsLayerUpdate {
	return alu.SetGroupID(a.ID)
}

// Mutation returns the AsLayerMutation object of the builder.
func (alu *AsLayerUpdate) Mutation() *AsLayerMutation {
	return alu.mutation
}

// ClearGroup clears the "group" edge to the AsAllGroup entity.
func (alu *AsLayerUpdate) ClearGroup() *AsLayerUpdate {
	alu.mutation.ClearGroup()
	return alu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (alu *AsLayerUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	alu.defaults()
	if len(alu.hooks) == 0 {
		affected, err = alu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsLayerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			alu.mutation = mutation
			affected, err = alu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(alu.hooks) - 1; i >= 0; i-- {
			if alu.hooks[i] == nil {
				return 0, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = alu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, alu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (alu *AsLayerUpdate) SaveX(ctx context.Context) int {
	affected, err := alu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (alu *AsLayerUpdate) Exec(ctx context.Context) error {
	_, err := alu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alu *AsLayerUpdate) ExecX(ctx context.Context) {
	if err := alu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (alu *AsLayerUpdate) defaults() {
	if _, ok := alu.mutation.UpdateTime(); !ok && !alu.mutation.UpdateTimeCleared() {
		v := aslayer.UpdateDefaultUpdateTime()
		alu.mutation.SetUpdateTime(v)
	}
}

func (alu *AsLayerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   aslayer.Table,
			Columns: aslayer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: aslayer.FieldID,
			},
		},
	}
	if ps := alu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := alu.mutation.Layer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aslayer.FieldLayer,
		})
	}
	if value, ok := alu.mutation.AddedLayer(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aslayer.FieldLayer,
		})
	}
	if alu.mutation.LayerCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: aslayer.FieldLayer,
		})
	}
	if value, ok := alu.mutation.Width(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aslayer.FieldWidth,
		})
	}
	if value, ok := alu.mutation.AddedWidth(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aslayer.FieldWidth,
		})
	}
	if alu.mutation.WidthCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: aslayer.FieldWidth,
		})
	}
	if value, ok := alu.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aslayer.FieldIsDeleted,
		})
	}
	if value, ok := alu.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aslayer.FieldIsDeleted,
		})
	}
	if value, ok := alu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aslayer.FieldStatus,
		})
	}
	if value, ok := alu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aslayer.FieldStatus,
		})
	}
	if alu.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: aslayer.FieldStatus,
		})
	}
	if value, ok := alu.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aslayer.FieldCreateUser,
		})
	}
	if value, ok := alu.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aslayer.FieldCreateUser,
		})
	}
	if alu.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: aslayer.FieldCreateUser,
		})
	}
	if value, ok := alu.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aslayer.FieldUpdateUser,
		})
	}
	if value, ok := alu.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aslayer.FieldUpdateUser,
		})
	}
	if alu.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: aslayer.FieldUpdateUser,
		})
	}
	if alu.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: aslayer.FieldCreateTime,
		})
	}
	if value, ok := alu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: aslayer.FieldUpdateTime,
		})
	}
	if alu.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: aslayer.FieldUpdateTime,
		})
	}
	if alu.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   aslayer.GroupTable,
			Columns: []string{aslayer.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asallgroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := alu.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   aslayer.GroupTable,
			Columns: []string{aslayer.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asallgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, alu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{aslayer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AsLayerUpdateOne is the builder for updating a single AsLayer entity.
type AsLayerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AsLayerMutation
}

// SetLayer sets the "layer" field.
func (aluo *AsLayerUpdateOne) SetLayer(i int64) *AsLayerUpdateOne {
	aluo.mutation.ResetLayer()
	aluo.mutation.SetLayer(i)
	return aluo
}

// SetNillableLayer sets the "layer" field if the given value is not nil.
func (aluo *AsLayerUpdateOne) SetNillableLayer(i *int64) *AsLayerUpdateOne {
	if i != nil {
		aluo.SetLayer(*i)
	}
	return aluo
}

// AddLayer adds i to the "layer" field.
func (aluo *AsLayerUpdateOne) AddLayer(i int64) *AsLayerUpdateOne {
	aluo.mutation.AddLayer(i)
	return aluo
}

// ClearLayer clears the value of the "layer" field.
func (aluo *AsLayerUpdateOne) ClearLayer() *AsLayerUpdateOne {
	aluo.mutation.ClearLayer()
	return aluo
}

// SetWidth sets the "width" field.
func (aluo *AsLayerUpdateOne) SetWidth(i int64) *AsLayerUpdateOne {
	aluo.mutation.ResetWidth()
	aluo.mutation.SetWidth(i)
	return aluo
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (aluo *AsLayerUpdateOne) SetNillableWidth(i *int64) *AsLayerUpdateOne {
	if i != nil {
		aluo.SetWidth(*i)
	}
	return aluo
}

// AddWidth adds i to the "width" field.
func (aluo *AsLayerUpdateOne) AddWidth(i int64) *AsLayerUpdateOne {
	aluo.mutation.AddWidth(i)
	return aluo
}

// ClearWidth clears the value of the "width" field.
func (aluo *AsLayerUpdateOne) ClearWidth() *AsLayerUpdateOne {
	aluo.mutation.ClearWidth()
	return aluo
}

// SetGroupID sets the "group_id" field.
func (aluo *AsLayerUpdateOne) SetGroupID(i int64) *AsLayerUpdateOne {
	aluo.mutation.SetGroupID(i)
	return aluo
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (aluo *AsLayerUpdateOne) SetNillableGroupID(i *int64) *AsLayerUpdateOne {
	if i != nil {
		aluo.SetGroupID(*i)
	}
	return aluo
}

// ClearGroupID clears the value of the "group_id" field.
func (aluo *AsLayerUpdateOne) ClearGroupID() *AsLayerUpdateOne {
	aluo.mutation.ClearGroupID()
	return aluo
}

// SetIsDeleted sets the "is_deleted" field.
func (aluo *AsLayerUpdateOne) SetIsDeleted(i int64) *AsLayerUpdateOne {
	aluo.mutation.ResetIsDeleted()
	aluo.mutation.SetIsDeleted(i)
	return aluo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (aluo *AsLayerUpdateOne) SetNillableIsDeleted(i *int64) *AsLayerUpdateOne {
	if i != nil {
		aluo.SetIsDeleted(*i)
	}
	return aluo
}

// AddIsDeleted adds i to the "is_deleted" field.
func (aluo *AsLayerUpdateOne) AddIsDeleted(i int64) *AsLayerUpdateOne {
	aluo.mutation.AddIsDeleted(i)
	return aluo
}

// SetStatus sets the "status" field.
func (aluo *AsLayerUpdateOne) SetStatus(i int64) *AsLayerUpdateOne {
	aluo.mutation.ResetStatus()
	aluo.mutation.SetStatus(i)
	return aluo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (aluo *AsLayerUpdateOne) SetNillableStatus(i *int64) *AsLayerUpdateOne {
	if i != nil {
		aluo.SetStatus(*i)
	}
	return aluo
}

// AddStatus adds i to the "status" field.
func (aluo *AsLayerUpdateOne) AddStatus(i int64) *AsLayerUpdateOne {
	aluo.mutation.AddStatus(i)
	return aluo
}

// ClearStatus clears the value of the "status" field.
func (aluo *AsLayerUpdateOne) ClearStatus() *AsLayerUpdateOne {
	aluo.mutation.ClearStatus()
	return aluo
}

// SetCreateUser sets the "create_user" field.
func (aluo *AsLayerUpdateOne) SetCreateUser(i int64) *AsLayerUpdateOne {
	aluo.mutation.ResetCreateUser()
	aluo.mutation.SetCreateUser(i)
	return aluo
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (aluo *AsLayerUpdateOne) SetNillableCreateUser(i *int64) *AsLayerUpdateOne {
	if i != nil {
		aluo.SetCreateUser(*i)
	}
	return aluo
}

// AddCreateUser adds i to the "create_user" field.
func (aluo *AsLayerUpdateOne) AddCreateUser(i int64) *AsLayerUpdateOne {
	aluo.mutation.AddCreateUser(i)
	return aluo
}

// ClearCreateUser clears the value of the "create_user" field.
func (aluo *AsLayerUpdateOne) ClearCreateUser() *AsLayerUpdateOne {
	aluo.mutation.ClearCreateUser()
	return aluo
}

// SetUpdateUser sets the "update_user" field.
func (aluo *AsLayerUpdateOne) SetUpdateUser(i int64) *AsLayerUpdateOne {
	aluo.mutation.ResetUpdateUser()
	aluo.mutation.SetUpdateUser(i)
	return aluo
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (aluo *AsLayerUpdateOne) SetNillableUpdateUser(i *int64) *AsLayerUpdateOne {
	if i != nil {
		aluo.SetUpdateUser(*i)
	}
	return aluo
}

// AddUpdateUser adds i to the "update_user" field.
func (aluo *AsLayerUpdateOne) AddUpdateUser(i int64) *AsLayerUpdateOne {
	aluo.mutation.AddUpdateUser(i)
	return aluo
}

// ClearUpdateUser clears the value of the "update_user" field.
func (aluo *AsLayerUpdateOne) ClearUpdateUser() *AsLayerUpdateOne {
	aluo.mutation.ClearUpdateUser()
	return aluo
}

// SetUpdateTime sets the "update_time" field.
func (aluo *AsLayerUpdateOne) SetUpdateTime(dt date.DateTime) *AsLayerUpdateOne {
	aluo.mutation.SetUpdateTime(dt)
	return aluo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (aluo *AsLayerUpdateOne) ClearUpdateTime() *AsLayerUpdateOne {
	aluo.mutation.ClearUpdateTime()
	return aluo
}

// SetGroup sets the "group" edge to the AsAllGroup entity.
func (aluo *AsLayerUpdateOne) SetGroup(a *AsAllGroup) *AsLayerUpdateOne {
	return aluo.SetGroupID(a.ID)
}

// Mutation returns the AsLayerMutation object of the builder.
func (aluo *AsLayerUpdateOne) Mutation() *AsLayerMutation {
	return aluo.mutation
}

// ClearGroup clears the "group" edge to the AsAllGroup entity.
func (aluo *AsLayerUpdateOne) ClearGroup() *AsLayerUpdateOne {
	aluo.mutation.ClearGroup()
	return aluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aluo *AsLayerUpdateOne) Select(field string, fields ...string) *AsLayerUpdateOne {
	aluo.fields = append([]string{field}, fields...)
	return aluo
}

// Save executes the query and returns the updated AsLayer entity.
func (aluo *AsLayerUpdateOne) Save(ctx context.Context) (*AsLayer, error) {
	var (
		err  error
		node *AsLayer
	)
	aluo.defaults()
	if len(aluo.hooks) == 0 {
		node, err = aluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsLayerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aluo.mutation = mutation
			node, err = aluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aluo.hooks) - 1; i >= 0; i-- {
			if aluo.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = aluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aluo *AsLayerUpdateOne) SaveX(ctx context.Context) *AsLayer {
	node, err := aluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aluo *AsLayerUpdateOne) Exec(ctx context.Context) error {
	_, err := aluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aluo *AsLayerUpdateOne) ExecX(ctx context.Context) {
	if err := aluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aluo *AsLayerUpdateOne) defaults() {
	if _, ok := aluo.mutation.UpdateTime(); !ok && !aluo.mutation.UpdateTimeCleared() {
		v := aslayer.UpdateDefaultUpdateTime()
		aluo.mutation.SetUpdateTime(v)
	}
}

func (aluo *AsLayerUpdateOne) sqlSave(ctx context.Context) (_node *AsLayer, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   aslayer.Table,
			Columns: aslayer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: aslayer.FieldID,
			},
		},
	}
	id, ok := aluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`schema: missing "AsLayer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, aslayer.FieldID)
		for _, f := range fields {
			if !aslayer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("schema: invalid field %q for query", f)}
			}
			if f != aslayer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aluo.mutation.Layer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aslayer.FieldLayer,
		})
	}
	if value, ok := aluo.mutation.AddedLayer(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aslayer.FieldLayer,
		})
	}
	if aluo.mutation.LayerCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: aslayer.FieldLayer,
		})
	}
	if value, ok := aluo.mutation.Width(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aslayer.FieldWidth,
		})
	}
	if value, ok := aluo.mutation.AddedWidth(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aslayer.FieldWidth,
		})
	}
	if aluo.mutation.WidthCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: aslayer.FieldWidth,
		})
	}
	if value, ok := aluo.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aslayer.FieldIsDeleted,
		})
	}
	if value, ok := aluo.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aslayer.FieldIsDeleted,
		})
	}
	if value, ok := aluo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aslayer.FieldStatus,
		})
	}
	if value, ok := aluo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aslayer.FieldStatus,
		})
	}
	if aluo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: aslayer.FieldStatus,
		})
	}
	if value, ok := aluo.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aslayer.FieldCreateUser,
		})
	}
	if value, ok := aluo.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aslayer.FieldCreateUser,
		})
	}
	if aluo.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: aslayer.FieldCreateUser,
		})
	}
	if value, ok := aluo.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aslayer.FieldUpdateUser,
		})
	}
	if value, ok := aluo.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: aslayer.FieldUpdateUser,
		})
	}
	if aluo.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: aslayer.FieldUpdateUser,
		})
	}
	if aluo.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: aslayer.FieldCreateTime,
		})
	}
	if value, ok := aluo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: aslayer.FieldUpdateTime,
		})
	}
	if aluo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: aslayer.FieldUpdateTime,
		})
	}
	if aluo.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   aslayer.GroupTable,
			Columns: []string{aslayer.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asallgroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aluo.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   aslayer.GroupTable,
			Columns: []string{aslayer.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asallgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AsLayer{config: aluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{aslayer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
