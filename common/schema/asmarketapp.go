// Code generated by entc, DO NOT EDIT.

package schema

import (
	"fmt"
	"orginone/common/schema/asmarketapp"
	"orginone/common/tools/date"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// AsMarketApp is the model entity for the AsMarketApp schema.
type AsMarketApp struct {
	config `json:"-"`
	// ID of the ent.
	// 主键
	ID int64 `json:"id,string"`
	// AppName holds the value of the "app_name" field.
	// 应用名称
	AppName string `json:"appName"`
	// Icon holds the value of the "icon" field.
	// 应用图标
	Icon string `json:"icon"`
	// Version holds the value of the "version" field.
	// 应用版本
	Version string `json:"version"`
	// Contact holds the value of the "contact" field.
	// 负责人联系方式
	Contact string `json:"contact"`
	// ContactName holds the value of the "contact_name" field.
	// 负责人姓名
	ContactName string `json:"contactName"`
	// Description holds the value of the "description" field.
	// 应用描述
	Description string `json:"description"`
	// File holds the value of the "file" field.
	// 部署文件
	File string `json:"file"`
	// SaleStatus holds the value of the "sale_status" field.
	// 上下架状态;0-下架,1-上架
	SaleStatus int64 `json:"saleStatus"`
	// TenantID holds the value of the "tenant_id" field.
	// 上传应用租户ID
	TenantID string `json:"tenantId"`
	// Platform holds the value of the "platform" field.
	// 适配平台;1-pc,2-移动端,3-自适应
	Platform int64 `json:"platform"`
	// TargetUser holds the value of the "target_user" field.
	// 目标用户;1-个人,2-单位,3-集团
	TargetUser int64 `json:"targetUser"`
	// DeployStatus holds the value of the "deploy_status" field.
	// 部署状态;0-未部署,1-部署中,2-已部署
	DeployStatus int64 `json:"deployStatus"`
	// DeployAddress holds the value of the "deploy_address" field.
	// 部署地址
	DeployAddress string `json:"deployAddress"`
	// DeployType holds the value of the "deploy_type" field.
	// 部署方式;0-集成部署,1-独立部署
	DeployType int64 `json:"deployType"`
	// PublishTime holds the value of the "publish_time" field.
	// 发布时间
	PublishTime date.DateTime `json:"publishTime"`
	// AppType holds the value of the "app_type" field.
	// 应用类型
	AppType int64 `json:"appType"`
	// ApplyTime holds the value of the "apply_time" field.
	// 申请时间
	ApplyTime date.DateTime `json:"applyTime"`
	// AppAddress holds the value of the "app_address" field.
	// 应用地址
	AppAddress string `json:"appAddress"`
	// AppMail holds the value of the "app_mail" field.
	// 应用邮箱
	AppMail string `json:"appMail"`
	// AppPhoto holds the value of the "app_photo" field.
	// 应用照片
	AppPhoto string `json:"appPhoto"`
	// AppField holds the value of the "app_field" field.
	// 应用领域;13-党政智治、145-数字政府、37-数字社会、57-数字经济、58-数字法制
	AppField int64 `json:"appField"`
	// AppCategory holds the value of the "app_category" field.
	// 应用分类;1-IaaS应用、2-PaaS应用、3-DaaS应用、5-SaaS应用
	AppCategory int64 `json:"appCategory"`
	// AppProjectSource holds the value of the "app_project_source" field.
	// 项目来源;1-正常立项、2-揭榜挂帅、3-自主建设
	AppProjectSource int64 `json:"appProjectSource"`
	// AppStar holds the value of the "app_star" field.
	// 观星台;1-是、0否
	AppStar int64 `json:"appStar"`
	// AppFoundsSource holds the value of the "app_founds_source" field.
	// 资金来源;1-预算内、2-预算暂存、3-财政专户、4-其他资金、5-财政暂存、6-社保资金、7-专项资金
	AppFoundsSource int64 `json:"appFoundsSource"`
	// InnerURL holds the value of the "inner_url" field.
	// 内网url
	InnerURL string `json:"innerUrl"`
	// OutURL holds the value of the "out_url" field.
	// 外网url
	OutURL string `json:"outUrl"`
	// ReformStatus holds the value of the "reform_status" field.
	// 整改状态;0-已认证,1-整改中
	ReformStatus int64 `json:"reformStatus"`
	// OutIPURL holds the value of the "out_ip_url" field.
	// 外网IPurl
	OutIPURL string `json:"outIpUrl"`
	// IsDeleted holds the value of the "is_deleted" field.
	// 是否被删除
	IsDeleted int64 `json:"isDeleted"`
	// Status holds the value of the "status" field.
	// 状态
	Status int64 `json:"status"`
	// CreateUser holds the value of the "create_user" field.
	// 创建用户
	CreateUser int64 `json:"createUser"`
	// UpdateUser holds the value of the "update_user" field.
	// 更新用户
	UpdateUser int64 `json:"updateUser"`
	// CreateTime holds the value of the "create_time" field.
	// 创建时间
	CreateTime date.DateTime `json:"createTime"`
	// UpdateTime holds the value of the "update_time" field.
	// 更新时间
	UpdateTime date.DateTime `json:"updateTime"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AsMarketAppQuery when eager-loading is set.
	Edges AsMarketAppEdges `json:"edges"`
}

// AsMarketAppEdges holds the relations/edges for other nodes in the graph.
type AsMarketAppEdges struct {
	// AppMenus holds the value of the appMenus edge.
	AppMenus []*AsMarketMenu `json:"appmenus"`
	// AppRoles holds the value of the appRoles edge.
	AppRoles []*AsMarketAppRole `json:"approles"`
	// Useds holds the value of the useds edge.
	Useds []*AsMarketUsedApp `json:"useds"`
	// AppAlerts holds the value of the appAlerts edge.
	AppAlerts []*AsMarketAppAlert `json:"appalerts"`
	// AppRedeploys holds the value of the appRedeploys edge.
	AppRedeploys []*AsRedeployData `json:"appredeploys"`
	// AppKeys holds the value of the appKeys edge.
	AppKeys []*AsMarketAppKeySecret `json:"appkeys"`
	// AppPurchases holds the value of the appPurchases edge.
	AppPurchases []*AsMarketAppPurchase `json:"apppurchases"`
	// AppComponents holds the value of the appComponents edge.
	AppComponents []*AsMarketAppComponent `json:"appcomponents"`
	// AppGroupDistribs holds the value of the appGroupDistribs edge.
	AppGroupDistribs []*AsMarketAppGroupDistribution `json:"appgroupdistribs"`
	// AppGroupDistribConfigs holds the value of the appGroupDistribConfigs edge.
	AppGroupDistribConfigs []*AsAppGroupDistributionData `json:"appgroupdistribconfigs"`
	// AppGroupDistribsRelation holds the value of the appGroupDistribsRelation edge.
	AppGroupDistribsRelation []*AsMarketAppGroupDistributionRelation `json:"appgroupdistribsrelation"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [11]bool
}

// AppMenusOrErr returns the AppMenus value or an error if the edge
// was not loaded in eager-loading.
func (e AsMarketAppEdges) AppMenusOrErr() ([]*AsMarketMenu, error) {
	if e.loadedTypes[0] {
		return e.AppMenus, nil
	}
	return nil, &NotLoadedError{edge: "appMenus"}
}

// AppRolesOrErr returns the AppRoles value or an error if the edge
// was not loaded in eager-loading.
func (e AsMarketAppEdges) AppRolesOrErr() ([]*AsMarketAppRole, error) {
	if e.loadedTypes[1] {
		return e.AppRoles, nil
	}
	return nil, &NotLoadedError{edge: "appRoles"}
}

// UsedsOrErr returns the Useds value or an error if the edge
// was not loaded in eager-loading.
func (e AsMarketAppEdges) UsedsOrErr() ([]*AsMarketUsedApp, error) {
	if e.loadedTypes[2] {
		return e.Useds, nil
	}
	return nil, &NotLoadedError{edge: "useds"}
}

// AppAlertsOrErr returns the AppAlerts value or an error if the edge
// was not loaded in eager-loading.
func (e AsMarketAppEdges) AppAlertsOrErr() ([]*AsMarketAppAlert, error) {
	if e.loadedTypes[3] {
		return e.AppAlerts, nil
	}
	return nil, &NotLoadedError{edge: "appAlerts"}
}

// AppRedeploysOrErr returns the AppRedeploys value or an error if the edge
// was not loaded in eager-loading.
func (e AsMarketAppEdges) AppRedeploysOrErr() ([]*AsRedeployData, error) {
	if e.loadedTypes[4] {
		return e.AppRedeploys, nil
	}
	return nil, &NotLoadedError{edge: "appRedeploys"}
}

// AppKeysOrErr returns the AppKeys value or an error if the edge
// was not loaded in eager-loading.
func (e AsMarketAppEdges) AppKeysOrErr() ([]*AsMarketAppKeySecret, error) {
	if e.loadedTypes[5] {
		return e.AppKeys, nil
	}
	return nil, &NotLoadedError{edge: "appKeys"}
}

// AppPurchasesOrErr returns the AppPurchases value or an error if the edge
// was not loaded in eager-loading.
func (e AsMarketAppEdges) AppPurchasesOrErr() ([]*AsMarketAppPurchase, error) {
	if e.loadedTypes[6] {
		return e.AppPurchases, nil
	}
	return nil, &NotLoadedError{edge: "appPurchases"}
}

// AppComponentsOrErr returns the AppComponents value or an error if the edge
// was not loaded in eager-loading.
func (e AsMarketAppEdges) AppComponentsOrErr() ([]*AsMarketAppComponent, error) {
	if e.loadedTypes[7] {
		return e.AppComponents, nil
	}
	return nil, &NotLoadedError{edge: "appComponents"}
}

// AppGroupDistribsOrErr returns the AppGroupDistribs value or an error if the edge
// was not loaded in eager-loading.
func (e AsMarketAppEdges) AppGroupDistribsOrErr() ([]*AsMarketAppGroupDistribution, error) {
	if e.loadedTypes[8] {
		return e.AppGroupDistribs, nil
	}
	return nil, &NotLoadedError{edge: "appGroupDistribs"}
}

// AppGroupDistribConfigsOrErr returns the AppGroupDistribConfigs value or an error if the edge
// was not loaded in eager-loading.
func (e AsMarketAppEdges) AppGroupDistribConfigsOrErr() ([]*AsAppGroupDistributionData, error) {
	if e.loadedTypes[9] {
		return e.AppGroupDistribConfigs, nil
	}
	return nil, &NotLoadedError{edge: "appGroupDistribConfigs"}
}

// AppGroupDistribsRelationOrErr returns the AppGroupDistribsRelation value or an error if the edge
// was not loaded in eager-loading.
func (e AsMarketAppEdges) AppGroupDistribsRelationOrErr() ([]*AsMarketAppGroupDistributionRelation, error) {
	if e.loadedTypes[10] {
		return e.AppGroupDistribsRelation, nil
	}
	return nil, &NotLoadedError{edge: "appGroupDistribsRelation"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AsMarketApp) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case asmarketapp.FieldID, asmarketapp.FieldSaleStatus, asmarketapp.FieldPlatform, asmarketapp.FieldTargetUser, asmarketapp.FieldDeployStatus, asmarketapp.FieldDeployType, asmarketapp.FieldAppType, asmarketapp.FieldAppField, asmarketapp.FieldAppCategory, asmarketapp.FieldAppProjectSource, asmarketapp.FieldAppStar, asmarketapp.FieldAppFoundsSource, asmarketapp.FieldReformStatus, asmarketapp.FieldIsDeleted, asmarketapp.FieldStatus, asmarketapp.FieldCreateUser, asmarketapp.FieldUpdateUser:
			values[i] = new(sql.NullInt64)
		case asmarketapp.FieldAppName, asmarketapp.FieldIcon, asmarketapp.FieldVersion, asmarketapp.FieldContact, asmarketapp.FieldContactName, asmarketapp.FieldDescription, asmarketapp.FieldFile, asmarketapp.FieldTenantID, asmarketapp.FieldDeployAddress, asmarketapp.FieldAppAddress, asmarketapp.FieldAppMail, asmarketapp.FieldAppPhoto, asmarketapp.FieldInnerURL, asmarketapp.FieldOutURL, asmarketapp.FieldOutIPURL:
			values[i] = new(sql.NullString)
		case asmarketapp.FieldPublishTime, asmarketapp.FieldApplyTime, asmarketapp.FieldCreateTime, asmarketapp.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AsMarketApp", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AsMarketApp fields.
func (ama *AsMarketApp) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case asmarketapp.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ama.ID = int64(value.Int64)
		case asmarketapp.FieldAppName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_name", values[i])
			} else if value.Valid {
				ama.AppName = value.String
			}
		case asmarketapp.FieldIcon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon", values[i])
			} else if value.Valid {
				ama.Icon = value.String
			}
		case asmarketapp.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				ama.Version = value.String
			}
		case asmarketapp.FieldContact:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contact", values[i])
			} else if value.Valid {
				ama.Contact = value.String
			}
		case asmarketapp.FieldContactName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contact_name", values[i])
			} else if value.Valid {
				ama.ContactName = value.String
			}
		case asmarketapp.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ama.Description = value.String
			}
		case asmarketapp.FieldFile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file", values[i])
			} else if value.Valid {
				ama.File = value.String
			}
		case asmarketapp.FieldSaleStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sale_status", values[i])
			} else if value.Valid {
				ama.SaleStatus = value.Int64
			}
		case asmarketapp.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				ama.TenantID = value.String
			}
		case asmarketapp.FieldPlatform:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field platform", values[i])
			} else if value.Valid {
				ama.Platform = value.Int64
			}
		case asmarketapp.FieldTargetUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field target_user", values[i])
			} else if value.Valid {
				ama.TargetUser = value.Int64
			}
		case asmarketapp.FieldDeployStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deploy_status", values[i])
			} else if value.Valid {
				ama.DeployStatus = value.Int64
			}
		case asmarketapp.FieldDeployAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deploy_address", values[i])
			} else if value.Valid {
				ama.DeployAddress = value.String
			}
		case asmarketapp.FieldDeployType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deploy_type", values[i])
			} else if value.Valid {
				ama.DeployType = value.Int64
			}
		case asmarketapp.FieldPublishTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field publish_time", values[i])
			} else if value.Valid {
				ama.PublishTime = date.DateTime(value.Time)
			}
		case asmarketapp.FieldAppType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field app_type", values[i])
			} else if value.Valid {
				ama.AppType = value.Int64
			}
		case asmarketapp.FieldApplyTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field apply_time", values[i])
			} else if value.Valid {
				ama.ApplyTime = date.DateTime(value.Time)
			}
		case asmarketapp.FieldAppAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_address", values[i])
			} else if value.Valid {
				ama.AppAddress = value.String
			}
		case asmarketapp.FieldAppMail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_mail", values[i])
			} else if value.Valid {
				ama.AppMail = value.String
			}
		case asmarketapp.FieldAppPhoto:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_photo", values[i])
			} else if value.Valid {
				ama.AppPhoto = value.String
			}
		case asmarketapp.FieldAppField:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field app_field", values[i])
			} else if value.Valid {
				ama.AppField = value.Int64
			}
		case asmarketapp.FieldAppCategory:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field app_category", values[i])
			} else if value.Valid {
				ama.AppCategory = value.Int64
			}
		case asmarketapp.FieldAppProjectSource:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field app_project_source", values[i])
			} else if value.Valid {
				ama.AppProjectSource = value.Int64
			}
		case asmarketapp.FieldAppStar:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field app_star", values[i])
			} else if value.Valid {
				ama.AppStar = value.Int64
			}
		case asmarketapp.FieldAppFoundsSource:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field app_founds_source", values[i])
			} else if value.Valid {
				ama.AppFoundsSource = value.Int64
			}
		case asmarketapp.FieldInnerURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field inner_url", values[i])
			} else if value.Valid {
				ama.InnerURL = value.String
			}
		case asmarketapp.FieldOutURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field out_url", values[i])
			} else if value.Valid {
				ama.OutURL = value.String
			}
		case asmarketapp.FieldReformStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field reform_status", values[i])
			} else if value.Valid {
				ama.ReformStatus = value.Int64
			}
		case asmarketapp.FieldOutIPURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field out_ip_url", values[i])
			} else if value.Valid {
				ama.OutIPURL = value.String
			}
		case asmarketapp.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				ama.IsDeleted = value.Int64
			}
		case asmarketapp.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ama.Status = value.Int64
			}
		case asmarketapp.FieldCreateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_user", values[i])
			} else if value.Valid {
				ama.CreateUser = value.Int64
			}
		case asmarketapp.FieldUpdateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_user", values[i])
			} else if value.Valid {
				ama.UpdateUser = value.Int64
			}
		case asmarketapp.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ama.CreateTime = date.DateTime(value.Time)
			}
		case asmarketapp.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ama.UpdateTime = date.DateTime(value.Time)
			}
		}
	}
	return nil
}

// QueryAppMenus queries the "appMenus" edge of the AsMarketApp entity.
func (ama *AsMarketApp) QueryAppMenus() *AsMarketMenuQuery {
	return (&AsMarketAppClient{config: ama.config}).QueryAppMenus(ama)
}

// QueryAppRoles queries the "appRoles" edge of the AsMarketApp entity.
func (ama *AsMarketApp) QueryAppRoles() *AsMarketAppRoleQuery {
	return (&AsMarketAppClient{config: ama.config}).QueryAppRoles(ama)
}

// QueryUseds queries the "useds" edge of the AsMarketApp entity.
func (ama *AsMarketApp) QueryUseds() *AsMarketUsedAppQuery {
	return (&AsMarketAppClient{config: ama.config}).QueryUseds(ama)
}

// QueryAppAlerts queries the "appAlerts" edge of the AsMarketApp entity.
func (ama *AsMarketApp) QueryAppAlerts() *AsMarketAppAlertQuery {
	return (&AsMarketAppClient{config: ama.config}).QueryAppAlerts(ama)
}

// QueryAppRedeploys queries the "appRedeploys" edge of the AsMarketApp entity.
func (ama *AsMarketApp) QueryAppRedeploys() *AsRedeployDataQuery {
	return (&AsMarketAppClient{config: ama.config}).QueryAppRedeploys(ama)
}

// QueryAppKeys queries the "appKeys" edge of the AsMarketApp entity.
func (ama *AsMarketApp) QueryAppKeys() *AsMarketAppKeySecretQuery {
	return (&AsMarketAppClient{config: ama.config}).QueryAppKeys(ama)
}

// QueryAppPurchases queries the "appPurchases" edge of the AsMarketApp entity.
func (ama *AsMarketApp) QueryAppPurchases() *AsMarketAppPurchaseQuery {
	return (&AsMarketAppClient{config: ama.config}).QueryAppPurchases(ama)
}

// QueryAppComponents queries the "appComponents" edge of the AsMarketApp entity.
func (ama *AsMarketApp) QueryAppComponents() *AsMarketAppComponentQuery {
	return (&AsMarketAppClient{config: ama.config}).QueryAppComponents(ama)
}

// QueryAppGroupDistribs queries the "appGroupDistribs" edge of the AsMarketApp entity.
func (ama *AsMarketApp) QueryAppGroupDistribs() *AsMarketAppGroupDistributionQuery {
	return (&AsMarketAppClient{config: ama.config}).QueryAppGroupDistribs(ama)
}

// QueryAppGroupDistribConfigs queries the "appGroupDistribConfigs" edge of the AsMarketApp entity.
func (ama *AsMarketApp) QueryAppGroupDistribConfigs() *AsAppGroupDistributionDataQuery {
	return (&AsMarketAppClient{config: ama.config}).QueryAppGroupDistribConfigs(ama)
}

// QueryAppGroupDistribsRelation queries the "appGroupDistribsRelation" edge of the AsMarketApp entity.
func (ama *AsMarketApp) QueryAppGroupDistribsRelation() *AsMarketAppGroupDistributionRelationQuery {
	return (&AsMarketAppClient{config: ama.config}).QueryAppGroupDistribsRelation(ama)
}

// Update returns a builder for updating this AsMarketApp.
// Note that you need to call AsMarketApp.Unwrap() before calling this method if this AsMarketApp
// was returned from a transaction, and the transaction was committed or rolled back.
func (ama *AsMarketApp) Update() *AsMarketAppUpdateOne {
	return (&AsMarketAppClient{config: ama.config}).UpdateOne(ama)
}

// Unwrap unwraps the AsMarketApp entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ama *AsMarketApp) Unwrap() *AsMarketApp {
	tx, ok := ama.config.driver.(*txDriver)
	if !ok {
		panic("schema: AsMarketApp is not a transactional entity")
	}
	ama.config.driver = tx.drv
	return ama
}

// String implements the fmt.Stringer.
func (ama *AsMarketApp) String() string {
	var builder strings.Builder
	builder.WriteString("AsMarketApp(")
	builder.WriteString(fmt.Sprintf("id=%v", ama.ID))
	builder.WriteString(", app_name=")
	builder.WriteString(ama.AppName)
	builder.WriteString(", icon=")
	builder.WriteString(ama.Icon)
	builder.WriteString(", version=")
	builder.WriteString(ama.Version)
	builder.WriteString(", contact=")
	builder.WriteString(ama.Contact)
	builder.WriteString(", contact_name=")
	builder.WriteString(ama.ContactName)
	builder.WriteString(", description=")
	builder.WriteString(ama.Description)
	builder.WriteString(", file=")
	builder.WriteString(ama.File)
	builder.WriteString(", sale_status=")
	builder.WriteString(fmt.Sprintf("%v", ama.SaleStatus))
	builder.WriteString(", tenant_id=")
	builder.WriteString(ama.TenantID)
	builder.WriteString(", platform=")
	builder.WriteString(fmt.Sprintf("%v", ama.Platform))
	builder.WriteString(", target_user=")
	builder.WriteString(fmt.Sprintf("%v", ama.TargetUser))
	builder.WriteString(", deploy_status=")
	builder.WriteString(fmt.Sprintf("%v", ama.DeployStatus))
	builder.WriteString(", deploy_address=")
	builder.WriteString(ama.DeployAddress)
	builder.WriteString(", deploy_type=")
	builder.WriteString(fmt.Sprintf("%v", ama.DeployType))
	builder.WriteString(", publish_time=")
	builder.WriteString(fmt.Sprintf("%v", ama.PublishTime))
	builder.WriteString(", app_type=")
	builder.WriteString(fmt.Sprintf("%v", ama.AppType))
	builder.WriteString(", apply_time=")
	builder.WriteString(fmt.Sprintf("%v", ama.ApplyTime))
	builder.WriteString(", app_address=")
	builder.WriteString(ama.AppAddress)
	builder.WriteString(", app_mail=")
	builder.WriteString(ama.AppMail)
	builder.WriteString(", app_photo=")
	builder.WriteString(ama.AppPhoto)
	builder.WriteString(", app_field=")
	builder.WriteString(fmt.Sprintf("%v", ama.AppField))
	builder.WriteString(", app_category=")
	builder.WriteString(fmt.Sprintf("%v", ama.AppCategory))
	builder.WriteString(", app_project_source=")
	builder.WriteString(fmt.Sprintf("%v", ama.AppProjectSource))
	builder.WriteString(", app_star=")
	builder.WriteString(fmt.Sprintf("%v", ama.AppStar))
	builder.WriteString(", app_founds_source=")
	builder.WriteString(fmt.Sprintf("%v", ama.AppFoundsSource))
	builder.WriteString(", inner_url=")
	builder.WriteString(ama.InnerURL)
	builder.WriteString(", out_url=")
	builder.WriteString(ama.OutURL)
	builder.WriteString(", reform_status=")
	builder.WriteString(fmt.Sprintf("%v", ama.ReformStatus))
	builder.WriteString(", out_ip_url=")
	builder.WriteString(ama.OutIPURL)
	builder.WriteString(", is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", ama.IsDeleted))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", ama.Status))
	builder.WriteString(", create_user=")
	builder.WriteString(fmt.Sprintf("%v", ama.CreateUser))
	builder.WriteString(", update_user=")
	builder.WriteString(fmt.Sprintf("%v", ama.UpdateUser))
	builder.WriteString(", create_time=")
	builder.WriteString(fmt.Sprintf("%v", ama.CreateTime))
	builder.WriteString(", update_time=")
	builder.WriteString(fmt.Sprintf("%v", ama.UpdateTime))
	builder.WriteByte(')')
	return builder.String()
}

// AsMarketApps is a parsable slice of AsMarketApp.
type AsMarketApps []*AsMarketApp

func (ama AsMarketApps) config(cfg config) {
	for _i := range ama {
		ama[_i].config = cfg
	}
}
