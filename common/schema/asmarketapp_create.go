// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/asappgroupdistributiondata"
	"orginone/common/schema/asmarketapp"
	"orginone/common/schema/asmarketappalert"
	"orginone/common/schema/asmarketappcomponent"
	"orginone/common/schema/asmarketappgroupdistribution"
	"orginone/common/schema/asmarketappgroupdistributionrelation"
	"orginone/common/schema/asmarketappkeysecret"
	"orginone/common/schema/asmarketapppurchase"
	"orginone/common/schema/asmarketapprole"
	"orginone/common/schema/asmarketmenu"
	"orginone/common/schema/asmarketusedapp"
	"orginone/common/schema/asredeploydata"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsMarketAppCreate is the builder for creating a AsMarketApp entity.
type AsMarketAppCreate struct {
	config
	mutation *AsMarketAppMutation
	hooks    []Hook
}

// SetAppName sets the "app_name" field.
func (amac *AsMarketAppCreate) SetAppName(s string) *AsMarketAppCreate {
	amac.mutation.SetAppName(s)
	return amac
}

// SetNillableAppName sets the "app_name" field if the given value is not nil.
func (amac *AsMarketAppCreate) SetNillableAppName(s *string) *AsMarketAppCreate {
	if s != nil {
		amac.SetAppName(*s)
	}
	return amac
}

// SetIcon sets the "icon" field.
func (amac *AsMarketAppCreate) SetIcon(s string) *AsMarketAppCreate {
	amac.mutation.SetIcon(s)
	return amac
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (amac *AsMarketAppCreate) SetNillableIcon(s *string) *AsMarketAppCreate {
	if s != nil {
		amac.SetIcon(*s)
	}
	return amac
}

// SetVersion sets the "version" field.
func (amac *AsMarketAppCreate) SetVersion(s string) *AsMarketAppCreate {
	amac.mutation.SetVersion(s)
	return amac
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (amac *AsMarketAppCreate) SetNillableVersion(s *string) *AsMarketAppCreate {
	if s != nil {
		amac.SetVersion(*s)
	}
	return amac
}

// SetContact sets the "contact" field.
func (amac *AsMarketAppCreate) SetContact(s string) *AsMarketAppCreate {
	amac.mutation.SetContact(s)
	return amac
}

// SetNillableContact sets the "contact" field if the given value is not nil.
func (amac *AsMarketAppCreate) SetNillableContact(s *string) *AsMarketAppCreate {
	if s != nil {
		amac.SetContact(*s)
	}
	return amac
}

// SetContactName sets the "contact_name" field.
func (amac *AsMarketAppCreate) SetContactName(s string) *AsMarketAppCreate {
	amac.mutation.SetContactName(s)
	return amac
}

// SetNillableContactName sets the "contact_name" field if the given value is not nil.
func (amac *AsMarketAppCreate) SetNillableContactName(s *string) *AsMarketAppCreate {
	if s != nil {
		amac.SetContactName(*s)
	}
	return amac
}

// SetDescription sets the "description" field.
func (amac *AsMarketAppCreate) SetDescription(s string) *AsMarketAppCreate {
	amac.mutation.SetDescription(s)
	return amac
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (amac *AsMarketAppCreate) SetNillableDescription(s *string) *AsMarketAppCreate {
	if s != nil {
		amac.SetDescription(*s)
	}
	return amac
}

// SetFile sets the "file" field.
func (amac *AsMarketAppCreate) SetFile(s string) *AsMarketAppCreate {
	amac.mutation.SetFile(s)
	return amac
}

// SetNillableFile sets the "file" field if the given value is not nil.
func (amac *AsMarketAppCreate) SetNillableFile(s *string) *AsMarketAppCreate {
	if s != nil {
		amac.SetFile(*s)
	}
	return amac
}

// SetSaleStatus sets the "sale_status" field.
func (amac *AsMarketAppCreate) SetSaleStatus(i int64) *AsMarketAppCreate {
	amac.mutation.SetSaleStatus(i)
	return amac
}

// SetNillableSaleStatus sets the "sale_status" field if the given value is not nil.
func (amac *AsMarketAppCreate) SetNillableSaleStatus(i *int64) *AsMarketAppCreate {
	if i != nil {
		amac.SetSaleStatus(*i)
	}
	return amac
}

// SetTenantID sets the "tenant_id" field.
func (amac *AsMarketAppCreate) SetTenantID(s string) *AsMarketAppCreate {
	amac.mutation.SetTenantID(s)
	return amac
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (amac *AsMarketAppCreate) SetNillableTenantID(s *string) *AsMarketAppCreate {
	if s != nil {
		amac.SetTenantID(*s)
	}
	return amac
}

// SetPlatform sets the "platform" field.
func (amac *AsMarketAppCreate) SetPlatform(i int64) *AsMarketAppCreate {
	amac.mutation.SetPlatform(i)
	return amac
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (amac *AsMarketAppCreate) SetNillablePlatform(i *int64) *AsMarketAppCreate {
	if i != nil {
		amac.SetPlatform(*i)
	}
	return amac
}

// SetTargetUser sets the "target_user" field.
func (amac *AsMarketAppCreate) SetTargetUser(i int64) *AsMarketAppCreate {
	amac.mutation.SetTargetUser(i)
	return amac
}

// SetNillableTargetUser sets the "target_user" field if the given value is not nil.
func (amac *AsMarketAppCreate) SetNillableTargetUser(i *int64) *AsMarketAppCreate {
	if i != nil {
		amac.SetTargetUser(*i)
	}
	return amac
}

// SetDeployStatus sets the "deploy_status" field.
func (amac *AsMarketAppCreate) SetDeployStatus(i int64) *AsMarketAppCreate {
	amac.mutation.SetDeployStatus(i)
	return amac
}

// SetNillableDeployStatus sets the "deploy_status" field if the given value is not nil.
func (amac *AsMarketAppCreate) SetNillableDeployStatus(i *int64) *AsMarketAppCreate {
	if i != nil {
		amac.SetDeployStatus(*i)
	}
	return amac
}

// SetDeployAddress sets the "deploy_address" field.
func (amac *AsMarketAppCreate) SetDeployAddress(s string) *AsMarketAppCreate {
	amac.mutation.SetDeployAddress(s)
	return amac
}

// SetNillableDeployAddress sets the "deploy_address" field if the given value is not nil.
func (amac *AsMarketAppCreate) SetNillableDeployAddress(s *string) *AsMarketAppCreate {
	if s != nil {
		amac.SetDeployAddress(*s)
	}
	return amac
}

// SetDeployType sets the "deploy_type" field.
func (amac *AsMarketAppCreate) SetDeployType(i int64) *AsMarketAppCreate {
	amac.mutation.SetDeployType(i)
	return amac
}

// SetNillableDeployType sets the "deploy_type" field if the given value is not nil.
func (amac *AsMarketAppCreate) SetNillableDeployType(i *int64) *AsMarketAppCreate {
	if i != nil {
		amac.SetDeployType(*i)
	}
	return amac
}

// SetPublishTime sets the "publish_time" field.
func (amac *AsMarketAppCreate) SetPublishTime(dt date.DateTime) *AsMarketAppCreate {
	amac.mutation.SetPublishTime(dt)
	return amac
}

// SetNillablePublishTime sets the "publish_time" field if the given value is not nil.
func (amac *AsMarketAppCreate) SetNillablePublishTime(dt *date.DateTime) *AsMarketAppCreate {
	if dt != nil {
		amac.SetPublishTime(*dt)
	}
	return amac
}

// SetAppType sets the "app_type" field.
func (amac *AsMarketAppCreate) SetAppType(i int64) *AsMarketAppCreate {
	amac.mutation.SetAppType(i)
	return amac
}

// SetNillableAppType sets the "app_type" field if the given value is not nil.
func (amac *AsMarketAppCreate) SetNillableAppType(i *int64) *AsMarketAppCreate {
	if i != nil {
		amac.SetAppType(*i)
	}
	return amac
}

// SetApplyTime sets the "apply_time" field.
func (amac *AsMarketAppCreate) SetApplyTime(dt date.DateTime) *AsMarketAppCreate {
	amac.mutation.SetApplyTime(dt)
	return amac
}

// SetNillableApplyTime sets the "apply_time" field if the given value is not nil.
func (amac *AsMarketAppCreate) SetNillableApplyTime(dt *date.DateTime) *AsMarketAppCreate {
	if dt != nil {
		amac.SetApplyTime(*dt)
	}
	return amac
}

// SetAppAddress sets the "app_address" field.
func (amac *AsMarketAppCreate) SetAppAddress(s string) *AsMarketAppCreate {
	amac.mutation.SetAppAddress(s)
	return amac
}

// SetNillableAppAddress sets the "app_address" field if the given value is not nil.
func (amac *AsMarketAppCreate) SetNillableAppAddress(s *string) *AsMarketAppCreate {
	if s != nil {
		amac.SetAppAddress(*s)
	}
	return amac
}

// SetAppMail sets the "app_mail" field.
func (amac *AsMarketAppCreate) SetAppMail(s string) *AsMarketAppCreate {
	amac.mutation.SetAppMail(s)
	return amac
}

// SetNillableAppMail sets the "app_mail" field if the given value is not nil.
func (amac *AsMarketAppCreate) SetNillableAppMail(s *string) *AsMarketAppCreate {
	if s != nil {
		amac.SetAppMail(*s)
	}
	return amac
}

// SetAppPhoto sets the "app_photo" field.
func (amac *AsMarketAppCreate) SetAppPhoto(s string) *AsMarketAppCreate {
	amac.mutation.SetAppPhoto(s)
	return amac
}

// SetNillableAppPhoto sets the "app_photo" field if the given value is not nil.
func (amac *AsMarketAppCreate) SetNillableAppPhoto(s *string) *AsMarketAppCreate {
	if s != nil {
		amac.SetAppPhoto(*s)
	}
	return amac
}

// SetAppField sets the "app_field" field.
func (amac *AsMarketAppCreate) SetAppField(i int64) *AsMarketAppCreate {
	amac.mutation.SetAppField(i)
	return amac
}

// SetNillableAppField sets the "app_field" field if the given value is not nil.
func (amac *AsMarketAppCreate) SetNillableAppField(i *int64) *AsMarketAppCreate {
	if i != nil {
		amac.SetAppField(*i)
	}
	return amac
}

// SetAppCategory sets the "app_category" field.
func (amac *AsMarketAppCreate) SetAppCategory(i int64) *AsMarketAppCreate {
	amac.mutation.SetAppCategory(i)
	return amac
}

// SetNillableAppCategory sets the "app_category" field if the given value is not nil.
func (amac *AsMarketAppCreate) SetNillableAppCategory(i *int64) *AsMarketAppCreate {
	if i != nil {
		amac.SetAppCategory(*i)
	}
	return amac
}

// SetAppProjectSource sets the "app_project_source" field.
func (amac *AsMarketAppCreate) SetAppProjectSource(i int64) *AsMarketAppCreate {
	amac.mutation.SetAppProjectSource(i)
	return amac
}

// SetNillableAppProjectSource sets the "app_project_source" field if the given value is not nil.
func (amac *AsMarketAppCreate) SetNillableAppProjectSource(i *int64) *AsMarketAppCreate {
	if i != nil {
		amac.SetAppProjectSource(*i)
	}
	return amac
}

// SetAppStar sets the "app_star" field.
func (amac *AsMarketAppCreate) SetAppStar(i int64) *AsMarketAppCreate {
	amac.mutation.SetAppStar(i)
	return amac
}

// SetAppFoundsSource sets the "app_founds_source" field.
func (amac *AsMarketAppCreate) SetAppFoundsSource(i int64) *AsMarketAppCreate {
	amac.mutation.SetAppFoundsSource(i)
	return amac
}

// SetNillableAppFoundsSource sets the "app_founds_source" field if the given value is not nil.
func (amac *AsMarketAppCreate) SetNillableAppFoundsSource(i *int64) *AsMarketAppCreate {
	if i != nil {
		amac.SetAppFoundsSource(*i)
	}
	return amac
}

// SetInnerURL sets the "inner_url" field.
func (amac *AsMarketAppCreate) SetInnerURL(s string) *AsMarketAppCreate {
	amac.mutation.SetInnerURL(s)
	return amac
}

// SetNillableInnerURL sets the "inner_url" field if the given value is not nil.
func (amac *AsMarketAppCreate) SetNillableInnerURL(s *string) *AsMarketAppCreate {
	if s != nil {
		amac.SetInnerURL(*s)
	}
	return amac
}

// SetOutURL sets the "out_url" field.
func (amac *AsMarketAppCreate) SetOutURL(s string) *AsMarketAppCreate {
	amac.mutation.SetOutURL(s)
	return amac
}

// SetNillableOutURL sets the "out_url" field if the given value is not nil.
func (amac *AsMarketAppCreate) SetNillableOutURL(s *string) *AsMarketAppCreate {
	if s != nil {
		amac.SetOutURL(*s)
	}
	return amac
}

// SetReformStatus sets the "reform_status" field.
func (amac *AsMarketAppCreate) SetReformStatus(i int64) *AsMarketAppCreate {
	amac.mutation.SetReformStatus(i)
	return amac
}

// SetOutIPURL sets the "out_ip_url" field.
func (amac *AsMarketAppCreate) SetOutIPURL(s string) *AsMarketAppCreate {
	amac.mutation.SetOutIPURL(s)
	return amac
}

// SetNillableOutIPURL sets the "out_ip_url" field if the given value is not nil.
func (amac *AsMarketAppCreate) SetNillableOutIPURL(s *string) *AsMarketAppCreate {
	if s != nil {
		amac.SetOutIPURL(*s)
	}
	return amac
}

// SetIsDeleted sets the "is_deleted" field.
func (amac *AsMarketAppCreate) SetIsDeleted(i int64) *AsMarketAppCreate {
	amac.mutation.SetIsDeleted(i)
	return amac
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (amac *AsMarketAppCreate) SetNillableIsDeleted(i *int64) *AsMarketAppCreate {
	if i != nil {
		amac.SetIsDeleted(*i)
	}
	return amac
}

// SetStatus sets the "status" field.
func (amac *AsMarketAppCreate) SetStatus(i int64) *AsMarketAppCreate {
	amac.mutation.SetStatus(i)
	return amac
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (amac *AsMarketAppCreate) SetNillableStatus(i *int64) *AsMarketAppCreate {
	if i != nil {
		amac.SetStatus(*i)
	}
	return amac
}

// SetCreateUser sets the "create_user" field.
func (amac *AsMarketAppCreate) SetCreateUser(i int64) *AsMarketAppCreate {
	amac.mutation.SetCreateUser(i)
	return amac
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (amac *AsMarketAppCreate) SetNillableCreateUser(i *int64) *AsMarketAppCreate {
	if i != nil {
		amac.SetCreateUser(*i)
	}
	return amac
}

// SetUpdateUser sets the "update_user" field.
func (amac *AsMarketAppCreate) SetUpdateUser(i int64) *AsMarketAppCreate {
	amac.mutation.SetUpdateUser(i)
	return amac
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (amac *AsMarketAppCreate) SetNillableUpdateUser(i *int64) *AsMarketAppCreate {
	if i != nil {
		amac.SetUpdateUser(*i)
	}
	return amac
}

// SetCreateTime sets the "create_time" field.
func (amac *AsMarketAppCreate) SetCreateTime(dt date.DateTime) *AsMarketAppCreate {
	amac.mutation.SetCreateTime(dt)
	return amac
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (amac *AsMarketAppCreate) SetNillableCreateTime(dt *date.DateTime) *AsMarketAppCreate {
	if dt != nil {
		amac.SetCreateTime(*dt)
	}
	return amac
}

// SetUpdateTime sets the "update_time" field.
func (amac *AsMarketAppCreate) SetUpdateTime(dt date.DateTime) *AsMarketAppCreate {
	amac.mutation.SetUpdateTime(dt)
	return amac
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (amac *AsMarketAppCreate) SetNillableUpdateTime(dt *date.DateTime) *AsMarketAppCreate {
	if dt != nil {
		amac.SetUpdateTime(*dt)
	}
	return amac
}

// SetID sets the "id" field.
func (amac *AsMarketAppCreate) SetID(i int64) *AsMarketAppCreate {
	amac.mutation.SetID(i)
	return amac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (amac *AsMarketAppCreate) SetNillableID(i *int64) *AsMarketAppCreate {
	if i != nil {
		amac.SetID(*i)
	}
	return amac
}

// AddAppMenuIDs adds the "appMenus" edge to the AsMarketMenu entity by IDs.
func (amac *AsMarketAppCreate) AddAppMenuIDs(ids ...int64) *AsMarketAppCreate {
	amac.mutation.AddAppMenuIDs(ids...)
	return amac
}

// AddAppMenus adds the "appMenus" edges to the AsMarketMenu entity.
func (amac *AsMarketAppCreate) AddAppMenus(a ...*AsMarketMenu) *AsMarketAppCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amac.AddAppMenuIDs(ids...)
}

// AddAppRoleIDs adds the "appRoles" edge to the AsMarketAppRole entity by IDs.
func (amac *AsMarketAppCreate) AddAppRoleIDs(ids ...int64) *AsMarketAppCreate {
	amac.mutation.AddAppRoleIDs(ids...)
	return amac
}

// AddAppRoles adds the "appRoles" edges to the AsMarketAppRole entity.
func (amac *AsMarketAppCreate) AddAppRoles(a ...*AsMarketAppRole) *AsMarketAppCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amac.AddAppRoleIDs(ids...)
}

// AddUsedIDs adds the "useds" edge to the AsMarketUsedApp entity by IDs.
func (amac *AsMarketAppCreate) AddUsedIDs(ids ...int64) *AsMarketAppCreate {
	amac.mutation.AddUsedIDs(ids...)
	return amac
}

// AddUseds adds the "useds" edges to the AsMarketUsedApp entity.
func (amac *AsMarketAppCreate) AddUseds(a ...*AsMarketUsedApp) *AsMarketAppCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amac.AddUsedIDs(ids...)
}

// AddAppAlertIDs adds the "appAlerts" edge to the AsMarketAppAlert entity by IDs.
func (amac *AsMarketAppCreate) AddAppAlertIDs(ids ...int64) *AsMarketAppCreate {
	amac.mutation.AddAppAlertIDs(ids...)
	return amac
}

// AddAppAlerts adds the "appAlerts" edges to the AsMarketAppAlert entity.
func (amac *AsMarketAppCreate) AddAppAlerts(a ...*AsMarketAppAlert) *AsMarketAppCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amac.AddAppAlertIDs(ids...)
}

// AddAppRedeployIDs adds the "appRedeploys" edge to the AsRedeployData entity by IDs.
func (amac *AsMarketAppCreate) AddAppRedeployIDs(ids ...int64) *AsMarketAppCreate {
	amac.mutation.AddAppRedeployIDs(ids...)
	return amac
}

// AddAppRedeploys adds the "appRedeploys" edges to the AsRedeployData entity.
func (amac *AsMarketAppCreate) AddAppRedeploys(a ...*AsRedeployData) *AsMarketAppCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amac.AddAppRedeployIDs(ids...)
}

// AddAppKeyIDs adds the "appKeys" edge to the AsMarketAppKeySecret entity by IDs.
func (amac *AsMarketAppCreate) AddAppKeyIDs(ids ...int64) *AsMarketAppCreate {
	amac.mutation.AddAppKeyIDs(ids...)
	return amac
}

// AddAppKeys adds the "appKeys" edges to the AsMarketAppKeySecret entity.
func (amac *AsMarketAppCreate) AddAppKeys(a ...*AsMarketAppKeySecret) *AsMarketAppCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amac.AddAppKeyIDs(ids...)
}

// AddAppPurchaseIDs adds the "appPurchases" edge to the AsMarketAppPurchase entity by IDs.
func (amac *AsMarketAppCreate) AddAppPurchaseIDs(ids ...int64) *AsMarketAppCreate {
	amac.mutation.AddAppPurchaseIDs(ids...)
	return amac
}

// AddAppPurchases adds the "appPurchases" edges to the AsMarketAppPurchase entity.
func (amac *AsMarketAppCreate) AddAppPurchases(a ...*AsMarketAppPurchase) *AsMarketAppCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amac.AddAppPurchaseIDs(ids...)
}

// AddAppComponentIDs adds the "appComponents" edge to the AsMarketAppComponent entity by IDs.
func (amac *AsMarketAppCreate) AddAppComponentIDs(ids ...int64) *AsMarketAppCreate {
	amac.mutation.AddAppComponentIDs(ids...)
	return amac
}

// AddAppComponents adds the "appComponents" edges to the AsMarketAppComponent entity.
func (amac *AsMarketAppCreate) AddAppComponents(a ...*AsMarketAppComponent) *AsMarketAppCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amac.AddAppComponentIDs(ids...)
}

// AddAppGroupDistribIDs adds the "appGroupDistribs" edge to the AsMarketAppGroupDistribution entity by IDs.
func (amac *AsMarketAppCreate) AddAppGroupDistribIDs(ids ...int64) *AsMarketAppCreate {
	amac.mutation.AddAppGroupDistribIDs(ids...)
	return amac
}

// AddAppGroupDistribs adds the "appGroupDistribs" edges to the AsMarketAppGroupDistribution entity.
func (amac *AsMarketAppCreate) AddAppGroupDistribs(a ...*AsMarketAppGroupDistribution) *AsMarketAppCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amac.AddAppGroupDistribIDs(ids...)
}

// AddAppGroupDistribConfigIDs adds the "appGroupDistribConfigs" edge to the AsAppGroupDistributionData entity by IDs.
func (amac *AsMarketAppCreate) AddAppGroupDistribConfigIDs(ids ...int64) *AsMarketAppCreate {
	amac.mutation.AddAppGroupDistribConfigIDs(ids...)
	return amac
}

// AddAppGroupDistribConfigs adds the "appGroupDistribConfigs" edges to the AsAppGroupDistributionData entity.
func (amac *AsMarketAppCreate) AddAppGroupDistribConfigs(a ...*AsAppGroupDistributionData) *AsMarketAppCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amac.AddAppGroupDistribConfigIDs(ids...)
}

// AddAppGroupDistribsRelationIDs adds the "appGroupDistribsRelation" edge to the AsMarketAppGroupDistributionRelation entity by IDs.
func (amac *AsMarketAppCreate) AddAppGroupDistribsRelationIDs(ids ...int64) *AsMarketAppCreate {
	amac.mutation.AddAppGroupDistribsRelationIDs(ids...)
	return amac
}

// AddAppGroupDistribsRelation adds the "appGroupDistribsRelation" edges to the AsMarketAppGroupDistributionRelation entity.
func (amac *AsMarketAppCreate) AddAppGroupDistribsRelation(a ...*AsMarketAppGroupDistributionRelation) *AsMarketAppCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amac.AddAppGroupDistribsRelationIDs(ids...)
}

// Mutation returns the AsMarketAppMutation object of the builder.
func (amac *AsMarketAppCreate) Mutation() *AsMarketAppMutation {
	return amac.mutation
}

// Save creates the AsMarketApp in the database.
func (amac *AsMarketAppCreate) Save(ctx context.Context) (*AsMarketApp, error) {
	var (
		err  error
		node *AsMarketApp
	)
	amac.defaults()
	if len(amac.hooks) == 0 {
		if err = amac.check(); err != nil {
			return nil, err
		}
		node, err = amac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsMarketAppMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = amac.check(); err != nil {
				return nil, err
			}
			amac.mutation = mutation
			if node, err = amac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(amac.hooks) - 1; i >= 0; i-- {
			if amac.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = amac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, amac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (amac *AsMarketAppCreate) SaveX(ctx context.Context) *AsMarketApp {
	v, err := amac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (amac *AsMarketAppCreate) Exec(ctx context.Context) error {
	_, err := amac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amac *AsMarketAppCreate) ExecX(ctx context.Context) {
	if err := amac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amac *AsMarketAppCreate) defaults() {
	if _, ok := amac.mutation.SaleStatus(); !ok {
		v := asmarketapp.DefaultSaleStatus
		amac.mutation.SetSaleStatus(v)
	}
	if _, ok := amac.mutation.Platform(); !ok {
		v := asmarketapp.DefaultPlatform
		amac.mutation.SetPlatform(v)
	}
	if _, ok := amac.mutation.DeployType(); !ok {
		v := asmarketapp.DefaultDeployType
		amac.mutation.SetDeployType(v)
	}
	if _, ok := amac.mutation.IsDeleted(); !ok {
		v := asmarketapp.DefaultIsDeleted
		amac.mutation.SetIsDeleted(v)
	}
	if _, ok := amac.mutation.Status(); !ok {
		v := asmarketapp.DefaultStatus
		amac.mutation.SetStatus(v)
	}
	if _, ok := amac.mutation.CreateTime(); !ok {
		v := asmarketapp.DefaultCreateTime()
		amac.mutation.SetCreateTime(v)
	}
	if _, ok := amac.mutation.UpdateTime(); !ok {
		v := asmarketapp.DefaultUpdateTime()
		amac.mutation.SetUpdateTime(v)
	}
	if _, ok := amac.mutation.ID(); !ok {
		v := asmarketapp.DefaultID()
		amac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (amac *AsMarketAppCreate) check() error {
	if _, ok := amac.mutation.AppStar(); !ok {
		return &ValidationError{Name: "app_star", err: errors.New(`schema: missing required field "AsMarketApp.app_star"`)}
	}
	if _, ok := amac.mutation.ReformStatus(); !ok {
		return &ValidationError{Name: "reform_status", err: errors.New(`schema: missing required field "AsMarketApp.reform_status"`)}
	}
	if _, ok := amac.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "is_deleted", err: errors.New(`schema: missing required field "AsMarketApp.is_deleted"`)}
	}
	return nil
}

func (amac *AsMarketAppCreate) sqlSave(ctx context.Context) (*AsMarketApp, error) {
	_node, _spec := amac.createSpec()
	if err := sqlgraph.CreateNode(ctx, amac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (amac *AsMarketAppCreate) createSpec() (*AsMarketApp, *sqlgraph.CreateSpec) {
	var (
		_node = &AsMarketApp{config: amac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: asmarketapp.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asmarketapp.FieldID,
			},
		}
	)
	if id, ok := amac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := amac.mutation.AppName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapp.FieldAppName,
		})
		_node.AppName = value
	}
	if value, ok := amac.mutation.Icon(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapp.FieldIcon,
		})
		_node.Icon = value
	}
	if value, ok := amac.mutation.Version(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapp.FieldVersion,
		})
		_node.Version = value
	}
	if value, ok := amac.mutation.Contact(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapp.FieldContact,
		})
		_node.Contact = value
	}
	if value, ok := amac.mutation.ContactName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapp.FieldContactName,
		})
		_node.ContactName = value
	}
	if value, ok := amac.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapp.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := amac.mutation.File(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapp.FieldFile,
		})
		_node.File = value
	}
	if value, ok := amac.mutation.SaleStatus(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldSaleStatus,
		})
		_node.SaleStatus = value
	}
	if value, ok := amac.mutation.TenantID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapp.FieldTenantID,
		})
		_node.TenantID = value
	}
	if value, ok := amac.mutation.Platform(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldPlatform,
		})
		_node.Platform = value
	}
	if value, ok := amac.mutation.TargetUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldTargetUser,
		})
		_node.TargetUser = value
	}
	if value, ok := amac.mutation.DeployStatus(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldDeployStatus,
		})
		_node.DeployStatus = value
	}
	if value, ok := amac.mutation.DeployAddress(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapp.FieldDeployAddress,
		})
		_node.DeployAddress = value
	}
	if value, ok := amac.mutation.DeployType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldDeployType,
		})
		_node.DeployType = value
	}
	if value, ok := amac.mutation.PublishTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketapp.FieldPublishTime,
		})
		_node.PublishTime = value
	}
	if value, ok := amac.mutation.AppType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldAppType,
		})
		_node.AppType = value
	}
	if value, ok := amac.mutation.ApplyTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketapp.FieldApplyTime,
		})
		_node.ApplyTime = value
	}
	if value, ok := amac.mutation.AppAddress(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapp.FieldAppAddress,
		})
		_node.AppAddress = value
	}
	if value, ok := amac.mutation.AppMail(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapp.FieldAppMail,
		})
		_node.AppMail = value
	}
	if value, ok := amac.mutation.AppPhoto(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapp.FieldAppPhoto,
		})
		_node.AppPhoto = value
	}
	if value, ok := amac.mutation.AppField(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldAppField,
		})
		_node.AppField = value
	}
	if value, ok := amac.mutation.AppCategory(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldAppCategory,
		})
		_node.AppCategory = value
	}
	if value, ok := amac.mutation.AppProjectSource(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldAppProjectSource,
		})
		_node.AppProjectSource = value
	}
	if value, ok := amac.mutation.AppStar(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldAppStar,
		})
		_node.AppStar = value
	}
	if value, ok := amac.mutation.AppFoundsSource(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldAppFoundsSource,
		})
		_node.AppFoundsSource = value
	}
	if value, ok := amac.mutation.InnerURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapp.FieldInnerURL,
		})
		_node.InnerURL = value
	}
	if value, ok := amac.mutation.OutURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapp.FieldOutURL,
		})
		_node.OutURL = value
	}
	if value, ok := amac.mutation.ReformStatus(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldReformStatus,
		})
		_node.ReformStatus = value
	}
	if value, ok := amac.mutation.OutIPURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketapp.FieldOutIPURL,
		})
		_node.OutIPURL = value
	}
	if value, ok := amac.mutation.IsDeleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldIsDeleted,
		})
		_node.IsDeleted = value
	}
	if value, ok := amac.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := amac.mutation.CreateUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldCreateUser,
		})
		_node.CreateUser = value
	}
	if value, ok := amac.mutation.UpdateUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketapp.FieldUpdateUser,
		})
		_node.UpdateUser = value
	}
	if value, ok := amac.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketapp.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := amac.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketapp.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if nodes := amac.mutation.AppMenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppMenusTable,
			Columns: []string{asmarketapp.AppMenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := amac.mutation.AppRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppRolesTable,
			Columns: []string{asmarketapp.AppRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapprole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := amac.mutation.UsedsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.UsedsTable,
			Columns: []string{asmarketapp.UsedsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketusedapp.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := amac.mutation.AppAlertsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppAlertsTable,
			Columns: []string{asmarketapp.AppAlertsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappalert.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := amac.mutation.AppRedeploysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppRedeploysTable,
			Columns: []string{asmarketapp.AppRedeploysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asredeploydata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := amac.mutation.AppKeysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppKeysTable,
			Columns: []string{asmarketapp.AppKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappkeysecret.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := amac.mutation.AppPurchasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppPurchasesTable,
			Columns: []string{asmarketapp.AppPurchasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapppurchase.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := amac.mutation.AppComponentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppComponentsTable,
			Columns: []string{asmarketapp.AppComponentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappcomponent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := amac.mutation.AppGroupDistribsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppGroupDistribsTable,
			Columns: []string{asmarketapp.AppGroupDistribsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappgroupdistribution.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := amac.mutation.AppGroupDistribConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppGroupDistribConfigsTable,
			Columns: []string{asmarketapp.AppGroupDistribConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asappgroupdistributiondata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := amac.mutation.AppGroupDistribsRelationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketapp.AppGroupDistribsRelationTable,
			Columns: []string{asmarketapp.AppGroupDistribsRelationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappgroupdistributionrelation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AsMarketAppCreateBulk is the builder for creating many AsMarketApp entities in bulk.
type AsMarketAppCreateBulk struct {
	config
	builders []*AsMarketAppCreate
}

// Save creates the AsMarketApp entities in the database.
func (amacb *AsMarketAppCreateBulk) Save(ctx context.Context) ([]*AsMarketApp, error) {
	specs := make([]*sqlgraph.CreateSpec, len(amacb.builders))
	nodes := make([]*AsMarketApp, len(amacb.builders))
	mutators := make([]Mutator, len(amacb.builders))
	for i := range amacb.builders {
		func(i int, root context.Context) {
			builder := amacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AsMarketAppMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, amacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, amacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, amacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (amacb *AsMarketAppCreateBulk) SaveX(ctx context.Context) []*AsMarketApp {
	v, err := amacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (amacb *AsMarketAppCreateBulk) Exec(ctx context.Context) error {
	_, err := amacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amacb *AsMarketAppCreateBulk) ExecX(ctx context.Context) {
	if err := amacb.Exec(ctx); err != nil {
		panic(err)
	}
}
