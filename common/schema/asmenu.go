// Code generated by entc, DO NOT EDIT.

package schema

import (
	"fmt"
	"orginone/common/schema/asmenu"
	"orginone/common/tools/date"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// AsMenu is the model entity for the AsMenu schema.
type AsMenu struct {
	config `json:"-"`
	// ID of the ent.
	// 主键
	ID int64 `json:"id,string"`
	// ParentID holds the value of the "parent_id" field.
	// 父菜单id
	ParentID int64 `json:"parentId,string"`
	// Name holds the value of the "name" field.
	// 菜单名称
	Name string `json:"name"`
	// Alias holds the value of the "alias" field.
	// 菜单别名(拼音自动生成)
	Alias string `json:"alias"`
	// Path holds the value of the "path" field.
	// 菜单路径
	Path string `json:"path"`
	// Icon holds the value of the "icon" field.
	// 菜单图标
	Icon string `json:"icon"`
	// Sort holds the value of the "sort" field.
	// 排序值
	Sort int64 `json:"sort"`
	// Category holds the value of the "category" field.
	// 菜单类型
	Category int64 `json:"category,string"`
	// IsOpen holds the value of the "is_open" field.
	// 是否打开新页面
	IsOpen int64 `json:"isOpen"`
	// Remark holds the value of the "remark" field.
	// 描述
	Remark string `json:"remark"`
	// ReformStatus holds the value of the "reform_status" field.
	ReformStatus int64 `json:"reformStatus"`
	// IsDeleted holds the value of the "is_deleted" field.
	// 是否被删除
	IsDeleted int64 `json:"isDeleted"`
	// Status holds the value of the "status" field.
	// 状态
	Status int64 `json:"status"`
	// CreateUser holds the value of the "create_user" field.
	// 创建用户
	CreateUser int64 `json:"createUser"`
	// UpdateUser holds the value of the "update_user" field.
	// 更新用户
	UpdateUser int64 `json:"updateUser"`
	// CreateTime holds the value of the "create_time" field.
	// 创建时间
	CreateTime date.DateTime `json:"createTime"`
	// UpdateTime holds the value of the "update_time" field.
	// 更新时间
	UpdateTime date.DateTime `json:"updateTime"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AsMenuQuery when eager-loading is set.
	Edges AsMenuEdges `json:"edges"`
}

// AsMenuEdges holds the relations/edges for other nodes in the graph.
type AsMenuEdges struct {
	// Parentx holds the value of the parentx edge.
	Parentx *AsMenu `json:"parentx"`
	// Childrens holds the value of the childrens edge.
	Childrens []*AsMenu `json:"childrens"`
	// Roles holds the value of the roles edge.
	Roles []*AsRole `json:"roles"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ParentxOrErr returns the Parentx value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AsMenuEdges) ParentxOrErr() (*AsMenu, error) {
	if e.loadedTypes[0] {
		if e.Parentx == nil {
			// The edge parentx was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: asmenu.Label}
		}
		return e.Parentx, nil
	}
	return nil, &NotLoadedError{edge: "parentx"}
}

// ChildrensOrErr returns the Childrens value or an error if the edge
// was not loaded in eager-loading.
func (e AsMenuEdges) ChildrensOrErr() ([]*AsMenu, error) {
	if e.loadedTypes[1] {
		return e.Childrens, nil
	}
	return nil, &NotLoadedError{edge: "childrens"}
}

// RolesOrErr returns the Roles value or an error if the edge
// was not loaded in eager-loading.
func (e AsMenuEdges) RolesOrErr() ([]*AsRole, error) {
	if e.loadedTypes[2] {
		return e.Roles, nil
	}
	return nil, &NotLoadedError{edge: "roles"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AsMenu) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case asmenu.FieldID, asmenu.FieldParentID, asmenu.FieldSort, asmenu.FieldCategory, asmenu.FieldIsOpen, asmenu.FieldReformStatus, asmenu.FieldIsDeleted, asmenu.FieldStatus, asmenu.FieldCreateUser, asmenu.FieldUpdateUser:
			values[i] = new(sql.NullInt64)
		case asmenu.FieldName, asmenu.FieldAlias, asmenu.FieldPath, asmenu.FieldIcon, asmenu.FieldRemark:
			values[i] = new(sql.NullString)
		case asmenu.FieldCreateTime, asmenu.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AsMenu", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AsMenu fields.
func (am *AsMenu) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case asmenu.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			am.ID = int64(value.Int64)
		case asmenu.FieldParentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value.Valid {
				am.ParentID = value.Int64
			}
		case asmenu.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				am.Name = value.String
			}
		case asmenu.FieldAlias:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field alias", values[i])
			} else if value.Valid {
				am.Alias = value.String
			}
		case asmenu.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				am.Path = value.String
			}
		case asmenu.FieldIcon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon", values[i])
			} else if value.Valid {
				am.Icon = value.String
			}
		case asmenu.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				am.Sort = value.Int64
			}
		case asmenu.FieldCategory:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				am.Category = value.Int64
			}
		case asmenu.FieldIsOpen:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_open", values[i])
			} else if value.Valid {
				am.IsOpen = value.Int64
			}
		case asmenu.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				am.Remark = value.String
			}
		case asmenu.FieldReformStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field reform_status", values[i])
			} else if value.Valid {
				am.ReformStatus = value.Int64
			}
		case asmenu.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				am.IsDeleted = value.Int64
			}
		case asmenu.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				am.Status = value.Int64
			}
		case asmenu.FieldCreateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_user", values[i])
			} else if value.Valid {
				am.CreateUser = value.Int64
			}
		case asmenu.FieldUpdateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_user", values[i])
			} else if value.Valid {
				am.UpdateUser = value.Int64
			}
		case asmenu.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				am.CreateTime = date.DateTime(value.Time)
			}
		case asmenu.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				am.UpdateTime = date.DateTime(value.Time)
			}
		}
	}
	return nil
}

// QueryParentx queries the "parentx" edge of the AsMenu entity.
func (am *AsMenu) QueryParentx() *AsMenuQuery {
	return (&AsMenuClient{config: am.config}).QueryParentx(am)
}

// QueryChildrens queries the "childrens" edge of the AsMenu entity.
func (am *AsMenu) QueryChildrens() *AsMenuQuery {
	return (&AsMenuClient{config: am.config}).QueryChildrens(am)
}

// QueryRoles queries the "roles" edge of the AsMenu entity.
func (am *AsMenu) QueryRoles() *AsRoleQuery {
	return (&AsMenuClient{config: am.config}).QueryRoles(am)
}

// Update returns a builder for updating this AsMenu.
// Note that you need to call AsMenu.Unwrap() before calling this method if this AsMenu
// was returned from a transaction, and the transaction was committed or rolled back.
func (am *AsMenu) Update() *AsMenuUpdateOne {
	return (&AsMenuClient{config: am.config}).UpdateOne(am)
}

// Unwrap unwraps the AsMenu entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (am *AsMenu) Unwrap() *AsMenu {
	tx, ok := am.config.driver.(*txDriver)
	if !ok {
		panic("schema: AsMenu is not a transactional entity")
	}
	am.config.driver = tx.drv
	return am
}

// String implements the fmt.Stringer.
func (am *AsMenu) String() string {
	var builder strings.Builder
	builder.WriteString("AsMenu(")
	builder.WriteString(fmt.Sprintf("id=%v", am.ID))
	builder.WriteString(", parent_id=")
	builder.WriteString(fmt.Sprintf("%v", am.ParentID))
	builder.WriteString(", name=")
	builder.WriteString(am.Name)
	builder.WriteString(", alias=")
	builder.WriteString(am.Alias)
	builder.WriteString(", path=")
	builder.WriteString(am.Path)
	builder.WriteString(", icon=")
	builder.WriteString(am.Icon)
	builder.WriteString(", sort=")
	builder.WriteString(fmt.Sprintf("%v", am.Sort))
	builder.WriteString(", category=")
	builder.WriteString(fmt.Sprintf("%v", am.Category))
	builder.WriteString(", is_open=")
	builder.WriteString(fmt.Sprintf("%v", am.IsOpen))
	builder.WriteString(", remark=")
	builder.WriteString(am.Remark)
	builder.WriteString(", reform_status=")
	builder.WriteString(fmt.Sprintf("%v", am.ReformStatus))
	builder.WriteString(", is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", am.IsDeleted))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", am.Status))
	builder.WriteString(", create_user=")
	builder.WriteString(fmt.Sprintf("%v", am.CreateUser))
	builder.WriteString(", update_user=")
	builder.WriteString(fmt.Sprintf("%v", am.UpdateUser))
	builder.WriteString(", create_time=")
	builder.WriteString(fmt.Sprintf("%v", am.CreateTime))
	builder.WriteString(", update_time=")
	builder.WriteString(fmt.Sprintf("%v", am.UpdateTime))
	builder.WriteByte(')')
	return builder.String()
}

// AsMenus is a parsable slice of AsMenu.
type AsMenus []*AsMenu

func (am AsMenus) config(cfg config) {
	for _i := range am {
		am[_i].config = cfg
	}
}
