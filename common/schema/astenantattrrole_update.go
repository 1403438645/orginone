// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/asrole"
	"orginone/common/schema/astenantattr"
	"orginone/common/schema/astenantattrrole"
	"orginone/common/schema/predicate"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsTenantAttrRoleUpdate is the builder for updating AsTenantAttrRole entities.
type AsTenantAttrRoleUpdate struct {
	config
	hooks    []Hook
	mutation *AsTenantAttrRoleMutation
}

// Where appends a list predicates to the AsTenantAttrRoleUpdate builder.
func (ataru *AsTenantAttrRoleUpdate) Where(ps ...predicate.AsTenantAttrRole) *AsTenantAttrRoleUpdate {
	ataru.mutation.Where(ps...)
	return ataru
}

// SetAttrID sets the "attr_id" field.
func (ataru *AsTenantAttrRoleUpdate) SetAttrID(i int64) *AsTenantAttrRoleUpdate {
	ataru.mutation.SetAttrID(i)
	return ataru
}

// SetNillableAttrID sets the "attr_id" field if the given value is not nil.
func (ataru *AsTenantAttrRoleUpdate) SetNillableAttrID(i *int64) *AsTenantAttrRoleUpdate {
	if i != nil {
		ataru.SetAttrID(*i)
	}
	return ataru
}

// ClearAttrID clears the value of the "attr_id" field.
func (ataru *AsTenantAttrRoleUpdate) ClearAttrID() *AsTenantAttrRoleUpdate {
	ataru.mutation.ClearAttrID()
	return ataru
}

// SetRoleID sets the "role_id" field.
func (ataru *AsTenantAttrRoleUpdate) SetRoleID(i int64) *AsTenantAttrRoleUpdate {
	ataru.mutation.SetRoleID(i)
	return ataru
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (ataru *AsTenantAttrRoleUpdate) SetNillableRoleID(i *int64) *AsTenantAttrRoleUpdate {
	if i != nil {
		ataru.SetRoleID(*i)
	}
	return ataru
}

// ClearRoleID clears the value of the "role_id" field.
func (ataru *AsTenantAttrRoleUpdate) ClearRoleID() *AsTenantAttrRoleUpdate {
	ataru.mutation.ClearRoleID()
	return ataru
}

// SetIsDefault sets the "is_default" field.
func (ataru *AsTenantAttrRoleUpdate) SetIsDefault(i int64) *AsTenantAttrRoleUpdate {
	ataru.mutation.ResetIsDefault()
	ataru.mutation.SetIsDefault(i)
	return ataru
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (ataru *AsTenantAttrRoleUpdate) SetNillableIsDefault(i *int64) *AsTenantAttrRoleUpdate {
	if i != nil {
		ataru.SetIsDefault(*i)
	}
	return ataru
}

// AddIsDefault adds i to the "is_default" field.
func (ataru *AsTenantAttrRoleUpdate) AddIsDefault(i int64) *AsTenantAttrRoleUpdate {
	ataru.mutation.AddIsDefault(i)
	return ataru
}

// SetIsDeleted sets the "is_deleted" field.
func (ataru *AsTenantAttrRoleUpdate) SetIsDeleted(i int64) *AsTenantAttrRoleUpdate {
	ataru.mutation.ResetIsDeleted()
	ataru.mutation.SetIsDeleted(i)
	return ataru
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (ataru *AsTenantAttrRoleUpdate) SetNillableIsDeleted(i *int64) *AsTenantAttrRoleUpdate {
	if i != nil {
		ataru.SetIsDeleted(*i)
	}
	return ataru
}

// AddIsDeleted adds i to the "is_deleted" field.
func (ataru *AsTenantAttrRoleUpdate) AddIsDeleted(i int64) *AsTenantAttrRoleUpdate {
	ataru.mutation.AddIsDeleted(i)
	return ataru
}

// SetStatus sets the "status" field.
func (ataru *AsTenantAttrRoleUpdate) SetStatus(i int64) *AsTenantAttrRoleUpdate {
	ataru.mutation.ResetStatus()
	ataru.mutation.SetStatus(i)
	return ataru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ataru *AsTenantAttrRoleUpdate) SetNillableStatus(i *int64) *AsTenantAttrRoleUpdate {
	if i != nil {
		ataru.SetStatus(*i)
	}
	return ataru
}

// AddStatus adds i to the "status" field.
func (ataru *AsTenantAttrRoleUpdate) AddStatus(i int64) *AsTenantAttrRoleUpdate {
	ataru.mutation.AddStatus(i)
	return ataru
}

// ClearStatus clears the value of the "status" field.
func (ataru *AsTenantAttrRoleUpdate) ClearStatus() *AsTenantAttrRoleUpdate {
	ataru.mutation.ClearStatus()
	return ataru
}

// SetCreateUser sets the "create_user" field.
func (ataru *AsTenantAttrRoleUpdate) SetCreateUser(i int64) *AsTenantAttrRoleUpdate {
	ataru.mutation.ResetCreateUser()
	ataru.mutation.SetCreateUser(i)
	return ataru
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (ataru *AsTenantAttrRoleUpdate) SetNillableCreateUser(i *int64) *AsTenantAttrRoleUpdate {
	if i != nil {
		ataru.SetCreateUser(*i)
	}
	return ataru
}

// AddCreateUser adds i to the "create_user" field.
func (ataru *AsTenantAttrRoleUpdate) AddCreateUser(i int64) *AsTenantAttrRoleUpdate {
	ataru.mutation.AddCreateUser(i)
	return ataru
}

// ClearCreateUser clears the value of the "create_user" field.
func (ataru *AsTenantAttrRoleUpdate) ClearCreateUser() *AsTenantAttrRoleUpdate {
	ataru.mutation.ClearCreateUser()
	return ataru
}

// SetUpdateUser sets the "update_user" field.
func (ataru *AsTenantAttrRoleUpdate) SetUpdateUser(i int64) *AsTenantAttrRoleUpdate {
	ataru.mutation.ResetUpdateUser()
	ataru.mutation.SetUpdateUser(i)
	return ataru
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (ataru *AsTenantAttrRoleUpdate) SetNillableUpdateUser(i *int64) *AsTenantAttrRoleUpdate {
	if i != nil {
		ataru.SetUpdateUser(*i)
	}
	return ataru
}

// AddUpdateUser adds i to the "update_user" field.
func (ataru *AsTenantAttrRoleUpdate) AddUpdateUser(i int64) *AsTenantAttrRoleUpdate {
	ataru.mutation.AddUpdateUser(i)
	return ataru
}

// ClearUpdateUser clears the value of the "update_user" field.
func (ataru *AsTenantAttrRoleUpdate) ClearUpdateUser() *AsTenantAttrRoleUpdate {
	ataru.mutation.ClearUpdateUser()
	return ataru
}

// SetUpdateTime sets the "update_time" field.
func (ataru *AsTenantAttrRoleUpdate) SetUpdateTime(dt date.DateTime) *AsTenantAttrRoleUpdate {
	ataru.mutation.SetUpdateTime(dt)
	return ataru
}

// ClearUpdateTime clears the value of the "update_time" field.
func (ataru *AsTenantAttrRoleUpdate) ClearUpdateTime() *AsTenantAttrRoleUpdate {
	ataru.mutation.ClearUpdateTime()
	return ataru
}

// SetTenantAttrxID sets the "tenantAttrx" edge to the AsTenantAttr entity by ID.
func (ataru *AsTenantAttrRoleUpdate) SetTenantAttrxID(id int64) *AsTenantAttrRoleUpdate {
	ataru.mutation.SetTenantAttrxID(id)
	return ataru
}

// SetNillableTenantAttrxID sets the "tenantAttrx" edge to the AsTenantAttr entity by ID if the given value is not nil.
func (ataru *AsTenantAttrRoleUpdate) SetNillableTenantAttrxID(id *int64) *AsTenantAttrRoleUpdate {
	if id != nil {
		ataru = ataru.SetTenantAttrxID(*id)
	}
	return ataru
}

// SetTenantAttrx sets the "tenantAttrx" edge to the AsTenantAttr entity.
func (ataru *AsTenantAttrRoleUpdate) SetTenantAttrx(a *AsTenantAttr) *AsTenantAttrRoleUpdate {
	return ataru.SetTenantAttrxID(a.ID)
}

// SetRolexID sets the "rolex" edge to the AsRole entity by ID.
func (ataru *AsTenantAttrRoleUpdate) SetRolexID(id int64) *AsTenantAttrRoleUpdate {
	ataru.mutation.SetRolexID(id)
	return ataru
}

// SetNillableRolexID sets the "rolex" edge to the AsRole entity by ID if the given value is not nil.
func (ataru *AsTenantAttrRoleUpdate) SetNillableRolexID(id *int64) *AsTenantAttrRoleUpdate {
	if id != nil {
		ataru = ataru.SetRolexID(*id)
	}
	return ataru
}

// SetRolex sets the "rolex" edge to the AsRole entity.
func (ataru *AsTenantAttrRoleUpdate) SetRolex(a *AsRole) *AsTenantAttrRoleUpdate {
	return ataru.SetRolexID(a.ID)
}

// Mutation returns the AsTenantAttrRoleMutation object of the builder.
func (ataru *AsTenantAttrRoleUpdate) Mutation() *AsTenantAttrRoleMutation {
	return ataru.mutation
}

// ClearTenantAttrx clears the "tenantAttrx" edge to the AsTenantAttr entity.
func (ataru *AsTenantAttrRoleUpdate) ClearTenantAttrx() *AsTenantAttrRoleUpdate {
	ataru.mutation.ClearTenantAttrx()
	return ataru
}

// ClearRolex clears the "rolex" edge to the AsRole entity.
func (ataru *AsTenantAttrRoleUpdate) ClearRolex() *AsTenantAttrRoleUpdate {
	ataru.mutation.ClearRolex()
	return ataru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ataru *AsTenantAttrRoleUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ataru.defaults()
	if len(ataru.hooks) == 0 {
		affected, err = ataru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsTenantAttrRoleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ataru.mutation = mutation
			affected, err = ataru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ataru.hooks) - 1; i >= 0; i-- {
			if ataru.hooks[i] == nil {
				return 0, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = ataru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ataru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ataru *AsTenantAttrRoleUpdate) SaveX(ctx context.Context) int {
	affected, err := ataru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ataru *AsTenantAttrRoleUpdate) Exec(ctx context.Context) error {
	_, err := ataru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ataru *AsTenantAttrRoleUpdate) ExecX(ctx context.Context) {
	if err := ataru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ataru *AsTenantAttrRoleUpdate) defaults() {
	if _, ok := ataru.mutation.UpdateTime(); !ok && !ataru.mutation.UpdateTimeCleared() {
		v := astenantattrrole.UpdateDefaultUpdateTime()
		ataru.mutation.SetUpdateTime(v)
	}
}

func (ataru *AsTenantAttrRoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   astenantattrrole.Table,
			Columns: astenantattrrole.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: astenantattrrole.FieldID,
			},
		},
	}
	if ps := ataru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ataru.mutation.IsDefault(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenantattrrole.FieldIsDefault,
		})
	}
	if value, ok := ataru.mutation.AddedIsDefault(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenantattrrole.FieldIsDefault,
		})
	}
	if value, ok := ataru.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenantattrrole.FieldIsDeleted,
		})
	}
	if value, ok := ataru.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenantattrrole.FieldIsDeleted,
		})
	}
	if value, ok := ataru.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenantattrrole.FieldStatus,
		})
	}
	if value, ok := ataru.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenantattrrole.FieldStatus,
		})
	}
	if ataru.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: astenantattrrole.FieldStatus,
		})
	}
	if value, ok := ataru.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenantattrrole.FieldCreateUser,
		})
	}
	if value, ok := ataru.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenantattrrole.FieldCreateUser,
		})
	}
	if ataru.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: astenantattrrole.FieldCreateUser,
		})
	}
	if value, ok := ataru.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenantattrrole.FieldUpdateUser,
		})
	}
	if value, ok := ataru.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenantattrrole.FieldUpdateUser,
		})
	}
	if ataru.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: astenantattrrole.FieldUpdateUser,
		})
	}
	if ataru.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: astenantattrrole.FieldCreateTime,
		})
	}
	if value, ok := ataru.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: astenantattrrole.FieldUpdateTime,
		})
	}
	if ataru.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: astenantattrrole.FieldUpdateTime,
		})
	}
	if ataru.mutation.TenantAttrxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   astenantattrrole.TenantAttrxTable,
			Columns: []string{astenantattrrole.TenantAttrxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: astenantattr.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ataru.mutation.TenantAttrxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   astenantattrrole.TenantAttrxTable,
			Columns: []string{astenantattrrole.TenantAttrxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: astenantattr.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ataru.mutation.RolexCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   astenantattrrole.RolexTable,
			Columns: []string{astenantattrrole.RolexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asrole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ataru.mutation.RolexIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   astenantattrrole.RolexTable,
			Columns: []string{astenantattrrole.RolexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ataru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{astenantattrrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AsTenantAttrRoleUpdateOne is the builder for updating a single AsTenantAttrRole entity.
type AsTenantAttrRoleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AsTenantAttrRoleMutation
}

// SetAttrID sets the "attr_id" field.
func (ataruo *AsTenantAttrRoleUpdateOne) SetAttrID(i int64) *AsTenantAttrRoleUpdateOne {
	ataruo.mutation.SetAttrID(i)
	return ataruo
}

// SetNillableAttrID sets the "attr_id" field if the given value is not nil.
func (ataruo *AsTenantAttrRoleUpdateOne) SetNillableAttrID(i *int64) *AsTenantAttrRoleUpdateOne {
	if i != nil {
		ataruo.SetAttrID(*i)
	}
	return ataruo
}

// ClearAttrID clears the value of the "attr_id" field.
func (ataruo *AsTenantAttrRoleUpdateOne) ClearAttrID() *AsTenantAttrRoleUpdateOne {
	ataruo.mutation.ClearAttrID()
	return ataruo
}

// SetRoleID sets the "role_id" field.
func (ataruo *AsTenantAttrRoleUpdateOne) SetRoleID(i int64) *AsTenantAttrRoleUpdateOne {
	ataruo.mutation.SetRoleID(i)
	return ataruo
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (ataruo *AsTenantAttrRoleUpdateOne) SetNillableRoleID(i *int64) *AsTenantAttrRoleUpdateOne {
	if i != nil {
		ataruo.SetRoleID(*i)
	}
	return ataruo
}

// ClearRoleID clears the value of the "role_id" field.
func (ataruo *AsTenantAttrRoleUpdateOne) ClearRoleID() *AsTenantAttrRoleUpdateOne {
	ataruo.mutation.ClearRoleID()
	return ataruo
}

// SetIsDefault sets the "is_default" field.
func (ataruo *AsTenantAttrRoleUpdateOne) SetIsDefault(i int64) *AsTenantAttrRoleUpdateOne {
	ataruo.mutation.ResetIsDefault()
	ataruo.mutation.SetIsDefault(i)
	return ataruo
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (ataruo *AsTenantAttrRoleUpdateOne) SetNillableIsDefault(i *int64) *AsTenantAttrRoleUpdateOne {
	if i != nil {
		ataruo.SetIsDefault(*i)
	}
	return ataruo
}

// AddIsDefault adds i to the "is_default" field.
func (ataruo *AsTenantAttrRoleUpdateOne) AddIsDefault(i int64) *AsTenantAttrRoleUpdateOne {
	ataruo.mutation.AddIsDefault(i)
	return ataruo
}

// SetIsDeleted sets the "is_deleted" field.
func (ataruo *AsTenantAttrRoleUpdateOne) SetIsDeleted(i int64) *AsTenantAttrRoleUpdateOne {
	ataruo.mutation.ResetIsDeleted()
	ataruo.mutation.SetIsDeleted(i)
	return ataruo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (ataruo *AsTenantAttrRoleUpdateOne) SetNillableIsDeleted(i *int64) *AsTenantAttrRoleUpdateOne {
	if i != nil {
		ataruo.SetIsDeleted(*i)
	}
	return ataruo
}

// AddIsDeleted adds i to the "is_deleted" field.
func (ataruo *AsTenantAttrRoleUpdateOne) AddIsDeleted(i int64) *AsTenantAttrRoleUpdateOne {
	ataruo.mutation.AddIsDeleted(i)
	return ataruo
}

// SetStatus sets the "status" field.
func (ataruo *AsTenantAttrRoleUpdateOne) SetStatus(i int64) *AsTenantAttrRoleUpdateOne {
	ataruo.mutation.ResetStatus()
	ataruo.mutation.SetStatus(i)
	return ataruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ataruo *AsTenantAttrRoleUpdateOne) SetNillableStatus(i *int64) *AsTenantAttrRoleUpdateOne {
	if i != nil {
		ataruo.SetStatus(*i)
	}
	return ataruo
}

// AddStatus adds i to the "status" field.
func (ataruo *AsTenantAttrRoleUpdateOne) AddStatus(i int64) *AsTenantAttrRoleUpdateOne {
	ataruo.mutation.AddStatus(i)
	return ataruo
}

// ClearStatus clears the value of the "status" field.
func (ataruo *AsTenantAttrRoleUpdateOne) ClearStatus() *AsTenantAttrRoleUpdateOne {
	ataruo.mutation.ClearStatus()
	return ataruo
}

// SetCreateUser sets the "create_user" field.
func (ataruo *AsTenantAttrRoleUpdateOne) SetCreateUser(i int64) *AsTenantAttrRoleUpdateOne {
	ataruo.mutation.ResetCreateUser()
	ataruo.mutation.SetCreateUser(i)
	return ataruo
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (ataruo *AsTenantAttrRoleUpdateOne) SetNillableCreateUser(i *int64) *AsTenantAttrRoleUpdateOne {
	if i != nil {
		ataruo.SetCreateUser(*i)
	}
	return ataruo
}

// AddCreateUser adds i to the "create_user" field.
func (ataruo *AsTenantAttrRoleUpdateOne) AddCreateUser(i int64) *AsTenantAttrRoleUpdateOne {
	ataruo.mutation.AddCreateUser(i)
	return ataruo
}

// ClearCreateUser clears the value of the "create_user" field.
func (ataruo *AsTenantAttrRoleUpdateOne) ClearCreateUser() *AsTenantAttrRoleUpdateOne {
	ataruo.mutation.ClearCreateUser()
	return ataruo
}

// SetUpdateUser sets the "update_user" field.
func (ataruo *AsTenantAttrRoleUpdateOne) SetUpdateUser(i int64) *AsTenantAttrRoleUpdateOne {
	ataruo.mutation.ResetUpdateUser()
	ataruo.mutation.SetUpdateUser(i)
	return ataruo
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (ataruo *AsTenantAttrRoleUpdateOne) SetNillableUpdateUser(i *int64) *AsTenantAttrRoleUpdateOne {
	if i != nil {
		ataruo.SetUpdateUser(*i)
	}
	return ataruo
}

// AddUpdateUser adds i to the "update_user" field.
func (ataruo *AsTenantAttrRoleUpdateOne) AddUpdateUser(i int64) *AsTenantAttrRoleUpdateOne {
	ataruo.mutation.AddUpdateUser(i)
	return ataruo
}

// ClearUpdateUser clears the value of the "update_user" field.
func (ataruo *AsTenantAttrRoleUpdateOne) ClearUpdateUser() *AsTenantAttrRoleUpdateOne {
	ataruo.mutation.ClearUpdateUser()
	return ataruo
}

// SetUpdateTime sets the "update_time" field.
func (ataruo *AsTenantAttrRoleUpdateOne) SetUpdateTime(dt date.DateTime) *AsTenantAttrRoleUpdateOne {
	ataruo.mutation.SetUpdateTime(dt)
	return ataruo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (ataruo *AsTenantAttrRoleUpdateOne) ClearUpdateTime() *AsTenantAttrRoleUpdateOne {
	ataruo.mutation.ClearUpdateTime()
	return ataruo
}

// SetTenantAttrxID sets the "tenantAttrx" edge to the AsTenantAttr entity by ID.
func (ataruo *AsTenantAttrRoleUpdateOne) SetTenantAttrxID(id int64) *AsTenantAttrRoleUpdateOne {
	ataruo.mutation.SetTenantAttrxID(id)
	return ataruo
}

// SetNillableTenantAttrxID sets the "tenantAttrx" edge to the AsTenantAttr entity by ID if the given value is not nil.
func (ataruo *AsTenantAttrRoleUpdateOne) SetNillableTenantAttrxID(id *int64) *AsTenantAttrRoleUpdateOne {
	if id != nil {
		ataruo = ataruo.SetTenantAttrxID(*id)
	}
	return ataruo
}

// SetTenantAttrx sets the "tenantAttrx" edge to the AsTenantAttr entity.
func (ataruo *AsTenantAttrRoleUpdateOne) SetTenantAttrx(a *AsTenantAttr) *AsTenantAttrRoleUpdateOne {
	return ataruo.SetTenantAttrxID(a.ID)
}

// SetRolexID sets the "rolex" edge to the AsRole entity by ID.
func (ataruo *AsTenantAttrRoleUpdateOne) SetRolexID(id int64) *AsTenantAttrRoleUpdateOne {
	ataruo.mutation.SetRolexID(id)
	return ataruo
}

// SetNillableRolexID sets the "rolex" edge to the AsRole entity by ID if the given value is not nil.
func (ataruo *AsTenantAttrRoleUpdateOne) SetNillableRolexID(id *int64) *AsTenantAttrRoleUpdateOne {
	if id != nil {
		ataruo = ataruo.SetRolexID(*id)
	}
	return ataruo
}

// SetRolex sets the "rolex" edge to the AsRole entity.
func (ataruo *AsTenantAttrRoleUpdateOne) SetRolex(a *AsRole) *AsTenantAttrRoleUpdateOne {
	return ataruo.SetRolexID(a.ID)
}

// Mutation returns the AsTenantAttrRoleMutation object of the builder.
func (ataruo *AsTenantAttrRoleUpdateOne) Mutation() *AsTenantAttrRoleMutation {
	return ataruo.mutation
}

// ClearTenantAttrx clears the "tenantAttrx" edge to the AsTenantAttr entity.
func (ataruo *AsTenantAttrRoleUpdateOne) ClearTenantAttrx() *AsTenantAttrRoleUpdateOne {
	ataruo.mutation.ClearTenantAttrx()
	return ataruo
}

// ClearRolex clears the "rolex" edge to the AsRole entity.
func (ataruo *AsTenantAttrRoleUpdateOne) ClearRolex() *AsTenantAttrRoleUpdateOne {
	ataruo.mutation.ClearRolex()
	return ataruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ataruo *AsTenantAttrRoleUpdateOne) Select(field string, fields ...string) *AsTenantAttrRoleUpdateOne {
	ataruo.fields = append([]string{field}, fields...)
	return ataruo
}

// Save executes the query and returns the updated AsTenantAttrRole entity.
func (ataruo *AsTenantAttrRoleUpdateOne) Save(ctx context.Context) (*AsTenantAttrRole, error) {
	var (
		err  error
		node *AsTenantAttrRole
	)
	ataruo.defaults()
	if len(ataruo.hooks) == 0 {
		node, err = ataruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsTenantAttrRoleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ataruo.mutation = mutation
			node, err = ataruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ataruo.hooks) - 1; i >= 0; i-- {
			if ataruo.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = ataruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ataruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ataruo *AsTenantAttrRoleUpdateOne) SaveX(ctx context.Context) *AsTenantAttrRole {
	node, err := ataruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ataruo *AsTenantAttrRoleUpdateOne) Exec(ctx context.Context) error {
	_, err := ataruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ataruo *AsTenantAttrRoleUpdateOne) ExecX(ctx context.Context) {
	if err := ataruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ataruo *AsTenantAttrRoleUpdateOne) defaults() {
	if _, ok := ataruo.mutation.UpdateTime(); !ok && !ataruo.mutation.UpdateTimeCleared() {
		v := astenantattrrole.UpdateDefaultUpdateTime()
		ataruo.mutation.SetUpdateTime(v)
	}
}

func (ataruo *AsTenantAttrRoleUpdateOne) sqlSave(ctx context.Context) (_node *AsTenantAttrRole, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   astenantattrrole.Table,
			Columns: astenantattrrole.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: astenantattrrole.FieldID,
			},
		},
	}
	id, ok := ataruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`schema: missing "AsTenantAttrRole.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ataruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, astenantattrrole.FieldID)
		for _, f := range fields {
			if !astenantattrrole.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("schema: invalid field %q for query", f)}
			}
			if f != astenantattrrole.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ataruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ataruo.mutation.IsDefault(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenantattrrole.FieldIsDefault,
		})
	}
	if value, ok := ataruo.mutation.AddedIsDefault(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenantattrrole.FieldIsDefault,
		})
	}
	if value, ok := ataruo.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenantattrrole.FieldIsDeleted,
		})
	}
	if value, ok := ataruo.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenantattrrole.FieldIsDeleted,
		})
	}
	if value, ok := ataruo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenantattrrole.FieldStatus,
		})
	}
	if value, ok := ataruo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenantattrrole.FieldStatus,
		})
	}
	if ataruo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: astenantattrrole.FieldStatus,
		})
	}
	if value, ok := ataruo.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenantattrrole.FieldCreateUser,
		})
	}
	if value, ok := ataruo.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenantattrrole.FieldCreateUser,
		})
	}
	if ataruo.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: astenantattrrole.FieldCreateUser,
		})
	}
	if value, ok := ataruo.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenantattrrole.FieldUpdateUser,
		})
	}
	if value, ok := ataruo.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenantattrrole.FieldUpdateUser,
		})
	}
	if ataruo.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: astenantattrrole.FieldUpdateUser,
		})
	}
	if ataruo.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: astenantattrrole.FieldCreateTime,
		})
	}
	if value, ok := ataruo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: astenantattrrole.FieldUpdateTime,
		})
	}
	if ataruo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: astenantattrrole.FieldUpdateTime,
		})
	}
	if ataruo.mutation.TenantAttrxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   astenantattrrole.TenantAttrxTable,
			Columns: []string{astenantattrrole.TenantAttrxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: astenantattr.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ataruo.mutation.TenantAttrxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   astenantattrrole.TenantAttrxTable,
			Columns: []string{astenantattrrole.TenantAttrxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: astenantattr.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ataruo.mutation.RolexCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   astenantattrrole.RolexTable,
			Columns: []string{astenantattrrole.RolexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asrole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ataruo.mutation.RolexIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   astenantattrrole.RolexTable,
			Columns: []string{astenantattrrole.RolexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AsTenantAttrRole{config: ataruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ataruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{astenantattrrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
