// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/asmarketapp"
	"orginone/common/schema/asmarketusedapp"
	"orginone/common/schema/asuser"
	"orginone/common/schema/predicate"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsMarketUsedAppUpdate is the builder for updating AsMarketUsedApp entities.
type AsMarketUsedAppUpdate struct {
	config
	hooks    []Hook
	mutation *AsMarketUsedAppMutation
}

// Where appends a list predicates to the AsMarketUsedAppUpdate builder.
func (amuau *AsMarketUsedAppUpdate) Where(ps ...predicate.AsMarketUsedApp) *AsMarketUsedAppUpdate {
	amuau.mutation.Where(ps...)
	return amuau
}

// SetAppID sets the "app_id" field.
func (amuau *AsMarketUsedAppUpdate) SetAppID(i int64) *AsMarketUsedAppUpdate {
	amuau.mutation.SetAppID(i)
	return amuau
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (amuau *AsMarketUsedAppUpdate) SetNillableAppID(i *int64) *AsMarketUsedAppUpdate {
	if i != nil {
		amuau.SetAppID(*i)
	}
	return amuau
}

// ClearAppID clears the value of the "app_id" field.
func (amuau *AsMarketUsedAppUpdate) ClearAppID() *AsMarketUsedAppUpdate {
	amuau.mutation.ClearAppID()
	return amuau
}

// SetUserID sets the "user_id" field.
func (amuau *AsMarketUsedAppUpdate) SetUserID(i int64) *AsMarketUsedAppUpdate {
	amuau.mutation.ResetUserID()
	amuau.mutation.SetUserID(i)
	return amuau
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (amuau *AsMarketUsedAppUpdate) SetNillableUserID(i *int64) *AsMarketUsedAppUpdate {
	if i != nil {
		amuau.SetUserID(*i)
	}
	return amuau
}

// AddUserID adds i to the "user_id" field.
func (amuau *AsMarketUsedAppUpdate) AddUserID(i int64) *AsMarketUsedAppUpdate {
	amuau.mutation.AddUserID(i)
	return amuau
}

// ClearUserID clears the value of the "user_id" field.
func (amuau *AsMarketUsedAppUpdate) ClearUserID() *AsMarketUsedAppUpdate {
	amuau.mutation.ClearUserID()
	return amuau
}

// SetSort sets the "sort" field.
func (amuau *AsMarketUsedAppUpdate) SetSort(i int64) *AsMarketUsedAppUpdate {
	amuau.mutation.ResetSort()
	amuau.mutation.SetSort(i)
	return amuau
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (amuau *AsMarketUsedAppUpdate) SetNillableSort(i *int64) *AsMarketUsedAppUpdate {
	if i != nil {
		amuau.SetSort(*i)
	}
	return amuau
}

// AddSort adds i to the "sort" field.
func (amuau *AsMarketUsedAppUpdate) AddSort(i int64) *AsMarketUsedAppUpdate {
	amuau.mutation.AddSort(i)
	return amuau
}

// ClearSort clears the value of the "sort" field.
func (amuau *AsMarketUsedAppUpdate) ClearSort() *AsMarketUsedAppUpdate {
	amuau.mutation.ClearSort()
	return amuau
}

// SetIsDeleted sets the "is_deleted" field.
func (amuau *AsMarketUsedAppUpdate) SetIsDeleted(i int64) *AsMarketUsedAppUpdate {
	amuau.mutation.ResetIsDeleted()
	amuau.mutation.SetIsDeleted(i)
	return amuau
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (amuau *AsMarketUsedAppUpdate) SetNillableIsDeleted(i *int64) *AsMarketUsedAppUpdate {
	if i != nil {
		amuau.SetIsDeleted(*i)
	}
	return amuau
}

// AddIsDeleted adds i to the "is_deleted" field.
func (amuau *AsMarketUsedAppUpdate) AddIsDeleted(i int64) *AsMarketUsedAppUpdate {
	amuau.mutation.AddIsDeleted(i)
	return amuau
}

// SetStatus sets the "status" field.
func (amuau *AsMarketUsedAppUpdate) SetStatus(i int64) *AsMarketUsedAppUpdate {
	amuau.mutation.ResetStatus()
	amuau.mutation.SetStatus(i)
	return amuau
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (amuau *AsMarketUsedAppUpdate) SetNillableStatus(i *int64) *AsMarketUsedAppUpdate {
	if i != nil {
		amuau.SetStatus(*i)
	}
	return amuau
}

// AddStatus adds i to the "status" field.
func (amuau *AsMarketUsedAppUpdate) AddStatus(i int64) *AsMarketUsedAppUpdate {
	amuau.mutation.AddStatus(i)
	return amuau
}

// ClearStatus clears the value of the "status" field.
func (amuau *AsMarketUsedAppUpdate) ClearStatus() *AsMarketUsedAppUpdate {
	amuau.mutation.ClearStatus()
	return amuau
}

// SetCreateUser sets the "create_user" field.
func (amuau *AsMarketUsedAppUpdate) SetCreateUser(i int64) *AsMarketUsedAppUpdate {
	amuau.mutation.ResetCreateUser()
	amuau.mutation.SetCreateUser(i)
	return amuau
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (amuau *AsMarketUsedAppUpdate) SetNillableCreateUser(i *int64) *AsMarketUsedAppUpdate {
	if i != nil {
		amuau.SetCreateUser(*i)
	}
	return amuau
}

// AddCreateUser adds i to the "create_user" field.
func (amuau *AsMarketUsedAppUpdate) AddCreateUser(i int64) *AsMarketUsedAppUpdate {
	amuau.mutation.AddCreateUser(i)
	return amuau
}

// ClearCreateUser clears the value of the "create_user" field.
func (amuau *AsMarketUsedAppUpdate) ClearCreateUser() *AsMarketUsedAppUpdate {
	amuau.mutation.ClearCreateUser()
	return amuau
}

// SetUpdateUser sets the "update_user" field.
func (amuau *AsMarketUsedAppUpdate) SetUpdateUser(i int64) *AsMarketUsedAppUpdate {
	amuau.mutation.ResetUpdateUser()
	amuau.mutation.SetUpdateUser(i)
	return amuau
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (amuau *AsMarketUsedAppUpdate) SetNillableUpdateUser(i *int64) *AsMarketUsedAppUpdate {
	if i != nil {
		amuau.SetUpdateUser(*i)
	}
	return amuau
}

// AddUpdateUser adds i to the "update_user" field.
func (amuau *AsMarketUsedAppUpdate) AddUpdateUser(i int64) *AsMarketUsedAppUpdate {
	amuau.mutation.AddUpdateUser(i)
	return amuau
}

// ClearUpdateUser clears the value of the "update_user" field.
func (amuau *AsMarketUsedAppUpdate) ClearUpdateUser() *AsMarketUsedAppUpdate {
	amuau.mutation.ClearUpdateUser()
	return amuau
}

// SetUpdateTime sets the "update_time" field.
func (amuau *AsMarketUsedAppUpdate) SetUpdateTime(dt date.DateTime) *AsMarketUsedAppUpdate {
	amuau.mutation.SetUpdateTime(dt)
	return amuau
}

// ClearUpdateTime clears the value of the "update_time" field.
func (amuau *AsMarketUsedAppUpdate) ClearUpdateTime() *AsMarketUsedAppUpdate {
	amuau.mutation.ClearUpdateTime()
	return amuau
}

// SetAppxID sets the "appx" edge to the AsMarketApp entity by ID.
func (amuau *AsMarketUsedAppUpdate) SetAppxID(id int64) *AsMarketUsedAppUpdate {
	amuau.mutation.SetAppxID(id)
	return amuau
}

// SetNillableAppxID sets the "appx" edge to the AsMarketApp entity by ID if the given value is not nil.
func (amuau *AsMarketUsedAppUpdate) SetNillableAppxID(id *int64) *AsMarketUsedAppUpdate {
	if id != nil {
		amuau = amuau.SetAppxID(*id)
	}
	return amuau
}

// SetAppx sets the "appx" edge to the AsMarketApp entity.
func (amuau *AsMarketUsedAppUpdate) SetAppx(a *AsMarketApp) *AsMarketUsedAppUpdate {
	return amuau.SetAppxID(a.ID)
}

// SetUserxID sets the "userx" edge to the AsUser entity by ID.
func (amuau *AsMarketUsedAppUpdate) SetUserxID(id int64) *AsMarketUsedAppUpdate {
	amuau.mutation.SetUserxID(id)
	return amuau
}

// SetNillableUserxID sets the "userx" edge to the AsUser entity by ID if the given value is not nil.
func (amuau *AsMarketUsedAppUpdate) SetNillableUserxID(id *int64) *AsMarketUsedAppUpdate {
	if id != nil {
		amuau = amuau.SetUserxID(*id)
	}
	return amuau
}

// SetUserx sets the "userx" edge to the AsUser entity.
func (amuau *AsMarketUsedAppUpdate) SetUserx(a *AsUser) *AsMarketUsedAppUpdate {
	return amuau.SetUserxID(a.ID)
}

// Mutation returns the AsMarketUsedAppMutation object of the builder.
func (amuau *AsMarketUsedAppUpdate) Mutation() *AsMarketUsedAppMutation {
	return amuau.mutation
}

// ClearAppx clears the "appx" edge to the AsMarketApp entity.
func (amuau *AsMarketUsedAppUpdate) ClearAppx() *AsMarketUsedAppUpdate {
	amuau.mutation.ClearAppx()
	return amuau
}

// ClearUserx clears the "userx" edge to the AsUser entity.
func (amuau *AsMarketUsedAppUpdate) ClearUserx() *AsMarketUsedAppUpdate {
	amuau.mutation.ClearUserx()
	return amuau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (amuau *AsMarketUsedAppUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	amuau.defaults()
	if len(amuau.hooks) == 0 {
		affected, err = amuau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsMarketUsedAppMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			amuau.mutation = mutation
			affected, err = amuau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(amuau.hooks) - 1; i >= 0; i-- {
			if amuau.hooks[i] == nil {
				return 0, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = amuau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, amuau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (amuau *AsMarketUsedAppUpdate) SaveX(ctx context.Context) int {
	affected, err := amuau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (amuau *AsMarketUsedAppUpdate) Exec(ctx context.Context) error {
	_, err := amuau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amuau *AsMarketUsedAppUpdate) ExecX(ctx context.Context) {
	if err := amuau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amuau *AsMarketUsedAppUpdate) defaults() {
	if _, ok := amuau.mutation.UpdateTime(); !ok && !amuau.mutation.UpdateTimeCleared() {
		v := asmarketusedapp.UpdateDefaultUpdateTime()
		amuau.mutation.SetUpdateTime(v)
	}
}

func (amuau *AsMarketUsedAppUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asmarketusedapp.Table,
			Columns: asmarketusedapp.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asmarketusedapp.FieldID,
			},
		},
	}
	if ps := amuau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amuau.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketusedapp.FieldUserID,
		})
	}
	if value, ok := amuau.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketusedapp.FieldUserID,
		})
	}
	if amuau.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketusedapp.FieldUserID,
		})
	}
	if value, ok := amuau.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketusedapp.FieldSort,
		})
	}
	if value, ok := amuau.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketusedapp.FieldSort,
		})
	}
	if amuau.mutation.SortCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketusedapp.FieldSort,
		})
	}
	if value, ok := amuau.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketusedapp.FieldIsDeleted,
		})
	}
	if value, ok := amuau.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketusedapp.FieldIsDeleted,
		})
	}
	if value, ok := amuau.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketusedapp.FieldStatus,
		})
	}
	if value, ok := amuau.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketusedapp.FieldStatus,
		})
	}
	if amuau.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketusedapp.FieldStatus,
		})
	}
	if value, ok := amuau.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketusedapp.FieldCreateUser,
		})
	}
	if value, ok := amuau.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketusedapp.FieldCreateUser,
		})
	}
	if amuau.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketusedapp.FieldCreateUser,
		})
	}
	if value, ok := amuau.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketusedapp.FieldUpdateUser,
		})
	}
	if value, ok := amuau.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketusedapp.FieldUpdateUser,
		})
	}
	if amuau.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketusedapp.FieldUpdateUser,
		})
	}
	if amuau.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketusedapp.FieldCreateTime,
		})
	}
	if value, ok := amuau.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketusedapp.FieldUpdateTime,
		})
	}
	if amuau.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketusedapp.FieldUpdateTime,
		})
	}
	if amuau.mutation.AppxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketusedapp.AppxTable,
			Columns: []string{asmarketusedapp.AppxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapp.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amuau.mutation.AppxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketusedapp.AppxTable,
			Columns: []string{asmarketusedapp.AppxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapp.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amuau.mutation.UserxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketusedapp.UserxTable,
			Columns: []string{asmarketusedapp.UserxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amuau.mutation.UserxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketusedapp.UserxTable,
			Columns: []string{asmarketusedapp.UserxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, amuau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asmarketusedapp.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AsMarketUsedAppUpdateOne is the builder for updating a single AsMarketUsedApp entity.
type AsMarketUsedAppUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AsMarketUsedAppMutation
}

// SetAppID sets the "app_id" field.
func (amuauo *AsMarketUsedAppUpdateOne) SetAppID(i int64) *AsMarketUsedAppUpdateOne {
	amuauo.mutation.SetAppID(i)
	return amuauo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (amuauo *AsMarketUsedAppUpdateOne) SetNillableAppID(i *int64) *AsMarketUsedAppUpdateOne {
	if i != nil {
		amuauo.SetAppID(*i)
	}
	return amuauo
}

// ClearAppID clears the value of the "app_id" field.
func (amuauo *AsMarketUsedAppUpdateOne) ClearAppID() *AsMarketUsedAppUpdateOne {
	amuauo.mutation.ClearAppID()
	return amuauo
}

// SetUserID sets the "user_id" field.
func (amuauo *AsMarketUsedAppUpdateOne) SetUserID(i int64) *AsMarketUsedAppUpdateOne {
	amuauo.mutation.ResetUserID()
	amuauo.mutation.SetUserID(i)
	return amuauo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (amuauo *AsMarketUsedAppUpdateOne) SetNillableUserID(i *int64) *AsMarketUsedAppUpdateOne {
	if i != nil {
		amuauo.SetUserID(*i)
	}
	return amuauo
}

// AddUserID adds i to the "user_id" field.
func (amuauo *AsMarketUsedAppUpdateOne) AddUserID(i int64) *AsMarketUsedAppUpdateOne {
	amuauo.mutation.AddUserID(i)
	return amuauo
}

// ClearUserID clears the value of the "user_id" field.
func (amuauo *AsMarketUsedAppUpdateOne) ClearUserID() *AsMarketUsedAppUpdateOne {
	amuauo.mutation.ClearUserID()
	return amuauo
}

// SetSort sets the "sort" field.
func (amuauo *AsMarketUsedAppUpdateOne) SetSort(i int64) *AsMarketUsedAppUpdateOne {
	amuauo.mutation.ResetSort()
	amuauo.mutation.SetSort(i)
	return amuauo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (amuauo *AsMarketUsedAppUpdateOne) SetNillableSort(i *int64) *AsMarketUsedAppUpdateOne {
	if i != nil {
		amuauo.SetSort(*i)
	}
	return amuauo
}

// AddSort adds i to the "sort" field.
func (amuauo *AsMarketUsedAppUpdateOne) AddSort(i int64) *AsMarketUsedAppUpdateOne {
	amuauo.mutation.AddSort(i)
	return amuauo
}

// ClearSort clears the value of the "sort" field.
func (amuauo *AsMarketUsedAppUpdateOne) ClearSort() *AsMarketUsedAppUpdateOne {
	amuauo.mutation.ClearSort()
	return amuauo
}

// SetIsDeleted sets the "is_deleted" field.
func (amuauo *AsMarketUsedAppUpdateOne) SetIsDeleted(i int64) *AsMarketUsedAppUpdateOne {
	amuauo.mutation.ResetIsDeleted()
	amuauo.mutation.SetIsDeleted(i)
	return amuauo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (amuauo *AsMarketUsedAppUpdateOne) SetNillableIsDeleted(i *int64) *AsMarketUsedAppUpdateOne {
	if i != nil {
		amuauo.SetIsDeleted(*i)
	}
	return amuauo
}

// AddIsDeleted adds i to the "is_deleted" field.
func (amuauo *AsMarketUsedAppUpdateOne) AddIsDeleted(i int64) *AsMarketUsedAppUpdateOne {
	amuauo.mutation.AddIsDeleted(i)
	return amuauo
}

// SetStatus sets the "status" field.
func (amuauo *AsMarketUsedAppUpdateOne) SetStatus(i int64) *AsMarketUsedAppUpdateOne {
	amuauo.mutation.ResetStatus()
	amuauo.mutation.SetStatus(i)
	return amuauo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (amuauo *AsMarketUsedAppUpdateOne) SetNillableStatus(i *int64) *AsMarketUsedAppUpdateOne {
	if i != nil {
		amuauo.SetStatus(*i)
	}
	return amuauo
}

// AddStatus adds i to the "status" field.
func (amuauo *AsMarketUsedAppUpdateOne) AddStatus(i int64) *AsMarketUsedAppUpdateOne {
	amuauo.mutation.AddStatus(i)
	return amuauo
}

// ClearStatus clears the value of the "status" field.
func (amuauo *AsMarketUsedAppUpdateOne) ClearStatus() *AsMarketUsedAppUpdateOne {
	amuauo.mutation.ClearStatus()
	return amuauo
}

// SetCreateUser sets the "create_user" field.
func (amuauo *AsMarketUsedAppUpdateOne) SetCreateUser(i int64) *AsMarketUsedAppUpdateOne {
	amuauo.mutation.ResetCreateUser()
	amuauo.mutation.SetCreateUser(i)
	return amuauo
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (amuauo *AsMarketUsedAppUpdateOne) SetNillableCreateUser(i *int64) *AsMarketUsedAppUpdateOne {
	if i != nil {
		amuauo.SetCreateUser(*i)
	}
	return amuauo
}

// AddCreateUser adds i to the "create_user" field.
func (amuauo *AsMarketUsedAppUpdateOne) AddCreateUser(i int64) *AsMarketUsedAppUpdateOne {
	amuauo.mutation.AddCreateUser(i)
	return amuauo
}

// ClearCreateUser clears the value of the "create_user" field.
func (amuauo *AsMarketUsedAppUpdateOne) ClearCreateUser() *AsMarketUsedAppUpdateOne {
	amuauo.mutation.ClearCreateUser()
	return amuauo
}

// SetUpdateUser sets the "update_user" field.
func (amuauo *AsMarketUsedAppUpdateOne) SetUpdateUser(i int64) *AsMarketUsedAppUpdateOne {
	amuauo.mutation.ResetUpdateUser()
	amuauo.mutation.SetUpdateUser(i)
	return amuauo
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (amuauo *AsMarketUsedAppUpdateOne) SetNillableUpdateUser(i *int64) *AsMarketUsedAppUpdateOne {
	if i != nil {
		amuauo.SetUpdateUser(*i)
	}
	return amuauo
}

// AddUpdateUser adds i to the "update_user" field.
func (amuauo *AsMarketUsedAppUpdateOne) AddUpdateUser(i int64) *AsMarketUsedAppUpdateOne {
	amuauo.mutation.AddUpdateUser(i)
	return amuauo
}

// ClearUpdateUser clears the value of the "update_user" field.
func (amuauo *AsMarketUsedAppUpdateOne) ClearUpdateUser() *AsMarketUsedAppUpdateOne {
	amuauo.mutation.ClearUpdateUser()
	return amuauo
}

// SetUpdateTime sets the "update_time" field.
func (amuauo *AsMarketUsedAppUpdateOne) SetUpdateTime(dt date.DateTime) *AsMarketUsedAppUpdateOne {
	amuauo.mutation.SetUpdateTime(dt)
	return amuauo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (amuauo *AsMarketUsedAppUpdateOne) ClearUpdateTime() *AsMarketUsedAppUpdateOne {
	amuauo.mutation.ClearUpdateTime()
	return amuauo
}

// SetAppxID sets the "appx" edge to the AsMarketApp entity by ID.
func (amuauo *AsMarketUsedAppUpdateOne) SetAppxID(id int64) *AsMarketUsedAppUpdateOne {
	amuauo.mutation.SetAppxID(id)
	return amuauo
}

// SetNillableAppxID sets the "appx" edge to the AsMarketApp entity by ID if the given value is not nil.
func (amuauo *AsMarketUsedAppUpdateOne) SetNillableAppxID(id *int64) *AsMarketUsedAppUpdateOne {
	if id != nil {
		amuauo = amuauo.SetAppxID(*id)
	}
	return amuauo
}

// SetAppx sets the "appx" edge to the AsMarketApp entity.
func (amuauo *AsMarketUsedAppUpdateOne) SetAppx(a *AsMarketApp) *AsMarketUsedAppUpdateOne {
	return amuauo.SetAppxID(a.ID)
}

// SetUserxID sets the "userx" edge to the AsUser entity by ID.
func (amuauo *AsMarketUsedAppUpdateOne) SetUserxID(id int64) *AsMarketUsedAppUpdateOne {
	amuauo.mutation.SetUserxID(id)
	return amuauo
}

// SetNillableUserxID sets the "userx" edge to the AsUser entity by ID if the given value is not nil.
func (amuauo *AsMarketUsedAppUpdateOne) SetNillableUserxID(id *int64) *AsMarketUsedAppUpdateOne {
	if id != nil {
		amuauo = amuauo.SetUserxID(*id)
	}
	return amuauo
}

// SetUserx sets the "userx" edge to the AsUser entity.
func (amuauo *AsMarketUsedAppUpdateOne) SetUserx(a *AsUser) *AsMarketUsedAppUpdateOne {
	return amuauo.SetUserxID(a.ID)
}

// Mutation returns the AsMarketUsedAppMutation object of the builder.
func (amuauo *AsMarketUsedAppUpdateOne) Mutation() *AsMarketUsedAppMutation {
	return amuauo.mutation
}

// ClearAppx clears the "appx" edge to the AsMarketApp entity.
func (amuauo *AsMarketUsedAppUpdateOne) ClearAppx() *AsMarketUsedAppUpdateOne {
	amuauo.mutation.ClearAppx()
	return amuauo
}

// ClearUserx clears the "userx" edge to the AsUser entity.
func (amuauo *AsMarketUsedAppUpdateOne) ClearUserx() *AsMarketUsedAppUpdateOne {
	amuauo.mutation.ClearUserx()
	return amuauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (amuauo *AsMarketUsedAppUpdateOne) Select(field string, fields ...string) *AsMarketUsedAppUpdateOne {
	amuauo.fields = append([]string{field}, fields...)
	return amuauo
}

// Save executes the query and returns the updated AsMarketUsedApp entity.
func (amuauo *AsMarketUsedAppUpdateOne) Save(ctx context.Context) (*AsMarketUsedApp, error) {
	var (
		err  error
		node *AsMarketUsedApp
	)
	amuauo.defaults()
	if len(amuauo.hooks) == 0 {
		node, err = amuauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsMarketUsedAppMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			amuauo.mutation = mutation
			node, err = amuauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(amuauo.hooks) - 1; i >= 0; i-- {
			if amuauo.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = amuauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, amuauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (amuauo *AsMarketUsedAppUpdateOne) SaveX(ctx context.Context) *AsMarketUsedApp {
	node, err := amuauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (amuauo *AsMarketUsedAppUpdateOne) Exec(ctx context.Context) error {
	_, err := amuauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amuauo *AsMarketUsedAppUpdateOne) ExecX(ctx context.Context) {
	if err := amuauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amuauo *AsMarketUsedAppUpdateOne) defaults() {
	if _, ok := amuauo.mutation.UpdateTime(); !ok && !amuauo.mutation.UpdateTimeCleared() {
		v := asmarketusedapp.UpdateDefaultUpdateTime()
		amuauo.mutation.SetUpdateTime(v)
	}
}

func (amuauo *AsMarketUsedAppUpdateOne) sqlSave(ctx context.Context) (_node *AsMarketUsedApp, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asmarketusedapp.Table,
			Columns: asmarketusedapp.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asmarketusedapp.FieldID,
			},
		},
	}
	id, ok := amuauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`schema: missing "AsMarketUsedApp.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := amuauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asmarketusedapp.FieldID)
		for _, f := range fields {
			if !asmarketusedapp.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("schema: invalid field %q for query", f)}
			}
			if f != asmarketusedapp.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := amuauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amuauo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketusedapp.FieldUserID,
		})
	}
	if value, ok := amuauo.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketusedapp.FieldUserID,
		})
	}
	if amuauo.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketusedapp.FieldUserID,
		})
	}
	if value, ok := amuauo.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketusedapp.FieldSort,
		})
	}
	if value, ok := amuauo.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketusedapp.FieldSort,
		})
	}
	if amuauo.mutation.SortCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketusedapp.FieldSort,
		})
	}
	if value, ok := amuauo.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketusedapp.FieldIsDeleted,
		})
	}
	if value, ok := amuauo.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketusedapp.FieldIsDeleted,
		})
	}
	if value, ok := amuauo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketusedapp.FieldStatus,
		})
	}
	if value, ok := amuauo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketusedapp.FieldStatus,
		})
	}
	if amuauo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketusedapp.FieldStatus,
		})
	}
	if value, ok := amuauo.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketusedapp.FieldCreateUser,
		})
	}
	if value, ok := amuauo.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketusedapp.FieldCreateUser,
		})
	}
	if amuauo.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketusedapp.FieldCreateUser,
		})
	}
	if value, ok := amuauo.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketusedapp.FieldUpdateUser,
		})
	}
	if value, ok := amuauo.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketusedapp.FieldUpdateUser,
		})
	}
	if amuauo.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketusedapp.FieldUpdateUser,
		})
	}
	if amuauo.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketusedapp.FieldCreateTime,
		})
	}
	if value, ok := amuauo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketusedapp.FieldUpdateTime,
		})
	}
	if amuauo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketusedapp.FieldUpdateTime,
		})
	}
	if amuauo.mutation.AppxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketusedapp.AppxTable,
			Columns: []string{asmarketusedapp.AppxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapp.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amuauo.mutation.AppxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketusedapp.AppxTable,
			Columns: []string{asmarketusedapp.AppxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapp.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amuauo.mutation.UserxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketusedapp.UserxTable,
			Columns: []string{asmarketusedapp.UserxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amuauo.mutation.UserxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketusedapp.UserxTable,
			Columns: []string{asmarketusedapp.UserxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AsMarketUsedApp{config: amuauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, amuauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asmarketusedapp.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
