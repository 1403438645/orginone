// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"fmt"
	"orginone/common/schema/asmarketappalert"
	"orginone/common/schema/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsMarketAppAlertDelete is the builder for deleting a AsMarketAppAlert entity.
type AsMarketAppAlertDelete struct {
	config
	hooks    []Hook
	mutation *AsMarketAppAlertMutation
}

// Where appends a list predicates to the AsMarketAppAlertDelete builder.
func (amaad *AsMarketAppAlertDelete) Where(ps ...predicate.AsMarketAppAlert) *AsMarketAppAlertDelete {
	amaad.mutation.Where(ps...)
	return amaad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (amaad *AsMarketAppAlertDelete) Exec(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(amaad.hooks) == 0 {
		affected, err = amaad.sqlExec(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsMarketAppAlertMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			amaad.mutation = mutation
			affected, err = amaad.sqlExec(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(amaad.hooks) - 1; i >= 0; i-- {
			if amaad.hooks[i] == nil {
				return 0, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = amaad.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, amaad.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// ExecX is like Exec, but panics if an error occurs.
func (amaad *AsMarketAppAlertDelete) ExecX(ctx context.Context) int {
	n, err := amaad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (amaad *AsMarketAppAlertDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := &sqlgraph.DeleteSpec{
		Node: &sqlgraph.NodeSpec{
			Table: asmarketappalert.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asmarketappalert.FieldID,
			},
		},
	}
	if ps := amaad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return sqlgraph.DeleteNodes(ctx, amaad.driver, _spec)
}

// AsMarketAppAlertDeleteOne is the builder for deleting a single AsMarketAppAlert entity.
type AsMarketAppAlertDeleteOne struct {
	amaad *AsMarketAppAlertDelete
}

// Exec executes the deletion query.
func (amaado *AsMarketAppAlertDeleteOne) Exec(ctx context.Context) error {
	n, err := amaado.amaad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{asmarketappalert.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (amaado *AsMarketAppAlertDeleteOne) ExecX(ctx context.Context) {
	amaado.amaad.ExecX(ctx)
}
