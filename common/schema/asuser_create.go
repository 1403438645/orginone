// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/asinneragency"
	"orginone/common/schema/asjob"
	"orginone/common/schema/asmarketappusertemplate"
	"orginone/common/schema/asmarketmenuusersort"
	"orginone/common/schema/asmarketroledistribution"
	"orginone/common/schema/asmarketusedapp"
	"orginone/common/schema/asperson"
	"orginone/common/schema/asrole"
	"orginone/common/schema/asuser"
	"orginone/common/schema/asworkingdata"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsUserCreate is the builder for creating a AsUser entity.
type AsUserCreate struct {
	config
	mutation *AsUserMutation
	hooks    []Hook
}

// SetTenantCode sets the "tenant_code" field.
func (auc *AsUserCreate) SetTenantCode(s string) *AsUserCreate {
	auc.mutation.SetTenantCode(s)
	return auc
}

// SetNillableTenantCode sets the "tenant_code" field if the given value is not nil.
func (auc *AsUserCreate) SetNillableTenantCode(s *string) *AsUserCreate {
	if s != nil {
		auc.SetTenantCode(*s)
	}
	return auc
}

// SetPwd sets the "pwd" field.
func (auc *AsUserCreate) SetPwd(s string) *AsUserCreate {
	auc.mutation.SetPwd(s)
	return auc
}

// SetPhoneNumber sets the "phone_number" field.
func (auc *AsUserCreate) SetPhoneNumber(s string) *AsUserCreate {
	auc.mutation.SetPhoneNumber(s)
	return auc
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (auc *AsUserCreate) SetNillablePhoneNumber(s *string) *AsUserCreate {
	if s != nil {
		auc.SetPhoneNumber(*s)
	}
	return auc
}

// SetIsAdmin sets the "is_admin" field.
func (auc *AsUserCreate) SetIsAdmin(i int64) *AsUserCreate {
	auc.mutation.SetIsAdmin(i)
	return auc
}

// SetNillableIsAdmin sets the "is_admin" field if the given value is not nil.
func (auc *AsUserCreate) SetNillableIsAdmin(i *int64) *AsUserCreate {
	if i != nil {
		auc.SetIsAdmin(*i)
	}
	return auc
}

// SetTenantApplyingState sets the "tenant_applying_state" field.
func (auc *AsUserCreate) SetTenantApplyingState(i int64) *AsUserCreate {
	auc.mutation.SetTenantApplyingState(i)
	return auc
}

// SetNillableTenantApplyingState sets the "tenant_applying_state" field if the given value is not nil.
func (auc *AsUserCreate) SetNillableTenantApplyingState(i *int64) *AsUserCreate {
	if i != nil {
		auc.SetTenantApplyingState(*i)
	}
	return auc
}

// SetIsMaster sets the "is_master" field.
func (auc *AsUserCreate) SetIsMaster(i int64) *AsUserCreate {
	auc.mutation.SetIsMaster(i)
	return auc
}

// SetNillableIsMaster sets the "is_master" field if the given value is not nil.
func (auc *AsUserCreate) SetNillableIsMaster(i *int64) *AsUserCreate {
	if i != nil {
		auc.SetIsMaster(*i)
	}
	return auc
}

// SetIsCreated sets the "is_created" field.
func (auc *AsUserCreate) SetIsCreated(i int64) *AsUserCreate {
	auc.mutation.SetIsCreated(i)
	return auc
}

// SetNillableIsCreated sets the "is_created" field if the given value is not nil.
func (auc *AsUserCreate) SetNillableIsCreated(i *int64) *AsUserCreate {
	if i != nil {
		auc.SetIsCreated(*i)
	}
	return auc
}

// SetOpenID sets the "open_id" field.
func (auc *AsUserCreate) SetOpenID(s string) *AsUserCreate {
	auc.mutation.SetOpenID(s)
	return auc
}

// SetNillableOpenID sets the "open_id" field if the given value is not nil.
func (auc *AsUserCreate) SetNillableOpenID(s *string) *AsUserCreate {
	if s != nil {
		auc.SetOpenID(*s)
	}
	return auc
}

// SetUserName sets the "user_name" field.
func (auc *AsUserCreate) SetUserName(s string) *AsUserCreate {
	auc.mutation.SetUserName(s)
	return auc
}

// SetNillableUserName sets the "user_name" field if the given value is not nil.
func (auc *AsUserCreate) SetNillableUserName(s *string) *AsUserCreate {
	if s != nil {
		auc.SetUserName(*s)
	}
	return auc
}

// SetIsDeleted sets the "is_deleted" field.
func (auc *AsUserCreate) SetIsDeleted(i int64) *AsUserCreate {
	auc.mutation.SetIsDeleted(i)
	return auc
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (auc *AsUserCreate) SetNillableIsDeleted(i *int64) *AsUserCreate {
	if i != nil {
		auc.SetIsDeleted(*i)
	}
	return auc
}

// SetStatus sets the "status" field.
func (auc *AsUserCreate) SetStatus(i int64) *AsUserCreate {
	auc.mutation.SetStatus(i)
	return auc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (auc *AsUserCreate) SetNillableStatus(i *int64) *AsUserCreate {
	if i != nil {
		auc.SetStatus(*i)
	}
	return auc
}

// SetCreateUser sets the "create_user" field.
func (auc *AsUserCreate) SetCreateUser(i int64) *AsUserCreate {
	auc.mutation.SetCreateUser(i)
	return auc
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (auc *AsUserCreate) SetNillableCreateUser(i *int64) *AsUserCreate {
	if i != nil {
		auc.SetCreateUser(*i)
	}
	return auc
}

// SetUpdateUser sets the "update_user" field.
func (auc *AsUserCreate) SetUpdateUser(i int64) *AsUserCreate {
	auc.mutation.SetUpdateUser(i)
	return auc
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (auc *AsUserCreate) SetNillableUpdateUser(i *int64) *AsUserCreate {
	if i != nil {
		auc.SetUpdateUser(*i)
	}
	return auc
}

// SetCreateTime sets the "create_time" field.
func (auc *AsUserCreate) SetCreateTime(dt date.DateTime) *AsUserCreate {
	auc.mutation.SetCreateTime(dt)
	return auc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (auc *AsUserCreate) SetNillableCreateTime(dt *date.DateTime) *AsUserCreate {
	if dt != nil {
		auc.SetCreateTime(*dt)
	}
	return auc
}

// SetUpdateTime sets the "update_time" field.
func (auc *AsUserCreate) SetUpdateTime(dt date.DateTime) *AsUserCreate {
	auc.mutation.SetUpdateTime(dt)
	return auc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (auc *AsUserCreate) SetNillableUpdateTime(dt *date.DateTime) *AsUserCreate {
	if dt != nil {
		auc.SetUpdateTime(*dt)
	}
	return auc
}

// SetID sets the "id" field.
func (auc *AsUserCreate) SetID(i int64) *AsUserCreate {
	auc.mutation.SetID(i)
	return auc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (auc *AsUserCreate) SetNillableID(i *int64) *AsUserCreate {
	if i != nil {
		auc.SetID(*i)
	}
	return auc
}

// SetPersonID sets the "person" edge to the AsPerson entity by ID.
func (auc *AsUserCreate) SetPersonID(id int64) *AsUserCreate {
	auc.mutation.SetPersonID(id)
	return auc
}

// SetNillablePersonID sets the "person" edge to the AsPerson entity by ID if the given value is not nil.
func (auc *AsUserCreate) SetNillablePersonID(id *int64) *AsUserCreate {
	if id != nil {
		auc = auc.SetPersonID(*id)
	}
	return auc
}

// SetPerson sets the "person" edge to the AsPerson entity.
func (auc *AsUserCreate) SetPerson(a *AsPerson) *AsUserCreate {
	return auc.SetPersonID(a.ID)
}

// AddRoleIDs adds the "roles" edge to the AsRole entity by IDs.
func (auc *AsUserCreate) AddRoleIDs(ids ...int64) *AsUserCreate {
	auc.mutation.AddRoleIDs(ids...)
	return auc
}

// AddRoles adds the "roles" edges to the AsRole entity.
func (auc *AsUserCreate) AddRoles(a ...*AsRole) *AsUserCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auc.AddRoleIDs(ids...)
}

// AddJobIDs adds the "jobs" edge to the AsJob entity by IDs.
func (auc *AsUserCreate) AddJobIDs(ids ...int64) *AsUserCreate {
	auc.mutation.AddJobIDs(ids...)
	return auc
}

// AddJobs adds the "jobs" edges to the AsJob entity.
func (auc *AsUserCreate) AddJobs(a ...*AsJob) *AsUserCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auc.AddJobIDs(ids...)
}

// AddUsedappIDs adds the "usedapps" edge to the AsMarketUsedApp entity by IDs.
func (auc *AsUserCreate) AddUsedappIDs(ids ...int64) *AsUserCreate {
	auc.mutation.AddUsedappIDs(ids...)
	return auc
}

// AddUsedapps adds the "usedapps" edges to the AsMarketUsedApp entity.
func (auc *AsUserCreate) AddUsedapps(a ...*AsMarketUsedApp) *AsUserCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auc.AddUsedappIDs(ids...)
}

// AddWorkingDataIDs adds the "workingDatas" edge to the AsWorkingData entity by IDs.
func (auc *AsUserCreate) AddWorkingDataIDs(ids ...int64) *AsUserCreate {
	auc.mutation.AddWorkingDataIDs(ids...)
	return auc
}

// AddWorkingDatas adds the "workingDatas" edges to the AsWorkingData entity.
func (auc *AsUserCreate) AddWorkingDatas(a ...*AsWorkingData) *AsUserCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auc.AddWorkingDataIDs(ids...)
}

// AddAgencyIDs adds the "agencys" edge to the AsInnerAgency entity by IDs.
func (auc *AsUserCreate) AddAgencyIDs(ids ...int64) *AsUserCreate {
	auc.mutation.AddAgencyIDs(ids...)
	return auc
}

// AddAgencys adds the "agencys" edges to the AsInnerAgency entity.
func (auc *AsUserCreate) AddAgencys(a ...*AsInnerAgency) *AsUserCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auc.AddAgencyIDs(ids...)
}

// AddRoleDistribIDs adds the "roleDistribs" edge to the AsMarketRoleDistribution entity by IDs.
func (auc *AsUserCreate) AddRoleDistribIDs(ids ...int64) *AsUserCreate {
	auc.mutation.AddRoleDistribIDs(ids...)
	return auc
}

// AddRoleDistribs adds the "roleDistribs" edges to the AsMarketRoleDistribution entity.
func (auc *AsUserCreate) AddRoleDistribs(a ...*AsMarketRoleDistribution) *AsUserCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auc.AddRoleDistribIDs(ids...)
}

// AddAppMenusUserSortIDs adds the "appMenusUserSorts" edge to the AsMarketMenuUserSort entity by IDs.
func (auc *AsUserCreate) AddAppMenusUserSortIDs(ids ...int64) *AsUserCreate {
	auc.mutation.AddAppMenusUserSortIDs(ids...)
	return auc
}

// AddAppMenusUserSorts adds the "appMenusUserSorts" edges to the AsMarketMenuUserSort entity.
func (auc *AsUserCreate) AddAppMenusUserSorts(a ...*AsMarketMenuUserSort) *AsUserCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auc.AddAppMenusUserSortIDs(ids...)
}

// AddAppUserTemplateIDs adds the "appUserTemplates" edge to the AsMarketAppUserTemplate entity by IDs.
func (auc *AsUserCreate) AddAppUserTemplateIDs(ids ...int64) *AsUserCreate {
	auc.mutation.AddAppUserTemplateIDs(ids...)
	return auc
}

// AddAppUserTemplates adds the "appUserTemplates" edges to the AsMarketAppUserTemplate entity.
func (auc *AsUserCreate) AddAppUserTemplates(a ...*AsMarketAppUserTemplate) *AsUserCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auc.AddAppUserTemplateIDs(ids...)
}

// Mutation returns the AsUserMutation object of the builder.
func (auc *AsUserCreate) Mutation() *AsUserMutation {
	return auc.mutation
}

// Save creates the AsUser in the database.
func (auc *AsUserCreate) Save(ctx context.Context) (*AsUser, error) {
	var (
		err  error
		node *AsUser
	)
	auc.defaults()
	if len(auc.hooks) == 0 {
		if err = auc.check(); err != nil {
			return nil, err
		}
		node, err = auc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = auc.check(); err != nil {
				return nil, err
			}
			auc.mutation = mutation
			if node, err = auc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(auc.hooks) - 1; i >= 0; i-- {
			if auc.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = auc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (auc *AsUserCreate) SaveX(ctx context.Context) *AsUser {
	v, err := auc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (auc *AsUserCreate) Exec(ctx context.Context) error {
	_, err := auc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auc *AsUserCreate) ExecX(ctx context.Context) {
	if err := auc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auc *AsUserCreate) defaults() {
	if _, ok := auc.mutation.IsAdmin(); !ok {
		v := asuser.DefaultIsAdmin
		auc.mutation.SetIsAdmin(v)
	}
	if _, ok := auc.mutation.TenantApplyingState(); !ok {
		v := asuser.DefaultTenantApplyingState
		auc.mutation.SetTenantApplyingState(v)
	}
	if _, ok := auc.mutation.IsMaster(); !ok {
		v := asuser.DefaultIsMaster
		auc.mutation.SetIsMaster(v)
	}
	if _, ok := auc.mutation.IsCreated(); !ok {
		v := asuser.DefaultIsCreated
		auc.mutation.SetIsCreated(v)
	}
	if _, ok := auc.mutation.IsDeleted(); !ok {
		v := asuser.DefaultIsDeleted
		auc.mutation.SetIsDeleted(v)
	}
	if _, ok := auc.mutation.Status(); !ok {
		v := asuser.DefaultStatus
		auc.mutation.SetStatus(v)
	}
	if _, ok := auc.mutation.CreateTime(); !ok {
		v := asuser.DefaultCreateTime()
		auc.mutation.SetCreateTime(v)
	}
	if _, ok := auc.mutation.UpdateTime(); !ok {
		v := asuser.DefaultUpdateTime()
		auc.mutation.SetUpdateTime(v)
	}
	if _, ok := auc.mutation.ID(); !ok {
		v := asuser.DefaultID()
		auc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auc *AsUserCreate) check() error {
	if _, ok := auc.mutation.Pwd(); !ok {
		return &ValidationError{Name: "pwd", err: errors.New(`schema: missing required field "AsUser.pwd"`)}
	}
	if _, ok := auc.mutation.IsAdmin(); !ok {
		return &ValidationError{Name: "is_admin", err: errors.New(`schema: missing required field "AsUser.is_admin"`)}
	}
	if _, ok := auc.mutation.TenantApplyingState(); !ok {
		return &ValidationError{Name: "tenant_applying_state", err: errors.New(`schema: missing required field "AsUser.tenant_applying_state"`)}
	}
	if _, ok := auc.mutation.IsCreated(); !ok {
		return &ValidationError{Name: "is_created", err: errors.New(`schema: missing required field "AsUser.is_created"`)}
	}
	if _, ok := auc.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "is_deleted", err: errors.New(`schema: missing required field "AsUser.is_deleted"`)}
	}
	return nil
}

func (auc *AsUserCreate) sqlSave(ctx context.Context) (*AsUser, error) {
	_node, _spec := auc.createSpec()
	if err := sqlgraph.CreateNode(ctx, auc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (auc *AsUserCreate) createSpec() (*AsUser, *sqlgraph.CreateSpec) {
	var (
		_node = &AsUser{config: auc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: asuser.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asuser.FieldID,
			},
		}
	)
	if id, ok := auc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := auc.mutation.TenantCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asuser.FieldTenantCode,
		})
		_node.TenantCode = value
	}
	if value, ok := auc.mutation.Pwd(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asuser.FieldPwd,
		})
		_node.Pwd = value
	}
	if value, ok := auc.mutation.PhoneNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asuser.FieldPhoneNumber,
		})
		_node.PhoneNumber = value
	}
	if value, ok := auc.mutation.IsAdmin(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asuser.FieldIsAdmin,
		})
		_node.IsAdmin = value
	}
	if value, ok := auc.mutation.TenantApplyingState(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asuser.FieldTenantApplyingState,
		})
		_node.TenantApplyingState = value
	}
	if value, ok := auc.mutation.IsMaster(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asuser.FieldIsMaster,
		})
		_node.IsMaster = value
	}
	if value, ok := auc.mutation.IsCreated(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asuser.FieldIsCreated,
		})
		_node.IsCreated = value
	}
	if value, ok := auc.mutation.OpenID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asuser.FieldOpenID,
		})
		_node.OpenID = value
	}
	if value, ok := auc.mutation.UserName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asuser.FieldUserName,
		})
		_node.UserName = value
	}
	if value, ok := auc.mutation.IsDeleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asuser.FieldIsDeleted,
		})
		_node.IsDeleted = value
	}
	if value, ok := auc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asuser.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := auc.mutation.CreateUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asuser.FieldCreateUser,
		})
		_node.CreateUser = value
	}
	if value, ok := auc.mutation.UpdateUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asuser.FieldUpdateUser,
		})
		_node.UpdateUser = value
	}
	if value, ok := auc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asuser.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := auc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asuser.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if nodes := auc.mutation.PersonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   asuser.PersonTable,
			Columns: []string{asuser.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asperson.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := auc.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asuser.RolesTable,
			Columns: asuser.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := auc.mutation.JobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asuser.JobsTable,
			Columns: asuser.JobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asjob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := auc.mutation.UsedappsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asuser.UsedappsTable,
			Columns: []string{asuser.UsedappsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketusedapp.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := auc.mutation.WorkingDatasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asuser.WorkingDatasTable,
			Columns: []string{asuser.WorkingDatasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asworkingdata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := auc.mutation.AgencysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asuser.AgencysTable,
			Columns: asuser.AgencysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asinneragency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := auc.mutation.RoleDistribsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asuser.RoleDistribsTable,
			Columns: []string{asuser.RoleDistribsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketroledistribution.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := auc.mutation.AppMenusUserSortsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asuser.AppMenusUserSortsTable,
			Columns: []string{asuser.AppMenusUserSortsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketmenuusersort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := auc.mutation.AppUserTemplatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asuser.AppUserTemplatesTable,
			Columns: []string{asuser.AppUserTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappusertemplate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AsUserCreateBulk is the builder for creating many AsUser entities in bulk.
type AsUserCreateBulk struct {
	config
	builders []*AsUserCreate
}

// Save creates the AsUser entities in the database.
func (aucb *AsUserCreateBulk) Save(ctx context.Context) ([]*AsUser, error) {
	specs := make([]*sqlgraph.CreateSpec, len(aucb.builders))
	nodes := make([]*AsUser, len(aucb.builders))
	mutators := make([]Mutator, len(aucb.builders))
	for i := range aucb.builders {
		func(i int, root context.Context) {
			builder := aucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AsUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aucb *AsUserCreateBulk) SaveX(ctx context.Context) []*AsUser {
	v, err := aucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aucb *AsUserCreateBulk) Exec(ctx context.Context) error {
	_, err := aucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aucb *AsUserCreateBulk) ExecX(ctx context.Context) {
	if err := aucb.Exec(ctx); err != nil {
		panic(err)
	}
}
