// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/asmarketmenu"
	"orginone/common/schema/asmarketmenuusersort"
	"orginone/common/schema/asuser"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsMarketMenuUserSortCreate is the builder for creating a AsMarketMenuUserSort entity.
type AsMarketMenuUserSortCreate struct {
	config
	mutation *AsMarketMenuUserSortMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (ammusc *AsMarketMenuUserSortCreate) SetUserID(i int64) *AsMarketMenuUserSortCreate {
	ammusc.mutation.SetUserID(i)
	return ammusc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ammusc *AsMarketMenuUserSortCreate) SetNillableUserID(i *int64) *AsMarketMenuUserSortCreate {
	if i != nil {
		ammusc.SetUserID(*i)
	}
	return ammusc
}

// SetMenuID sets the "menu_id" field.
func (ammusc *AsMarketMenuUserSortCreate) SetMenuID(i int64) *AsMarketMenuUserSortCreate {
	ammusc.mutation.SetMenuID(i)
	return ammusc
}

// SetNillableMenuID sets the "menu_id" field if the given value is not nil.
func (ammusc *AsMarketMenuUserSortCreate) SetNillableMenuID(i *int64) *AsMarketMenuUserSortCreate {
	if i != nil {
		ammusc.SetMenuID(*i)
	}
	return ammusc
}

// SetSort sets the "sort" field.
func (ammusc *AsMarketMenuUserSortCreate) SetSort(i int64) *AsMarketMenuUserSortCreate {
	ammusc.mutation.SetSort(i)
	return ammusc
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (ammusc *AsMarketMenuUserSortCreate) SetNillableSort(i *int64) *AsMarketMenuUserSortCreate {
	if i != nil {
		ammusc.SetSort(*i)
	}
	return ammusc
}

// SetIsDeleted sets the "is_deleted" field.
func (ammusc *AsMarketMenuUserSortCreate) SetIsDeleted(i int64) *AsMarketMenuUserSortCreate {
	ammusc.mutation.SetIsDeleted(i)
	return ammusc
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (ammusc *AsMarketMenuUserSortCreate) SetNillableIsDeleted(i *int64) *AsMarketMenuUserSortCreate {
	if i != nil {
		ammusc.SetIsDeleted(*i)
	}
	return ammusc
}

// SetStatus sets the "status" field.
func (ammusc *AsMarketMenuUserSortCreate) SetStatus(i int64) *AsMarketMenuUserSortCreate {
	ammusc.mutation.SetStatus(i)
	return ammusc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ammusc *AsMarketMenuUserSortCreate) SetNillableStatus(i *int64) *AsMarketMenuUserSortCreate {
	if i != nil {
		ammusc.SetStatus(*i)
	}
	return ammusc
}

// SetCreateUser sets the "create_user" field.
func (ammusc *AsMarketMenuUserSortCreate) SetCreateUser(i int64) *AsMarketMenuUserSortCreate {
	ammusc.mutation.SetCreateUser(i)
	return ammusc
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (ammusc *AsMarketMenuUserSortCreate) SetNillableCreateUser(i *int64) *AsMarketMenuUserSortCreate {
	if i != nil {
		ammusc.SetCreateUser(*i)
	}
	return ammusc
}

// SetUpdateUser sets the "update_user" field.
func (ammusc *AsMarketMenuUserSortCreate) SetUpdateUser(i int64) *AsMarketMenuUserSortCreate {
	ammusc.mutation.SetUpdateUser(i)
	return ammusc
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (ammusc *AsMarketMenuUserSortCreate) SetNillableUpdateUser(i *int64) *AsMarketMenuUserSortCreate {
	if i != nil {
		ammusc.SetUpdateUser(*i)
	}
	return ammusc
}

// SetCreateTime sets the "create_time" field.
func (ammusc *AsMarketMenuUserSortCreate) SetCreateTime(dt date.DateTime) *AsMarketMenuUserSortCreate {
	ammusc.mutation.SetCreateTime(dt)
	return ammusc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ammusc *AsMarketMenuUserSortCreate) SetNillableCreateTime(dt *date.DateTime) *AsMarketMenuUserSortCreate {
	if dt != nil {
		ammusc.SetCreateTime(*dt)
	}
	return ammusc
}

// SetUpdateTime sets the "update_time" field.
func (ammusc *AsMarketMenuUserSortCreate) SetUpdateTime(dt date.DateTime) *AsMarketMenuUserSortCreate {
	ammusc.mutation.SetUpdateTime(dt)
	return ammusc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ammusc *AsMarketMenuUserSortCreate) SetNillableUpdateTime(dt *date.DateTime) *AsMarketMenuUserSortCreate {
	if dt != nil {
		ammusc.SetUpdateTime(*dt)
	}
	return ammusc
}

// SetID sets the "id" field.
func (ammusc *AsMarketMenuUserSortCreate) SetID(i int64) *AsMarketMenuUserSortCreate {
	ammusc.mutation.SetID(i)
	return ammusc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ammusc *AsMarketMenuUserSortCreate) SetNillableID(i *int64) *AsMarketMenuUserSortCreate {
	if i != nil {
		ammusc.SetID(*i)
	}
	return ammusc
}

// SetUserxID sets the "userx" edge to the AsUser entity by ID.
func (ammusc *AsMarketMenuUserSortCreate) SetUserxID(id int64) *AsMarketMenuUserSortCreate {
	ammusc.mutation.SetUserxID(id)
	return ammusc
}

// SetNillableUserxID sets the "userx" edge to the AsUser entity by ID if the given value is not nil.
func (ammusc *AsMarketMenuUserSortCreate) SetNillableUserxID(id *int64) *AsMarketMenuUserSortCreate {
	if id != nil {
		ammusc = ammusc.SetUserxID(*id)
	}
	return ammusc
}

// SetUserx sets the "userx" edge to the AsUser entity.
func (ammusc *AsMarketMenuUserSortCreate) SetUserx(a *AsUser) *AsMarketMenuUserSortCreate {
	return ammusc.SetUserxID(a.ID)
}

// SetAppmenuxID sets the "appmenux" edge to the AsMarketMenu entity by ID.
func (ammusc *AsMarketMenuUserSortCreate) SetAppmenuxID(id int64) *AsMarketMenuUserSortCreate {
	ammusc.mutation.SetAppmenuxID(id)
	return ammusc
}

// SetNillableAppmenuxID sets the "appmenux" edge to the AsMarketMenu entity by ID if the given value is not nil.
func (ammusc *AsMarketMenuUserSortCreate) SetNillableAppmenuxID(id *int64) *AsMarketMenuUserSortCreate {
	if id != nil {
		ammusc = ammusc.SetAppmenuxID(*id)
	}
	return ammusc
}

// SetAppmenux sets the "appmenux" edge to the AsMarketMenu entity.
func (ammusc *AsMarketMenuUserSortCreate) SetAppmenux(a *AsMarketMenu) *AsMarketMenuUserSortCreate {
	return ammusc.SetAppmenuxID(a.ID)
}

// Mutation returns the AsMarketMenuUserSortMutation object of the builder.
func (ammusc *AsMarketMenuUserSortCreate) Mutation() *AsMarketMenuUserSortMutation {
	return ammusc.mutation
}

// Save creates the AsMarketMenuUserSort in the database.
func (ammusc *AsMarketMenuUserSortCreate) Save(ctx context.Context) (*AsMarketMenuUserSort, error) {
	var (
		err  error
		node *AsMarketMenuUserSort
	)
	ammusc.defaults()
	if len(ammusc.hooks) == 0 {
		if err = ammusc.check(); err != nil {
			return nil, err
		}
		node, err = ammusc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsMarketMenuUserSortMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ammusc.check(); err != nil {
				return nil, err
			}
			ammusc.mutation = mutation
			if node, err = ammusc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ammusc.hooks) - 1; i >= 0; i-- {
			if ammusc.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = ammusc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ammusc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ammusc *AsMarketMenuUserSortCreate) SaveX(ctx context.Context) *AsMarketMenuUserSort {
	v, err := ammusc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ammusc *AsMarketMenuUserSortCreate) Exec(ctx context.Context) error {
	_, err := ammusc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ammusc *AsMarketMenuUserSortCreate) ExecX(ctx context.Context) {
	if err := ammusc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ammusc *AsMarketMenuUserSortCreate) defaults() {
	if _, ok := ammusc.mutation.Sort(); !ok {
		v := asmarketmenuusersort.DefaultSort
		ammusc.mutation.SetSort(v)
	}
	if _, ok := ammusc.mutation.IsDeleted(); !ok {
		v := asmarketmenuusersort.DefaultIsDeleted
		ammusc.mutation.SetIsDeleted(v)
	}
	if _, ok := ammusc.mutation.Status(); !ok {
		v := asmarketmenuusersort.DefaultStatus
		ammusc.mutation.SetStatus(v)
	}
	if _, ok := ammusc.mutation.CreateTime(); !ok {
		v := asmarketmenuusersort.DefaultCreateTime()
		ammusc.mutation.SetCreateTime(v)
	}
	if _, ok := ammusc.mutation.UpdateTime(); !ok {
		v := asmarketmenuusersort.DefaultUpdateTime()
		ammusc.mutation.SetUpdateTime(v)
	}
	if _, ok := ammusc.mutation.ID(); !ok {
		v := asmarketmenuusersort.DefaultID()
		ammusc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ammusc *AsMarketMenuUserSortCreate) check() error {
	if _, ok := ammusc.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "is_deleted", err: errors.New(`schema: missing required field "AsMarketMenuUserSort.is_deleted"`)}
	}
	return nil
}

func (ammusc *AsMarketMenuUserSortCreate) sqlSave(ctx context.Context) (*AsMarketMenuUserSort, error) {
	_node, _spec := ammusc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ammusc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (ammusc *AsMarketMenuUserSortCreate) createSpec() (*AsMarketMenuUserSort, *sqlgraph.CreateSpec) {
	var (
		_node = &AsMarketMenuUserSort{config: ammusc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: asmarketmenuusersort.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asmarketmenuusersort.FieldID,
			},
		}
	)
	if id, ok := ammusc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ammusc.mutation.Sort(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketmenuusersort.FieldSort,
		})
		_node.Sort = value
	}
	if value, ok := ammusc.mutation.IsDeleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketmenuusersort.FieldIsDeleted,
		})
		_node.IsDeleted = value
	}
	if value, ok := ammusc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketmenuusersort.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := ammusc.mutation.CreateUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketmenuusersort.FieldCreateUser,
		})
		_node.CreateUser = value
	}
	if value, ok := ammusc.mutation.UpdateUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketmenuusersort.FieldUpdateUser,
		})
		_node.UpdateUser = value
	}
	if value, ok := ammusc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketmenuusersort.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := ammusc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketmenuusersort.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if nodes := ammusc.mutation.UserxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketmenuusersort.UserxTable,
			Columns: []string{asmarketmenuusersort.UserxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ammusc.mutation.AppmenuxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketmenuusersort.AppmenuxTable,
			Columns: []string{asmarketmenuusersort.AppmenuxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MenuID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AsMarketMenuUserSortCreateBulk is the builder for creating many AsMarketMenuUserSort entities in bulk.
type AsMarketMenuUserSortCreateBulk struct {
	config
	builders []*AsMarketMenuUserSortCreate
}

// Save creates the AsMarketMenuUserSort entities in the database.
func (ammuscb *AsMarketMenuUserSortCreateBulk) Save(ctx context.Context) ([]*AsMarketMenuUserSort, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ammuscb.builders))
	nodes := make([]*AsMarketMenuUserSort, len(ammuscb.builders))
	mutators := make([]Mutator, len(ammuscb.builders))
	for i := range ammuscb.builders {
		func(i int, root context.Context) {
			builder := ammuscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AsMarketMenuUserSortMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ammuscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ammuscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ammuscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ammuscb *AsMarketMenuUserSortCreateBulk) SaveX(ctx context.Context) []*AsMarketMenuUserSort {
	v, err := ammuscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ammuscb *AsMarketMenuUserSortCreateBulk) Exec(ctx context.Context) error {
	_, err := ammuscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ammuscb *AsMarketMenuUserSortCreateBulk) ExecX(ctx context.Context) {
	if err := ammuscb.Exec(ctx); err != nil {
		panic(err)
	}
}
