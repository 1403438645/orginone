// Code generated by entc, DO NOT EDIT.

package schema

import (
	"fmt"
	"orginone/common/schema/astenantattr"
	"orginone/common/tools/date"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// AsTenantAttr is the model entity for the AsTenantAttr schema.
type AsTenantAttr struct {
	config `json:"-"`
	// ID of the ent.
	// 主键
	ID int64 `json:"id,string"`
	// ParentID holds the value of the "parent_id" field.
	// 父ID
	ParentID int64 `json:"parentId,string"`
	// AttrName holds the value of the "attr_name" field.
	// tenantType对应的名字,也就是租户类型的名字
	AttrName string `json:"attrName"`
	// AttrRemark holds the value of the "attr_remark" field.
	// 类型备注
	AttrRemark string `json:"attrRemark"`
	// IsDeleted holds the value of the "is_deleted" field.
	// 是否被删除
	IsDeleted int64 `json:"isDeleted"`
	// Status holds the value of the "status" field.
	// 状态
	Status int64 `json:"status"`
	// CreateUser holds the value of the "create_user" field.
	// 创建用户
	CreateUser int64 `json:"createUser"`
	// UpdateUser holds the value of the "update_user" field.
	// 更新用户
	UpdateUser int64 `json:"updateUser"`
	// CreateTime holds the value of the "create_time" field.
	// 创建时间
	CreateTime date.DateTime `json:"createTime"`
	// UpdateTime holds the value of the "update_time" field.
	// 更新时间
	UpdateTime date.DateTime `json:"updateTime"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AsTenantAttrQuery when eager-loading is set.
	Edges AsTenantAttrEdges `json:"edges"`
}

// AsTenantAttrEdges holds the relations/edges for other nodes in the graph.
type AsTenantAttrEdges struct {
	// Parentx holds the value of the parentx edge.
	Parentx *AsTenantAttr `json:"parentx"`
	// Childrens holds the value of the childrens edge.
	Childrens []*AsTenantAttr `json:"childrens"`
	// AttrRoles holds the value of the attrRoles edge.
	AttrRoles []*AsTenantAttrRole `json:"attrroles"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ParentxOrErr returns the Parentx value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AsTenantAttrEdges) ParentxOrErr() (*AsTenantAttr, error) {
	if e.loadedTypes[0] {
		if e.Parentx == nil {
			// The edge parentx was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: astenantattr.Label}
		}
		return e.Parentx, nil
	}
	return nil, &NotLoadedError{edge: "parentx"}
}

// ChildrensOrErr returns the Childrens value or an error if the edge
// was not loaded in eager-loading.
func (e AsTenantAttrEdges) ChildrensOrErr() ([]*AsTenantAttr, error) {
	if e.loadedTypes[1] {
		return e.Childrens, nil
	}
	return nil, &NotLoadedError{edge: "childrens"}
}

// AttrRolesOrErr returns the AttrRoles value or an error if the edge
// was not loaded in eager-loading.
func (e AsTenantAttrEdges) AttrRolesOrErr() ([]*AsTenantAttrRole, error) {
	if e.loadedTypes[2] {
		return e.AttrRoles, nil
	}
	return nil, &NotLoadedError{edge: "attrRoles"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AsTenantAttr) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case astenantattr.FieldID, astenantattr.FieldParentID, astenantattr.FieldIsDeleted, astenantattr.FieldStatus, astenantattr.FieldCreateUser, astenantattr.FieldUpdateUser:
			values[i] = new(sql.NullInt64)
		case astenantattr.FieldAttrName, astenantattr.FieldAttrRemark:
			values[i] = new(sql.NullString)
		case astenantattr.FieldCreateTime, astenantattr.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AsTenantAttr", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AsTenantAttr fields.
func (ata *AsTenantAttr) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case astenantattr.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ata.ID = int64(value.Int64)
		case astenantattr.FieldParentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value.Valid {
				ata.ParentID = value.Int64
			}
		case astenantattr.FieldAttrName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field attr_name", values[i])
			} else if value.Valid {
				ata.AttrName = value.String
			}
		case astenantattr.FieldAttrRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field attr_remark", values[i])
			} else if value.Valid {
				ata.AttrRemark = value.String
			}
		case astenantattr.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				ata.IsDeleted = value.Int64
			}
		case astenantattr.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ata.Status = value.Int64
			}
		case astenantattr.FieldCreateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_user", values[i])
			} else if value.Valid {
				ata.CreateUser = value.Int64
			}
		case astenantattr.FieldUpdateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_user", values[i])
			} else if value.Valid {
				ata.UpdateUser = value.Int64
			}
		case astenantattr.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ata.CreateTime = date.DateTime(value.Time)
			}
		case astenantattr.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ata.UpdateTime = date.DateTime(value.Time)
			}
		}
	}
	return nil
}

// QueryParentx queries the "parentx" edge of the AsTenantAttr entity.
func (ata *AsTenantAttr) QueryParentx() *AsTenantAttrQuery {
	return (&AsTenantAttrClient{config: ata.config}).QueryParentx(ata)
}

// QueryChildrens queries the "childrens" edge of the AsTenantAttr entity.
func (ata *AsTenantAttr) QueryChildrens() *AsTenantAttrQuery {
	return (&AsTenantAttrClient{config: ata.config}).QueryChildrens(ata)
}

// QueryAttrRoles queries the "attrRoles" edge of the AsTenantAttr entity.
func (ata *AsTenantAttr) QueryAttrRoles() *AsTenantAttrRoleQuery {
	return (&AsTenantAttrClient{config: ata.config}).QueryAttrRoles(ata)
}

// Update returns a builder for updating this AsTenantAttr.
// Note that you need to call AsTenantAttr.Unwrap() before calling this method if this AsTenantAttr
// was returned from a transaction, and the transaction was committed or rolled back.
func (ata *AsTenantAttr) Update() *AsTenantAttrUpdateOne {
	return (&AsTenantAttrClient{config: ata.config}).UpdateOne(ata)
}

// Unwrap unwraps the AsTenantAttr entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ata *AsTenantAttr) Unwrap() *AsTenantAttr {
	tx, ok := ata.config.driver.(*txDriver)
	if !ok {
		panic("schema: AsTenantAttr is not a transactional entity")
	}
	ata.config.driver = tx.drv
	return ata
}

// String implements the fmt.Stringer.
func (ata *AsTenantAttr) String() string {
	var builder strings.Builder
	builder.WriteString("AsTenantAttr(")
	builder.WriteString(fmt.Sprintf("id=%v", ata.ID))
	builder.WriteString(", parent_id=")
	builder.WriteString(fmt.Sprintf("%v", ata.ParentID))
	builder.WriteString(", attr_name=")
	builder.WriteString(ata.AttrName)
	builder.WriteString(", attr_remark=")
	builder.WriteString(ata.AttrRemark)
	builder.WriteString(", is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", ata.IsDeleted))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", ata.Status))
	builder.WriteString(", create_user=")
	builder.WriteString(fmt.Sprintf("%v", ata.CreateUser))
	builder.WriteString(", update_user=")
	builder.WriteString(fmt.Sprintf("%v", ata.UpdateUser))
	builder.WriteString(", create_time=")
	builder.WriteString(fmt.Sprintf("%v", ata.CreateTime))
	builder.WriteString(", update_time=")
	builder.WriteString(fmt.Sprintf("%v", ata.UpdateTime))
	builder.WriteByte(')')
	return builder.String()
}

// AsTenantAttrs is a parsable slice of AsTenantAttr.
type AsTenantAttrs []*AsTenantAttr

func (ata AsTenantAttrs) config(cfg config) {
	for _i := range ata {
		ata[_i].config = cfg
	}
}
