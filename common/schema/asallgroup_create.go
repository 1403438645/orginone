// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/asallgroup"
	"orginone/common/schema/asappgroupdistributiondata"
	"orginone/common/schema/asgrouptenantrelations"
	"orginone/common/schema/aslayer"
	"orginone/common/schema/asmarketappgroupdistribution"
	"orginone/common/schema/asmarketappgroupdistributionrelation"
	"orginone/common/schema/asmarketapppurchase"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsAllGroupCreate is the builder for creating a AsAllGroup entity.
type AsAllGroupCreate struct {
	config
	mutation *AsAllGroupMutation
	hooks    []Hook
}

// SetTenantCode sets the "tenant_code" field.
func (aagc *AsAllGroupCreate) SetTenantCode(s string) *AsAllGroupCreate {
	aagc.mutation.SetTenantCode(s)
	return aagc
}

// SetNillableTenantCode sets the "tenant_code" field if the given value is not nil.
func (aagc *AsAllGroupCreate) SetNillableTenantCode(s *string) *AsAllGroupCreate {
	if s != nil {
		aagc.SetTenantCode(*s)
	}
	return aagc
}

// SetGroupName sets the "group_name" field.
func (aagc *AsAllGroupCreate) SetGroupName(s string) *AsAllGroupCreate {
	aagc.mutation.SetGroupName(s)
	return aagc
}

// SetNillableGroupName sets the "group_name" field if the given value is not nil.
func (aagc *AsAllGroupCreate) SetNillableGroupName(s *string) *AsAllGroupCreate {
	if s != nil {
		aagc.SetGroupName(*s)
	}
	return aagc
}

// SetGroupDescription sets the "group_description" field.
func (aagc *AsAllGroupCreate) SetGroupDescription(s string) *AsAllGroupCreate {
	aagc.mutation.SetGroupDescription(s)
	return aagc
}

// SetNillableGroupDescription sets the "group_description" field if the given value is not nil.
func (aagc *AsAllGroupCreate) SetNillableGroupDescription(s *string) *AsAllGroupCreate {
	if s != nil {
		aagc.SetGroupDescription(*s)
	}
	return aagc
}

// SetGroupCode sets the "group_code" field.
func (aagc *AsAllGroupCreate) SetGroupCode(s string) *AsAllGroupCreate {
	aagc.mutation.SetGroupCode(s)
	return aagc
}

// SetNillableGroupCode sets the "group_code" field if the given value is not nil.
func (aagc *AsAllGroupCreate) SetNillableGroupCode(s *string) *AsAllGroupCreate {
	if s != nil {
		aagc.SetGroupCode(*s)
	}
	return aagc
}

// SetDepth sets the "depth" field.
func (aagc *AsAllGroupCreate) SetDepth(i int64) *AsAllGroupCreate {
	aagc.mutation.SetDepth(i)
	return aagc
}

// SetNillableDepth sets the "depth" field if the given value is not nil.
func (aagc *AsAllGroupCreate) SetNillableDepth(i *int64) *AsAllGroupCreate {
	if i != nil {
		aagc.SetDepth(*i)
	}
	return aagc
}

// SetType sets the "type" field.
func (aagc *AsAllGroupCreate) SetType(i int64) *AsAllGroupCreate {
	aagc.mutation.SetType(i)
	return aagc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (aagc *AsAllGroupCreate) SetNillableType(i *int64) *AsAllGroupCreate {
	if i != nil {
		aagc.SetType(*i)
	}
	return aagc
}

// SetSocialCreditCode sets the "social_credit_code" field.
func (aagc *AsAllGroupCreate) SetSocialCreditCode(s string) *AsAllGroupCreate {
	aagc.mutation.SetSocialCreditCode(s)
	return aagc
}

// SetNillableSocialCreditCode sets the "social_credit_code" field if the given value is not nil.
func (aagc *AsAllGroupCreate) SetNillableSocialCreditCode(s *string) *AsAllGroupCreate {
	if s != nil {
		aagc.SetSocialCreditCode(*s)
	}
	return aagc
}

// SetIsDeleted sets the "is_deleted" field.
func (aagc *AsAllGroupCreate) SetIsDeleted(i int64) *AsAllGroupCreate {
	aagc.mutation.SetIsDeleted(i)
	return aagc
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (aagc *AsAllGroupCreate) SetNillableIsDeleted(i *int64) *AsAllGroupCreate {
	if i != nil {
		aagc.SetIsDeleted(*i)
	}
	return aagc
}

// SetStatus sets the "status" field.
func (aagc *AsAllGroupCreate) SetStatus(i int64) *AsAllGroupCreate {
	aagc.mutation.SetStatus(i)
	return aagc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (aagc *AsAllGroupCreate) SetNillableStatus(i *int64) *AsAllGroupCreate {
	if i != nil {
		aagc.SetStatus(*i)
	}
	return aagc
}

// SetCreateUser sets the "create_user" field.
func (aagc *AsAllGroupCreate) SetCreateUser(i int64) *AsAllGroupCreate {
	aagc.mutation.SetCreateUser(i)
	return aagc
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (aagc *AsAllGroupCreate) SetNillableCreateUser(i *int64) *AsAllGroupCreate {
	if i != nil {
		aagc.SetCreateUser(*i)
	}
	return aagc
}

// SetUpdateUser sets the "update_user" field.
func (aagc *AsAllGroupCreate) SetUpdateUser(i int64) *AsAllGroupCreate {
	aagc.mutation.SetUpdateUser(i)
	return aagc
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (aagc *AsAllGroupCreate) SetNillableUpdateUser(i *int64) *AsAllGroupCreate {
	if i != nil {
		aagc.SetUpdateUser(*i)
	}
	return aagc
}

// SetCreateTime sets the "create_time" field.
func (aagc *AsAllGroupCreate) SetCreateTime(dt date.DateTime) *AsAllGroupCreate {
	aagc.mutation.SetCreateTime(dt)
	return aagc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (aagc *AsAllGroupCreate) SetNillableCreateTime(dt *date.DateTime) *AsAllGroupCreate {
	if dt != nil {
		aagc.SetCreateTime(*dt)
	}
	return aagc
}

// SetUpdateTime sets the "update_time" field.
func (aagc *AsAllGroupCreate) SetUpdateTime(dt date.DateTime) *AsAllGroupCreate {
	aagc.mutation.SetUpdateTime(dt)
	return aagc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (aagc *AsAllGroupCreate) SetNillableUpdateTime(dt *date.DateTime) *AsAllGroupCreate {
	if dt != nil {
		aagc.SetUpdateTime(*dt)
	}
	return aagc
}

// SetID sets the "id" field.
func (aagc *AsAllGroupCreate) SetID(i int64) *AsAllGroupCreate {
	aagc.mutation.SetID(i)
	return aagc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (aagc *AsAllGroupCreate) SetNillableID(i *int64) *AsAllGroupCreate {
	if i != nil {
		aagc.SetID(*i)
	}
	return aagc
}

// AddAllLayerIDs adds the "allLayer" edge to the AsLayer entity by IDs.
func (aagc *AsAllGroupCreate) AddAllLayerIDs(ids ...int64) *AsAllGroupCreate {
	aagc.mutation.AddAllLayerIDs(ids...)
	return aagc
}

// AddAllLayer adds the "allLayer" edges to the AsLayer entity.
func (aagc *AsAllGroupCreate) AddAllLayer(a ...*AsLayer) *AsAllGroupCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aagc.AddAllLayerIDs(ids...)
}

// AddAppPurchaseIDs adds the "appPurchases" edge to the AsMarketAppPurchase entity by IDs.
func (aagc *AsAllGroupCreate) AddAppPurchaseIDs(ids ...int64) *AsAllGroupCreate {
	aagc.mutation.AddAppPurchaseIDs(ids...)
	return aagc
}

// AddAppPurchases adds the "appPurchases" edges to the AsMarketAppPurchase entity.
func (aagc *AsAllGroupCreate) AddAppPurchases(a ...*AsMarketAppPurchase) *AsAllGroupCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aagc.AddAppPurchaseIDs(ids...)
}

// AddAllTenantIDs adds the "allTenants" edge to the AsGroupTenantRelations entity by IDs.
func (aagc *AsAllGroupCreate) AddAllTenantIDs(ids ...int64) *AsAllGroupCreate {
	aagc.mutation.AddAllTenantIDs(ids...)
	return aagc
}

// AddAllTenants adds the "allTenants" edges to the AsGroupTenantRelations entity.
func (aagc *AsAllGroupCreate) AddAllTenants(a ...*AsGroupTenantRelations) *AsAllGroupCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aagc.AddAllTenantIDs(ids...)
}

// AddAppGroupDistribIDs adds the "appGroupDistribs" edge to the AsMarketAppGroupDistribution entity by IDs.
func (aagc *AsAllGroupCreate) AddAppGroupDistribIDs(ids ...int64) *AsAllGroupCreate {
	aagc.mutation.AddAppGroupDistribIDs(ids...)
	return aagc
}

// AddAppGroupDistribs adds the "appGroupDistribs" edges to the AsMarketAppGroupDistribution entity.
func (aagc *AsAllGroupCreate) AddAppGroupDistribs(a ...*AsMarketAppGroupDistribution) *AsAllGroupCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aagc.AddAppGroupDistribIDs(ids...)
}

// AddAppGroupDistribConfigIDs adds the "appGroupDistribConfigs" edge to the AsAppGroupDistributionData entity by IDs.
func (aagc *AsAllGroupCreate) AddAppGroupDistribConfigIDs(ids ...int64) *AsAllGroupCreate {
	aagc.mutation.AddAppGroupDistribConfigIDs(ids...)
	return aagc
}

// AddAppGroupDistribConfigs adds the "appGroupDistribConfigs" edges to the AsAppGroupDistributionData entity.
func (aagc *AsAllGroupCreate) AddAppGroupDistribConfigs(a ...*AsAppGroupDistributionData) *AsAllGroupCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aagc.AddAppGroupDistribConfigIDs(ids...)
}

// AddAppGroupDistribsRelationIDs adds the "appGroupDistribsRelation" edge to the AsMarketAppGroupDistributionRelation entity by IDs.
func (aagc *AsAllGroupCreate) AddAppGroupDistribsRelationIDs(ids ...int64) *AsAllGroupCreate {
	aagc.mutation.AddAppGroupDistribsRelationIDs(ids...)
	return aagc
}

// AddAppGroupDistribsRelation adds the "appGroupDistribsRelation" edges to the AsMarketAppGroupDistributionRelation entity.
func (aagc *AsAllGroupCreate) AddAppGroupDistribsRelation(a ...*AsMarketAppGroupDistributionRelation) *AsAllGroupCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aagc.AddAppGroupDistribsRelationIDs(ids...)
}

// Mutation returns the AsAllGroupMutation object of the builder.
func (aagc *AsAllGroupCreate) Mutation() *AsAllGroupMutation {
	return aagc.mutation
}

// Save creates the AsAllGroup in the database.
func (aagc *AsAllGroupCreate) Save(ctx context.Context) (*AsAllGroup, error) {
	var (
		err  error
		node *AsAllGroup
	)
	aagc.defaults()
	if len(aagc.hooks) == 0 {
		if err = aagc.check(); err != nil {
			return nil, err
		}
		node, err = aagc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsAllGroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aagc.check(); err != nil {
				return nil, err
			}
			aagc.mutation = mutation
			if node, err = aagc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(aagc.hooks) - 1; i >= 0; i-- {
			if aagc.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = aagc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aagc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (aagc *AsAllGroupCreate) SaveX(ctx context.Context) *AsAllGroup {
	v, err := aagc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aagc *AsAllGroupCreate) Exec(ctx context.Context) error {
	_, err := aagc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aagc *AsAllGroupCreate) ExecX(ctx context.Context) {
	if err := aagc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aagc *AsAllGroupCreate) defaults() {
	if _, ok := aagc.mutation.Depth(); !ok {
		v := asallgroup.DefaultDepth
		aagc.mutation.SetDepth(v)
	}
	if _, ok := aagc.mutation.GetType(); !ok {
		v := asallgroup.DefaultType
		aagc.mutation.SetType(v)
	}
	if _, ok := aagc.mutation.IsDeleted(); !ok {
		v := asallgroup.DefaultIsDeleted
		aagc.mutation.SetIsDeleted(v)
	}
	if _, ok := aagc.mutation.Status(); !ok {
		v := asallgroup.DefaultStatus
		aagc.mutation.SetStatus(v)
	}
	if _, ok := aagc.mutation.CreateTime(); !ok {
		v := asallgroup.DefaultCreateTime()
		aagc.mutation.SetCreateTime(v)
	}
	if _, ok := aagc.mutation.UpdateTime(); !ok {
		v := asallgroup.DefaultUpdateTime()
		aagc.mutation.SetUpdateTime(v)
	}
	if _, ok := aagc.mutation.ID(); !ok {
		v := asallgroup.DefaultID()
		aagc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aagc *AsAllGroupCreate) check() error {
	if _, ok := aagc.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "is_deleted", err: errors.New(`schema: missing required field "AsAllGroup.is_deleted"`)}
	}
	return nil
}

func (aagc *AsAllGroupCreate) sqlSave(ctx context.Context) (*AsAllGroup, error) {
	_node, _spec := aagc.createSpec()
	if err := sqlgraph.CreateNode(ctx, aagc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (aagc *AsAllGroupCreate) createSpec() (*AsAllGroup, *sqlgraph.CreateSpec) {
	var (
		_node = &AsAllGroup{config: aagc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: asallgroup.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asallgroup.FieldID,
			},
		}
	)
	if id, ok := aagc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := aagc.mutation.TenantCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asallgroup.FieldTenantCode,
		})
		_node.TenantCode = value
	}
	if value, ok := aagc.mutation.GroupName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asallgroup.FieldGroupName,
		})
		_node.GroupName = value
	}
	if value, ok := aagc.mutation.GroupDescription(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asallgroup.FieldGroupDescription,
		})
		_node.GroupDescription = value
	}
	if value, ok := aagc.mutation.GroupCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asallgroup.FieldGroupCode,
		})
		_node.GroupCode = value
	}
	if value, ok := aagc.mutation.Depth(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asallgroup.FieldDepth,
		})
		_node.Depth = value
	}
	if value, ok := aagc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asallgroup.FieldType,
		})
		_node.Type = value
	}
	if value, ok := aagc.mutation.SocialCreditCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asallgroup.FieldSocialCreditCode,
		})
		_node.SocialCreditCode = value
	}
	if value, ok := aagc.mutation.IsDeleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asallgroup.FieldIsDeleted,
		})
		_node.IsDeleted = value
	}
	if value, ok := aagc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asallgroup.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := aagc.mutation.CreateUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asallgroup.FieldCreateUser,
		})
		_node.CreateUser = value
	}
	if value, ok := aagc.mutation.UpdateUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asallgroup.FieldUpdateUser,
		})
		_node.UpdateUser = value
	}
	if value, ok := aagc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asallgroup.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := aagc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asallgroup.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if nodes := aagc.mutation.AllLayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asallgroup.AllLayerTable,
			Columns: []string{asallgroup.AllLayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: aslayer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := aagc.mutation.AppPurchasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asallgroup.AppPurchasesTable,
			Columns: []string{asallgroup.AppPurchasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapppurchase.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := aagc.mutation.AllTenantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asallgroup.AllTenantsTable,
			Columns: []string{asallgroup.AllTenantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asgrouptenantrelations.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := aagc.mutation.AppGroupDistribsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asallgroup.AppGroupDistribsTable,
			Columns: []string{asallgroup.AppGroupDistribsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappgroupdistribution.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := aagc.mutation.AppGroupDistribConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asallgroup.AppGroupDistribConfigsTable,
			Columns: []string{asallgroup.AppGroupDistribConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asappgroupdistributiondata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := aagc.mutation.AppGroupDistribsRelationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asallgroup.AppGroupDistribsRelationTable,
			Columns: []string{asallgroup.AppGroupDistribsRelationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappgroupdistributionrelation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AsAllGroupCreateBulk is the builder for creating many AsAllGroup entities in bulk.
type AsAllGroupCreateBulk struct {
	config
	builders []*AsAllGroupCreate
}

// Save creates the AsAllGroup entities in the database.
func (aagcb *AsAllGroupCreateBulk) Save(ctx context.Context) ([]*AsAllGroup, error) {
	specs := make([]*sqlgraph.CreateSpec, len(aagcb.builders))
	nodes := make([]*AsAllGroup, len(aagcb.builders))
	mutators := make([]Mutator, len(aagcb.builders))
	for i := range aagcb.builders {
		func(i int, root context.Context) {
			builder := aagcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AsAllGroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aagcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aagcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aagcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aagcb *AsAllGroupCreateBulk) SaveX(ctx context.Context) []*AsAllGroup {
	v, err := aagcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aagcb *AsAllGroupCreateBulk) Exec(ctx context.Context) error {
	_, err := aagcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aagcb *AsAllGroupCreateBulk) ExecX(ctx context.Context) {
	if err := aagcb.Exec(ctx); err != nil {
		panic(err)
	}
}
