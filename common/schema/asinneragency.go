// Code generated by entc, DO NOT EDIT.

package schema

import (
	"fmt"
	"orginone/common/schema/asinneragency"
	"orginone/common/tools/date"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// AsInnerAgency is the model entity for the AsInnerAgency schema.
type AsInnerAgency struct {
	config `json:"-"`
	// ID of the ent.
	// 主键
	ID int64 `json:"id,string"`
	// AgencyName holds the value of the "agency_name" field.
	// 机构名称
	AgencyName string `json:"agencyName"`
	// AgencyCode holds the value of the "agency_code" field.
	// 部门编码(系统生成)
	AgencyCode string `json:"agencyCode"`
	// TenantCode holds the value of the "tenant_code" field.
	// 所属租户ID
	TenantCode string `json:"tenantCode"`
	// ParentID holds the value of the "parent_id" field.
	// 父Id
	ParentID int64 `json:"parentId,string"`
	// IsDeleted holds the value of the "is_deleted" field.
	// 是否被删除
	IsDeleted int64 `json:"isDeleted"`
	// Status holds the value of the "status" field.
	// 状态
	Status int64 `json:"status"`
	// CreateUser holds the value of the "create_user" field.
	// 创建用户
	CreateUser int64 `json:"createUser"`
	// UpdateUser holds the value of the "update_user" field.
	// 更新用户
	UpdateUser int64 `json:"updateUser"`
	// CreateTime holds the value of the "create_time" field.
	// 创建时间
	CreateTime date.DateTime `json:"createTime"`
	// UpdateTime holds the value of the "update_time" field.
	// 更新时间
	UpdateTime date.DateTime `json:"updateTime"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AsInnerAgencyQuery when eager-loading is set.
	Edges AsInnerAgencyEdges `json:"edges"`
}

// AsInnerAgencyEdges holds the relations/edges for other nodes in the graph.
type AsInnerAgencyEdges struct {
	// Parent holds the value of the parent edge.
	Parent *AsInnerAgency `json:"parent"`
	// Childrens holds the value of the childrens edge.
	Childrens []*AsInnerAgency `json:"childrens"`
	// Jobs holds the value of the jobs edge.
	Jobs []*AsJob `json:"jobs"`
	// Users holds the value of the users edge.
	Users []*AsUser `json:"users"`
	// Persons holds the value of the persons edge.
	Persons []*AsPerson `json:"persons"`
	// RoleDistribs holds the value of the roleDistribs edge.
	RoleDistribs []*AsMarketRoleDistribution `json:"roledistribs"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AsInnerAgencyEdges) ParentOrErr() (*AsInnerAgency, error) {
	if e.loadedTypes[0] {
		if e.Parent == nil {
			// The edge parent was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: asinneragency.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrensOrErr returns the Childrens value or an error if the edge
// was not loaded in eager-loading.
func (e AsInnerAgencyEdges) ChildrensOrErr() ([]*AsInnerAgency, error) {
	if e.loadedTypes[1] {
		return e.Childrens, nil
	}
	return nil, &NotLoadedError{edge: "childrens"}
}

// JobsOrErr returns the Jobs value or an error if the edge
// was not loaded in eager-loading.
func (e AsInnerAgencyEdges) JobsOrErr() ([]*AsJob, error) {
	if e.loadedTypes[2] {
		return e.Jobs, nil
	}
	return nil, &NotLoadedError{edge: "jobs"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e AsInnerAgencyEdges) UsersOrErr() ([]*AsUser, error) {
	if e.loadedTypes[3] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// PersonsOrErr returns the Persons value or an error if the edge
// was not loaded in eager-loading.
func (e AsInnerAgencyEdges) PersonsOrErr() ([]*AsPerson, error) {
	if e.loadedTypes[4] {
		return e.Persons, nil
	}
	return nil, &NotLoadedError{edge: "persons"}
}

// RoleDistribsOrErr returns the RoleDistribs value or an error if the edge
// was not loaded in eager-loading.
func (e AsInnerAgencyEdges) RoleDistribsOrErr() ([]*AsMarketRoleDistribution, error) {
	if e.loadedTypes[5] {
		return e.RoleDistribs, nil
	}
	return nil, &NotLoadedError{edge: "roleDistribs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AsInnerAgency) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case asinneragency.FieldID, asinneragency.FieldParentID, asinneragency.FieldIsDeleted, asinneragency.FieldStatus, asinneragency.FieldCreateUser, asinneragency.FieldUpdateUser:
			values[i] = new(sql.NullInt64)
		case asinneragency.FieldAgencyName, asinneragency.FieldAgencyCode, asinneragency.FieldTenantCode:
			values[i] = new(sql.NullString)
		case asinneragency.FieldCreateTime, asinneragency.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AsInnerAgency", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AsInnerAgency fields.
func (aia *AsInnerAgency) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case asinneragency.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			aia.ID = int64(value.Int64)
		case asinneragency.FieldAgencyName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field agency_name", values[i])
			} else if value.Valid {
				aia.AgencyName = value.String
			}
		case asinneragency.FieldAgencyCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field agency_code", values[i])
			} else if value.Valid {
				aia.AgencyCode = value.String
			}
		case asinneragency.FieldTenantCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_code", values[i])
			} else if value.Valid {
				aia.TenantCode = value.String
			}
		case asinneragency.FieldParentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value.Valid {
				aia.ParentID = value.Int64
			}
		case asinneragency.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				aia.IsDeleted = value.Int64
			}
		case asinneragency.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				aia.Status = value.Int64
			}
		case asinneragency.FieldCreateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_user", values[i])
			} else if value.Valid {
				aia.CreateUser = value.Int64
			}
		case asinneragency.FieldUpdateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_user", values[i])
			} else if value.Valid {
				aia.UpdateUser = value.Int64
			}
		case asinneragency.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				aia.CreateTime = date.DateTime(value.Time)
			}
		case asinneragency.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				aia.UpdateTime = date.DateTime(value.Time)
			}
		}
	}
	return nil
}

// QueryParent queries the "parent" edge of the AsInnerAgency entity.
func (aia *AsInnerAgency) QueryParent() *AsInnerAgencyQuery {
	return (&AsInnerAgencyClient{config: aia.config}).QueryParent(aia)
}

// QueryChildrens queries the "childrens" edge of the AsInnerAgency entity.
func (aia *AsInnerAgency) QueryChildrens() *AsInnerAgencyQuery {
	return (&AsInnerAgencyClient{config: aia.config}).QueryChildrens(aia)
}

// QueryJobs queries the "jobs" edge of the AsInnerAgency entity.
func (aia *AsInnerAgency) QueryJobs() *AsJobQuery {
	return (&AsInnerAgencyClient{config: aia.config}).QueryJobs(aia)
}

// QueryUsers queries the "users" edge of the AsInnerAgency entity.
func (aia *AsInnerAgency) QueryUsers() *AsUserQuery {
	return (&AsInnerAgencyClient{config: aia.config}).QueryUsers(aia)
}

// QueryPersons queries the "persons" edge of the AsInnerAgency entity.
func (aia *AsInnerAgency) QueryPersons() *AsPersonQuery {
	return (&AsInnerAgencyClient{config: aia.config}).QueryPersons(aia)
}

// QueryRoleDistribs queries the "roleDistribs" edge of the AsInnerAgency entity.
func (aia *AsInnerAgency) QueryRoleDistribs() *AsMarketRoleDistributionQuery {
	return (&AsInnerAgencyClient{config: aia.config}).QueryRoleDistribs(aia)
}

// Update returns a builder for updating this AsInnerAgency.
// Note that you need to call AsInnerAgency.Unwrap() before calling this method if this AsInnerAgency
// was returned from a transaction, and the transaction was committed or rolled back.
func (aia *AsInnerAgency) Update() *AsInnerAgencyUpdateOne {
	return (&AsInnerAgencyClient{config: aia.config}).UpdateOne(aia)
}

// Unwrap unwraps the AsInnerAgency entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (aia *AsInnerAgency) Unwrap() *AsInnerAgency {
	tx, ok := aia.config.driver.(*txDriver)
	if !ok {
		panic("schema: AsInnerAgency is not a transactional entity")
	}
	aia.config.driver = tx.drv
	return aia
}

// String implements the fmt.Stringer.
func (aia *AsInnerAgency) String() string {
	var builder strings.Builder
	builder.WriteString("AsInnerAgency(")
	builder.WriteString(fmt.Sprintf("id=%v", aia.ID))
	builder.WriteString(", agency_name=")
	builder.WriteString(aia.AgencyName)
	builder.WriteString(", agency_code=")
	builder.WriteString(aia.AgencyCode)
	builder.WriteString(", tenant_code=")
	builder.WriteString(aia.TenantCode)
	builder.WriteString(", parent_id=")
	builder.WriteString(fmt.Sprintf("%v", aia.ParentID))
	builder.WriteString(", is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", aia.IsDeleted))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", aia.Status))
	builder.WriteString(", create_user=")
	builder.WriteString(fmt.Sprintf("%v", aia.CreateUser))
	builder.WriteString(", update_user=")
	builder.WriteString(fmt.Sprintf("%v", aia.UpdateUser))
	builder.WriteString(", create_time=")
	builder.WriteString(fmt.Sprintf("%v", aia.CreateTime))
	builder.WriteString(", update_time=")
	builder.WriteString(fmt.Sprintf("%v", aia.UpdateTime))
	builder.WriteByte(')')
	return builder.String()
}

// AsInnerAgencies is a parsable slice of AsInnerAgency.
type AsInnerAgencies []*AsInnerAgency

func (aia AsInnerAgencies) config(cfg config) {
	for _i := range aia {
		aia[_i].config = cfg
	}
}
