// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/asinneragency"
	"orginone/common/schema/asjob"
	"orginone/common/schema/asmarketroledistribution"
	"orginone/common/schema/asperson"
	"orginone/common/schema/asuser"
	"orginone/common/schema/predicate"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsInnerAgencyUpdate is the builder for updating AsInnerAgency entities.
type AsInnerAgencyUpdate struct {
	config
	hooks    []Hook
	mutation *AsInnerAgencyMutation
}

// Where appends a list predicates to the AsInnerAgencyUpdate builder.
func (aiau *AsInnerAgencyUpdate) Where(ps ...predicate.AsInnerAgency) *AsInnerAgencyUpdate {
	aiau.mutation.Where(ps...)
	return aiau
}

// SetAgencyName sets the "agency_name" field.
func (aiau *AsInnerAgencyUpdate) SetAgencyName(s string) *AsInnerAgencyUpdate {
	aiau.mutation.SetAgencyName(s)
	return aiau
}

// SetAgencyCode sets the "agency_code" field.
func (aiau *AsInnerAgencyUpdate) SetAgencyCode(s string) *AsInnerAgencyUpdate {
	aiau.mutation.SetAgencyCode(s)
	return aiau
}

// SetNillableAgencyCode sets the "agency_code" field if the given value is not nil.
func (aiau *AsInnerAgencyUpdate) SetNillableAgencyCode(s *string) *AsInnerAgencyUpdate {
	if s != nil {
		aiau.SetAgencyCode(*s)
	}
	return aiau
}

// ClearAgencyCode clears the value of the "agency_code" field.
func (aiau *AsInnerAgencyUpdate) ClearAgencyCode() *AsInnerAgencyUpdate {
	aiau.mutation.ClearAgencyCode()
	return aiau
}

// SetTenantCode sets the "tenant_code" field.
func (aiau *AsInnerAgencyUpdate) SetTenantCode(s string) *AsInnerAgencyUpdate {
	aiau.mutation.SetTenantCode(s)
	return aiau
}

// SetParentID sets the "parent_id" field.
func (aiau *AsInnerAgencyUpdate) SetParentID(i int64) *AsInnerAgencyUpdate {
	aiau.mutation.SetParentID(i)
	return aiau
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (aiau *AsInnerAgencyUpdate) SetNillableParentID(i *int64) *AsInnerAgencyUpdate {
	if i != nil {
		aiau.SetParentID(*i)
	}
	return aiau
}

// ClearParentID clears the value of the "parent_id" field.
func (aiau *AsInnerAgencyUpdate) ClearParentID() *AsInnerAgencyUpdate {
	aiau.mutation.ClearParentID()
	return aiau
}

// SetIsDeleted sets the "is_deleted" field.
func (aiau *AsInnerAgencyUpdate) SetIsDeleted(i int64) *AsInnerAgencyUpdate {
	aiau.mutation.ResetIsDeleted()
	aiau.mutation.SetIsDeleted(i)
	return aiau
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (aiau *AsInnerAgencyUpdate) SetNillableIsDeleted(i *int64) *AsInnerAgencyUpdate {
	if i != nil {
		aiau.SetIsDeleted(*i)
	}
	return aiau
}

// AddIsDeleted adds i to the "is_deleted" field.
func (aiau *AsInnerAgencyUpdate) AddIsDeleted(i int64) *AsInnerAgencyUpdate {
	aiau.mutation.AddIsDeleted(i)
	return aiau
}

// SetStatus sets the "status" field.
func (aiau *AsInnerAgencyUpdate) SetStatus(i int64) *AsInnerAgencyUpdate {
	aiau.mutation.ResetStatus()
	aiau.mutation.SetStatus(i)
	return aiau
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (aiau *AsInnerAgencyUpdate) SetNillableStatus(i *int64) *AsInnerAgencyUpdate {
	if i != nil {
		aiau.SetStatus(*i)
	}
	return aiau
}

// AddStatus adds i to the "status" field.
func (aiau *AsInnerAgencyUpdate) AddStatus(i int64) *AsInnerAgencyUpdate {
	aiau.mutation.AddStatus(i)
	return aiau
}

// ClearStatus clears the value of the "status" field.
func (aiau *AsInnerAgencyUpdate) ClearStatus() *AsInnerAgencyUpdate {
	aiau.mutation.ClearStatus()
	return aiau
}

// SetCreateUser sets the "create_user" field.
func (aiau *AsInnerAgencyUpdate) SetCreateUser(i int64) *AsInnerAgencyUpdate {
	aiau.mutation.ResetCreateUser()
	aiau.mutation.SetCreateUser(i)
	return aiau
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (aiau *AsInnerAgencyUpdate) SetNillableCreateUser(i *int64) *AsInnerAgencyUpdate {
	if i != nil {
		aiau.SetCreateUser(*i)
	}
	return aiau
}

// AddCreateUser adds i to the "create_user" field.
func (aiau *AsInnerAgencyUpdate) AddCreateUser(i int64) *AsInnerAgencyUpdate {
	aiau.mutation.AddCreateUser(i)
	return aiau
}

// ClearCreateUser clears the value of the "create_user" field.
func (aiau *AsInnerAgencyUpdate) ClearCreateUser() *AsInnerAgencyUpdate {
	aiau.mutation.ClearCreateUser()
	return aiau
}

// SetUpdateUser sets the "update_user" field.
func (aiau *AsInnerAgencyUpdate) SetUpdateUser(i int64) *AsInnerAgencyUpdate {
	aiau.mutation.ResetUpdateUser()
	aiau.mutation.SetUpdateUser(i)
	return aiau
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (aiau *AsInnerAgencyUpdate) SetNillableUpdateUser(i *int64) *AsInnerAgencyUpdate {
	if i != nil {
		aiau.SetUpdateUser(*i)
	}
	return aiau
}

// AddUpdateUser adds i to the "update_user" field.
func (aiau *AsInnerAgencyUpdate) AddUpdateUser(i int64) *AsInnerAgencyUpdate {
	aiau.mutation.AddUpdateUser(i)
	return aiau
}

// ClearUpdateUser clears the value of the "update_user" field.
func (aiau *AsInnerAgencyUpdate) ClearUpdateUser() *AsInnerAgencyUpdate {
	aiau.mutation.ClearUpdateUser()
	return aiau
}

// SetUpdateTime sets the "update_time" field.
func (aiau *AsInnerAgencyUpdate) SetUpdateTime(dt date.DateTime) *AsInnerAgencyUpdate {
	aiau.mutation.SetUpdateTime(dt)
	return aiau
}

// ClearUpdateTime clears the value of the "update_time" field.
func (aiau *AsInnerAgencyUpdate) ClearUpdateTime() *AsInnerAgencyUpdate {
	aiau.mutation.ClearUpdateTime()
	return aiau
}

// SetParent sets the "parent" edge to the AsInnerAgency entity.
func (aiau *AsInnerAgencyUpdate) SetParent(a *AsInnerAgency) *AsInnerAgencyUpdate {
	return aiau.SetParentID(a.ID)
}

// AddChildrenIDs adds the "childrens" edge to the AsInnerAgency entity by IDs.
func (aiau *AsInnerAgencyUpdate) AddChildrenIDs(ids ...int64) *AsInnerAgencyUpdate {
	aiau.mutation.AddChildrenIDs(ids...)
	return aiau
}

// AddChildrens adds the "childrens" edges to the AsInnerAgency entity.
func (aiau *AsInnerAgencyUpdate) AddChildrens(a ...*AsInnerAgency) *AsInnerAgencyUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aiau.AddChildrenIDs(ids...)
}

// AddJobIDs adds the "jobs" edge to the AsJob entity by IDs.
func (aiau *AsInnerAgencyUpdate) AddJobIDs(ids ...int64) *AsInnerAgencyUpdate {
	aiau.mutation.AddJobIDs(ids...)
	return aiau
}

// AddJobs adds the "jobs" edges to the AsJob entity.
func (aiau *AsInnerAgencyUpdate) AddJobs(a ...*AsJob) *AsInnerAgencyUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aiau.AddJobIDs(ids...)
}

// AddUserIDs adds the "users" edge to the AsUser entity by IDs.
func (aiau *AsInnerAgencyUpdate) AddUserIDs(ids ...int64) *AsInnerAgencyUpdate {
	aiau.mutation.AddUserIDs(ids...)
	return aiau
}

// AddUsers adds the "users" edges to the AsUser entity.
func (aiau *AsInnerAgencyUpdate) AddUsers(a ...*AsUser) *AsInnerAgencyUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aiau.AddUserIDs(ids...)
}

// AddPersonIDs adds the "persons" edge to the AsPerson entity by IDs.
func (aiau *AsInnerAgencyUpdate) AddPersonIDs(ids ...int64) *AsInnerAgencyUpdate {
	aiau.mutation.AddPersonIDs(ids...)
	return aiau
}

// AddPersons adds the "persons" edges to the AsPerson entity.
func (aiau *AsInnerAgencyUpdate) AddPersons(a ...*AsPerson) *AsInnerAgencyUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aiau.AddPersonIDs(ids...)
}

// AddRoleDistribIDs adds the "roleDistribs" edge to the AsMarketRoleDistribution entity by IDs.
func (aiau *AsInnerAgencyUpdate) AddRoleDistribIDs(ids ...int64) *AsInnerAgencyUpdate {
	aiau.mutation.AddRoleDistribIDs(ids...)
	return aiau
}

// AddRoleDistribs adds the "roleDistribs" edges to the AsMarketRoleDistribution entity.
func (aiau *AsInnerAgencyUpdate) AddRoleDistribs(a ...*AsMarketRoleDistribution) *AsInnerAgencyUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aiau.AddRoleDistribIDs(ids...)
}

// Mutation returns the AsInnerAgencyMutation object of the builder.
func (aiau *AsInnerAgencyUpdate) Mutation() *AsInnerAgencyMutation {
	return aiau.mutation
}

// ClearParent clears the "parent" edge to the AsInnerAgency entity.
func (aiau *AsInnerAgencyUpdate) ClearParent() *AsInnerAgencyUpdate {
	aiau.mutation.ClearParent()
	return aiau
}

// ClearChildrens clears all "childrens" edges to the AsInnerAgency entity.
func (aiau *AsInnerAgencyUpdate) ClearChildrens() *AsInnerAgencyUpdate {
	aiau.mutation.ClearChildrens()
	return aiau
}

// RemoveChildrenIDs removes the "childrens" edge to AsInnerAgency entities by IDs.
func (aiau *AsInnerAgencyUpdate) RemoveChildrenIDs(ids ...int64) *AsInnerAgencyUpdate {
	aiau.mutation.RemoveChildrenIDs(ids...)
	return aiau
}

// RemoveChildrens removes "childrens" edges to AsInnerAgency entities.
func (aiau *AsInnerAgencyUpdate) RemoveChildrens(a ...*AsInnerAgency) *AsInnerAgencyUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aiau.RemoveChildrenIDs(ids...)
}

// ClearJobs clears all "jobs" edges to the AsJob entity.
func (aiau *AsInnerAgencyUpdate) ClearJobs() *AsInnerAgencyUpdate {
	aiau.mutation.ClearJobs()
	return aiau
}

// RemoveJobIDs removes the "jobs" edge to AsJob entities by IDs.
func (aiau *AsInnerAgencyUpdate) RemoveJobIDs(ids ...int64) *AsInnerAgencyUpdate {
	aiau.mutation.RemoveJobIDs(ids...)
	return aiau
}

// RemoveJobs removes "jobs" edges to AsJob entities.
func (aiau *AsInnerAgencyUpdate) RemoveJobs(a ...*AsJob) *AsInnerAgencyUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aiau.RemoveJobIDs(ids...)
}

// ClearUsers clears all "users" edges to the AsUser entity.
func (aiau *AsInnerAgencyUpdate) ClearUsers() *AsInnerAgencyUpdate {
	aiau.mutation.ClearUsers()
	return aiau
}

// RemoveUserIDs removes the "users" edge to AsUser entities by IDs.
func (aiau *AsInnerAgencyUpdate) RemoveUserIDs(ids ...int64) *AsInnerAgencyUpdate {
	aiau.mutation.RemoveUserIDs(ids...)
	return aiau
}

// RemoveUsers removes "users" edges to AsUser entities.
func (aiau *AsInnerAgencyUpdate) RemoveUsers(a ...*AsUser) *AsInnerAgencyUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aiau.RemoveUserIDs(ids...)
}

// ClearPersons clears all "persons" edges to the AsPerson entity.
func (aiau *AsInnerAgencyUpdate) ClearPersons() *AsInnerAgencyUpdate {
	aiau.mutation.ClearPersons()
	return aiau
}

// RemovePersonIDs removes the "persons" edge to AsPerson entities by IDs.
func (aiau *AsInnerAgencyUpdate) RemovePersonIDs(ids ...int64) *AsInnerAgencyUpdate {
	aiau.mutation.RemovePersonIDs(ids...)
	return aiau
}

// RemovePersons removes "persons" edges to AsPerson entities.
func (aiau *AsInnerAgencyUpdate) RemovePersons(a ...*AsPerson) *AsInnerAgencyUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aiau.RemovePersonIDs(ids...)
}

// ClearRoleDistribs clears all "roleDistribs" edges to the AsMarketRoleDistribution entity.
func (aiau *AsInnerAgencyUpdate) ClearRoleDistribs() *AsInnerAgencyUpdate {
	aiau.mutation.ClearRoleDistribs()
	return aiau
}

// RemoveRoleDistribIDs removes the "roleDistribs" edge to AsMarketRoleDistribution entities by IDs.
func (aiau *AsInnerAgencyUpdate) RemoveRoleDistribIDs(ids ...int64) *AsInnerAgencyUpdate {
	aiau.mutation.RemoveRoleDistribIDs(ids...)
	return aiau
}

// RemoveRoleDistribs removes "roleDistribs" edges to AsMarketRoleDistribution entities.
func (aiau *AsInnerAgencyUpdate) RemoveRoleDistribs(a ...*AsMarketRoleDistribution) *AsInnerAgencyUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aiau.RemoveRoleDistribIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aiau *AsInnerAgencyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	aiau.defaults()
	if len(aiau.hooks) == 0 {
		affected, err = aiau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsInnerAgencyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aiau.mutation = mutation
			affected, err = aiau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(aiau.hooks) - 1; i >= 0; i-- {
			if aiau.hooks[i] == nil {
				return 0, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = aiau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aiau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (aiau *AsInnerAgencyUpdate) SaveX(ctx context.Context) int {
	affected, err := aiau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aiau *AsInnerAgencyUpdate) Exec(ctx context.Context) error {
	_, err := aiau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aiau *AsInnerAgencyUpdate) ExecX(ctx context.Context) {
	if err := aiau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aiau *AsInnerAgencyUpdate) defaults() {
	if _, ok := aiau.mutation.UpdateTime(); !ok && !aiau.mutation.UpdateTimeCleared() {
		v := asinneragency.UpdateDefaultUpdateTime()
		aiau.mutation.SetUpdateTime(v)
	}
}

func (aiau *AsInnerAgencyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asinneragency.Table,
			Columns: asinneragency.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asinneragency.FieldID,
			},
		},
	}
	if ps := aiau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aiau.mutation.AgencyName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asinneragency.FieldAgencyName,
		})
	}
	if value, ok := aiau.mutation.AgencyCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asinneragency.FieldAgencyCode,
		})
	}
	if aiau.mutation.AgencyCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asinneragency.FieldAgencyCode,
		})
	}
	if value, ok := aiau.mutation.TenantCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asinneragency.FieldTenantCode,
		})
	}
	if value, ok := aiau.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinneragency.FieldIsDeleted,
		})
	}
	if value, ok := aiau.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinneragency.FieldIsDeleted,
		})
	}
	if value, ok := aiau.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinneragency.FieldStatus,
		})
	}
	if value, ok := aiau.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinneragency.FieldStatus,
		})
	}
	if aiau.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asinneragency.FieldStatus,
		})
	}
	if value, ok := aiau.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinneragency.FieldCreateUser,
		})
	}
	if value, ok := aiau.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinneragency.FieldCreateUser,
		})
	}
	if aiau.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asinneragency.FieldCreateUser,
		})
	}
	if value, ok := aiau.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinneragency.FieldUpdateUser,
		})
	}
	if value, ok := aiau.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinneragency.FieldUpdateUser,
		})
	}
	if aiau.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asinneragency.FieldUpdateUser,
		})
	}
	if aiau.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asinneragency.FieldCreateTime,
		})
	}
	if value, ok := aiau.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asinneragency.FieldUpdateTime,
		})
	}
	if aiau.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asinneragency.FieldUpdateTime,
		})
	}
	if aiau.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asinneragency.ParentTable,
			Columns: []string{asinneragency.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asinneragency.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiau.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asinneragency.ParentTable,
			Columns: []string{asinneragency.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asinneragency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aiau.mutation.ChildrensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asinneragency.ChildrensTable,
			Columns: []string{asinneragency.ChildrensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asinneragency.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiau.mutation.RemovedChildrensIDs(); len(nodes) > 0 && !aiau.mutation.ChildrensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asinneragency.ChildrensTable,
			Columns: []string{asinneragency.ChildrensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asinneragency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiau.mutation.ChildrensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asinneragency.ChildrensTable,
			Columns: []string{asinneragency.ChildrensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asinneragency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aiau.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asinneragency.JobsTable,
			Columns: asinneragency.JobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asjob.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiau.mutation.RemovedJobsIDs(); len(nodes) > 0 && !aiau.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asinneragency.JobsTable,
			Columns: asinneragency.JobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asjob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiau.mutation.JobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asinneragency.JobsTable,
			Columns: asinneragency.JobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asjob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aiau.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asinneragency.UsersTable,
			Columns: asinneragency.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiau.mutation.RemovedUsersIDs(); len(nodes) > 0 && !aiau.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asinneragency.UsersTable,
			Columns: asinneragency.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiau.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asinneragency.UsersTable,
			Columns: asinneragency.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aiau.mutation.PersonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asinneragency.PersonsTable,
			Columns: asinneragency.PersonsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asperson.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiau.mutation.RemovedPersonsIDs(); len(nodes) > 0 && !aiau.mutation.PersonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asinneragency.PersonsTable,
			Columns: asinneragency.PersonsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asperson.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiau.mutation.PersonsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asinneragency.PersonsTable,
			Columns: asinneragency.PersonsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asperson.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aiau.mutation.RoleDistribsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asinneragency.RoleDistribsTable,
			Columns: []string{asinneragency.RoleDistribsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketroledistribution.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiau.mutation.RemovedRoleDistribsIDs(); len(nodes) > 0 && !aiau.mutation.RoleDistribsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asinneragency.RoleDistribsTable,
			Columns: []string{asinneragency.RoleDistribsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketroledistribution.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiau.mutation.RoleDistribsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asinneragency.RoleDistribsTable,
			Columns: []string{asinneragency.RoleDistribsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketroledistribution.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aiau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asinneragency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AsInnerAgencyUpdateOne is the builder for updating a single AsInnerAgency entity.
type AsInnerAgencyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AsInnerAgencyMutation
}

// SetAgencyName sets the "agency_name" field.
func (aiauo *AsInnerAgencyUpdateOne) SetAgencyName(s string) *AsInnerAgencyUpdateOne {
	aiauo.mutation.SetAgencyName(s)
	return aiauo
}

// SetAgencyCode sets the "agency_code" field.
func (aiauo *AsInnerAgencyUpdateOne) SetAgencyCode(s string) *AsInnerAgencyUpdateOne {
	aiauo.mutation.SetAgencyCode(s)
	return aiauo
}

// SetNillableAgencyCode sets the "agency_code" field if the given value is not nil.
func (aiauo *AsInnerAgencyUpdateOne) SetNillableAgencyCode(s *string) *AsInnerAgencyUpdateOne {
	if s != nil {
		aiauo.SetAgencyCode(*s)
	}
	return aiauo
}

// ClearAgencyCode clears the value of the "agency_code" field.
func (aiauo *AsInnerAgencyUpdateOne) ClearAgencyCode() *AsInnerAgencyUpdateOne {
	aiauo.mutation.ClearAgencyCode()
	return aiauo
}

// SetTenantCode sets the "tenant_code" field.
func (aiauo *AsInnerAgencyUpdateOne) SetTenantCode(s string) *AsInnerAgencyUpdateOne {
	aiauo.mutation.SetTenantCode(s)
	return aiauo
}

// SetParentID sets the "parent_id" field.
func (aiauo *AsInnerAgencyUpdateOne) SetParentID(i int64) *AsInnerAgencyUpdateOne {
	aiauo.mutation.SetParentID(i)
	return aiauo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (aiauo *AsInnerAgencyUpdateOne) SetNillableParentID(i *int64) *AsInnerAgencyUpdateOne {
	if i != nil {
		aiauo.SetParentID(*i)
	}
	return aiauo
}

// ClearParentID clears the value of the "parent_id" field.
func (aiauo *AsInnerAgencyUpdateOne) ClearParentID() *AsInnerAgencyUpdateOne {
	aiauo.mutation.ClearParentID()
	return aiauo
}

// SetIsDeleted sets the "is_deleted" field.
func (aiauo *AsInnerAgencyUpdateOne) SetIsDeleted(i int64) *AsInnerAgencyUpdateOne {
	aiauo.mutation.ResetIsDeleted()
	aiauo.mutation.SetIsDeleted(i)
	return aiauo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (aiauo *AsInnerAgencyUpdateOne) SetNillableIsDeleted(i *int64) *AsInnerAgencyUpdateOne {
	if i != nil {
		aiauo.SetIsDeleted(*i)
	}
	return aiauo
}

// AddIsDeleted adds i to the "is_deleted" field.
func (aiauo *AsInnerAgencyUpdateOne) AddIsDeleted(i int64) *AsInnerAgencyUpdateOne {
	aiauo.mutation.AddIsDeleted(i)
	return aiauo
}

// SetStatus sets the "status" field.
func (aiauo *AsInnerAgencyUpdateOne) SetStatus(i int64) *AsInnerAgencyUpdateOne {
	aiauo.mutation.ResetStatus()
	aiauo.mutation.SetStatus(i)
	return aiauo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (aiauo *AsInnerAgencyUpdateOne) SetNillableStatus(i *int64) *AsInnerAgencyUpdateOne {
	if i != nil {
		aiauo.SetStatus(*i)
	}
	return aiauo
}

// AddStatus adds i to the "status" field.
func (aiauo *AsInnerAgencyUpdateOne) AddStatus(i int64) *AsInnerAgencyUpdateOne {
	aiauo.mutation.AddStatus(i)
	return aiauo
}

// ClearStatus clears the value of the "status" field.
func (aiauo *AsInnerAgencyUpdateOne) ClearStatus() *AsInnerAgencyUpdateOne {
	aiauo.mutation.ClearStatus()
	return aiauo
}

// SetCreateUser sets the "create_user" field.
func (aiauo *AsInnerAgencyUpdateOne) SetCreateUser(i int64) *AsInnerAgencyUpdateOne {
	aiauo.mutation.ResetCreateUser()
	aiauo.mutation.SetCreateUser(i)
	return aiauo
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (aiauo *AsInnerAgencyUpdateOne) SetNillableCreateUser(i *int64) *AsInnerAgencyUpdateOne {
	if i != nil {
		aiauo.SetCreateUser(*i)
	}
	return aiauo
}

// AddCreateUser adds i to the "create_user" field.
func (aiauo *AsInnerAgencyUpdateOne) AddCreateUser(i int64) *AsInnerAgencyUpdateOne {
	aiauo.mutation.AddCreateUser(i)
	return aiauo
}

// ClearCreateUser clears the value of the "create_user" field.
func (aiauo *AsInnerAgencyUpdateOne) ClearCreateUser() *AsInnerAgencyUpdateOne {
	aiauo.mutation.ClearCreateUser()
	return aiauo
}

// SetUpdateUser sets the "update_user" field.
func (aiauo *AsInnerAgencyUpdateOne) SetUpdateUser(i int64) *AsInnerAgencyUpdateOne {
	aiauo.mutation.ResetUpdateUser()
	aiauo.mutation.SetUpdateUser(i)
	return aiauo
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (aiauo *AsInnerAgencyUpdateOne) SetNillableUpdateUser(i *int64) *AsInnerAgencyUpdateOne {
	if i != nil {
		aiauo.SetUpdateUser(*i)
	}
	return aiauo
}

// AddUpdateUser adds i to the "update_user" field.
func (aiauo *AsInnerAgencyUpdateOne) AddUpdateUser(i int64) *AsInnerAgencyUpdateOne {
	aiauo.mutation.AddUpdateUser(i)
	return aiauo
}

// ClearUpdateUser clears the value of the "update_user" field.
func (aiauo *AsInnerAgencyUpdateOne) ClearUpdateUser() *AsInnerAgencyUpdateOne {
	aiauo.mutation.ClearUpdateUser()
	return aiauo
}

// SetUpdateTime sets the "update_time" field.
func (aiauo *AsInnerAgencyUpdateOne) SetUpdateTime(dt date.DateTime) *AsInnerAgencyUpdateOne {
	aiauo.mutation.SetUpdateTime(dt)
	return aiauo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (aiauo *AsInnerAgencyUpdateOne) ClearUpdateTime() *AsInnerAgencyUpdateOne {
	aiauo.mutation.ClearUpdateTime()
	return aiauo
}

// SetParent sets the "parent" edge to the AsInnerAgency entity.
func (aiauo *AsInnerAgencyUpdateOne) SetParent(a *AsInnerAgency) *AsInnerAgencyUpdateOne {
	return aiauo.SetParentID(a.ID)
}

// AddChildrenIDs adds the "childrens" edge to the AsInnerAgency entity by IDs.
func (aiauo *AsInnerAgencyUpdateOne) AddChildrenIDs(ids ...int64) *AsInnerAgencyUpdateOne {
	aiauo.mutation.AddChildrenIDs(ids...)
	return aiauo
}

// AddChildrens adds the "childrens" edges to the AsInnerAgency entity.
func (aiauo *AsInnerAgencyUpdateOne) AddChildrens(a ...*AsInnerAgency) *AsInnerAgencyUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aiauo.AddChildrenIDs(ids...)
}

// AddJobIDs adds the "jobs" edge to the AsJob entity by IDs.
func (aiauo *AsInnerAgencyUpdateOne) AddJobIDs(ids ...int64) *AsInnerAgencyUpdateOne {
	aiauo.mutation.AddJobIDs(ids...)
	return aiauo
}

// AddJobs adds the "jobs" edges to the AsJob entity.
func (aiauo *AsInnerAgencyUpdateOne) AddJobs(a ...*AsJob) *AsInnerAgencyUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aiauo.AddJobIDs(ids...)
}

// AddUserIDs adds the "users" edge to the AsUser entity by IDs.
func (aiauo *AsInnerAgencyUpdateOne) AddUserIDs(ids ...int64) *AsInnerAgencyUpdateOne {
	aiauo.mutation.AddUserIDs(ids...)
	return aiauo
}

// AddUsers adds the "users" edges to the AsUser entity.
func (aiauo *AsInnerAgencyUpdateOne) AddUsers(a ...*AsUser) *AsInnerAgencyUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aiauo.AddUserIDs(ids...)
}

// AddPersonIDs adds the "persons" edge to the AsPerson entity by IDs.
func (aiauo *AsInnerAgencyUpdateOne) AddPersonIDs(ids ...int64) *AsInnerAgencyUpdateOne {
	aiauo.mutation.AddPersonIDs(ids...)
	return aiauo
}

// AddPersons adds the "persons" edges to the AsPerson entity.
func (aiauo *AsInnerAgencyUpdateOne) AddPersons(a ...*AsPerson) *AsInnerAgencyUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aiauo.AddPersonIDs(ids...)
}

// AddRoleDistribIDs adds the "roleDistribs" edge to the AsMarketRoleDistribution entity by IDs.
func (aiauo *AsInnerAgencyUpdateOne) AddRoleDistribIDs(ids ...int64) *AsInnerAgencyUpdateOne {
	aiauo.mutation.AddRoleDistribIDs(ids...)
	return aiauo
}

// AddRoleDistribs adds the "roleDistribs" edges to the AsMarketRoleDistribution entity.
func (aiauo *AsInnerAgencyUpdateOne) AddRoleDistribs(a ...*AsMarketRoleDistribution) *AsInnerAgencyUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aiauo.AddRoleDistribIDs(ids...)
}

// Mutation returns the AsInnerAgencyMutation object of the builder.
func (aiauo *AsInnerAgencyUpdateOne) Mutation() *AsInnerAgencyMutation {
	return aiauo.mutation
}

// ClearParent clears the "parent" edge to the AsInnerAgency entity.
func (aiauo *AsInnerAgencyUpdateOne) ClearParent() *AsInnerAgencyUpdateOne {
	aiauo.mutation.ClearParent()
	return aiauo
}

// ClearChildrens clears all "childrens" edges to the AsInnerAgency entity.
func (aiauo *AsInnerAgencyUpdateOne) ClearChildrens() *AsInnerAgencyUpdateOne {
	aiauo.mutation.ClearChildrens()
	return aiauo
}

// RemoveChildrenIDs removes the "childrens" edge to AsInnerAgency entities by IDs.
func (aiauo *AsInnerAgencyUpdateOne) RemoveChildrenIDs(ids ...int64) *AsInnerAgencyUpdateOne {
	aiauo.mutation.RemoveChildrenIDs(ids...)
	return aiauo
}

// RemoveChildrens removes "childrens" edges to AsInnerAgency entities.
func (aiauo *AsInnerAgencyUpdateOne) RemoveChildrens(a ...*AsInnerAgency) *AsInnerAgencyUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aiauo.RemoveChildrenIDs(ids...)
}

// ClearJobs clears all "jobs" edges to the AsJob entity.
func (aiauo *AsInnerAgencyUpdateOne) ClearJobs() *AsInnerAgencyUpdateOne {
	aiauo.mutation.ClearJobs()
	return aiauo
}

// RemoveJobIDs removes the "jobs" edge to AsJob entities by IDs.
func (aiauo *AsInnerAgencyUpdateOne) RemoveJobIDs(ids ...int64) *AsInnerAgencyUpdateOne {
	aiauo.mutation.RemoveJobIDs(ids...)
	return aiauo
}

// RemoveJobs removes "jobs" edges to AsJob entities.
func (aiauo *AsInnerAgencyUpdateOne) RemoveJobs(a ...*AsJob) *AsInnerAgencyUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aiauo.RemoveJobIDs(ids...)
}

// ClearUsers clears all "users" edges to the AsUser entity.
func (aiauo *AsInnerAgencyUpdateOne) ClearUsers() *AsInnerAgencyUpdateOne {
	aiauo.mutation.ClearUsers()
	return aiauo
}

// RemoveUserIDs removes the "users" edge to AsUser entities by IDs.
func (aiauo *AsInnerAgencyUpdateOne) RemoveUserIDs(ids ...int64) *AsInnerAgencyUpdateOne {
	aiauo.mutation.RemoveUserIDs(ids...)
	return aiauo
}

// RemoveUsers removes "users" edges to AsUser entities.
func (aiauo *AsInnerAgencyUpdateOne) RemoveUsers(a ...*AsUser) *AsInnerAgencyUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aiauo.RemoveUserIDs(ids...)
}

// ClearPersons clears all "persons" edges to the AsPerson entity.
func (aiauo *AsInnerAgencyUpdateOne) ClearPersons() *AsInnerAgencyUpdateOne {
	aiauo.mutation.ClearPersons()
	return aiauo
}

// RemovePersonIDs removes the "persons" edge to AsPerson entities by IDs.
func (aiauo *AsInnerAgencyUpdateOne) RemovePersonIDs(ids ...int64) *AsInnerAgencyUpdateOne {
	aiauo.mutation.RemovePersonIDs(ids...)
	return aiauo
}

// RemovePersons removes "persons" edges to AsPerson entities.
func (aiauo *AsInnerAgencyUpdateOne) RemovePersons(a ...*AsPerson) *AsInnerAgencyUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aiauo.RemovePersonIDs(ids...)
}

// ClearRoleDistribs clears all "roleDistribs" edges to the AsMarketRoleDistribution entity.
func (aiauo *AsInnerAgencyUpdateOne) ClearRoleDistribs() *AsInnerAgencyUpdateOne {
	aiauo.mutation.ClearRoleDistribs()
	return aiauo
}

// RemoveRoleDistribIDs removes the "roleDistribs" edge to AsMarketRoleDistribution entities by IDs.
func (aiauo *AsInnerAgencyUpdateOne) RemoveRoleDistribIDs(ids ...int64) *AsInnerAgencyUpdateOne {
	aiauo.mutation.RemoveRoleDistribIDs(ids...)
	return aiauo
}

// RemoveRoleDistribs removes "roleDistribs" edges to AsMarketRoleDistribution entities.
func (aiauo *AsInnerAgencyUpdateOne) RemoveRoleDistribs(a ...*AsMarketRoleDistribution) *AsInnerAgencyUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aiauo.RemoveRoleDistribIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aiauo *AsInnerAgencyUpdateOne) Select(field string, fields ...string) *AsInnerAgencyUpdateOne {
	aiauo.fields = append([]string{field}, fields...)
	return aiauo
}

// Save executes the query and returns the updated AsInnerAgency entity.
func (aiauo *AsInnerAgencyUpdateOne) Save(ctx context.Context) (*AsInnerAgency, error) {
	var (
		err  error
		node *AsInnerAgency
	)
	aiauo.defaults()
	if len(aiauo.hooks) == 0 {
		node, err = aiauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsInnerAgencyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aiauo.mutation = mutation
			node, err = aiauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aiauo.hooks) - 1; i >= 0; i-- {
			if aiauo.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = aiauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aiauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aiauo *AsInnerAgencyUpdateOne) SaveX(ctx context.Context) *AsInnerAgency {
	node, err := aiauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aiauo *AsInnerAgencyUpdateOne) Exec(ctx context.Context) error {
	_, err := aiauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aiauo *AsInnerAgencyUpdateOne) ExecX(ctx context.Context) {
	if err := aiauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aiauo *AsInnerAgencyUpdateOne) defaults() {
	if _, ok := aiauo.mutation.UpdateTime(); !ok && !aiauo.mutation.UpdateTimeCleared() {
		v := asinneragency.UpdateDefaultUpdateTime()
		aiauo.mutation.SetUpdateTime(v)
	}
}

func (aiauo *AsInnerAgencyUpdateOne) sqlSave(ctx context.Context) (_node *AsInnerAgency, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asinneragency.Table,
			Columns: asinneragency.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asinneragency.FieldID,
			},
		},
	}
	id, ok := aiauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`schema: missing "AsInnerAgency.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aiauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asinneragency.FieldID)
		for _, f := range fields {
			if !asinneragency.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("schema: invalid field %q for query", f)}
			}
			if f != asinneragency.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aiauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aiauo.mutation.AgencyName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asinneragency.FieldAgencyName,
		})
	}
	if value, ok := aiauo.mutation.AgencyCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asinneragency.FieldAgencyCode,
		})
	}
	if aiauo.mutation.AgencyCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asinneragency.FieldAgencyCode,
		})
	}
	if value, ok := aiauo.mutation.TenantCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asinneragency.FieldTenantCode,
		})
	}
	if value, ok := aiauo.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinneragency.FieldIsDeleted,
		})
	}
	if value, ok := aiauo.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinneragency.FieldIsDeleted,
		})
	}
	if value, ok := aiauo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinneragency.FieldStatus,
		})
	}
	if value, ok := aiauo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinneragency.FieldStatus,
		})
	}
	if aiauo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asinneragency.FieldStatus,
		})
	}
	if value, ok := aiauo.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinneragency.FieldCreateUser,
		})
	}
	if value, ok := aiauo.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinneragency.FieldCreateUser,
		})
	}
	if aiauo.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asinneragency.FieldCreateUser,
		})
	}
	if value, ok := aiauo.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinneragency.FieldUpdateUser,
		})
	}
	if value, ok := aiauo.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asinneragency.FieldUpdateUser,
		})
	}
	if aiauo.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asinneragency.FieldUpdateUser,
		})
	}
	if aiauo.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asinneragency.FieldCreateTime,
		})
	}
	if value, ok := aiauo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asinneragency.FieldUpdateTime,
		})
	}
	if aiauo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asinneragency.FieldUpdateTime,
		})
	}
	if aiauo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asinneragency.ParentTable,
			Columns: []string{asinneragency.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asinneragency.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiauo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asinneragency.ParentTable,
			Columns: []string{asinneragency.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asinneragency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aiauo.mutation.ChildrensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asinneragency.ChildrensTable,
			Columns: []string{asinneragency.ChildrensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asinneragency.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiauo.mutation.RemovedChildrensIDs(); len(nodes) > 0 && !aiauo.mutation.ChildrensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asinneragency.ChildrensTable,
			Columns: []string{asinneragency.ChildrensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asinneragency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiauo.mutation.ChildrensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asinneragency.ChildrensTable,
			Columns: []string{asinneragency.ChildrensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asinneragency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aiauo.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asinneragency.JobsTable,
			Columns: asinneragency.JobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asjob.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiauo.mutation.RemovedJobsIDs(); len(nodes) > 0 && !aiauo.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asinneragency.JobsTable,
			Columns: asinneragency.JobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asjob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiauo.mutation.JobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asinneragency.JobsTable,
			Columns: asinneragency.JobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asjob.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aiauo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asinneragency.UsersTable,
			Columns: asinneragency.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiauo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !aiauo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asinneragency.UsersTable,
			Columns: asinneragency.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiauo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asinneragency.UsersTable,
			Columns: asinneragency.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aiauo.mutation.PersonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asinneragency.PersonsTable,
			Columns: asinneragency.PersonsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asperson.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiauo.mutation.RemovedPersonsIDs(); len(nodes) > 0 && !aiauo.mutation.PersonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asinneragency.PersonsTable,
			Columns: asinneragency.PersonsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asperson.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiauo.mutation.PersonsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asinneragency.PersonsTable,
			Columns: asinneragency.PersonsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asperson.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aiauo.mutation.RoleDistribsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asinneragency.RoleDistribsTable,
			Columns: []string{asinneragency.RoleDistribsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketroledistribution.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiauo.mutation.RemovedRoleDistribsIDs(); len(nodes) > 0 && !aiauo.mutation.RoleDistribsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asinneragency.RoleDistribsTable,
			Columns: []string{asinneragency.RoleDistribsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketroledistribution.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiauo.mutation.RoleDistribsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asinneragency.RoleDistribsTable,
			Columns: []string{asinneragency.RoleDistribsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketroledistribution.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AsInnerAgency{config: aiauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aiauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asinneragency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
