// Code generated by entc, DO NOT EDIT.

package schema

import (
	"fmt"
	"orginone/common/schema/asmarketapp"
	"orginone/common/schema/asmarketapprole"
	"orginone/common/tools/date"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// AsMarketAppRole is the model entity for the AsMarketAppRole schema.
type AsMarketAppRole struct {
	config `json:"-"`
	// ID of the ent.
	// 主键
	ID int64 `json:"id,string"`
	// RoleName holds the value of the "role_name" field.
	// 角色名称
	RoleName string `json:"roleName"`
	// AppID holds the value of the "app_id" field.
	// 应用主键
	AppID int64 `json:"appId,string"`
	// IsDeleted holds the value of the "is_deleted" field.
	// 是否被删除
	IsDeleted int64 `json:"isDeleted"`
	// Status holds the value of the "status" field.
	// 状态
	Status int64 `json:"status"`
	// CreateUser holds the value of the "create_user" field.
	// 创建用户
	CreateUser int64 `json:"createUser"`
	// UpdateUser holds the value of the "update_user" field.
	// 更新用户
	UpdateUser int64 `json:"updateUser"`
	// CreateTime holds the value of the "create_time" field.
	// 创建时间
	CreateTime date.DateTime `json:"createTime"`
	// UpdateTime holds the value of the "update_time" field.
	// 更新时间
	UpdateTime date.DateTime `json:"updateTime"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AsMarketAppRoleQuery when eager-loading is set.
	Edges AsMarketAppRoleEdges `json:"edges"`
}

// AsMarketAppRoleEdges holds the relations/edges for other nodes in the graph.
type AsMarketAppRoleEdges struct {
	// RoleDistribs holds the value of the roleDistribs edge.
	RoleDistribs []*AsMarketRoleDistribution `json:"roledistribs"`
	// RoleMenus holds the value of the roleMenus edge.
	RoleMenus []*AsMarketRoleMenu `json:"rolemenus"`
	// Menus holds the value of the menus edge.
	Menus []*AsMarketMenu `json:"menus"`
	// Appx holds the value of the appx edge.
	Appx *AsMarketApp `json:"appx"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// RoleDistribsOrErr returns the RoleDistribs value or an error if the edge
// was not loaded in eager-loading.
func (e AsMarketAppRoleEdges) RoleDistribsOrErr() ([]*AsMarketRoleDistribution, error) {
	if e.loadedTypes[0] {
		return e.RoleDistribs, nil
	}
	return nil, &NotLoadedError{edge: "roleDistribs"}
}

// RoleMenusOrErr returns the RoleMenus value or an error if the edge
// was not loaded in eager-loading.
func (e AsMarketAppRoleEdges) RoleMenusOrErr() ([]*AsMarketRoleMenu, error) {
	if e.loadedTypes[1] {
		return e.RoleMenus, nil
	}
	return nil, &NotLoadedError{edge: "roleMenus"}
}

// MenusOrErr returns the Menus value or an error if the edge
// was not loaded in eager-loading.
func (e AsMarketAppRoleEdges) MenusOrErr() ([]*AsMarketMenu, error) {
	if e.loadedTypes[2] {
		return e.Menus, nil
	}
	return nil, &NotLoadedError{edge: "menus"}
}

// AppxOrErr returns the Appx value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AsMarketAppRoleEdges) AppxOrErr() (*AsMarketApp, error) {
	if e.loadedTypes[3] {
		if e.Appx == nil {
			// The edge appx was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: asmarketapp.Label}
		}
		return e.Appx, nil
	}
	return nil, &NotLoadedError{edge: "appx"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AsMarketAppRole) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case asmarketapprole.FieldID, asmarketapprole.FieldAppID, asmarketapprole.FieldIsDeleted, asmarketapprole.FieldStatus, asmarketapprole.FieldCreateUser, asmarketapprole.FieldUpdateUser:
			values[i] = new(sql.NullInt64)
		case asmarketapprole.FieldRoleName:
			values[i] = new(sql.NullString)
		case asmarketapprole.FieldCreateTime, asmarketapprole.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AsMarketAppRole", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AsMarketAppRole fields.
func (amar *AsMarketAppRole) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case asmarketapprole.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			amar.ID = int64(value.Int64)
		case asmarketapprole.FieldRoleName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role_name", values[i])
			} else if value.Valid {
				amar.RoleName = value.String
			}
		case asmarketapprole.FieldAppID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				amar.AppID = value.Int64
			}
		case asmarketapprole.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				amar.IsDeleted = value.Int64
			}
		case asmarketapprole.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				amar.Status = value.Int64
			}
		case asmarketapprole.FieldCreateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_user", values[i])
			} else if value.Valid {
				amar.CreateUser = value.Int64
			}
		case asmarketapprole.FieldUpdateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_user", values[i])
			} else if value.Valid {
				amar.UpdateUser = value.Int64
			}
		case asmarketapprole.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				amar.CreateTime = date.DateTime(value.Time)
			}
		case asmarketapprole.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				amar.UpdateTime = date.DateTime(value.Time)
			}
		}
	}
	return nil
}

// QueryRoleDistribs queries the "roleDistribs" edge of the AsMarketAppRole entity.
func (amar *AsMarketAppRole) QueryRoleDistribs() *AsMarketRoleDistributionQuery {
	return (&AsMarketAppRoleClient{config: amar.config}).QueryRoleDistribs(amar)
}

// QueryRoleMenus queries the "roleMenus" edge of the AsMarketAppRole entity.
func (amar *AsMarketAppRole) QueryRoleMenus() *AsMarketRoleMenuQuery {
	return (&AsMarketAppRoleClient{config: amar.config}).QueryRoleMenus(amar)
}

// QueryMenus queries the "menus" edge of the AsMarketAppRole entity.
func (amar *AsMarketAppRole) QueryMenus() *AsMarketMenuQuery {
	return (&AsMarketAppRoleClient{config: amar.config}).QueryMenus(amar)
}

// QueryAppx queries the "appx" edge of the AsMarketAppRole entity.
func (amar *AsMarketAppRole) QueryAppx() *AsMarketAppQuery {
	return (&AsMarketAppRoleClient{config: amar.config}).QueryAppx(amar)
}

// Update returns a builder for updating this AsMarketAppRole.
// Note that you need to call AsMarketAppRole.Unwrap() before calling this method if this AsMarketAppRole
// was returned from a transaction, and the transaction was committed or rolled back.
func (amar *AsMarketAppRole) Update() *AsMarketAppRoleUpdateOne {
	return (&AsMarketAppRoleClient{config: amar.config}).UpdateOne(amar)
}

// Unwrap unwraps the AsMarketAppRole entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (amar *AsMarketAppRole) Unwrap() *AsMarketAppRole {
	tx, ok := amar.config.driver.(*txDriver)
	if !ok {
		panic("schema: AsMarketAppRole is not a transactional entity")
	}
	amar.config.driver = tx.drv
	return amar
}

// String implements the fmt.Stringer.
func (amar *AsMarketAppRole) String() string {
	var builder strings.Builder
	builder.WriteString("AsMarketAppRole(")
	builder.WriteString(fmt.Sprintf("id=%v", amar.ID))
	builder.WriteString(", role_name=")
	builder.WriteString(amar.RoleName)
	builder.WriteString(", app_id=")
	builder.WriteString(fmt.Sprintf("%v", amar.AppID))
	builder.WriteString(", is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", amar.IsDeleted))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", amar.Status))
	builder.WriteString(", create_user=")
	builder.WriteString(fmt.Sprintf("%v", amar.CreateUser))
	builder.WriteString(", update_user=")
	builder.WriteString(fmt.Sprintf("%v", amar.UpdateUser))
	builder.WriteString(", create_time=")
	builder.WriteString(fmt.Sprintf("%v", amar.CreateTime))
	builder.WriteString(", update_time=")
	builder.WriteString(fmt.Sprintf("%v", amar.UpdateTime))
	builder.WriteByte(')')
	return builder.String()
}

// AsMarketAppRoles is a parsable slice of AsMarketAppRole.
type AsMarketAppRoles []*AsMarketAppRole

func (amar AsMarketAppRoles) config(cfg config) {
	for _i := range amar {
		amar[_i].config = cfg
	}
}
