// Code generated by entc, DO NOT EDIT.

package schema

import (
	"fmt"
	"orginone/common/schema/asallgroup"
	"orginone/common/schema/asmarketapp"
	"orginone/common/schema/asmarketapppurchase"
	"orginone/common/tools/date"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// AsMarketAppPurchase is the model entity for the AsMarketAppPurchase schema.
type AsMarketAppPurchase struct {
	config `json:"-"`
	// ID of the ent.
	// 主键
	ID int64 `json:"id,string"`
	// AppID holds the value of the "app_id" field.
	// 应用主键
	AppID int64 `json:"appId"`
	// TenantID holds the value of the "tenant_id" field.
	// 租户id
	TenantID string `json:"tenantId"`
	// GroupID holds the value of the "group_id" field.
	// 集团id
	GroupID int64 `json:"groupId"`
	// UseStatus holds the value of the "use_status" field.
	// 0;停用;1;启用
	UseStatus int64 `json:"useStatus"`
	// Remark holds the value of the "remark" field.
	// 备注
	Remark string `json:"remark"`
	// IsDeleted holds the value of the "is_deleted" field.
	// 是否被删除
	IsDeleted int64 `json:"isDeleted"`
	// Status holds the value of the "status" field.
	// 状态
	Status int64 `json:"status"`
	// CreateUser holds the value of the "create_user" field.
	// 创建用户
	CreateUser int64 `json:"createUser"`
	// UpdateUser holds the value of the "update_user" field.
	// 更新用户
	UpdateUser int64 `json:"updateUser"`
	// CreateTime holds the value of the "create_time" field.
	// 创建时间
	CreateTime date.DateTime `json:"createTime"`
	// UpdateTime holds the value of the "update_time" field.
	// 更新时间
	UpdateTime date.DateTime `json:"updateTime"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AsMarketAppPurchaseQuery when eager-loading is set.
	Edges AsMarketAppPurchaseEdges `json:"edges"`
}

// AsMarketAppPurchaseEdges holds the relations/edges for other nodes in the graph.
type AsMarketAppPurchaseEdges struct {
	// Appx holds the value of the appx edge.
	Appx *AsMarketApp `json:"appx"`
	// Groupx holds the value of the groupx edge.
	Groupx *AsAllGroup `json:"groupx"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AppxOrErr returns the Appx value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AsMarketAppPurchaseEdges) AppxOrErr() (*AsMarketApp, error) {
	if e.loadedTypes[0] {
		if e.Appx == nil {
			// The edge appx was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: asmarketapp.Label}
		}
		return e.Appx, nil
	}
	return nil, &NotLoadedError{edge: "appx"}
}

// GroupxOrErr returns the Groupx value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AsMarketAppPurchaseEdges) GroupxOrErr() (*AsAllGroup, error) {
	if e.loadedTypes[1] {
		if e.Groupx == nil {
			// The edge groupx was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: asallgroup.Label}
		}
		return e.Groupx, nil
	}
	return nil, &NotLoadedError{edge: "groupx"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AsMarketAppPurchase) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case asmarketapppurchase.FieldID, asmarketapppurchase.FieldAppID, asmarketapppurchase.FieldGroupID, asmarketapppurchase.FieldUseStatus, asmarketapppurchase.FieldIsDeleted, asmarketapppurchase.FieldStatus, asmarketapppurchase.FieldCreateUser, asmarketapppurchase.FieldUpdateUser:
			values[i] = new(sql.NullInt64)
		case asmarketapppurchase.FieldTenantID, asmarketapppurchase.FieldRemark:
			values[i] = new(sql.NullString)
		case asmarketapppurchase.FieldCreateTime, asmarketapppurchase.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AsMarketAppPurchase", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AsMarketAppPurchase fields.
func (amap *AsMarketAppPurchase) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case asmarketapppurchase.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			amap.ID = int64(value.Int64)
		case asmarketapppurchase.FieldAppID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				amap.AppID = value.Int64
			}
		case asmarketapppurchase.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				amap.TenantID = value.String
			}
		case asmarketapppurchase.FieldGroupID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field group_id", values[i])
			} else if value.Valid {
				amap.GroupID = value.Int64
			}
		case asmarketapppurchase.FieldUseStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field use_status", values[i])
			} else if value.Valid {
				amap.UseStatus = value.Int64
			}
		case asmarketapppurchase.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				amap.Remark = value.String
			}
		case asmarketapppurchase.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				amap.IsDeleted = value.Int64
			}
		case asmarketapppurchase.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				amap.Status = value.Int64
			}
		case asmarketapppurchase.FieldCreateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_user", values[i])
			} else if value.Valid {
				amap.CreateUser = value.Int64
			}
		case asmarketapppurchase.FieldUpdateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_user", values[i])
			} else if value.Valid {
				amap.UpdateUser = value.Int64
			}
		case asmarketapppurchase.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				amap.CreateTime = date.DateTime(value.Time)
			}
		case asmarketapppurchase.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				amap.UpdateTime = date.DateTime(value.Time)
			}
		}
	}
	return nil
}

// QueryAppx queries the "appx" edge of the AsMarketAppPurchase entity.
func (amap *AsMarketAppPurchase) QueryAppx() *AsMarketAppQuery {
	return (&AsMarketAppPurchaseClient{config: amap.config}).QueryAppx(amap)
}

// QueryGroupx queries the "groupx" edge of the AsMarketAppPurchase entity.
func (amap *AsMarketAppPurchase) QueryGroupx() *AsAllGroupQuery {
	return (&AsMarketAppPurchaseClient{config: amap.config}).QueryGroupx(amap)
}

// Update returns a builder for updating this AsMarketAppPurchase.
// Note that you need to call AsMarketAppPurchase.Unwrap() before calling this method if this AsMarketAppPurchase
// was returned from a transaction, and the transaction was committed or rolled back.
func (amap *AsMarketAppPurchase) Update() *AsMarketAppPurchaseUpdateOne {
	return (&AsMarketAppPurchaseClient{config: amap.config}).UpdateOne(amap)
}

// Unwrap unwraps the AsMarketAppPurchase entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (amap *AsMarketAppPurchase) Unwrap() *AsMarketAppPurchase {
	tx, ok := amap.config.driver.(*txDriver)
	if !ok {
		panic("schema: AsMarketAppPurchase is not a transactional entity")
	}
	amap.config.driver = tx.drv
	return amap
}

// String implements the fmt.Stringer.
func (amap *AsMarketAppPurchase) String() string {
	var builder strings.Builder
	builder.WriteString("AsMarketAppPurchase(")
	builder.WriteString(fmt.Sprintf("id=%v", amap.ID))
	builder.WriteString(", app_id=")
	builder.WriteString(fmt.Sprintf("%v", amap.AppID))
	builder.WriteString(", tenant_id=")
	builder.WriteString(amap.TenantID)
	builder.WriteString(", group_id=")
	builder.WriteString(fmt.Sprintf("%v", amap.GroupID))
	builder.WriteString(", use_status=")
	builder.WriteString(fmt.Sprintf("%v", amap.UseStatus))
	builder.WriteString(", remark=")
	builder.WriteString(amap.Remark)
	builder.WriteString(", is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", amap.IsDeleted))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", amap.Status))
	builder.WriteString(", create_user=")
	builder.WriteString(fmt.Sprintf("%v", amap.CreateUser))
	builder.WriteString(", update_user=")
	builder.WriteString(fmt.Sprintf("%v", amap.UpdateUser))
	builder.WriteString(", create_time=")
	builder.WriteString(fmt.Sprintf("%v", amap.CreateTime))
	builder.WriteString(", update_time=")
	builder.WriteString(fmt.Sprintf("%v", amap.UpdateTime))
	builder.WriteByte(')')
	return builder.String()
}

// AsMarketAppPurchases is a parsable slice of AsMarketAppPurchase.
type AsMarketAppPurchases []*AsMarketAppPurchase

func (amap AsMarketAppPurchases) config(cfg config) {
	for _i := range amap {
		amap[_i].config = cfg
	}
}
