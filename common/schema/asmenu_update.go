// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/asmenu"
	"orginone/common/schema/asrole"
	"orginone/common/schema/predicate"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsMenuUpdate is the builder for updating AsMenu entities.
type AsMenuUpdate struct {
	config
	hooks    []Hook
	mutation *AsMenuMutation
}

// Where appends a list predicates to the AsMenuUpdate builder.
func (amu *AsMenuUpdate) Where(ps ...predicate.AsMenu) *AsMenuUpdate {
	amu.mutation.Where(ps...)
	return amu
}

// SetParentID sets the "parent_id" field.
func (amu *AsMenuUpdate) SetParentID(i int64) *AsMenuUpdate {
	amu.mutation.SetParentID(i)
	return amu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (amu *AsMenuUpdate) SetNillableParentID(i *int64) *AsMenuUpdate {
	if i != nil {
		amu.SetParentID(*i)
	}
	return amu
}

// ClearParentID clears the value of the "parent_id" field.
func (amu *AsMenuUpdate) ClearParentID() *AsMenuUpdate {
	amu.mutation.ClearParentID()
	return amu
}

// SetName sets the "name" field.
func (amu *AsMenuUpdate) SetName(s string) *AsMenuUpdate {
	amu.mutation.SetName(s)
	return amu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (amu *AsMenuUpdate) SetNillableName(s *string) *AsMenuUpdate {
	if s != nil {
		amu.SetName(*s)
	}
	return amu
}

// ClearName clears the value of the "name" field.
func (amu *AsMenuUpdate) ClearName() *AsMenuUpdate {
	amu.mutation.ClearName()
	return amu
}

// SetAlias sets the "alias" field.
func (amu *AsMenuUpdate) SetAlias(s string) *AsMenuUpdate {
	amu.mutation.SetAlias(s)
	return amu
}

// SetNillableAlias sets the "alias" field if the given value is not nil.
func (amu *AsMenuUpdate) SetNillableAlias(s *string) *AsMenuUpdate {
	if s != nil {
		amu.SetAlias(*s)
	}
	return amu
}

// ClearAlias clears the value of the "alias" field.
func (amu *AsMenuUpdate) ClearAlias() *AsMenuUpdate {
	amu.mutation.ClearAlias()
	return amu
}

// SetPath sets the "path" field.
func (amu *AsMenuUpdate) SetPath(s string) *AsMenuUpdate {
	amu.mutation.SetPath(s)
	return amu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (amu *AsMenuUpdate) SetNillablePath(s *string) *AsMenuUpdate {
	if s != nil {
		amu.SetPath(*s)
	}
	return amu
}

// ClearPath clears the value of the "path" field.
func (amu *AsMenuUpdate) ClearPath() *AsMenuUpdate {
	amu.mutation.ClearPath()
	return amu
}

// SetIcon sets the "icon" field.
func (amu *AsMenuUpdate) SetIcon(s string) *AsMenuUpdate {
	amu.mutation.SetIcon(s)
	return amu
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (amu *AsMenuUpdate) SetNillableIcon(s *string) *AsMenuUpdate {
	if s != nil {
		amu.SetIcon(*s)
	}
	return amu
}

// ClearIcon clears the value of the "icon" field.
func (amu *AsMenuUpdate) ClearIcon() *AsMenuUpdate {
	amu.mutation.ClearIcon()
	return amu
}

// SetSort sets the "sort" field.
func (amu *AsMenuUpdate) SetSort(i int64) *AsMenuUpdate {
	amu.mutation.ResetSort()
	amu.mutation.SetSort(i)
	return amu
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (amu *AsMenuUpdate) SetNillableSort(i *int64) *AsMenuUpdate {
	if i != nil {
		amu.SetSort(*i)
	}
	return amu
}

// AddSort adds i to the "sort" field.
func (amu *AsMenuUpdate) AddSort(i int64) *AsMenuUpdate {
	amu.mutation.AddSort(i)
	return amu
}

// ClearSort clears the value of the "sort" field.
func (amu *AsMenuUpdate) ClearSort() *AsMenuUpdate {
	amu.mutation.ClearSort()
	return amu
}

// SetCategory sets the "category" field.
func (amu *AsMenuUpdate) SetCategory(i int64) *AsMenuUpdate {
	amu.mutation.ResetCategory()
	amu.mutation.SetCategory(i)
	return amu
}

// AddCategory adds i to the "category" field.
func (amu *AsMenuUpdate) AddCategory(i int64) *AsMenuUpdate {
	amu.mutation.AddCategory(i)
	return amu
}

// SetIsOpen sets the "is_open" field.
func (amu *AsMenuUpdate) SetIsOpen(i int64) *AsMenuUpdate {
	amu.mutation.ResetIsOpen()
	amu.mutation.SetIsOpen(i)
	return amu
}

// SetNillableIsOpen sets the "is_open" field if the given value is not nil.
func (amu *AsMenuUpdate) SetNillableIsOpen(i *int64) *AsMenuUpdate {
	if i != nil {
		amu.SetIsOpen(*i)
	}
	return amu
}

// AddIsOpen adds i to the "is_open" field.
func (amu *AsMenuUpdate) AddIsOpen(i int64) *AsMenuUpdate {
	amu.mutation.AddIsOpen(i)
	return amu
}

// ClearIsOpen clears the value of the "is_open" field.
func (amu *AsMenuUpdate) ClearIsOpen() *AsMenuUpdate {
	amu.mutation.ClearIsOpen()
	return amu
}

// SetRemark sets the "remark" field.
func (amu *AsMenuUpdate) SetRemark(s string) *AsMenuUpdate {
	amu.mutation.SetRemark(s)
	return amu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (amu *AsMenuUpdate) SetNillableRemark(s *string) *AsMenuUpdate {
	if s != nil {
		amu.SetRemark(*s)
	}
	return amu
}

// ClearRemark clears the value of the "remark" field.
func (amu *AsMenuUpdate) ClearRemark() *AsMenuUpdate {
	amu.mutation.ClearRemark()
	return amu
}

// SetReformStatus sets the "reform_status" field.
func (amu *AsMenuUpdate) SetReformStatus(i int64) *AsMenuUpdate {
	amu.mutation.ResetReformStatus()
	amu.mutation.SetReformStatus(i)
	return amu
}

// SetNillableReformStatus sets the "reform_status" field if the given value is not nil.
func (amu *AsMenuUpdate) SetNillableReformStatus(i *int64) *AsMenuUpdate {
	if i != nil {
		amu.SetReformStatus(*i)
	}
	return amu
}

// AddReformStatus adds i to the "reform_status" field.
func (amu *AsMenuUpdate) AddReformStatus(i int64) *AsMenuUpdate {
	amu.mutation.AddReformStatus(i)
	return amu
}

// ClearReformStatus clears the value of the "reform_status" field.
func (amu *AsMenuUpdate) ClearReformStatus() *AsMenuUpdate {
	amu.mutation.ClearReformStatus()
	return amu
}

// SetIsDeleted sets the "is_deleted" field.
func (amu *AsMenuUpdate) SetIsDeleted(i int64) *AsMenuUpdate {
	amu.mutation.ResetIsDeleted()
	amu.mutation.SetIsDeleted(i)
	return amu
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (amu *AsMenuUpdate) SetNillableIsDeleted(i *int64) *AsMenuUpdate {
	if i != nil {
		amu.SetIsDeleted(*i)
	}
	return amu
}

// AddIsDeleted adds i to the "is_deleted" field.
func (amu *AsMenuUpdate) AddIsDeleted(i int64) *AsMenuUpdate {
	amu.mutation.AddIsDeleted(i)
	return amu
}

// SetStatus sets the "status" field.
func (amu *AsMenuUpdate) SetStatus(i int64) *AsMenuUpdate {
	amu.mutation.ResetStatus()
	amu.mutation.SetStatus(i)
	return amu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (amu *AsMenuUpdate) SetNillableStatus(i *int64) *AsMenuUpdate {
	if i != nil {
		amu.SetStatus(*i)
	}
	return amu
}

// AddStatus adds i to the "status" field.
func (amu *AsMenuUpdate) AddStatus(i int64) *AsMenuUpdate {
	amu.mutation.AddStatus(i)
	return amu
}

// ClearStatus clears the value of the "status" field.
func (amu *AsMenuUpdate) ClearStatus() *AsMenuUpdate {
	amu.mutation.ClearStatus()
	return amu
}

// SetCreateUser sets the "create_user" field.
func (amu *AsMenuUpdate) SetCreateUser(i int64) *AsMenuUpdate {
	amu.mutation.ResetCreateUser()
	amu.mutation.SetCreateUser(i)
	return amu
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (amu *AsMenuUpdate) SetNillableCreateUser(i *int64) *AsMenuUpdate {
	if i != nil {
		amu.SetCreateUser(*i)
	}
	return amu
}

// AddCreateUser adds i to the "create_user" field.
func (amu *AsMenuUpdate) AddCreateUser(i int64) *AsMenuUpdate {
	amu.mutation.AddCreateUser(i)
	return amu
}

// ClearCreateUser clears the value of the "create_user" field.
func (amu *AsMenuUpdate) ClearCreateUser() *AsMenuUpdate {
	amu.mutation.ClearCreateUser()
	return amu
}

// SetUpdateUser sets the "update_user" field.
func (amu *AsMenuUpdate) SetUpdateUser(i int64) *AsMenuUpdate {
	amu.mutation.ResetUpdateUser()
	amu.mutation.SetUpdateUser(i)
	return amu
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (amu *AsMenuUpdate) SetNillableUpdateUser(i *int64) *AsMenuUpdate {
	if i != nil {
		amu.SetUpdateUser(*i)
	}
	return amu
}

// AddUpdateUser adds i to the "update_user" field.
func (amu *AsMenuUpdate) AddUpdateUser(i int64) *AsMenuUpdate {
	amu.mutation.AddUpdateUser(i)
	return amu
}

// ClearUpdateUser clears the value of the "update_user" field.
func (amu *AsMenuUpdate) ClearUpdateUser() *AsMenuUpdate {
	amu.mutation.ClearUpdateUser()
	return amu
}

// SetUpdateTime sets the "update_time" field.
func (amu *AsMenuUpdate) SetUpdateTime(dt date.DateTime) *AsMenuUpdate {
	amu.mutation.SetUpdateTime(dt)
	return amu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (amu *AsMenuUpdate) ClearUpdateTime() *AsMenuUpdate {
	amu.mutation.ClearUpdateTime()
	return amu
}

// SetParentxID sets the "parentx" edge to the AsMenu entity by ID.
func (amu *AsMenuUpdate) SetParentxID(id int64) *AsMenuUpdate {
	amu.mutation.SetParentxID(id)
	return amu
}

// SetNillableParentxID sets the "parentx" edge to the AsMenu entity by ID if the given value is not nil.
func (amu *AsMenuUpdate) SetNillableParentxID(id *int64) *AsMenuUpdate {
	if id != nil {
		amu = amu.SetParentxID(*id)
	}
	return amu
}

// SetParentx sets the "parentx" edge to the AsMenu entity.
func (amu *AsMenuUpdate) SetParentx(a *AsMenu) *AsMenuUpdate {
	return amu.SetParentxID(a.ID)
}

// AddChildrenIDs adds the "childrens" edge to the AsMenu entity by IDs.
func (amu *AsMenuUpdate) AddChildrenIDs(ids ...int64) *AsMenuUpdate {
	amu.mutation.AddChildrenIDs(ids...)
	return amu
}

// AddChildrens adds the "childrens" edges to the AsMenu entity.
func (amu *AsMenuUpdate) AddChildrens(a ...*AsMenu) *AsMenuUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amu.AddChildrenIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the AsRole entity by IDs.
func (amu *AsMenuUpdate) AddRoleIDs(ids ...int64) *AsMenuUpdate {
	amu.mutation.AddRoleIDs(ids...)
	return amu
}

// AddRoles adds the "roles" edges to the AsRole entity.
func (amu *AsMenuUpdate) AddRoles(a ...*AsRole) *AsMenuUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amu.AddRoleIDs(ids...)
}

// Mutation returns the AsMenuMutation object of the builder.
func (amu *AsMenuUpdate) Mutation() *AsMenuMutation {
	return amu.mutation
}

// ClearParentx clears the "parentx" edge to the AsMenu entity.
func (amu *AsMenuUpdate) ClearParentx() *AsMenuUpdate {
	amu.mutation.ClearParentx()
	return amu
}

// ClearChildrens clears all "childrens" edges to the AsMenu entity.
func (amu *AsMenuUpdate) ClearChildrens() *AsMenuUpdate {
	amu.mutation.ClearChildrens()
	return amu
}

// RemoveChildrenIDs removes the "childrens" edge to AsMenu entities by IDs.
func (amu *AsMenuUpdate) RemoveChildrenIDs(ids ...int64) *AsMenuUpdate {
	amu.mutation.RemoveChildrenIDs(ids...)
	return amu
}

// RemoveChildrens removes "childrens" edges to AsMenu entities.
func (amu *AsMenuUpdate) RemoveChildrens(a ...*AsMenu) *AsMenuUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amu.RemoveChildrenIDs(ids...)
}

// ClearRoles clears all "roles" edges to the AsRole entity.
func (amu *AsMenuUpdate) ClearRoles() *AsMenuUpdate {
	amu.mutation.ClearRoles()
	return amu
}

// RemoveRoleIDs removes the "roles" edge to AsRole entities by IDs.
func (amu *AsMenuUpdate) RemoveRoleIDs(ids ...int64) *AsMenuUpdate {
	amu.mutation.RemoveRoleIDs(ids...)
	return amu
}

// RemoveRoles removes "roles" edges to AsRole entities.
func (amu *AsMenuUpdate) RemoveRoles(a ...*AsRole) *AsMenuUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amu.RemoveRoleIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (amu *AsMenuUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	amu.defaults()
	if len(amu.hooks) == 0 {
		affected, err = amu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsMenuMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			amu.mutation = mutation
			affected, err = amu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(amu.hooks) - 1; i >= 0; i-- {
			if amu.hooks[i] == nil {
				return 0, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = amu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, amu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (amu *AsMenuUpdate) SaveX(ctx context.Context) int {
	affected, err := amu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (amu *AsMenuUpdate) Exec(ctx context.Context) error {
	_, err := amu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amu *AsMenuUpdate) ExecX(ctx context.Context) {
	if err := amu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amu *AsMenuUpdate) defaults() {
	if _, ok := amu.mutation.UpdateTime(); !ok && !amu.mutation.UpdateTimeCleared() {
		v := asmenu.UpdateDefaultUpdateTime()
		amu.mutation.SetUpdateTime(v)
	}
}

func (amu *AsMenuUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asmenu.Table,
			Columns: asmenu.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asmenu.FieldID,
			},
		},
	}
	if ps := amu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmenu.FieldName,
		})
	}
	if amu.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmenu.FieldName,
		})
	}
	if value, ok := amu.mutation.Alias(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmenu.FieldAlias,
		})
	}
	if amu.mutation.AliasCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmenu.FieldAlias,
		})
	}
	if value, ok := amu.mutation.Path(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmenu.FieldPath,
		})
	}
	if amu.mutation.PathCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmenu.FieldPath,
		})
	}
	if value, ok := amu.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmenu.FieldIcon,
		})
	}
	if amu.mutation.IconCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmenu.FieldIcon,
		})
	}
	if value, ok := amu.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmenu.FieldSort,
		})
	}
	if value, ok := amu.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmenu.FieldSort,
		})
	}
	if amu.mutation.SortCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmenu.FieldSort,
		})
	}
	if value, ok := amu.mutation.Category(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmenu.FieldCategory,
		})
	}
	if value, ok := amu.mutation.AddedCategory(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmenu.FieldCategory,
		})
	}
	if value, ok := amu.mutation.IsOpen(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmenu.FieldIsOpen,
		})
	}
	if value, ok := amu.mutation.AddedIsOpen(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmenu.FieldIsOpen,
		})
	}
	if amu.mutation.IsOpenCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmenu.FieldIsOpen,
		})
	}
	if value, ok := amu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmenu.FieldRemark,
		})
	}
	if amu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmenu.FieldRemark,
		})
	}
	if value, ok := amu.mutation.ReformStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmenu.FieldReformStatus,
		})
	}
	if value, ok := amu.mutation.AddedReformStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmenu.FieldReformStatus,
		})
	}
	if amu.mutation.ReformStatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmenu.FieldReformStatus,
		})
	}
	if value, ok := amu.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmenu.FieldIsDeleted,
		})
	}
	if value, ok := amu.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmenu.FieldIsDeleted,
		})
	}
	if value, ok := amu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmenu.FieldStatus,
		})
	}
	if value, ok := amu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmenu.FieldStatus,
		})
	}
	if amu.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmenu.FieldStatus,
		})
	}
	if value, ok := amu.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmenu.FieldCreateUser,
		})
	}
	if value, ok := amu.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmenu.FieldCreateUser,
		})
	}
	if amu.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmenu.FieldCreateUser,
		})
	}
	if value, ok := amu.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmenu.FieldUpdateUser,
		})
	}
	if value, ok := amu.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmenu.FieldUpdateUser,
		})
	}
	if amu.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmenu.FieldUpdateUser,
		})
	}
	if amu.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmenu.FieldCreateTime,
		})
	}
	if value, ok := amu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmenu.FieldUpdateTime,
		})
	}
	if amu.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmenu.FieldUpdateTime,
		})
	}
	if amu.mutation.ParentxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmenu.ParentxTable,
			Columns: []string{asmenu.ParentxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmenu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amu.mutation.ParentxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmenu.ParentxTable,
			Columns: []string{asmenu.ParentxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amu.mutation.ChildrensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmenu.ChildrensTable,
			Columns: []string{asmenu.ChildrensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmenu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amu.mutation.RemovedChildrensIDs(); len(nodes) > 0 && !amu.mutation.ChildrensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmenu.ChildrensTable,
			Columns: []string{asmenu.ChildrensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amu.mutation.ChildrensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmenu.ChildrensTable,
			Columns: []string{asmenu.ChildrensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asmenu.RolesTable,
			Columns: asmenu.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asrole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amu.mutation.RemovedRolesIDs(); len(nodes) > 0 && !amu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asmenu.RolesTable,
			Columns: asmenu.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amu.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asmenu.RolesTable,
			Columns: asmenu.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, amu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asmenu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AsMenuUpdateOne is the builder for updating a single AsMenu entity.
type AsMenuUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AsMenuMutation
}

// SetParentID sets the "parent_id" field.
func (amuo *AsMenuUpdateOne) SetParentID(i int64) *AsMenuUpdateOne {
	amuo.mutation.SetParentID(i)
	return amuo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (amuo *AsMenuUpdateOne) SetNillableParentID(i *int64) *AsMenuUpdateOne {
	if i != nil {
		amuo.SetParentID(*i)
	}
	return amuo
}

// ClearParentID clears the value of the "parent_id" field.
func (amuo *AsMenuUpdateOne) ClearParentID() *AsMenuUpdateOne {
	amuo.mutation.ClearParentID()
	return amuo
}

// SetName sets the "name" field.
func (amuo *AsMenuUpdateOne) SetName(s string) *AsMenuUpdateOne {
	amuo.mutation.SetName(s)
	return amuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (amuo *AsMenuUpdateOne) SetNillableName(s *string) *AsMenuUpdateOne {
	if s != nil {
		amuo.SetName(*s)
	}
	return amuo
}

// ClearName clears the value of the "name" field.
func (amuo *AsMenuUpdateOne) ClearName() *AsMenuUpdateOne {
	amuo.mutation.ClearName()
	return amuo
}

// SetAlias sets the "alias" field.
func (amuo *AsMenuUpdateOne) SetAlias(s string) *AsMenuUpdateOne {
	amuo.mutation.SetAlias(s)
	return amuo
}

// SetNillableAlias sets the "alias" field if the given value is not nil.
func (amuo *AsMenuUpdateOne) SetNillableAlias(s *string) *AsMenuUpdateOne {
	if s != nil {
		amuo.SetAlias(*s)
	}
	return amuo
}

// ClearAlias clears the value of the "alias" field.
func (amuo *AsMenuUpdateOne) ClearAlias() *AsMenuUpdateOne {
	amuo.mutation.ClearAlias()
	return amuo
}

// SetPath sets the "path" field.
func (amuo *AsMenuUpdateOne) SetPath(s string) *AsMenuUpdateOne {
	amuo.mutation.SetPath(s)
	return amuo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (amuo *AsMenuUpdateOne) SetNillablePath(s *string) *AsMenuUpdateOne {
	if s != nil {
		amuo.SetPath(*s)
	}
	return amuo
}

// ClearPath clears the value of the "path" field.
func (amuo *AsMenuUpdateOne) ClearPath() *AsMenuUpdateOne {
	amuo.mutation.ClearPath()
	return amuo
}

// SetIcon sets the "icon" field.
func (amuo *AsMenuUpdateOne) SetIcon(s string) *AsMenuUpdateOne {
	amuo.mutation.SetIcon(s)
	return amuo
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (amuo *AsMenuUpdateOne) SetNillableIcon(s *string) *AsMenuUpdateOne {
	if s != nil {
		amuo.SetIcon(*s)
	}
	return amuo
}

// ClearIcon clears the value of the "icon" field.
func (amuo *AsMenuUpdateOne) ClearIcon() *AsMenuUpdateOne {
	amuo.mutation.ClearIcon()
	return amuo
}

// SetSort sets the "sort" field.
func (amuo *AsMenuUpdateOne) SetSort(i int64) *AsMenuUpdateOne {
	amuo.mutation.ResetSort()
	amuo.mutation.SetSort(i)
	return amuo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (amuo *AsMenuUpdateOne) SetNillableSort(i *int64) *AsMenuUpdateOne {
	if i != nil {
		amuo.SetSort(*i)
	}
	return amuo
}

// AddSort adds i to the "sort" field.
func (amuo *AsMenuUpdateOne) AddSort(i int64) *AsMenuUpdateOne {
	amuo.mutation.AddSort(i)
	return amuo
}

// ClearSort clears the value of the "sort" field.
func (amuo *AsMenuUpdateOne) ClearSort() *AsMenuUpdateOne {
	amuo.mutation.ClearSort()
	return amuo
}

// SetCategory sets the "category" field.
func (amuo *AsMenuUpdateOne) SetCategory(i int64) *AsMenuUpdateOne {
	amuo.mutation.ResetCategory()
	amuo.mutation.SetCategory(i)
	return amuo
}

// AddCategory adds i to the "category" field.
func (amuo *AsMenuUpdateOne) AddCategory(i int64) *AsMenuUpdateOne {
	amuo.mutation.AddCategory(i)
	return amuo
}

// SetIsOpen sets the "is_open" field.
func (amuo *AsMenuUpdateOne) SetIsOpen(i int64) *AsMenuUpdateOne {
	amuo.mutation.ResetIsOpen()
	amuo.mutation.SetIsOpen(i)
	return amuo
}

// SetNillableIsOpen sets the "is_open" field if the given value is not nil.
func (amuo *AsMenuUpdateOne) SetNillableIsOpen(i *int64) *AsMenuUpdateOne {
	if i != nil {
		amuo.SetIsOpen(*i)
	}
	return amuo
}

// AddIsOpen adds i to the "is_open" field.
func (amuo *AsMenuUpdateOne) AddIsOpen(i int64) *AsMenuUpdateOne {
	amuo.mutation.AddIsOpen(i)
	return amuo
}

// ClearIsOpen clears the value of the "is_open" field.
func (amuo *AsMenuUpdateOne) ClearIsOpen() *AsMenuUpdateOne {
	amuo.mutation.ClearIsOpen()
	return amuo
}

// SetRemark sets the "remark" field.
func (amuo *AsMenuUpdateOne) SetRemark(s string) *AsMenuUpdateOne {
	amuo.mutation.SetRemark(s)
	return amuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (amuo *AsMenuUpdateOne) SetNillableRemark(s *string) *AsMenuUpdateOne {
	if s != nil {
		amuo.SetRemark(*s)
	}
	return amuo
}

// ClearRemark clears the value of the "remark" field.
func (amuo *AsMenuUpdateOne) ClearRemark() *AsMenuUpdateOne {
	amuo.mutation.ClearRemark()
	return amuo
}

// SetReformStatus sets the "reform_status" field.
func (amuo *AsMenuUpdateOne) SetReformStatus(i int64) *AsMenuUpdateOne {
	amuo.mutation.ResetReformStatus()
	amuo.mutation.SetReformStatus(i)
	return amuo
}

// SetNillableReformStatus sets the "reform_status" field if the given value is not nil.
func (amuo *AsMenuUpdateOne) SetNillableReformStatus(i *int64) *AsMenuUpdateOne {
	if i != nil {
		amuo.SetReformStatus(*i)
	}
	return amuo
}

// AddReformStatus adds i to the "reform_status" field.
func (amuo *AsMenuUpdateOne) AddReformStatus(i int64) *AsMenuUpdateOne {
	amuo.mutation.AddReformStatus(i)
	return amuo
}

// ClearReformStatus clears the value of the "reform_status" field.
func (amuo *AsMenuUpdateOne) ClearReformStatus() *AsMenuUpdateOne {
	amuo.mutation.ClearReformStatus()
	return amuo
}

// SetIsDeleted sets the "is_deleted" field.
func (amuo *AsMenuUpdateOne) SetIsDeleted(i int64) *AsMenuUpdateOne {
	amuo.mutation.ResetIsDeleted()
	amuo.mutation.SetIsDeleted(i)
	return amuo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (amuo *AsMenuUpdateOne) SetNillableIsDeleted(i *int64) *AsMenuUpdateOne {
	if i != nil {
		amuo.SetIsDeleted(*i)
	}
	return amuo
}

// AddIsDeleted adds i to the "is_deleted" field.
func (amuo *AsMenuUpdateOne) AddIsDeleted(i int64) *AsMenuUpdateOne {
	amuo.mutation.AddIsDeleted(i)
	return amuo
}

// SetStatus sets the "status" field.
func (amuo *AsMenuUpdateOne) SetStatus(i int64) *AsMenuUpdateOne {
	amuo.mutation.ResetStatus()
	amuo.mutation.SetStatus(i)
	return amuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (amuo *AsMenuUpdateOne) SetNillableStatus(i *int64) *AsMenuUpdateOne {
	if i != nil {
		amuo.SetStatus(*i)
	}
	return amuo
}

// AddStatus adds i to the "status" field.
func (amuo *AsMenuUpdateOne) AddStatus(i int64) *AsMenuUpdateOne {
	amuo.mutation.AddStatus(i)
	return amuo
}

// ClearStatus clears the value of the "status" field.
func (amuo *AsMenuUpdateOne) ClearStatus() *AsMenuUpdateOne {
	amuo.mutation.ClearStatus()
	return amuo
}

// SetCreateUser sets the "create_user" field.
func (amuo *AsMenuUpdateOne) SetCreateUser(i int64) *AsMenuUpdateOne {
	amuo.mutation.ResetCreateUser()
	amuo.mutation.SetCreateUser(i)
	return amuo
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (amuo *AsMenuUpdateOne) SetNillableCreateUser(i *int64) *AsMenuUpdateOne {
	if i != nil {
		amuo.SetCreateUser(*i)
	}
	return amuo
}

// AddCreateUser adds i to the "create_user" field.
func (amuo *AsMenuUpdateOne) AddCreateUser(i int64) *AsMenuUpdateOne {
	amuo.mutation.AddCreateUser(i)
	return amuo
}

// ClearCreateUser clears the value of the "create_user" field.
func (amuo *AsMenuUpdateOne) ClearCreateUser() *AsMenuUpdateOne {
	amuo.mutation.ClearCreateUser()
	return amuo
}

// SetUpdateUser sets the "update_user" field.
func (amuo *AsMenuUpdateOne) SetUpdateUser(i int64) *AsMenuUpdateOne {
	amuo.mutation.ResetUpdateUser()
	amuo.mutation.SetUpdateUser(i)
	return amuo
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (amuo *AsMenuUpdateOne) SetNillableUpdateUser(i *int64) *AsMenuUpdateOne {
	if i != nil {
		amuo.SetUpdateUser(*i)
	}
	return amuo
}

// AddUpdateUser adds i to the "update_user" field.
func (amuo *AsMenuUpdateOne) AddUpdateUser(i int64) *AsMenuUpdateOne {
	amuo.mutation.AddUpdateUser(i)
	return amuo
}

// ClearUpdateUser clears the value of the "update_user" field.
func (amuo *AsMenuUpdateOne) ClearUpdateUser() *AsMenuUpdateOne {
	amuo.mutation.ClearUpdateUser()
	return amuo
}

// SetUpdateTime sets the "update_time" field.
func (amuo *AsMenuUpdateOne) SetUpdateTime(dt date.DateTime) *AsMenuUpdateOne {
	amuo.mutation.SetUpdateTime(dt)
	return amuo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (amuo *AsMenuUpdateOne) ClearUpdateTime() *AsMenuUpdateOne {
	amuo.mutation.ClearUpdateTime()
	return amuo
}

// SetParentxID sets the "parentx" edge to the AsMenu entity by ID.
func (amuo *AsMenuUpdateOne) SetParentxID(id int64) *AsMenuUpdateOne {
	amuo.mutation.SetParentxID(id)
	return amuo
}

// SetNillableParentxID sets the "parentx" edge to the AsMenu entity by ID if the given value is not nil.
func (amuo *AsMenuUpdateOne) SetNillableParentxID(id *int64) *AsMenuUpdateOne {
	if id != nil {
		amuo = amuo.SetParentxID(*id)
	}
	return amuo
}

// SetParentx sets the "parentx" edge to the AsMenu entity.
func (amuo *AsMenuUpdateOne) SetParentx(a *AsMenu) *AsMenuUpdateOne {
	return amuo.SetParentxID(a.ID)
}

// AddChildrenIDs adds the "childrens" edge to the AsMenu entity by IDs.
func (amuo *AsMenuUpdateOne) AddChildrenIDs(ids ...int64) *AsMenuUpdateOne {
	amuo.mutation.AddChildrenIDs(ids...)
	return amuo
}

// AddChildrens adds the "childrens" edges to the AsMenu entity.
func (amuo *AsMenuUpdateOne) AddChildrens(a ...*AsMenu) *AsMenuUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amuo.AddChildrenIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the AsRole entity by IDs.
func (amuo *AsMenuUpdateOne) AddRoleIDs(ids ...int64) *AsMenuUpdateOne {
	amuo.mutation.AddRoleIDs(ids...)
	return amuo
}

// AddRoles adds the "roles" edges to the AsRole entity.
func (amuo *AsMenuUpdateOne) AddRoles(a ...*AsRole) *AsMenuUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amuo.AddRoleIDs(ids...)
}

// Mutation returns the AsMenuMutation object of the builder.
func (amuo *AsMenuUpdateOne) Mutation() *AsMenuMutation {
	return amuo.mutation
}

// ClearParentx clears the "parentx" edge to the AsMenu entity.
func (amuo *AsMenuUpdateOne) ClearParentx() *AsMenuUpdateOne {
	amuo.mutation.ClearParentx()
	return amuo
}

// ClearChildrens clears all "childrens" edges to the AsMenu entity.
func (amuo *AsMenuUpdateOne) ClearChildrens() *AsMenuUpdateOne {
	amuo.mutation.ClearChildrens()
	return amuo
}

// RemoveChildrenIDs removes the "childrens" edge to AsMenu entities by IDs.
func (amuo *AsMenuUpdateOne) RemoveChildrenIDs(ids ...int64) *AsMenuUpdateOne {
	amuo.mutation.RemoveChildrenIDs(ids...)
	return amuo
}

// RemoveChildrens removes "childrens" edges to AsMenu entities.
func (amuo *AsMenuUpdateOne) RemoveChildrens(a ...*AsMenu) *AsMenuUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amuo.RemoveChildrenIDs(ids...)
}

// ClearRoles clears all "roles" edges to the AsRole entity.
func (amuo *AsMenuUpdateOne) ClearRoles() *AsMenuUpdateOne {
	amuo.mutation.ClearRoles()
	return amuo
}

// RemoveRoleIDs removes the "roles" edge to AsRole entities by IDs.
func (amuo *AsMenuUpdateOne) RemoveRoleIDs(ids ...int64) *AsMenuUpdateOne {
	amuo.mutation.RemoveRoleIDs(ids...)
	return amuo
}

// RemoveRoles removes "roles" edges to AsRole entities.
func (amuo *AsMenuUpdateOne) RemoveRoles(a ...*AsRole) *AsMenuUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amuo.RemoveRoleIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (amuo *AsMenuUpdateOne) Select(field string, fields ...string) *AsMenuUpdateOne {
	amuo.fields = append([]string{field}, fields...)
	return amuo
}

// Save executes the query and returns the updated AsMenu entity.
func (amuo *AsMenuUpdateOne) Save(ctx context.Context) (*AsMenu, error) {
	var (
		err  error
		node *AsMenu
	)
	amuo.defaults()
	if len(amuo.hooks) == 0 {
		node, err = amuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsMenuMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			amuo.mutation = mutation
			node, err = amuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(amuo.hooks) - 1; i >= 0; i-- {
			if amuo.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = amuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, amuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (amuo *AsMenuUpdateOne) SaveX(ctx context.Context) *AsMenu {
	node, err := amuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (amuo *AsMenuUpdateOne) Exec(ctx context.Context) error {
	_, err := amuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amuo *AsMenuUpdateOne) ExecX(ctx context.Context) {
	if err := amuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amuo *AsMenuUpdateOne) defaults() {
	if _, ok := amuo.mutation.UpdateTime(); !ok && !amuo.mutation.UpdateTimeCleared() {
		v := asmenu.UpdateDefaultUpdateTime()
		amuo.mutation.SetUpdateTime(v)
	}
}

func (amuo *AsMenuUpdateOne) sqlSave(ctx context.Context) (_node *AsMenu, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asmenu.Table,
			Columns: asmenu.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asmenu.FieldID,
			},
		},
	}
	id, ok := amuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`schema: missing "AsMenu.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := amuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asmenu.FieldID)
		for _, f := range fields {
			if !asmenu.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("schema: invalid field %q for query", f)}
			}
			if f != asmenu.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := amuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmenu.FieldName,
		})
	}
	if amuo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmenu.FieldName,
		})
	}
	if value, ok := amuo.mutation.Alias(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmenu.FieldAlias,
		})
	}
	if amuo.mutation.AliasCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmenu.FieldAlias,
		})
	}
	if value, ok := amuo.mutation.Path(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmenu.FieldPath,
		})
	}
	if amuo.mutation.PathCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmenu.FieldPath,
		})
	}
	if value, ok := amuo.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmenu.FieldIcon,
		})
	}
	if amuo.mutation.IconCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmenu.FieldIcon,
		})
	}
	if value, ok := amuo.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmenu.FieldSort,
		})
	}
	if value, ok := amuo.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmenu.FieldSort,
		})
	}
	if amuo.mutation.SortCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmenu.FieldSort,
		})
	}
	if value, ok := amuo.mutation.Category(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmenu.FieldCategory,
		})
	}
	if value, ok := amuo.mutation.AddedCategory(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmenu.FieldCategory,
		})
	}
	if value, ok := amuo.mutation.IsOpen(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmenu.FieldIsOpen,
		})
	}
	if value, ok := amuo.mutation.AddedIsOpen(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmenu.FieldIsOpen,
		})
	}
	if amuo.mutation.IsOpenCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmenu.FieldIsOpen,
		})
	}
	if value, ok := amuo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmenu.FieldRemark,
		})
	}
	if amuo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmenu.FieldRemark,
		})
	}
	if value, ok := amuo.mutation.ReformStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmenu.FieldReformStatus,
		})
	}
	if value, ok := amuo.mutation.AddedReformStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmenu.FieldReformStatus,
		})
	}
	if amuo.mutation.ReformStatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmenu.FieldReformStatus,
		})
	}
	if value, ok := amuo.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmenu.FieldIsDeleted,
		})
	}
	if value, ok := amuo.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmenu.FieldIsDeleted,
		})
	}
	if value, ok := amuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmenu.FieldStatus,
		})
	}
	if value, ok := amuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmenu.FieldStatus,
		})
	}
	if amuo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmenu.FieldStatus,
		})
	}
	if value, ok := amuo.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmenu.FieldCreateUser,
		})
	}
	if value, ok := amuo.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmenu.FieldCreateUser,
		})
	}
	if amuo.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmenu.FieldCreateUser,
		})
	}
	if value, ok := amuo.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmenu.FieldUpdateUser,
		})
	}
	if value, ok := amuo.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmenu.FieldUpdateUser,
		})
	}
	if amuo.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmenu.FieldUpdateUser,
		})
	}
	if amuo.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmenu.FieldCreateTime,
		})
	}
	if value, ok := amuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmenu.FieldUpdateTime,
		})
	}
	if amuo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmenu.FieldUpdateTime,
		})
	}
	if amuo.mutation.ParentxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmenu.ParentxTable,
			Columns: []string{asmenu.ParentxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmenu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amuo.mutation.ParentxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmenu.ParentxTable,
			Columns: []string{asmenu.ParentxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amuo.mutation.ChildrensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmenu.ChildrensTable,
			Columns: []string{asmenu.ChildrensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmenu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amuo.mutation.RemovedChildrensIDs(); len(nodes) > 0 && !amuo.mutation.ChildrensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmenu.ChildrensTable,
			Columns: []string{asmenu.ChildrensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amuo.mutation.ChildrensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmenu.ChildrensTable,
			Columns: []string{asmenu.ChildrensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amuo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asmenu.RolesTable,
			Columns: asmenu.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asrole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amuo.mutation.RemovedRolesIDs(); len(nodes) > 0 && !amuo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asmenu.RolesTable,
			Columns: asmenu.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amuo.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asmenu.RolesTable,
			Columns: asmenu.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AsMenu{config: amuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, amuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asmenu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
