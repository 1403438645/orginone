// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/asmarketapp"
	"orginone/common/schema/asmarketappcomponent"
	"orginone/common/schema/predicate"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsMarketAppComponentUpdate is the builder for updating AsMarketAppComponent entities.
type AsMarketAppComponentUpdate struct {
	config
	hooks    []Hook
	mutation *AsMarketAppComponentMutation
}

// Where appends a list predicates to the AsMarketAppComponentUpdate builder.
func (amacu *AsMarketAppComponentUpdate) Where(ps ...predicate.AsMarketAppComponent) *AsMarketAppComponentUpdate {
	amacu.mutation.Where(ps...)
	return amacu
}

// SetAppID sets the "app_id" field.
func (amacu *AsMarketAppComponentUpdate) SetAppID(i int64) *AsMarketAppComponentUpdate {
	amacu.mutation.SetAppID(i)
	return amacu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (amacu *AsMarketAppComponentUpdate) SetNillableAppID(i *int64) *AsMarketAppComponentUpdate {
	if i != nil {
		amacu.SetAppID(*i)
	}
	return amacu
}

// ClearAppID clears the value of the "app_id" field.
func (amacu *AsMarketAppComponentUpdate) ClearAppID() *AsMarketAppComponentUpdate {
	amacu.mutation.ClearAppID()
	return amacu
}

// SetCode sets the "code" field.
func (amacu *AsMarketAppComponentUpdate) SetCode(s string) *AsMarketAppComponentUpdate {
	amacu.mutation.SetCode(s)
	return amacu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (amacu *AsMarketAppComponentUpdate) SetNillableCode(s *string) *AsMarketAppComponentUpdate {
	if s != nil {
		amacu.SetCode(*s)
	}
	return amacu
}

// ClearCode clears the value of the "code" field.
func (amacu *AsMarketAppComponentUpdate) ClearCode() *AsMarketAppComponentUpdate {
	amacu.mutation.ClearCode()
	return amacu
}

// SetName sets the "name" field.
func (amacu *AsMarketAppComponentUpdate) SetName(s string) *AsMarketAppComponentUpdate {
	amacu.mutation.SetName(s)
	return amacu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (amacu *AsMarketAppComponentUpdate) SetNillableName(s *string) *AsMarketAppComponentUpdate {
	if s != nil {
		amacu.SetName(*s)
	}
	return amacu
}

// ClearName clears the value of the "name" field.
func (amacu *AsMarketAppComponentUpdate) ClearName() *AsMarketAppComponentUpdate {
	amacu.mutation.ClearName()
	return amacu
}

// SetURL sets the "url" field.
func (amacu *AsMarketAppComponentUpdate) SetURL(s string) *AsMarketAppComponentUpdate {
	amacu.mutation.SetURL(s)
	return amacu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (amacu *AsMarketAppComponentUpdate) SetNillableURL(s *string) *AsMarketAppComponentUpdate {
	if s != nil {
		amacu.SetURL(*s)
	}
	return amacu
}

// ClearURL clears the value of the "url" field.
func (amacu *AsMarketAppComponentUpdate) ClearURL() *AsMarketAppComponentUpdate {
	amacu.mutation.ClearURL()
	return amacu
}

// SetType sets the "type" field.
func (amacu *AsMarketAppComponentUpdate) SetType(i int64) *AsMarketAppComponentUpdate {
	amacu.mutation.ResetType()
	amacu.mutation.SetType(i)
	return amacu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (amacu *AsMarketAppComponentUpdate) SetNillableType(i *int64) *AsMarketAppComponentUpdate {
	if i != nil {
		amacu.SetType(*i)
	}
	return amacu
}

// AddType adds i to the "type" field.
func (amacu *AsMarketAppComponentUpdate) AddType(i int64) *AsMarketAppComponentUpdate {
	amacu.mutation.AddType(i)
	return amacu
}

// ClearType clears the value of the "type" field.
func (amacu *AsMarketAppComponentUpdate) ClearType() *AsMarketAppComponentUpdate {
	amacu.mutation.ClearType()
	return amacu
}

// SetPreviewPic sets the "preview_pic" field.
func (amacu *AsMarketAppComponentUpdate) SetPreviewPic(s string) *AsMarketAppComponentUpdate {
	amacu.mutation.SetPreviewPic(s)
	return amacu
}

// SetNillablePreviewPic sets the "preview_pic" field if the given value is not nil.
func (amacu *AsMarketAppComponentUpdate) SetNillablePreviewPic(s *string) *AsMarketAppComponentUpdate {
	if s != nil {
		amacu.SetPreviewPic(*s)
	}
	return amacu
}

// ClearPreviewPic clears the value of the "preview_pic" field.
func (amacu *AsMarketAppComponentUpdate) ClearPreviewPic() *AsMarketAppComponentUpdate {
	amacu.mutation.ClearPreviewPic()
	return amacu
}

// SetLayoutType sets the "layout_type" field.
func (amacu *AsMarketAppComponentUpdate) SetLayoutType(s string) *AsMarketAppComponentUpdate {
	amacu.mutation.SetLayoutType(s)
	return amacu
}

// SetNillableLayoutType sets the "layout_type" field if the given value is not nil.
func (amacu *AsMarketAppComponentUpdate) SetNillableLayoutType(s *string) *AsMarketAppComponentUpdate {
	if s != nil {
		amacu.SetLayoutType(*s)
	}
	return amacu
}

// ClearLayoutType clears the value of the "layout_type" field.
func (amacu *AsMarketAppComponentUpdate) ClearLayoutType() *AsMarketAppComponentUpdate {
	amacu.mutation.ClearLayoutType()
	return amacu
}

// SetLayoutConfig sets the "layout_config" field.
func (amacu *AsMarketAppComponentUpdate) SetLayoutConfig(s string) *AsMarketAppComponentUpdate {
	amacu.mutation.SetLayoutConfig(s)
	return amacu
}

// SetNillableLayoutConfig sets the "layout_config" field if the given value is not nil.
func (amacu *AsMarketAppComponentUpdate) SetNillableLayoutConfig(s *string) *AsMarketAppComponentUpdate {
	if s != nil {
		amacu.SetLayoutConfig(*s)
	}
	return amacu
}

// ClearLayoutConfig clears the value of the "layout_config" field.
func (amacu *AsMarketAppComponentUpdate) ClearLayoutConfig() *AsMarketAppComponentUpdate {
	amacu.mutation.ClearLayoutConfig()
	return amacu
}

// SetTenantCode sets the "tenant_code" field.
func (amacu *AsMarketAppComponentUpdate) SetTenantCode(s string) *AsMarketAppComponentUpdate {
	amacu.mutation.SetTenantCode(s)
	return amacu
}

// SetNillableTenantCode sets the "tenant_code" field if the given value is not nil.
func (amacu *AsMarketAppComponentUpdate) SetNillableTenantCode(s *string) *AsMarketAppComponentUpdate {
	if s != nil {
		amacu.SetTenantCode(*s)
	}
	return amacu
}

// ClearTenantCode clears the value of the "tenant_code" field.
func (amacu *AsMarketAppComponentUpdate) ClearTenantCode() *AsMarketAppComponentUpdate {
	amacu.mutation.ClearTenantCode()
	return amacu
}

// SetSource sets the "source" field.
func (amacu *AsMarketAppComponentUpdate) SetSource(s string) *AsMarketAppComponentUpdate {
	amacu.mutation.SetSource(s)
	return amacu
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (amacu *AsMarketAppComponentUpdate) SetNillableSource(s *string) *AsMarketAppComponentUpdate {
	if s != nil {
		amacu.SetSource(*s)
	}
	return amacu
}

// ClearSource clears the value of the "source" field.
func (amacu *AsMarketAppComponentUpdate) ClearSource() *AsMarketAppComponentUpdate {
	amacu.mutation.ClearSource()
	return amacu
}

// SetIsDeleted sets the "is_deleted" field.
func (amacu *AsMarketAppComponentUpdate) SetIsDeleted(i int64) *AsMarketAppComponentUpdate {
	amacu.mutation.ResetIsDeleted()
	amacu.mutation.SetIsDeleted(i)
	return amacu
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (amacu *AsMarketAppComponentUpdate) SetNillableIsDeleted(i *int64) *AsMarketAppComponentUpdate {
	if i != nil {
		amacu.SetIsDeleted(*i)
	}
	return amacu
}

// AddIsDeleted adds i to the "is_deleted" field.
func (amacu *AsMarketAppComponentUpdate) AddIsDeleted(i int64) *AsMarketAppComponentUpdate {
	amacu.mutation.AddIsDeleted(i)
	return amacu
}

// SetStatus sets the "status" field.
func (amacu *AsMarketAppComponentUpdate) SetStatus(i int64) *AsMarketAppComponentUpdate {
	amacu.mutation.ResetStatus()
	amacu.mutation.SetStatus(i)
	return amacu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (amacu *AsMarketAppComponentUpdate) SetNillableStatus(i *int64) *AsMarketAppComponentUpdate {
	if i != nil {
		amacu.SetStatus(*i)
	}
	return amacu
}

// AddStatus adds i to the "status" field.
func (amacu *AsMarketAppComponentUpdate) AddStatus(i int64) *AsMarketAppComponentUpdate {
	amacu.mutation.AddStatus(i)
	return amacu
}

// ClearStatus clears the value of the "status" field.
func (amacu *AsMarketAppComponentUpdate) ClearStatus() *AsMarketAppComponentUpdate {
	amacu.mutation.ClearStatus()
	return amacu
}

// SetCreateUser sets the "create_user" field.
func (amacu *AsMarketAppComponentUpdate) SetCreateUser(i int64) *AsMarketAppComponentUpdate {
	amacu.mutation.ResetCreateUser()
	amacu.mutation.SetCreateUser(i)
	return amacu
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (amacu *AsMarketAppComponentUpdate) SetNillableCreateUser(i *int64) *AsMarketAppComponentUpdate {
	if i != nil {
		amacu.SetCreateUser(*i)
	}
	return amacu
}

// AddCreateUser adds i to the "create_user" field.
func (amacu *AsMarketAppComponentUpdate) AddCreateUser(i int64) *AsMarketAppComponentUpdate {
	amacu.mutation.AddCreateUser(i)
	return amacu
}

// ClearCreateUser clears the value of the "create_user" field.
func (amacu *AsMarketAppComponentUpdate) ClearCreateUser() *AsMarketAppComponentUpdate {
	amacu.mutation.ClearCreateUser()
	return amacu
}

// SetUpdateUser sets the "update_user" field.
func (amacu *AsMarketAppComponentUpdate) SetUpdateUser(i int64) *AsMarketAppComponentUpdate {
	amacu.mutation.ResetUpdateUser()
	amacu.mutation.SetUpdateUser(i)
	return amacu
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (amacu *AsMarketAppComponentUpdate) SetNillableUpdateUser(i *int64) *AsMarketAppComponentUpdate {
	if i != nil {
		amacu.SetUpdateUser(*i)
	}
	return amacu
}

// AddUpdateUser adds i to the "update_user" field.
func (amacu *AsMarketAppComponentUpdate) AddUpdateUser(i int64) *AsMarketAppComponentUpdate {
	amacu.mutation.AddUpdateUser(i)
	return amacu
}

// ClearUpdateUser clears the value of the "update_user" field.
func (amacu *AsMarketAppComponentUpdate) ClearUpdateUser() *AsMarketAppComponentUpdate {
	amacu.mutation.ClearUpdateUser()
	return amacu
}

// SetUpdateTime sets the "update_time" field.
func (amacu *AsMarketAppComponentUpdate) SetUpdateTime(dt date.DateTime) *AsMarketAppComponentUpdate {
	amacu.mutation.SetUpdateTime(dt)
	return amacu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (amacu *AsMarketAppComponentUpdate) ClearUpdateTime() *AsMarketAppComponentUpdate {
	amacu.mutation.ClearUpdateTime()
	return amacu
}

// SetAppxID sets the "appx" edge to the AsMarketApp entity by ID.
func (amacu *AsMarketAppComponentUpdate) SetAppxID(id int64) *AsMarketAppComponentUpdate {
	amacu.mutation.SetAppxID(id)
	return amacu
}

// SetNillableAppxID sets the "appx" edge to the AsMarketApp entity by ID if the given value is not nil.
func (amacu *AsMarketAppComponentUpdate) SetNillableAppxID(id *int64) *AsMarketAppComponentUpdate {
	if id != nil {
		amacu = amacu.SetAppxID(*id)
	}
	return amacu
}

// SetAppx sets the "appx" edge to the AsMarketApp entity.
func (amacu *AsMarketAppComponentUpdate) SetAppx(a *AsMarketApp) *AsMarketAppComponentUpdate {
	return amacu.SetAppxID(a.ID)
}

// Mutation returns the AsMarketAppComponentMutation object of the builder.
func (amacu *AsMarketAppComponentUpdate) Mutation() *AsMarketAppComponentMutation {
	return amacu.mutation
}

// ClearAppx clears the "appx" edge to the AsMarketApp entity.
func (amacu *AsMarketAppComponentUpdate) ClearAppx() *AsMarketAppComponentUpdate {
	amacu.mutation.ClearAppx()
	return amacu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (amacu *AsMarketAppComponentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	amacu.defaults()
	if len(amacu.hooks) == 0 {
		affected, err = amacu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsMarketAppComponentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			amacu.mutation = mutation
			affected, err = amacu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(amacu.hooks) - 1; i >= 0; i-- {
			if amacu.hooks[i] == nil {
				return 0, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = amacu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, amacu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (amacu *AsMarketAppComponentUpdate) SaveX(ctx context.Context) int {
	affected, err := amacu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (amacu *AsMarketAppComponentUpdate) Exec(ctx context.Context) error {
	_, err := amacu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amacu *AsMarketAppComponentUpdate) ExecX(ctx context.Context) {
	if err := amacu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amacu *AsMarketAppComponentUpdate) defaults() {
	if _, ok := amacu.mutation.UpdateTime(); !ok && !amacu.mutation.UpdateTimeCleared() {
		v := asmarketappcomponent.UpdateDefaultUpdateTime()
		amacu.mutation.SetUpdateTime(v)
	}
}

func (amacu *AsMarketAppComponentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asmarketappcomponent.Table,
			Columns: asmarketappcomponent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asmarketappcomponent.FieldID,
			},
		},
	}
	if ps := amacu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amacu.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappcomponent.FieldCode,
		})
	}
	if amacu.mutation.CodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappcomponent.FieldCode,
		})
	}
	if value, ok := amacu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappcomponent.FieldName,
		})
	}
	if amacu.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappcomponent.FieldName,
		})
	}
	if value, ok := amacu.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappcomponent.FieldURL,
		})
	}
	if amacu.mutation.URLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappcomponent.FieldURL,
		})
	}
	if value, ok := amacu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappcomponent.FieldType,
		})
	}
	if value, ok := amacu.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappcomponent.FieldType,
		})
	}
	if amacu.mutation.TypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappcomponent.FieldType,
		})
	}
	if value, ok := amacu.mutation.PreviewPic(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappcomponent.FieldPreviewPic,
		})
	}
	if amacu.mutation.PreviewPicCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappcomponent.FieldPreviewPic,
		})
	}
	if value, ok := amacu.mutation.LayoutType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappcomponent.FieldLayoutType,
		})
	}
	if amacu.mutation.LayoutTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappcomponent.FieldLayoutType,
		})
	}
	if value, ok := amacu.mutation.LayoutConfig(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappcomponent.FieldLayoutConfig,
		})
	}
	if amacu.mutation.LayoutConfigCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappcomponent.FieldLayoutConfig,
		})
	}
	if value, ok := amacu.mutation.TenantCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappcomponent.FieldTenantCode,
		})
	}
	if amacu.mutation.TenantCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappcomponent.FieldTenantCode,
		})
	}
	if value, ok := amacu.mutation.Source(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappcomponent.FieldSource,
		})
	}
	if amacu.mutation.SourceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappcomponent.FieldSource,
		})
	}
	if value, ok := amacu.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappcomponent.FieldIsDeleted,
		})
	}
	if value, ok := amacu.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappcomponent.FieldIsDeleted,
		})
	}
	if value, ok := amacu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappcomponent.FieldStatus,
		})
	}
	if value, ok := amacu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappcomponent.FieldStatus,
		})
	}
	if amacu.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappcomponent.FieldStatus,
		})
	}
	if value, ok := amacu.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappcomponent.FieldCreateUser,
		})
	}
	if value, ok := amacu.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappcomponent.FieldCreateUser,
		})
	}
	if amacu.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappcomponent.FieldCreateUser,
		})
	}
	if value, ok := amacu.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappcomponent.FieldUpdateUser,
		})
	}
	if value, ok := amacu.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappcomponent.FieldUpdateUser,
		})
	}
	if amacu.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappcomponent.FieldUpdateUser,
		})
	}
	if amacu.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketappcomponent.FieldCreateTime,
		})
	}
	if value, ok := amacu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketappcomponent.FieldUpdateTime,
		})
	}
	if amacu.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketappcomponent.FieldUpdateTime,
		})
	}
	if amacu.mutation.AppxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketappcomponent.AppxTable,
			Columns: []string{asmarketappcomponent.AppxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapp.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amacu.mutation.AppxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketappcomponent.AppxTable,
			Columns: []string{asmarketappcomponent.AppxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapp.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, amacu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asmarketappcomponent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AsMarketAppComponentUpdateOne is the builder for updating a single AsMarketAppComponent entity.
type AsMarketAppComponentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AsMarketAppComponentMutation
}

// SetAppID sets the "app_id" field.
func (amacuo *AsMarketAppComponentUpdateOne) SetAppID(i int64) *AsMarketAppComponentUpdateOne {
	amacuo.mutation.SetAppID(i)
	return amacuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (amacuo *AsMarketAppComponentUpdateOne) SetNillableAppID(i *int64) *AsMarketAppComponentUpdateOne {
	if i != nil {
		amacuo.SetAppID(*i)
	}
	return amacuo
}

// ClearAppID clears the value of the "app_id" field.
func (amacuo *AsMarketAppComponentUpdateOne) ClearAppID() *AsMarketAppComponentUpdateOne {
	amacuo.mutation.ClearAppID()
	return amacuo
}

// SetCode sets the "code" field.
func (amacuo *AsMarketAppComponentUpdateOne) SetCode(s string) *AsMarketAppComponentUpdateOne {
	amacuo.mutation.SetCode(s)
	return amacuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (amacuo *AsMarketAppComponentUpdateOne) SetNillableCode(s *string) *AsMarketAppComponentUpdateOne {
	if s != nil {
		amacuo.SetCode(*s)
	}
	return amacuo
}

// ClearCode clears the value of the "code" field.
func (amacuo *AsMarketAppComponentUpdateOne) ClearCode() *AsMarketAppComponentUpdateOne {
	amacuo.mutation.ClearCode()
	return amacuo
}

// SetName sets the "name" field.
func (amacuo *AsMarketAppComponentUpdateOne) SetName(s string) *AsMarketAppComponentUpdateOne {
	amacuo.mutation.SetName(s)
	return amacuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (amacuo *AsMarketAppComponentUpdateOne) SetNillableName(s *string) *AsMarketAppComponentUpdateOne {
	if s != nil {
		amacuo.SetName(*s)
	}
	return amacuo
}

// ClearName clears the value of the "name" field.
func (amacuo *AsMarketAppComponentUpdateOne) ClearName() *AsMarketAppComponentUpdateOne {
	amacuo.mutation.ClearName()
	return amacuo
}

// SetURL sets the "url" field.
func (amacuo *AsMarketAppComponentUpdateOne) SetURL(s string) *AsMarketAppComponentUpdateOne {
	amacuo.mutation.SetURL(s)
	return amacuo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (amacuo *AsMarketAppComponentUpdateOne) SetNillableURL(s *string) *AsMarketAppComponentUpdateOne {
	if s != nil {
		amacuo.SetURL(*s)
	}
	return amacuo
}

// ClearURL clears the value of the "url" field.
func (amacuo *AsMarketAppComponentUpdateOne) ClearURL() *AsMarketAppComponentUpdateOne {
	amacuo.mutation.ClearURL()
	return amacuo
}

// SetType sets the "type" field.
func (amacuo *AsMarketAppComponentUpdateOne) SetType(i int64) *AsMarketAppComponentUpdateOne {
	amacuo.mutation.ResetType()
	amacuo.mutation.SetType(i)
	return amacuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (amacuo *AsMarketAppComponentUpdateOne) SetNillableType(i *int64) *AsMarketAppComponentUpdateOne {
	if i != nil {
		amacuo.SetType(*i)
	}
	return amacuo
}

// AddType adds i to the "type" field.
func (amacuo *AsMarketAppComponentUpdateOne) AddType(i int64) *AsMarketAppComponentUpdateOne {
	amacuo.mutation.AddType(i)
	return amacuo
}

// ClearType clears the value of the "type" field.
func (amacuo *AsMarketAppComponentUpdateOne) ClearType() *AsMarketAppComponentUpdateOne {
	amacuo.mutation.ClearType()
	return amacuo
}

// SetPreviewPic sets the "preview_pic" field.
func (amacuo *AsMarketAppComponentUpdateOne) SetPreviewPic(s string) *AsMarketAppComponentUpdateOne {
	amacuo.mutation.SetPreviewPic(s)
	return amacuo
}

// SetNillablePreviewPic sets the "preview_pic" field if the given value is not nil.
func (amacuo *AsMarketAppComponentUpdateOne) SetNillablePreviewPic(s *string) *AsMarketAppComponentUpdateOne {
	if s != nil {
		amacuo.SetPreviewPic(*s)
	}
	return amacuo
}

// ClearPreviewPic clears the value of the "preview_pic" field.
func (amacuo *AsMarketAppComponentUpdateOne) ClearPreviewPic() *AsMarketAppComponentUpdateOne {
	amacuo.mutation.ClearPreviewPic()
	return amacuo
}

// SetLayoutType sets the "layout_type" field.
func (amacuo *AsMarketAppComponentUpdateOne) SetLayoutType(s string) *AsMarketAppComponentUpdateOne {
	amacuo.mutation.SetLayoutType(s)
	return amacuo
}

// SetNillableLayoutType sets the "layout_type" field if the given value is not nil.
func (amacuo *AsMarketAppComponentUpdateOne) SetNillableLayoutType(s *string) *AsMarketAppComponentUpdateOne {
	if s != nil {
		amacuo.SetLayoutType(*s)
	}
	return amacuo
}

// ClearLayoutType clears the value of the "layout_type" field.
func (amacuo *AsMarketAppComponentUpdateOne) ClearLayoutType() *AsMarketAppComponentUpdateOne {
	amacuo.mutation.ClearLayoutType()
	return amacuo
}

// SetLayoutConfig sets the "layout_config" field.
func (amacuo *AsMarketAppComponentUpdateOne) SetLayoutConfig(s string) *AsMarketAppComponentUpdateOne {
	amacuo.mutation.SetLayoutConfig(s)
	return amacuo
}

// SetNillableLayoutConfig sets the "layout_config" field if the given value is not nil.
func (amacuo *AsMarketAppComponentUpdateOne) SetNillableLayoutConfig(s *string) *AsMarketAppComponentUpdateOne {
	if s != nil {
		amacuo.SetLayoutConfig(*s)
	}
	return amacuo
}

// ClearLayoutConfig clears the value of the "layout_config" field.
func (amacuo *AsMarketAppComponentUpdateOne) ClearLayoutConfig() *AsMarketAppComponentUpdateOne {
	amacuo.mutation.ClearLayoutConfig()
	return amacuo
}

// SetTenantCode sets the "tenant_code" field.
func (amacuo *AsMarketAppComponentUpdateOne) SetTenantCode(s string) *AsMarketAppComponentUpdateOne {
	amacuo.mutation.SetTenantCode(s)
	return amacuo
}

// SetNillableTenantCode sets the "tenant_code" field if the given value is not nil.
func (amacuo *AsMarketAppComponentUpdateOne) SetNillableTenantCode(s *string) *AsMarketAppComponentUpdateOne {
	if s != nil {
		amacuo.SetTenantCode(*s)
	}
	return amacuo
}

// ClearTenantCode clears the value of the "tenant_code" field.
func (amacuo *AsMarketAppComponentUpdateOne) ClearTenantCode() *AsMarketAppComponentUpdateOne {
	amacuo.mutation.ClearTenantCode()
	return amacuo
}

// SetSource sets the "source" field.
func (amacuo *AsMarketAppComponentUpdateOne) SetSource(s string) *AsMarketAppComponentUpdateOne {
	amacuo.mutation.SetSource(s)
	return amacuo
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (amacuo *AsMarketAppComponentUpdateOne) SetNillableSource(s *string) *AsMarketAppComponentUpdateOne {
	if s != nil {
		amacuo.SetSource(*s)
	}
	return amacuo
}

// ClearSource clears the value of the "source" field.
func (amacuo *AsMarketAppComponentUpdateOne) ClearSource() *AsMarketAppComponentUpdateOne {
	amacuo.mutation.ClearSource()
	return amacuo
}

// SetIsDeleted sets the "is_deleted" field.
func (amacuo *AsMarketAppComponentUpdateOne) SetIsDeleted(i int64) *AsMarketAppComponentUpdateOne {
	amacuo.mutation.ResetIsDeleted()
	amacuo.mutation.SetIsDeleted(i)
	return amacuo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (amacuo *AsMarketAppComponentUpdateOne) SetNillableIsDeleted(i *int64) *AsMarketAppComponentUpdateOne {
	if i != nil {
		amacuo.SetIsDeleted(*i)
	}
	return amacuo
}

// AddIsDeleted adds i to the "is_deleted" field.
func (amacuo *AsMarketAppComponentUpdateOne) AddIsDeleted(i int64) *AsMarketAppComponentUpdateOne {
	amacuo.mutation.AddIsDeleted(i)
	return amacuo
}

// SetStatus sets the "status" field.
func (amacuo *AsMarketAppComponentUpdateOne) SetStatus(i int64) *AsMarketAppComponentUpdateOne {
	amacuo.mutation.ResetStatus()
	amacuo.mutation.SetStatus(i)
	return amacuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (amacuo *AsMarketAppComponentUpdateOne) SetNillableStatus(i *int64) *AsMarketAppComponentUpdateOne {
	if i != nil {
		amacuo.SetStatus(*i)
	}
	return amacuo
}

// AddStatus adds i to the "status" field.
func (amacuo *AsMarketAppComponentUpdateOne) AddStatus(i int64) *AsMarketAppComponentUpdateOne {
	amacuo.mutation.AddStatus(i)
	return amacuo
}

// ClearStatus clears the value of the "status" field.
func (amacuo *AsMarketAppComponentUpdateOne) ClearStatus() *AsMarketAppComponentUpdateOne {
	amacuo.mutation.ClearStatus()
	return amacuo
}

// SetCreateUser sets the "create_user" field.
func (amacuo *AsMarketAppComponentUpdateOne) SetCreateUser(i int64) *AsMarketAppComponentUpdateOne {
	amacuo.mutation.ResetCreateUser()
	amacuo.mutation.SetCreateUser(i)
	return amacuo
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (amacuo *AsMarketAppComponentUpdateOne) SetNillableCreateUser(i *int64) *AsMarketAppComponentUpdateOne {
	if i != nil {
		amacuo.SetCreateUser(*i)
	}
	return amacuo
}

// AddCreateUser adds i to the "create_user" field.
func (amacuo *AsMarketAppComponentUpdateOne) AddCreateUser(i int64) *AsMarketAppComponentUpdateOne {
	amacuo.mutation.AddCreateUser(i)
	return amacuo
}

// ClearCreateUser clears the value of the "create_user" field.
func (amacuo *AsMarketAppComponentUpdateOne) ClearCreateUser() *AsMarketAppComponentUpdateOne {
	amacuo.mutation.ClearCreateUser()
	return amacuo
}

// SetUpdateUser sets the "update_user" field.
func (amacuo *AsMarketAppComponentUpdateOne) SetUpdateUser(i int64) *AsMarketAppComponentUpdateOne {
	amacuo.mutation.ResetUpdateUser()
	amacuo.mutation.SetUpdateUser(i)
	return amacuo
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (amacuo *AsMarketAppComponentUpdateOne) SetNillableUpdateUser(i *int64) *AsMarketAppComponentUpdateOne {
	if i != nil {
		amacuo.SetUpdateUser(*i)
	}
	return amacuo
}

// AddUpdateUser adds i to the "update_user" field.
func (amacuo *AsMarketAppComponentUpdateOne) AddUpdateUser(i int64) *AsMarketAppComponentUpdateOne {
	amacuo.mutation.AddUpdateUser(i)
	return amacuo
}

// ClearUpdateUser clears the value of the "update_user" field.
func (amacuo *AsMarketAppComponentUpdateOne) ClearUpdateUser() *AsMarketAppComponentUpdateOne {
	amacuo.mutation.ClearUpdateUser()
	return amacuo
}

// SetUpdateTime sets the "update_time" field.
func (amacuo *AsMarketAppComponentUpdateOne) SetUpdateTime(dt date.DateTime) *AsMarketAppComponentUpdateOne {
	amacuo.mutation.SetUpdateTime(dt)
	return amacuo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (amacuo *AsMarketAppComponentUpdateOne) ClearUpdateTime() *AsMarketAppComponentUpdateOne {
	amacuo.mutation.ClearUpdateTime()
	return amacuo
}

// SetAppxID sets the "appx" edge to the AsMarketApp entity by ID.
func (amacuo *AsMarketAppComponentUpdateOne) SetAppxID(id int64) *AsMarketAppComponentUpdateOne {
	amacuo.mutation.SetAppxID(id)
	return amacuo
}

// SetNillableAppxID sets the "appx" edge to the AsMarketApp entity by ID if the given value is not nil.
func (amacuo *AsMarketAppComponentUpdateOne) SetNillableAppxID(id *int64) *AsMarketAppComponentUpdateOne {
	if id != nil {
		amacuo = amacuo.SetAppxID(*id)
	}
	return amacuo
}

// SetAppx sets the "appx" edge to the AsMarketApp entity.
func (amacuo *AsMarketAppComponentUpdateOne) SetAppx(a *AsMarketApp) *AsMarketAppComponentUpdateOne {
	return amacuo.SetAppxID(a.ID)
}

// Mutation returns the AsMarketAppComponentMutation object of the builder.
func (amacuo *AsMarketAppComponentUpdateOne) Mutation() *AsMarketAppComponentMutation {
	return amacuo.mutation
}

// ClearAppx clears the "appx" edge to the AsMarketApp entity.
func (amacuo *AsMarketAppComponentUpdateOne) ClearAppx() *AsMarketAppComponentUpdateOne {
	amacuo.mutation.ClearAppx()
	return amacuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (amacuo *AsMarketAppComponentUpdateOne) Select(field string, fields ...string) *AsMarketAppComponentUpdateOne {
	amacuo.fields = append([]string{field}, fields...)
	return amacuo
}

// Save executes the query and returns the updated AsMarketAppComponent entity.
func (amacuo *AsMarketAppComponentUpdateOne) Save(ctx context.Context) (*AsMarketAppComponent, error) {
	var (
		err  error
		node *AsMarketAppComponent
	)
	amacuo.defaults()
	if len(amacuo.hooks) == 0 {
		node, err = amacuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsMarketAppComponentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			amacuo.mutation = mutation
			node, err = amacuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(amacuo.hooks) - 1; i >= 0; i-- {
			if amacuo.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = amacuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, amacuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (amacuo *AsMarketAppComponentUpdateOne) SaveX(ctx context.Context) *AsMarketAppComponent {
	node, err := amacuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (amacuo *AsMarketAppComponentUpdateOne) Exec(ctx context.Context) error {
	_, err := amacuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amacuo *AsMarketAppComponentUpdateOne) ExecX(ctx context.Context) {
	if err := amacuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amacuo *AsMarketAppComponentUpdateOne) defaults() {
	if _, ok := amacuo.mutation.UpdateTime(); !ok && !amacuo.mutation.UpdateTimeCleared() {
		v := asmarketappcomponent.UpdateDefaultUpdateTime()
		amacuo.mutation.SetUpdateTime(v)
	}
}

func (amacuo *AsMarketAppComponentUpdateOne) sqlSave(ctx context.Context) (_node *AsMarketAppComponent, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asmarketappcomponent.Table,
			Columns: asmarketappcomponent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asmarketappcomponent.FieldID,
			},
		},
	}
	id, ok := amacuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`schema: missing "AsMarketAppComponent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := amacuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asmarketappcomponent.FieldID)
		for _, f := range fields {
			if !asmarketappcomponent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("schema: invalid field %q for query", f)}
			}
			if f != asmarketappcomponent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := amacuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amacuo.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappcomponent.FieldCode,
		})
	}
	if amacuo.mutation.CodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappcomponent.FieldCode,
		})
	}
	if value, ok := amacuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappcomponent.FieldName,
		})
	}
	if amacuo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappcomponent.FieldName,
		})
	}
	if value, ok := amacuo.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappcomponent.FieldURL,
		})
	}
	if amacuo.mutation.URLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappcomponent.FieldURL,
		})
	}
	if value, ok := amacuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappcomponent.FieldType,
		})
	}
	if value, ok := amacuo.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappcomponent.FieldType,
		})
	}
	if amacuo.mutation.TypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappcomponent.FieldType,
		})
	}
	if value, ok := amacuo.mutation.PreviewPic(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappcomponent.FieldPreviewPic,
		})
	}
	if amacuo.mutation.PreviewPicCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappcomponent.FieldPreviewPic,
		})
	}
	if value, ok := amacuo.mutation.LayoutType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappcomponent.FieldLayoutType,
		})
	}
	if amacuo.mutation.LayoutTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappcomponent.FieldLayoutType,
		})
	}
	if value, ok := amacuo.mutation.LayoutConfig(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappcomponent.FieldLayoutConfig,
		})
	}
	if amacuo.mutation.LayoutConfigCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappcomponent.FieldLayoutConfig,
		})
	}
	if value, ok := amacuo.mutation.TenantCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappcomponent.FieldTenantCode,
		})
	}
	if amacuo.mutation.TenantCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappcomponent.FieldTenantCode,
		})
	}
	if value, ok := amacuo.mutation.Source(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappcomponent.FieldSource,
		})
	}
	if amacuo.mutation.SourceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappcomponent.FieldSource,
		})
	}
	if value, ok := amacuo.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappcomponent.FieldIsDeleted,
		})
	}
	if value, ok := amacuo.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappcomponent.FieldIsDeleted,
		})
	}
	if value, ok := amacuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappcomponent.FieldStatus,
		})
	}
	if value, ok := amacuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappcomponent.FieldStatus,
		})
	}
	if amacuo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappcomponent.FieldStatus,
		})
	}
	if value, ok := amacuo.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappcomponent.FieldCreateUser,
		})
	}
	if value, ok := amacuo.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappcomponent.FieldCreateUser,
		})
	}
	if amacuo.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappcomponent.FieldCreateUser,
		})
	}
	if value, ok := amacuo.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappcomponent.FieldUpdateUser,
		})
	}
	if value, ok := amacuo.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappcomponent.FieldUpdateUser,
		})
	}
	if amacuo.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappcomponent.FieldUpdateUser,
		})
	}
	if amacuo.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketappcomponent.FieldCreateTime,
		})
	}
	if value, ok := amacuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketappcomponent.FieldUpdateTime,
		})
	}
	if amacuo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketappcomponent.FieldUpdateTime,
		})
	}
	if amacuo.mutation.AppxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketappcomponent.AppxTable,
			Columns: []string{asmarketappcomponent.AppxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapp.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amacuo.mutation.AppxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketappcomponent.AppxTable,
			Columns: []string{asmarketappcomponent.AppxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapp.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AsMarketAppComponent{config: amacuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, amacuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asmarketappcomponent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
