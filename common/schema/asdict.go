// Code generated by entc, DO NOT EDIT.

package schema

import (
	"fmt"
	"orginone/common/schema/asdict"
	"orginone/common/tools/date"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// AsDict is the model entity for the AsDict schema.
type AsDict struct {
	config `json:"-"`
	// ID of the ent.
	// 主键
	ID int64 `json:"id,string"`
	// ParentID holds the value of the "parent_id" field.
	// 父主键
	ParentID int64 `json:"parentId,string"`
	// Code holds the value of the "code" field.
	// 字典码
	Code string `json:"code"`
	// DictKey holds the value of the "dict_key" field.
	// 字典值
	DictKey int64 `json:"dictKey"`
	// DictValue holds the value of the "dict_value" field.
	// 字典名称
	DictValue string `json:"dictValue"`
	// Sort holds the value of the "sort" field.
	// 排序
	Sort int64 `json:"sort"`
	// Remark holds the value of the "remark" field.
	// 字典备注
	Remark string `json:"remark"`
	// Currversion holds the value of the "currversion" field.
	// 当前版本号
	Currversion int64 `json:"currversion"`
	// Version holds the value of the "version" field.
	// 版本号
	Version int64 `json:"version"`
	// DictparentID holds the value of the "dictparent_id" field.
	// 枚举父节点
	DictparentID int64 `json:"dictparentId"`
	// IsDeleted holds the value of the "is_deleted" field.
	// 是否被删除
	IsDeleted int64 `json:"isDeleted"`
	// Status holds the value of the "status" field.
	// 状态
	Status int64 `json:"status"`
	// CreateUser holds the value of the "create_user" field.
	// 创建用户
	CreateUser int64 `json:"createUser"`
	// UpdateUser holds the value of the "update_user" field.
	// 更新用户
	UpdateUser int64 `json:"updateUser"`
	// CreateTime holds the value of the "create_time" field.
	// 创建时间
	CreateTime date.DateTime `json:"createTime"`
	// UpdateTime holds the value of the "update_time" field.
	// 更新时间
	UpdateTime date.DateTime `json:"updateTime"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AsDictQuery when eager-loading is set.
	Edges AsDictEdges `json:"edges"`
}

// AsDictEdges holds the relations/edges for other nodes in the graph.
type AsDictEdges struct {
	// Parentx holds the value of the parentx edge.
	Parentx *AsDict `json:"parentx"`
	// Childrens holds the value of the childrens edge.
	Childrens []*AsDict `json:"childrens"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ParentxOrErr returns the Parentx value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AsDictEdges) ParentxOrErr() (*AsDict, error) {
	if e.loadedTypes[0] {
		if e.Parentx == nil {
			// The edge parentx was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: asdict.Label}
		}
		return e.Parentx, nil
	}
	return nil, &NotLoadedError{edge: "parentx"}
}

// ChildrensOrErr returns the Childrens value or an error if the edge
// was not loaded in eager-loading.
func (e AsDictEdges) ChildrensOrErr() ([]*AsDict, error) {
	if e.loadedTypes[1] {
		return e.Childrens, nil
	}
	return nil, &NotLoadedError{edge: "childrens"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AsDict) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case asdict.FieldID, asdict.FieldParentID, asdict.FieldDictKey, asdict.FieldSort, asdict.FieldCurrversion, asdict.FieldVersion, asdict.FieldDictparentID, asdict.FieldIsDeleted, asdict.FieldStatus, asdict.FieldCreateUser, asdict.FieldUpdateUser:
			values[i] = new(sql.NullInt64)
		case asdict.FieldCode, asdict.FieldDictValue, asdict.FieldRemark:
			values[i] = new(sql.NullString)
		case asdict.FieldCreateTime, asdict.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AsDict", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AsDict fields.
func (ad *AsDict) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case asdict.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ad.ID = int64(value.Int64)
		case asdict.FieldParentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value.Valid {
				ad.ParentID = value.Int64
			}
		case asdict.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				ad.Code = value.String
			}
		case asdict.FieldDictKey:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dict_key", values[i])
			} else if value.Valid {
				ad.DictKey = value.Int64
			}
		case asdict.FieldDictValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dict_value", values[i])
			} else if value.Valid {
				ad.DictValue = value.String
			}
		case asdict.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				ad.Sort = value.Int64
			}
		case asdict.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				ad.Remark = value.String
			}
		case asdict.FieldCurrversion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field currversion", values[i])
			} else if value.Valid {
				ad.Currversion = value.Int64
			}
		case asdict.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				ad.Version = value.Int64
			}
		case asdict.FieldDictparentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dictparent_id", values[i])
			} else if value.Valid {
				ad.DictparentID = value.Int64
			}
		case asdict.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				ad.IsDeleted = value.Int64
			}
		case asdict.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ad.Status = value.Int64
			}
		case asdict.FieldCreateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_user", values[i])
			} else if value.Valid {
				ad.CreateUser = value.Int64
			}
		case asdict.FieldUpdateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_user", values[i])
			} else if value.Valid {
				ad.UpdateUser = value.Int64
			}
		case asdict.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ad.CreateTime = date.DateTime(value.Time)
			}
		case asdict.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ad.UpdateTime = date.DateTime(value.Time)
			}
		}
	}
	return nil
}

// QueryParentx queries the "parentx" edge of the AsDict entity.
func (ad *AsDict) QueryParentx() *AsDictQuery {
	return (&AsDictClient{config: ad.config}).QueryParentx(ad)
}

// QueryChildrens queries the "childrens" edge of the AsDict entity.
func (ad *AsDict) QueryChildrens() *AsDictQuery {
	return (&AsDictClient{config: ad.config}).QueryChildrens(ad)
}

// Update returns a builder for updating this AsDict.
// Note that you need to call AsDict.Unwrap() before calling this method if this AsDict
// was returned from a transaction, and the transaction was committed or rolled back.
func (ad *AsDict) Update() *AsDictUpdateOne {
	return (&AsDictClient{config: ad.config}).UpdateOne(ad)
}

// Unwrap unwraps the AsDict entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ad *AsDict) Unwrap() *AsDict {
	tx, ok := ad.config.driver.(*txDriver)
	if !ok {
		panic("schema: AsDict is not a transactional entity")
	}
	ad.config.driver = tx.drv
	return ad
}

// String implements the fmt.Stringer.
func (ad *AsDict) String() string {
	var builder strings.Builder
	builder.WriteString("AsDict(")
	builder.WriteString(fmt.Sprintf("id=%v", ad.ID))
	builder.WriteString(", parent_id=")
	builder.WriteString(fmt.Sprintf("%v", ad.ParentID))
	builder.WriteString(", code=")
	builder.WriteString(ad.Code)
	builder.WriteString(", dict_key=")
	builder.WriteString(fmt.Sprintf("%v", ad.DictKey))
	builder.WriteString(", dict_value=")
	builder.WriteString(ad.DictValue)
	builder.WriteString(", sort=")
	builder.WriteString(fmt.Sprintf("%v", ad.Sort))
	builder.WriteString(", remark=")
	builder.WriteString(ad.Remark)
	builder.WriteString(", currversion=")
	builder.WriteString(fmt.Sprintf("%v", ad.Currversion))
	builder.WriteString(", version=")
	builder.WriteString(fmt.Sprintf("%v", ad.Version))
	builder.WriteString(", dictparent_id=")
	builder.WriteString(fmt.Sprintf("%v", ad.DictparentID))
	builder.WriteString(", is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", ad.IsDeleted))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", ad.Status))
	builder.WriteString(", create_user=")
	builder.WriteString(fmt.Sprintf("%v", ad.CreateUser))
	builder.WriteString(", update_user=")
	builder.WriteString(fmt.Sprintf("%v", ad.UpdateUser))
	builder.WriteString(", create_time=")
	builder.WriteString(fmt.Sprintf("%v", ad.CreateTime))
	builder.WriteString(", update_time=")
	builder.WriteString(fmt.Sprintf("%v", ad.UpdateTime))
	builder.WriteByte(')')
	return builder.String()
}

// AsDicts is a parsable slice of AsDict.
type AsDicts []*AsDict

func (ad AsDicts) config(cfg config) {
	for _i := range ad {
		ad[_i].config = cfg
	}
}
