// Code generated by entc, DO NOT EDIT.

package asmarketappnotice

import (
	"orginone/common/schema/predicate"
	"orginone/common/tools/date"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// NoticeTitle applies equality check predicate on the "notice_title" field. It's identical to NoticeTitleEQ.
func NoticeTitle(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNoticeTitle), v))
	})
}

// NoticeContent applies equality check predicate on the "notice_content" field. It's identical to NoticeContentEQ.
func NoticeContent(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNoticeContent), v))
	})
}

// NoticeReleaseUnitID applies equality check predicate on the "notice_release_unit_id" field. It's identical to NoticeReleaseUnitIDEQ.
func NoticeReleaseUnitID(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNoticeReleaseUnitID), v))
	})
}

// NoticeReleaseStatus applies equality check predicate on the "notice_release_status" field. It's identical to NoticeReleaseStatusEQ.
func NoticeReleaseStatus(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNoticeReleaseStatus), v))
	})
}

// NoticeReleaseTime applies equality check predicate on the "notice_release_time" field. It's identical to NoticeReleaseTimeEQ.
func NoticeReleaseTime(v date.DateTime) predicate.AsMarketAppNotice {
	vc := time.Time(v)
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNoticeReleaseTime), vc))
	})
}

// NoticeRoleIds applies equality check predicate on the "notice_role_ids" field. It's identical to NoticeRoleIdsEQ.
func NoticeRoleIds(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNoticeRoleIds), v))
	})
}

// NoticeUnitIds applies equality check predicate on the "notice_unit_ids" field. It's identical to NoticeUnitIdsEQ.
func NoticeUnitIds(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNoticeUnitIds), v))
	})
}

// GroupOrUnit applies equality check predicate on the "group_or_unit" field. It's identical to GroupOrUnitEQ.
func GroupOrUnit(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGroupOrUnit), v))
	})
}

// UnitQueryIds applies equality check predicate on the "unit_query_ids" field. It's identical to UnitQueryIdsEQ.
func UnitQueryIds(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitQueryIds), v))
	})
}

// IsDeleted applies equality check predicate on the "is_deleted" field. It's identical to IsDeletedEQ.
func IsDeleted(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDeleted), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// CreateUser applies equality check predicate on the "create_user" field. It's identical to CreateUserEQ.
func CreateUser(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateUser), v))
	})
}

// UpdateUser applies equality check predicate on the "update_user" field. It's identical to UpdateUserEQ.
func UpdateUser(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateUser), v))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v date.DateTime) predicate.AsMarketAppNotice {
	vc := time.Time(v)
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), vc))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v date.DateTime) predicate.AsMarketAppNotice {
	vc := time.Time(v)
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), vc))
	})
}

// NoticeTitleEQ applies the EQ predicate on the "notice_title" field.
func NoticeTitleEQ(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNoticeTitle), v))
	})
}

// NoticeTitleNEQ applies the NEQ predicate on the "notice_title" field.
func NoticeTitleNEQ(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNoticeTitle), v))
	})
}

// NoticeTitleIn applies the In predicate on the "notice_title" field.
func NoticeTitleIn(vs ...string) predicate.AsMarketAppNotice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNoticeTitle), v...))
	})
}

// NoticeTitleNotIn applies the NotIn predicate on the "notice_title" field.
func NoticeTitleNotIn(vs ...string) predicate.AsMarketAppNotice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNoticeTitle), v...))
	})
}

// NoticeTitleGT applies the GT predicate on the "notice_title" field.
func NoticeTitleGT(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNoticeTitle), v))
	})
}

// NoticeTitleGTE applies the GTE predicate on the "notice_title" field.
func NoticeTitleGTE(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNoticeTitle), v))
	})
}

// NoticeTitleLT applies the LT predicate on the "notice_title" field.
func NoticeTitleLT(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNoticeTitle), v))
	})
}

// NoticeTitleLTE applies the LTE predicate on the "notice_title" field.
func NoticeTitleLTE(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNoticeTitle), v))
	})
}

// NoticeTitleContains applies the Contains predicate on the "notice_title" field.
func NoticeTitleContains(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNoticeTitle), v))
	})
}

// NoticeTitleHasPrefix applies the HasPrefix predicate on the "notice_title" field.
func NoticeTitleHasPrefix(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNoticeTitle), v))
	})
}

// NoticeTitleHasSuffix applies the HasSuffix predicate on the "notice_title" field.
func NoticeTitleHasSuffix(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNoticeTitle), v))
	})
}

// NoticeTitleIsNil applies the IsNil predicate on the "notice_title" field.
func NoticeTitleIsNil() predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNoticeTitle)))
	})
}

// NoticeTitleNotNil applies the NotNil predicate on the "notice_title" field.
func NoticeTitleNotNil() predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNoticeTitle)))
	})
}

// NoticeTitleEqualFold applies the EqualFold predicate on the "notice_title" field.
func NoticeTitleEqualFold(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNoticeTitle), v))
	})
}

// NoticeTitleContainsFold applies the ContainsFold predicate on the "notice_title" field.
func NoticeTitleContainsFold(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNoticeTitle), v))
	})
}

// NoticeContentEQ applies the EQ predicate on the "notice_content" field.
func NoticeContentEQ(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNoticeContent), v))
	})
}

// NoticeContentNEQ applies the NEQ predicate on the "notice_content" field.
func NoticeContentNEQ(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNoticeContent), v))
	})
}

// NoticeContentIn applies the In predicate on the "notice_content" field.
func NoticeContentIn(vs ...string) predicate.AsMarketAppNotice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNoticeContent), v...))
	})
}

// NoticeContentNotIn applies the NotIn predicate on the "notice_content" field.
func NoticeContentNotIn(vs ...string) predicate.AsMarketAppNotice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNoticeContent), v...))
	})
}

// NoticeContentGT applies the GT predicate on the "notice_content" field.
func NoticeContentGT(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNoticeContent), v))
	})
}

// NoticeContentGTE applies the GTE predicate on the "notice_content" field.
func NoticeContentGTE(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNoticeContent), v))
	})
}

// NoticeContentLT applies the LT predicate on the "notice_content" field.
func NoticeContentLT(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNoticeContent), v))
	})
}

// NoticeContentLTE applies the LTE predicate on the "notice_content" field.
func NoticeContentLTE(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNoticeContent), v))
	})
}

// NoticeContentContains applies the Contains predicate on the "notice_content" field.
func NoticeContentContains(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNoticeContent), v))
	})
}

// NoticeContentHasPrefix applies the HasPrefix predicate on the "notice_content" field.
func NoticeContentHasPrefix(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNoticeContent), v))
	})
}

// NoticeContentHasSuffix applies the HasSuffix predicate on the "notice_content" field.
func NoticeContentHasSuffix(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNoticeContent), v))
	})
}

// NoticeContentIsNil applies the IsNil predicate on the "notice_content" field.
func NoticeContentIsNil() predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNoticeContent)))
	})
}

// NoticeContentNotNil applies the NotNil predicate on the "notice_content" field.
func NoticeContentNotNil() predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNoticeContent)))
	})
}

// NoticeContentEqualFold applies the EqualFold predicate on the "notice_content" field.
func NoticeContentEqualFold(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNoticeContent), v))
	})
}

// NoticeContentContainsFold applies the ContainsFold predicate on the "notice_content" field.
func NoticeContentContainsFold(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNoticeContent), v))
	})
}

// NoticeReleaseUnitIDEQ applies the EQ predicate on the "notice_release_unit_id" field.
func NoticeReleaseUnitIDEQ(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNoticeReleaseUnitID), v))
	})
}

// NoticeReleaseUnitIDNEQ applies the NEQ predicate on the "notice_release_unit_id" field.
func NoticeReleaseUnitIDNEQ(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNoticeReleaseUnitID), v))
	})
}

// NoticeReleaseUnitIDIn applies the In predicate on the "notice_release_unit_id" field.
func NoticeReleaseUnitIDIn(vs ...int64) predicate.AsMarketAppNotice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNoticeReleaseUnitID), v...))
	})
}

// NoticeReleaseUnitIDNotIn applies the NotIn predicate on the "notice_release_unit_id" field.
func NoticeReleaseUnitIDNotIn(vs ...int64) predicate.AsMarketAppNotice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNoticeReleaseUnitID), v...))
	})
}

// NoticeReleaseUnitIDGT applies the GT predicate on the "notice_release_unit_id" field.
func NoticeReleaseUnitIDGT(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNoticeReleaseUnitID), v))
	})
}

// NoticeReleaseUnitIDGTE applies the GTE predicate on the "notice_release_unit_id" field.
func NoticeReleaseUnitIDGTE(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNoticeReleaseUnitID), v))
	})
}

// NoticeReleaseUnitIDLT applies the LT predicate on the "notice_release_unit_id" field.
func NoticeReleaseUnitIDLT(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNoticeReleaseUnitID), v))
	})
}

// NoticeReleaseUnitIDLTE applies the LTE predicate on the "notice_release_unit_id" field.
func NoticeReleaseUnitIDLTE(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNoticeReleaseUnitID), v))
	})
}

// NoticeReleaseUnitIDIsNil applies the IsNil predicate on the "notice_release_unit_id" field.
func NoticeReleaseUnitIDIsNil() predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNoticeReleaseUnitID)))
	})
}

// NoticeReleaseUnitIDNotNil applies the NotNil predicate on the "notice_release_unit_id" field.
func NoticeReleaseUnitIDNotNil() predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNoticeReleaseUnitID)))
	})
}

// NoticeReleaseStatusEQ applies the EQ predicate on the "notice_release_status" field.
func NoticeReleaseStatusEQ(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNoticeReleaseStatus), v))
	})
}

// NoticeReleaseStatusNEQ applies the NEQ predicate on the "notice_release_status" field.
func NoticeReleaseStatusNEQ(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNoticeReleaseStatus), v))
	})
}

// NoticeReleaseStatusIn applies the In predicate on the "notice_release_status" field.
func NoticeReleaseStatusIn(vs ...int64) predicate.AsMarketAppNotice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNoticeReleaseStatus), v...))
	})
}

// NoticeReleaseStatusNotIn applies the NotIn predicate on the "notice_release_status" field.
func NoticeReleaseStatusNotIn(vs ...int64) predicate.AsMarketAppNotice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNoticeReleaseStatus), v...))
	})
}

// NoticeReleaseStatusGT applies the GT predicate on the "notice_release_status" field.
func NoticeReleaseStatusGT(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNoticeReleaseStatus), v))
	})
}

// NoticeReleaseStatusGTE applies the GTE predicate on the "notice_release_status" field.
func NoticeReleaseStatusGTE(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNoticeReleaseStatus), v))
	})
}

// NoticeReleaseStatusLT applies the LT predicate on the "notice_release_status" field.
func NoticeReleaseStatusLT(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNoticeReleaseStatus), v))
	})
}

// NoticeReleaseStatusLTE applies the LTE predicate on the "notice_release_status" field.
func NoticeReleaseStatusLTE(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNoticeReleaseStatus), v))
	})
}

// NoticeReleaseTimeEQ applies the EQ predicate on the "notice_release_time" field.
func NoticeReleaseTimeEQ(v date.DateTime) predicate.AsMarketAppNotice {
	vc := time.Time(v)
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNoticeReleaseTime), vc))
	})
}

// NoticeReleaseTimeNEQ applies the NEQ predicate on the "notice_release_time" field.
func NoticeReleaseTimeNEQ(v date.DateTime) predicate.AsMarketAppNotice {
	vc := time.Time(v)
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNoticeReleaseTime), vc))
	})
}

// NoticeReleaseTimeIn applies the In predicate on the "notice_release_time" field.
func NoticeReleaseTimeIn(vs ...date.DateTime) predicate.AsMarketAppNotice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNoticeReleaseTime), v...))
	})
}

// NoticeReleaseTimeNotIn applies the NotIn predicate on the "notice_release_time" field.
func NoticeReleaseTimeNotIn(vs ...date.DateTime) predicate.AsMarketAppNotice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNoticeReleaseTime), v...))
	})
}

// NoticeReleaseTimeGT applies the GT predicate on the "notice_release_time" field.
func NoticeReleaseTimeGT(v date.DateTime) predicate.AsMarketAppNotice {
	vc := time.Time(v)
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNoticeReleaseTime), vc))
	})
}

// NoticeReleaseTimeGTE applies the GTE predicate on the "notice_release_time" field.
func NoticeReleaseTimeGTE(v date.DateTime) predicate.AsMarketAppNotice {
	vc := time.Time(v)
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNoticeReleaseTime), vc))
	})
}

// NoticeReleaseTimeLT applies the LT predicate on the "notice_release_time" field.
func NoticeReleaseTimeLT(v date.DateTime) predicate.AsMarketAppNotice {
	vc := time.Time(v)
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNoticeReleaseTime), vc))
	})
}

// NoticeReleaseTimeLTE applies the LTE predicate on the "notice_release_time" field.
func NoticeReleaseTimeLTE(v date.DateTime) predicate.AsMarketAppNotice {
	vc := time.Time(v)
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNoticeReleaseTime), vc))
	})
}

// NoticeReleaseTimeIsNil applies the IsNil predicate on the "notice_release_time" field.
func NoticeReleaseTimeIsNil() predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNoticeReleaseTime)))
	})
}

// NoticeReleaseTimeNotNil applies the NotNil predicate on the "notice_release_time" field.
func NoticeReleaseTimeNotNil() predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNoticeReleaseTime)))
	})
}

// NoticeRoleIdsEQ applies the EQ predicate on the "notice_role_ids" field.
func NoticeRoleIdsEQ(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNoticeRoleIds), v))
	})
}

// NoticeRoleIdsNEQ applies the NEQ predicate on the "notice_role_ids" field.
func NoticeRoleIdsNEQ(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNoticeRoleIds), v))
	})
}

// NoticeRoleIdsIn applies the In predicate on the "notice_role_ids" field.
func NoticeRoleIdsIn(vs ...string) predicate.AsMarketAppNotice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNoticeRoleIds), v...))
	})
}

// NoticeRoleIdsNotIn applies the NotIn predicate on the "notice_role_ids" field.
func NoticeRoleIdsNotIn(vs ...string) predicate.AsMarketAppNotice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNoticeRoleIds), v...))
	})
}

// NoticeRoleIdsGT applies the GT predicate on the "notice_role_ids" field.
func NoticeRoleIdsGT(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNoticeRoleIds), v))
	})
}

// NoticeRoleIdsGTE applies the GTE predicate on the "notice_role_ids" field.
func NoticeRoleIdsGTE(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNoticeRoleIds), v))
	})
}

// NoticeRoleIdsLT applies the LT predicate on the "notice_role_ids" field.
func NoticeRoleIdsLT(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNoticeRoleIds), v))
	})
}

// NoticeRoleIdsLTE applies the LTE predicate on the "notice_role_ids" field.
func NoticeRoleIdsLTE(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNoticeRoleIds), v))
	})
}

// NoticeRoleIdsContains applies the Contains predicate on the "notice_role_ids" field.
func NoticeRoleIdsContains(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNoticeRoleIds), v))
	})
}

// NoticeRoleIdsHasPrefix applies the HasPrefix predicate on the "notice_role_ids" field.
func NoticeRoleIdsHasPrefix(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNoticeRoleIds), v))
	})
}

// NoticeRoleIdsHasSuffix applies the HasSuffix predicate on the "notice_role_ids" field.
func NoticeRoleIdsHasSuffix(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNoticeRoleIds), v))
	})
}

// NoticeRoleIdsIsNil applies the IsNil predicate on the "notice_role_ids" field.
func NoticeRoleIdsIsNil() predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNoticeRoleIds)))
	})
}

// NoticeRoleIdsNotNil applies the NotNil predicate on the "notice_role_ids" field.
func NoticeRoleIdsNotNil() predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNoticeRoleIds)))
	})
}

// NoticeRoleIdsEqualFold applies the EqualFold predicate on the "notice_role_ids" field.
func NoticeRoleIdsEqualFold(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNoticeRoleIds), v))
	})
}

// NoticeRoleIdsContainsFold applies the ContainsFold predicate on the "notice_role_ids" field.
func NoticeRoleIdsContainsFold(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNoticeRoleIds), v))
	})
}

// NoticeUnitIdsEQ applies the EQ predicate on the "notice_unit_ids" field.
func NoticeUnitIdsEQ(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNoticeUnitIds), v))
	})
}

// NoticeUnitIdsNEQ applies the NEQ predicate on the "notice_unit_ids" field.
func NoticeUnitIdsNEQ(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNoticeUnitIds), v))
	})
}

// NoticeUnitIdsIn applies the In predicate on the "notice_unit_ids" field.
func NoticeUnitIdsIn(vs ...string) predicate.AsMarketAppNotice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNoticeUnitIds), v...))
	})
}

// NoticeUnitIdsNotIn applies the NotIn predicate on the "notice_unit_ids" field.
func NoticeUnitIdsNotIn(vs ...string) predicate.AsMarketAppNotice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNoticeUnitIds), v...))
	})
}

// NoticeUnitIdsGT applies the GT predicate on the "notice_unit_ids" field.
func NoticeUnitIdsGT(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNoticeUnitIds), v))
	})
}

// NoticeUnitIdsGTE applies the GTE predicate on the "notice_unit_ids" field.
func NoticeUnitIdsGTE(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNoticeUnitIds), v))
	})
}

// NoticeUnitIdsLT applies the LT predicate on the "notice_unit_ids" field.
func NoticeUnitIdsLT(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNoticeUnitIds), v))
	})
}

// NoticeUnitIdsLTE applies the LTE predicate on the "notice_unit_ids" field.
func NoticeUnitIdsLTE(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNoticeUnitIds), v))
	})
}

// NoticeUnitIdsContains applies the Contains predicate on the "notice_unit_ids" field.
func NoticeUnitIdsContains(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNoticeUnitIds), v))
	})
}

// NoticeUnitIdsHasPrefix applies the HasPrefix predicate on the "notice_unit_ids" field.
func NoticeUnitIdsHasPrefix(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNoticeUnitIds), v))
	})
}

// NoticeUnitIdsHasSuffix applies the HasSuffix predicate on the "notice_unit_ids" field.
func NoticeUnitIdsHasSuffix(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNoticeUnitIds), v))
	})
}

// NoticeUnitIdsIsNil applies the IsNil predicate on the "notice_unit_ids" field.
func NoticeUnitIdsIsNil() predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNoticeUnitIds)))
	})
}

// NoticeUnitIdsNotNil applies the NotNil predicate on the "notice_unit_ids" field.
func NoticeUnitIdsNotNil() predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNoticeUnitIds)))
	})
}

// NoticeUnitIdsEqualFold applies the EqualFold predicate on the "notice_unit_ids" field.
func NoticeUnitIdsEqualFold(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNoticeUnitIds), v))
	})
}

// NoticeUnitIdsContainsFold applies the ContainsFold predicate on the "notice_unit_ids" field.
func NoticeUnitIdsContainsFold(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNoticeUnitIds), v))
	})
}

// GroupOrUnitEQ applies the EQ predicate on the "group_or_unit" field.
func GroupOrUnitEQ(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGroupOrUnit), v))
	})
}

// GroupOrUnitNEQ applies the NEQ predicate on the "group_or_unit" field.
func GroupOrUnitNEQ(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGroupOrUnit), v))
	})
}

// GroupOrUnitIn applies the In predicate on the "group_or_unit" field.
func GroupOrUnitIn(vs ...int64) predicate.AsMarketAppNotice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGroupOrUnit), v...))
	})
}

// GroupOrUnitNotIn applies the NotIn predicate on the "group_or_unit" field.
func GroupOrUnitNotIn(vs ...int64) predicate.AsMarketAppNotice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGroupOrUnit), v...))
	})
}

// GroupOrUnitGT applies the GT predicate on the "group_or_unit" field.
func GroupOrUnitGT(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGroupOrUnit), v))
	})
}

// GroupOrUnitGTE applies the GTE predicate on the "group_or_unit" field.
func GroupOrUnitGTE(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGroupOrUnit), v))
	})
}

// GroupOrUnitLT applies the LT predicate on the "group_or_unit" field.
func GroupOrUnitLT(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGroupOrUnit), v))
	})
}

// GroupOrUnitLTE applies the LTE predicate on the "group_or_unit" field.
func GroupOrUnitLTE(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGroupOrUnit), v))
	})
}

// GroupOrUnitIsNil applies the IsNil predicate on the "group_or_unit" field.
func GroupOrUnitIsNil() predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldGroupOrUnit)))
	})
}

// GroupOrUnitNotNil applies the NotNil predicate on the "group_or_unit" field.
func GroupOrUnitNotNil() predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldGroupOrUnit)))
	})
}

// UnitQueryIdsEQ applies the EQ predicate on the "unit_query_ids" field.
func UnitQueryIdsEQ(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitQueryIds), v))
	})
}

// UnitQueryIdsNEQ applies the NEQ predicate on the "unit_query_ids" field.
func UnitQueryIdsNEQ(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnitQueryIds), v))
	})
}

// UnitQueryIdsIn applies the In predicate on the "unit_query_ids" field.
func UnitQueryIdsIn(vs ...string) predicate.AsMarketAppNotice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUnitQueryIds), v...))
	})
}

// UnitQueryIdsNotIn applies the NotIn predicate on the "unit_query_ids" field.
func UnitQueryIdsNotIn(vs ...string) predicate.AsMarketAppNotice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUnitQueryIds), v...))
	})
}

// UnitQueryIdsGT applies the GT predicate on the "unit_query_ids" field.
func UnitQueryIdsGT(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnitQueryIds), v))
	})
}

// UnitQueryIdsGTE applies the GTE predicate on the "unit_query_ids" field.
func UnitQueryIdsGTE(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnitQueryIds), v))
	})
}

// UnitQueryIdsLT applies the LT predicate on the "unit_query_ids" field.
func UnitQueryIdsLT(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnitQueryIds), v))
	})
}

// UnitQueryIdsLTE applies the LTE predicate on the "unit_query_ids" field.
func UnitQueryIdsLTE(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnitQueryIds), v))
	})
}

// UnitQueryIdsContains applies the Contains predicate on the "unit_query_ids" field.
func UnitQueryIdsContains(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUnitQueryIds), v))
	})
}

// UnitQueryIdsHasPrefix applies the HasPrefix predicate on the "unit_query_ids" field.
func UnitQueryIdsHasPrefix(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUnitQueryIds), v))
	})
}

// UnitQueryIdsHasSuffix applies the HasSuffix predicate on the "unit_query_ids" field.
func UnitQueryIdsHasSuffix(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUnitQueryIds), v))
	})
}

// UnitQueryIdsIsNil applies the IsNil predicate on the "unit_query_ids" field.
func UnitQueryIdsIsNil() predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUnitQueryIds)))
	})
}

// UnitQueryIdsNotNil applies the NotNil predicate on the "unit_query_ids" field.
func UnitQueryIdsNotNil() predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUnitQueryIds)))
	})
}

// UnitQueryIdsEqualFold applies the EqualFold predicate on the "unit_query_ids" field.
func UnitQueryIdsEqualFold(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUnitQueryIds), v))
	})
}

// UnitQueryIdsContainsFold applies the ContainsFold predicate on the "unit_query_ids" field.
func UnitQueryIdsContainsFold(v string) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUnitQueryIds), v))
	})
}

// IsDeletedEQ applies the EQ predicate on the "is_deleted" field.
func IsDeletedEQ(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedNEQ applies the NEQ predicate on the "is_deleted" field.
func IsDeletedNEQ(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedIn applies the In predicate on the "is_deleted" field.
func IsDeletedIn(vs ...int64) predicate.AsMarketAppNotice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsDeleted), v...))
	})
}

// IsDeletedNotIn applies the NotIn predicate on the "is_deleted" field.
func IsDeletedNotIn(vs ...int64) predicate.AsMarketAppNotice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsDeleted), v...))
	})
}

// IsDeletedGT applies the GT predicate on the "is_deleted" field.
func IsDeletedGT(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedGTE applies the GTE predicate on the "is_deleted" field.
func IsDeletedGTE(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedLT applies the LT predicate on the "is_deleted" field.
func IsDeletedLT(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedLTE applies the LTE predicate on the "is_deleted" field.
func IsDeletedLTE(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsDeleted), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int64) predicate.AsMarketAppNotice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int64) predicate.AsMarketAppNotice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStatus)))
	})
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStatus)))
	})
}

// CreateUserEQ applies the EQ predicate on the "create_user" field.
func CreateUserEQ(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateUser), v))
	})
}

// CreateUserNEQ applies the NEQ predicate on the "create_user" field.
func CreateUserNEQ(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateUser), v))
	})
}

// CreateUserIn applies the In predicate on the "create_user" field.
func CreateUserIn(vs ...int64) predicate.AsMarketAppNotice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateUser), v...))
	})
}

// CreateUserNotIn applies the NotIn predicate on the "create_user" field.
func CreateUserNotIn(vs ...int64) predicate.AsMarketAppNotice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateUser), v...))
	})
}

// CreateUserGT applies the GT predicate on the "create_user" field.
func CreateUserGT(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateUser), v))
	})
}

// CreateUserGTE applies the GTE predicate on the "create_user" field.
func CreateUserGTE(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateUser), v))
	})
}

// CreateUserLT applies the LT predicate on the "create_user" field.
func CreateUserLT(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateUser), v))
	})
}

// CreateUserLTE applies the LTE predicate on the "create_user" field.
func CreateUserLTE(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateUser), v))
	})
}

// CreateUserIsNil applies the IsNil predicate on the "create_user" field.
func CreateUserIsNil() predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreateUser)))
	})
}

// CreateUserNotNil applies the NotNil predicate on the "create_user" field.
func CreateUserNotNil() predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreateUser)))
	})
}

// UpdateUserEQ applies the EQ predicate on the "update_user" field.
func UpdateUserEQ(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserNEQ applies the NEQ predicate on the "update_user" field.
func UpdateUserNEQ(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserIn applies the In predicate on the "update_user" field.
func UpdateUserIn(vs ...int64) predicate.AsMarketAppNotice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateUser), v...))
	})
}

// UpdateUserNotIn applies the NotIn predicate on the "update_user" field.
func UpdateUserNotIn(vs ...int64) predicate.AsMarketAppNotice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateUser), v...))
	})
}

// UpdateUserGT applies the GT predicate on the "update_user" field.
func UpdateUserGT(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserGTE applies the GTE predicate on the "update_user" field.
func UpdateUserGTE(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserLT applies the LT predicate on the "update_user" field.
func UpdateUserLT(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserLTE applies the LTE predicate on the "update_user" field.
func UpdateUserLTE(v int64) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserIsNil applies the IsNil predicate on the "update_user" field.
func UpdateUserIsNil() predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdateUser)))
	})
}

// UpdateUserNotNil applies the NotNil predicate on the "update_user" field.
func UpdateUserNotNil() predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdateUser)))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v date.DateTime) predicate.AsMarketAppNotice {
	vc := time.Time(v)
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v date.DateTime) predicate.AsMarketAppNotice {
	vc := time.Time(v)
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...date.DateTime) predicate.AsMarketAppNotice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...date.DateTime) predicate.AsMarketAppNotice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v date.DateTime) predicate.AsMarketAppNotice {
	vc := time.Time(v)
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v date.DateTime) predicate.AsMarketAppNotice {
	vc := time.Time(v)
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v date.DateTime) predicate.AsMarketAppNotice {
	vc := time.Time(v)
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v date.DateTime) predicate.AsMarketAppNotice {
	vc := time.Time(v)
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeIsNil applies the IsNil predicate on the "create_time" field.
func CreateTimeIsNil() predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreateTime)))
	})
}

// CreateTimeNotNil applies the NotNil predicate on the "create_time" field.
func CreateTimeNotNil() predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreateTime)))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v date.DateTime) predicate.AsMarketAppNotice {
	vc := time.Time(v)
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v date.DateTime) predicate.AsMarketAppNotice {
	vc := time.Time(v)
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...date.DateTime) predicate.AsMarketAppNotice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...date.DateTime) predicate.AsMarketAppNotice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v date.DateTime) predicate.AsMarketAppNotice {
	vc := time.Time(v)
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v date.DateTime) predicate.AsMarketAppNotice {
	vc := time.Time(v)
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v date.DateTime) predicate.AsMarketAppNotice {
	vc := time.Time(v)
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v date.DateTime) predicate.AsMarketAppNotice {
	vc := time.Time(v)
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeIsNil applies the IsNil predicate on the "update_time" field.
func UpdateTimeIsNil() predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdateTime)))
	})
}

// UpdateTimeNotNil applies the NotNil predicate on the "update_time" field.
func UpdateTimeNotNil() predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdateTime)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AsMarketAppNotice) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AsMarketAppNotice) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AsMarketAppNotice) predicate.AsMarketAppNotice {
	return predicate.AsMarketAppNotice(func(s *sql.Selector) {
		p(s.Not())
	})
}
