// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/asmarketappcomponenttemplate"
	"orginone/common/schema/asmarketappusertemplate"
	"orginone/common/schema/asuser"
	"orginone/common/schema/predicate"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsMarketAppUserTemplateUpdate is the builder for updating AsMarketAppUserTemplate entities.
type AsMarketAppUserTemplateUpdate struct {
	config
	hooks    []Hook
	mutation *AsMarketAppUserTemplateMutation
}

// Where appends a list predicates to the AsMarketAppUserTemplateUpdate builder.
func (amautu *AsMarketAppUserTemplateUpdate) Where(ps ...predicate.AsMarketAppUserTemplate) *AsMarketAppUserTemplateUpdate {
	amautu.mutation.Where(ps...)
	return amautu
}

// SetUserID sets the "user_id" field.
func (amautu *AsMarketAppUserTemplateUpdate) SetUserID(i int64) *AsMarketAppUserTemplateUpdate {
	amautu.mutation.SetUserID(i)
	return amautu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (amautu *AsMarketAppUserTemplateUpdate) SetNillableUserID(i *int64) *AsMarketAppUserTemplateUpdate {
	if i != nil {
		amautu.SetUserID(*i)
	}
	return amautu
}

// ClearUserID clears the value of the "user_id" field.
func (amautu *AsMarketAppUserTemplateUpdate) ClearUserID() *AsMarketAppUserTemplateUpdate {
	amautu.mutation.ClearUserID()
	return amautu
}

// SetTemplateID sets the "template_id" field.
func (amautu *AsMarketAppUserTemplateUpdate) SetTemplateID(i int64) *AsMarketAppUserTemplateUpdate {
	amautu.mutation.SetTemplateID(i)
	return amautu
}

// SetNillableTemplateID sets the "template_id" field if the given value is not nil.
func (amautu *AsMarketAppUserTemplateUpdate) SetNillableTemplateID(i *int64) *AsMarketAppUserTemplateUpdate {
	if i != nil {
		amautu.SetTemplateID(*i)
	}
	return amautu
}

// ClearTemplateID clears the value of the "template_id" field.
func (amautu *AsMarketAppUserTemplateUpdate) ClearTemplateID() *AsMarketAppUserTemplateUpdate {
	amautu.mutation.ClearTemplateID()
	return amautu
}

// SetUseStatus sets the "use_status" field.
func (amautu *AsMarketAppUserTemplateUpdate) SetUseStatus(i int64) *AsMarketAppUserTemplateUpdate {
	amautu.mutation.ResetUseStatus()
	amautu.mutation.SetUseStatus(i)
	return amautu
}

// SetNillableUseStatus sets the "use_status" field if the given value is not nil.
func (amautu *AsMarketAppUserTemplateUpdate) SetNillableUseStatus(i *int64) *AsMarketAppUserTemplateUpdate {
	if i != nil {
		amautu.SetUseStatus(*i)
	}
	return amautu
}

// AddUseStatus adds i to the "use_status" field.
func (amautu *AsMarketAppUserTemplateUpdate) AddUseStatus(i int64) *AsMarketAppUserTemplateUpdate {
	amautu.mutation.AddUseStatus(i)
	return amautu
}

// ClearUseStatus clears the value of the "use_status" field.
func (amautu *AsMarketAppUserTemplateUpdate) ClearUseStatus() *AsMarketAppUserTemplateUpdate {
	amautu.mutation.ClearUseStatus()
	return amautu
}

// SetIsDeleted sets the "is_deleted" field.
func (amautu *AsMarketAppUserTemplateUpdate) SetIsDeleted(i int64) *AsMarketAppUserTemplateUpdate {
	amautu.mutation.ResetIsDeleted()
	amautu.mutation.SetIsDeleted(i)
	return amautu
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (amautu *AsMarketAppUserTemplateUpdate) SetNillableIsDeleted(i *int64) *AsMarketAppUserTemplateUpdate {
	if i != nil {
		amautu.SetIsDeleted(*i)
	}
	return amautu
}

// AddIsDeleted adds i to the "is_deleted" field.
func (amautu *AsMarketAppUserTemplateUpdate) AddIsDeleted(i int64) *AsMarketAppUserTemplateUpdate {
	amautu.mutation.AddIsDeleted(i)
	return amautu
}

// SetStatus sets the "status" field.
func (amautu *AsMarketAppUserTemplateUpdate) SetStatus(i int64) *AsMarketAppUserTemplateUpdate {
	amautu.mutation.ResetStatus()
	amautu.mutation.SetStatus(i)
	return amautu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (amautu *AsMarketAppUserTemplateUpdate) SetNillableStatus(i *int64) *AsMarketAppUserTemplateUpdate {
	if i != nil {
		amautu.SetStatus(*i)
	}
	return amautu
}

// AddStatus adds i to the "status" field.
func (amautu *AsMarketAppUserTemplateUpdate) AddStatus(i int64) *AsMarketAppUserTemplateUpdate {
	amautu.mutation.AddStatus(i)
	return amautu
}

// ClearStatus clears the value of the "status" field.
func (amautu *AsMarketAppUserTemplateUpdate) ClearStatus() *AsMarketAppUserTemplateUpdate {
	amautu.mutation.ClearStatus()
	return amautu
}

// SetCreateUser sets the "create_user" field.
func (amautu *AsMarketAppUserTemplateUpdate) SetCreateUser(i int64) *AsMarketAppUserTemplateUpdate {
	amautu.mutation.ResetCreateUser()
	amautu.mutation.SetCreateUser(i)
	return amautu
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (amautu *AsMarketAppUserTemplateUpdate) SetNillableCreateUser(i *int64) *AsMarketAppUserTemplateUpdate {
	if i != nil {
		amautu.SetCreateUser(*i)
	}
	return amautu
}

// AddCreateUser adds i to the "create_user" field.
func (amautu *AsMarketAppUserTemplateUpdate) AddCreateUser(i int64) *AsMarketAppUserTemplateUpdate {
	amautu.mutation.AddCreateUser(i)
	return amautu
}

// ClearCreateUser clears the value of the "create_user" field.
func (amautu *AsMarketAppUserTemplateUpdate) ClearCreateUser() *AsMarketAppUserTemplateUpdate {
	amautu.mutation.ClearCreateUser()
	return amautu
}

// SetUpdateUser sets the "update_user" field.
func (amautu *AsMarketAppUserTemplateUpdate) SetUpdateUser(i int64) *AsMarketAppUserTemplateUpdate {
	amautu.mutation.ResetUpdateUser()
	amautu.mutation.SetUpdateUser(i)
	return amautu
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (amautu *AsMarketAppUserTemplateUpdate) SetNillableUpdateUser(i *int64) *AsMarketAppUserTemplateUpdate {
	if i != nil {
		amautu.SetUpdateUser(*i)
	}
	return amautu
}

// AddUpdateUser adds i to the "update_user" field.
func (amautu *AsMarketAppUserTemplateUpdate) AddUpdateUser(i int64) *AsMarketAppUserTemplateUpdate {
	amautu.mutation.AddUpdateUser(i)
	return amautu
}

// ClearUpdateUser clears the value of the "update_user" field.
func (amautu *AsMarketAppUserTemplateUpdate) ClearUpdateUser() *AsMarketAppUserTemplateUpdate {
	amautu.mutation.ClearUpdateUser()
	return amautu
}

// SetUpdateTime sets the "update_time" field.
func (amautu *AsMarketAppUserTemplateUpdate) SetUpdateTime(dt date.DateTime) *AsMarketAppUserTemplateUpdate {
	amautu.mutation.SetUpdateTime(dt)
	return amautu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (amautu *AsMarketAppUserTemplateUpdate) ClearUpdateTime() *AsMarketAppUserTemplateUpdate {
	amautu.mutation.ClearUpdateTime()
	return amautu
}

// SetUserxID sets the "userx" edge to the AsUser entity by ID.
func (amautu *AsMarketAppUserTemplateUpdate) SetUserxID(id int64) *AsMarketAppUserTemplateUpdate {
	amautu.mutation.SetUserxID(id)
	return amautu
}

// SetNillableUserxID sets the "userx" edge to the AsUser entity by ID if the given value is not nil.
func (amautu *AsMarketAppUserTemplateUpdate) SetNillableUserxID(id *int64) *AsMarketAppUserTemplateUpdate {
	if id != nil {
		amautu = amautu.SetUserxID(*id)
	}
	return amautu
}

// SetUserx sets the "userx" edge to the AsUser entity.
func (amautu *AsMarketAppUserTemplateUpdate) SetUserx(a *AsUser) *AsMarketAppUserTemplateUpdate {
	return amautu.SetUserxID(a.ID)
}

// SetTemplatexID sets the "templatex" edge to the AsMarketAppComponentTemplate entity by ID.
func (amautu *AsMarketAppUserTemplateUpdate) SetTemplatexID(id int64) *AsMarketAppUserTemplateUpdate {
	amautu.mutation.SetTemplatexID(id)
	return amautu
}

// SetNillableTemplatexID sets the "templatex" edge to the AsMarketAppComponentTemplate entity by ID if the given value is not nil.
func (amautu *AsMarketAppUserTemplateUpdate) SetNillableTemplatexID(id *int64) *AsMarketAppUserTemplateUpdate {
	if id != nil {
		amautu = amautu.SetTemplatexID(*id)
	}
	return amautu
}

// SetTemplatex sets the "templatex" edge to the AsMarketAppComponentTemplate entity.
func (amautu *AsMarketAppUserTemplateUpdate) SetTemplatex(a *AsMarketAppComponentTemplate) *AsMarketAppUserTemplateUpdate {
	return amautu.SetTemplatexID(a.ID)
}

// Mutation returns the AsMarketAppUserTemplateMutation object of the builder.
func (amautu *AsMarketAppUserTemplateUpdate) Mutation() *AsMarketAppUserTemplateMutation {
	return amautu.mutation
}

// ClearUserx clears the "userx" edge to the AsUser entity.
func (amautu *AsMarketAppUserTemplateUpdate) ClearUserx() *AsMarketAppUserTemplateUpdate {
	amautu.mutation.ClearUserx()
	return amautu
}

// ClearTemplatex clears the "templatex" edge to the AsMarketAppComponentTemplate entity.
func (amautu *AsMarketAppUserTemplateUpdate) ClearTemplatex() *AsMarketAppUserTemplateUpdate {
	amautu.mutation.ClearTemplatex()
	return amautu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (amautu *AsMarketAppUserTemplateUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	amautu.defaults()
	if len(amautu.hooks) == 0 {
		affected, err = amautu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsMarketAppUserTemplateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			amautu.mutation = mutation
			affected, err = amautu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(amautu.hooks) - 1; i >= 0; i-- {
			if amautu.hooks[i] == nil {
				return 0, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = amautu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, amautu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (amautu *AsMarketAppUserTemplateUpdate) SaveX(ctx context.Context) int {
	affected, err := amautu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (amautu *AsMarketAppUserTemplateUpdate) Exec(ctx context.Context) error {
	_, err := amautu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amautu *AsMarketAppUserTemplateUpdate) ExecX(ctx context.Context) {
	if err := amautu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amautu *AsMarketAppUserTemplateUpdate) defaults() {
	if _, ok := amautu.mutation.UpdateTime(); !ok && !amautu.mutation.UpdateTimeCleared() {
		v := asmarketappusertemplate.UpdateDefaultUpdateTime()
		amautu.mutation.SetUpdateTime(v)
	}
}

func (amautu *AsMarketAppUserTemplateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asmarketappusertemplate.Table,
			Columns: asmarketappusertemplate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asmarketappusertemplate.FieldID,
			},
		},
	}
	if ps := amautu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amautu.mutation.UseStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappusertemplate.FieldUseStatus,
		})
	}
	if value, ok := amautu.mutation.AddedUseStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappusertemplate.FieldUseStatus,
		})
	}
	if amautu.mutation.UseStatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappusertemplate.FieldUseStatus,
		})
	}
	if value, ok := amautu.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappusertemplate.FieldIsDeleted,
		})
	}
	if value, ok := amautu.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappusertemplate.FieldIsDeleted,
		})
	}
	if value, ok := amautu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappusertemplate.FieldStatus,
		})
	}
	if value, ok := amautu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappusertemplate.FieldStatus,
		})
	}
	if amautu.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappusertemplate.FieldStatus,
		})
	}
	if value, ok := amautu.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappusertemplate.FieldCreateUser,
		})
	}
	if value, ok := amautu.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappusertemplate.FieldCreateUser,
		})
	}
	if amautu.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappusertemplate.FieldCreateUser,
		})
	}
	if value, ok := amautu.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappusertemplate.FieldUpdateUser,
		})
	}
	if value, ok := amautu.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappusertemplate.FieldUpdateUser,
		})
	}
	if amautu.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappusertemplate.FieldUpdateUser,
		})
	}
	if amautu.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketappusertemplate.FieldCreateTime,
		})
	}
	if value, ok := amautu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketappusertemplate.FieldUpdateTime,
		})
	}
	if amautu.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketappusertemplate.FieldUpdateTime,
		})
	}
	if amautu.mutation.UserxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketappusertemplate.UserxTable,
			Columns: []string{asmarketappusertemplate.UserxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amautu.mutation.UserxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketappusertemplate.UserxTable,
			Columns: []string{asmarketappusertemplate.UserxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amautu.mutation.TemplatexCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketappusertemplate.TemplatexTable,
			Columns: []string{asmarketappusertemplate.TemplatexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappcomponenttemplate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amautu.mutation.TemplatexIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketappusertemplate.TemplatexTable,
			Columns: []string{asmarketappusertemplate.TemplatexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappcomponenttemplate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, amautu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asmarketappusertemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AsMarketAppUserTemplateUpdateOne is the builder for updating a single AsMarketAppUserTemplate entity.
type AsMarketAppUserTemplateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AsMarketAppUserTemplateMutation
}

// SetUserID sets the "user_id" field.
func (amautuo *AsMarketAppUserTemplateUpdateOne) SetUserID(i int64) *AsMarketAppUserTemplateUpdateOne {
	amautuo.mutation.SetUserID(i)
	return amautuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (amautuo *AsMarketAppUserTemplateUpdateOne) SetNillableUserID(i *int64) *AsMarketAppUserTemplateUpdateOne {
	if i != nil {
		amautuo.SetUserID(*i)
	}
	return amautuo
}

// ClearUserID clears the value of the "user_id" field.
func (amautuo *AsMarketAppUserTemplateUpdateOne) ClearUserID() *AsMarketAppUserTemplateUpdateOne {
	amautuo.mutation.ClearUserID()
	return amautuo
}

// SetTemplateID sets the "template_id" field.
func (amautuo *AsMarketAppUserTemplateUpdateOne) SetTemplateID(i int64) *AsMarketAppUserTemplateUpdateOne {
	amautuo.mutation.SetTemplateID(i)
	return amautuo
}

// SetNillableTemplateID sets the "template_id" field if the given value is not nil.
func (amautuo *AsMarketAppUserTemplateUpdateOne) SetNillableTemplateID(i *int64) *AsMarketAppUserTemplateUpdateOne {
	if i != nil {
		amautuo.SetTemplateID(*i)
	}
	return amautuo
}

// ClearTemplateID clears the value of the "template_id" field.
func (amautuo *AsMarketAppUserTemplateUpdateOne) ClearTemplateID() *AsMarketAppUserTemplateUpdateOne {
	amautuo.mutation.ClearTemplateID()
	return amautuo
}

// SetUseStatus sets the "use_status" field.
func (amautuo *AsMarketAppUserTemplateUpdateOne) SetUseStatus(i int64) *AsMarketAppUserTemplateUpdateOne {
	amautuo.mutation.ResetUseStatus()
	amautuo.mutation.SetUseStatus(i)
	return amautuo
}

// SetNillableUseStatus sets the "use_status" field if the given value is not nil.
func (amautuo *AsMarketAppUserTemplateUpdateOne) SetNillableUseStatus(i *int64) *AsMarketAppUserTemplateUpdateOne {
	if i != nil {
		amautuo.SetUseStatus(*i)
	}
	return amautuo
}

// AddUseStatus adds i to the "use_status" field.
func (amautuo *AsMarketAppUserTemplateUpdateOne) AddUseStatus(i int64) *AsMarketAppUserTemplateUpdateOne {
	amautuo.mutation.AddUseStatus(i)
	return amautuo
}

// ClearUseStatus clears the value of the "use_status" field.
func (amautuo *AsMarketAppUserTemplateUpdateOne) ClearUseStatus() *AsMarketAppUserTemplateUpdateOne {
	amautuo.mutation.ClearUseStatus()
	return amautuo
}

// SetIsDeleted sets the "is_deleted" field.
func (amautuo *AsMarketAppUserTemplateUpdateOne) SetIsDeleted(i int64) *AsMarketAppUserTemplateUpdateOne {
	amautuo.mutation.ResetIsDeleted()
	amautuo.mutation.SetIsDeleted(i)
	return amautuo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (amautuo *AsMarketAppUserTemplateUpdateOne) SetNillableIsDeleted(i *int64) *AsMarketAppUserTemplateUpdateOne {
	if i != nil {
		amautuo.SetIsDeleted(*i)
	}
	return amautuo
}

// AddIsDeleted adds i to the "is_deleted" field.
func (amautuo *AsMarketAppUserTemplateUpdateOne) AddIsDeleted(i int64) *AsMarketAppUserTemplateUpdateOne {
	amautuo.mutation.AddIsDeleted(i)
	return amautuo
}

// SetStatus sets the "status" field.
func (amautuo *AsMarketAppUserTemplateUpdateOne) SetStatus(i int64) *AsMarketAppUserTemplateUpdateOne {
	amautuo.mutation.ResetStatus()
	amautuo.mutation.SetStatus(i)
	return amautuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (amautuo *AsMarketAppUserTemplateUpdateOne) SetNillableStatus(i *int64) *AsMarketAppUserTemplateUpdateOne {
	if i != nil {
		amautuo.SetStatus(*i)
	}
	return amautuo
}

// AddStatus adds i to the "status" field.
func (amautuo *AsMarketAppUserTemplateUpdateOne) AddStatus(i int64) *AsMarketAppUserTemplateUpdateOne {
	amautuo.mutation.AddStatus(i)
	return amautuo
}

// ClearStatus clears the value of the "status" field.
func (amautuo *AsMarketAppUserTemplateUpdateOne) ClearStatus() *AsMarketAppUserTemplateUpdateOne {
	amautuo.mutation.ClearStatus()
	return amautuo
}

// SetCreateUser sets the "create_user" field.
func (amautuo *AsMarketAppUserTemplateUpdateOne) SetCreateUser(i int64) *AsMarketAppUserTemplateUpdateOne {
	amautuo.mutation.ResetCreateUser()
	amautuo.mutation.SetCreateUser(i)
	return amautuo
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (amautuo *AsMarketAppUserTemplateUpdateOne) SetNillableCreateUser(i *int64) *AsMarketAppUserTemplateUpdateOne {
	if i != nil {
		amautuo.SetCreateUser(*i)
	}
	return amautuo
}

// AddCreateUser adds i to the "create_user" field.
func (amautuo *AsMarketAppUserTemplateUpdateOne) AddCreateUser(i int64) *AsMarketAppUserTemplateUpdateOne {
	amautuo.mutation.AddCreateUser(i)
	return amautuo
}

// ClearCreateUser clears the value of the "create_user" field.
func (amautuo *AsMarketAppUserTemplateUpdateOne) ClearCreateUser() *AsMarketAppUserTemplateUpdateOne {
	amautuo.mutation.ClearCreateUser()
	return amautuo
}

// SetUpdateUser sets the "update_user" field.
func (amautuo *AsMarketAppUserTemplateUpdateOne) SetUpdateUser(i int64) *AsMarketAppUserTemplateUpdateOne {
	amautuo.mutation.ResetUpdateUser()
	amautuo.mutation.SetUpdateUser(i)
	return amautuo
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (amautuo *AsMarketAppUserTemplateUpdateOne) SetNillableUpdateUser(i *int64) *AsMarketAppUserTemplateUpdateOne {
	if i != nil {
		amautuo.SetUpdateUser(*i)
	}
	return amautuo
}

// AddUpdateUser adds i to the "update_user" field.
func (amautuo *AsMarketAppUserTemplateUpdateOne) AddUpdateUser(i int64) *AsMarketAppUserTemplateUpdateOne {
	amautuo.mutation.AddUpdateUser(i)
	return amautuo
}

// ClearUpdateUser clears the value of the "update_user" field.
func (amautuo *AsMarketAppUserTemplateUpdateOne) ClearUpdateUser() *AsMarketAppUserTemplateUpdateOne {
	amautuo.mutation.ClearUpdateUser()
	return amautuo
}

// SetUpdateTime sets the "update_time" field.
func (amautuo *AsMarketAppUserTemplateUpdateOne) SetUpdateTime(dt date.DateTime) *AsMarketAppUserTemplateUpdateOne {
	amautuo.mutation.SetUpdateTime(dt)
	return amautuo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (amautuo *AsMarketAppUserTemplateUpdateOne) ClearUpdateTime() *AsMarketAppUserTemplateUpdateOne {
	amautuo.mutation.ClearUpdateTime()
	return amautuo
}

// SetUserxID sets the "userx" edge to the AsUser entity by ID.
func (amautuo *AsMarketAppUserTemplateUpdateOne) SetUserxID(id int64) *AsMarketAppUserTemplateUpdateOne {
	amautuo.mutation.SetUserxID(id)
	return amautuo
}

// SetNillableUserxID sets the "userx" edge to the AsUser entity by ID if the given value is not nil.
func (amautuo *AsMarketAppUserTemplateUpdateOne) SetNillableUserxID(id *int64) *AsMarketAppUserTemplateUpdateOne {
	if id != nil {
		amautuo = amautuo.SetUserxID(*id)
	}
	return amautuo
}

// SetUserx sets the "userx" edge to the AsUser entity.
func (amautuo *AsMarketAppUserTemplateUpdateOne) SetUserx(a *AsUser) *AsMarketAppUserTemplateUpdateOne {
	return amautuo.SetUserxID(a.ID)
}

// SetTemplatexID sets the "templatex" edge to the AsMarketAppComponentTemplate entity by ID.
func (amautuo *AsMarketAppUserTemplateUpdateOne) SetTemplatexID(id int64) *AsMarketAppUserTemplateUpdateOne {
	amautuo.mutation.SetTemplatexID(id)
	return amautuo
}

// SetNillableTemplatexID sets the "templatex" edge to the AsMarketAppComponentTemplate entity by ID if the given value is not nil.
func (amautuo *AsMarketAppUserTemplateUpdateOne) SetNillableTemplatexID(id *int64) *AsMarketAppUserTemplateUpdateOne {
	if id != nil {
		amautuo = amautuo.SetTemplatexID(*id)
	}
	return amautuo
}

// SetTemplatex sets the "templatex" edge to the AsMarketAppComponentTemplate entity.
func (amautuo *AsMarketAppUserTemplateUpdateOne) SetTemplatex(a *AsMarketAppComponentTemplate) *AsMarketAppUserTemplateUpdateOne {
	return amautuo.SetTemplatexID(a.ID)
}

// Mutation returns the AsMarketAppUserTemplateMutation object of the builder.
func (amautuo *AsMarketAppUserTemplateUpdateOne) Mutation() *AsMarketAppUserTemplateMutation {
	return amautuo.mutation
}

// ClearUserx clears the "userx" edge to the AsUser entity.
func (amautuo *AsMarketAppUserTemplateUpdateOne) ClearUserx() *AsMarketAppUserTemplateUpdateOne {
	amautuo.mutation.ClearUserx()
	return amautuo
}

// ClearTemplatex clears the "templatex" edge to the AsMarketAppComponentTemplate entity.
func (amautuo *AsMarketAppUserTemplateUpdateOne) ClearTemplatex() *AsMarketAppUserTemplateUpdateOne {
	amautuo.mutation.ClearTemplatex()
	return amautuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (amautuo *AsMarketAppUserTemplateUpdateOne) Select(field string, fields ...string) *AsMarketAppUserTemplateUpdateOne {
	amautuo.fields = append([]string{field}, fields...)
	return amautuo
}

// Save executes the query and returns the updated AsMarketAppUserTemplate entity.
func (amautuo *AsMarketAppUserTemplateUpdateOne) Save(ctx context.Context) (*AsMarketAppUserTemplate, error) {
	var (
		err  error
		node *AsMarketAppUserTemplate
	)
	amautuo.defaults()
	if len(amautuo.hooks) == 0 {
		node, err = amautuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsMarketAppUserTemplateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			amautuo.mutation = mutation
			node, err = amautuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(amautuo.hooks) - 1; i >= 0; i-- {
			if amautuo.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = amautuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, amautuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (amautuo *AsMarketAppUserTemplateUpdateOne) SaveX(ctx context.Context) *AsMarketAppUserTemplate {
	node, err := amautuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (amautuo *AsMarketAppUserTemplateUpdateOne) Exec(ctx context.Context) error {
	_, err := amautuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amautuo *AsMarketAppUserTemplateUpdateOne) ExecX(ctx context.Context) {
	if err := amautuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amautuo *AsMarketAppUserTemplateUpdateOne) defaults() {
	if _, ok := amautuo.mutation.UpdateTime(); !ok && !amautuo.mutation.UpdateTimeCleared() {
		v := asmarketappusertemplate.UpdateDefaultUpdateTime()
		amautuo.mutation.SetUpdateTime(v)
	}
}

func (amautuo *AsMarketAppUserTemplateUpdateOne) sqlSave(ctx context.Context) (_node *AsMarketAppUserTemplate, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asmarketappusertemplate.Table,
			Columns: asmarketappusertemplate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asmarketappusertemplate.FieldID,
			},
		},
	}
	id, ok := amautuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`schema: missing "AsMarketAppUserTemplate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := amautuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asmarketappusertemplate.FieldID)
		for _, f := range fields {
			if !asmarketappusertemplate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("schema: invalid field %q for query", f)}
			}
			if f != asmarketappusertemplate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := amautuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amautuo.mutation.UseStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappusertemplate.FieldUseStatus,
		})
	}
	if value, ok := amautuo.mutation.AddedUseStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappusertemplate.FieldUseStatus,
		})
	}
	if amautuo.mutation.UseStatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappusertemplate.FieldUseStatus,
		})
	}
	if value, ok := amautuo.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappusertemplate.FieldIsDeleted,
		})
	}
	if value, ok := amautuo.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappusertemplate.FieldIsDeleted,
		})
	}
	if value, ok := amautuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappusertemplate.FieldStatus,
		})
	}
	if value, ok := amautuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappusertemplate.FieldStatus,
		})
	}
	if amautuo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappusertemplate.FieldStatus,
		})
	}
	if value, ok := amautuo.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappusertemplate.FieldCreateUser,
		})
	}
	if value, ok := amautuo.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappusertemplate.FieldCreateUser,
		})
	}
	if amautuo.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappusertemplate.FieldCreateUser,
		})
	}
	if value, ok := amautuo.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappusertemplate.FieldUpdateUser,
		})
	}
	if value, ok := amautuo.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappusertemplate.FieldUpdateUser,
		})
	}
	if amautuo.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappusertemplate.FieldUpdateUser,
		})
	}
	if amautuo.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketappusertemplate.FieldCreateTime,
		})
	}
	if value, ok := amautuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketappusertemplate.FieldUpdateTime,
		})
	}
	if amautuo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketappusertemplate.FieldUpdateTime,
		})
	}
	if amautuo.mutation.UserxCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketappusertemplate.UserxTable,
			Columns: []string{asmarketappusertemplate.UserxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amautuo.mutation.UserxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketappusertemplate.UserxTable,
			Columns: []string{asmarketappusertemplate.UserxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amautuo.mutation.TemplatexCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketappusertemplate.TemplatexTable,
			Columns: []string{asmarketappusertemplate.TemplatexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappcomponenttemplate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amautuo.mutation.TemplatexIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketappusertemplate.TemplatexTable,
			Columns: []string{asmarketappusertemplate.TemplatexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappcomponenttemplate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AsMarketAppUserTemplate{config: amautuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, amautuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asmarketappusertemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
