// Code generated by entc, DO NOT EDIT.

package asallgroup

import (
	"orginone/common/tools/date"
)

const (
	// Label holds the string label denoting the asallgroup type in the database.
	Label = "as_all_group"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantCode holds the string denoting the tenant_code field in the database.
	FieldTenantCode = "tenant_code"
	// FieldGroupName holds the string denoting the group_name field in the database.
	FieldGroupName = "group_name"
	// FieldGroupDescription holds the string denoting the group_description field in the database.
	FieldGroupDescription = "group_description"
	// FieldGroupCode holds the string denoting the group_code field in the database.
	FieldGroupCode = "group_code"
	// FieldDepth holds the string denoting the depth field in the database.
	FieldDepth = "depth"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldSocialCreditCode holds the string denoting the social_credit_code field in the database.
	FieldSocialCreditCode = "social_credit_code"
	// FieldIsDeleted holds the string denoting the is_deleted field in the database.
	FieldIsDeleted = "is_deleted"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreateUser holds the string denoting the create_user field in the database.
	FieldCreateUser = "create_user"
	// FieldUpdateUser holds the string denoting the update_user field in the database.
	FieldUpdateUser = "update_user"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// EdgeAllLayer holds the string denoting the alllayer edge name in mutations.
	EdgeAllLayer = "allLayer"
	// EdgeAppPurchases holds the string denoting the apppurchases edge name in mutations.
	EdgeAppPurchases = "appPurchases"
	// EdgeAllTenants holds the string denoting the alltenants edge name in mutations.
	EdgeAllTenants = "allTenants"
	// EdgeAppGroupDistribs holds the string denoting the appgroupdistribs edge name in mutations.
	EdgeAppGroupDistribs = "appGroupDistribs"
	// EdgeAppGroupDistribConfigs holds the string denoting the appgroupdistribconfigs edge name in mutations.
	EdgeAppGroupDistribConfigs = "appGroupDistribConfigs"
	// EdgeAppGroupDistribsRelation holds the string denoting the appgroupdistribsrelation edge name in mutations.
	EdgeAppGroupDistribsRelation = "appGroupDistribsRelation"
	// Table holds the table name of the asallgroup in the database.
	Table = "as_all_group"
	// AllLayerTable is the table that holds the allLayer relation/edge.
	AllLayerTable = "as_layer"
	// AllLayerInverseTable is the table name for the AsLayer entity.
	// It exists in this package in order to avoid circular dependency with the "aslayer" package.
	AllLayerInverseTable = "as_layer"
	// AllLayerColumn is the table column denoting the allLayer relation/edge.
	AllLayerColumn = "group_id"
	// AppPurchasesTable is the table that holds the appPurchases relation/edge.
	AppPurchasesTable = "as_market_app_purchase"
	// AppPurchasesInverseTable is the table name for the AsMarketAppPurchase entity.
	// It exists in this package in order to avoid circular dependency with the "asmarketapppurchase" package.
	AppPurchasesInverseTable = "as_market_app_purchase"
	// AppPurchasesColumn is the table column denoting the appPurchases relation/edge.
	AppPurchasesColumn = "group_id"
	// AllTenantsTable is the table that holds the allTenants relation/edge.
	AllTenantsTable = "as_group_tenant_relations"
	// AllTenantsInverseTable is the table name for the AsGroupTenantRelations entity.
	// It exists in this package in order to avoid circular dependency with the "asgrouptenantrelations" package.
	AllTenantsInverseTable = "as_group_tenant_relations"
	// AllTenantsColumn is the table column denoting the allTenants relation/edge.
	AllTenantsColumn = "parent_id"
	// AppGroupDistribsTable is the table that holds the appGroupDistribs relation/edge.
	AppGroupDistribsTable = "as_market_app_group_distribution"
	// AppGroupDistribsInverseTable is the table name for the AsMarketAppGroupDistribution entity.
	// It exists in this package in order to avoid circular dependency with the "asmarketappgroupdistribution" package.
	AppGroupDistribsInverseTable = "as_market_app_group_distribution"
	// AppGroupDistribsColumn is the table column denoting the appGroupDistribs relation/edge.
	AppGroupDistribsColumn = "group_id"
	// AppGroupDistribConfigsTable is the table that holds the appGroupDistribConfigs relation/edge.
	AppGroupDistribConfigsTable = "as_app_group_distribution_data"
	// AppGroupDistribConfigsInverseTable is the table name for the AsAppGroupDistributionData entity.
	// It exists in this package in order to avoid circular dependency with the "asappgroupdistributiondata" package.
	AppGroupDistribConfigsInverseTable = "as_app_group_distribution_data"
	// AppGroupDistribConfigsColumn is the table column denoting the appGroupDistribConfigs relation/edge.
	AppGroupDistribConfigsColumn = "group_id"
	// AppGroupDistribsRelationTable is the table that holds the appGroupDistribsRelation relation/edge.
	AppGroupDistribsRelationTable = "as_market_app_group_distribution_relation"
	// AppGroupDistribsRelationInverseTable is the table name for the AsMarketAppGroupDistributionRelation entity.
	// It exists in this package in order to avoid circular dependency with the "asmarketappgroupdistributionrelation" package.
	AppGroupDistribsRelationInverseTable = "as_market_app_group_distribution_relation"
	// AppGroupDistribsRelationColumn is the table column denoting the appGroupDistribsRelation relation/edge.
	AppGroupDistribsRelationColumn = "group_id"
)

// Columns holds all SQL columns for asallgroup fields.
var Columns = []string{
	FieldID,
	FieldTenantCode,
	FieldGroupName,
	FieldGroupDescription,
	FieldGroupCode,
	FieldDepth,
	FieldType,
	FieldSocialCreditCode,
	FieldIsDeleted,
	FieldStatus,
	FieldCreateUser,
	FieldUpdateUser,
	FieldCreateTime,
	FieldUpdateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultDepth holds the default value on creation for the "depth" field.
	DefaultDepth int64
	// DefaultType holds the default value on creation for the "type" field.
	DefaultType int64
	// DefaultIsDeleted holds the default value on creation for the "is_deleted" field.
	DefaultIsDeleted int64
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int64
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() date.DateTime
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() date.DateTime
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() date.DateTime
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() int64
)
