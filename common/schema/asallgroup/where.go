// Code generated by entc, DO NOT EDIT.

package asallgroup

import (
	"orginone/common/schema/predicate"
	"orginone/common/tools/date"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// TenantCode applies equality check predicate on the "tenant_code" field. It's identical to TenantCodeEQ.
func TenantCode(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantCode), v))
	})
}

// GroupName applies equality check predicate on the "group_name" field. It's identical to GroupNameEQ.
func GroupName(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGroupName), v))
	})
}

// GroupDescription applies equality check predicate on the "group_description" field. It's identical to GroupDescriptionEQ.
func GroupDescription(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGroupDescription), v))
	})
}

// GroupCode applies equality check predicate on the "group_code" field. It's identical to GroupCodeEQ.
func GroupCode(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGroupCode), v))
	})
}

// Depth applies equality check predicate on the "depth" field. It's identical to DepthEQ.
func Depth(v int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDepth), v))
	})
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// SocialCreditCode applies equality check predicate on the "social_credit_code" field. It's identical to SocialCreditCodeEQ.
func SocialCreditCode(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSocialCreditCode), v))
	})
}

// IsDeleted applies equality check predicate on the "is_deleted" field. It's identical to IsDeletedEQ.
func IsDeleted(v int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDeleted), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// CreateUser applies equality check predicate on the "create_user" field. It's identical to CreateUserEQ.
func CreateUser(v int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateUser), v))
	})
}

// UpdateUser applies equality check predicate on the "update_user" field. It's identical to UpdateUserEQ.
func UpdateUser(v int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateUser), v))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v date.DateTime) predicate.AsAllGroup {
	vc := time.Time(v)
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), vc))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v date.DateTime) predicate.AsAllGroup {
	vc := time.Time(v)
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), vc))
	})
}

// TenantCodeEQ applies the EQ predicate on the "tenant_code" field.
func TenantCodeEQ(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantCode), v))
	})
}

// TenantCodeNEQ applies the NEQ predicate on the "tenant_code" field.
func TenantCodeNEQ(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantCode), v))
	})
}

// TenantCodeIn applies the In predicate on the "tenant_code" field.
func TenantCodeIn(vs ...string) predicate.AsAllGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsAllGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantCode), v...))
	})
}

// TenantCodeNotIn applies the NotIn predicate on the "tenant_code" field.
func TenantCodeNotIn(vs ...string) predicate.AsAllGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsAllGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantCode), v...))
	})
}

// TenantCodeGT applies the GT predicate on the "tenant_code" field.
func TenantCodeGT(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantCode), v))
	})
}

// TenantCodeGTE applies the GTE predicate on the "tenant_code" field.
func TenantCodeGTE(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantCode), v))
	})
}

// TenantCodeLT applies the LT predicate on the "tenant_code" field.
func TenantCodeLT(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantCode), v))
	})
}

// TenantCodeLTE applies the LTE predicate on the "tenant_code" field.
func TenantCodeLTE(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantCode), v))
	})
}

// TenantCodeContains applies the Contains predicate on the "tenant_code" field.
func TenantCodeContains(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTenantCode), v))
	})
}

// TenantCodeHasPrefix applies the HasPrefix predicate on the "tenant_code" field.
func TenantCodeHasPrefix(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTenantCode), v))
	})
}

// TenantCodeHasSuffix applies the HasSuffix predicate on the "tenant_code" field.
func TenantCodeHasSuffix(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTenantCode), v))
	})
}

// TenantCodeIsNil applies the IsNil predicate on the "tenant_code" field.
func TenantCodeIsNil() predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTenantCode)))
	})
}

// TenantCodeNotNil applies the NotNil predicate on the "tenant_code" field.
func TenantCodeNotNil() predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTenantCode)))
	})
}

// TenantCodeEqualFold applies the EqualFold predicate on the "tenant_code" field.
func TenantCodeEqualFold(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTenantCode), v))
	})
}

// TenantCodeContainsFold applies the ContainsFold predicate on the "tenant_code" field.
func TenantCodeContainsFold(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTenantCode), v))
	})
}

// GroupNameEQ applies the EQ predicate on the "group_name" field.
func GroupNameEQ(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGroupName), v))
	})
}

// GroupNameNEQ applies the NEQ predicate on the "group_name" field.
func GroupNameNEQ(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGroupName), v))
	})
}

// GroupNameIn applies the In predicate on the "group_name" field.
func GroupNameIn(vs ...string) predicate.AsAllGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsAllGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGroupName), v...))
	})
}

// GroupNameNotIn applies the NotIn predicate on the "group_name" field.
func GroupNameNotIn(vs ...string) predicate.AsAllGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsAllGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGroupName), v...))
	})
}

// GroupNameGT applies the GT predicate on the "group_name" field.
func GroupNameGT(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGroupName), v))
	})
}

// GroupNameGTE applies the GTE predicate on the "group_name" field.
func GroupNameGTE(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGroupName), v))
	})
}

// GroupNameLT applies the LT predicate on the "group_name" field.
func GroupNameLT(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGroupName), v))
	})
}

// GroupNameLTE applies the LTE predicate on the "group_name" field.
func GroupNameLTE(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGroupName), v))
	})
}

// GroupNameContains applies the Contains predicate on the "group_name" field.
func GroupNameContains(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGroupName), v))
	})
}

// GroupNameHasPrefix applies the HasPrefix predicate on the "group_name" field.
func GroupNameHasPrefix(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGroupName), v))
	})
}

// GroupNameHasSuffix applies the HasSuffix predicate on the "group_name" field.
func GroupNameHasSuffix(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGroupName), v))
	})
}

// GroupNameIsNil applies the IsNil predicate on the "group_name" field.
func GroupNameIsNil() predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldGroupName)))
	})
}

// GroupNameNotNil applies the NotNil predicate on the "group_name" field.
func GroupNameNotNil() predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldGroupName)))
	})
}

// GroupNameEqualFold applies the EqualFold predicate on the "group_name" field.
func GroupNameEqualFold(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGroupName), v))
	})
}

// GroupNameContainsFold applies the ContainsFold predicate on the "group_name" field.
func GroupNameContainsFold(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGroupName), v))
	})
}

// GroupDescriptionEQ applies the EQ predicate on the "group_description" field.
func GroupDescriptionEQ(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGroupDescription), v))
	})
}

// GroupDescriptionNEQ applies the NEQ predicate on the "group_description" field.
func GroupDescriptionNEQ(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGroupDescription), v))
	})
}

// GroupDescriptionIn applies the In predicate on the "group_description" field.
func GroupDescriptionIn(vs ...string) predicate.AsAllGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsAllGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGroupDescription), v...))
	})
}

// GroupDescriptionNotIn applies the NotIn predicate on the "group_description" field.
func GroupDescriptionNotIn(vs ...string) predicate.AsAllGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsAllGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGroupDescription), v...))
	})
}

// GroupDescriptionGT applies the GT predicate on the "group_description" field.
func GroupDescriptionGT(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGroupDescription), v))
	})
}

// GroupDescriptionGTE applies the GTE predicate on the "group_description" field.
func GroupDescriptionGTE(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGroupDescription), v))
	})
}

// GroupDescriptionLT applies the LT predicate on the "group_description" field.
func GroupDescriptionLT(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGroupDescription), v))
	})
}

// GroupDescriptionLTE applies the LTE predicate on the "group_description" field.
func GroupDescriptionLTE(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGroupDescription), v))
	})
}

// GroupDescriptionContains applies the Contains predicate on the "group_description" field.
func GroupDescriptionContains(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGroupDescription), v))
	})
}

// GroupDescriptionHasPrefix applies the HasPrefix predicate on the "group_description" field.
func GroupDescriptionHasPrefix(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGroupDescription), v))
	})
}

// GroupDescriptionHasSuffix applies the HasSuffix predicate on the "group_description" field.
func GroupDescriptionHasSuffix(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGroupDescription), v))
	})
}

// GroupDescriptionIsNil applies the IsNil predicate on the "group_description" field.
func GroupDescriptionIsNil() predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldGroupDescription)))
	})
}

// GroupDescriptionNotNil applies the NotNil predicate on the "group_description" field.
func GroupDescriptionNotNil() predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldGroupDescription)))
	})
}

// GroupDescriptionEqualFold applies the EqualFold predicate on the "group_description" field.
func GroupDescriptionEqualFold(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGroupDescription), v))
	})
}

// GroupDescriptionContainsFold applies the ContainsFold predicate on the "group_description" field.
func GroupDescriptionContainsFold(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGroupDescription), v))
	})
}

// GroupCodeEQ applies the EQ predicate on the "group_code" field.
func GroupCodeEQ(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGroupCode), v))
	})
}

// GroupCodeNEQ applies the NEQ predicate on the "group_code" field.
func GroupCodeNEQ(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGroupCode), v))
	})
}

// GroupCodeIn applies the In predicate on the "group_code" field.
func GroupCodeIn(vs ...string) predicate.AsAllGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsAllGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGroupCode), v...))
	})
}

// GroupCodeNotIn applies the NotIn predicate on the "group_code" field.
func GroupCodeNotIn(vs ...string) predicate.AsAllGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsAllGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGroupCode), v...))
	})
}

// GroupCodeGT applies the GT predicate on the "group_code" field.
func GroupCodeGT(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGroupCode), v))
	})
}

// GroupCodeGTE applies the GTE predicate on the "group_code" field.
func GroupCodeGTE(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGroupCode), v))
	})
}

// GroupCodeLT applies the LT predicate on the "group_code" field.
func GroupCodeLT(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGroupCode), v))
	})
}

// GroupCodeLTE applies the LTE predicate on the "group_code" field.
func GroupCodeLTE(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGroupCode), v))
	})
}

// GroupCodeContains applies the Contains predicate on the "group_code" field.
func GroupCodeContains(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGroupCode), v))
	})
}

// GroupCodeHasPrefix applies the HasPrefix predicate on the "group_code" field.
func GroupCodeHasPrefix(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGroupCode), v))
	})
}

// GroupCodeHasSuffix applies the HasSuffix predicate on the "group_code" field.
func GroupCodeHasSuffix(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGroupCode), v))
	})
}

// GroupCodeIsNil applies the IsNil predicate on the "group_code" field.
func GroupCodeIsNil() predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldGroupCode)))
	})
}

// GroupCodeNotNil applies the NotNil predicate on the "group_code" field.
func GroupCodeNotNil() predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldGroupCode)))
	})
}

// GroupCodeEqualFold applies the EqualFold predicate on the "group_code" field.
func GroupCodeEqualFold(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGroupCode), v))
	})
}

// GroupCodeContainsFold applies the ContainsFold predicate on the "group_code" field.
func GroupCodeContainsFold(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGroupCode), v))
	})
}

// DepthEQ applies the EQ predicate on the "depth" field.
func DepthEQ(v int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDepth), v))
	})
}

// DepthNEQ applies the NEQ predicate on the "depth" field.
func DepthNEQ(v int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDepth), v))
	})
}

// DepthIn applies the In predicate on the "depth" field.
func DepthIn(vs ...int64) predicate.AsAllGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsAllGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDepth), v...))
	})
}

// DepthNotIn applies the NotIn predicate on the "depth" field.
func DepthNotIn(vs ...int64) predicate.AsAllGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsAllGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDepth), v...))
	})
}

// DepthGT applies the GT predicate on the "depth" field.
func DepthGT(v int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDepth), v))
	})
}

// DepthGTE applies the GTE predicate on the "depth" field.
func DepthGTE(v int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDepth), v))
	})
}

// DepthLT applies the LT predicate on the "depth" field.
func DepthLT(v int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDepth), v))
	})
}

// DepthLTE applies the LTE predicate on the "depth" field.
func DepthLTE(v int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDepth), v))
	})
}

// DepthIsNil applies the IsNil predicate on the "depth" field.
func DepthIsNil() predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDepth)))
	})
}

// DepthNotNil applies the NotNil predicate on the "depth" field.
func DepthNotNil() predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDepth)))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...int64) predicate.AsAllGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsAllGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...int64) predicate.AsAllGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsAllGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldType), v))
	})
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldType), v))
	})
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldType), v))
	})
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldType), v))
	})
}

// TypeIsNil applies the IsNil predicate on the "type" field.
func TypeIsNil() predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldType)))
	})
}

// TypeNotNil applies the NotNil predicate on the "type" field.
func TypeNotNil() predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldType)))
	})
}

// SocialCreditCodeEQ applies the EQ predicate on the "social_credit_code" field.
func SocialCreditCodeEQ(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSocialCreditCode), v))
	})
}

// SocialCreditCodeNEQ applies the NEQ predicate on the "social_credit_code" field.
func SocialCreditCodeNEQ(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSocialCreditCode), v))
	})
}

// SocialCreditCodeIn applies the In predicate on the "social_credit_code" field.
func SocialCreditCodeIn(vs ...string) predicate.AsAllGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsAllGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSocialCreditCode), v...))
	})
}

// SocialCreditCodeNotIn applies the NotIn predicate on the "social_credit_code" field.
func SocialCreditCodeNotIn(vs ...string) predicate.AsAllGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsAllGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSocialCreditCode), v...))
	})
}

// SocialCreditCodeGT applies the GT predicate on the "social_credit_code" field.
func SocialCreditCodeGT(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSocialCreditCode), v))
	})
}

// SocialCreditCodeGTE applies the GTE predicate on the "social_credit_code" field.
func SocialCreditCodeGTE(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSocialCreditCode), v))
	})
}

// SocialCreditCodeLT applies the LT predicate on the "social_credit_code" field.
func SocialCreditCodeLT(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSocialCreditCode), v))
	})
}

// SocialCreditCodeLTE applies the LTE predicate on the "social_credit_code" field.
func SocialCreditCodeLTE(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSocialCreditCode), v))
	})
}

// SocialCreditCodeContains applies the Contains predicate on the "social_credit_code" field.
func SocialCreditCodeContains(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSocialCreditCode), v))
	})
}

// SocialCreditCodeHasPrefix applies the HasPrefix predicate on the "social_credit_code" field.
func SocialCreditCodeHasPrefix(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSocialCreditCode), v))
	})
}

// SocialCreditCodeHasSuffix applies the HasSuffix predicate on the "social_credit_code" field.
func SocialCreditCodeHasSuffix(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSocialCreditCode), v))
	})
}

// SocialCreditCodeIsNil applies the IsNil predicate on the "social_credit_code" field.
func SocialCreditCodeIsNil() predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSocialCreditCode)))
	})
}

// SocialCreditCodeNotNil applies the NotNil predicate on the "social_credit_code" field.
func SocialCreditCodeNotNil() predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSocialCreditCode)))
	})
}

// SocialCreditCodeEqualFold applies the EqualFold predicate on the "social_credit_code" field.
func SocialCreditCodeEqualFold(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSocialCreditCode), v))
	})
}

// SocialCreditCodeContainsFold applies the ContainsFold predicate on the "social_credit_code" field.
func SocialCreditCodeContainsFold(v string) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSocialCreditCode), v))
	})
}

// IsDeletedEQ applies the EQ predicate on the "is_deleted" field.
func IsDeletedEQ(v int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedNEQ applies the NEQ predicate on the "is_deleted" field.
func IsDeletedNEQ(v int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedIn applies the In predicate on the "is_deleted" field.
func IsDeletedIn(vs ...int64) predicate.AsAllGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsAllGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsDeleted), v...))
	})
}

// IsDeletedNotIn applies the NotIn predicate on the "is_deleted" field.
func IsDeletedNotIn(vs ...int64) predicate.AsAllGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsAllGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsDeleted), v...))
	})
}

// IsDeletedGT applies the GT predicate on the "is_deleted" field.
func IsDeletedGT(v int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedGTE applies the GTE predicate on the "is_deleted" field.
func IsDeletedGTE(v int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedLT applies the LT predicate on the "is_deleted" field.
func IsDeletedLT(v int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedLTE applies the LTE predicate on the "is_deleted" field.
func IsDeletedLTE(v int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsDeleted), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int64) predicate.AsAllGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsAllGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int64) predicate.AsAllGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsAllGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStatus)))
	})
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStatus)))
	})
}

// CreateUserEQ applies the EQ predicate on the "create_user" field.
func CreateUserEQ(v int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateUser), v))
	})
}

// CreateUserNEQ applies the NEQ predicate on the "create_user" field.
func CreateUserNEQ(v int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateUser), v))
	})
}

// CreateUserIn applies the In predicate on the "create_user" field.
func CreateUserIn(vs ...int64) predicate.AsAllGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsAllGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateUser), v...))
	})
}

// CreateUserNotIn applies the NotIn predicate on the "create_user" field.
func CreateUserNotIn(vs ...int64) predicate.AsAllGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsAllGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateUser), v...))
	})
}

// CreateUserGT applies the GT predicate on the "create_user" field.
func CreateUserGT(v int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateUser), v))
	})
}

// CreateUserGTE applies the GTE predicate on the "create_user" field.
func CreateUserGTE(v int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateUser), v))
	})
}

// CreateUserLT applies the LT predicate on the "create_user" field.
func CreateUserLT(v int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateUser), v))
	})
}

// CreateUserLTE applies the LTE predicate on the "create_user" field.
func CreateUserLTE(v int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateUser), v))
	})
}

// CreateUserIsNil applies the IsNil predicate on the "create_user" field.
func CreateUserIsNil() predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreateUser)))
	})
}

// CreateUserNotNil applies the NotNil predicate on the "create_user" field.
func CreateUserNotNil() predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreateUser)))
	})
}

// UpdateUserEQ applies the EQ predicate on the "update_user" field.
func UpdateUserEQ(v int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserNEQ applies the NEQ predicate on the "update_user" field.
func UpdateUserNEQ(v int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserIn applies the In predicate on the "update_user" field.
func UpdateUserIn(vs ...int64) predicate.AsAllGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsAllGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateUser), v...))
	})
}

// UpdateUserNotIn applies the NotIn predicate on the "update_user" field.
func UpdateUserNotIn(vs ...int64) predicate.AsAllGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsAllGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateUser), v...))
	})
}

// UpdateUserGT applies the GT predicate on the "update_user" field.
func UpdateUserGT(v int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserGTE applies the GTE predicate on the "update_user" field.
func UpdateUserGTE(v int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserLT applies the LT predicate on the "update_user" field.
func UpdateUserLT(v int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserLTE applies the LTE predicate on the "update_user" field.
func UpdateUserLTE(v int64) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserIsNil applies the IsNil predicate on the "update_user" field.
func UpdateUserIsNil() predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdateUser)))
	})
}

// UpdateUserNotNil applies the NotNil predicate on the "update_user" field.
func UpdateUserNotNil() predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdateUser)))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v date.DateTime) predicate.AsAllGroup {
	vc := time.Time(v)
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v date.DateTime) predicate.AsAllGroup {
	vc := time.Time(v)
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...date.DateTime) predicate.AsAllGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsAllGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...date.DateTime) predicate.AsAllGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsAllGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v date.DateTime) predicate.AsAllGroup {
	vc := time.Time(v)
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v date.DateTime) predicate.AsAllGroup {
	vc := time.Time(v)
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v date.DateTime) predicate.AsAllGroup {
	vc := time.Time(v)
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v date.DateTime) predicate.AsAllGroup {
	vc := time.Time(v)
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeIsNil applies the IsNil predicate on the "create_time" field.
func CreateTimeIsNil() predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreateTime)))
	})
}

// CreateTimeNotNil applies the NotNil predicate on the "create_time" field.
func CreateTimeNotNil() predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreateTime)))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v date.DateTime) predicate.AsAllGroup {
	vc := time.Time(v)
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v date.DateTime) predicate.AsAllGroup {
	vc := time.Time(v)
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...date.DateTime) predicate.AsAllGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsAllGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...date.DateTime) predicate.AsAllGroup {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsAllGroup(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v date.DateTime) predicate.AsAllGroup {
	vc := time.Time(v)
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v date.DateTime) predicate.AsAllGroup {
	vc := time.Time(v)
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v date.DateTime) predicate.AsAllGroup {
	vc := time.Time(v)
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v date.DateTime) predicate.AsAllGroup {
	vc := time.Time(v)
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeIsNil applies the IsNil predicate on the "update_time" field.
func UpdateTimeIsNil() predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdateTime)))
	})
}

// UpdateTimeNotNil applies the NotNil predicate on the "update_time" field.
func UpdateTimeNotNil() predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdateTime)))
	})
}

// HasAllLayer applies the HasEdge predicate on the "allLayer" edge.
func HasAllLayer() predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AllLayerTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AllLayerTable, AllLayerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAllLayerWith applies the HasEdge predicate on the "allLayer" edge with a given conditions (other predicates).
func HasAllLayerWith(preds ...predicate.AsLayer) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AllLayerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AllLayerTable, AllLayerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAppPurchases applies the HasEdge predicate on the "appPurchases" edge.
func HasAppPurchases() predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppPurchasesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AppPurchasesTable, AppPurchasesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppPurchasesWith applies the HasEdge predicate on the "appPurchases" edge with a given conditions (other predicates).
func HasAppPurchasesWith(preds ...predicate.AsMarketAppPurchase) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppPurchasesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AppPurchasesTable, AppPurchasesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAllTenants applies the HasEdge predicate on the "allTenants" edge.
func HasAllTenants() predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AllTenantsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AllTenantsTable, AllTenantsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAllTenantsWith applies the HasEdge predicate on the "allTenants" edge with a given conditions (other predicates).
func HasAllTenantsWith(preds ...predicate.AsGroupTenantRelations) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AllTenantsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AllTenantsTable, AllTenantsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAppGroupDistribs applies the HasEdge predicate on the "appGroupDistribs" edge.
func HasAppGroupDistribs() predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppGroupDistribsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AppGroupDistribsTable, AppGroupDistribsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppGroupDistribsWith applies the HasEdge predicate on the "appGroupDistribs" edge with a given conditions (other predicates).
func HasAppGroupDistribsWith(preds ...predicate.AsMarketAppGroupDistribution) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppGroupDistribsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AppGroupDistribsTable, AppGroupDistribsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAppGroupDistribConfigs applies the HasEdge predicate on the "appGroupDistribConfigs" edge.
func HasAppGroupDistribConfigs() predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppGroupDistribConfigsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AppGroupDistribConfigsTable, AppGroupDistribConfigsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppGroupDistribConfigsWith applies the HasEdge predicate on the "appGroupDistribConfigs" edge with a given conditions (other predicates).
func HasAppGroupDistribConfigsWith(preds ...predicate.AsAppGroupDistributionData) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppGroupDistribConfigsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AppGroupDistribConfigsTable, AppGroupDistribConfigsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAppGroupDistribsRelation applies the HasEdge predicate on the "appGroupDistribsRelation" edge.
func HasAppGroupDistribsRelation() predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppGroupDistribsRelationTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AppGroupDistribsRelationTable, AppGroupDistribsRelationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppGroupDistribsRelationWith applies the HasEdge predicate on the "appGroupDistribsRelation" edge with a given conditions (other predicates).
func HasAppGroupDistribsRelationWith(preds ...predicate.AsMarketAppGroupDistributionRelation) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppGroupDistribsRelationInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AppGroupDistribsRelationTable, AppGroupDistribsRelationColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AsAllGroup) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AsAllGroup) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AsAllGroup) predicate.AsAllGroup {
	return predicate.AsAllGroup(func(s *sql.Selector) {
		p(s.Not())
	})
}
