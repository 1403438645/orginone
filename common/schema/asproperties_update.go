// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/asproperties"
	"orginone/common/schema/aspropertiesdistribution"
	"orginone/common/schema/predicate"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsPropertiesUpdate is the builder for updating AsProperties entities.
type AsPropertiesUpdate struct {
	config
	hooks    []Hook
	mutation *AsPropertiesMutation
}

// Where appends a list predicates to the AsPropertiesUpdate builder.
func (apu *AsPropertiesUpdate) Where(ps ...predicate.AsProperties) *AsPropertiesUpdate {
	apu.mutation.Where(ps...)
	return apu
}

// SetPropertiesName sets the "properties_name" field.
func (apu *AsPropertiesUpdate) SetPropertiesName(s string) *AsPropertiesUpdate {
	apu.mutation.SetPropertiesName(s)
	return apu
}

// SetGroupID sets the "group_id" field.
func (apu *AsPropertiesUpdate) SetGroupID(i int64) *AsPropertiesUpdate {
	apu.mutation.ResetGroupID()
	apu.mutation.SetGroupID(i)
	return apu
}

// AddGroupID adds i to the "group_id" field.
func (apu *AsPropertiesUpdate) AddGroupID(i int64) *AsPropertiesUpdate {
	apu.mutation.AddGroupID(i)
	return apu
}

// SetIsDeleted sets the "is_deleted" field.
func (apu *AsPropertiesUpdate) SetIsDeleted(i int64) *AsPropertiesUpdate {
	apu.mutation.ResetIsDeleted()
	apu.mutation.SetIsDeleted(i)
	return apu
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (apu *AsPropertiesUpdate) SetNillableIsDeleted(i *int64) *AsPropertiesUpdate {
	if i != nil {
		apu.SetIsDeleted(*i)
	}
	return apu
}

// AddIsDeleted adds i to the "is_deleted" field.
func (apu *AsPropertiesUpdate) AddIsDeleted(i int64) *AsPropertiesUpdate {
	apu.mutation.AddIsDeleted(i)
	return apu
}

// SetStatus sets the "status" field.
func (apu *AsPropertiesUpdate) SetStatus(i int64) *AsPropertiesUpdate {
	apu.mutation.ResetStatus()
	apu.mutation.SetStatus(i)
	return apu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (apu *AsPropertiesUpdate) SetNillableStatus(i *int64) *AsPropertiesUpdate {
	if i != nil {
		apu.SetStatus(*i)
	}
	return apu
}

// AddStatus adds i to the "status" field.
func (apu *AsPropertiesUpdate) AddStatus(i int64) *AsPropertiesUpdate {
	apu.mutation.AddStatus(i)
	return apu
}

// ClearStatus clears the value of the "status" field.
func (apu *AsPropertiesUpdate) ClearStatus() *AsPropertiesUpdate {
	apu.mutation.ClearStatus()
	return apu
}

// SetCreateUser sets the "create_user" field.
func (apu *AsPropertiesUpdate) SetCreateUser(i int64) *AsPropertiesUpdate {
	apu.mutation.ResetCreateUser()
	apu.mutation.SetCreateUser(i)
	return apu
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (apu *AsPropertiesUpdate) SetNillableCreateUser(i *int64) *AsPropertiesUpdate {
	if i != nil {
		apu.SetCreateUser(*i)
	}
	return apu
}

// AddCreateUser adds i to the "create_user" field.
func (apu *AsPropertiesUpdate) AddCreateUser(i int64) *AsPropertiesUpdate {
	apu.mutation.AddCreateUser(i)
	return apu
}

// ClearCreateUser clears the value of the "create_user" field.
func (apu *AsPropertiesUpdate) ClearCreateUser() *AsPropertiesUpdate {
	apu.mutation.ClearCreateUser()
	return apu
}

// SetUpdateUser sets the "update_user" field.
func (apu *AsPropertiesUpdate) SetUpdateUser(i int64) *AsPropertiesUpdate {
	apu.mutation.ResetUpdateUser()
	apu.mutation.SetUpdateUser(i)
	return apu
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (apu *AsPropertiesUpdate) SetNillableUpdateUser(i *int64) *AsPropertiesUpdate {
	if i != nil {
		apu.SetUpdateUser(*i)
	}
	return apu
}

// AddUpdateUser adds i to the "update_user" field.
func (apu *AsPropertiesUpdate) AddUpdateUser(i int64) *AsPropertiesUpdate {
	apu.mutation.AddUpdateUser(i)
	return apu
}

// ClearUpdateUser clears the value of the "update_user" field.
func (apu *AsPropertiesUpdate) ClearUpdateUser() *AsPropertiesUpdate {
	apu.mutation.ClearUpdateUser()
	return apu
}

// SetUpdateTime sets the "update_time" field.
func (apu *AsPropertiesUpdate) SetUpdateTime(dt date.DateTime) *AsPropertiesUpdate {
	apu.mutation.SetUpdateTime(dt)
	return apu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (apu *AsPropertiesUpdate) ClearUpdateTime() *AsPropertiesUpdate {
	apu.mutation.ClearUpdateTime()
	return apu
}

// AddAllTenantIDs adds the "allTenants" edge to the AsPropertiesDistribution entity by IDs.
func (apu *AsPropertiesUpdate) AddAllTenantIDs(ids ...int64) *AsPropertiesUpdate {
	apu.mutation.AddAllTenantIDs(ids...)
	return apu
}

// AddAllTenants adds the "allTenants" edges to the AsPropertiesDistribution entity.
func (apu *AsPropertiesUpdate) AddAllTenants(a ...*AsPropertiesDistribution) *AsPropertiesUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apu.AddAllTenantIDs(ids...)
}

// Mutation returns the AsPropertiesMutation object of the builder.
func (apu *AsPropertiesUpdate) Mutation() *AsPropertiesMutation {
	return apu.mutation
}

// ClearAllTenants clears all "allTenants" edges to the AsPropertiesDistribution entity.
func (apu *AsPropertiesUpdate) ClearAllTenants() *AsPropertiesUpdate {
	apu.mutation.ClearAllTenants()
	return apu
}

// RemoveAllTenantIDs removes the "allTenants" edge to AsPropertiesDistribution entities by IDs.
func (apu *AsPropertiesUpdate) RemoveAllTenantIDs(ids ...int64) *AsPropertiesUpdate {
	apu.mutation.RemoveAllTenantIDs(ids...)
	return apu
}

// RemoveAllTenants removes "allTenants" edges to AsPropertiesDistribution entities.
func (apu *AsPropertiesUpdate) RemoveAllTenants(a ...*AsPropertiesDistribution) *AsPropertiesUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apu.RemoveAllTenantIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (apu *AsPropertiesUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	apu.defaults()
	if len(apu.hooks) == 0 {
		affected, err = apu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsPropertiesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			apu.mutation = mutation
			affected, err = apu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(apu.hooks) - 1; i >= 0; i-- {
			if apu.hooks[i] == nil {
				return 0, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = apu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, apu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (apu *AsPropertiesUpdate) SaveX(ctx context.Context) int {
	affected, err := apu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (apu *AsPropertiesUpdate) Exec(ctx context.Context) error {
	_, err := apu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apu *AsPropertiesUpdate) ExecX(ctx context.Context) {
	if err := apu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (apu *AsPropertiesUpdate) defaults() {
	if _, ok := apu.mutation.UpdateTime(); !ok && !apu.mutation.UpdateTimeCleared() {
		v := asproperties.UpdateDefaultUpdateTime()
		apu.mutation.SetUpdateTime(v)
	}
}

func (apu *AsPropertiesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asproperties.Table,
			Columns: asproperties.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asproperties.FieldID,
			},
		},
	}
	if ps := apu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := apu.mutation.PropertiesName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asproperties.FieldPropertiesName,
		})
	}
	if value, ok := apu.mutation.GroupID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asproperties.FieldGroupID,
		})
	}
	if value, ok := apu.mutation.AddedGroupID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asproperties.FieldGroupID,
		})
	}
	if value, ok := apu.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asproperties.FieldIsDeleted,
		})
	}
	if value, ok := apu.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asproperties.FieldIsDeleted,
		})
	}
	if value, ok := apu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asproperties.FieldStatus,
		})
	}
	if value, ok := apu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asproperties.FieldStatus,
		})
	}
	if apu.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asproperties.FieldStatus,
		})
	}
	if value, ok := apu.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asproperties.FieldCreateUser,
		})
	}
	if value, ok := apu.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asproperties.FieldCreateUser,
		})
	}
	if apu.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asproperties.FieldCreateUser,
		})
	}
	if value, ok := apu.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asproperties.FieldUpdateUser,
		})
	}
	if value, ok := apu.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asproperties.FieldUpdateUser,
		})
	}
	if apu.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asproperties.FieldUpdateUser,
		})
	}
	if apu.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asproperties.FieldCreateTime,
		})
	}
	if value, ok := apu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asproperties.FieldUpdateTime,
		})
	}
	if apu.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asproperties.FieldUpdateTime,
		})
	}
	if apu.mutation.AllTenantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asproperties.AllTenantsTable,
			Columns: []string{asproperties.AllTenantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: aspropertiesdistribution.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.RemovedAllTenantsIDs(); len(nodes) > 0 && !apu.mutation.AllTenantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asproperties.AllTenantsTable,
			Columns: []string{asproperties.AllTenantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: aspropertiesdistribution.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.AllTenantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asproperties.AllTenantsTable,
			Columns: []string{asproperties.AllTenantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: aspropertiesdistribution.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, apu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asproperties.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AsPropertiesUpdateOne is the builder for updating a single AsProperties entity.
type AsPropertiesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AsPropertiesMutation
}

// SetPropertiesName sets the "properties_name" field.
func (apuo *AsPropertiesUpdateOne) SetPropertiesName(s string) *AsPropertiesUpdateOne {
	apuo.mutation.SetPropertiesName(s)
	return apuo
}

// SetGroupID sets the "group_id" field.
func (apuo *AsPropertiesUpdateOne) SetGroupID(i int64) *AsPropertiesUpdateOne {
	apuo.mutation.ResetGroupID()
	apuo.mutation.SetGroupID(i)
	return apuo
}

// AddGroupID adds i to the "group_id" field.
func (apuo *AsPropertiesUpdateOne) AddGroupID(i int64) *AsPropertiesUpdateOne {
	apuo.mutation.AddGroupID(i)
	return apuo
}

// SetIsDeleted sets the "is_deleted" field.
func (apuo *AsPropertiesUpdateOne) SetIsDeleted(i int64) *AsPropertiesUpdateOne {
	apuo.mutation.ResetIsDeleted()
	apuo.mutation.SetIsDeleted(i)
	return apuo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (apuo *AsPropertiesUpdateOne) SetNillableIsDeleted(i *int64) *AsPropertiesUpdateOne {
	if i != nil {
		apuo.SetIsDeleted(*i)
	}
	return apuo
}

// AddIsDeleted adds i to the "is_deleted" field.
func (apuo *AsPropertiesUpdateOne) AddIsDeleted(i int64) *AsPropertiesUpdateOne {
	apuo.mutation.AddIsDeleted(i)
	return apuo
}

// SetStatus sets the "status" field.
func (apuo *AsPropertiesUpdateOne) SetStatus(i int64) *AsPropertiesUpdateOne {
	apuo.mutation.ResetStatus()
	apuo.mutation.SetStatus(i)
	return apuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (apuo *AsPropertiesUpdateOne) SetNillableStatus(i *int64) *AsPropertiesUpdateOne {
	if i != nil {
		apuo.SetStatus(*i)
	}
	return apuo
}

// AddStatus adds i to the "status" field.
func (apuo *AsPropertiesUpdateOne) AddStatus(i int64) *AsPropertiesUpdateOne {
	apuo.mutation.AddStatus(i)
	return apuo
}

// ClearStatus clears the value of the "status" field.
func (apuo *AsPropertiesUpdateOne) ClearStatus() *AsPropertiesUpdateOne {
	apuo.mutation.ClearStatus()
	return apuo
}

// SetCreateUser sets the "create_user" field.
func (apuo *AsPropertiesUpdateOne) SetCreateUser(i int64) *AsPropertiesUpdateOne {
	apuo.mutation.ResetCreateUser()
	apuo.mutation.SetCreateUser(i)
	return apuo
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (apuo *AsPropertiesUpdateOne) SetNillableCreateUser(i *int64) *AsPropertiesUpdateOne {
	if i != nil {
		apuo.SetCreateUser(*i)
	}
	return apuo
}

// AddCreateUser adds i to the "create_user" field.
func (apuo *AsPropertiesUpdateOne) AddCreateUser(i int64) *AsPropertiesUpdateOne {
	apuo.mutation.AddCreateUser(i)
	return apuo
}

// ClearCreateUser clears the value of the "create_user" field.
func (apuo *AsPropertiesUpdateOne) ClearCreateUser() *AsPropertiesUpdateOne {
	apuo.mutation.ClearCreateUser()
	return apuo
}

// SetUpdateUser sets the "update_user" field.
func (apuo *AsPropertiesUpdateOne) SetUpdateUser(i int64) *AsPropertiesUpdateOne {
	apuo.mutation.ResetUpdateUser()
	apuo.mutation.SetUpdateUser(i)
	return apuo
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (apuo *AsPropertiesUpdateOne) SetNillableUpdateUser(i *int64) *AsPropertiesUpdateOne {
	if i != nil {
		apuo.SetUpdateUser(*i)
	}
	return apuo
}

// AddUpdateUser adds i to the "update_user" field.
func (apuo *AsPropertiesUpdateOne) AddUpdateUser(i int64) *AsPropertiesUpdateOne {
	apuo.mutation.AddUpdateUser(i)
	return apuo
}

// ClearUpdateUser clears the value of the "update_user" field.
func (apuo *AsPropertiesUpdateOne) ClearUpdateUser() *AsPropertiesUpdateOne {
	apuo.mutation.ClearUpdateUser()
	return apuo
}

// SetUpdateTime sets the "update_time" field.
func (apuo *AsPropertiesUpdateOne) SetUpdateTime(dt date.DateTime) *AsPropertiesUpdateOne {
	apuo.mutation.SetUpdateTime(dt)
	return apuo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (apuo *AsPropertiesUpdateOne) ClearUpdateTime() *AsPropertiesUpdateOne {
	apuo.mutation.ClearUpdateTime()
	return apuo
}

// AddAllTenantIDs adds the "allTenants" edge to the AsPropertiesDistribution entity by IDs.
func (apuo *AsPropertiesUpdateOne) AddAllTenantIDs(ids ...int64) *AsPropertiesUpdateOne {
	apuo.mutation.AddAllTenantIDs(ids...)
	return apuo
}

// AddAllTenants adds the "allTenants" edges to the AsPropertiesDistribution entity.
func (apuo *AsPropertiesUpdateOne) AddAllTenants(a ...*AsPropertiesDistribution) *AsPropertiesUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apuo.AddAllTenantIDs(ids...)
}

// Mutation returns the AsPropertiesMutation object of the builder.
func (apuo *AsPropertiesUpdateOne) Mutation() *AsPropertiesMutation {
	return apuo.mutation
}

// ClearAllTenants clears all "allTenants" edges to the AsPropertiesDistribution entity.
func (apuo *AsPropertiesUpdateOne) ClearAllTenants() *AsPropertiesUpdateOne {
	apuo.mutation.ClearAllTenants()
	return apuo
}

// RemoveAllTenantIDs removes the "allTenants" edge to AsPropertiesDistribution entities by IDs.
func (apuo *AsPropertiesUpdateOne) RemoveAllTenantIDs(ids ...int64) *AsPropertiesUpdateOne {
	apuo.mutation.RemoveAllTenantIDs(ids...)
	return apuo
}

// RemoveAllTenants removes "allTenants" edges to AsPropertiesDistribution entities.
func (apuo *AsPropertiesUpdateOne) RemoveAllTenants(a ...*AsPropertiesDistribution) *AsPropertiesUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apuo.RemoveAllTenantIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (apuo *AsPropertiesUpdateOne) Select(field string, fields ...string) *AsPropertiesUpdateOne {
	apuo.fields = append([]string{field}, fields...)
	return apuo
}

// Save executes the query and returns the updated AsProperties entity.
func (apuo *AsPropertiesUpdateOne) Save(ctx context.Context) (*AsProperties, error) {
	var (
		err  error
		node *AsProperties
	)
	apuo.defaults()
	if len(apuo.hooks) == 0 {
		node, err = apuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsPropertiesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			apuo.mutation = mutation
			node, err = apuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(apuo.hooks) - 1; i >= 0; i-- {
			if apuo.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = apuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, apuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (apuo *AsPropertiesUpdateOne) SaveX(ctx context.Context) *AsProperties {
	node, err := apuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (apuo *AsPropertiesUpdateOne) Exec(ctx context.Context) error {
	_, err := apuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apuo *AsPropertiesUpdateOne) ExecX(ctx context.Context) {
	if err := apuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (apuo *AsPropertiesUpdateOne) defaults() {
	if _, ok := apuo.mutation.UpdateTime(); !ok && !apuo.mutation.UpdateTimeCleared() {
		v := asproperties.UpdateDefaultUpdateTime()
		apuo.mutation.SetUpdateTime(v)
	}
}

func (apuo *AsPropertiesUpdateOne) sqlSave(ctx context.Context) (_node *AsProperties, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asproperties.Table,
			Columns: asproperties.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asproperties.FieldID,
			},
		},
	}
	id, ok := apuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`schema: missing "AsProperties.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := apuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asproperties.FieldID)
		for _, f := range fields {
			if !asproperties.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("schema: invalid field %q for query", f)}
			}
			if f != asproperties.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := apuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := apuo.mutation.PropertiesName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asproperties.FieldPropertiesName,
		})
	}
	if value, ok := apuo.mutation.GroupID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asproperties.FieldGroupID,
		})
	}
	if value, ok := apuo.mutation.AddedGroupID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asproperties.FieldGroupID,
		})
	}
	if value, ok := apuo.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asproperties.FieldIsDeleted,
		})
	}
	if value, ok := apuo.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asproperties.FieldIsDeleted,
		})
	}
	if value, ok := apuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asproperties.FieldStatus,
		})
	}
	if value, ok := apuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asproperties.FieldStatus,
		})
	}
	if apuo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asproperties.FieldStatus,
		})
	}
	if value, ok := apuo.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asproperties.FieldCreateUser,
		})
	}
	if value, ok := apuo.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asproperties.FieldCreateUser,
		})
	}
	if apuo.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asproperties.FieldCreateUser,
		})
	}
	if value, ok := apuo.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asproperties.FieldUpdateUser,
		})
	}
	if value, ok := apuo.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asproperties.FieldUpdateUser,
		})
	}
	if apuo.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asproperties.FieldUpdateUser,
		})
	}
	if apuo.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asproperties.FieldCreateTime,
		})
	}
	if value, ok := apuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asproperties.FieldUpdateTime,
		})
	}
	if apuo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asproperties.FieldUpdateTime,
		})
	}
	if apuo.mutation.AllTenantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asproperties.AllTenantsTable,
			Columns: []string{asproperties.AllTenantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: aspropertiesdistribution.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.RemovedAllTenantsIDs(); len(nodes) > 0 && !apuo.mutation.AllTenantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asproperties.AllTenantsTable,
			Columns: []string{asproperties.AllTenantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: aspropertiesdistribution.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.AllTenantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asproperties.AllTenantsTable,
			Columns: []string{asproperties.AllTenantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: aspropertiesdistribution.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AsProperties{config: apuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, apuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asproperties.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
