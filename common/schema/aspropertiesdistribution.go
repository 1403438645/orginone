// Code generated by entc, DO NOT EDIT.

package schema

import (
	"fmt"
	"orginone/common/schema/asproperties"
	"orginone/common/schema/aspropertiesdistribution"
	"orginone/common/schema/astenant"
	"orginone/common/tools/date"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// AsPropertiesDistribution is the model entity for the AsPropertiesDistribution schema.
type AsPropertiesDistribution struct {
	config `json:"-"`
	// ID of the ent.
	// 主键
	ID int64 `json:"id,string"`
	// PropertiesID holds the value of the "properties_id" field.
	// 父集团或租户id
	PropertiesID int64 `json:"propertiesId"`
	// TenantID holds the value of the "tenant_id" field.
	// 子集团或租户id
	TenantID int64 `json:"tenantId"`
	// IsDeleted holds the value of the "is_deleted" field.
	// 是否被删除
	IsDeleted int64 `json:"isDeleted"`
	// Status holds the value of the "status" field.
	// 状态
	Status int64 `json:"status"`
	// CreateUser holds the value of the "create_user" field.
	// 创建用户
	CreateUser int64 `json:"createUser"`
	// UpdateUser holds the value of the "update_user" field.
	// 更新用户
	UpdateUser int64 `json:"updateUser"`
	// CreateTime holds the value of the "create_time" field.
	// 创建时间
	CreateTime date.DateTime `json:"createTime"`
	// UpdateTime holds the value of the "update_time" field.
	// 更新时间
	UpdateTime date.DateTime `json:"updateTime"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AsPropertiesDistributionQuery when eager-loading is set.
	Edges AsPropertiesDistributionEdges `json:"edges"`
}

// AsPropertiesDistributionEdges holds the relations/edges for other nodes in the graph.
type AsPropertiesDistributionEdges struct {
	// Properties holds the value of the properties edge.
	Properties *AsProperties `json:"properties"`
	// Tenant holds the value of the tenant edge.
	Tenant *AsTenant `json:"tenant"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PropertiesOrErr returns the Properties value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AsPropertiesDistributionEdges) PropertiesOrErr() (*AsProperties, error) {
	if e.loadedTypes[0] {
		if e.Properties == nil {
			// The edge properties was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: asproperties.Label}
		}
		return e.Properties, nil
	}
	return nil, &NotLoadedError{edge: "properties"}
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AsPropertiesDistributionEdges) TenantOrErr() (*AsTenant, error) {
	if e.loadedTypes[1] {
		if e.Tenant == nil {
			// The edge tenant was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: astenant.Label}
		}
		return e.Tenant, nil
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AsPropertiesDistribution) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case aspropertiesdistribution.FieldID, aspropertiesdistribution.FieldPropertiesID, aspropertiesdistribution.FieldTenantID, aspropertiesdistribution.FieldIsDeleted, aspropertiesdistribution.FieldStatus, aspropertiesdistribution.FieldCreateUser, aspropertiesdistribution.FieldUpdateUser:
			values[i] = new(sql.NullInt64)
		case aspropertiesdistribution.FieldCreateTime, aspropertiesdistribution.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AsPropertiesDistribution", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AsPropertiesDistribution fields.
func (apd *AsPropertiesDistribution) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case aspropertiesdistribution.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			apd.ID = int64(value.Int64)
		case aspropertiesdistribution.FieldPropertiesID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field properties_id", values[i])
			} else if value.Valid {
				apd.PropertiesID = value.Int64
			}
		case aspropertiesdistribution.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				apd.TenantID = value.Int64
			}
		case aspropertiesdistribution.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				apd.IsDeleted = value.Int64
			}
		case aspropertiesdistribution.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				apd.Status = value.Int64
			}
		case aspropertiesdistribution.FieldCreateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_user", values[i])
			} else if value.Valid {
				apd.CreateUser = value.Int64
			}
		case aspropertiesdistribution.FieldUpdateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_user", values[i])
			} else if value.Valid {
				apd.UpdateUser = value.Int64
			}
		case aspropertiesdistribution.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				apd.CreateTime = date.DateTime(value.Time)
			}
		case aspropertiesdistribution.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				apd.UpdateTime = date.DateTime(value.Time)
			}
		}
	}
	return nil
}

// QueryProperties queries the "properties" edge of the AsPropertiesDistribution entity.
func (apd *AsPropertiesDistribution) QueryProperties() *AsPropertiesQuery {
	return (&AsPropertiesDistributionClient{config: apd.config}).QueryProperties(apd)
}

// QueryTenant queries the "tenant" edge of the AsPropertiesDistribution entity.
func (apd *AsPropertiesDistribution) QueryTenant() *AsTenantQuery {
	return (&AsPropertiesDistributionClient{config: apd.config}).QueryTenant(apd)
}

// Update returns a builder for updating this AsPropertiesDistribution.
// Note that you need to call AsPropertiesDistribution.Unwrap() before calling this method if this AsPropertiesDistribution
// was returned from a transaction, and the transaction was committed or rolled back.
func (apd *AsPropertiesDistribution) Update() *AsPropertiesDistributionUpdateOne {
	return (&AsPropertiesDistributionClient{config: apd.config}).UpdateOne(apd)
}

// Unwrap unwraps the AsPropertiesDistribution entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (apd *AsPropertiesDistribution) Unwrap() *AsPropertiesDistribution {
	tx, ok := apd.config.driver.(*txDriver)
	if !ok {
		panic("schema: AsPropertiesDistribution is not a transactional entity")
	}
	apd.config.driver = tx.drv
	return apd
}

// String implements the fmt.Stringer.
func (apd *AsPropertiesDistribution) String() string {
	var builder strings.Builder
	builder.WriteString("AsPropertiesDistribution(")
	builder.WriteString(fmt.Sprintf("id=%v", apd.ID))
	builder.WriteString(", properties_id=")
	builder.WriteString(fmt.Sprintf("%v", apd.PropertiesID))
	builder.WriteString(", tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", apd.TenantID))
	builder.WriteString(", is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", apd.IsDeleted))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", apd.Status))
	builder.WriteString(", create_user=")
	builder.WriteString(fmt.Sprintf("%v", apd.CreateUser))
	builder.WriteString(", update_user=")
	builder.WriteString(fmt.Sprintf("%v", apd.UpdateUser))
	builder.WriteString(", create_time=")
	builder.WriteString(fmt.Sprintf("%v", apd.CreateTime))
	builder.WriteString(", update_time=")
	builder.WriteString(fmt.Sprintf("%v", apd.UpdateTime))
	builder.WriteByte(')')
	return builder.String()
}

// AsPropertiesDistributions is a parsable slice of AsPropertiesDistribution.
type AsPropertiesDistributions []*AsPropertiesDistribution

func (apd AsPropertiesDistributions) config(cfg config) {
	for _i := range apd {
		apd[_i].config = cfg
	}
}
