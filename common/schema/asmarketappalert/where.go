// Code generated by entc, DO NOT EDIT.

package asmarketappalert

import (
	"orginone/common/schema/predicate"
	"orginone/common/tools/date"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// AlertTitle applies equality check predicate on the "alert_title" field. It's identical to AlertTitleEQ.
func AlertTitle(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAlertTitle), v))
	})
}

// AlertContent applies equality check predicate on the "alert_content" field. It's identical to AlertContentEQ.
func AlertContent(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAlertContent), v))
	})
}

// AlertBusiness applies equality check predicate on the "alert_business" field. It's identical to AlertBusinessEQ.
func AlertBusiness(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAlertBusiness), v))
	})
}

// AlertEmergencyLevel applies equality check predicate on the "alert_emergency_level" field. It's identical to AlertEmergencyLevelEQ.
func AlertEmergencyLevel(v int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAlertEmergencyLevel), v))
	})
}

// AlertReleaseAppID applies equality check predicate on the "alert_release_app_id" field. It's identical to AlertReleaseAppIDEQ.
func AlertReleaseAppID(v int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAlertReleaseAppID), v))
	})
}

// AlertReleaseTime applies equality check predicate on the "alert_release_time" field. It's identical to AlertReleaseTimeEQ.
func AlertReleaseTime(v date.DateTime) predicate.AsMarketAppAlert {
	vc := time.Time(v)
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAlertReleaseTime), vc))
	})
}

// AlertRoleIds applies equality check predicate on the "alert_role_ids" field. It's identical to AlertRoleIdsEQ.
func AlertRoleIds(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAlertRoleIds), v))
	})
}

// AlertJobIds applies equality check predicate on the "alert_job_ids" field. It's identical to AlertJobIdsEQ.
func AlertJobIds(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAlertJobIds), v))
	})
}

// AlertStatus applies equality check predicate on the "alert_status" field. It's identical to AlertStatusEQ.
func AlertStatus(v int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAlertStatus), v))
	})
}

// IsDeleted applies equality check predicate on the "is_deleted" field. It's identical to IsDeletedEQ.
func IsDeleted(v int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDeleted), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// CreateUser applies equality check predicate on the "create_user" field. It's identical to CreateUserEQ.
func CreateUser(v int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateUser), v))
	})
}

// UpdateUser applies equality check predicate on the "update_user" field. It's identical to UpdateUserEQ.
func UpdateUser(v int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateUser), v))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v date.DateTime) predicate.AsMarketAppAlert {
	vc := time.Time(v)
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), vc))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v date.DateTime) predicate.AsMarketAppAlert {
	vc := time.Time(v)
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), vc))
	})
}

// AlertTitleEQ applies the EQ predicate on the "alert_title" field.
func AlertTitleEQ(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAlertTitle), v))
	})
}

// AlertTitleNEQ applies the NEQ predicate on the "alert_title" field.
func AlertTitleNEQ(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAlertTitle), v))
	})
}

// AlertTitleIn applies the In predicate on the "alert_title" field.
func AlertTitleIn(vs ...string) predicate.AsMarketAppAlert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAlertTitle), v...))
	})
}

// AlertTitleNotIn applies the NotIn predicate on the "alert_title" field.
func AlertTitleNotIn(vs ...string) predicate.AsMarketAppAlert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAlertTitle), v...))
	})
}

// AlertTitleGT applies the GT predicate on the "alert_title" field.
func AlertTitleGT(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAlertTitle), v))
	})
}

// AlertTitleGTE applies the GTE predicate on the "alert_title" field.
func AlertTitleGTE(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAlertTitle), v))
	})
}

// AlertTitleLT applies the LT predicate on the "alert_title" field.
func AlertTitleLT(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAlertTitle), v))
	})
}

// AlertTitleLTE applies the LTE predicate on the "alert_title" field.
func AlertTitleLTE(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAlertTitle), v))
	})
}

// AlertTitleContains applies the Contains predicate on the "alert_title" field.
func AlertTitleContains(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAlertTitle), v))
	})
}

// AlertTitleHasPrefix applies the HasPrefix predicate on the "alert_title" field.
func AlertTitleHasPrefix(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAlertTitle), v))
	})
}

// AlertTitleHasSuffix applies the HasSuffix predicate on the "alert_title" field.
func AlertTitleHasSuffix(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAlertTitle), v))
	})
}

// AlertTitleIsNil applies the IsNil predicate on the "alert_title" field.
func AlertTitleIsNil() predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAlertTitle)))
	})
}

// AlertTitleNotNil applies the NotNil predicate on the "alert_title" field.
func AlertTitleNotNil() predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAlertTitle)))
	})
}

// AlertTitleEqualFold applies the EqualFold predicate on the "alert_title" field.
func AlertTitleEqualFold(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAlertTitle), v))
	})
}

// AlertTitleContainsFold applies the ContainsFold predicate on the "alert_title" field.
func AlertTitleContainsFold(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAlertTitle), v))
	})
}

// AlertContentEQ applies the EQ predicate on the "alert_content" field.
func AlertContentEQ(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAlertContent), v))
	})
}

// AlertContentNEQ applies the NEQ predicate on the "alert_content" field.
func AlertContentNEQ(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAlertContent), v))
	})
}

// AlertContentIn applies the In predicate on the "alert_content" field.
func AlertContentIn(vs ...string) predicate.AsMarketAppAlert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAlertContent), v...))
	})
}

// AlertContentNotIn applies the NotIn predicate on the "alert_content" field.
func AlertContentNotIn(vs ...string) predicate.AsMarketAppAlert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAlertContent), v...))
	})
}

// AlertContentGT applies the GT predicate on the "alert_content" field.
func AlertContentGT(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAlertContent), v))
	})
}

// AlertContentGTE applies the GTE predicate on the "alert_content" field.
func AlertContentGTE(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAlertContent), v))
	})
}

// AlertContentLT applies the LT predicate on the "alert_content" field.
func AlertContentLT(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAlertContent), v))
	})
}

// AlertContentLTE applies the LTE predicate on the "alert_content" field.
func AlertContentLTE(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAlertContent), v))
	})
}

// AlertContentContains applies the Contains predicate on the "alert_content" field.
func AlertContentContains(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAlertContent), v))
	})
}

// AlertContentHasPrefix applies the HasPrefix predicate on the "alert_content" field.
func AlertContentHasPrefix(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAlertContent), v))
	})
}

// AlertContentHasSuffix applies the HasSuffix predicate on the "alert_content" field.
func AlertContentHasSuffix(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAlertContent), v))
	})
}

// AlertContentIsNil applies the IsNil predicate on the "alert_content" field.
func AlertContentIsNil() predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAlertContent)))
	})
}

// AlertContentNotNil applies the NotNil predicate on the "alert_content" field.
func AlertContentNotNil() predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAlertContent)))
	})
}

// AlertContentEqualFold applies the EqualFold predicate on the "alert_content" field.
func AlertContentEqualFold(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAlertContent), v))
	})
}

// AlertContentContainsFold applies the ContainsFold predicate on the "alert_content" field.
func AlertContentContainsFold(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAlertContent), v))
	})
}

// AlertBusinessEQ applies the EQ predicate on the "alert_business" field.
func AlertBusinessEQ(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAlertBusiness), v))
	})
}

// AlertBusinessNEQ applies the NEQ predicate on the "alert_business" field.
func AlertBusinessNEQ(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAlertBusiness), v))
	})
}

// AlertBusinessIn applies the In predicate on the "alert_business" field.
func AlertBusinessIn(vs ...string) predicate.AsMarketAppAlert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAlertBusiness), v...))
	})
}

// AlertBusinessNotIn applies the NotIn predicate on the "alert_business" field.
func AlertBusinessNotIn(vs ...string) predicate.AsMarketAppAlert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAlertBusiness), v...))
	})
}

// AlertBusinessGT applies the GT predicate on the "alert_business" field.
func AlertBusinessGT(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAlertBusiness), v))
	})
}

// AlertBusinessGTE applies the GTE predicate on the "alert_business" field.
func AlertBusinessGTE(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAlertBusiness), v))
	})
}

// AlertBusinessLT applies the LT predicate on the "alert_business" field.
func AlertBusinessLT(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAlertBusiness), v))
	})
}

// AlertBusinessLTE applies the LTE predicate on the "alert_business" field.
func AlertBusinessLTE(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAlertBusiness), v))
	})
}

// AlertBusinessContains applies the Contains predicate on the "alert_business" field.
func AlertBusinessContains(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAlertBusiness), v))
	})
}

// AlertBusinessHasPrefix applies the HasPrefix predicate on the "alert_business" field.
func AlertBusinessHasPrefix(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAlertBusiness), v))
	})
}

// AlertBusinessHasSuffix applies the HasSuffix predicate on the "alert_business" field.
func AlertBusinessHasSuffix(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAlertBusiness), v))
	})
}

// AlertBusinessIsNil applies the IsNil predicate on the "alert_business" field.
func AlertBusinessIsNil() predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAlertBusiness)))
	})
}

// AlertBusinessNotNil applies the NotNil predicate on the "alert_business" field.
func AlertBusinessNotNil() predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAlertBusiness)))
	})
}

// AlertBusinessEqualFold applies the EqualFold predicate on the "alert_business" field.
func AlertBusinessEqualFold(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAlertBusiness), v))
	})
}

// AlertBusinessContainsFold applies the ContainsFold predicate on the "alert_business" field.
func AlertBusinessContainsFold(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAlertBusiness), v))
	})
}

// AlertEmergencyLevelEQ applies the EQ predicate on the "alert_emergency_level" field.
func AlertEmergencyLevelEQ(v int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAlertEmergencyLevel), v))
	})
}

// AlertEmergencyLevelNEQ applies the NEQ predicate on the "alert_emergency_level" field.
func AlertEmergencyLevelNEQ(v int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAlertEmergencyLevel), v))
	})
}

// AlertEmergencyLevelIn applies the In predicate on the "alert_emergency_level" field.
func AlertEmergencyLevelIn(vs ...int64) predicate.AsMarketAppAlert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAlertEmergencyLevel), v...))
	})
}

// AlertEmergencyLevelNotIn applies the NotIn predicate on the "alert_emergency_level" field.
func AlertEmergencyLevelNotIn(vs ...int64) predicate.AsMarketAppAlert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAlertEmergencyLevel), v...))
	})
}

// AlertEmergencyLevelGT applies the GT predicate on the "alert_emergency_level" field.
func AlertEmergencyLevelGT(v int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAlertEmergencyLevel), v))
	})
}

// AlertEmergencyLevelGTE applies the GTE predicate on the "alert_emergency_level" field.
func AlertEmergencyLevelGTE(v int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAlertEmergencyLevel), v))
	})
}

// AlertEmergencyLevelLT applies the LT predicate on the "alert_emergency_level" field.
func AlertEmergencyLevelLT(v int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAlertEmergencyLevel), v))
	})
}

// AlertEmergencyLevelLTE applies the LTE predicate on the "alert_emergency_level" field.
func AlertEmergencyLevelLTE(v int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAlertEmergencyLevel), v))
	})
}

// AlertEmergencyLevelIsNil applies the IsNil predicate on the "alert_emergency_level" field.
func AlertEmergencyLevelIsNil() predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAlertEmergencyLevel)))
	})
}

// AlertEmergencyLevelNotNil applies the NotNil predicate on the "alert_emergency_level" field.
func AlertEmergencyLevelNotNil() predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAlertEmergencyLevel)))
	})
}

// AlertReleaseAppIDEQ applies the EQ predicate on the "alert_release_app_id" field.
func AlertReleaseAppIDEQ(v int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAlertReleaseAppID), v))
	})
}

// AlertReleaseAppIDNEQ applies the NEQ predicate on the "alert_release_app_id" field.
func AlertReleaseAppIDNEQ(v int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAlertReleaseAppID), v))
	})
}

// AlertReleaseAppIDIn applies the In predicate on the "alert_release_app_id" field.
func AlertReleaseAppIDIn(vs ...int64) predicate.AsMarketAppAlert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAlertReleaseAppID), v...))
	})
}

// AlertReleaseAppIDNotIn applies the NotIn predicate on the "alert_release_app_id" field.
func AlertReleaseAppIDNotIn(vs ...int64) predicate.AsMarketAppAlert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAlertReleaseAppID), v...))
	})
}

// AlertReleaseAppIDIsNil applies the IsNil predicate on the "alert_release_app_id" field.
func AlertReleaseAppIDIsNil() predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAlertReleaseAppID)))
	})
}

// AlertReleaseAppIDNotNil applies the NotNil predicate on the "alert_release_app_id" field.
func AlertReleaseAppIDNotNil() predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAlertReleaseAppID)))
	})
}

// AlertReleaseTimeEQ applies the EQ predicate on the "alert_release_time" field.
func AlertReleaseTimeEQ(v date.DateTime) predicate.AsMarketAppAlert {
	vc := time.Time(v)
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAlertReleaseTime), vc))
	})
}

// AlertReleaseTimeNEQ applies the NEQ predicate on the "alert_release_time" field.
func AlertReleaseTimeNEQ(v date.DateTime) predicate.AsMarketAppAlert {
	vc := time.Time(v)
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAlertReleaseTime), vc))
	})
}

// AlertReleaseTimeIn applies the In predicate on the "alert_release_time" field.
func AlertReleaseTimeIn(vs ...date.DateTime) predicate.AsMarketAppAlert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAlertReleaseTime), v...))
	})
}

// AlertReleaseTimeNotIn applies the NotIn predicate on the "alert_release_time" field.
func AlertReleaseTimeNotIn(vs ...date.DateTime) predicate.AsMarketAppAlert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAlertReleaseTime), v...))
	})
}

// AlertReleaseTimeGT applies the GT predicate on the "alert_release_time" field.
func AlertReleaseTimeGT(v date.DateTime) predicate.AsMarketAppAlert {
	vc := time.Time(v)
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAlertReleaseTime), vc))
	})
}

// AlertReleaseTimeGTE applies the GTE predicate on the "alert_release_time" field.
func AlertReleaseTimeGTE(v date.DateTime) predicate.AsMarketAppAlert {
	vc := time.Time(v)
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAlertReleaseTime), vc))
	})
}

// AlertReleaseTimeLT applies the LT predicate on the "alert_release_time" field.
func AlertReleaseTimeLT(v date.DateTime) predicate.AsMarketAppAlert {
	vc := time.Time(v)
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAlertReleaseTime), vc))
	})
}

// AlertReleaseTimeLTE applies the LTE predicate on the "alert_release_time" field.
func AlertReleaseTimeLTE(v date.DateTime) predicate.AsMarketAppAlert {
	vc := time.Time(v)
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAlertReleaseTime), vc))
	})
}

// AlertReleaseTimeIsNil applies the IsNil predicate on the "alert_release_time" field.
func AlertReleaseTimeIsNil() predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAlertReleaseTime)))
	})
}

// AlertReleaseTimeNotNil applies the NotNil predicate on the "alert_release_time" field.
func AlertReleaseTimeNotNil() predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAlertReleaseTime)))
	})
}

// AlertRoleIdsEQ applies the EQ predicate on the "alert_role_ids" field.
func AlertRoleIdsEQ(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAlertRoleIds), v))
	})
}

// AlertRoleIdsNEQ applies the NEQ predicate on the "alert_role_ids" field.
func AlertRoleIdsNEQ(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAlertRoleIds), v))
	})
}

// AlertRoleIdsIn applies the In predicate on the "alert_role_ids" field.
func AlertRoleIdsIn(vs ...string) predicate.AsMarketAppAlert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAlertRoleIds), v...))
	})
}

// AlertRoleIdsNotIn applies the NotIn predicate on the "alert_role_ids" field.
func AlertRoleIdsNotIn(vs ...string) predicate.AsMarketAppAlert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAlertRoleIds), v...))
	})
}

// AlertRoleIdsGT applies the GT predicate on the "alert_role_ids" field.
func AlertRoleIdsGT(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAlertRoleIds), v))
	})
}

// AlertRoleIdsGTE applies the GTE predicate on the "alert_role_ids" field.
func AlertRoleIdsGTE(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAlertRoleIds), v))
	})
}

// AlertRoleIdsLT applies the LT predicate on the "alert_role_ids" field.
func AlertRoleIdsLT(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAlertRoleIds), v))
	})
}

// AlertRoleIdsLTE applies the LTE predicate on the "alert_role_ids" field.
func AlertRoleIdsLTE(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAlertRoleIds), v))
	})
}

// AlertRoleIdsContains applies the Contains predicate on the "alert_role_ids" field.
func AlertRoleIdsContains(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAlertRoleIds), v))
	})
}

// AlertRoleIdsHasPrefix applies the HasPrefix predicate on the "alert_role_ids" field.
func AlertRoleIdsHasPrefix(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAlertRoleIds), v))
	})
}

// AlertRoleIdsHasSuffix applies the HasSuffix predicate on the "alert_role_ids" field.
func AlertRoleIdsHasSuffix(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAlertRoleIds), v))
	})
}

// AlertRoleIdsIsNil applies the IsNil predicate on the "alert_role_ids" field.
func AlertRoleIdsIsNil() predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAlertRoleIds)))
	})
}

// AlertRoleIdsNotNil applies the NotNil predicate on the "alert_role_ids" field.
func AlertRoleIdsNotNil() predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAlertRoleIds)))
	})
}

// AlertRoleIdsEqualFold applies the EqualFold predicate on the "alert_role_ids" field.
func AlertRoleIdsEqualFold(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAlertRoleIds), v))
	})
}

// AlertRoleIdsContainsFold applies the ContainsFold predicate on the "alert_role_ids" field.
func AlertRoleIdsContainsFold(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAlertRoleIds), v))
	})
}

// AlertJobIdsEQ applies the EQ predicate on the "alert_job_ids" field.
func AlertJobIdsEQ(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAlertJobIds), v))
	})
}

// AlertJobIdsNEQ applies the NEQ predicate on the "alert_job_ids" field.
func AlertJobIdsNEQ(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAlertJobIds), v))
	})
}

// AlertJobIdsIn applies the In predicate on the "alert_job_ids" field.
func AlertJobIdsIn(vs ...string) predicate.AsMarketAppAlert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAlertJobIds), v...))
	})
}

// AlertJobIdsNotIn applies the NotIn predicate on the "alert_job_ids" field.
func AlertJobIdsNotIn(vs ...string) predicate.AsMarketAppAlert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAlertJobIds), v...))
	})
}

// AlertJobIdsGT applies the GT predicate on the "alert_job_ids" field.
func AlertJobIdsGT(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAlertJobIds), v))
	})
}

// AlertJobIdsGTE applies the GTE predicate on the "alert_job_ids" field.
func AlertJobIdsGTE(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAlertJobIds), v))
	})
}

// AlertJobIdsLT applies the LT predicate on the "alert_job_ids" field.
func AlertJobIdsLT(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAlertJobIds), v))
	})
}

// AlertJobIdsLTE applies the LTE predicate on the "alert_job_ids" field.
func AlertJobIdsLTE(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAlertJobIds), v))
	})
}

// AlertJobIdsContains applies the Contains predicate on the "alert_job_ids" field.
func AlertJobIdsContains(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAlertJobIds), v))
	})
}

// AlertJobIdsHasPrefix applies the HasPrefix predicate on the "alert_job_ids" field.
func AlertJobIdsHasPrefix(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAlertJobIds), v))
	})
}

// AlertJobIdsHasSuffix applies the HasSuffix predicate on the "alert_job_ids" field.
func AlertJobIdsHasSuffix(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAlertJobIds), v))
	})
}

// AlertJobIdsIsNil applies the IsNil predicate on the "alert_job_ids" field.
func AlertJobIdsIsNil() predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAlertJobIds)))
	})
}

// AlertJobIdsNotNil applies the NotNil predicate on the "alert_job_ids" field.
func AlertJobIdsNotNil() predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAlertJobIds)))
	})
}

// AlertJobIdsEqualFold applies the EqualFold predicate on the "alert_job_ids" field.
func AlertJobIdsEqualFold(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAlertJobIds), v))
	})
}

// AlertJobIdsContainsFold applies the ContainsFold predicate on the "alert_job_ids" field.
func AlertJobIdsContainsFold(v string) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAlertJobIds), v))
	})
}

// AlertStatusEQ applies the EQ predicate on the "alert_status" field.
func AlertStatusEQ(v int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAlertStatus), v))
	})
}

// AlertStatusNEQ applies the NEQ predicate on the "alert_status" field.
func AlertStatusNEQ(v int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAlertStatus), v))
	})
}

// AlertStatusIn applies the In predicate on the "alert_status" field.
func AlertStatusIn(vs ...int64) predicate.AsMarketAppAlert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAlertStatus), v...))
	})
}

// AlertStatusNotIn applies the NotIn predicate on the "alert_status" field.
func AlertStatusNotIn(vs ...int64) predicate.AsMarketAppAlert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAlertStatus), v...))
	})
}

// AlertStatusGT applies the GT predicate on the "alert_status" field.
func AlertStatusGT(v int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAlertStatus), v))
	})
}

// AlertStatusGTE applies the GTE predicate on the "alert_status" field.
func AlertStatusGTE(v int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAlertStatus), v))
	})
}

// AlertStatusLT applies the LT predicate on the "alert_status" field.
func AlertStatusLT(v int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAlertStatus), v))
	})
}

// AlertStatusLTE applies the LTE predicate on the "alert_status" field.
func AlertStatusLTE(v int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAlertStatus), v))
	})
}

// AlertStatusIsNil applies the IsNil predicate on the "alert_status" field.
func AlertStatusIsNil() predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAlertStatus)))
	})
}

// AlertStatusNotNil applies the NotNil predicate on the "alert_status" field.
func AlertStatusNotNil() predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAlertStatus)))
	})
}

// IsDeletedEQ applies the EQ predicate on the "is_deleted" field.
func IsDeletedEQ(v int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedNEQ applies the NEQ predicate on the "is_deleted" field.
func IsDeletedNEQ(v int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedIn applies the In predicate on the "is_deleted" field.
func IsDeletedIn(vs ...int64) predicate.AsMarketAppAlert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsDeleted), v...))
	})
}

// IsDeletedNotIn applies the NotIn predicate on the "is_deleted" field.
func IsDeletedNotIn(vs ...int64) predicate.AsMarketAppAlert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsDeleted), v...))
	})
}

// IsDeletedGT applies the GT predicate on the "is_deleted" field.
func IsDeletedGT(v int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedGTE applies the GTE predicate on the "is_deleted" field.
func IsDeletedGTE(v int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedLT applies the LT predicate on the "is_deleted" field.
func IsDeletedLT(v int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedLTE applies the LTE predicate on the "is_deleted" field.
func IsDeletedLTE(v int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsDeleted), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int64) predicate.AsMarketAppAlert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int64) predicate.AsMarketAppAlert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStatus)))
	})
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStatus)))
	})
}

// CreateUserEQ applies the EQ predicate on the "create_user" field.
func CreateUserEQ(v int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateUser), v))
	})
}

// CreateUserNEQ applies the NEQ predicate on the "create_user" field.
func CreateUserNEQ(v int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateUser), v))
	})
}

// CreateUserIn applies the In predicate on the "create_user" field.
func CreateUserIn(vs ...int64) predicate.AsMarketAppAlert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateUser), v...))
	})
}

// CreateUserNotIn applies the NotIn predicate on the "create_user" field.
func CreateUserNotIn(vs ...int64) predicate.AsMarketAppAlert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateUser), v...))
	})
}

// CreateUserGT applies the GT predicate on the "create_user" field.
func CreateUserGT(v int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateUser), v))
	})
}

// CreateUserGTE applies the GTE predicate on the "create_user" field.
func CreateUserGTE(v int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateUser), v))
	})
}

// CreateUserLT applies the LT predicate on the "create_user" field.
func CreateUserLT(v int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateUser), v))
	})
}

// CreateUserLTE applies the LTE predicate on the "create_user" field.
func CreateUserLTE(v int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateUser), v))
	})
}

// CreateUserIsNil applies the IsNil predicate on the "create_user" field.
func CreateUserIsNil() predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreateUser)))
	})
}

// CreateUserNotNil applies the NotNil predicate on the "create_user" field.
func CreateUserNotNil() predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreateUser)))
	})
}

// UpdateUserEQ applies the EQ predicate on the "update_user" field.
func UpdateUserEQ(v int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserNEQ applies the NEQ predicate on the "update_user" field.
func UpdateUserNEQ(v int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserIn applies the In predicate on the "update_user" field.
func UpdateUserIn(vs ...int64) predicate.AsMarketAppAlert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateUser), v...))
	})
}

// UpdateUserNotIn applies the NotIn predicate on the "update_user" field.
func UpdateUserNotIn(vs ...int64) predicate.AsMarketAppAlert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateUser), v...))
	})
}

// UpdateUserGT applies the GT predicate on the "update_user" field.
func UpdateUserGT(v int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserGTE applies the GTE predicate on the "update_user" field.
func UpdateUserGTE(v int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserLT applies the LT predicate on the "update_user" field.
func UpdateUserLT(v int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserLTE applies the LTE predicate on the "update_user" field.
func UpdateUserLTE(v int64) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserIsNil applies the IsNil predicate on the "update_user" field.
func UpdateUserIsNil() predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdateUser)))
	})
}

// UpdateUserNotNil applies the NotNil predicate on the "update_user" field.
func UpdateUserNotNil() predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdateUser)))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v date.DateTime) predicate.AsMarketAppAlert {
	vc := time.Time(v)
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v date.DateTime) predicate.AsMarketAppAlert {
	vc := time.Time(v)
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...date.DateTime) predicate.AsMarketAppAlert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...date.DateTime) predicate.AsMarketAppAlert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v date.DateTime) predicate.AsMarketAppAlert {
	vc := time.Time(v)
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v date.DateTime) predicate.AsMarketAppAlert {
	vc := time.Time(v)
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v date.DateTime) predicate.AsMarketAppAlert {
	vc := time.Time(v)
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v date.DateTime) predicate.AsMarketAppAlert {
	vc := time.Time(v)
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeIsNil applies the IsNil predicate on the "create_time" field.
func CreateTimeIsNil() predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreateTime)))
	})
}

// CreateTimeNotNil applies the NotNil predicate on the "create_time" field.
func CreateTimeNotNil() predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreateTime)))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v date.DateTime) predicate.AsMarketAppAlert {
	vc := time.Time(v)
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v date.DateTime) predicate.AsMarketAppAlert {
	vc := time.Time(v)
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...date.DateTime) predicate.AsMarketAppAlert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...date.DateTime) predicate.AsMarketAppAlert {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v date.DateTime) predicate.AsMarketAppAlert {
	vc := time.Time(v)
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v date.DateTime) predicate.AsMarketAppAlert {
	vc := time.Time(v)
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v date.DateTime) predicate.AsMarketAppAlert {
	vc := time.Time(v)
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v date.DateTime) predicate.AsMarketAppAlert {
	vc := time.Time(v)
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeIsNil applies the IsNil predicate on the "update_time" field.
func UpdateTimeIsNil() predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdateTime)))
	})
}

// UpdateTimeNotNil applies the NotNil predicate on the "update_time" field.
func UpdateTimeNotNil() predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdateTime)))
	})
}

// HasAppx applies the HasEdge predicate on the "appx" edge.
func HasAppx() predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppxTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AppxTable, AppxColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppxWith applies the HasEdge predicate on the "appx" edge with a given conditions (other predicates).
func HasAppxWith(preds ...predicate.AsMarketApp) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppxInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AppxTable, AppxColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AsMarketAppAlert) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AsMarketAppAlert) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AsMarketAppAlert) predicate.AsMarketAppAlert {
	return predicate.AsMarketAppAlert(func(s *sql.Selector) {
		p(s.Not())
	})
}
