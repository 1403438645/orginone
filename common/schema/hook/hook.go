// Code generated by entc, DO NOT EDIT.

package hook

import (
	"context"
	"fmt"
	"orginone/common/schema"
)

// The AsAllGroupFunc type is an adapter to allow the use of ordinary
// function as AsAllGroup mutator.
type AsAllGroupFunc func(context.Context, *schema.AsAllGroupMutation) (schema.Value, error)

// Mutate calls f(ctx, m).
func (f AsAllGroupFunc) Mutate(ctx context.Context, m schema.Mutation) (schema.Value, error) {
	mv, ok := m.(*schema.AsAllGroupMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *schema.AsAllGroupMutation", m)
	}
	return f(ctx, mv)
}

// The AsAppGroupDistributionDataFunc type is an adapter to allow the use of ordinary
// function as AsAppGroupDistributionData mutator.
type AsAppGroupDistributionDataFunc func(context.Context, *schema.AsAppGroupDistributionDataMutation) (schema.Value, error)

// Mutate calls f(ctx, m).
func (f AsAppGroupDistributionDataFunc) Mutate(ctx context.Context, m schema.Mutation) (schema.Value, error) {
	mv, ok := m.(*schema.AsAppGroupDistributionDataMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *schema.AsAppGroupDistributionDataMutation", m)
	}
	return f(ctx, mv)
}

// The AsDictFunc type is an adapter to allow the use of ordinary
// function as AsDict mutator.
type AsDictFunc func(context.Context, *schema.AsDictMutation) (schema.Value, error)

// Mutate calls f(ctx, m).
func (f AsDictFunc) Mutate(ctx context.Context, m schema.Mutation) (schema.Value, error) {
	mv, ok := m.(*schema.AsDictMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *schema.AsDictMutation", m)
	}
	return f(ctx, mv)
}

// The AsGroupTenantRelationsFunc type is an adapter to allow the use of ordinary
// function as AsGroupTenantRelations mutator.
type AsGroupTenantRelationsFunc func(context.Context, *schema.AsGroupTenantRelationsMutation) (schema.Value, error)

// Mutate calls f(ctx, m).
func (f AsGroupTenantRelationsFunc) Mutate(ctx context.Context, m schema.Mutation) (schema.Value, error) {
	mv, ok := m.(*schema.AsGroupTenantRelationsMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *schema.AsGroupTenantRelationsMutation", m)
	}
	return f(ctx, mv)
}

// The AsInnerAgencyFunc type is an adapter to allow the use of ordinary
// function as AsInnerAgency mutator.
type AsInnerAgencyFunc func(context.Context, *schema.AsInnerAgencyMutation) (schema.Value, error)

// Mutate calls f(ctx, m).
func (f AsInnerAgencyFunc) Mutate(ctx context.Context, m schema.Mutation) (schema.Value, error) {
	mv, ok := m.(*schema.AsInnerAgencyMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *schema.AsInnerAgencyMutation", m)
	}
	return f(ctx, mv)
}

// The AsInputDataFunc type is an adapter to allow the use of ordinary
// function as AsInputData mutator.
type AsInputDataFunc func(context.Context, *schema.AsInputDataMutation) (schema.Value, error)

// Mutate calls f(ctx, m).
func (f AsInputDataFunc) Mutate(ctx context.Context, m schema.Mutation) (schema.Value, error) {
	mv, ok := m.(*schema.AsInputDataMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *schema.AsInputDataMutation", m)
	}
	return f(ctx, mv)
}

// The AsJobFunc type is an adapter to allow the use of ordinary
// function as AsJob mutator.
type AsJobFunc func(context.Context, *schema.AsJobMutation) (schema.Value, error)

// Mutate calls f(ctx, m).
func (f AsJobFunc) Mutate(ctx context.Context, m schema.Mutation) (schema.Value, error) {
	mv, ok := m.(*schema.AsJobMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *schema.AsJobMutation", m)
	}
	return f(ctx, mv)
}

// The AsLayerFunc type is an adapter to allow the use of ordinary
// function as AsLayer mutator.
type AsLayerFunc func(context.Context, *schema.AsLayerMutation) (schema.Value, error)

// Mutate calls f(ctx, m).
func (f AsLayerFunc) Mutate(ctx context.Context, m schema.Mutation) (schema.Value, error) {
	mv, ok := m.(*schema.AsLayerMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *schema.AsLayerMutation", m)
	}
	return f(ctx, mv)
}

// The AsMarketAppFunc type is an adapter to allow the use of ordinary
// function as AsMarketApp mutator.
type AsMarketAppFunc func(context.Context, *schema.AsMarketAppMutation) (schema.Value, error)

// Mutate calls f(ctx, m).
func (f AsMarketAppFunc) Mutate(ctx context.Context, m schema.Mutation) (schema.Value, error) {
	mv, ok := m.(*schema.AsMarketAppMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *schema.AsMarketAppMutation", m)
	}
	return f(ctx, mv)
}

// The AsMarketAppAlertFunc type is an adapter to allow the use of ordinary
// function as AsMarketAppAlert mutator.
type AsMarketAppAlertFunc func(context.Context, *schema.AsMarketAppAlertMutation) (schema.Value, error)

// Mutate calls f(ctx, m).
func (f AsMarketAppAlertFunc) Mutate(ctx context.Context, m schema.Mutation) (schema.Value, error) {
	mv, ok := m.(*schema.AsMarketAppAlertMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *schema.AsMarketAppAlertMutation", m)
	}
	return f(ctx, mv)
}

// The AsMarketAppComponentFunc type is an adapter to allow the use of ordinary
// function as AsMarketAppComponent mutator.
type AsMarketAppComponentFunc func(context.Context, *schema.AsMarketAppComponentMutation) (schema.Value, error)

// Mutate calls f(ctx, m).
func (f AsMarketAppComponentFunc) Mutate(ctx context.Context, m schema.Mutation) (schema.Value, error) {
	mv, ok := m.(*schema.AsMarketAppComponentMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *schema.AsMarketAppComponentMutation", m)
	}
	return f(ctx, mv)
}

// The AsMarketAppComponentTemplateFunc type is an adapter to allow the use of ordinary
// function as AsMarketAppComponentTemplate mutator.
type AsMarketAppComponentTemplateFunc func(context.Context, *schema.AsMarketAppComponentTemplateMutation) (schema.Value, error)

// Mutate calls f(ctx, m).
func (f AsMarketAppComponentTemplateFunc) Mutate(ctx context.Context, m schema.Mutation) (schema.Value, error) {
	mv, ok := m.(*schema.AsMarketAppComponentTemplateMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *schema.AsMarketAppComponentTemplateMutation", m)
	}
	return f(ctx, mv)
}

// The AsMarketAppGroupDistributionFunc type is an adapter to allow the use of ordinary
// function as AsMarketAppGroupDistribution mutator.
type AsMarketAppGroupDistributionFunc func(context.Context, *schema.AsMarketAppGroupDistributionMutation) (schema.Value, error)

// Mutate calls f(ctx, m).
func (f AsMarketAppGroupDistributionFunc) Mutate(ctx context.Context, m schema.Mutation) (schema.Value, error) {
	mv, ok := m.(*schema.AsMarketAppGroupDistributionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *schema.AsMarketAppGroupDistributionMutation", m)
	}
	return f(ctx, mv)
}

// The AsMarketAppGroupDistributionRelationFunc type is an adapter to allow the use of ordinary
// function as AsMarketAppGroupDistributionRelation mutator.
type AsMarketAppGroupDistributionRelationFunc func(context.Context, *schema.AsMarketAppGroupDistributionRelationMutation) (schema.Value, error)

// Mutate calls f(ctx, m).
func (f AsMarketAppGroupDistributionRelationFunc) Mutate(ctx context.Context, m schema.Mutation) (schema.Value, error) {
	mv, ok := m.(*schema.AsMarketAppGroupDistributionRelationMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *schema.AsMarketAppGroupDistributionRelationMutation", m)
	}
	return f(ctx, mv)
}

// The AsMarketAppKeySecretFunc type is an adapter to allow the use of ordinary
// function as AsMarketAppKeySecret mutator.
type AsMarketAppKeySecretFunc func(context.Context, *schema.AsMarketAppKeySecretMutation) (schema.Value, error)

// Mutate calls f(ctx, m).
func (f AsMarketAppKeySecretFunc) Mutate(ctx context.Context, m schema.Mutation) (schema.Value, error) {
	mv, ok := m.(*schema.AsMarketAppKeySecretMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *schema.AsMarketAppKeySecretMutation", m)
	}
	return f(ctx, mv)
}

// The AsMarketAppNoticeFunc type is an adapter to allow the use of ordinary
// function as AsMarketAppNotice mutator.
type AsMarketAppNoticeFunc func(context.Context, *schema.AsMarketAppNoticeMutation) (schema.Value, error)

// Mutate calls f(ctx, m).
func (f AsMarketAppNoticeFunc) Mutate(ctx context.Context, m schema.Mutation) (schema.Value, error) {
	mv, ok := m.(*schema.AsMarketAppNoticeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *schema.AsMarketAppNoticeMutation", m)
	}
	return f(ctx, mv)
}

// The AsMarketAppPurchaseFunc type is an adapter to allow the use of ordinary
// function as AsMarketAppPurchase mutator.
type AsMarketAppPurchaseFunc func(context.Context, *schema.AsMarketAppPurchaseMutation) (schema.Value, error)

// Mutate calls f(ctx, m).
func (f AsMarketAppPurchaseFunc) Mutate(ctx context.Context, m schema.Mutation) (schema.Value, error) {
	mv, ok := m.(*schema.AsMarketAppPurchaseMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *schema.AsMarketAppPurchaseMutation", m)
	}
	return f(ctx, mv)
}

// The AsMarketAppRoleFunc type is an adapter to allow the use of ordinary
// function as AsMarketAppRole mutator.
type AsMarketAppRoleFunc func(context.Context, *schema.AsMarketAppRoleMutation) (schema.Value, error)

// Mutate calls f(ctx, m).
func (f AsMarketAppRoleFunc) Mutate(ctx context.Context, m schema.Mutation) (schema.Value, error) {
	mv, ok := m.(*schema.AsMarketAppRoleMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *schema.AsMarketAppRoleMutation", m)
	}
	return f(ctx, mv)
}

// The AsMarketAppUserTemplateFunc type is an adapter to allow the use of ordinary
// function as AsMarketAppUserTemplate mutator.
type AsMarketAppUserTemplateFunc func(context.Context, *schema.AsMarketAppUserTemplateMutation) (schema.Value, error)

// Mutate calls f(ctx, m).
func (f AsMarketAppUserTemplateFunc) Mutate(ctx context.Context, m schema.Mutation) (schema.Value, error) {
	mv, ok := m.(*schema.AsMarketAppUserTemplateMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *schema.AsMarketAppUserTemplateMutation", m)
	}
	return f(ctx, mv)
}

// The AsMarketMenuFunc type is an adapter to allow the use of ordinary
// function as AsMarketMenu mutator.
type AsMarketMenuFunc func(context.Context, *schema.AsMarketMenuMutation) (schema.Value, error)

// Mutate calls f(ctx, m).
func (f AsMarketMenuFunc) Mutate(ctx context.Context, m schema.Mutation) (schema.Value, error) {
	mv, ok := m.(*schema.AsMarketMenuMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *schema.AsMarketMenuMutation", m)
	}
	return f(ctx, mv)
}

// The AsMarketMenuUserSortFunc type is an adapter to allow the use of ordinary
// function as AsMarketMenuUserSort mutator.
type AsMarketMenuUserSortFunc func(context.Context, *schema.AsMarketMenuUserSortMutation) (schema.Value, error)

// Mutate calls f(ctx, m).
func (f AsMarketMenuUserSortFunc) Mutate(ctx context.Context, m schema.Mutation) (schema.Value, error) {
	mv, ok := m.(*schema.AsMarketMenuUserSortMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *schema.AsMarketMenuUserSortMutation", m)
	}
	return f(ctx, mv)
}

// The AsMarketRoleDistributionFunc type is an adapter to allow the use of ordinary
// function as AsMarketRoleDistribution mutator.
type AsMarketRoleDistributionFunc func(context.Context, *schema.AsMarketRoleDistributionMutation) (schema.Value, error)

// Mutate calls f(ctx, m).
func (f AsMarketRoleDistributionFunc) Mutate(ctx context.Context, m schema.Mutation) (schema.Value, error) {
	mv, ok := m.(*schema.AsMarketRoleDistributionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *schema.AsMarketRoleDistributionMutation", m)
	}
	return f(ctx, mv)
}

// The AsMarketRoleMenuFunc type is an adapter to allow the use of ordinary
// function as AsMarketRoleMenu mutator.
type AsMarketRoleMenuFunc func(context.Context, *schema.AsMarketRoleMenuMutation) (schema.Value, error)

// Mutate calls f(ctx, m).
func (f AsMarketRoleMenuFunc) Mutate(ctx context.Context, m schema.Mutation) (schema.Value, error) {
	mv, ok := m.(*schema.AsMarketRoleMenuMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *schema.AsMarketRoleMenuMutation", m)
	}
	return f(ctx, mv)
}

// The AsMarketUsedAppFunc type is an adapter to allow the use of ordinary
// function as AsMarketUsedApp mutator.
type AsMarketUsedAppFunc func(context.Context, *schema.AsMarketUsedAppMutation) (schema.Value, error)

// Mutate calls f(ctx, m).
func (f AsMarketUsedAppFunc) Mutate(ctx context.Context, m schema.Mutation) (schema.Value, error) {
	mv, ok := m.(*schema.AsMarketUsedAppMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *schema.AsMarketUsedAppMutation", m)
	}
	return f(ctx, mv)
}

// The AsMenuFunc type is an adapter to allow the use of ordinary
// function as AsMenu mutator.
type AsMenuFunc func(context.Context, *schema.AsMenuMutation) (schema.Value, error)

// Mutate calls f(ctx, m).
func (f AsMenuFunc) Mutate(ctx context.Context, m schema.Mutation) (schema.Value, error) {
	mv, ok := m.(*schema.AsMenuMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *schema.AsMenuMutation", m)
	}
	return f(ctx, mv)
}

// The AsPersonFunc type is an adapter to allow the use of ordinary
// function as AsPerson mutator.
type AsPersonFunc func(context.Context, *schema.AsPersonMutation) (schema.Value, error)

// Mutate calls f(ctx, m).
func (f AsPersonFunc) Mutate(ctx context.Context, m schema.Mutation) (schema.Value, error) {
	mv, ok := m.(*schema.AsPersonMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *schema.AsPersonMutation", m)
	}
	return f(ctx, mv)
}

// The AsPersonSingleFunc type is an adapter to allow the use of ordinary
// function as AsPersonSingle mutator.
type AsPersonSingleFunc func(context.Context, *schema.AsPersonSingleMutation) (schema.Value, error)

// Mutate calls f(ctx, m).
func (f AsPersonSingleFunc) Mutate(ctx context.Context, m schema.Mutation) (schema.Value, error) {
	mv, ok := m.(*schema.AsPersonSingleMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *schema.AsPersonSingleMutation", m)
	}
	return f(ctx, mv)
}

// The AsPropertiesFunc type is an adapter to allow the use of ordinary
// function as AsProperties mutator.
type AsPropertiesFunc func(context.Context, *schema.AsPropertiesMutation) (schema.Value, error)

// Mutate calls f(ctx, m).
func (f AsPropertiesFunc) Mutate(ctx context.Context, m schema.Mutation) (schema.Value, error) {
	mv, ok := m.(*schema.AsPropertiesMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *schema.AsPropertiesMutation", m)
	}
	return f(ctx, mv)
}

// The AsPropertiesDistributionFunc type is an adapter to allow the use of ordinary
// function as AsPropertiesDistribution mutator.
type AsPropertiesDistributionFunc func(context.Context, *schema.AsPropertiesDistributionMutation) (schema.Value, error)

// Mutate calls f(ctx, m).
func (f AsPropertiesDistributionFunc) Mutate(ctx context.Context, m schema.Mutation) (schema.Value, error) {
	mv, ok := m.(*schema.AsPropertiesDistributionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *schema.AsPropertiesDistributionMutation", m)
	}
	return f(ctx, mv)
}

// The AsRedeployDataFunc type is an adapter to allow the use of ordinary
// function as AsRedeployData mutator.
type AsRedeployDataFunc func(context.Context, *schema.AsRedeployDataMutation) (schema.Value, error)

// Mutate calls f(ctx, m).
func (f AsRedeployDataFunc) Mutate(ctx context.Context, m schema.Mutation) (schema.Value, error) {
	mv, ok := m.(*schema.AsRedeployDataMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *schema.AsRedeployDataMutation", m)
	}
	return f(ctx, mv)
}

// The AsRoleFunc type is an adapter to allow the use of ordinary
// function as AsRole mutator.
type AsRoleFunc func(context.Context, *schema.AsRoleMutation) (schema.Value, error)

// Mutate calls f(ctx, m).
func (f AsRoleFunc) Mutate(ctx context.Context, m schema.Mutation) (schema.Value, error) {
	mv, ok := m.(*schema.AsRoleMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *schema.AsRoleMutation", m)
	}
	return f(ctx, mv)
}

// The AsTenantFunc type is an adapter to allow the use of ordinary
// function as AsTenant mutator.
type AsTenantFunc func(context.Context, *schema.AsTenantMutation) (schema.Value, error)

// Mutate calls f(ctx, m).
func (f AsTenantFunc) Mutate(ctx context.Context, m schema.Mutation) (schema.Value, error) {
	mv, ok := m.(*schema.AsTenantMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *schema.AsTenantMutation", m)
	}
	return f(ctx, mv)
}

// The AsTenantAttrFunc type is an adapter to allow the use of ordinary
// function as AsTenantAttr mutator.
type AsTenantAttrFunc func(context.Context, *schema.AsTenantAttrMutation) (schema.Value, error)

// Mutate calls f(ctx, m).
func (f AsTenantAttrFunc) Mutate(ctx context.Context, m schema.Mutation) (schema.Value, error) {
	mv, ok := m.(*schema.AsTenantAttrMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *schema.AsTenantAttrMutation", m)
	}
	return f(ctx, mv)
}

// The AsTenantAttrRoleFunc type is an adapter to allow the use of ordinary
// function as AsTenantAttrRole mutator.
type AsTenantAttrRoleFunc func(context.Context, *schema.AsTenantAttrRoleMutation) (schema.Value, error)

// Mutate calls f(ctx, m).
func (f AsTenantAttrRoleFunc) Mutate(ctx context.Context, m schema.Mutation) (schema.Value, error) {
	mv, ok := m.(*schema.AsTenantAttrRoleMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *schema.AsTenantAttrRoleMutation", m)
	}
	return f(ctx, mv)
}

// The AsTenantIconFunc type is an adapter to allow the use of ordinary
// function as AsTenantIcon mutator.
type AsTenantIconFunc func(context.Context, *schema.AsTenantIconMutation) (schema.Value, error)

// Mutate calls f(ctx, m).
func (f AsTenantIconFunc) Mutate(ctx context.Context, m schema.Mutation) (schema.Value, error) {
	mv, ok := m.(*schema.AsTenantIconMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *schema.AsTenantIconMutation", m)
	}
	return f(ctx, mv)
}

// The AsUnitFunc type is an adapter to allow the use of ordinary
// function as AsUnit mutator.
type AsUnitFunc func(context.Context, *schema.AsUnitMutation) (schema.Value, error)

// Mutate calls f(ctx, m).
func (f AsUnitFunc) Mutate(ctx context.Context, m schema.Mutation) (schema.Value, error) {
	mv, ok := m.(*schema.AsUnitMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *schema.AsUnitMutation", m)
	}
	return f(ctx, mv)
}

// The AsUserFunc type is an adapter to allow the use of ordinary
// function as AsUser mutator.
type AsUserFunc func(context.Context, *schema.AsUserMutation) (schema.Value, error)

// Mutate calls f(ctx, m).
func (f AsUserFunc) Mutate(ctx context.Context, m schema.Mutation) (schema.Value, error) {
	mv, ok := m.(*schema.AsUserMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *schema.AsUserMutation", m)
	}
	return f(ctx, mv)
}

// The AsWorkingDataFunc type is an adapter to allow the use of ordinary
// function as AsWorkingData mutator.
type AsWorkingDataFunc func(context.Context, *schema.AsWorkingDataMutation) (schema.Value, error)

// Mutate calls f(ctx, m).
func (f AsWorkingDataFunc) Mutate(ctx context.Context, m schema.Mutation) (schema.Value, error) {
	mv, ok := m.(*schema.AsWorkingDataMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *schema.AsWorkingDataMutation", m)
	}
	return f(ctx, mv)
}

// The BaseinfoadministrativeareaallFunc type is an adapter to allow the use of ordinary
// function as Baseinfoadministrativeareaall mutator.
type BaseinfoadministrativeareaallFunc func(context.Context, *schema.BaseinfoadministrativeareaallMutation) (schema.Value, error)

// Mutate calls f(ctx, m).
func (f BaseinfoadministrativeareaallFunc) Mutate(ctx context.Context, m schema.Mutation) (schema.Value, error) {
	mv, ok := m.(*schema.BaseinfoadministrativeareaallMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *schema.BaseinfoadministrativeareaallMutation", m)
	}
	return f(ctx, mv)
}

// Condition is a hook condition function.
type Condition func(context.Context, schema.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m schema.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m schema.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m schema.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op schema.Op) Condition {
	return func(_ context.Context, m schema.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m schema.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m schema.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m schema.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
//
func If(hk schema.Hook, cond Condition) schema.Hook {
	return func(next schema.Mutator) schema.Mutator {
		return schema.MutateFunc(func(ctx context.Context, m schema.Mutation) (schema.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, schema.Delete|schema.Create)
//
func On(hk schema.Hook, op schema.Op) schema.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, schema.Update|schema.UpdateOne)
//
func Unless(hk schema.Hook, op schema.Op) schema.Hook {
	return If(hk, Not(HasOp(op)))
}

// FixedError is a hook returning a fixed error.
func FixedError(err error) schema.Hook {
	return func(schema.Mutator) schema.Mutator {
		return schema.MutateFunc(func(context.Context, schema.Mutation) (schema.Value, error) {
			return nil, err
		})
	}
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []schema.Hook {
//		return []schema.Hook{
//			Reject(schema.Delete|schema.Update),
//		}
//	}
//
func Reject(op schema.Op) schema.Hook {
	hk := FixedError(fmt.Errorf("%s operation is not allowed", op))
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []schema.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...schema.Hook) Chain {
	return Chain{append([]schema.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() schema.Hook {
	return func(mutator schema.Mutator) schema.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...schema.Hook) Chain {
	newHooks := make([]schema.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}
