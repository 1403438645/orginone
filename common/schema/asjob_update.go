// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/asinneragency"
	"orginone/common/schema/asjob"
	"orginone/common/schema/asmarketroledistribution"
	"orginone/common/schema/asperson"
	"orginone/common/schema/asrole"
	"orginone/common/schema/asuser"
	"orginone/common/schema/predicate"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsJobUpdate is the builder for updating AsJob entities.
type AsJobUpdate struct {
	config
	hooks    []Hook
	mutation *AsJobMutation
}

// Where appends a list predicates to the AsJobUpdate builder.
func (aju *AsJobUpdate) Where(ps ...predicate.AsJob) *AsJobUpdate {
	aju.mutation.Where(ps...)
	return aju
}

// SetJobName sets the "job_name" field.
func (aju *AsJobUpdate) SetJobName(s string) *AsJobUpdate {
	aju.mutation.SetJobName(s)
	return aju
}

// SetTenantCode sets the "tenant_code" field.
func (aju *AsJobUpdate) SetTenantCode(s string) *AsJobUpdate {
	aju.mutation.SetTenantCode(s)
	return aju
}

// SetType sets the "type" field.
func (aju *AsJobUpdate) SetType(i int64) *AsJobUpdate {
	aju.mutation.ResetType()
	aju.mutation.SetType(i)
	return aju
}

// SetNillableType sets the "type" field if the given value is not nil.
func (aju *AsJobUpdate) SetNillableType(i *int64) *AsJobUpdate {
	if i != nil {
		aju.SetType(*i)
	}
	return aju
}

// AddType adds i to the "type" field.
func (aju *AsJobUpdate) AddType(i int64) *AsJobUpdate {
	aju.mutation.AddType(i)
	return aju
}

// ClearType clears the value of the "type" field.
func (aju *AsJobUpdate) ClearType() *AsJobUpdate {
	aju.mutation.ClearType()
	return aju
}

// SetSort sets the "sort" field.
func (aju *AsJobUpdate) SetSort(i int64) *AsJobUpdate {
	aju.mutation.ResetSort()
	aju.mutation.SetSort(i)
	return aju
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (aju *AsJobUpdate) SetNillableSort(i *int64) *AsJobUpdate {
	if i != nil {
		aju.SetSort(*i)
	}
	return aju
}

// AddSort adds i to the "sort" field.
func (aju *AsJobUpdate) AddSort(i int64) *AsJobUpdate {
	aju.mutation.AddSort(i)
	return aju
}

// ClearSort clears the value of the "sort" field.
func (aju *AsJobUpdate) ClearSort() *AsJobUpdate {
	aju.mutation.ClearSort()
	return aju
}

// SetIsDeleted sets the "is_deleted" field.
func (aju *AsJobUpdate) SetIsDeleted(i int64) *AsJobUpdate {
	aju.mutation.ResetIsDeleted()
	aju.mutation.SetIsDeleted(i)
	return aju
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (aju *AsJobUpdate) SetNillableIsDeleted(i *int64) *AsJobUpdate {
	if i != nil {
		aju.SetIsDeleted(*i)
	}
	return aju
}

// AddIsDeleted adds i to the "is_deleted" field.
func (aju *AsJobUpdate) AddIsDeleted(i int64) *AsJobUpdate {
	aju.mutation.AddIsDeleted(i)
	return aju
}

// SetStatus sets the "status" field.
func (aju *AsJobUpdate) SetStatus(i int64) *AsJobUpdate {
	aju.mutation.ResetStatus()
	aju.mutation.SetStatus(i)
	return aju
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (aju *AsJobUpdate) SetNillableStatus(i *int64) *AsJobUpdate {
	if i != nil {
		aju.SetStatus(*i)
	}
	return aju
}

// AddStatus adds i to the "status" field.
func (aju *AsJobUpdate) AddStatus(i int64) *AsJobUpdate {
	aju.mutation.AddStatus(i)
	return aju
}

// ClearStatus clears the value of the "status" field.
func (aju *AsJobUpdate) ClearStatus() *AsJobUpdate {
	aju.mutation.ClearStatus()
	return aju
}

// SetCreateUser sets the "create_user" field.
func (aju *AsJobUpdate) SetCreateUser(i int64) *AsJobUpdate {
	aju.mutation.ResetCreateUser()
	aju.mutation.SetCreateUser(i)
	return aju
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (aju *AsJobUpdate) SetNillableCreateUser(i *int64) *AsJobUpdate {
	if i != nil {
		aju.SetCreateUser(*i)
	}
	return aju
}

// AddCreateUser adds i to the "create_user" field.
func (aju *AsJobUpdate) AddCreateUser(i int64) *AsJobUpdate {
	aju.mutation.AddCreateUser(i)
	return aju
}

// ClearCreateUser clears the value of the "create_user" field.
func (aju *AsJobUpdate) ClearCreateUser() *AsJobUpdate {
	aju.mutation.ClearCreateUser()
	return aju
}

// SetUpdateUser sets the "update_user" field.
func (aju *AsJobUpdate) SetUpdateUser(i int64) *AsJobUpdate {
	aju.mutation.ResetUpdateUser()
	aju.mutation.SetUpdateUser(i)
	return aju
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (aju *AsJobUpdate) SetNillableUpdateUser(i *int64) *AsJobUpdate {
	if i != nil {
		aju.SetUpdateUser(*i)
	}
	return aju
}

// AddUpdateUser adds i to the "update_user" field.
func (aju *AsJobUpdate) AddUpdateUser(i int64) *AsJobUpdate {
	aju.mutation.AddUpdateUser(i)
	return aju
}

// ClearUpdateUser clears the value of the "update_user" field.
func (aju *AsJobUpdate) ClearUpdateUser() *AsJobUpdate {
	aju.mutation.ClearUpdateUser()
	return aju
}

// SetUpdateTime sets the "update_time" field.
func (aju *AsJobUpdate) SetUpdateTime(dt date.DateTime) *AsJobUpdate {
	aju.mutation.SetUpdateTime(dt)
	return aju
}

// ClearUpdateTime clears the value of the "update_time" field.
func (aju *AsJobUpdate) ClearUpdateTime() *AsJobUpdate {
	aju.mutation.ClearUpdateTime()
	return aju
}

// AddPersonIDs adds the "persons" edge to the AsPerson entity by IDs.
func (aju *AsJobUpdate) AddPersonIDs(ids ...int64) *AsJobUpdate {
	aju.mutation.AddPersonIDs(ids...)
	return aju
}

// AddPersons adds the "persons" edges to the AsPerson entity.
func (aju *AsJobUpdate) AddPersons(a ...*AsPerson) *AsJobUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aju.AddPersonIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the AsRole entity by IDs.
func (aju *AsJobUpdate) AddRoleIDs(ids ...int64) *AsJobUpdate {
	aju.mutation.AddRoleIDs(ids...)
	return aju
}

// AddRoles adds the "roles" edges to the AsRole entity.
func (aju *AsJobUpdate) AddRoles(a ...*AsRole) *AsJobUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aju.AddRoleIDs(ids...)
}

// AddUserIDs adds the "users" edge to the AsUser entity by IDs.
func (aju *AsJobUpdate) AddUserIDs(ids ...int64) *AsJobUpdate {
	aju.mutation.AddUserIDs(ids...)
	return aju
}

// AddUsers adds the "users" edges to the AsUser entity.
func (aju *AsJobUpdate) AddUsers(a ...*AsUser) *AsJobUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aju.AddUserIDs(ids...)
}

// AddAgencyIDs adds the "agencys" edge to the AsInnerAgency entity by IDs.
func (aju *AsJobUpdate) AddAgencyIDs(ids ...int64) *AsJobUpdate {
	aju.mutation.AddAgencyIDs(ids...)
	return aju
}

// AddAgencys adds the "agencys" edges to the AsInnerAgency entity.
func (aju *AsJobUpdate) AddAgencys(a ...*AsInnerAgency) *AsJobUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aju.AddAgencyIDs(ids...)
}

// AddRoleDistribIDs adds the "roleDistribs" edge to the AsMarketRoleDistribution entity by IDs.
func (aju *AsJobUpdate) AddRoleDistribIDs(ids ...int64) *AsJobUpdate {
	aju.mutation.AddRoleDistribIDs(ids...)
	return aju
}

// AddRoleDistribs adds the "roleDistribs" edges to the AsMarketRoleDistribution entity.
func (aju *AsJobUpdate) AddRoleDistribs(a ...*AsMarketRoleDistribution) *AsJobUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aju.AddRoleDistribIDs(ids...)
}

// Mutation returns the AsJobMutation object of the builder.
func (aju *AsJobUpdate) Mutation() *AsJobMutation {
	return aju.mutation
}

// ClearPersons clears all "persons" edges to the AsPerson entity.
func (aju *AsJobUpdate) ClearPersons() *AsJobUpdate {
	aju.mutation.ClearPersons()
	return aju
}

// RemovePersonIDs removes the "persons" edge to AsPerson entities by IDs.
func (aju *AsJobUpdate) RemovePersonIDs(ids ...int64) *AsJobUpdate {
	aju.mutation.RemovePersonIDs(ids...)
	return aju
}

// RemovePersons removes "persons" edges to AsPerson entities.
func (aju *AsJobUpdate) RemovePersons(a ...*AsPerson) *AsJobUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aju.RemovePersonIDs(ids...)
}

// ClearRoles clears all "roles" edges to the AsRole entity.
func (aju *AsJobUpdate) ClearRoles() *AsJobUpdate {
	aju.mutation.ClearRoles()
	return aju
}

// RemoveRoleIDs removes the "roles" edge to AsRole entities by IDs.
func (aju *AsJobUpdate) RemoveRoleIDs(ids ...int64) *AsJobUpdate {
	aju.mutation.RemoveRoleIDs(ids...)
	return aju
}

// RemoveRoles removes "roles" edges to AsRole entities.
func (aju *AsJobUpdate) RemoveRoles(a ...*AsRole) *AsJobUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aju.RemoveRoleIDs(ids...)
}

// ClearUsers clears all "users" edges to the AsUser entity.
func (aju *AsJobUpdate) ClearUsers() *AsJobUpdate {
	aju.mutation.ClearUsers()
	return aju
}

// RemoveUserIDs removes the "users" edge to AsUser entities by IDs.
func (aju *AsJobUpdate) RemoveUserIDs(ids ...int64) *AsJobUpdate {
	aju.mutation.RemoveUserIDs(ids...)
	return aju
}

// RemoveUsers removes "users" edges to AsUser entities.
func (aju *AsJobUpdate) RemoveUsers(a ...*AsUser) *AsJobUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aju.RemoveUserIDs(ids...)
}

// ClearAgencys clears all "agencys" edges to the AsInnerAgency entity.
func (aju *AsJobUpdate) ClearAgencys() *AsJobUpdate {
	aju.mutation.ClearAgencys()
	return aju
}

// RemoveAgencyIDs removes the "agencys" edge to AsInnerAgency entities by IDs.
func (aju *AsJobUpdate) RemoveAgencyIDs(ids ...int64) *AsJobUpdate {
	aju.mutation.RemoveAgencyIDs(ids...)
	return aju
}

// RemoveAgencys removes "agencys" edges to AsInnerAgency entities.
func (aju *AsJobUpdate) RemoveAgencys(a ...*AsInnerAgency) *AsJobUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aju.RemoveAgencyIDs(ids...)
}

// ClearRoleDistribs clears all "roleDistribs" edges to the AsMarketRoleDistribution entity.
func (aju *AsJobUpdate) ClearRoleDistribs() *AsJobUpdate {
	aju.mutation.ClearRoleDistribs()
	return aju
}

// RemoveRoleDistribIDs removes the "roleDistribs" edge to AsMarketRoleDistribution entities by IDs.
func (aju *AsJobUpdate) RemoveRoleDistribIDs(ids ...int64) *AsJobUpdate {
	aju.mutation.RemoveRoleDistribIDs(ids...)
	return aju
}

// RemoveRoleDistribs removes "roleDistribs" edges to AsMarketRoleDistribution entities.
func (aju *AsJobUpdate) RemoveRoleDistribs(a ...*AsMarketRoleDistribution) *AsJobUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aju.RemoveRoleDistribIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aju *AsJobUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	aju.defaults()
	if len(aju.hooks) == 0 {
		affected, err = aju.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsJobMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aju.mutation = mutation
			affected, err = aju.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(aju.hooks) - 1; i >= 0; i-- {
			if aju.hooks[i] == nil {
				return 0, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = aju.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aju.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (aju *AsJobUpdate) SaveX(ctx context.Context) int {
	affected, err := aju.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aju *AsJobUpdate) Exec(ctx context.Context) error {
	_, err := aju.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aju *AsJobUpdate) ExecX(ctx context.Context) {
	if err := aju.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aju *AsJobUpdate) defaults() {
	if _, ok := aju.mutation.UpdateTime(); !ok && !aju.mutation.UpdateTimeCleared() {
		v := asjob.UpdateDefaultUpdateTime()
		aju.mutation.SetUpdateTime(v)
	}
}

func (aju *AsJobUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asjob.Table,
			Columns: asjob.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asjob.FieldID,
			},
		},
	}
	if ps := aju.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aju.mutation.JobName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asjob.FieldJobName,
		})
	}
	if value, ok := aju.mutation.TenantCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asjob.FieldTenantCode,
		})
	}
	if value, ok := aju.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asjob.FieldType,
		})
	}
	if value, ok := aju.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asjob.FieldType,
		})
	}
	if aju.mutation.TypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asjob.FieldType,
		})
	}
	if value, ok := aju.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asjob.FieldSort,
		})
	}
	if value, ok := aju.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asjob.FieldSort,
		})
	}
	if aju.mutation.SortCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asjob.FieldSort,
		})
	}
	if value, ok := aju.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asjob.FieldIsDeleted,
		})
	}
	if value, ok := aju.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asjob.FieldIsDeleted,
		})
	}
	if value, ok := aju.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asjob.FieldStatus,
		})
	}
	if value, ok := aju.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asjob.FieldStatus,
		})
	}
	if aju.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asjob.FieldStatus,
		})
	}
	if value, ok := aju.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asjob.FieldCreateUser,
		})
	}
	if value, ok := aju.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asjob.FieldCreateUser,
		})
	}
	if aju.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asjob.FieldCreateUser,
		})
	}
	if value, ok := aju.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asjob.FieldUpdateUser,
		})
	}
	if value, ok := aju.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asjob.FieldUpdateUser,
		})
	}
	if aju.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asjob.FieldUpdateUser,
		})
	}
	if aju.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asjob.FieldCreateTime,
		})
	}
	if value, ok := aju.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asjob.FieldUpdateTime,
		})
	}
	if aju.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asjob.FieldUpdateTime,
		})
	}
	if aju.mutation.PersonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asjob.PersonsTable,
			Columns: asjob.PersonsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asperson.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aju.mutation.RemovedPersonsIDs(); len(nodes) > 0 && !aju.mutation.PersonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asjob.PersonsTable,
			Columns: asjob.PersonsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asperson.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aju.mutation.PersonsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asjob.PersonsTable,
			Columns: asjob.PersonsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asperson.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aju.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asjob.RolesTable,
			Columns: asjob.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asrole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aju.mutation.RemovedRolesIDs(); len(nodes) > 0 && !aju.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asjob.RolesTable,
			Columns: asjob.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aju.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asjob.RolesTable,
			Columns: asjob.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aju.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asjob.UsersTable,
			Columns: asjob.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aju.mutation.RemovedUsersIDs(); len(nodes) > 0 && !aju.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asjob.UsersTable,
			Columns: asjob.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aju.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asjob.UsersTable,
			Columns: asjob.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aju.mutation.AgencysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asjob.AgencysTable,
			Columns: asjob.AgencysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asinneragency.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aju.mutation.RemovedAgencysIDs(); len(nodes) > 0 && !aju.mutation.AgencysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asjob.AgencysTable,
			Columns: asjob.AgencysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asinneragency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aju.mutation.AgencysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asjob.AgencysTable,
			Columns: asjob.AgencysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asinneragency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aju.mutation.RoleDistribsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asjob.RoleDistribsTable,
			Columns: []string{asjob.RoleDistribsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketroledistribution.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aju.mutation.RemovedRoleDistribsIDs(); len(nodes) > 0 && !aju.mutation.RoleDistribsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asjob.RoleDistribsTable,
			Columns: []string{asjob.RoleDistribsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketroledistribution.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aju.mutation.RoleDistribsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asjob.RoleDistribsTable,
			Columns: []string{asjob.RoleDistribsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketroledistribution.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aju.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asjob.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AsJobUpdateOne is the builder for updating a single AsJob entity.
type AsJobUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AsJobMutation
}

// SetJobName sets the "job_name" field.
func (ajuo *AsJobUpdateOne) SetJobName(s string) *AsJobUpdateOne {
	ajuo.mutation.SetJobName(s)
	return ajuo
}

// SetTenantCode sets the "tenant_code" field.
func (ajuo *AsJobUpdateOne) SetTenantCode(s string) *AsJobUpdateOne {
	ajuo.mutation.SetTenantCode(s)
	return ajuo
}

// SetType sets the "type" field.
func (ajuo *AsJobUpdateOne) SetType(i int64) *AsJobUpdateOne {
	ajuo.mutation.ResetType()
	ajuo.mutation.SetType(i)
	return ajuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ajuo *AsJobUpdateOne) SetNillableType(i *int64) *AsJobUpdateOne {
	if i != nil {
		ajuo.SetType(*i)
	}
	return ajuo
}

// AddType adds i to the "type" field.
func (ajuo *AsJobUpdateOne) AddType(i int64) *AsJobUpdateOne {
	ajuo.mutation.AddType(i)
	return ajuo
}

// ClearType clears the value of the "type" field.
func (ajuo *AsJobUpdateOne) ClearType() *AsJobUpdateOne {
	ajuo.mutation.ClearType()
	return ajuo
}

// SetSort sets the "sort" field.
func (ajuo *AsJobUpdateOne) SetSort(i int64) *AsJobUpdateOne {
	ajuo.mutation.ResetSort()
	ajuo.mutation.SetSort(i)
	return ajuo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (ajuo *AsJobUpdateOne) SetNillableSort(i *int64) *AsJobUpdateOne {
	if i != nil {
		ajuo.SetSort(*i)
	}
	return ajuo
}

// AddSort adds i to the "sort" field.
func (ajuo *AsJobUpdateOne) AddSort(i int64) *AsJobUpdateOne {
	ajuo.mutation.AddSort(i)
	return ajuo
}

// ClearSort clears the value of the "sort" field.
func (ajuo *AsJobUpdateOne) ClearSort() *AsJobUpdateOne {
	ajuo.mutation.ClearSort()
	return ajuo
}

// SetIsDeleted sets the "is_deleted" field.
func (ajuo *AsJobUpdateOne) SetIsDeleted(i int64) *AsJobUpdateOne {
	ajuo.mutation.ResetIsDeleted()
	ajuo.mutation.SetIsDeleted(i)
	return ajuo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (ajuo *AsJobUpdateOne) SetNillableIsDeleted(i *int64) *AsJobUpdateOne {
	if i != nil {
		ajuo.SetIsDeleted(*i)
	}
	return ajuo
}

// AddIsDeleted adds i to the "is_deleted" field.
func (ajuo *AsJobUpdateOne) AddIsDeleted(i int64) *AsJobUpdateOne {
	ajuo.mutation.AddIsDeleted(i)
	return ajuo
}

// SetStatus sets the "status" field.
func (ajuo *AsJobUpdateOne) SetStatus(i int64) *AsJobUpdateOne {
	ajuo.mutation.ResetStatus()
	ajuo.mutation.SetStatus(i)
	return ajuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ajuo *AsJobUpdateOne) SetNillableStatus(i *int64) *AsJobUpdateOne {
	if i != nil {
		ajuo.SetStatus(*i)
	}
	return ajuo
}

// AddStatus adds i to the "status" field.
func (ajuo *AsJobUpdateOne) AddStatus(i int64) *AsJobUpdateOne {
	ajuo.mutation.AddStatus(i)
	return ajuo
}

// ClearStatus clears the value of the "status" field.
func (ajuo *AsJobUpdateOne) ClearStatus() *AsJobUpdateOne {
	ajuo.mutation.ClearStatus()
	return ajuo
}

// SetCreateUser sets the "create_user" field.
func (ajuo *AsJobUpdateOne) SetCreateUser(i int64) *AsJobUpdateOne {
	ajuo.mutation.ResetCreateUser()
	ajuo.mutation.SetCreateUser(i)
	return ajuo
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (ajuo *AsJobUpdateOne) SetNillableCreateUser(i *int64) *AsJobUpdateOne {
	if i != nil {
		ajuo.SetCreateUser(*i)
	}
	return ajuo
}

// AddCreateUser adds i to the "create_user" field.
func (ajuo *AsJobUpdateOne) AddCreateUser(i int64) *AsJobUpdateOne {
	ajuo.mutation.AddCreateUser(i)
	return ajuo
}

// ClearCreateUser clears the value of the "create_user" field.
func (ajuo *AsJobUpdateOne) ClearCreateUser() *AsJobUpdateOne {
	ajuo.mutation.ClearCreateUser()
	return ajuo
}

// SetUpdateUser sets the "update_user" field.
func (ajuo *AsJobUpdateOne) SetUpdateUser(i int64) *AsJobUpdateOne {
	ajuo.mutation.ResetUpdateUser()
	ajuo.mutation.SetUpdateUser(i)
	return ajuo
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (ajuo *AsJobUpdateOne) SetNillableUpdateUser(i *int64) *AsJobUpdateOne {
	if i != nil {
		ajuo.SetUpdateUser(*i)
	}
	return ajuo
}

// AddUpdateUser adds i to the "update_user" field.
func (ajuo *AsJobUpdateOne) AddUpdateUser(i int64) *AsJobUpdateOne {
	ajuo.mutation.AddUpdateUser(i)
	return ajuo
}

// ClearUpdateUser clears the value of the "update_user" field.
func (ajuo *AsJobUpdateOne) ClearUpdateUser() *AsJobUpdateOne {
	ajuo.mutation.ClearUpdateUser()
	return ajuo
}

// SetUpdateTime sets the "update_time" field.
func (ajuo *AsJobUpdateOne) SetUpdateTime(dt date.DateTime) *AsJobUpdateOne {
	ajuo.mutation.SetUpdateTime(dt)
	return ajuo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (ajuo *AsJobUpdateOne) ClearUpdateTime() *AsJobUpdateOne {
	ajuo.mutation.ClearUpdateTime()
	return ajuo
}

// AddPersonIDs adds the "persons" edge to the AsPerson entity by IDs.
func (ajuo *AsJobUpdateOne) AddPersonIDs(ids ...int64) *AsJobUpdateOne {
	ajuo.mutation.AddPersonIDs(ids...)
	return ajuo
}

// AddPersons adds the "persons" edges to the AsPerson entity.
func (ajuo *AsJobUpdateOne) AddPersons(a ...*AsPerson) *AsJobUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ajuo.AddPersonIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the AsRole entity by IDs.
func (ajuo *AsJobUpdateOne) AddRoleIDs(ids ...int64) *AsJobUpdateOne {
	ajuo.mutation.AddRoleIDs(ids...)
	return ajuo
}

// AddRoles adds the "roles" edges to the AsRole entity.
func (ajuo *AsJobUpdateOne) AddRoles(a ...*AsRole) *AsJobUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ajuo.AddRoleIDs(ids...)
}

// AddUserIDs adds the "users" edge to the AsUser entity by IDs.
func (ajuo *AsJobUpdateOne) AddUserIDs(ids ...int64) *AsJobUpdateOne {
	ajuo.mutation.AddUserIDs(ids...)
	return ajuo
}

// AddUsers adds the "users" edges to the AsUser entity.
func (ajuo *AsJobUpdateOne) AddUsers(a ...*AsUser) *AsJobUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ajuo.AddUserIDs(ids...)
}

// AddAgencyIDs adds the "agencys" edge to the AsInnerAgency entity by IDs.
func (ajuo *AsJobUpdateOne) AddAgencyIDs(ids ...int64) *AsJobUpdateOne {
	ajuo.mutation.AddAgencyIDs(ids...)
	return ajuo
}

// AddAgencys adds the "agencys" edges to the AsInnerAgency entity.
func (ajuo *AsJobUpdateOne) AddAgencys(a ...*AsInnerAgency) *AsJobUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ajuo.AddAgencyIDs(ids...)
}

// AddRoleDistribIDs adds the "roleDistribs" edge to the AsMarketRoleDistribution entity by IDs.
func (ajuo *AsJobUpdateOne) AddRoleDistribIDs(ids ...int64) *AsJobUpdateOne {
	ajuo.mutation.AddRoleDistribIDs(ids...)
	return ajuo
}

// AddRoleDistribs adds the "roleDistribs" edges to the AsMarketRoleDistribution entity.
func (ajuo *AsJobUpdateOne) AddRoleDistribs(a ...*AsMarketRoleDistribution) *AsJobUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ajuo.AddRoleDistribIDs(ids...)
}

// Mutation returns the AsJobMutation object of the builder.
func (ajuo *AsJobUpdateOne) Mutation() *AsJobMutation {
	return ajuo.mutation
}

// ClearPersons clears all "persons" edges to the AsPerson entity.
func (ajuo *AsJobUpdateOne) ClearPersons() *AsJobUpdateOne {
	ajuo.mutation.ClearPersons()
	return ajuo
}

// RemovePersonIDs removes the "persons" edge to AsPerson entities by IDs.
func (ajuo *AsJobUpdateOne) RemovePersonIDs(ids ...int64) *AsJobUpdateOne {
	ajuo.mutation.RemovePersonIDs(ids...)
	return ajuo
}

// RemovePersons removes "persons" edges to AsPerson entities.
func (ajuo *AsJobUpdateOne) RemovePersons(a ...*AsPerson) *AsJobUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ajuo.RemovePersonIDs(ids...)
}

// ClearRoles clears all "roles" edges to the AsRole entity.
func (ajuo *AsJobUpdateOne) ClearRoles() *AsJobUpdateOne {
	ajuo.mutation.ClearRoles()
	return ajuo
}

// RemoveRoleIDs removes the "roles" edge to AsRole entities by IDs.
func (ajuo *AsJobUpdateOne) RemoveRoleIDs(ids ...int64) *AsJobUpdateOne {
	ajuo.mutation.RemoveRoleIDs(ids...)
	return ajuo
}

// RemoveRoles removes "roles" edges to AsRole entities.
func (ajuo *AsJobUpdateOne) RemoveRoles(a ...*AsRole) *AsJobUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ajuo.RemoveRoleIDs(ids...)
}

// ClearUsers clears all "users" edges to the AsUser entity.
func (ajuo *AsJobUpdateOne) ClearUsers() *AsJobUpdateOne {
	ajuo.mutation.ClearUsers()
	return ajuo
}

// RemoveUserIDs removes the "users" edge to AsUser entities by IDs.
func (ajuo *AsJobUpdateOne) RemoveUserIDs(ids ...int64) *AsJobUpdateOne {
	ajuo.mutation.RemoveUserIDs(ids...)
	return ajuo
}

// RemoveUsers removes "users" edges to AsUser entities.
func (ajuo *AsJobUpdateOne) RemoveUsers(a ...*AsUser) *AsJobUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ajuo.RemoveUserIDs(ids...)
}

// ClearAgencys clears all "agencys" edges to the AsInnerAgency entity.
func (ajuo *AsJobUpdateOne) ClearAgencys() *AsJobUpdateOne {
	ajuo.mutation.ClearAgencys()
	return ajuo
}

// RemoveAgencyIDs removes the "agencys" edge to AsInnerAgency entities by IDs.
func (ajuo *AsJobUpdateOne) RemoveAgencyIDs(ids ...int64) *AsJobUpdateOne {
	ajuo.mutation.RemoveAgencyIDs(ids...)
	return ajuo
}

// RemoveAgencys removes "agencys" edges to AsInnerAgency entities.
func (ajuo *AsJobUpdateOne) RemoveAgencys(a ...*AsInnerAgency) *AsJobUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ajuo.RemoveAgencyIDs(ids...)
}

// ClearRoleDistribs clears all "roleDistribs" edges to the AsMarketRoleDistribution entity.
func (ajuo *AsJobUpdateOne) ClearRoleDistribs() *AsJobUpdateOne {
	ajuo.mutation.ClearRoleDistribs()
	return ajuo
}

// RemoveRoleDistribIDs removes the "roleDistribs" edge to AsMarketRoleDistribution entities by IDs.
func (ajuo *AsJobUpdateOne) RemoveRoleDistribIDs(ids ...int64) *AsJobUpdateOne {
	ajuo.mutation.RemoveRoleDistribIDs(ids...)
	return ajuo
}

// RemoveRoleDistribs removes "roleDistribs" edges to AsMarketRoleDistribution entities.
func (ajuo *AsJobUpdateOne) RemoveRoleDistribs(a ...*AsMarketRoleDistribution) *AsJobUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ajuo.RemoveRoleDistribIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ajuo *AsJobUpdateOne) Select(field string, fields ...string) *AsJobUpdateOne {
	ajuo.fields = append([]string{field}, fields...)
	return ajuo
}

// Save executes the query and returns the updated AsJob entity.
func (ajuo *AsJobUpdateOne) Save(ctx context.Context) (*AsJob, error) {
	var (
		err  error
		node *AsJob
	)
	ajuo.defaults()
	if len(ajuo.hooks) == 0 {
		node, err = ajuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsJobMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ajuo.mutation = mutation
			node, err = ajuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ajuo.hooks) - 1; i >= 0; i-- {
			if ajuo.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = ajuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ajuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ajuo *AsJobUpdateOne) SaveX(ctx context.Context) *AsJob {
	node, err := ajuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ajuo *AsJobUpdateOne) Exec(ctx context.Context) error {
	_, err := ajuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ajuo *AsJobUpdateOne) ExecX(ctx context.Context) {
	if err := ajuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ajuo *AsJobUpdateOne) defaults() {
	if _, ok := ajuo.mutation.UpdateTime(); !ok && !ajuo.mutation.UpdateTimeCleared() {
		v := asjob.UpdateDefaultUpdateTime()
		ajuo.mutation.SetUpdateTime(v)
	}
}

func (ajuo *AsJobUpdateOne) sqlSave(ctx context.Context) (_node *AsJob, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asjob.Table,
			Columns: asjob.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asjob.FieldID,
			},
		},
	}
	id, ok := ajuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`schema: missing "AsJob.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ajuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asjob.FieldID)
		for _, f := range fields {
			if !asjob.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("schema: invalid field %q for query", f)}
			}
			if f != asjob.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ajuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ajuo.mutation.JobName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asjob.FieldJobName,
		})
	}
	if value, ok := ajuo.mutation.TenantCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asjob.FieldTenantCode,
		})
	}
	if value, ok := ajuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asjob.FieldType,
		})
	}
	if value, ok := ajuo.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asjob.FieldType,
		})
	}
	if ajuo.mutation.TypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asjob.FieldType,
		})
	}
	if value, ok := ajuo.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asjob.FieldSort,
		})
	}
	if value, ok := ajuo.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asjob.FieldSort,
		})
	}
	if ajuo.mutation.SortCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asjob.FieldSort,
		})
	}
	if value, ok := ajuo.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asjob.FieldIsDeleted,
		})
	}
	if value, ok := ajuo.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asjob.FieldIsDeleted,
		})
	}
	if value, ok := ajuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asjob.FieldStatus,
		})
	}
	if value, ok := ajuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asjob.FieldStatus,
		})
	}
	if ajuo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asjob.FieldStatus,
		})
	}
	if value, ok := ajuo.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asjob.FieldCreateUser,
		})
	}
	if value, ok := ajuo.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asjob.FieldCreateUser,
		})
	}
	if ajuo.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asjob.FieldCreateUser,
		})
	}
	if value, ok := ajuo.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asjob.FieldUpdateUser,
		})
	}
	if value, ok := ajuo.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asjob.FieldUpdateUser,
		})
	}
	if ajuo.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asjob.FieldUpdateUser,
		})
	}
	if ajuo.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asjob.FieldCreateTime,
		})
	}
	if value, ok := ajuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asjob.FieldUpdateTime,
		})
	}
	if ajuo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asjob.FieldUpdateTime,
		})
	}
	if ajuo.mutation.PersonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asjob.PersonsTable,
			Columns: asjob.PersonsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asperson.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ajuo.mutation.RemovedPersonsIDs(); len(nodes) > 0 && !ajuo.mutation.PersonsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asjob.PersonsTable,
			Columns: asjob.PersonsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asperson.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ajuo.mutation.PersonsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asjob.PersonsTable,
			Columns: asjob.PersonsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asperson.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ajuo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asjob.RolesTable,
			Columns: asjob.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asrole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ajuo.mutation.RemovedRolesIDs(); len(nodes) > 0 && !ajuo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asjob.RolesTable,
			Columns: asjob.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ajuo.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asjob.RolesTable,
			Columns: asjob.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ajuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asjob.UsersTable,
			Columns: asjob.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ajuo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !ajuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asjob.UsersTable,
			Columns: asjob.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ajuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asjob.UsersTable,
			Columns: asjob.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ajuo.mutation.AgencysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asjob.AgencysTable,
			Columns: asjob.AgencysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asinneragency.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ajuo.mutation.RemovedAgencysIDs(); len(nodes) > 0 && !ajuo.mutation.AgencysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asjob.AgencysTable,
			Columns: asjob.AgencysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asinneragency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ajuo.mutation.AgencysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asjob.AgencysTable,
			Columns: asjob.AgencysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asinneragency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ajuo.mutation.RoleDistribsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asjob.RoleDistribsTable,
			Columns: []string{asjob.RoleDistribsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketroledistribution.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ajuo.mutation.RemovedRoleDistribsIDs(); len(nodes) > 0 && !ajuo.mutation.RoleDistribsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asjob.RoleDistribsTable,
			Columns: []string{asjob.RoleDistribsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketroledistribution.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ajuo.mutation.RoleDistribsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asjob.RoleDistribsTable,
			Columns: []string{asjob.RoleDistribsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketroledistribution.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AsJob{config: ajuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ajuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asjob.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
