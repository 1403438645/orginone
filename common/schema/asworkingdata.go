// Code generated by entc, DO NOT EDIT.

package schema

import (
	"fmt"
	"orginone/common/schema/asuser"
	"orginone/common/schema/asworkingdata"
	"orginone/common/tools/date"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// AsWorkingData is the model entity for the AsWorkingData schema.
type AsWorkingData struct {
	config `json:"-"`
	// ID of the ent.
	// 主键
	ID int64 `json:"id,string"`
	// AppID holds the value of the "app_id" field.
	// 应用ID
	AppID int64 `json:"appId"`
	// UserID holds the value of the "user_id" field.
	// 用户ID
	UserID int64 `json:"userId"`
	// Type holds the value of the "type" field.
	// 在途业务类型 1-用户 2-部门 3-岗位
	Type int64 `json:"type"`
	// IsDeleted holds the value of the "is_deleted" field.
	// 是否被删除
	IsDeleted int64 `json:"isDeleted"`
	// Status holds the value of the "status" field.
	// 状态
	Status int64 `json:"status"`
	// CreateUser holds the value of the "create_user" field.
	// 创建用户
	CreateUser int64 `json:"createUser"`
	// UpdateUser holds the value of the "update_user" field.
	// 更新用户
	UpdateUser int64 `json:"updateUser"`
	// CreateTime holds the value of the "create_time" field.
	// 创建时间
	CreateTime date.DateTime `json:"createTime"`
	// UpdateTime holds the value of the "update_time" field.
	// 更新时间
	UpdateTime date.DateTime `json:"updateTime"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AsWorkingDataQuery when eager-loading is set.
	Edges AsWorkingDataEdges `json:"edges"`
}

// AsWorkingDataEdges holds the relations/edges for other nodes in the graph.
type AsWorkingDataEdges struct {
	// User holds the value of the user edge.
	User *AsUser `json:"user"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AsWorkingDataEdges) UserOrErr() (*AsUser, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: asuser.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AsWorkingData) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case asworkingdata.FieldID, asworkingdata.FieldAppID, asworkingdata.FieldUserID, asworkingdata.FieldType, asworkingdata.FieldIsDeleted, asworkingdata.FieldStatus, asworkingdata.FieldCreateUser, asworkingdata.FieldUpdateUser:
			values[i] = new(sql.NullInt64)
		case asworkingdata.FieldCreateTime, asworkingdata.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AsWorkingData", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AsWorkingData fields.
func (awd *AsWorkingData) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case asworkingdata.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			awd.ID = int64(value.Int64)
		case asworkingdata.FieldAppID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				awd.AppID = value.Int64
			}
		case asworkingdata.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				awd.UserID = value.Int64
			}
		case asworkingdata.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				awd.Type = value.Int64
			}
		case asworkingdata.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				awd.IsDeleted = value.Int64
			}
		case asworkingdata.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				awd.Status = value.Int64
			}
		case asworkingdata.FieldCreateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_user", values[i])
			} else if value.Valid {
				awd.CreateUser = value.Int64
			}
		case asworkingdata.FieldUpdateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_user", values[i])
			} else if value.Valid {
				awd.UpdateUser = value.Int64
			}
		case asworkingdata.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				awd.CreateTime = date.DateTime(value.Time)
			}
		case asworkingdata.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				awd.UpdateTime = date.DateTime(value.Time)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the AsWorkingData entity.
func (awd *AsWorkingData) QueryUser() *AsUserQuery {
	return (&AsWorkingDataClient{config: awd.config}).QueryUser(awd)
}

// Update returns a builder for updating this AsWorkingData.
// Note that you need to call AsWorkingData.Unwrap() before calling this method if this AsWorkingData
// was returned from a transaction, and the transaction was committed or rolled back.
func (awd *AsWorkingData) Update() *AsWorkingDataUpdateOne {
	return (&AsWorkingDataClient{config: awd.config}).UpdateOne(awd)
}

// Unwrap unwraps the AsWorkingData entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (awd *AsWorkingData) Unwrap() *AsWorkingData {
	tx, ok := awd.config.driver.(*txDriver)
	if !ok {
		panic("schema: AsWorkingData is not a transactional entity")
	}
	awd.config.driver = tx.drv
	return awd
}

// String implements the fmt.Stringer.
func (awd *AsWorkingData) String() string {
	var builder strings.Builder
	builder.WriteString("AsWorkingData(")
	builder.WriteString(fmt.Sprintf("id=%v", awd.ID))
	builder.WriteString(", app_id=")
	builder.WriteString(fmt.Sprintf("%v", awd.AppID))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", awd.UserID))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", awd.Type))
	builder.WriteString(", is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", awd.IsDeleted))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", awd.Status))
	builder.WriteString(", create_user=")
	builder.WriteString(fmt.Sprintf("%v", awd.CreateUser))
	builder.WriteString(", update_user=")
	builder.WriteString(fmt.Sprintf("%v", awd.UpdateUser))
	builder.WriteString(", create_time=")
	builder.WriteString(fmt.Sprintf("%v", awd.CreateTime))
	builder.WriteString(", update_time=")
	builder.WriteString(fmt.Sprintf("%v", awd.UpdateTime))
	builder.WriteByte(')')
	return builder.String()
}

// AsWorkingDataSlice is a parsable slice of AsWorkingData.
type AsWorkingDataSlice []*AsWorkingData

func (awd AsWorkingDataSlice) config(cfg config) {
	for _i := range awd {
		awd[_i].config = cfg
	}
}
