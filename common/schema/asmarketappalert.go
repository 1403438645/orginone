// Code generated by entc, DO NOT EDIT.

package schema

import (
	"fmt"
	"orginone/common/schema/asmarketapp"
	"orginone/common/schema/asmarketappalert"
	"orginone/common/tools/date"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// AsMarketAppAlert is the model entity for the AsMarketAppAlert schema.
type AsMarketAppAlert struct {
	config `json:"-"`
	// ID of the ent.
	// 主键
	ID int64 `json:"id,string"`
	// AlertTitle holds the value of the "alert_title" field.
	// 标题
	AlertTitle string `json:"alertTitle"`
	// AlertContent holds the value of the "alert_content" field.
	// 内容
	AlertContent string `json:"alertContent"`
	// AlertBusiness holds the value of the "alert_business" field.
	// 业务
	AlertBusiness string `json:"alertBusiness"`
	// AlertEmergencyLevel holds the value of the "alert_emergency_level" field.
	// 紧急程度
	AlertEmergencyLevel int64 `json:"alertEmergencyLevel"`
	// AlertReleaseAppID holds the value of the "alert_release_app_id" field.
	// 发布方
	AlertReleaseAppID int64 `json:"alertReleaseAppId"`
	// AlertReleaseTime holds the value of the "alert_release_time" field.
	// 发布时间
	AlertReleaseTime date.DateTime `json:"alertReleaseTime"`
	// AlertRoleIds holds the value of the "alert_role_ids" field.
	// 分发对象角色
	AlertRoleIds string `json:"alertRoleIds"`
	// AlertJobIds holds the value of the "alert_job_ids" field.
	// 分发对象岗位
	AlertJobIds string `json:"alertJobIds"`
	// AlertStatus holds the value of the "alert_status" field.
	// 预警消息状态
	AlertStatus int64 `json:"alertStatus"`
	// IsDeleted holds the value of the "is_deleted" field.
	// 是否被删除
	IsDeleted int64 `json:"isDeleted"`
	// Status holds the value of the "status" field.
	// 状态
	Status int64 `json:"status"`
	// CreateUser holds the value of the "create_user" field.
	// 创建用户
	CreateUser int64 `json:"createUser"`
	// UpdateUser holds the value of the "update_user" field.
	// 更新用户
	UpdateUser int64 `json:"updateUser"`
	// CreateTime holds the value of the "create_time" field.
	// 创建时间
	CreateTime date.DateTime `json:"createTime"`
	// UpdateTime holds the value of the "update_time" field.
	// 更新时间
	UpdateTime date.DateTime `json:"updateTime"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AsMarketAppAlertQuery when eager-loading is set.
	Edges AsMarketAppAlertEdges `json:"edges"`
}

// AsMarketAppAlertEdges holds the relations/edges for other nodes in the graph.
type AsMarketAppAlertEdges struct {
	// Appx holds the value of the appx edge.
	Appx *AsMarketApp `json:"appx"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AppxOrErr returns the Appx value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AsMarketAppAlertEdges) AppxOrErr() (*AsMarketApp, error) {
	if e.loadedTypes[0] {
		if e.Appx == nil {
			// The edge appx was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: asmarketapp.Label}
		}
		return e.Appx, nil
	}
	return nil, &NotLoadedError{edge: "appx"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AsMarketAppAlert) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case asmarketappalert.FieldID, asmarketappalert.FieldAlertEmergencyLevel, asmarketappalert.FieldAlertReleaseAppID, asmarketappalert.FieldAlertStatus, asmarketappalert.FieldIsDeleted, asmarketappalert.FieldStatus, asmarketappalert.FieldCreateUser, asmarketappalert.FieldUpdateUser:
			values[i] = new(sql.NullInt64)
		case asmarketappalert.FieldAlertTitle, asmarketappalert.FieldAlertContent, asmarketappalert.FieldAlertBusiness, asmarketappalert.FieldAlertRoleIds, asmarketappalert.FieldAlertJobIds:
			values[i] = new(sql.NullString)
		case asmarketappalert.FieldAlertReleaseTime, asmarketappalert.FieldCreateTime, asmarketappalert.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AsMarketAppAlert", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AsMarketAppAlert fields.
func (amaa *AsMarketAppAlert) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case asmarketappalert.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			amaa.ID = int64(value.Int64)
		case asmarketappalert.FieldAlertTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field alert_title", values[i])
			} else if value.Valid {
				amaa.AlertTitle = value.String
			}
		case asmarketappalert.FieldAlertContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field alert_content", values[i])
			} else if value.Valid {
				amaa.AlertContent = value.String
			}
		case asmarketappalert.FieldAlertBusiness:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field alert_business", values[i])
			} else if value.Valid {
				amaa.AlertBusiness = value.String
			}
		case asmarketappalert.FieldAlertEmergencyLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field alert_emergency_level", values[i])
			} else if value.Valid {
				amaa.AlertEmergencyLevel = value.Int64
			}
		case asmarketappalert.FieldAlertReleaseAppID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field alert_release_app_id", values[i])
			} else if value.Valid {
				amaa.AlertReleaseAppID = value.Int64
			}
		case asmarketappalert.FieldAlertReleaseTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field alert_release_time", values[i])
			} else if value.Valid {
				amaa.AlertReleaseTime = date.DateTime(value.Time)
			}
		case asmarketappalert.FieldAlertRoleIds:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field alert_role_ids", values[i])
			} else if value.Valid {
				amaa.AlertRoleIds = value.String
			}
		case asmarketappalert.FieldAlertJobIds:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field alert_job_ids", values[i])
			} else if value.Valid {
				amaa.AlertJobIds = value.String
			}
		case asmarketappalert.FieldAlertStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field alert_status", values[i])
			} else if value.Valid {
				amaa.AlertStatus = value.Int64
			}
		case asmarketappalert.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				amaa.IsDeleted = value.Int64
			}
		case asmarketappalert.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				amaa.Status = value.Int64
			}
		case asmarketappalert.FieldCreateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_user", values[i])
			} else if value.Valid {
				amaa.CreateUser = value.Int64
			}
		case asmarketappalert.FieldUpdateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_user", values[i])
			} else if value.Valid {
				amaa.UpdateUser = value.Int64
			}
		case asmarketappalert.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				amaa.CreateTime = date.DateTime(value.Time)
			}
		case asmarketappalert.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				amaa.UpdateTime = date.DateTime(value.Time)
			}
		}
	}
	return nil
}

// QueryAppx queries the "appx" edge of the AsMarketAppAlert entity.
func (amaa *AsMarketAppAlert) QueryAppx() *AsMarketAppQuery {
	return (&AsMarketAppAlertClient{config: amaa.config}).QueryAppx(amaa)
}

// Update returns a builder for updating this AsMarketAppAlert.
// Note that you need to call AsMarketAppAlert.Unwrap() before calling this method if this AsMarketAppAlert
// was returned from a transaction, and the transaction was committed or rolled back.
func (amaa *AsMarketAppAlert) Update() *AsMarketAppAlertUpdateOne {
	return (&AsMarketAppAlertClient{config: amaa.config}).UpdateOne(amaa)
}

// Unwrap unwraps the AsMarketAppAlert entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (amaa *AsMarketAppAlert) Unwrap() *AsMarketAppAlert {
	tx, ok := amaa.config.driver.(*txDriver)
	if !ok {
		panic("schema: AsMarketAppAlert is not a transactional entity")
	}
	amaa.config.driver = tx.drv
	return amaa
}

// String implements the fmt.Stringer.
func (amaa *AsMarketAppAlert) String() string {
	var builder strings.Builder
	builder.WriteString("AsMarketAppAlert(")
	builder.WriteString(fmt.Sprintf("id=%v", amaa.ID))
	builder.WriteString(", alert_title=")
	builder.WriteString(amaa.AlertTitle)
	builder.WriteString(", alert_content=")
	builder.WriteString(amaa.AlertContent)
	builder.WriteString(", alert_business=")
	builder.WriteString(amaa.AlertBusiness)
	builder.WriteString(", alert_emergency_level=")
	builder.WriteString(fmt.Sprintf("%v", amaa.AlertEmergencyLevel))
	builder.WriteString(", alert_release_app_id=")
	builder.WriteString(fmt.Sprintf("%v", amaa.AlertReleaseAppID))
	builder.WriteString(", alert_release_time=")
	builder.WriteString(fmt.Sprintf("%v", amaa.AlertReleaseTime))
	builder.WriteString(", alert_role_ids=")
	builder.WriteString(amaa.AlertRoleIds)
	builder.WriteString(", alert_job_ids=")
	builder.WriteString(amaa.AlertJobIds)
	builder.WriteString(", alert_status=")
	builder.WriteString(fmt.Sprintf("%v", amaa.AlertStatus))
	builder.WriteString(", is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", amaa.IsDeleted))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", amaa.Status))
	builder.WriteString(", create_user=")
	builder.WriteString(fmt.Sprintf("%v", amaa.CreateUser))
	builder.WriteString(", update_user=")
	builder.WriteString(fmt.Sprintf("%v", amaa.UpdateUser))
	builder.WriteString(", create_time=")
	builder.WriteString(fmt.Sprintf("%v", amaa.CreateTime))
	builder.WriteString(", update_time=")
	builder.WriteString(fmt.Sprintf("%v", amaa.UpdateTime))
	builder.WriteByte(')')
	return builder.String()
}

// AsMarketAppAlerts is a parsable slice of AsMarketAppAlert.
type AsMarketAppAlerts []*AsMarketAppAlert

func (amaa AsMarketAppAlerts) config(cfg config) {
	for _i := range amaa {
		amaa[_i].config = cfg
	}
}
