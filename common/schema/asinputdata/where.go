// Code generated by entc, DO NOT EDIT.

package asinputdata

import (
	"orginone/common/schema/predicate"
	"orginone/common/tools/date"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// FileID applies equality check predicate on the "file_id" field. It's identical to FileIDEQ.
func FileID(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFileID), v))
	})
}

// FileName applies equality check predicate on the "file_name" field. It's identical to FileNameEQ.
func FileName(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFileName), v))
	})
}

// TableName applies equality check predicate on the "table_name" field. It's identical to TableNameEQ.
func TableName(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTableName), v))
	})
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TCount applies equality check predicate on the "t_count" field. It's identical to TCountEQ.
func TCount(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTCount), v))
	})
}

// FCount applies equality check predicate on the "f_count" field. It's identical to FCountEQ.
func FCount(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFCount), v))
	})
}

// Context applies equality check predicate on the "context" field. It's identical to ContextEQ.
func Context(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContext), v))
	})
}

// EndTime applies equality check predicate on the "end_time" field. It's identical to EndTimeEQ.
func EndTime(v date.DateTime) predicate.AsInputData {
	vc := time.Time(v)
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndTime), vc))
	})
}

// TotalTime applies equality check predicate on the "total_time" field. It's identical to TotalTimeEQ.
func TotalTime(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalTime), v))
	})
}

// TenantCode applies equality check predicate on the "tenant_code" field. It's identical to TenantCodeEQ.
func TenantCode(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantCode), v))
	})
}

// ImportType applies equality check predicate on the "import_type" field. It's identical to ImportTypeEQ.
func ImportType(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImportType), v))
	})
}

// IsDeleted applies equality check predicate on the "is_deleted" field. It's identical to IsDeletedEQ.
func IsDeleted(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDeleted), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// CreateUser applies equality check predicate on the "create_user" field. It's identical to CreateUserEQ.
func CreateUser(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateUser), v))
	})
}

// UpdateUser applies equality check predicate on the "update_user" field. It's identical to UpdateUserEQ.
func UpdateUser(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateUser), v))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v date.DateTime) predicate.AsInputData {
	vc := time.Time(v)
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), vc))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v date.DateTime) predicate.AsInputData {
	vc := time.Time(v)
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), vc))
	})
}

// FileIDEQ applies the EQ predicate on the "file_id" field.
func FileIDEQ(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFileID), v))
	})
}

// FileIDNEQ applies the NEQ predicate on the "file_id" field.
func FileIDNEQ(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFileID), v))
	})
}

// FileIDIn applies the In predicate on the "file_id" field.
func FileIDIn(vs ...int64) predicate.AsInputData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsInputData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFileID), v...))
	})
}

// FileIDNotIn applies the NotIn predicate on the "file_id" field.
func FileIDNotIn(vs ...int64) predicate.AsInputData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsInputData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFileID), v...))
	})
}

// FileIDGT applies the GT predicate on the "file_id" field.
func FileIDGT(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFileID), v))
	})
}

// FileIDGTE applies the GTE predicate on the "file_id" field.
func FileIDGTE(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFileID), v))
	})
}

// FileIDLT applies the LT predicate on the "file_id" field.
func FileIDLT(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFileID), v))
	})
}

// FileIDLTE applies the LTE predicate on the "file_id" field.
func FileIDLTE(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFileID), v))
	})
}

// FileNameEQ applies the EQ predicate on the "file_name" field.
func FileNameEQ(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFileName), v))
	})
}

// FileNameNEQ applies the NEQ predicate on the "file_name" field.
func FileNameNEQ(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFileName), v))
	})
}

// FileNameIn applies the In predicate on the "file_name" field.
func FileNameIn(vs ...string) predicate.AsInputData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsInputData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFileName), v...))
	})
}

// FileNameNotIn applies the NotIn predicate on the "file_name" field.
func FileNameNotIn(vs ...string) predicate.AsInputData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsInputData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFileName), v...))
	})
}

// FileNameGT applies the GT predicate on the "file_name" field.
func FileNameGT(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFileName), v))
	})
}

// FileNameGTE applies the GTE predicate on the "file_name" field.
func FileNameGTE(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFileName), v))
	})
}

// FileNameLT applies the LT predicate on the "file_name" field.
func FileNameLT(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFileName), v))
	})
}

// FileNameLTE applies the LTE predicate on the "file_name" field.
func FileNameLTE(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFileName), v))
	})
}

// FileNameContains applies the Contains predicate on the "file_name" field.
func FileNameContains(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFileName), v))
	})
}

// FileNameHasPrefix applies the HasPrefix predicate on the "file_name" field.
func FileNameHasPrefix(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFileName), v))
	})
}

// FileNameHasSuffix applies the HasSuffix predicate on the "file_name" field.
func FileNameHasSuffix(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFileName), v))
	})
}

// FileNameEqualFold applies the EqualFold predicate on the "file_name" field.
func FileNameEqualFold(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFileName), v))
	})
}

// FileNameContainsFold applies the ContainsFold predicate on the "file_name" field.
func FileNameContainsFold(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFileName), v))
	})
}

// TableNameEQ applies the EQ predicate on the "table_name" field.
func TableNameEQ(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTableName), v))
	})
}

// TableNameNEQ applies the NEQ predicate on the "table_name" field.
func TableNameNEQ(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTableName), v))
	})
}

// TableNameIn applies the In predicate on the "table_name" field.
func TableNameIn(vs ...string) predicate.AsInputData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsInputData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTableName), v...))
	})
}

// TableNameNotIn applies the NotIn predicate on the "table_name" field.
func TableNameNotIn(vs ...string) predicate.AsInputData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsInputData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTableName), v...))
	})
}

// TableNameGT applies the GT predicate on the "table_name" field.
func TableNameGT(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTableName), v))
	})
}

// TableNameGTE applies the GTE predicate on the "table_name" field.
func TableNameGTE(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTableName), v))
	})
}

// TableNameLT applies the LT predicate on the "table_name" field.
func TableNameLT(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTableName), v))
	})
}

// TableNameLTE applies the LTE predicate on the "table_name" field.
func TableNameLTE(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTableName), v))
	})
}

// TableNameContains applies the Contains predicate on the "table_name" field.
func TableNameContains(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTableName), v))
	})
}

// TableNameHasPrefix applies the HasPrefix predicate on the "table_name" field.
func TableNameHasPrefix(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTableName), v))
	})
}

// TableNameHasSuffix applies the HasSuffix predicate on the "table_name" field.
func TableNameHasSuffix(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTableName), v))
	})
}

// TableNameEqualFold applies the EqualFold predicate on the "table_name" field.
func TableNameEqualFold(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTableName), v))
	})
}

// TableNameContainsFold applies the ContainsFold predicate on the "table_name" field.
func TableNameContainsFold(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTableName), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...int64) predicate.AsInputData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsInputData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...int64) predicate.AsInputData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsInputData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldType), v))
	})
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldType), v))
	})
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldType), v))
	})
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldType), v))
	})
}

// TypeIsNil applies the IsNil predicate on the "type" field.
func TypeIsNil() predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldType)))
	})
}

// TypeNotNil applies the NotNil predicate on the "type" field.
func TypeNotNil() predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldType)))
	})
}

// TCountEQ applies the EQ predicate on the "t_count" field.
func TCountEQ(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTCount), v))
	})
}

// TCountNEQ applies the NEQ predicate on the "t_count" field.
func TCountNEQ(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTCount), v))
	})
}

// TCountIn applies the In predicate on the "t_count" field.
func TCountIn(vs ...int64) predicate.AsInputData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsInputData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTCount), v...))
	})
}

// TCountNotIn applies the NotIn predicate on the "t_count" field.
func TCountNotIn(vs ...int64) predicate.AsInputData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsInputData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTCount), v...))
	})
}

// TCountGT applies the GT predicate on the "t_count" field.
func TCountGT(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTCount), v))
	})
}

// TCountGTE applies the GTE predicate on the "t_count" field.
func TCountGTE(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTCount), v))
	})
}

// TCountLT applies the LT predicate on the "t_count" field.
func TCountLT(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTCount), v))
	})
}

// TCountLTE applies the LTE predicate on the "t_count" field.
func TCountLTE(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTCount), v))
	})
}

// TCountIsNil applies the IsNil predicate on the "t_count" field.
func TCountIsNil() predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTCount)))
	})
}

// TCountNotNil applies the NotNil predicate on the "t_count" field.
func TCountNotNil() predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTCount)))
	})
}

// FCountEQ applies the EQ predicate on the "f_count" field.
func FCountEQ(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFCount), v))
	})
}

// FCountNEQ applies the NEQ predicate on the "f_count" field.
func FCountNEQ(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFCount), v))
	})
}

// FCountIn applies the In predicate on the "f_count" field.
func FCountIn(vs ...int64) predicate.AsInputData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsInputData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFCount), v...))
	})
}

// FCountNotIn applies the NotIn predicate on the "f_count" field.
func FCountNotIn(vs ...int64) predicate.AsInputData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsInputData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFCount), v...))
	})
}

// FCountGT applies the GT predicate on the "f_count" field.
func FCountGT(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFCount), v))
	})
}

// FCountGTE applies the GTE predicate on the "f_count" field.
func FCountGTE(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFCount), v))
	})
}

// FCountLT applies the LT predicate on the "f_count" field.
func FCountLT(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFCount), v))
	})
}

// FCountLTE applies the LTE predicate on the "f_count" field.
func FCountLTE(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFCount), v))
	})
}

// FCountIsNil applies the IsNil predicate on the "f_count" field.
func FCountIsNil() predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFCount)))
	})
}

// FCountNotNil applies the NotNil predicate on the "f_count" field.
func FCountNotNil() predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFCount)))
	})
}

// ContextEQ applies the EQ predicate on the "context" field.
func ContextEQ(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContext), v))
	})
}

// ContextNEQ applies the NEQ predicate on the "context" field.
func ContextNEQ(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContext), v))
	})
}

// ContextIn applies the In predicate on the "context" field.
func ContextIn(vs ...string) predicate.AsInputData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsInputData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldContext), v...))
	})
}

// ContextNotIn applies the NotIn predicate on the "context" field.
func ContextNotIn(vs ...string) predicate.AsInputData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsInputData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldContext), v...))
	})
}

// ContextGT applies the GT predicate on the "context" field.
func ContextGT(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContext), v))
	})
}

// ContextGTE applies the GTE predicate on the "context" field.
func ContextGTE(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContext), v))
	})
}

// ContextLT applies the LT predicate on the "context" field.
func ContextLT(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContext), v))
	})
}

// ContextLTE applies the LTE predicate on the "context" field.
func ContextLTE(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContext), v))
	})
}

// ContextContains applies the Contains predicate on the "context" field.
func ContextContains(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldContext), v))
	})
}

// ContextHasPrefix applies the HasPrefix predicate on the "context" field.
func ContextHasPrefix(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldContext), v))
	})
}

// ContextHasSuffix applies the HasSuffix predicate on the "context" field.
func ContextHasSuffix(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldContext), v))
	})
}

// ContextIsNil applies the IsNil predicate on the "context" field.
func ContextIsNil() predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldContext)))
	})
}

// ContextNotNil applies the NotNil predicate on the "context" field.
func ContextNotNil() predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldContext)))
	})
}

// ContextEqualFold applies the EqualFold predicate on the "context" field.
func ContextEqualFold(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldContext), v))
	})
}

// ContextContainsFold applies the ContainsFold predicate on the "context" field.
func ContextContainsFold(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldContext), v))
	})
}

// EndTimeEQ applies the EQ predicate on the "end_time" field.
func EndTimeEQ(v date.DateTime) predicate.AsInputData {
	vc := time.Time(v)
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndTime), vc))
	})
}

// EndTimeNEQ applies the NEQ predicate on the "end_time" field.
func EndTimeNEQ(v date.DateTime) predicate.AsInputData {
	vc := time.Time(v)
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEndTime), vc))
	})
}

// EndTimeIn applies the In predicate on the "end_time" field.
func EndTimeIn(vs ...date.DateTime) predicate.AsInputData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsInputData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEndTime), v...))
	})
}

// EndTimeNotIn applies the NotIn predicate on the "end_time" field.
func EndTimeNotIn(vs ...date.DateTime) predicate.AsInputData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsInputData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEndTime), v...))
	})
}

// EndTimeGT applies the GT predicate on the "end_time" field.
func EndTimeGT(v date.DateTime) predicate.AsInputData {
	vc := time.Time(v)
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEndTime), vc))
	})
}

// EndTimeGTE applies the GTE predicate on the "end_time" field.
func EndTimeGTE(v date.DateTime) predicate.AsInputData {
	vc := time.Time(v)
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEndTime), vc))
	})
}

// EndTimeLT applies the LT predicate on the "end_time" field.
func EndTimeLT(v date.DateTime) predicate.AsInputData {
	vc := time.Time(v)
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEndTime), vc))
	})
}

// EndTimeLTE applies the LTE predicate on the "end_time" field.
func EndTimeLTE(v date.DateTime) predicate.AsInputData {
	vc := time.Time(v)
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEndTime), vc))
	})
}

// EndTimeIsNil applies the IsNil predicate on the "end_time" field.
func EndTimeIsNil() predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEndTime)))
	})
}

// EndTimeNotNil applies the NotNil predicate on the "end_time" field.
func EndTimeNotNil() predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEndTime)))
	})
}

// TotalTimeEQ applies the EQ predicate on the "total_time" field.
func TotalTimeEQ(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalTime), v))
	})
}

// TotalTimeNEQ applies the NEQ predicate on the "total_time" field.
func TotalTimeNEQ(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTotalTime), v))
	})
}

// TotalTimeIn applies the In predicate on the "total_time" field.
func TotalTimeIn(vs ...int64) predicate.AsInputData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsInputData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTotalTime), v...))
	})
}

// TotalTimeNotIn applies the NotIn predicate on the "total_time" field.
func TotalTimeNotIn(vs ...int64) predicate.AsInputData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsInputData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTotalTime), v...))
	})
}

// TotalTimeGT applies the GT predicate on the "total_time" field.
func TotalTimeGT(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTotalTime), v))
	})
}

// TotalTimeGTE applies the GTE predicate on the "total_time" field.
func TotalTimeGTE(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTotalTime), v))
	})
}

// TotalTimeLT applies the LT predicate on the "total_time" field.
func TotalTimeLT(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTotalTime), v))
	})
}

// TotalTimeLTE applies the LTE predicate on the "total_time" field.
func TotalTimeLTE(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTotalTime), v))
	})
}

// TotalTimeIsNil applies the IsNil predicate on the "total_time" field.
func TotalTimeIsNil() predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTotalTime)))
	})
}

// TotalTimeNotNil applies the NotNil predicate on the "total_time" field.
func TotalTimeNotNil() predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTotalTime)))
	})
}

// TenantCodeEQ applies the EQ predicate on the "tenant_code" field.
func TenantCodeEQ(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantCode), v))
	})
}

// TenantCodeNEQ applies the NEQ predicate on the "tenant_code" field.
func TenantCodeNEQ(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantCode), v))
	})
}

// TenantCodeIn applies the In predicate on the "tenant_code" field.
func TenantCodeIn(vs ...string) predicate.AsInputData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsInputData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantCode), v...))
	})
}

// TenantCodeNotIn applies the NotIn predicate on the "tenant_code" field.
func TenantCodeNotIn(vs ...string) predicate.AsInputData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsInputData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantCode), v...))
	})
}

// TenantCodeGT applies the GT predicate on the "tenant_code" field.
func TenantCodeGT(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantCode), v))
	})
}

// TenantCodeGTE applies the GTE predicate on the "tenant_code" field.
func TenantCodeGTE(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantCode), v))
	})
}

// TenantCodeLT applies the LT predicate on the "tenant_code" field.
func TenantCodeLT(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantCode), v))
	})
}

// TenantCodeLTE applies the LTE predicate on the "tenant_code" field.
func TenantCodeLTE(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantCode), v))
	})
}

// TenantCodeContains applies the Contains predicate on the "tenant_code" field.
func TenantCodeContains(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTenantCode), v))
	})
}

// TenantCodeHasPrefix applies the HasPrefix predicate on the "tenant_code" field.
func TenantCodeHasPrefix(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTenantCode), v))
	})
}

// TenantCodeHasSuffix applies the HasSuffix predicate on the "tenant_code" field.
func TenantCodeHasSuffix(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTenantCode), v))
	})
}

// TenantCodeIsNil applies the IsNil predicate on the "tenant_code" field.
func TenantCodeIsNil() predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTenantCode)))
	})
}

// TenantCodeNotNil applies the NotNil predicate on the "tenant_code" field.
func TenantCodeNotNil() predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTenantCode)))
	})
}

// TenantCodeEqualFold applies the EqualFold predicate on the "tenant_code" field.
func TenantCodeEqualFold(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTenantCode), v))
	})
}

// TenantCodeContainsFold applies the ContainsFold predicate on the "tenant_code" field.
func TenantCodeContainsFold(v string) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTenantCode), v))
	})
}

// ImportTypeEQ applies the EQ predicate on the "import_type" field.
func ImportTypeEQ(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImportType), v))
	})
}

// ImportTypeNEQ applies the NEQ predicate on the "import_type" field.
func ImportTypeNEQ(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldImportType), v))
	})
}

// ImportTypeIn applies the In predicate on the "import_type" field.
func ImportTypeIn(vs ...int64) predicate.AsInputData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsInputData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldImportType), v...))
	})
}

// ImportTypeNotIn applies the NotIn predicate on the "import_type" field.
func ImportTypeNotIn(vs ...int64) predicate.AsInputData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsInputData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldImportType), v...))
	})
}

// ImportTypeGT applies the GT predicate on the "import_type" field.
func ImportTypeGT(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldImportType), v))
	})
}

// ImportTypeGTE applies the GTE predicate on the "import_type" field.
func ImportTypeGTE(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldImportType), v))
	})
}

// ImportTypeLT applies the LT predicate on the "import_type" field.
func ImportTypeLT(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldImportType), v))
	})
}

// ImportTypeLTE applies the LTE predicate on the "import_type" field.
func ImportTypeLTE(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldImportType), v))
	})
}

// ImportTypeIsNil applies the IsNil predicate on the "import_type" field.
func ImportTypeIsNil() predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldImportType)))
	})
}

// ImportTypeNotNil applies the NotNil predicate on the "import_type" field.
func ImportTypeNotNil() predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldImportType)))
	})
}

// IsDeletedEQ applies the EQ predicate on the "is_deleted" field.
func IsDeletedEQ(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedNEQ applies the NEQ predicate on the "is_deleted" field.
func IsDeletedNEQ(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedIn applies the In predicate on the "is_deleted" field.
func IsDeletedIn(vs ...int64) predicate.AsInputData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsInputData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsDeleted), v...))
	})
}

// IsDeletedNotIn applies the NotIn predicate on the "is_deleted" field.
func IsDeletedNotIn(vs ...int64) predicate.AsInputData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsInputData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsDeleted), v...))
	})
}

// IsDeletedGT applies the GT predicate on the "is_deleted" field.
func IsDeletedGT(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedGTE applies the GTE predicate on the "is_deleted" field.
func IsDeletedGTE(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedLT applies the LT predicate on the "is_deleted" field.
func IsDeletedLT(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedLTE applies the LTE predicate on the "is_deleted" field.
func IsDeletedLTE(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsDeleted), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int64) predicate.AsInputData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsInputData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int64) predicate.AsInputData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsInputData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStatus)))
	})
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStatus)))
	})
}

// CreateUserEQ applies the EQ predicate on the "create_user" field.
func CreateUserEQ(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateUser), v))
	})
}

// CreateUserNEQ applies the NEQ predicate on the "create_user" field.
func CreateUserNEQ(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateUser), v))
	})
}

// CreateUserIn applies the In predicate on the "create_user" field.
func CreateUserIn(vs ...int64) predicate.AsInputData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsInputData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateUser), v...))
	})
}

// CreateUserNotIn applies the NotIn predicate on the "create_user" field.
func CreateUserNotIn(vs ...int64) predicate.AsInputData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsInputData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateUser), v...))
	})
}

// CreateUserGT applies the GT predicate on the "create_user" field.
func CreateUserGT(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateUser), v))
	})
}

// CreateUserGTE applies the GTE predicate on the "create_user" field.
func CreateUserGTE(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateUser), v))
	})
}

// CreateUserLT applies the LT predicate on the "create_user" field.
func CreateUserLT(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateUser), v))
	})
}

// CreateUserLTE applies the LTE predicate on the "create_user" field.
func CreateUserLTE(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateUser), v))
	})
}

// CreateUserIsNil applies the IsNil predicate on the "create_user" field.
func CreateUserIsNil() predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreateUser)))
	})
}

// CreateUserNotNil applies the NotNil predicate on the "create_user" field.
func CreateUserNotNil() predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreateUser)))
	})
}

// UpdateUserEQ applies the EQ predicate on the "update_user" field.
func UpdateUserEQ(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserNEQ applies the NEQ predicate on the "update_user" field.
func UpdateUserNEQ(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserIn applies the In predicate on the "update_user" field.
func UpdateUserIn(vs ...int64) predicate.AsInputData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsInputData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateUser), v...))
	})
}

// UpdateUserNotIn applies the NotIn predicate on the "update_user" field.
func UpdateUserNotIn(vs ...int64) predicate.AsInputData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsInputData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateUser), v...))
	})
}

// UpdateUserGT applies the GT predicate on the "update_user" field.
func UpdateUserGT(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserGTE applies the GTE predicate on the "update_user" field.
func UpdateUserGTE(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserLT applies the LT predicate on the "update_user" field.
func UpdateUserLT(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserLTE applies the LTE predicate on the "update_user" field.
func UpdateUserLTE(v int64) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserIsNil applies the IsNil predicate on the "update_user" field.
func UpdateUserIsNil() predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdateUser)))
	})
}

// UpdateUserNotNil applies the NotNil predicate on the "update_user" field.
func UpdateUserNotNil() predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdateUser)))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v date.DateTime) predicate.AsInputData {
	vc := time.Time(v)
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v date.DateTime) predicate.AsInputData {
	vc := time.Time(v)
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...date.DateTime) predicate.AsInputData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsInputData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...date.DateTime) predicate.AsInputData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsInputData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v date.DateTime) predicate.AsInputData {
	vc := time.Time(v)
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v date.DateTime) predicate.AsInputData {
	vc := time.Time(v)
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v date.DateTime) predicate.AsInputData {
	vc := time.Time(v)
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v date.DateTime) predicate.AsInputData {
	vc := time.Time(v)
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeIsNil applies the IsNil predicate on the "create_time" field.
func CreateTimeIsNil() predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreateTime)))
	})
}

// CreateTimeNotNil applies the NotNil predicate on the "create_time" field.
func CreateTimeNotNil() predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreateTime)))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v date.DateTime) predicate.AsInputData {
	vc := time.Time(v)
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v date.DateTime) predicate.AsInputData {
	vc := time.Time(v)
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...date.DateTime) predicate.AsInputData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsInputData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...date.DateTime) predicate.AsInputData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsInputData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v date.DateTime) predicate.AsInputData {
	vc := time.Time(v)
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v date.DateTime) predicate.AsInputData {
	vc := time.Time(v)
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v date.DateTime) predicate.AsInputData {
	vc := time.Time(v)
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v date.DateTime) predicate.AsInputData {
	vc := time.Time(v)
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeIsNil applies the IsNil predicate on the "update_time" field.
func UpdateTimeIsNil() predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdateTime)))
	})
}

// UpdateTimeNotNil applies the NotNil predicate on the "update_time" field.
func UpdateTimeNotNil() predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdateTime)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AsInputData) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AsInputData) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AsInputData) predicate.AsInputData {
	return predicate.AsInputData(func(s *sql.Selector) {
		p(s.Not())
	})
}
