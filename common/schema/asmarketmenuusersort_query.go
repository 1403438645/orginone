// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"math"
	"orginone/common/schema/asmarketmenu"
	"orginone/common/schema/asmarketmenuusersort"
	"orginone/common/schema/asuser"
	"orginone/common/schema/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsMarketMenuUserSortQuery is the builder for querying AsMarketMenuUserSort entities.
type AsMarketMenuUserSortQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.AsMarketMenuUserSort
	// eager-loading edges.
	withUserx    *AsUserQuery
	withAppmenux *AsMarketMenuQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AsMarketMenuUserSortQuery builder.
func (ammusq *AsMarketMenuUserSortQuery) Where(ps ...predicate.AsMarketMenuUserSort) *AsMarketMenuUserSortQuery {
	ammusq.predicates = append(ammusq.predicates, ps...)
	return ammusq
}

// Limit adds a limit step to the query.
func (ammusq *AsMarketMenuUserSortQuery) Limit(limit int) *AsMarketMenuUserSortQuery {
	ammusq.limit = &limit
	return ammusq
}

// Offset adds an offset step to the query.
func (ammusq *AsMarketMenuUserSortQuery) Offset(offset int) *AsMarketMenuUserSortQuery {
	ammusq.offset = &offset
	return ammusq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ammusq *AsMarketMenuUserSortQuery) Unique(unique bool) *AsMarketMenuUserSortQuery {
	ammusq.unique = &unique
	return ammusq
}

// Order adds an order step to the query.
func (ammusq *AsMarketMenuUserSortQuery) Order(o ...OrderFunc) *AsMarketMenuUserSortQuery {
	ammusq.order = append(ammusq.order, o...)
	return ammusq
}

// QueryUserx chains the current query on the "userx" edge.
func (ammusq *AsMarketMenuUserSortQuery) QueryUserx() *AsUserQuery {
	query := &AsUserQuery{config: ammusq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ammusq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ammusq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketmenuusersort.Table, asmarketmenuusersort.FieldID, selector),
			sqlgraph.To(asuser.Table, asuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asmarketmenuusersort.UserxTable, asmarketmenuusersort.UserxColumn),
		)
		fromU = sqlgraph.SetNeighbors(ammusq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAppmenux chains the current query on the "appmenux" edge.
func (ammusq *AsMarketMenuUserSortQuery) QueryAppmenux() *AsMarketMenuQuery {
	query := &AsMarketMenuQuery{config: ammusq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ammusq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ammusq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketmenuusersort.Table, asmarketmenuusersort.FieldID, selector),
			sqlgraph.To(asmarketmenu.Table, asmarketmenu.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asmarketmenuusersort.AppmenuxTable, asmarketmenuusersort.AppmenuxColumn),
		)
		fromU = sqlgraph.SetNeighbors(ammusq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AsMarketMenuUserSort entity from the query.
// Returns a *NotFoundError when no AsMarketMenuUserSort was found.
func (ammusq *AsMarketMenuUserSortQuery) First(ctx context.Context) (*AsMarketMenuUserSort, error) {
	nodes, err := ammusq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{asmarketmenuusersort.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ammusq *AsMarketMenuUserSortQuery) FirstX(ctx context.Context) *AsMarketMenuUserSort {
	node, err := ammusq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AsMarketMenuUserSort ID from the query.
// Returns a *NotFoundError when no AsMarketMenuUserSort ID was found.
func (ammusq *AsMarketMenuUserSortQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = ammusq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{asmarketmenuusersort.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ammusq *AsMarketMenuUserSortQuery) FirstIDX(ctx context.Context) int64 {
	id, err := ammusq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AsMarketMenuUserSort entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AsMarketMenuUserSort entity is found.
// Returns a *NotFoundError when no AsMarketMenuUserSort entities are found.
func (ammusq *AsMarketMenuUserSortQuery) Only(ctx context.Context) (*AsMarketMenuUserSort, error) {
	nodes, err := ammusq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{asmarketmenuusersort.Label}
	default:
		return nil, &NotSingularError{asmarketmenuusersort.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ammusq *AsMarketMenuUserSortQuery) OnlyX(ctx context.Context) *AsMarketMenuUserSort {
	node, err := ammusq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AsMarketMenuUserSort ID in the query.
// Returns a *NotSingularError when more than one AsMarketMenuUserSort ID is found.
// Returns a *NotFoundError when no entities are found.
func (ammusq *AsMarketMenuUserSortQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = ammusq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{asmarketmenuusersort.Label}
	default:
		err = &NotSingularError{asmarketmenuusersort.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ammusq *AsMarketMenuUserSortQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := ammusq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AsMarketMenuUserSorts.
func (ammusq *AsMarketMenuUserSortQuery) All(ctx context.Context) ([]*AsMarketMenuUserSort, error) {
	if err := ammusq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return ammusq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (ammusq *AsMarketMenuUserSortQuery) AllX(ctx context.Context) []*AsMarketMenuUserSort {
	nodes, err := ammusq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AsMarketMenuUserSort IDs.
func (ammusq *AsMarketMenuUserSortQuery) IDs(ctx context.Context) ([]int64, error) {
	var ids []int64
	if err := ammusq.Select(asmarketmenuusersort.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ammusq *AsMarketMenuUserSortQuery) IDsX(ctx context.Context) []int64 {
	ids, err := ammusq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ammusq *AsMarketMenuUserSortQuery) Count(ctx context.Context) (int64, error) {
	if err := ammusq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return ammusq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (ammusq *AsMarketMenuUserSortQuery) CountX(ctx context.Context) int64 {
	count, err := ammusq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ammusq *AsMarketMenuUserSortQuery) Exist(ctx context.Context) (bool, error) {
	if err := ammusq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return ammusq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (ammusq *AsMarketMenuUserSortQuery) ExistX(ctx context.Context) bool {
	exist, err := ammusq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AsMarketMenuUserSortQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ammusq *AsMarketMenuUserSortQuery) Clone() *AsMarketMenuUserSortQuery {
	if ammusq == nil {
		return nil
	}
	return &AsMarketMenuUserSortQuery{
		config:       ammusq.config,
		limit:        ammusq.limit,
		offset:       ammusq.offset,
		order:        append([]OrderFunc{}, ammusq.order...),
		predicates:   append([]predicate.AsMarketMenuUserSort{}, ammusq.predicates...),
		withUserx:    ammusq.withUserx.Clone(),
		withAppmenux: ammusq.withAppmenux.Clone(),
		// clone intermediate query.
		sql:    ammusq.sql.Clone(),
		path:   ammusq.path,
		unique: ammusq.unique,
	}
}

// WithUserx tells the query-builder to eager-load the nodes that are connected to
// the "userx" edge. The optional arguments are used to configure the query builder of the edge.
func (ammusq *AsMarketMenuUserSortQuery) WithUserx(opts ...func(*AsUserQuery)) *AsMarketMenuUserSortQuery {
	query := &AsUserQuery{config: ammusq.config}
	for _, opt := range opts {
		opt(query)
	}
	ammusq.withUserx = query
	return ammusq
}

// WithAppmenux tells the query-builder to eager-load the nodes that are connected to
// the "appmenux" edge. The optional arguments are used to configure the query builder of the edge.
func (ammusq *AsMarketMenuUserSortQuery) WithAppmenux(opts ...func(*AsMarketMenuQuery)) *AsMarketMenuUserSortQuery {
	query := &AsMarketMenuQuery{config: ammusq.config}
	for _, opt := range opts {
		opt(query)
	}
	ammusq.withAppmenux = query
	return ammusq
}

// ThenUserx tells the query-builder to eager-load the nodes that are connected to
// the "userx" edge. The optional arguments are used to configure the query builder of the edge.
func (ammusq *AsMarketMenuUserSortQuery) ThenUserx(opts ...func(*AsUserQuery)) *AsMarketMenuUserSortQuery {
	query := &AsUserQuery{config: ammusq.config}
	for _, opt := range opts {
		opt(query.Where(asuser.IsDeleted(0)))
	}
	ammusq.withUserx = query
	return ammusq
}

// ThenAppmenux tells the query-builder to eager-load the nodes that are connected to
// the "appmenux" edge. The optional arguments are used to configure the query builder of the edge.
func (ammusq *AsMarketMenuUserSortQuery) ThenAppmenux(opts ...func(*AsMarketMenuQuery)) *AsMarketMenuUserSortQuery {
	query := &AsMarketMenuQuery{config: ammusq.config}
	for _, opt := range opts {
		opt(query.Where(asmarketmenu.IsDeleted(0)))
	}
	ammusq.withAppmenux = query
	return ammusq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UserID int64 `json:"userId"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AsMarketMenuUserSort.Query().
//		GroupBy(asmarketmenuusersort.FieldUserID).
//		Aggregate(schema.Count()).
//		Scan(ctx, &v)
//
func (ammusq *AsMarketMenuUserSortQuery) GroupBy(field string, fields ...string) *AsMarketMenuUserSortGroupBy {
	group := &AsMarketMenuUserSortGroupBy{config: ammusq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := ammusq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return ammusq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UserID int64 `json:"userId"`
//	}
//
//	client.AsMarketMenuUserSort.Query().
//		Select(asmarketmenuusersort.FieldUserID).
//		Scan(ctx, &v)
//
func (ammusq *AsMarketMenuUserSortQuery) Select(fields ...string) *AsMarketMenuUserSortSelect {
	ammusq.fields = append(ammusq.fields, fields...)
	return &AsMarketMenuUserSortSelect{AsMarketMenuUserSortQuery: ammusq}
}

func (ammusq *AsMarketMenuUserSortQuery) prepareQuery(ctx context.Context) error {
	for _, f := range ammusq.fields {
		if !asmarketmenuusersort.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("schema: invalid field %q for query", f)}
		}
	}
	if ammusq.path != nil {
		prev, err := ammusq.path(ctx)
		if err != nil {
			return err
		}
		ammusq.sql = prev
	}
	return nil
}

func (ammusq *AsMarketMenuUserSortQuery) sqlAll(ctx context.Context) ([]*AsMarketMenuUserSort, error) {
	var (
		nodes       = []*AsMarketMenuUserSort{}
		_spec       = ammusq.querySpec()
		loadedTypes = [2]bool{
			ammusq.withUserx != nil,
			ammusq.withAppmenux != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &AsMarketMenuUserSort{config: ammusq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("schema: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, ammusq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := ammusq.withUserx; query != nil {
		ids := make([]int64, 0, len(nodes))
		nodeids := make(map[int64][]*AsMarketMenuUserSort)
		for i := range nodes {
			fk := nodes[i].UserID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(asuser.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Userx = n
			}
		}
	}

	if query := ammusq.withAppmenux; query != nil {
		ids := make([]int64, 0, len(nodes))
		nodeids := make(map[int64][]*AsMarketMenuUserSort)
		for i := range nodes {
			fk := nodes[i].MenuID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(asmarketmenu.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "menu_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Appmenux = n
			}
		}
	}

	return nodes, nil
}

func (ammusq *AsMarketMenuUserSortQuery) sqlCount(ctx context.Context) (int64, error) {
	_spec := ammusq.querySpec()
	_spec.Node.Columns = ammusq.fields
	if len(ammusq.fields) > 0 {
		_spec.Unique = ammusq.unique != nil && *ammusq.unique
	}
	c, err := sqlgraph.CountNodes(ctx, ammusq.driver, _spec)
	return int64(c), err
}

func (ammusq *AsMarketMenuUserSortQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := ammusq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("schema: check existence: %w", err)
	}
	return n > 0, nil
}

func (ammusq *AsMarketMenuUserSortQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asmarketmenuusersort.Table,
			Columns: asmarketmenuusersort.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asmarketmenuusersort.FieldID,
			},
		},
		From:   ammusq.sql,
		Unique: true,
	}
	if unique := ammusq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := ammusq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asmarketmenuusersort.FieldID)
		for i := range fields {
			if fields[i] != asmarketmenuusersort.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ammusq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ammusq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ammusq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ammusq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ammusq *AsMarketMenuUserSortQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ammusq.driver.Dialect())
	t1 := builder.Table(asmarketmenuusersort.Table)
	columns := ammusq.fields
	if len(columns) == 0 {
		columns = asmarketmenuusersort.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ammusq.sql != nil {
		selector = ammusq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ammusq.unique != nil && *ammusq.unique {
		selector.Distinct()
	}
	for _, p := range ammusq.predicates {
		p(selector)
	}
	for _, p := range ammusq.order {
		p(selector)
	}
	if offset := ammusq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ammusq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AsMarketMenuUserSortGroupBy is the group-by builder for AsMarketMenuUserSort entities.
type AsMarketMenuUserSortGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ammusgb *AsMarketMenuUserSortGroupBy) Aggregate(fns ...AggregateFunc) *AsMarketMenuUserSortGroupBy {
	ammusgb.fns = append(ammusgb.fns, fns...)
	return ammusgb
}

// Scan applies the group-by query and scans the result into the given value.
func (ammusgb *AsMarketMenuUserSortGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := ammusgb.path(ctx)
	if err != nil {
		return err
	}
	ammusgb.sql = query
	return ammusgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ammusgb *AsMarketMenuUserSortGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := ammusgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (ammusgb *AsMarketMenuUserSortGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(ammusgb.fields) > 1 {
		return nil, errors.New("schema: AsMarketMenuUserSortGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := ammusgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ammusgb *AsMarketMenuUserSortGroupBy) StringsX(ctx context.Context) []string {
	v, err := ammusgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ammusgb *AsMarketMenuUserSortGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ammusgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketmenuusersort.Label}
	default:
		err = fmt.Errorf("schema: AsMarketMenuUserSortGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ammusgb *AsMarketMenuUserSortGroupBy) StringX(ctx context.Context) string {
	v, err := ammusgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (ammusgb *AsMarketMenuUserSortGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(ammusgb.fields) > 1 {
		return nil, errors.New("schema: AsMarketMenuUserSortGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := ammusgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ammusgb *AsMarketMenuUserSortGroupBy) IntsX(ctx context.Context) []int {
	v, err := ammusgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ammusgb *AsMarketMenuUserSortGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ammusgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketmenuusersort.Label}
	default:
		err = fmt.Errorf("schema: AsMarketMenuUserSortGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ammusgb *AsMarketMenuUserSortGroupBy) IntX(ctx context.Context) int {
	v, err := ammusgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (ammusgb *AsMarketMenuUserSortGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(ammusgb.fields) > 1 {
		return nil, errors.New("schema: AsMarketMenuUserSortGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := ammusgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ammusgb *AsMarketMenuUserSortGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := ammusgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ammusgb *AsMarketMenuUserSortGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ammusgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketmenuusersort.Label}
	default:
		err = fmt.Errorf("schema: AsMarketMenuUserSortGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ammusgb *AsMarketMenuUserSortGroupBy) Float64X(ctx context.Context) float64 {
	v, err := ammusgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (ammusgb *AsMarketMenuUserSortGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(ammusgb.fields) > 1 {
		return nil, errors.New("schema: AsMarketMenuUserSortGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := ammusgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ammusgb *AsMarketMenuUserSortGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := ammusgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ammusgb *AsMarketMenuUserSortGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ammusgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketmenuusersort.Label}
	default:
		err = fmt.Errorf("schema: AsMarketMenuUserSortGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ammusgb *AsMarketMenuUserSortGroupBy) BoolX(ctx context.Context) bool {
	v, err := ammusgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64s returns list of int64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (ammusgb *AsMarketMenuUserSortGroupBy) Int64s(ctx context.Context) ([]int64, error) {
	if len(ammusgb.fields) > 1 {
		return nil, errors.New("schema: AsMarketMenuUserSortGroupBy.Int64s is not achievable when grouping more than 1 field")
	}
	var v []int64
	if err := ammusgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Int64sX is like Int64s, but panics if an error occurs.
func (ammusgb *AsMarketMenuUserSortGroupBy) Int64sX(ctx context.Context) []int64 {
	v, err := ammusgb.Int64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64 returns a single int64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ammusgb *AsMarketMenuUserSortGroupBy) Int64(ctx context.Context) (_ int64, err error) {
	var v []int64
	if v, err = ammusgb.Int64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketmenuusersort.Label}
	default:
		err = fmt.Errorf("schema: AsMarketMenuUserSortGroupBy.Int64s returned %d results when one was expected", len(v))
	}
	return
}

// Int64X is like Int64, but panics if an error occurs.
func (ammusgb *AsMarketMenuUserSortGroupBy) Int64X(ctx context.Context) int64 {
	v, err := ammusgb.Int64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ammusgb *AsMarketMenuUserSortGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range ammusgb.fields {
		if !asmarketmenuusersort.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := ammusgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ammusgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ammusgb *AsMarketMenuUserSortGroupBy) sqlQuery() *sql.Selector {
	selector := ammusgb.sql.Select()
	aggregation := make([]string, 0, len(ammusgb.fns))
	for _, fn := range ammusgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(ammusgb.fields)+len(ammusgb.fns))
		for _, f := range ammusgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(ammusgb.fields...)...)
}

// AsMarketMenuUserSortSelect is the builder for selecting fields of AsMarketMenuUserSort entities.
type AsMarketMenuUserSortSelect struct {
	*AsMarketMenuUserSortQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ammuss *AsMarketMenuUserSortSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ammuss.prepareQuery(ctx); err != nil {
		return err
	}
	ammuss.sql = ammuss.AsMarketMenuUserSortQuery.sqlQuery(ctx)
	return ammuss.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ammuss *AsMarketMenuUserSortSelect) ScanX(ctx context.Context, v interface{}) {
	if err := ammuss.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (ammuss *AsMarketMenuUserSortSelect) Strings(ctx context.Context) ([]string, error) {
	if len(ammuss.fields) > 1 {
		return nil, errors.New("schema: AsMarketMenuUserSortSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := ammuss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ammuss *AsMarketMenuUserSortSelect) StringsX(ctx context.Context) []string {
	v, err := ammuss.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (ammuss *AsMarketMenuUserSortSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ammuss.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketmenuusersort.Label}
	default:
		err = fmt.Errorf("schema: AsMarketMenuUserSortSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ammuss *AsMarketMenuUserSortSelect) StringX(ctx context.Context) string {
	v, err := ammuss.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (ammuss *AsMarketMenuUserSortSelect) Ints(ctx context.Context) ([]int, error) {
	if len(ammuss.fields) > 1 {
		return nil, errors.New("schema: AsMarketMenuUserSortSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := ammuss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ammuss *AsMarketMenuUserSortSelect) IntsX(ctx context.Context) []int {
	v, err := ammuss.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (ammuss *AsMarketMenuUserSortSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ammuss.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketmenuusersort.Label}
	default:
		err = fmt.Errorf("schema: AsMarketMenuUserSortSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ammuss *AsMarketMenuUserSortSelect) IntX(ctx context.Context) int {
	v, err := ammuss.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (ammuss *AsMarketMenuUserSortSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(ammuss.fields) > 1 {
		return nil, errors.New("schema: AsMarketMenuUserSortSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := ammuss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ammuss *AsMarketMenuUserSortSelect) Float64sX(ctx context.Context) []float64 {
	v, err := ammuss.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (ammuss *AsMarketMenuUserSortSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ammuss.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketmenuusersort.Label}
	default:
		err = fmt.Errorf("schema: AsMarketMenuUserSortSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ammuss *AsMarketMenuUserSortSelect) Float64X(ctx context.Context) float64 {
	v, err := ammuss.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (ammuss *AsMarketMenuUserSortSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(ammuss.fields) > 1 {
		return nil, errors.New("schema: AsMarketMenuUserSortSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := ammuss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ammuss *AsMarketMenuUserSortSelect) BoolsX(ctx context.Context) []bool {
	v, err := ammuss.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (ammuss *AsMarketMenuUserSortSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ammuss.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketmenuusersort.Label}
	default:
		err = fmt.Errorf("schema: AsMarketMenuUserSortSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ammuss *AsMarketMenuUserSortSelect) BoolX(ctx context.Context) bool {
	v, err := ammuss.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64s returns list of int64s from a selector. It is only allowed when selecting one field.
func (ammuss *AsMarketMenuUserSortSelect) Int64s(ctx context.Context) ([]int64, error) {
	if len(ammuss.fields) > 1 {
		return nil, errors.New("schema: AsMarketMenuUserSortSelect.Int64s is not achievable when selecting more than 1 field")
	}
	var v []int64
	if err := ammuss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Int64sX is like Int64s, but panics if an error occurs.
func (ammuss *AsMarketMenuUserSortSelect) Int64sX(ctx context.Context) []int64 {
	v, err := ammuss.Int64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int64 returns a single int64 from a selector. It is only allowed when selecting one field.
func (ammuss *AsMarketMenuUserSortSelect) Int64(ctx context.Context) (_ int64, err error) {
	var v []int64
	if v, err = ammuss.Int64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{asmarketmenuusersort.Label}
	default:
		err = fmt.Errorf("schema: AsMarketMenuUserSortSelect.Int64s returned %d results when one was expected", len(v))
	}
	return
}

// Int64X is like Int64, but panics if an error occurs.
func (ammuss *AsMarketMenuUserSortSelect) Int64X(ctx context.Context) int64 {
	v, err := ammuss.Int64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ammuss *AsMarketMenuUserSortSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ammuss.sql.Query()
	if err := ammuss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
