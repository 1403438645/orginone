// Code generated by entc, DO NOT EDIT.

package schema

import (
	"fmt"
	"orginone/common/schema/astenant"
	"orginone/common/schema/asunit"
	"orginone/common/tools/date"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// AsUnit is the model entity for the AsUnit schema.
type AsUnit struct {
	config `json:"-"`
	// ID of the ent.
	// 主键
	ID int64 `json:"id,string"`
	// UnitName holds the value of the "unit_name" field.
	// 单位名称
	UnitName string `json:"unitName"`
	// UnitNameEn holds the value of the "unit_name_en" field.
	// 单位英文名称
	UnitNameEn string `json:"unitNameEn"`
	// OrganizationForm holds the value of the "organization_form" field.
	// 组织形式;10、公司制企业11.国有独资企业 12.其他有限责任公司 13.上市股份有限公司 股票代码 14。非上市股份有限公司)20.公司制企业21.非公司制独资企业 22.其他非公司制企业) 30.企业化管理事业单位 40。其他
	OrganizationForm int64 `json:"organizationForm"`
	// UnitType holds the value of the "unit_type" field.
	// 单位分类1、主管部门 2、二级单位 3、基层单位 100、政府财政事务 200、安全管理事务 300、
	UnitType int64 `json:"unitType"`
	// ParentNodeName holds the value of the "parent_node_name" field.
	// 上级单位名称
	ParentNodeName string `json:"parentNodeName"`
	// ChargeSectionID holds the value of the "charge_section_id" field.
	// 主管部门id
	ChargeSectionID int64 `json:"chargeSectionId"`
	// ChargeSectionCode holds the value of the "charge_section_code" field.
	// 主管部门code
	ChargeSectionCode string `json:"chargeSectionCode"`
	// ChargeSectionName holds the value of the "charge_section_name" field.
	// 主管部门名称
	ChargeSectionName string `json:"chargeSectionName"`
	// LocalFinancialCode holds the value of the "local_financial_code" field.
	// 本级财政代码
	LocalFinancialCode string `json:"localFinancialCode"`
	// LocalFinancialName holds the value of the "local_financial_name" field.
	// 本级财政名称
	LocalFinancialName string `json:"localFinancialName"`
	// LocalFinancialID holds the value of the "local_financial_id" field.
	LocalFinancialID string `json:"localFinancialId"`
	// OfficeAdministrationCode holds the value of the "office_administration_code" field.
	// 本级机关事务管理局代码
	OfficeAdministrationCode string `json:"officeAdministrationCode"`
	// OfficeAdministrationName holds the value of the "office_administration_name" field.
	// 本级机关事务管理局名称
	OfficeAdministrationName string `json:"officeAdministrationName"`
	// AdministrationDivisionCode holds the value of the "administration_division_code" field.
	// 行政区划代码
	AdministrationDivisionCode string `json:"administrationDivisionCode"`
	// AdministrationDivisionName holds the value of the "administration_division_name" field.
	// 行政区划名称
	AdministrationDivisionName string `json:"administrationDivisionName"`
	// BudgetCode holds the value of the "budget_code" field.
	// 财政预算代码;编码方法;采用层次码,用数字表示,代码结构为每3位一层。一级单位3位码,二级单位6位码,……,七级单位21位码。其中,预算单位本级由该预算单位的单位层次码加上001表示。中央一级预算单位统一的3位代码表见表5。 应用范围;中央使用,地方参照。 代码	名称 101	国务院办公厅 102	国家发展和改革委员会 105	教育部 106	科学技术部 107	国家国防科技工业局 108	国家民族事务委员会 109	国家体育总局 110	国家人口和计划生育委员会 111	公安部 112	国家安全部 113	司法部 114	外交部 115	监察部 117	人力资源和社会保障部 118	民政部 119	财政部 120	住房和城乡建设部 121	国土资源部 122	铁道部 123	交通运输部 124	工业和信息化部 125	农业部 126	水利部 127	全国社会保障基金理事会
	BudgetCode int64 `json:"budgetCode"`
	// CollegeCode holds the value of the "college_code" field.
	// 高等院校代码院校代号即院校代码或学校代码,为全国各高校录取时为方便考生填报志愿而加注的由数字组成的代号串。院校代码就如同是学校的一个身份证号,方便查询学校信息,教育部为高校编排的代码有5位此代码全国通用),各省教育考试院为高校编排代码有4位此代码一般作填报高考志愿用,同一所高校在不同省份代码也不一样),由于高校办学情况每年都有变动,所以高校代码也有变化。 10001 北京大学 北京医科大学并入
	CollegeCode string `json:"collegeCode"`
	// OrganizationCode holds the value of the "organization_code" field.
	// 组织机构代码组织机构代码按照强制性国家标准GB11714《全国组织机构代码编制规则》编制,由八位数字(或大写拉丁字母)本体代码和一位数字(或大写拉丁字母)校验码组成。组织机构代码证组织机构代码证书包括正本、副本和电子副本(IC卡),代码登记部门在为组织机构赋码发证的同时,还要采集28项基础信息,并按照国家标准对这些信息进行编码,将这些信息存入代码数据库和代码证电子副本(IC卡)中,供代码应用部门使用。代码登记部门所采集的基础信息包括:机构名称、机构地址、机构类型、经济性质、行业分类、规模、法人代表等。
	OrganizationCode string `json:"organizationCode"`
	// UnitTypeCode holds the value of the "unit_type_code" field.
	// 单位类型名称代码	名称	说明 1	行政	指依宪法和有关组织法的规定设置的,行使国家行政职权,负责对国家各项行政事务进行组织、管理、监督和指挥的国家机关。这里包括行政、立法、司法、军队、党务等按公务员法管理的单位。 2	事业	为了社会公益目的,从事教育、文化、卫生、科技等活动并以非盈利性为主的社会服务组织。 3	参公	参照公务员法管理的单位。 4、 企业 企业单位 9	其他	除上述行政、事业外的其他单位。
	UnitTypeCode int64 `json:"unitTypeCode"`
	// UnitTypeName holds the value of the "unit_type_name" field.
	// 单位类型名称代码	名称	说明 1	行政	指依宪法和有关组织法的规定设置的,行使国家行政职权,负责对国家各项行政事务进行组织、管理、监督和指挥的国家机关。这里包括行政、立法、司法、军队、党务等按公务员法管理的单位。 2	事业	为了社会公益目的,从事教育、文化、卫生、科技等活动并以非盈利性为主的社会服务组织。 3	参公	参照公务员法管理的单位。 4、 企业 企业单位 9	其他	除上述行政、事业外的其他单位。
	UnitTypeName int64 `json:"unitTypeName"`
	// UnitBasicProperty holds the value of the "unit_basic_property" field.
	// 单位基本性质
	UnitBasicProperty int64 `json:"unitBasicProperty"`
	// SocialCreditCode holds the value of the "social_credit_code" field.
	// 统一社会信用代码
	SocialCreditCode string `json:"socialCreditCode"`
	// BudgetUnitName holds the value of the "budget_unit_name" field.
	// 预算单位级次名称代码	名称 1	一级 2	二级 3	三级 4	四级 5	五级 6	六级 7	七级
	BudgetUnitName string `json:"budgetUnitName"`
	// BudgetUnitCode holds the value of the "budget_unit_code" field.
	// 预算单位级次代码
	BudgetUnitCode string `json:"budgetUnitCode"`
	// BudgetManagementLevel holds the value of the "budget_management_level" field.
	// 预算管理级次1、中央级 2、省级 3、地市)级 4、县级 5、乡镇级
	BudgetManagementLevel int64 `json:"budgetManagementLevel"`
	// FirmName holds the value of the "firm_name" field.
	// 行业名称采用国家标准GB/T 4754《国民经济行业分类》。 编码方法;采用层次码,第1位英文字母表示门类;第2、3位数字表示大类;第4位数字表示中类;第5位数字表示小类。 经营性国有资产、行政事业性国有资产、金融性国有资产和资源性国有资产的主体分类是否可以按照这个标准出。
	FirmName string `json:"firmName"`
	// FirmCode holds the value of the "firm_code" field.
	// 行业代码代码	名称 A	农、林、牧、渔业 A01	农业 A011	种植业 …	…… A019	其他农业 …	…… B	采掘业 …	…… C	制造业 …	… C13	食品加工业 C131	粮食及饲料加工业 C1311	碾米业
	FirmCode string `json:"firmCode"`
	// TelephoneNumber holds the value of the "telephone_number" field.
	// 电话号码
	TelephoneNumber string `json:"telephoneNumber"`
	// PhoneNumber holds the value of the "phone_number" field.
	// 手机号码
	PhoneNumber string `json:"phoneNumber"`
	// FaxNumber holds the value of the "fax_number" field.
	// 传真号码
	FaxNumber string `json:"faxNumber"`
	// EmailAddress holds the value of the "email_address" field.
	// 电子邮件
	EmailAddress string `json:"emailAddress"`
	// Province holds the value of the "province" field.
	// 省
	Province string `json:"province"`
	// City holds the value of the "city" field.
	// 市
	City string `json:"city"`
	// County holds the value of the "county" field.
	// 区县
	County string `json:"county"`
	// StreetAddress holds the value of the "street_address" field.
	// 街道地址
	StreetAddress string `json:"streetAddress"`
	// PostalCode holds the value of the "postal_code" field.
	// 邮政编码
	PostalCode string `json:"postalCode"`
	// FundSupplyModeName holds the value of the "fund_supply_mode_name" field.
	// 经费供给方式名称;代码	名称	说明 1	全额	指由财政供应全部经费的预算单位。 2	差额	指财政按单位收支差额供应经费的预算单位。 3	自收自支	不靠财政供应经费的预算单位。 9	其他	指财政按其他方式供应经费的预算单位。
	FundSupplyModeName int64 `json:"fundSupplyModeName"`
	// FundSupplyModeCode holds the value of the "fund_supply_mode_code" field.
	// 经费供给方式代码;代码	名称	说明 1	全额	指由财政供应全部经费的预算单位。 2	差额	指财政按单位收支差额供应经费的预算单位。 3	自收自支	不靠财政供应经费的预算单位。 9	其他	指财政按其他方式供应经费的预算单位。
	FundSupplyModeCode int64 `json:"fundSupplyModeCode"`
	// AdministrationLevelName holds the value of the "administration_level_name" field.
	// 单位行政级别名称;代码	名称 1	正部省)级 2	副部省)级 3	正厅地)级 4	副厅地)级 5	正处县)级 6	副处县)级 7	正科级 8	副科级 9	股级
	AdministrationLevelName int64 `json:"administrationLevelName"`
	// AdministrationLevelType holds the value of the "administration_level_type" field.
	// 行政单位部门性质分类代码
	AdministrationLevelType int64 `json:"administrationLevelType"`
	// DepartmentCategoryName holds the value of the "department_category_name" field.
	// 事业单位部门性质分类名称
	DepartmentCategoryName int64 `json:"departmentCategoryName"`
	// BusinessDepartmentClassificationCode holds the value of the "business_department_classification_code" field.
	// 事业单位部门性质分类代码;代码	名称 1	行政单位 11	共产党机关 12	政府机关 13	人大机关 14	政协机关 15	民主党派机关 16	群众团体 2	公检法司 21	公安 22	检察 23	法院 24	司法行政 25	监狱 26	劳教 29	其他 3	驻外机构 代码	名称 1	农、林、牧、渔业 2	交通运输、仓储和邮政业 3	科学研究、技术服务和地质勘查业 4	水利、环境和公共设施管理业 5	教育 6	卫生、社会保障和社会福利业 7	文化、体育和娱乐业 9	其他
	BusinessDepartmentClassificationCode int64 `json:"businessDepartmentClassificationCode"`
	// Principal holds the value of the "principal" field.
	// 负责人
	Principal string `json:"principal"`
	// Contact holds the value of the "contact" field.
	// 联系人
	Contact string `json:"contact"`
	// CorporateRepresentative holds the value of the "corporate_representative" field.
	// 法人代表
	CorporateRepresentative string `json:"corporateRepresentative"`
	// EconomicType holds the value of the "economic_type" field.
	// 经济类型;10、国有及国有控股是否中外合资合作企业 11.是 12,否) 20、厂办大集体21 中央企厂办大集体 22、中央下放企业厂办大集体;23、地方企业厂办大集体) 30.其他城镇计提
	EconomicType int64 `json:"economicType"`
	// FinancialAffiliation holds the value of the "financial_affiliation" field.
	// 财务隶属关系行政隶属关系代码-部门标识代码)
	FinancialAffiliation string `json:"financialAffiliation"`
	// FinancialUnit holds the value of the "financial_unit" field.
	// 是否财政单位
	FinancialUnit int64 `json:"financialUnit"`
	// VerticalUnit holds the value of the "vertical_unit" field.
	// 是否垂管单位
	VerticalUnit int64 `json:"verticalUnit"`
	// VirtualUnit holds the value of the "virtual_unit" field.
	// 是否虚拟单位
	VirtualUnit int64 `json:"virtualUnit"`
	// AccountingSystem holds the value of the "accounting_system" field.
	// 单位执行会计制度:10.行政单位会计制度 20.事业单位会计制度 21.科学事业单位会计制度 22.中小学校会计制度 23.高等学校会计制度 24.医院会计制度 25.基层医疗卫生机构会计制度 26.测绘事业单位会计制度 27.地质勘查单位会计制度 28.彩票机构会计制度 30.民间非营利组织会计制度 50.其他
	AccountingSystem int64 `json:"accountingSystem"`
	// CorporateTag holds the value of the "corporate_tag" field.
	// 企业标志
	CorporateTag string `json:"corporateTag"`
	// MaintainerMark holds the value of the "maintainer_mark" field.
	// 维修商标志
	MaintainerMark string `json:"maintainerMark"`
	// SupplierMark holds the value of the "supplier_mark" field.
	// 供应商标志
	SupplierMark string `json:"supplierMark"`
	// ManufactureMark holds the value of the "manufacture_mark" field.
	// 制造商标志
	ManufactureMark string `json:"manufactureMark"`
	// AssetDisposalAgencyTag holds the value of the "asset_disposal_agency_tag" field.
	// 资产处置代理机构标志
	AssetDisposalAgencyTag string `json:"assetDisposalAgencyTag"`
	// StateAssetManagementCompany holds the value of the "state_asset_management_company" field.
	// 国有资产经营公司标志
	StateAssetManagementCompany string `json:"stateAssetManagementCompany"`
	// InstitutionNumber holds the value of the "institution_number" field.
	// 事业编制人数
	InstitutionNumber int64 `json:"institutionNumber"`
	// AuthorizedNumber holds the value of the "authorized_number" field.
	// 行政编制人数
	AuthorizedNumber int64 `json:"authorizedNumber"`
	// OfSideNumber holds the value of the "of_side_number" field.
	// 编制外人数
	OfSideNumber int64 `json:"ofSideNumber"`
	// InstitutionAuthority holds the value of the "institution_authority" field.
	// 事业编制
	InstitutionAuthority string `json:"institutionAuthority"`
	// AdministrationAuthority holds the value of the "administration_authority" field.
	// 行政编制
	AdministrationAuthority string `json:"administrationAuthority"`
	// EnableTime holds the value of the "enable_time" field.
	// 启用时间
	EnableTime date.DateTime `json:"enableTime"`
	// DisableTime holds the value of the "disable_time" field.
	// 停用时间
	DisableTime date.DateTime `json:"disableTime"`
	// SealTime holds the value of the "seal_time" field.
	// 封存时间
	SealTime date.DateTime `json:"sealTime"`
	// UnitRemark holds the value of the "unit_remark" field.
	// 备注
	UnitRemark string `json:"unitRemark"`
	// AssetDownloadStatus holds the value of the "asset_download_status" field.
	// 资产数据下载状态
	AssetDownloadStatus string `json:"assetDownloadStatus"`
	// LatitudeAndLongitude holds the value of the "latitude_and_longitude" field.
	// GPS经纬度
	LatitudeAndLongitude string `json:"latitudeAndLongitude"`
	// Sort holds the value of the "sort" field.
	// 排序
	Sort int64 `json:"sort"`
	// OrganCode holds the value of the "organ_code" field.
	// 组织单位)编码
	OrganCode string `json:"organCode"`
	// HadInnerNumber holds the value of the "had_inner_number" field.
	// 实有内设机构数量
	HadInnerNumber int64 `json:"hadInnerNumber"`
	// ApproveInnerNumber holds the value of the "approve_inner_number" field.
	// 批准内设机构数量
	ApproveInnerNumber int64 `json:"approveInnerNumber"`
	// Img holds the value of the "img" field.
	// 单位logo
	Img string `json:"img"`
	// LinkMan holds the value of the "link_man" field.
	// 单位联系人
	LinkMan string `json:"linkMan"`
	// LinkPhone holds the value of the "link_phone" field.
	// 单位管理员联系方式
	LinkPhone string `json:"linkPhone"`
	// TenantID holds the value of the "tenant_id" field.
	// 租户id
	TenantID int64 `json:"tenantId,string"`
	// UnitCode holds the value of the "unit_code" field.
	// 单位编码
	UnitCode string `json:"unitCode"`
	// AuthorityTotal holds the value of the "authority_total" field.
	// 编制合计
	AuthorityTotal int64 `json:"authorityTotal"`
	// StaffOnActiveDuty holds the value of the "staff_on_active_duty" field.
	// 在职人员
	StaffOnActiveDuty int64 `json:"staffOnActiveDuty"`
	// RetiredStaff holds the value of the "retired_staff" field.
	// 离退休人员
	RetiredStaff int64 `json:"retiredStaff"`
	// OtherStaff holds the value of the "other_staff" field.
	// 其它人员
	OtherStaff int64 `json:"otherStaff"`
	// IsVirtual holds the value of the "is_virtual" field.
	// 实/虚单位
	IsVirtual string `json:"isVirtual"`
	// UnitReform holds the value of the "unit_reform" field.
	// 事业单位改革分类10.行政类事业单位21.公益一类事业单位22.公益二类事业单位23.生产经营类事业单位90.暂未明确类别单位
	UnitReform int64 `json:"unitReform"`
	// PersonExpenditure holds the value of the "person_expenditure" field.
	// 基本支出人员经费功能分类
	PersonExpenditure int64 `json:"personExpenditure"`
	// InstitutionType holds the value of the "institution_type" field.
	// 行业机构类型83 教育91 中国共产党机关92 国家机构94 社会保障95 群众团体、社会团体和其他成员组织96 基层群众自治组织及其他组织
	InstitutionType string `json:"institutionType"`
	// DepartmentIdentification holds the value of the "department_identification" field.
	// 部门标识
	DepartmentIdentification int64 `json:"departmentIdentification"`
	// TotalHeadcount holds the value of the "total_headcount" field.
	TotalHeadcount int64 `json:"totalHeadcount"`
	// IsDeleted holds the value of the "is_deleted" field.
	// 是否被删除
	IsDeleted int64 `json:"isDeleted"`
	// Status holds the value of the "status" field.
	// 状态
	Status int64 `json:"status"`
	// CreateUser holds the value of the "create_user" field.
	// 创建用户
	CreateUser int64 `json:"createUser"`
	// UpdateUser holds the value of the "update_user" field.
	// 更新用户
	UpdateUser int64 `json:"updateUser"`
	// CreateTime holds the value of the "create_time" field.
	// 创建时间
	CreateTime date.DateTime `json:"createTime"`
	// UpdateTime holds the value of the "update_time" field.
	// 更新时间
	UpdateTime date.DateTime `json:"updateTime"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AsUnitQuery when eager-loading is set.
	Edges AsUnitEdges `json:"edges"`
}

// AsUnitEdges holds the relations/edges for other nodes in the graph.
type AsUnitEdges struct {
	// Tenantx holds the value of the tenantx edge.
	Tenantx *AsTenant `json:"tenantx"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TenantxOrErr returns the Tenantx value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AsUnitEdges) TenantxOrErr() (*AsTenant, error) {
	if e.loadedTypes[0] {
		if e.Tenantx == nil {
			// The edge tenantx was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: astenant.Label}
		}
		return e.Tenantx, nil
	}
	return nil, &NotLoadedError{edge: "tenantx"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AsUnit) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case asunit.FieldID, asunit.FieldOrganizationForm, asunit.FieldUnitType, asunit.FieldChargeSectionID, asunit.FieldBudgetCode, asunit.FieldUnitTypeCode, asunit.FieldUnitTypeName, asunit.FieldUnitBasicProperty, asunit.FieldBudgetManagementLevel, asunit.FieldFundSupplyModeName, asunit.FieldFundSupplyModeCode, asunit.FieldAdministrationLevelName, asunit.FieldAdministrationLevelType, asunit.FieldDepartmentCategoryName, asunit.FieldBusinessDepartmentClassificationCode, asunit.FieldEconomicType, asunit.FieldFinancialUnit, asunit.FieldVerticalUnit, asunit.FieldVirtualUnit, asunit.FieldAccountingSystem, asunit.FieldInstitutionNumber, asunit.FieldAuthorizedNumber, asunit.FieldOfSideNumber, asunit.FieldSort, asunit.FieldHadInnerNumber, asunit.FieldApproveInnerNumber, asunit.FieldTenantID, asunit.FieldAuthorityTotal, asunit.FieldStaffOnActiveDuty, asunit.FieldRetiredStaff, asunit.FieldOtherStaff, asunit.FieldUnitReform, asunit.FieldPersonExpenditure, asunit.FieldDepartmentIdentification, asunit.FieldTotalHeadcount, asunit.FieldIsDeleted, asunit.FieldStatus, asunit.FieldCreateUser, asunit.FieldUpdateUser:
			values[i] = new(sql.NullInt64)
		case asunit.FieldUnitName, asunit.FieldUnitNameEn, asunit.FieldParentNodeName, asunit.FieldChargeSectionCode, asunit.FieldChargeSectionName, asunit.FieldLocalFinancialCode, asunit.FieldLocalFinancialName, asunit.FieldLocalFinancialID, asunit.FieldOfficeAdministrationCode, asunit.FieldOfficeAdministrationName, asunit.FieldAdministrationDivisionCode, asunit.FieldAdministrationDivisionName, asunit.FieldCollegeCode, asunit.FieldOrganizationCode, asunit.FieldSocialCreditCode, asunit.FieldBudgetUnitName, asunit.FieldBudgetUnitCode, asunit.FieldFirmName, asunit.FieldFirmCode, asunit.FieldTelephoneNumber, asunit.FieldPhoneNumber, asunit.FieldFaxNumber, asunit.FieldEmailAddress, asunit.FieldProvince, asunit.FieldCity, asunit.FieldCounty, asunit.FieldStreetAddress, asunit.FieldPostalCode, asunit.FieldPrincipal, asunit.FieldContact, asunit.FieldCorporateRepresentative, asunit.FieldFinancialAffiliation, asunit.FieldCorporateTag, asunit.FieldMaintainerMark, asunit.FieldSupplierMark, asunit.FieldManufactureMark, asunit.FieldAssetDisposalAgencyTag, asunit.FieldStateAssetManagementCompany, asunit.FieldInstitutionAuthority, asunit.FieldAdministrationAuthority, asunit.FieldUnitRemark, asunit.FieldAssetDownloadStatus, asunit.FieldLatitudeAndLongitude, asunit.FieldOrganCode, asunit.FieldImg, asunit.FieldLinkMan, asunit.FieldLinkPhone, asunit.FieldUnitCode, asunit.FieldIsVirtual, asunit.FieldInstitutionType:
			values[i] = new(sql.NullString)
		case asunit.FieldEnableTime, asunit.FieldDisableTime, asunit.FieldSealTime, asunit.FieldCreateTime, asunit.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AsUnit", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AsUnit fields.
func (au *AsUnit) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case asunit.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			au.ID = int64(value.Int64)
		case asunit.FieldUnitName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field unit_name", values[i])
			} else if value.Valid {
				au.UnitName = value.String
			}
		case asunit.FieldUnitNameEn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field unit_name_en", values[i])
			} else if value.Valid {
				au.UnitNameEn = value.String
			}
		case asunit.FieldOrganizationForm:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field organization_form", values[i])
			} else if value.Valid {
				au.OrganizationForm = value.Int64
			}
		case asunit.FieldUnitType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field unit_type", values[i])
			} else if value.Valid {
				au.UnitType = value.Int64
			}
		case asunit.FieldParentNodeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field parent_node_name", values[i])
			} else if value.Valid {
				au.ParentNodeName = value.String
			}
		case asunit.FieldChargeSectionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field charge_section_id", values[i])
			} else if value.Valid {
				au.ChargeSectionID = value.Int64
			}
		case asunit.FieldChargeSectionCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field charge_section_code", values[i])
			} else if value.Valid {
				au.ChargeSectionCode = value.String
			}
		case asunit.FieldChargeSectionName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field charge_section_name", values[i])
			} else if value.Valid {
				au.ChargeSectionName = value.String
			}
		case asunit.FieldLocalFinancialCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field local_financial_code", values[i])
			} else if value.Valid {
				au.LocalFinancialCode = value.String
			}
		case asunit.FieldLocalFinancialName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field local_financial_name", values[i])
			} else if value.Valid {
				au.LocalFinancialName = value.String
			}
		case asunit.FieldLocalFinancialID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field local_financial_id", values[i])
			} else if value.Valid {
				au.LocalFinancialID = value.String
			}
		case asunit.FieldOfficeAdministrationCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field office_administration_code", values[i])
			} else if value.Valid {
				au.OfficeAdministrationCode = value.String
			}
		case asunit.FieldOfficeAdministrationName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field office_administration_name", values[i])
			} else if value.Valid {
				au.OfficeAdministrationName = value.String
			}
		case asunit.FieldAdministrationDivisionCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field administration_division_code", values[i])
			} else if value.Valid {
				au.AdministrationDivisionCode = value.String
			}
		case asunit.FieldAdministrationDivisionName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field administration_division_name", values[i])
			} else if value.Valid {
				au.AdministrationDivisionName = value.String
			}
		case asunit.FieldBudgetCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field budget_code", values[i])
			} else if value.Valid {
				au.BudgetCode = value.Int64
			}
		case asunit.FieldCollegeCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field college_code", values[i])
			} else if value.Valid {
				au.CollegeCode = value.String
			}
		case asunit.FieldOrganizationCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field organization_code", values[i])
			} else if value.Valid {
				au.OrganizationCode = value.String
			}
		case asunit.FieldUnitTypeCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field unit_type_code", values[i])
			} else if value.Valid {
				au.UnitTypeCode = value.Int64
			}
		case asunit.FieldUnitTypeName:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field unit_type_name", values[i])
			} else if value.Valid {
				au.UnitTypeName = value.Int64
			}
		case asunit.FieldUnitBasicProperty:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field unit_basic_property", values[i])
			} else if value.Valid {
				au.UnitBasicProperty = value.Int64
			}
		case asunit.FieldSocialCreditCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field social_credit_code", values[i])
			} else if value.Valid {
				au.SocialCreditCode = value.String
			}
		case asunit.FieldBudgetUnitName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field budget_unit_name", values[i])
			} else if value.Valid {
				au.BudgetUnitName = value.String
			}
		case asunit.FieldBudgetUnitCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field budget_unit_code", values[i])
			} else if value.Valid {
				au.BudgetUnitCode = value.String
			}
		case asunit.FieldBudgetManagementLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field budget_management_level", values[i])
			} else if value.Valid {
				au.BudgetManagementLevel = value.Int64
			}
		case asunit.FieldFirmName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field firm_name", values[i])
			} else if value.Valid {
				au.FirmName = value.String
			}
		case asunit.FieldFirmCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field firm_code", values[i])
			} else if value.Valid {
				au.FirmCode = value.String
			}
		case asunit.FieldTelephoneNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field telephone_number", values[i])
			} else if value.Valid {
				au.TelephoneNumber = value.String
			}
		case asunit.FieldPhoneNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone_number", values[i])
			} else if value.Valid {
				au.PhoneNumber = value.String
			}
		case asunit.FieldFaxNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fax_number", values[i])
			} else if value.Valid {
				au.FaxNumber = value.String
			}
		case asunit.FieldEmailAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email_address", values[i])
			} else if value.Valid {
				au.EmailAddress = value.String
			}
		case asunit.FieldProvince:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field province", values[i])
			} else if value.Valid {
				au.Province = value.String
			}
		case asunit.FieldCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field city", values[i])
			} else if value.Valid {
				au.City = value.String
			}
		case asunit.FieldCounty:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field county", values[i])
			} else if value.Valid {
				au.County = value.String
			}
		case asunit.FieldStreetAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field street_address", values[i])
			} else if value.Valid {
				au.StreetAddress = value.String
			}
		case asunit.FieldPostalCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field postal_code", values[i])
			} else if value.Valid {
				au.PostalCode = value.String
			}
		case asunit.FieldFundSupplyModeName:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field fund_supply_mode_name", values[i])
			} else if value.Valid {
				au.FundSupplyModeName = value.Int64
			}
		case asunit.FieldFundSupplyModeCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field fund_supply_mode_code", values[i])
			} else if value.Valid {
				au.FundSupplyModeCode = value.Int64
			}
		case asunit.FieldAdministrationLevelName:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field administration_level_name", values[i])
			} else if value.Valid {
				au.AdministrationLevelName = value.Int64
			}
		case asunit.FieldAdministrationLevelType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field administration_level_type", values[i])
			} else if value.Valid {
				au.AdministrationLevelType = value.Int64
			}
		case asunit.FieldDepartmentCategoryName:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field department_category_name", values[i])
			} else if value.Valid {
				au.DepartmentCategoryName = value.Int64
			}
		case asunit.FieldBusinessDepartmentClassificationCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field business_department_classification_code", values[i])
			} else if value.Valid {
				au.BusinessDepartmentClassificationCode = value.Int64
			}
		case asunit.FieldPrincipal:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field principal", values[i])
			} else if value.Valid {
				au.Principal = value.String
			}
		case asunit.FieldContact:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contact", values[i])
			} else if value.Valid {
				au.Contact = value.String
			}
		case asunit.FieldCorporateRepresentative:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field corporate_representative", values[i])
			} else if value.Valid {
				au.CorporateRepresentative = value.String
			}
		case asunit.FieldEconomicType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field economic_type", values[i])
			} else if value.Valid {
				au.EconomicType = value.Int64
			}
		case asunit.FieldFinancialAffiliation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field financial_affiliation", values[i])
			} else if value.Valid {
				au.FinancialAffiliation = value.String
			}
		case asunit.FieldFinancialUnit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field financial_unit", values[i])
			} else if value.Valid {
				au.FinancialUnit = value.Int64
			}
		case asunit.FieldVerticalUnit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field vertical_unit", values[i])
			} else if value.Valid {
				au.VerticalUnit = value.Int64
			}
		case asunit.FieldVirtualUnit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field virtual_unit", values[i])
			} else if value.Valid {
				au.VirtualUnit = value.Int64
			}
		case asunit.FieldAccountingSystem:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field accounting_system", values[i])
			} else if value.Valid {
				au.AccountingSystem = value.Int64
			}
		case asunit.FieldCorporateTag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field corporate_tag", values[i])
			} else if value.Valid {
				au.CorporateTag = value.String
			}
		case asunit.FieldMaintainerMark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field maintainer_mark", values[i])
			} else if value.Valid {
				au.MaintainerMark = value.String
			}
		case asunit.FieldSupplierMark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field supplier_mark", values[i])
			} else if value.Valid {
				au.SupplierMark = value.String
			}
		case asunit.FieldManufactureMark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field manufacture_mark", values[i])
			} else if value.Valid {
				au.ManufactureMark = value.String
			}
		case asunit.FieldAssetDisposalAgencyTag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field asset_disposal_agency_tag", values[i])
			} else if value.Valid {
				au.AssetDisposalAgencyTag = value.String
			}
		case asunit.FieldStateAssetManagementCompany:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state_asset_management_company", values[i])
			} else if value.Valid {
				au.StateAssetManagementCompany = value.String
			}
		case asunit.FieldInstitutionNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field institution_number", values[i])
			} else if value.Valid {
				au.InstitutionNumber = value.Int64
			}
		case asunit.FieldAuthorizedNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field authorized_number", values[i])
			} else if value.Valid {
				au.AuthorizedNumber = value.Int64
			}
		case asunit.FieldOfSideNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field of_side_number", values[i])
			} else if value.Valid {
				au.OfSideNumber = value.Int64
			}
		case asunit.FieldInstitutionAuthority:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field institution_authority", values[i])
			} else if value.Valid {
				au.InstitutionAuthority = value.String
			}
		case asunit.FieldAdministrationAuthority:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field administration_authority", values[i])
			} else if value.Valid {
				au.AdministrationAuthority = value.String
			}
		case asunit.FieldEnableTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field enable_time", values[i])
			} else if value.Valid {
				au.EnableTime = date.DateTime(value.Time)
			}
		case asunit.FieldDisableTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field disable_time", values[i])
			} else if value.Valid {
				au.DisableTime = date.DateTime(value.Time)
			}
		case asunit.FieldSealTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field seal_time", values[i])
			} else if value.Valid {
				au.SealTime = date.DateTime(value.Time)
			}
		case asunit.FieldUnitRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field unit_remark", values[i])
			} else if value.Valid {
				au.UnitRemark = value.String
			}
		case asunit.FieldAssetDownloadStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field asset_download_status", values[i])
			} else if value.Valid {
				au.AssetDownloadStatus = value.String
			}
		case asunit.FieldLatitudeAndLongitude:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field latitude_and_longitude", values[i])
			} else if value.Valid {
				au.LatitudeAndLongitude = value.String
			}
		case asunit.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				au.Sort = value.Int64
			}
		case asunit.FieldOrganCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field organ_code", values[i])
			} else if value.Valid {
				au.OrganCode = value.String
			}
		case asunit.FieldHadInnerNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field had_inner_number", values[i])
			} else if value.Valid {
				au.HadInnerNumber = value.Int64
			}
		case asunit.FieldApproveInnerNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field approve_inner_number", values[i])
			} else if value.Valid {
				au.ApproveInnerNumber = value.Int64
			}
		case asunit.FieldImg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field img", values[i])
			} else if value.Valid {
				au.Img = value.String
			}
		case asunit.FieldLinkMan:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field link_man", values[i])
			} else if value.Valid {
				au.LinkMan = value.String
			}
		case asunit.FieldLinkPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field link_phone", values[i])
			} else if value.Valid {
				au.LinkPhone = value.String
			}
		case asunit.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				au.TenantID = value.Int64
			}
		case asunit.FieldUnitCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field unit_code", values[i])
			} else if value.Valid {
				au.UnitCode = value.String
			}
		case asunit.FieldAuthorityTotal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field authority_total", values[i])
			} else if value.Valid {
				au.AuthorityTotal = value.Int64
			}
		case asunit.FieldStaffOnActiveDuty:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field staff_on_active_duty", values[i])
			} else if value.Valid {
				au.StaffOnActiveDuty = value.Int64
			}
		case asunit.FieldRetiredStaff:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field retired_staff", values[i])
			} else if value.Valid {
				au.RetiredStaff = value.Int64
			}
		case asunit.FieldOtherStaff:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field other_staff", values[i])
			} else if value.Valid {
				au.OtherStaff = value.Int64
			}
		case asunit.FieldIsVirtual:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field is_virtual", values[i])
			} else if value.Valid {
				au.IsVirtual = value.String
			}
		case asunit.FieldUnitReform:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field unit_reform", values[i])
			} else if value.Valid {
				au.UnitReform = value.Int64
			}
		case asunit.FieldPersonExpenditure:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field person_expenditure", values[i])
			} else if value.Valid {
				au.PersonExpenditure = value.Int64
			}
		case asunit.FieldInstitutionType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field institution_type", values[i])
			} else if value.Valid {
				au.InstitutionType = value.String
			}
		case asunit.FieldDepartmentIdentification:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field department_identification", values[i])
			} else if value.Valid {
				au.DepartmentIdentification = value.Int64
			}
		case asunit.FieldTotalHeadcount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_headcount", values[i])
			} else if value.Valid {
				au.TotalHeadcount = value.Int64
			}
		case asunit.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				au.IsDeleted = value.Int64
			}
		case asunit.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				au.Status = value.Int64
			}
		case asunit.FieldCreateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_user", values[i])
			} else if value.Valid {
				au.CreateUser = value.Int64
			}
		case asunit.FieldUpdateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_user", values[i])
			} else if value.Valid {
				au.UpdateUser = value.Int64
			}
		case asunit.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				au.CreateTime = date.DateTime(value.Time)
			}
		case asunit.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				au.UpdateTime = date.DateTime(value.Time)
			}
		}
	}
	return nil
}

// QueryTenantx queries the "tenantx" edge of the AsUnit entity.
func (au *AsUnit) QueryTenantx() *AsTenantQuery {
	return (&AsUnitClient{config: au.config}).QueryTenantx(au)
}

// Update returns a builder for updating this AsUnit.
// Note that you need to call AsUnit.Unwrap() before calling this method if this AsUnit
// was returned from a transaction, and the transaction was committed or rolled back.
func (au *AsUnit) Update() *AsUnitUpdateOne {
	return (&AsUnitClient{config: au.config}).UpdateOne(au)
}

// Unwrap unwraps the AsUnit entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (au *AsUnit) Unwrap() *AsUnit {
	tx, ok := au.config.driver.(*txDriver)
	if !ok {
		panic("schema: AsUnit is not a transactional entity")
	}
	au.config.driver = tx.drv
	return au
}

// String implements the fmt.Stringer.
func (au *AsUnit) String() string {
	var builder strings.Builder
	builder.WriteString("AsUnit(")
	builder.WriteString(fmt.Sprintf("id=%v", au.ID))
	builder.WriteString(", unit_name=")
	builder.WriteString(au.UnitName)
	builder.WriteString(", unit_name_en=")
	builder.WriteString(au.UnitNameEn)
	builder.WriteString(", organization_form=")
	builder.WriteString(fmt.Sprintf("%v", au.OrganizationForm))
	builder.WriteString(", unit_type=")
	builder.WriteString(fmt.Sprintf("%v", au.UnitType))
	builder.WriteString(", parent_node_name=")
	builder.WriteString(au.ParentNodeName)
	builder.WriteString(", charge_section_id=")
	builder.WriteString(fmt.Sprintf("%v", au.ChargeSectionID))
	builder.WriteString(", charge_section_code=")
	builder.WriteString(au.ChargeSectionCode)
	builder.WriteString(", charge_section_name=")
	builder.WriteString(au.ChargeSectionName)
	builder.WriteString(", local_financial_code=")
	builder.WriteString(au.LocalFinancialCode)
	builder.WriteString(", local_financial_name=")
	builder.WriteString(au.LocalFinancialName)
	builder.WriteString(", local_financial_id=")
	builder.WriteString(au.LocalFinancialID)
	builder.WriteString(", office_administration_code=")
	builder.WriteString(au.OfficeAdministrationCode)
	builder.WriteString(", office_administration_name=")
	builder.WriteString(au.OfficeAdministrationName)
	builder.WriteString(", administration_division_code=")
	builder.WriteString(au.AdministrationDivisionCode)
	builder.WriteString(", administration_division_name=")
	builder.WriteString(au.AdministrationDivisionName)
	builder.WriteString(", budget_code=")
	builder.WriteString(fmt.Sprintf("%v", au.BudgetCode))
	builder.WriteString(", college_code=")
	builder.WriteString(au.CollegeCode)
	builder.WriteString(", organization_code=")
	builder.WriteString(au.OrganizationCode)
	builder.WriteString(", unit_type_code=")
	builder.WriteString(fmt.Sprintf("%v", au.UnitTypeCode))
	builder.WriteString(", unit_type_name=")
	builder.WriteString(fmt.Sprintf("%v", au.UnitTypeName))
	builder.WriteString(", unit_basic_property=")
	builder.WriteString(fmt.Sprintf("%v", au.UnitBasicProperty))
	builder.WriteString(", social_credit_code=")
	builder.WriteString(au.SocialCreditCode)
	builder.WriteString(", budget_unit_name=")
	builder.WriteString(au.BudgetUnitName)
	builder.WriteString(", budget_unit_code=")
	builder.WriteString(au.BudgetUnitCode)
	builder.WriteString(", budget_management_level=")
	builder.WriteString(fmt.Sprintf("%v", au.BudgetManagementLevel))
	builder.WriteString(", firm_name=")
	builder.WriteString(au.FirmName)
	builder.WriteString(", firm_code=")
	builder.WriteString(au.FirmCode)
	builder.WriteString(", telephone_number=")
	builder.WriteString(au.TelephoneNumber)
	builder.WriteString(", phone_number=")
	builder.WriteString(au.PhoneNumber)
	builder.WriteString(", fax_number=")
	builder.WriteString(au.FaxNumber)
	builder.WriteString(", email_address=")
	builder.WriteString(au.EmailAddress)
	builder.WriteString(", province=")
	builder.WriteString(au.Province)
	builder.WriteString(", city=")
	builder.WriteString(au.City)
	builder.WriteString(", county=")
	builder.WriteString(au.County)
	builder.WriteString(", street_address=")
	builder.WriteString(au.StreetAddress)
	builder.WriteString(", postal_code=")
	builder.WriteString(au.PostalCode)
	builder.WriteString(", fund_supply_mode_name=")
	builder.WriteString(fmt.Sprintf("%v", au.FundSupplyModeName))
	builder.WriteString(", fund_supply_mode_code=")
	builder.WriteString(fmt.Sprintf("%v", au.FundSupplyModeCode))
	builder.WriteString(", administration_level_name=")
	builder.WriteString(fmt.Sprintf("%v", au.AdministrationLevelName))
	builder.WriteString(", administration_level_type=")
	builder.WriteString(fmt.Sprintf("%v", au.AdministrationLevelType))
	builder.WriteString(", department_category_name=")
	builder.WriteString(fmt.Sprintf("%v", au.DepartmentCategoryName))
	builder.WriteString(", business_department_classification_code=")
	builder.WriteString(fmt.Sprintf("%v", au.BusinessDepartmentClassificationCode))
	builder.WriteString(", principal=")
	builder.WriteString(au.Principal)
	builder.WriteString(", contact=")
	builder.WriteString(au.Contact)
	builder.WriteString(", corporate_representative=")
	builder.WriteString(au.CorporateRepresentative)
	builder.WriteString(", economic_type=")
	builder.WriteString(fmt.Sprintf("%v", au.EconomicType))
	builder.WriteString(", financial_affiliation=")
	builder.WriteString(au.FinancialAffiliation)
	builder.WriteString(", financial_unit=")
	builder.WriteString(fmt.Sprintf("%v", au.FinancialUnit))
	builder.WriteString(", vertical_unit=")
	builder.WriteString(fmt.Sprintf("%v", au.VerticalUnit))
	builder.WriteString(", virtual_unit=")
	builder.WriteString(fmt.Sprintf("%v", au.VirtualUnit))
	builder.WriteString(", accounting_system=")
	builder.WriteString(fmt.Sprintf("%v", au.AccountingSystem))
	builder.WriteString(", corporate_tag=")
	builder.WriteString(au.CorporateTag)
	builder.WriteString(", maintainer_mark=")
	builder.WriteString(au.MaintainerMark)
	builder.WriteString(", supplier_mark=")
	builder.WriteString(au.SupplierMark)
	builder.WriteString(", manufacture_mark=")
	builder.WriteString(au.ManufactureMark)
	builder.WriteString(", asset_disposal_agency_tag=")
	builder.WriteString(au.AssetDisposalAgencyTag)
	builder.WriteString(", state_asset_management_company=")
	builder.WriteString(au.StateAssetManagementCompany)
	builder.WriteString(", institution_number=")
	builder.WriteString(fmt.Sprintf("%v", au.InstitutionNumber))
	builder.WriteString(", authorized_number=")
	builder.WriteString(fmt.Sprintf("%v", au.AuthorizedNumber))
	builder.WriteString(", of_side_number=")
	builder.WriteString(fmt.Sprintf("%v", au.OfSideNumber))
	builder.WriteString(", institution_authority=")
	builder.WriteString(au.InstitutionAuthority)
	builder.WriteString(", administration_authority=")
	builder.WriteString(au.AdministrationAuthority)
	builder.WriteString(", enable_time=")
	builder.WriteString(fmt.Sprintf("%v", au.EnableTime))
	builder.WriteString(", disable_time=")
	builder.WriteString(fmt.Sprintf("%v", au.DisableTime))
	builder.WriteString(", seal_time=")
	builder.WriteString(fmt.Sprintf("%v", au.SealTime))
	builder.WriteString(", unit_remark=")
	builder.WriteString(au.UnitRemark)
	builder.WriteString(", asset_download_status=")
	builder.WriteString(au.AssetDownloadStatus)
	builder.WriteString(", latitude_and_longitude=")
	builder.WriteString(au.LatitudeAndLongitude)
	builder.WriteString(", sort=")
	builder.WriteString(fmt.Sprintf("%v", au.Sort))
	builder.WriteString(", organ_code=")
	builder.WriteString(au.OrganCode)
	builder.WriteString(", had_inner_number=")
	builder.WriteString(fmt.Sprintf("%v", au.HadInnerNumber))
	builder.WriteString(", approve_inner_number=")
	builder.WriteString(fmt.Sprintf("%v", au.ApproveInnerNumber))
	builder.WriteString(", img=")
	builder.WriteString(au.Img)
	builder.WriteString(", link_man=")
	builder.WriteString(au.LinkMan)
	builder.WriteString(", link_phone=")
	builder.WriteString(au.LinkPhone)
	builder.WriteString(", tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", au.TenantID))
	builder.WriteString(", unit_code=")
	builder.WriteString(au.UnitCode)
	builder.WriteString(", authority_total=")
	builder.WriteString(fmt.Sprintf("%v", au.AuthorityTotal))
	builder.WriteString(", staff_on_active_duty=")
	builder.WriteString(fmt.Sprintf("%v", au.StaffOnActiveDuty))
	builder.WriteString(", retired_staff=")
	builder.WriteString(fmt.Sprintf("%v", au.RetiredStaff))
	builder.WriteString(", other_staff=")
	builder.WriteString(fmt.Sprintf("%v", au.OtherStaff))
	builder.WriteString(", is_virtual=")
	builder.WriteString(au.IsVirtual)
	builder.WriteString(", unit_reform=")
	builder.WriteString(fmt.Sprintf("%v", au.UnitReform))
	builder.WriteString(", person_expenditure=")
	builder.WriteString(fmt.Sprintf("%v", au.PersonExpenditure))
	builder.WriteString(", institution_type=")
	builder.WriteString(au.InstitutionType)
	builder.WriteString(", department_identification=")
	builder.WriteString(fmt.Sprintf("%v", au.DepartmentIdentification))
	builder.WriteString(", total_headcount=")
	builder.WriteString(fmt.Sprintf("%v", au.TotalHeadcount))
	builder.WriteString(", is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", au.IsDeleted))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", au.Status))
	builder.WriteString(", create_user=")
	builder.WriteString(fmt.Sprintf("%v", au.CreateUser))
	builder.WriteString(", update_user=")
	builder.WriteString(fmt.Sprintf("%v", au.UpdateUser))
	builder.WriteString(", create_time=")
	builder.WriteString(fmt.Sprintf("%v", au.CreateTime))
	builder.WriteString(", update_time=")
	builder.WriteString(fmt.Sprintf("%v", au.UpdateTime))
	builder.WriteByte(')')
	return builder.String()
}

// AsUnits is a parsable slice of AsUnit.
type AsUnits []*AsUnit

func (au AsUnits) config(cfg config) {
	for _i := range au {
		au[_i].config = cfg
	}
}
