// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/astenanticon"
	"orginone/common/schema/predicate"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsTenantIconUpdate is the builder for updating AsTenantIcon entities.
type AsTenantIconUpdate struct {
	config
	hooks    []Hook
	mutation *AsTenantIconMutation
}

// Where appends a list predicates to the AsTenantIconUpdate builder.
func (atiu *AsTenantIconUpdate) Where(ps ...predicate.AsTenantIcon) *AsTenantIconUpdate {
	atiu.mutation.Where(ps...)
	return atiu
}

// SetTenantCode sets the "tenant_code" field.
func (atiu *AsTenantIconUpdate) SetTenantCode(s string) *AsTenantIconUpdate {
	atiu.mutation.SetTenantCode(s)
	return atiu
}

// SetNillableTenantCode sets the "tenant_code" field if the given value is not nil.
func (atiu *AsTenantIconUpdate) SetNillableTenantCode(s *string) *AsTenantIconUpdate {
	if s != nil {
		atiu.SetTenantCode(*s)
	}
	return atiu
}

// ClearTenantCode clears the value of the "tenant_code" field.
func (atiu *AsTenantIconUpdate) ClearTenantCode() *AsTenantIconUpdate {
	atiu.mutation.ClearTenantCode()
	return atiu
}

// SetIcon sets the "icon" field.
func (atiu *AsTenantIconUpdate) SetIcon(s string) *AsTenantIconUpdate {
	atiu.mutation.SetIcon(s)
	return atiu
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (atiu *AsTenantIconUpdate) SetNillableIcon(s *string) *AsTenantIconUpdate {
	if s != nil {
		atiu.SetIcon(*s)
	}
	return atiu
}

// ClearIcon clears the value of the "icon" field.
func (atiu *AsTenantIconUpdate) ClearIcon() *AsTenantIconUpdate {
	atiu.mutation.ClearIcon()
	return atiu
}

// SetIsDeleted sets the "is_deleted" field.
func (atiu *AsTenantIconUpdate) SetIsDeleted(i int64) *AsTenantIconUpdate {
	atiu.mutation.ResetIsDeleted()
	atiu.mutation.SetIsDeleted(i)
	return atiu
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (atiu *AsTenantIconUpdate) SetNillableIsDeleted(i *int64) *AsTenantIconUpdate {
	if i != nil {
		atiu.SetIsDeleted(*i)
	}
	return atiu
}

// AddIsDeleted adds i to the "is_deleted" field.
func (atiu *AsTenantIconUpdate) AddIsDeleted(i int64) *AsTenantIconUpdate {
	atiu.mutation.AddIsDeleted(i)
	return atiu
}

// SetStatus sets the "status" field.
func (atiu *AsTenantIconUpdate) SetStatus(i int64) *AsTenantIconUpdate {
	atiu.mutation.ResetStatus()
	atiu.mutation.SetStatus(i)
	return atiu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (atiu *AsTenantIconUpdate) SetNillableStatus(i *int64) *AsTenantIconUpdate {
	if i != nil {
		atiu.SetStatus(*i)
	}
	return atiu
}

// AddStatus adds i to the "status" field.
func (atiu *AsTenantIconUpdate) AddStatus(i int64) *AsTenantIconUpdate {
	atiu.mutation.AddStatus(i)
	return atiu
}

// ClearStatus clears the value of the "status" field.
func (atiu *AsTenantIconUpdate) ClearStatus() *AsTenantIconUpdate {
	atiu.mutation.ClearStatus()
	return atiu
}

// SetCreateUser sets the "create_user" field.
func (atiu *AsTenantIconUpdate) SetCreateUser(i int64) *AsTenantIconUpdate {
	atiu.mutation.ResetCreateUser()
	atiu.mutation.SetCreateUser(i)
	return atiu
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (atiu *AsTenantIconUpdate) SetNillableCreateUser(i *int64) *AsTenantIconUpdate {
	if i != nil {
		atiu.SetCreateUser(*i)
	}
	return atiu
}

// AddCreateUser adds i to the "create_user" field.
func (atiu *AsTenantIconUpdate) AddCreateUser(i int64) *AsTenantIconUpdate {
	atiu.mutation.AddCreateUser(i)
	return atiu
}

// ClearCreateUser clears the value of the "create_user" field.
func (atiu *AsTenantIconUpdate) ClearCreateUser() *AsTenantIconUpdate {
	atiu.mutation.ClearCreateUser()
	return atiu
}

// SetUpdateUser sets the "update_user" field.
func (atiu *AsTenantIconUpdate) SetUpdateUser(i int64) *AsTenantIconUpdate {
	atiu.mutation.ResetUpdateUser()
	atiu.mutation.SetUpdateUser(i)
	return atiu
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (atiu *AsTenantIconUpdate) SetNillableUpdateUser(i *int64) *AsTenantIconUpdate {
	if i != nil {
		atiu.SetUpdateUser(*i)
	}
	return atiu
}

// AddUpdateUser adds i to the "update_user" field.
func (atiu *AsTenantIconUpdate) AddUpdateUser(i int64) *AsTenantIconUpdate {
	atiu.mutation.AddUpdateUser(i)
	return atiu
}

// ClearUpdateUser clears the value of the "update_user" field.
func (atiu *AsTenantIconUpdate) ClearUpdateUser() *AsTenantIconUpdate {
	atiu.mutation.ClearUpdateUser()
	return atiu
}

// SetUpdateTime sets the "update_time" field.
func (atiu *AsTenantIconUpdate) SetUpdateTime(dt date.DateTime) *AsTenantIconUpdate {
	atiu.mutation.SetUpdateTime(dt)
	return atiu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (atiu *AsTenantIconUpdate) ClearUpdateTime() *AsTenantIconUpdate {
	atiu.mutation.ClearUpdateTime()
	return atiu
}

// Mutation returns the AsTenantIconMutation object of the builder.
func (atiu *AsTenantIconUpdate) Mutation() *AsTenantIconMutation {
	return atiu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (atiu *AsTenantIconUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	atiu.defaults()
	if len(atiu.hooks) == 0 {
		affected, err = atiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsTenantIconMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			atiu.mutation = mutation
			affected, err = atiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(atiu.hooks) - 1; i >= 0; i-- {
			if atiu.hooks[i] == nil {
				return 0, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = atiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, atiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (atiu *AsTenantIconUpdate) SaveX(ctx context.Context) int {
	affected, err := atiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (atiu *AsTenantIconUpdate) Exec(ctx context.Context) error {
	_, err := atiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atiu *AsTenantIconUpdate) ExecX(ctx context.Context) {
	if err := atiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atiu *AsTenantIconUpdate) defaults() {
	if _, ok := atiu.mutation.UpdateTime(); !ok && !atiu.mutation.UpdateTimeCleared() {
		v := astenanticon.UpdateDefaultUpdateTime()
		atiu.mutation.SetUpdateTime(v)
	}
}

func (atiu *AsTenantIconUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   astenanticon.Table,
			Columns: astenanticon.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: astenanticon.FieldID,
			},
		},
	}
	if ps := atiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atiu.mutation.TenantCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: astenanticon.FieldTenantCode,
		})
	}
	if atiu.mutation.TenantCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: astenanticon.FieldTenantCode,
		})
	}
	if value, ok := atiu.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: astenanticon.FieldIcon,
		})
	}
	if atiu.mutation.IconCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: astenanticon.FieldIcon,
		})
	}
	if value, ok := atiu.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenanticon.FieldIsDeleted,
		})
	}
	if value, ok := atiu.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenanticon.FieldIsDeleted,
		})
	}
	if value, ok := atiu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenanticon.FieldStatus,
		})
	}
	if value, ok := atiu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenanticon.FieldStatus,
		})
	}
	if atiu.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: astenanticon.FieldStatus,
		})
	}
	if value, ok := atiu.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenanticon.FieldCreateUser,
		})
	}
	if value, ok := atiu.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenanticon.FieldCreateUser,
		})
	}
	if atiu.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: astenanticon.FieldCreateUser,
		})
	}
	if value, ok := atiu.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenanticon.FieldUpdateUser,
		})
	}
	if value, ok := atiu.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenanticon.FieldUpdateUser,
		})
	}
	if atiu.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: astenanticon.FieldUpdateUser,
		})
	}
	if atiu.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: astenanticon.FieldCreateTime,
		})
	}
	if value, ok := atiu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: astenanticon.FieldUpdateTime,
		})
	}
	if atiu.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: astenanticon.FieldUpdateTime,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, atiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{astenanticon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AsTenantIconUpdateOne is the builder for updating a single AsTenantIcon entity.
type AsTenantIconUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AsTenantIconMutation
}

// SetTenantCode sets the "tenant_code" field.
func (atiuo *AsTenantIconUpdateOne) SetTenantCode(s string) *AsTenantIconUpdateOne {
	atiuo.mutation.SetTenantCode(s)
	return atiuo
}

// SetNillableTenantCode sets the "tenant_code" field if the given value is not nil.
func (atiuo *AsTenantIconUpdateOne) SetNillableTenantCode(s *string) *AsTenantIconUpdateOne {
	if s != nil {
		atiuo.SetTenantCode(*s)
	}
	return atiuo
}

// ClearTenantCode clears the value of the "tenant_code" field.
func (atiuo *AsTenantIconUpdateOne) ClearTenantCode() *AsTenantIconUpdateOne {
	atiuo.mutation.ClearTenantCode()
	return atiuo
}

// SetIcon sets the "icon" field.
func (atiuo *AsTenantIconUpdateOne) SetIcon(s string) *AsTenantIconUpdateOne {
	atiuo.mutation.SetIcon(s)
	return atiuo
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (atiuo *AsTenantIconUpdateOne) SetNillableIcon(s *string) *AsTenantIconUpdateOne {
	if s != nil {
		atiuo.SetIcon(*s)
	}
	return atiuo
}

// ClearIcon clears the value of the "icon" field.
func (atiuo *AsTenantIconUpdateOne) ClearIcon() *AsTenantIconUpdateOne {
	atiuo.mutation.ClearIcon()
	return atiuo
}

// SetIsDeleted sets the "is_deleted" field.
func (atiuo *AsTenantIconUpdateOne) SetIsDeleted(i int64) *AsTenantIconUpdateOne {
	atiuo.mutation.ResetIsDeleted()
	atiuo.mutation.SetIsDeleted(i)
	return atiuo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (atiuo *AsTenantIconUpdateOne) SetNillableIsDeleted(i *int64) *AsTenantIconUpdateOne {
	if i != nil {
		atiuo.SetIsDeleted(*i)
	}
	return atiuo
}

// AddIsDeleted adds i to the "is_deleted" field.
func (atiuo *AsTenantIconUpdateOne) AddIsDeleted(i int64) *AsTenantIconUpdateOne {
	atiuo.mutation.AddIsDeleted(i)
	return atiuo
}

// SetStatus sets the "status" field.
func (atiuo *AsTenantIconUpdateOne) SetStatus(i int64) *AsTenantIconUpdateOne {
	atiuo.mutation.ResetStatus()
	atiuo.mutation.SetStatus(i)
	return atiuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (atiuo *AsTenantIconUpdateOne) SetNillableStatus(i *int64) *AsTenantIconUpdateOne {
	if i != nil {
		atiuo.SetStatus(*i)
	}
	return atiuo
}

// AddStatus adds i to the "status" field.
func (atiuo *AsTenantIconUpdateOne) AddStatus(i int64) *AsTenantIconUpdateOne {
	atiuo.mutation.AddStatus(i)
	return atiuo
}

// ClearStatus clears the value of the "status" field.
func (atiuo *AsTenantIconUpdateOne) ClearStatus() *AsTenantIconUpdateOne {
	atiuo.mutation.ClearStatus()
	return atiuo
}

// SetCreateUser sets the "create_user" field.
func (atiuo *AsTenantIconUpdateOne) SetCreateUser(i int64) *AsTenantIconUpdateOne {
	atiuo.mutation.ResetCreateUser()
	atiuo.mutation.SetCreateUser(i)
	return atiuo
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (atiuo *AsTenantIconUpdateOne) SetNillableCreateUser(i *int64) *AsTenantIconUpdateOne {
	if i != nil {
		atiuo.SetCreateUser(*i)
	}
	return atiuo
}

// AddCreateUser adds i to the "create_user" field.
func (atiuo *AsTenantIconUpdateOne) AddCreateUser(i int64) *AsTenantIconUpdateOne {
	atiuo.mutation.AddCreateUser(i)
	return atiuo
}

// ClearCreateUser clears the value of the "create_user" field.
func (atiuo *AsTenantIconUpdateOne) ClearCreateUser() *AsTenantIconUpdateOne {
	atiuo.mutation.ClearCreateUser()
	return atiuo
}

// SetUpdateUser sets the "update_user" field.
func (atiuo *AsTenantIconUpdateOne) SetUpdateUser(i int64) *AsTenantIconUpdateOne {
	atiuo.mutation.ResetUpdateUser()
	atiuo.mutation.SetUpdateUser(i)
	return atiuo
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (atiuo *AsTenantIconUpdateOne) SetNillableUpdateUser(i *int64) *AsTenantIconUpdateOne {
	if i != nil {
		atiuo.SetUpdateUser(*i)
	}
	return atiuo
}

// AddUpdateUser adds i to the "update_user" field.
func (atiuo *AsTenantIconUpdateOne) AddUpdateUser(i int64) *AsTenantIconUpdateOne {
	atiuo.mutation.AddUpdateUser(i)
	return atiuo
}

// ClearUpdateUser clears the value of the "update_user" field.
func (atiuo *AsTenantIconUpdateOne) ClearUpdateUser() *AsTenantIconUpdateOne {
	atiuo.mutation.ClearUpdateUser()
	return atiuo
}

// SetUpdateTime sets the "update_time" field.
func (atiuo *AsTenantIconUpdateOne) SetUpdateTime(dt date.DateTime) *AsTenantIconUpdateOne {
	atiuo.mutation.SetUpdateTime(dt)
	return atiuo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (atiuo *AsTenantIconUpdateOne) ClearUpdateTime() *AsTenantIconUpdateOne {
	atiuo.mutation.ClearUpdateTime()
	return atiuo
}

// Mutation returns the AsTenantIconMutation object of the builder.
func (atiuo *AsTenantIconUpdateOne) Mutation() *AsTenantIconMutation {
	return atiuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (atiuo *AsTenantIconUpdateOne) Select(field string, fields ...string) *AsTenantIconUpdateOne {
	atiuo.fields = append([]string{field}, fields...)
	return atiuo
}

// Save executes the query and returns the updated AsTenantIcon entity.
func (atiuo *AsTenantIconUpdateOne) Save(ctx context.Context) (*AsTenantIcon, error) {
	var (
		err  error
		node *AsTenantIcon
	)
	atiuo.defaults()
	if len(atiuo.hooks) == 0 {
		node, err = atiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsTenantIconMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			atiuo.mutation = mutation
			node, err = atiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(atiuo.hooks) - 1; i >= 0; i-- {
			if atiuo.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = atiuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, atiuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (atiuo *AsTenantIconUpdateOne) SaveX(ctx context.Context) *AsTenantIcon {
	node, err := atiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (atiuo *AsTenantIconUpdateOne) Exec(ctx context.Context) error {
	_, err := atiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atiuo *AsTenantIconUpdateOne) ExecX(ctx context.Context) {
	if err := atiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atiuo *AsTenantIconUpdateOne) defaults() {
	if _, ok := atiuo.mutation.UpdateTime(); !ok && !atiuo.mutation.UpdateTimeCleared() {
		v := astenanticon.UpdateDefaultUpdateTime()
		atiuo.mutation.SetUpdateTime(v)
	}
}

func (atiuo *AsTenantIconUpdateOne) sqlSave(ctx context.Context) (_node *AsTenantIcon, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   astenanticon.Table,
			Columns: astenanticon.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: astenanticon.FieldID,
			},
		},
	}
	id, ok := atiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`schema: missing "AsTenantIcon.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := atiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, astenanticon.FieldID)
		for _, f := range fields {
			if !astenanticon.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("schema: invalid field %q for query", f)}
			}
			if f != astenanticon.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := atiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atiuo.mutation.TenantCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: astenanticon.FieldTenantCode,
		})
	}
	if atiuo.mutation.TenantCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: astenanticon.FieldTenantCode,
		})
	}
	if value, ok := atiuo.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: astenanticon.FieldIcon,
		})
	}
	if atiuo.mutation.IconCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: astenanticon.FieldIcon,
		})
	}
	if value, ok := atiuo.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenanticon.FieldIsDeleted,
		})
	}
	if value, ok := atiuo.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenanticon.FieldIsDeleted,
		})
	}
	if value, ok := atiuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenanticon.FieldStatus,
		})
	}
	if value, ok := atiuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenanticon.FieldStatus,
		})
	}
	if atiuo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: astenanticon.FieldStatus,
		})
	}
	if value, ok := atiuo.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenanticon.FieldCreateUser,
		})
	}
	if value, ok := atiuo.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenanticon.FieldCreateUser,
		})
	}
	if atiuo.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: astenanticon.FieldCreateUser,
		})
	}
	if value, ok := atiuo.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenanticon.FieldUpdateUser,
		})
	}
	if value, ok := atiuo.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: astenanticon.FieldUpdateUser,
		})
	}
	if atiuo.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: astenanticon.FieldUpdateUser,
		})
	}
	if atiuo.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: astenanticon.FieldCreateTime,
		})
	}
	if value, ok := atiuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: astenanticon.FieldUpdateTime,
		})
	}
	if atiuo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: astenanticon.FieldUpdateTime,
		})
	}
	_node = &AsTenantIcon{config: atiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, atiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{astenanticon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
