// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"fmt"
	"log"

	"orginone/common/schema/migrate"

	"orginone/common/schema/asallgroup"
	"orginone/common/schema/asappgroupdistributiondata"
	"orginone/common/schema/asdict"
	"orginone/common/schema/asgrouptenantrelations"
	"orginone/common/schema/asinneragency"
	"orginone/common/schema/asinputdata"
	"orginone/common/schema/asjob"
	"orginone/common/schema/aslayer"
	"orginone/common/schema/asmarketapp"
	"orginone/common/schema/asmarketappalert"
	"orginone/common/schema/asmarketappcomponent"
	"orginone/common/schema/asmarketappcomponenttemplate"
	"orginone/common/schema/asmarketappgroupdistribution"
	"orginone/common/schema/asmarketappgroupdistributionrelation"
	"orginone/common/schema/asmarketappkeysecret"
	"orginone/common/schema/asmarketappnotice"
	"orginone/common/schema/asmarketapppurchase"
	"orginone/common/schema/asmarketapprole"
	"orginone/common/schema/asmarketappusertemplate"
	"orginone/common/schema/asmarketmenu"
	"orginone/common/schema/asmarketmenuusersort"
	"orginone/common/schema/asmarketroledistribution"
	"orginone/common/schema/asmarketrolemenu"
	"orginone/common/schema/asmarketusedapp"
	"orginone/common/schema/asmenu"
	"orginone/common/schema/asperson"
	"orginone/common/schema/aspersonsingle"
	"orginone/common/schema/asproperties"
	"orginone/common/schema/aspropertiesdistribution"
	"orginone/common/schema/asredeploydata"
	"orginone/common/schema/asrole"
	"orginone/common/schema/astenant"
	"orginone/common/schema/astenantattr"
	"orginone/common/schema/astenantattrrole"
	"orginone/common/schema/astenanticon"
	"orginone/common/schema/asunit"
	"orginone/common/schema/asuser"
	"orginone/common/schema/asworkingdata"
	"orginone/common/schema/baseinfoadministrativeareaall"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AsAllGroup is the client for interacting with the AsAllGroup builders.
	AsAllGroup *AsAllGroupClient
	// AsAppGroupDistributionData is the client for interacting with the AsAppGroupDistributionData builders.
	AsAppGroupDistributionData *AsAppGroupDistributionDataClient
	// AsDict is the client for interacting with the AsDict builders.
	AsDict *AsDictClient
	// AsGroupTenantRelations is the client for interacting with the AsGroupTenantRelations builders.
	AsGroupTenantRelations *AsGroupTenantRelationsClient
	// AsInnerAgency is the client for interacting with the AsInnerAgency builders.
	AsInnerAgency *AsInnerAgencyClient
	// AsInputData is the client for interacting with the AsInputData builders.
	AsInputData *AsInputDataClient
	// AsJob is the client for interacting with the AsJob builders.
	AsJob *AsJobClient
	// AsLayer is the client for interacting with the AsLayer builders.
	AsLayer *AsLayerClient
	// AsMarketApp is the client for interacting with the AsMarketApp builders.
	AsMarketApp *AsMarketAppClient
	// AsMarketAppAlert is the client for interacting with the AsMarketAppAlert builders.
	AsMarketAppAlert *AsMarketAppAlertClient
	// AsMarketAppComponent is the client for interacting with the AsMarketAppComponent builders.
	AsMarketAppComponent *AsMarketAppComponentClient
	// AsMarketAppComponentTemplate is the client for interacting with the AsMarketAppComponentTemplate builders.
	AsMarketAppComponentTemplate *AsMarketAppComponentTemplateClient
	// AsMarketAppGroupDistribution is the client for interacting with the AsMarketAppGroupDistribution builders.
	AsMarketAppGroupDistribution *AsMarketAppGroupDistributionClient
	// AsMarketAppGroupDistributionRelation is the client for interacting with the AsMarketAppGroupDistributionRelation builders.
	AsMarketAppGroupDistributionRelation *AsMarketAppGroupDistributionRelationClient
	// AsMarketAppKeySecret is the client for interacting with the AsMarketAppKeySecret builders.
	AsMarketAppKeySecret *AsMarketAppKeySecretClient
	// AsMarketAppNotice is the client for interacting with the AsMarketAppNotice builders.
	AsMarketAppNotice *AsMarketAppNoticeClient
	// AsMarketAppPurchase is the client for interacting with the AsMarketAppPurchase builders.
	AsMarketAppPurchase *AsMarketAppPurchaseClient
	// AsMarketAppRole is the client for interacting with the AsMarketAppRole builders.
	AsMarketAppRole *AsMarketAppRoleClient
	// AsMarketAppUserTemplate is the client for interacting with the AsMarketAppUserTemplate builders.
	AsMarketAppUserTemplate *AsMarketAppUserTemplateClient
	// AsMarketMenu is the client for interacting with the AsMarketMenu builders.
	AsMarketMenu *AsMarketMenuClient
	// AsMarketMenuUserSort is the client for interacting with the AsMarketMenuUserSort builders.
	AsMarketMenuUserSort *AsMarketMenuUserSortClient
	// AsMarketRoleDistribution is the client for interacting with the AsMarketRoleDistribution builders.
	AsMarketRoleDistribution *AsMarketRoleDistributionClient
	// AsMarketRoleMenu is the client for interacting with the AsMarketRoleMenu builders.
	AsMarketRoleMenu *AsMarketRoleMenuClient
	// AsMarketUsedApp is the client for interacting with the AsMarketUsedApp builders.
	AsMarketUsedApp *AsMarketUsedAppClient
	// AsMenu is the client for interacting with the AsMenu builders.
	AsMenu *AsMenuClient
	// AsPerson is the client for interacting with the AsPerson builders.
	AsPerson *AsPersonClient
	// AsPersonSingle is the client for interacting with the AsPersonSingle builders.
	AsPersonSingle *AsPersonSingleClient
	// AsProperties is the client for interacting with the AsProperties builders.
	AsProperties *AsPropertiesClient
	// AsPropertiesDistribution is the client for interacting with the AsPropertiesDistribution builders.
	AsPropertiesDistribution *AsPropertiesDistributionClient
	// AsRedeployData is the client for interacting with the AsRedeployData builders.
	AsRedeployData *AsRedeployDataClient
	// AsRole is the client for interacting with the AsRole builders.
	AsRole *AsRoleClient
	// AsTenant is the client for interacting with the AsTenant builders.
	AsTenant *AsTenantClient
	// AsTenantAttr is the client for interacting with the AsTenantAttr builders.
	AsTenantAttr *AsTenantAttrClient
	// AsTenantAttrRole is the client for interacting with the AsTenantAttrRole builders.
	AsTenantAttrRole *AsTenantAttrRoleClient
	// AsTenantIcon is the client for interacting with the AsTenantIcon builders.
	AsTenantIcon *AsTenantIconClient
	// AsUnit is the client for interacting with the AsUnit builders.
	AsUnit *AsUnitClient
	// AsUser is the client for interacting with the AsUser builders.
	AsUser *AsUserClient
	// AsWorkingData is the client for interacting with the AsWorkingData builders.
	AsWorkingData *AsWorkingDataClient
	// Baseinfoadministrativeareaall is the client for interacting with the Baseinfoadministrativeareaall builders.
	Baseinfoadministrativeareaall *BaseinfoadministrativeareaallClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AsAllGroup = NewAsAllGroupClient(c.config)
	c.AsAppGroupDistributionData = NewAsAppGroupDistributionDataClient(c.config)
	c.AsDict = NewAsDictClient(c.config)
	c.AsGroupTenantRelations = NewAsGroupTenantRelationsClient(c.config)
	c.AsInnerAgency = NewAsInnerAgencyClient(c.config)
	c.AsInputData = NewAsInputDataClient(c.config)
	c.AsJob = NewAsJobClient(c.config)
	c.AsLayer = NewAsLayerClient(c.config)
	c.AsMarketApp = NewAsMarketAppClient(c.config)
	c.AsMarketAppAlert = NewAsMarketAppAlertClient(c.config)
	c.AsMarketAppComponent = NewAsMarketAppComponentClient(c.config)
	c.AsMarketAppComponentTemplate = NewAsMarketAppComponentTemplateClient(c.config)
	c.AsMarketAppGroupDistribution = NewAsMarketAppGroupDistributionClient(c.config)
	c.AsMarketAppGroupDistributionRelation = NewAsMarketAppGroupDistributionRelationClient(c.config)
	c.AsMarketAppKeySecret = NewAsMarketAppKeySecretClient(c.config)
	c.AsMarketAppNotice = NewAsMarketAppNoticeClient(c.config)
	c.AsMarketAppPurchase = NewAsMarketAppPurchaseClient(c.config)
	c.AsMarketAppRole = NewAsMarketAppRoleClient(c.config)
	c.AsMarketAppUserTemplate = NewAsMarketAppUserTemplateClient(c.config)
	c.AsMarketMenu = NewAsMarketMenuClient(c.config)
	c.AsMarketMenuUserSort = NewAsMarketMenuUserSortClient(c.config)
	c.AsMarketRoleDistribution = NewAsMarketRoleDistributionClient(c.config)
	c.AsMarketRoleMenu = NewAsMarketRoleMenuClient(c.config)
	c.AsMarketUsedApp = NewAsMarketUsedAppClient(c.config)
	c.AsMenu = NewAsMenuClient(c.config)
	c.AsPerson = NewAsPersonClient(c.config)
	c.AsPersonSingle = NewAsPersonSingleClient(c.config)
	c.AsProperties = NewAsPropertiesClient(c.config)
	c.AsPropertiesDistribution = NewAsPropertiesDistributionClient(c.config)
	c.AsRedeployData = NewAsRedeployDataClient(c.config)
	c.AsRole = NewAsRoleClient(c.config)
	c.AsTenant = NewAsTenantClient(c.config)
	c.AsTenantAttr = NewAsTenantAttrClient(c.config)
	c.AsTenantAttrRole = NewAsTenantAttrRoleClient(c.config)
	c.AsTenantIcon = NewAsTenantIconClient(c.config)
	c.AsUnit = NewAsUnitClient(c.config)
	c.AsUser = NewAsUserClient(c.config)
	c.AsWorkingData = NewAsWorkingDataClient(c.config)
	c.Baseinfoadministrativeareaall = NewBaseinfoadministrativeareaallClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("schema: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("schema: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                                  ctx,
		config:                               cfg,
		AsAllGroup:                           NewAsAllGroupClient(cfg),
		AsAppGroupDistributionData:           NewAsAppGroupDistributionDataClient(cfg),
		AsDict:                               NewAsDictClient(cfg),
		AsGroupTenantRelations:               NewAsGroupTenantRelationsClient(cfg),
		AsInnerAgency:                        NewAsInnerAgencyClient(cfg),
		AsInputData:                          NewAsInputDataClient(cfg),
		AsJob:                                NewAsJobClient(cfg),
		AsLayer:                              NewAsLayerClient(cfg),
		AsMarketApp:                          NewAsMarketAppClient(cfg),
		AsMarketAppAlert:                     NewAsMarketAppAlertClient(cfg),
		AsMarketAppComponent:                 NewAsMarketAppComponentClient(cfg),
		AsMarketAppComponentTemplate:         NewAsMarketAppComponentTemplateClient(cfg),
		AsMarketAppGroupDistribution:         NewAsMarketAppGroupDistributionClient(cfg),
		AsMarketAppGroupDistributionRelation: NewAsMarketAppGroupDistributionRelationClient(cfg),
		AsMarketAppKeySecret:                 NewAsMarketAppKeySecretClient(cfg),
		AsMarketAppNotice:                    NewAsMarketAppNoticeClient(cfg),
		AsMarketAppPurchase:                  NewAsMarketAppPurchaseClient(cfg),
		AsMarketAppRole:                      NewAsMarketAppRoleClient(cfg),
		AsMarketAppUserTemplate:              NewAsMarketAppUserTemplateClient(cfg),
		AsMarketMenu:                         NewAsMarketMenuClient(cfg),
		AsMarketMenuUserSort:                 NewAsMarketMenuUserSortClient(cfg),
		AsMarketRoleDistribution:             NewAsMarketRoleDistributionClient(cfg),
		AsMarketRoleMenu:                     NewAsMarketRoleMenuClient(cfg),
		AsMarketUsedApp:                      NewAsMarketUsedAppClient(cfg),
		AsMenu:                               NewAsMenuClient(cfg),
		AsPerson:                             NewAsPersonClient(cfg),
		AsPersonSingle:                       NewAsPersonSingleClient(cfg),
		AsProperties:                         NewAsPropertiesClient(cfg),
		AsPropertiesDistribution:             NewAsPropertiesDistributionClient(cfg),
		AsRedeployData:                       NewAsRedeployDataClient(cfg),
		AsRole:                               NewAsRoleClient(cfg),
		AsTenant:                             NewAsTenantClient(cfg),
		AsTenantAttr:                         NewAsTenantAttrClient(cfg),
		AsTenantAttrRole:                     NewAsTenantAttrRoleClient(cfg),
		AsTenantIcon:                         NewAsTenantIconClient(cfg),
		AsUnit:                               NewAsUnitClient(cfg),
		AsUser:                               NewAsUserClient(cfg),
		AsWorkingData:                        NewAsWorkingDataClient(cfg),
		Baseinfoadministrativeareaall:        NewBaseinfoadministrativeareaallClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                                  ctx,
		config:                               cfg,
		AsAllGroup:                           NewAsAllGroupClient(cfg),
		AsAppGroupDistributionData:           NewAsAppGroupDistributionDataClient(cfg),
		AsDict:                               NewAsDictClient(cfg),
		AsGroupTenantRelations:               NewAsGroupTenantRelationsClient(cfg),
		AsInnerAgency:                        NewAsInnerAgencyClient(cfg),
		AsInputData:                          NewAsInputDataClient(cfg),
		AsJob:                                NewAsJobClient(cfg),
		AsLayer:                              NewAsLayerClient(cfg),
		AsMarketApp:                          NewAsMarketAppClient(cfg),
		AsMarketAppAlert:                     NewAsMarketAppAlertClient(cfg),
		AsMarketAppComponent:                 NewAsMarketAppComponentClient(cfg),
		AsMarketAppComponentTemplate:         NewAsMarketAppComponentTemplateClient(cfg),
		AsMarketAppGroupDistribution:         NewAsMarketAppGroupDistributionClient(cfg),
		AsMarketAppGroupDistributionRelation: NewAsMarketAppGroupDistributionRelationClient(cfg),
		AsMarketAppKeySecret:                 NewAsMarketAppKeySecretClient(cfg),
		AsMarketAppNotice:                    NewAsMarketAppNoticeClient(cfg),
		AsMarketAppPurchase:                  NewAsMarketAppPurchaseClient(cfg),
		AsMarketAppRole:                      NewAsMarketAppRoleClient(cfg),
		AsMarketAppUserTemplate:              NewAsMarketAppUserTemplateClient(cfg),
		AsMarketMenu:                         NewAsMarketMenuClient(cfg),
		AsMarketMenuUserSort:                 NewAsMarketMenuUserSortClient(cfg),
		AsMarketRoleDistribution:             NewAsMarketRoleDistributionClient(cfg),
		AsMarketRoleMenu:                     NewAsMarketRoleMenuClient(cfg),
		AsMarketUsedApp:                      NewAsMarketUsedAppClient(cfg),
		AsMenu:                               NewAsMenuClient(cfg),
		AsPerson:                             NewAsPersonClient(cfg),
		AsPersonSingle:                       NewAsPersonSingleClient(cfg),
		AsProperties:                         NewAsPropertiesClient(cfg),
		AsPropertiesDistribution:             NewAsPropertiesDistributionClient(cfg),
		AsRedeployData:                       NewAsRedeployDataClient(cfg),
		AsRole:                               NewAsRoleClient(cfg),
		AsTenant:                             NewAsTenantClient(cfg),
		AsTenantAttr:                         NewAsTenantAttrClient(cfg),
		AsTenantAttrRole:                     NewAsTenantAttrRoleClient(cfg),
		AsTenantIcon:                         NewAsTenantIconClient(cfg),
		AsUnit:                               NewAsUnitClient(cfg),
		AsUser:                               NewAsUserClient(cfg),
		AsWorkingData:                        NewAsWorkingDataClient(cfg),
		Baseinfoadministrativeareaall:        NewBaseinfoadministrativeareaallClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AsAllGroup.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.AsAllGroup.Use(hooks...)
	c.AsAppGroupDistributionData.Use(hooks...)
	c.AsDict.Use(hooks...)
	c.AsGroupTenantRelations.Use(hooks...)
	c.AsInnerAgency.Use(hooks...)
	c.AsInputData.Use(hooks...)
	c.AsJob.Use(hooks...)
	c.AsLayer.Use(hooks...)
	c.AsMarketApp.Use(hooks...)
	c.AsMarketAppAlert.Use(hooks...)
	c.AsMarketAppComponent.Use(hooks...)
	c.AsMarketAppComponentTemplate.Use(hooks...)
	c.AsMarketAppGroupDistribution.Use(hooks...)
	c.AsMarketAppGroupDistributionRelation.Use(hooks...)
	c.AsMarketAppKeySecret.Use(hooks...)
	c.AsMarketAppNotice.Use(hooks...)
	c.AsMarketAppPurchase.Use(hooks...)
	c.AsMarketAppRole.Use(hooks...)
	c.AsMarketAppUserTemplate.Use(hooks...)
	c.AsMarketMenu.Use(hooks...)
	c.AsMarketMenuUserSort.Use(hooks...)
	c.AsMarketRoleDistribution.Use(hooks...)
	c.AsMarketRoleMenu.Use(hooks...)
	c.AsMarketUsedApp.Use(hooks...)
	c.AsMenu.Use(hooks...)
	c.AsPerson.Use(hooks...)
	c.AsPersonSingle.Use(hooks...)
	c.AsProperties.Use(hooks...)
	c.AsPropertiesDistribution.Use(hooks...)
	c.AsRedeployData.Use(hooks...)
	c.AsRole.Use(hooks...)
	c.AsTenant.Use(hooks...)
	c.AsTenantAttr.Use(hooks...)
	c.AsTenantAttrRole.Use(hooks...)
	c.AsTenantIcon.Use(hooks...)
	c.AsUnit.Use(hooks...)
	c.AsUser.Use(hooks...)
	c.AsWorkingData.Use(hooks...)
	c.Baseinfoadministrativeareaall.Use(hooks...)
}

// AsAllGroupClient is a client for the AsAllGroup schema.
type AsAllGroupClient struct {
	config
}

// NewAsAllGroupClient returns a client for the AsAllGroup from the given config.
func NewAsAllGroupClient(c config) *AsAllGroupClient {
	return &AsAllGroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `asallgroup.Hooks(f(g(h())))`.
func (c *AsAllGroupClient) Use(hooks ...Hook) {
	c.hooks.AsAllGroup = append(c.hooks.AsAllGroup, hooks...)
}

// Create returns a create builder for AsAllGroup.
func (c *AsAllGroupClient) Create() *AsAllGroupCreate {
	mutation := newAsAllGroupMutation(c.config, OpCreate)
	return &AsAllGroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AsAllGroup entities.
func (c *AsAllGroupClient) CreateBulk(builders ...*AsAllGroupCreate) *AsAllGroupCreateBulk {
	return &AsAllGroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AsAllGroup.
func (c *AsAllGroupClient) Update() *AsAllGroupUpdate {
	mutation := newAsAllGroupMutation(c.config, OpUpdate)
	return &AsAllGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AsAllGroupClient) UpdateOne(aag *AsAllGroup) *AsAllGroupUpdateOne {
	mutation := newAsAllGroupMutation(c.config, OpUpdateOne, withAsAllGroup(aag))
	return &AsAllGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AsAllGroupClient) UpdateOneID(id int64) *AsAllGroupUpdateOne {
	mutation := newAsAllGroupMutation(c.config, OpUpdateOne, withAsAllGroupID(id))
	return &AsAllGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Remove returns an update builder for AsAllGroup.
func (c *AsAllGroupClient) Remove() *AsAllGroupUpdate {
	return c.Update().SetIsDeleted(1)
}

// RemoveOne returns an update builder for the given entity.
func (c *AsAllGroupClient) RemoveOne(aag *AsAllGroup) *AsAllGroupUpdateOne {
	return c.UpdateOne(aag).SetIsDeleted(1)
}

// RemoveOneID returns an update builder for the given id.
func (c *AsAllGroupClient) RemoveOneID(id int64) *AsAllGroupUpdateOne {
	return c.UpdateOneID(id).SetIsDeleted(1)
}

// Delete returns a delete builder for AsAllGroup.
func (c *AsAllGroupClient) Delete() *AsAllGroupDelete {
	mutation := newAsAllGroupMutation(c.config, OpDelete)
	return &AsAllGroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AsAllGroupClient) DeleteOne(aag *AsAllGroup) *AsAllGroupDeleteOne {
	return c.DeleteOneID(aag.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AsAllGroupClient) DeleteOneID(id int64) *AsAllGroupDeleteOne {
	builder := c.Delete().Where(asallgroup.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AsAllGroupDeleteOne{builder}
}

// Query returns a query builder for AsAllGroup.
func (c *AsAllGroupClient) Query() *AsAllGroupQuery {
	return &AsAllGroupQuery{
		config: c.config,
	}
}

// Find returns a query builder for AsAllGroup, filter is_delete = 0.
func (c *AsAllGroupClient) Find() *AsAllGroupQuery {
	return c.Query().Where(asallgroup.IsDeleted(0))
}

// FindOne returns a AsAllGroup entity by its id., filter is_delete = 0.
func (c *AsAllGroupClient) FindOne(ctx context.Context, id int64) (*AsAllGroup, error) {
	return c.Query().Where(asallgroup.IsDeleted(0), asallgroup.ID(id)).Only(ctx)
}

// FindOneX is like FindOne, but panics if an error occurs.
func (c *AsAllGroupClient) FindOneX(ctx context.Context, id int64) *AsAllGroup {
	obj, err := c.FindOne(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Get returns a AsAllGroup entity by its id.
func (c *AsAllGroupClient) Get(ctx context.Context, id int64) (*AsAllGroup, error) {
	return c.Query().Where(asallgroup.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AsAllGroupClient) GetX(ctx context.Context, id int64) *AsAllGroup {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAllLayer queries the allLayer edge of a AsAllGroup.
func (c *AsAllGroupClient) QueryAllLayer(aag *AsAllGroup) *AsLayerQuery {
	query := &AsLayerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := aag.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asallgroup.Table, asallgroup.FieldID, id),
			sqlgraph.To(aslayer.Table, aslayer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asallgroup.AllLayerTable, asallgroup.AllLayerColumn),
		)
		fromV = sqlgraph.Neighbors(aag.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAppPurchases queries the appPurchases edge of a AsAllGroup.
func (c *AsAllGroupClient) QueryAppPurchases(aag *AsAllGroup) *AsMarketAppPurchaseQuery {
	query := &AsMarketAppPurchaseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := aag.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asallgroup.Table, asallgroup.FieldID, id),
			sqlgraph.To(asmarketapppurchase.Table, asmarketapppurchase.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asallgroup.AppPurchasesTable, asallgroup.AppPurchasesColumn),
		)
		fromV = sqlgraph.Neighbors(aag.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAllTenants queries the allTenants edge of a AsAllGroup.
func (c *AsAllGroupClient) QueryAllTenants(aag *AsAllGroup) *AsGroupTenantRelationsQuery {
	query := &AsGroupTenantRelationsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := aag.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asallgroup.Table, asallgroup.FieldID, id),
			sqlgraph.To(asgrouptenantrelations.Table, asgrouptenantrelations.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asallgroup.AllTenantsTable, asallgroup.AllTenantsColumn),
		)
		fromV = sqlgraph.Neighbors(aag.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAppGroupDistribs queries the appGroupDistribs edge of a AsAllGroup.
func (c *AsAllGroupClient) QueryAppGroupDistribs(aag *AsAllGroup) *AsMarketAppGroupDistributionQuery {
	query := &AsMarketAppGroupDistributionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := aag.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asallgroup.Table, asallgroup.FieldID, id),
			sqlgraph.To(asmarketappgroupdistribution.Table, asmarketappgroupdistribution.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asallgroup.AppGroupDistribsTable, asallgroup.AppGroupDistribsColumn),
		)
		fromV = sqlgraph.Neighbors(aag.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAppGroupDistribConfigs queries the appGroupDistribConfigs edge of a AsAllGroup.
func (c *AsAllGroupClient) QueryAppGroupDistribConfigs(aag *AsAllGroup) *AsAppGroupDistributionDataQuery {
	query := &AsAppGroupDistributionDataQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := aag.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asallgroup.Table, asallgroup.FieldID, id),
			sqlgraph.To(asappgroupdistributiondata.Table, asappgroupdistributiondata.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asallgroup.AppGroupDistribConfigsTable, asallgroup.AppGroupDistribConfigsColumn),
		)
		fromV = sqlgraph.Neighbors(aag.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAppGroupDistribsRelation queries the appGroupDistribsRelation edge of a AsAllGroup.
func (c *AsAllGroupClient) QueryAppGroupDistribsRelation(aag *AsAllGroup) *AsMarketAppGroupDistributionRelationQuery {
	query := &AsMarketAppGroupDistributionRelationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := aag.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asallgroup.Table, asallgroup.FieldID, id),
			sqlgraph.To(asmarketappgroupdistributionrelation.Table, asmarketappgroupdistributionrelation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asallgroup.AppGroupDistribsRelationTable, asallgroup.AppGroupDistribsRelationColumn),
		)
		fromV = sqlgraph.Neighbors(aag.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// FindAllLayer queries the allLayer edge of a AsAllGroup.
func (c *AsAllGroupClient) FindAllLayer(aag *AsAllGroup) *AsLayerQuery {
	return c.QueryAllLayer(aag).Where(aslayer.IsDeleted(0))
}

// FindAppPurchases queries the appPurchases edge of a AsAllGroup.
func (c *AsAllGroupClient) FindAppPurchases(aag *AsAllGroup) *AsMarketAppPurchaseQuery {
	return c.QueryAppPurchases(aag).Where(asmarketapppurchase.IsDeleted(0))
}

// FindAllTenants queries the allTenants edge of a AsAllGroup.
func (c *AsAllGroupClient) FindAllTenants(aag *AsAllGroup) *AsGroupTenantRelationsQuery {
	return c.QueryAllTenants(aag).Where(asgrouptenantrelations.IsDeleted(0))
}

// FindAppGroupDistribs queries the appGroupDistribs edge of a AsAllGroup.
func (c *AsAllGroupClient) FindAppGroupDistribs(aag *AsAllGroup) *AsMarketAppGroupDistributionQuery {
	return c.QueryAppGroupDistribs(aag).Where(asmarketappgroupdistribution.IsDeleted(0))
}

// FindAppGroupDistribConfigs queries the appGroupDistribConfigs edge of a AsAllGroup.
func (c *AsAllGroupClient) FindAppGroupDistribConfigs(aag *AsAllGroup) *AsAppGroupDistributionDataQuery {
	return c.QueryAppGroupDistribConfigs(aag).Where(asappgroupdistributiondata.IsDeleted(0))
}

// FindAppGroupDistribsRelation queries the appGroupDistribsRelation edge of a AsAllGroup.
func (c *AsAllGroupClient) FindAppGroupDistribsRelation(aag *AsAllGroup) *AsMarketAppGroupDistributionRelationQuery {
	return c.QueryAppGroupDistribsRelation(aag).Where(asmarketappgroupdistributionrelation.IsDeleted(0))
}

// Hooks returns the client hooks.
func (c *AsAllGroupClient) Hooks() []Hook {
	return c.hooks.AsAllGroup
}

// AsAppGroupDistributionDataClient is a client for the AsAppGroupDistributionData schema.
type AsAppGroupDistributionDataClient struct {
	config
}

// NewAsAppGroupDistributionDataClient returns a client for the AsAppGroupDistributionData from the given config.
func NewAsAppGroupDistributionDataClient(c config) *AsAppGroupDistributionDataClient {
	return &AsAppGroupDistributionDataClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `asappgroupdistributiondata.Hooks(f(g(h())))`.
func (c *AsAppGroupDistributionDataClient) Use(hooks ...Hook) {
	c.hooks.AsAppGroupDistributionData = append(c.hooks.AsAppGroupDistributionData, hooks...)
}

// Create returns a create builder for AsAppGroupDistributionData.
func (c *AsAppGroupDistributionDataClient) Create() *AsAppGroupDistributionDataCreate {
	mutation := newAsAppGroupDistributionDataMutation(c.config, OpCreate)
	return &AsAppGroupDistributionDataCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AsAppGroupDistributionData entities.
func (c *AsAppGroupDistributionDataClient) CreateBulk(builders ...*AsAppGroupDistributionDataCreate) *AsAppGroupDistributionDataCreateBulk {
	return &AsAppGroupDistributionDataCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AsAppGroupDistributionData.
func (c *AsAppGroupDistributionDataClient) Update() *AsAppGroupDistributionDataUpdate {
	mutation := newAsAppGroupDistributionDataMutation(c.config, OpUpdate)
	return &AsAppGroupDistributionDataUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AsAppGroupDistributionDataClient) UpdateOne(aagdd *AsAppGroupDistributionData) *AsAppGroupDistributionDataUpdateOne {
	mutation := newAsAppGroupDistributionDataMutation(c.config, OpUpdateOne, withAsAppGroupDistributionData(aagdd))
	return &AsAppGroupDistributionDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AsAppGroupDistributionDataClient) UpdateOneID(id int64) *AsAppGroupDistributionDataUpdateOne {
	mutation := newAsAppGroupDistributionDataMutation(c.config, OpUpdateOne, withAsAppGroupDistributionDataID(id))
	return &AsAppGroupDistributionDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Remove returns an update builder for AsAppGroupDistributionData.
func (c *AsAppGroupDistributionDataClient) Remove() *AsAppGroupDistributionDataUpdate {
	return c.Update().SetIsDeleted(1)
}

// RemoveOne returns an update builder for the given entity.
func (c *AsAppGroupDistributionDataClient) RemoveOne(aagdd *AsAppGroupDistributionData) *AsAppGroupDistributionDataUpdateOne {
	return c.UpdateOne(aagdd).SetIsDeleted(1)
}

// RemoveOneID returns an update builder for the given id.
func (c *AsAppGroupDistributionDataClient) RemoveOneID(id int64) *AsAppGroupDistributionDataUpdateOne {
	return c.UpdateOneID(id).SetIsDeleted(1)
}

// Delete returns a delete builder for AsAppGroupDistributionData.
func (c *AsAppGroupDistributionDataClient) Delete() *AsAppGroupDistributionDataDelete {
	mutation := newAsAppGroupDistributionDataMutation(c.config, OpDelete)
	return &AsAppGroupDistributionDataDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AsAppGroupDistributionDataClient) DeleteOne(aagdd *AsAppGroupDistributionData) *AsAppGroupDistributionDataDeleteOne {
	return c.DeleteOneID(aagdd.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AsAppGroupDistributionDataClient) DeleteOneID(id int64) *AsAppGroupDistributionDataDeleteOne {
	builder := c.Delete().Where(asappgroupdistributiondata.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AsAppGroupDistributionDataDeleteOne{builder}
}

// Query returns a query builder for AsAppGroupDistributionData.
func (c *AsAppGroupDistributionDataClient) Query() *AsAppGroupDistributionDataQuery {
	return &AsAppGroupDistributionDataQuery{
		config: c.config,
	}
}

// Find returns a query builder for AsAppGroupDistributionData, filter is_delete = 0.
func (c *AsAppGroupDistributionDataClient) Find() *AsAppGroupDistributionDataQuery {
	return c.Query().Where(asappgroupdistributiondata.IsDeleted(0))
}

// FindOne returns a AsAppGroupDistributionData entity by its id., filter is_delete = 0.
func (c *AsAppGroupDistributionDataClient) FindOne(ctx context.Context, id int64) (*AsAppGroupDistributionData, error) {
	return c.Query().Where(asappgroupdistributiondata.IsDeleted(0), asappgroupdistributiondata.ID(id)).Only(ctx)
}

// FindOneX is like FindOne, but panics if an error occurs.
func (c *AsAppGroupDistributionDataClient) FindOneX(ctx context.Context, id int64) *AsAppGroupDistributionData {
	obj, err := c.FindOne(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Get returns a AsAppGroupDistributionData entity by its id.
func (c *AsAppGroupDistributionDataClient) Get(ctx context.Context, id int64) (*AsAppGroupDistributionData, error) {
	return c.Query().Where(asappgroupdistributiondata.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AsAppGroupDistributionDataClient) GetX(ctx context.Context, id int64) *AsAppGroupDistributionData {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAppx queries the appx edge of a AsAppGroupDistributionData.
func (c *AsAppGroupDistributionDataClient) QueryAppx(aagdd *AsAppGroupDistributionData) *AsMarketAppQuery {
	query := &AsMarketAppQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := aagdd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asappgroupdistributiondata.Table, asappgroupdistributiondata.FieldID, id),
			sqlgraph.To(asmarketapp.Table, asmarketapp.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asappgroupdistributiondata.AppxTable, asappgroupdistributiondata.AppxColumn),
		)
		fromV = sqlgraph.Neighbors(aagdd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGroupx queries the groupx edge of a AsAppGroupDistributionData.
func (c *AsAppGroupDistributionDataClient) QueryGroupx(aagdd *AsAppGroupDistributionData) *AsAllGroupQuery {
	query := &AsAllGroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := aagdd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asappgroupdistributiondata.Table, asappgroupdistributiondata.FieldID, id),
			sqlgraph.To(asallgroup.Table, asallgroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asappgroupdistributiondata.GroupxTable, asappgroupdistributiondata.GroupxColumn),
		)
		fromV = sqlgraph.Neighbors(aagdd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// FindAppx queries the appx edge of a AsAppGroupDistributionData.
func (c *AsAppGroupDistributionDataClient) FindAppx(aagdd *AsAppGroupDistributionData) *AsMarketAppQuery {
	return c.QueryAppx(aagdd).Where(asmarketapp.IsDeleted(0))
}

// FindGroupx queries the groupx edge of a AsAppGroupDistributionData.
func (c *AsAppGroupDistributionDataClient) FindGroupx(aagdd *AsAppGroupDistributionData) *AsAllGroupQuery {
	return c.QueryGroupx(aagdd).Where(asallgroup.IsDeleted(0))
}

// Hooks returns the client hooks.
func (c *AsAppGroupDistributionDataClient) Hooks() []Hook {
	return c.hooks.AsAppGroupDistributionData
}

// AsDictClient is a client for the AsDict schema.
type AsDictClient struct {
	config
}

// NewAsDictClient returns a client for the AsDict from the given config.
func NewAsDictClient(c config) *AsDictClient {
	return &AsDictClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `asdict.Hooks(f(g(h())))`.
func (c *AsDictClient) Use(hooks ...Hook) {
	c.hooks.AsDict = append(c.hooks.AsDict, hooks...)
}

// Create returns a create builder for AsDict.
func (c *AsDictClient) Create() *AsDictCreate {
	mutation := newAsDictMutation(c.config, OpCreate)
	return &AsDictCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AsDict entities.
func (c *AsDictClient) CreateBulk(builders ...*AsDictCreate) *AsDictCreateBulk {
	return &AsDictCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AsDict.
func (c *AsDictClient) Update() *AsDictUpdate {
	mutation := newAsDictMutation(c.config, OpUpdate)
	return &AsDictUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AsDictClient) UpdateOne(ad *AsDict) *AsDictUpdateOne {
	mutation := newAsDictMutation(c.config, OpUpdateOne, withAsDict(ad))
	return &AsDictUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AsDictClient) UpdateOneID(id int64) *AsDictUpdateOne {
	mutation := newAsDictMutation(c.config, OpUpdateOne, withAsDictID(id))
	return &AsDictUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Remove returns an update builder for AsDict.
func (c *AsDictClient) Remove() *AsDictUpdate {
	return c.Update().SetIsDeleted(1)
}

// RemoveOne returns an update builder for the given entity.
func (c *AsDictClient) RemoveOne(ad *AsDict) *AsDictUpdateOne {
	return c.UpdateOne(ad).SetIsDeleted(1)
}

// RemoveOneID returns an update builder for the given id.
func (c *AsDictClient) RemoveOneID(id int64) *AsDictUpdateOne {
	return c.UpdateOneID(id).SetIsDeleted(1)
}

// Delete returns a delete builder for AsDict.
func (c *AsDictClient) Delete() *AsDictDelete {
	mutation := newAsDictMutation(c.config, OpDelete)
	return &AsDictDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AsDictClient) DeleteOne(ad *AsDict) *AsDictDeleteOne {
	return c.DeleteOneID(ad.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AsDictClient) DeleteOneID(id int64) *AsDictDeleteOne {
	builder := c.Delete().Where(asdict.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AsDictDeleteOne{builder}
}

// Query returns a query builder for AsDict.
func (c *AsDictClient) Query() *AsDictQuery {
	return &AsDictQuery{
		config: c.config,
	}
}

// Find returns a query builder for AsDict, filter is_delete = 0.
func (c *AsDictClient) Find() *AsDictQuery {
	return c.Query().Where(asdict.IsDeleted(0))
}

// FindOne returns a AsDict entity by its id., filter is_delete = 0.
func (c *AsDictClient) FindOne(ctx context.Context, id int64) (*AsDict, error) {
	return c.Query().Where(asdict.IsDeleted(0), asdict.ID(id)).Only(ctx)
}

// FindOneX is like FindOne, but panics if an error occurs.
func (c *AsDictClient) FindOneX(ctx context.Context, id int64) *AsDict {
	obj, err := c.FindOne(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Get returns a AsDict entity by its id.
func (c *AsDictClient) Get(ctx context.Context, id int64) (*AsDict, error) {
	return c.Query().Where(asdict.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AsDictClient) GetX(ctx context.Context, id int64) *AsDict {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParentx queries the parentx edge of a AsDict.
func (c *AsDictClient) QueryParentx(ad *AsDict) *AsDictQuery {
	query := &AsDictQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ad.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asdict.Table, asdict.FieldID, id),
			sqlgraph.To(asdict.Table, asdict.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asdict.ParentxTable, asdict.ParentxColumn),
		)
		fromV = sqlgraph.Neighbors(ad.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildrens queries the childrens edge of a AsDict.
func (c *AsDictClient) QueryChildrens(ad *AsDict) *AsDictQuery {
	query := &AsDictQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ad.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asdict.Table, asdict.FieldID, id),
			sqlgraph.To(asdict.Table, asdict.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asdict.ChildrensTable, asdict.ChildrensColumn),
		)
		fromV = sqlgraph.Neighbors(ad.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// FindParentx queries the parentx edge of a AsDict.
func (c *AsDictClient) FindParentx(ad *AsDict) *AsDictQuery {
	return c.QueryParentx(ad).Where(asdict.IsDeleted(0))
}

// FindChildrens queries the childrens edge of a AsDict.
func (c *AsDictClient) FindChildrens(ad *AsDict) *AsDictQuery {
	return c.QueryChildrens(ad).Where(asdict.IsDeleted(0))
}

// Hooks returns the client hooks.
func (c *AsDictClient) Hooks() []Hook {
	return c.hooks.AsDict
}

// AsGroupTenantRelationsClient is a client for the AsGroupTenantRelations schema.
type AsGroupTenantRelationsClient struct {
	config
}

// NewAsGroupTenantRelationsClient returns a client for the AsGroupTenantRelations from the given config.
func NewAsGroupTenantRelationsClient(c config) *AsGroupTenantRelationsClient {
	return &AsGroupTenantRelationsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `asgrouptenantrelations.Hooks(f(g(h())))`.
func (c *AsGroupTenantRelationsClient) Use(hooks ...Hook) {
	c.hooks.AsGroupTenantRelations = append(c.hooks.AsGroupTenantRelations, hooks...)
}

// Create returns a create builder for AsGroupTenantRelations.
func (c *AsGroupTenantRelationsClient) Create() *AsGroupTenantRelationsCreate {
	mutation := newAsGroupTenantRelationsMutation(c.config, OpCreate)
	return &AsGroupTenantRelationsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AsGroupTenantRelations entities.
func (c *AsGroupTenantRelationsClient) CreateBulk(builders ...*AsGroupTenantRelationsCreate) *AsGroupTenantRelationsCreateBulk {
	return &AsGroupTenantRelationsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AsGroupTenantRelations.
func (c *AsGroupTenantRelationsClient) Update() *AsGroupTenantRelationsUpdate {
	mutation := newAsGroupTenantRelationsMutation(c.config, OpUpdate)
	return &AsGroupTenantRelationsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AsGroupTenantRelationsClient) UpdateOne(agtr *AsGroupTenantRelations) *AsGroupTenantRelationsUpdateOne {
	mutation := newAsGroupTenantRelationsMutation(c.config, OpUpdateOne, withAsGroupTenantRelations(agtr))
	return &AsGroupTenantRelationsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AsGroupTenantRelationsClient) UpdateOneID(id int64) *AsGroupTenantRelationsUpdateOne {
	mutation := newAsGroupTenantRelationsMutation(c.config, OpUpdateOne, withAsGroupTenantRelationsID(id))
	return &AsGroupTenantRelationsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Remove returns an update builder for AsGroupTenantRelations.
func (c *AsGroupTenantRelationsClient) Remove() *AsGroupTenantRelationsUpdate {
	return c.Update().SetIsDeleted(1)
}

// RemoveOne returns an update builder for the given entity.
func (c *AsGroupTenantRelationsClient) RemoveOne(agtr *AsGroupTenantRelations) *AsGroupTenantRelationsUpdateOne {
	return c.UpdateOne(agtr).SetIsDeleted(1)
}

// RemoveOneID returns an update builder for the given id.
func (c *AsGroupTenantRelationsClient) RemoveOneID(id int64) *AsGroupTenantRelationsUpdateOne {
	return c.UpdateOneID(id).SetIsDeleted(1)
}

// Delete returns a delete builder for AsGroupTenantRelations.
func (c *AsGroupTenantRelationsClient) Delete() *AsGroupTenantRelationsDelete {
	mutation := newAsGroupTenantRelationsMutation(c.config, OpDelete)
	return &AsGroupTenantRelationsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AsGroupTenantRelationsClient) DeleteOne(agtr *AsGroupTenantRelations) *AsGroupTenantRelationsDeleteOne {
	return c.DeleteOneID(agtr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AsGroupTenantRelationsClient) DeleteOneID(id int64) *AsGroupTenantRelationsDeleteOne {
	builder := c.Delete().Where(asgrouptenantrelations.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AsGroupTenantRelationsDeleteOne{builder}
}

// Query returns a query builder for AsGroupTenantRelations.
func (c *AsGroupTenantRelationsClient) Query() *AsGroupTenantRelationsQuery {
	return &AsGroupTenantRelationsQuery{
		config: c.config,
	}
}

// Find returns a query builder for AsGroupTenantRelations, filter is_delete = 0.
func (c *AsGroupTenantRelationsClient) Find() *AsGroupTenantRelationsQuery {
	return c.Query().Where(asgrouptenantrelations.IsDeleted(0))
}

// FindOne returns a AsGroupTenantRelations entity by its id., filter is_delete = 0.
func (c *AsGroupTenantRelationsClient) FindOne(ctx context.Context, id int64) (*AsGroupTenantRelations, error) {
	return c.Query().Where(asgrouptenantrelations.IsDeleted(0), asgrouptenantrelations.ID(id)).Only(ctx)
}

// FindOneX is like FindOne, but panics if an error occurs.
func (c *AsGroupTenantRelationsClient) FindOneX(ctx context.Context, id int64) *AsGroupTenantRelations {
	obj, err := c.FindOne(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Get returns a AsGroupTenantRelations entity by its id.
func (c *AsGroupTenantRelationsClient) Get(ctx context.Context, id int64) (*AsGroupTenantRelations, error) {
	return c.Query().Where(asgrouptenantrelations.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AsGroupTenantRelationsClient) GetX(ctx context.Context, id int64) *AsGroupTenantRelations {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGroup queries the group edge of a AsGroupTenantRelations.
func (c *AsGroupTenantRelationsClient) QueryGroup(agtr *AsGroupTenantRelations) *AsAllGroupQuery {
	query := &AsAllGroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := agtr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asgrouptenantrelations.Table, asgrouptenantrelations.FieldID, id),
			sqlgraph.To(asallgroup.Table, asallgroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asgrouptenantrelations.GroupTable, asgrouptenantrelations.GroupColumn),
		)
		fromV = sqlgraph.Neighbors(agtr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTenant queries the tenant edge of a AsGroupTenantRelations.
func (c *AsGroupTenantRelationsClient) QueryTenant(agtr *AsGroupTenantRelations) *AsTenantQuery {
	query := &AsTenantQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := agtr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asgrouptenantrelations.Table, asgrouptenantrelations.FieldID, id),
			sqlgraph.To(astenant.Table, astenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asgrouptenantrelations.TenantTable, asgrouptenantrelations.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(agtr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// FindGroup queries the group edge of a AsGroupTenantRelations.
func (c *AsGroupTenantRelationsClient) FindGroup(agtr *AsGroupTenantRelations) *AsAllGroupQuery {
	return c.QueryGroup(agtr).Where(asallgroup.IsDeleted(0))
}

// FindTenant queries the tenant edge of a AsGroupTenantRelations.
func (c *AsGroupTenantRelationsClient) FindTenant(agtr *AsGroupTenantRelations) *AsTenantQuery {
	return c.QueryTenant(agtr).Where(astenant.IsDeleted(0))
}

// Hooks returns the client hooks.
func (c *AsGroupTenantRelationsClient) Hooks() []Hook {
	return c.hooks.AsGroupTenantRelations
}

// AsInnerAgencyClient is a client for the AsInnerAgency schema.
type AsInnerAgencyClient struct {
	config
}

// NewAsInnerAgencyClient returns a client for the AsInnerAgency from the given config.
func NewAsInnerAgencyClient(c config) *AsInnerAgencyClient {
	return &AsInnerAgencyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `asinneragency.Hooks(f(g(h())))`.
func (c *AsInnerAgencyClient) Use(hooks ...Hook) {
	c.hooks.AsInnerAgency = append(c.hooks.AsInnerAgency, hooks...)
}

// Create returns a create builder for AsInnerAgency.
func (c *AsInnerAgencyClient) Create() *AsInnerAgencyCreate {
	mutation := newAsInnerAgencyMutation(c.config, OpCreate)
	return &AsInnerAgencyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AsInnerAgency entities.
func (c *AsInnerAgencyClient) CreateBulk(builders ...*AsInnerAgencyCreate) *AsInnerAgencyCreateBulk {
	return &AsInnerAgencyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AsInnerAgency.
func (c *AsInnerAgencyClient) Update() *AsInnerAgencyUpdate {
	mutation := newAsInnerAgencyMutation(c.config, OpUpdate)
	return &AsInnerAgencyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AsInnerAgencyClient) UpdateOne(aia *AsInnerAgency) *AsInnerAgencyUpdateOne {
	mutation := newAsInnerAgencyMutation(c.config, OpUpdateOne, withAsInnerAgency(aia))
	return &AsInnerAgencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AsInnerAgencyClient) UpdateOneID(id int64) *AsInnerAgencyUpdateOne {
	mutation := newAsInnerAgencyMutation(c.config, OpUpdateOne, withAsInnerAgencyID(id))
	return &AsInnerAgencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Remove returns an update builder for AsInnerAgency.
func (c *AsInnerAgencyClient) Remove() *AsInnerAgencyUpdate {
	return c.Update().SetIsDeleted(1)
}

// RemoveOne returns an update builder for the given entity.
func (c *AsInnerAgencyClient) RemoveOne(aia *AsInnerAgency) *AsInnerAgencyUpdateOne {
	return c.UpdateOne(aia).SetIsDeleted(1)
}

// RemoveOneID returns an update builder for the given id.
func (c *AsInnerAgencyClient) RemoveOneID(id int64) *AsInnerAgencyUpdateOne {
	return c.UpdateOneID(id).SetIsDeleted(1)
}

// Delete returns a delete builder for AsInnerAgency.
func (c *AsInnerAgencyClient) Delete() *AsInnerAgencyDelete {
	mutation := newAsInnerAgencyMutation(c.config, OpDelete)
	return &AsInnerAgencyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AsInnerAgencyClient) DeleteOne(aia *AsInnerAgency) *AsInnerAgencyDeleteOne {
	return c.DeleteOneID(aia.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AsInnerAgencyClient) DeleteOneID(id int64) *AsInnerAgencyDeleteOne {
	builder := c.Delete().Where(asinneragency.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AsInnerAgencyDeleteOne{builder}
}

// Query returns a query builder for AsInnerAgency.
func (c *AsInnerAgencyClient) Query() *AsInnerAgencyQuery {
	return &AsInnerAgencyQuery{
		config: c.config,
	}
}

// Find returns a query builder for AsInnerAgency, filter is_delete = 0.
func (c *AsInnerAgencyClient) Find() *AsInnerAgencyQuery {
	return c.Query().Where(asinneragency.IsDeleted(0))
}

// FindOne returns a AsInnerAgency entity by its id., filter is_delete = 0.
func (c *AsInnerAgencyClient) FindOne(ctx context.Context, id int64) (*AsInnerAgency, error) {
	return c.Query().Where(asinneragency.IsDeleted(0), asinneragency.ID(id)).Only(ctx)
}

// FindOneX is like FindOne, but panics if an error occurs.
func (c *AsInnerAgencyClient) FindOneX(ctx context.Context, id int64) *AsInnerAgency {
	obj, err := c.FindOne(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Get returns a AsInnerAgency entity by its id.
func (c *AsInnerAgencyClient) Get(ctx context.Context, id int64) (*AsInnerAgency, error) {
	return c.Query().Where(asinneragency.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AsInnerAgencyClient) GetX(ctx context.Context, id int64) *AsInnerAgency {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a AsInnerAgency.
func (c *AsInnerAgencyClient) QueryParent(aia *AsInnerAgency) *AsInnerAgencyQuery {
	query := &AsInnerAgencyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := aia.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asinneragency.Table, asinneragency.FieldID, id),
			sqlgraph.To(asinneragency.Table, asinneragency.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asinneragency.ParentTable, asinneragency.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(aia.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildrens queries the childrens edge of a AsInnerAgency.
func (c *AsInnerAgencyClient) QueryChildrens(aia *AsInnerAgency) *AsInnerAgencyQuery {
	query := &AsInnerAgencyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := aia.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asinneragency.Table, asinneragency.FieldID, id),
			sqlgraph.To(asinneragency.Table, asinneragency.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asinneragency.ChildrensTable, asinneragency.ChildrensColumn),
		)
		fromV = sqlgraph.Neighbors(aia.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryJobs queries the jobs edge of a AsInnerAgency.
func (c *AsInnerAgencyClient) QueryJobs(aia *AsInnerAgency) *AsJobQuery {
	query := &AsJobQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := aia.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asinneragency.Table, asinneragency.FieldID, id),
			sqlgraph.To(asjob.Table, asjob.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, asinneragency.JobsTable, asinneragency.JobsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(aia.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUsers queries the users edge of a AsInnerAgency.
func (c *AsInnerAgencyClient) QueryUsers(aia *AsInnerAgency) *AsUserQuery {
	query := &AsUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := aia.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asinneragency.Table, asinneragency.FieldID, id),
			sqlgraph.To(asuser.Table, asuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, asinneragency.UsersTable, asinneragency.UsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(aia.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPersons queries the persons edge of a AsInnerAgency.
func (c *AsInnerAgencyClient) QueryPersons(aia *AsInnerAgency) *AsPersonQuery {
	query := &AsPersonQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := aia.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asinneragency.Table, asinneragency.FieldID, id),
			sqlgraph.To(asperson.Table, asperson.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, asinneragency.PersonsTable, asinneragency.PersonsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(aia.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoleDistribs queries the roleDistribs edge of a AsInnerAgency.
func (c *AsInnerAgencyClient) QueryRoleDistribs(aia *AsInnerAgency) *AsMarketRoleDistributionQuery {
	query := &AsMarketRoleDistributionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := aia.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asinneragency.Table, asinneragency.FieldID, id),
			sqlgraph.To(asmarketroledistribution.Table, asmarketroledistribution.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asinneragency.RoleDistribsTable, asinneragency.RoleDistribsColumn),
		)
		fromV = sqlgraph.Neighbors(aia.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// FindParent queries the parent edge of a AsInnerAgency.
func (c *AsInnerAgencyClient) FindParent(aia *AsInnerAgency) *AsInnerAgencyQuery {
	return c.QueryParent(aia).Where(asinneragency.IsDeleted(0))
}

// FindChildrens queries the childrens edge of a AsInnerAgency.
func (c *AsInnerAgencyClient) FindChildrens(aia *AsInnerAgency) *AsInnerAgencyQuery {
	return c.QueryChildrens(aia).Where(asinneragency.IsDeleted(0))
}

// FindJobs queries the jobs edge of a AsInnerAgency.
func (c *AsInnerAgencyClient) FindJobs(aia *AsInnerAgency) *AsJobQuery {
	return c.QueryJobs(aia).Where(asjob.IsDeleted(0))
}

// FindUsers queries the users edge of a AsInnerAgency.
func (c *AsInnerAgencyClient) FindUsers(aia *AsInnerAgency) *AsUserQuery {
	return c.QueryUsers(aia).Where(asuser.IsDeleted(0))
}

// FindPersons queries the persons edge of a AsInnerAgency.
func (c *AsInnerAgencyClient) FindPersons(aia *AsInnerAgency) *AsPersonQuery {
	return c.QueryPersons(aia).Where(asperson.IsDeleted(0))
}

// FindRoleDistribs queries the roleDistribs edge of a AsInnerAgency.
func (c *AsInnerAgencyClient) FindRoleDistribs(aia *AsInnerAgency) *AsMarketRoleDistributionQuery {
	return c.QueryRoleDistribs(aia).Where(asmarketroledistribution.IsDeleted(0))
}

// Hooks returns the client hooks.
func (c *AsInnerAgencyClient) Hooks() []Hook {
	return c.hooks.AsInnerAgency
}

// AsInputDataClient is a client for the AsInputData schema.
type AsInputDataClient struct {
	config
}

// NewAsInputDataClient returns a client for the AsInputData from the given config.
func NewAsInputDataClient(c config) *AsInputDataClient {
	return &AsInputDataClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `asinputdata.Hooks(f(g(h())))`.
func (c *AsInputDataClient) Use(hooks ...Hook) {
	c.hooks.AsInputData = append(c.hooks.AsInputData, hooks...)
}

// Create returns a create builder for AsInputData.
func (c *AsInputDataClient) Create() *AsInputDataCreate {
	mutation := newAsInputDataMutation(c.config, OpCreate)
	return &AsInputDataCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AsInputData entities.
func (c *AsInputDataClient) CreateBulk(builders ...*AsInputDataCreate) *AsInputDataCreateBulk {
	return &AsInputDataCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AsInputData.
func (c *AsInputDataClient) Update() *AsInputDataUpdate {
	mutation := newAsInputDataMutation(c.config, OpUpdate)
	return &AsInputDataUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AsInputDataClient) UpdateOne(aid *AsInputData) *AsInputDataUpdateOne {
	mutation := newAsInputDataMutation(c.config, OpUpdateOne, withAsInputData(aid))
	return &AsInputDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AsInputDataClient) UpdateOneID(id int64) *AsInputDataUpdateOne {
	mutation := newAsInputDataMutation(c.config, OpUpdateOne, withAsInputDataID(id))
	return &AsInputDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Remove returns an update builder for AsInputData.
func (c *AsInputDataClient) Remove() *AsInputDataUpdate {
	return c.Update().SetIsDeleted(1)
}

// RemoveOne returns an update builder for the given entity.
func (c *AsInputDataClient) RemoveOne(aid *AsInputData) *AsInputDataUpdateOne {
	return c.UpdateOne(aid).SetIsDeleted(1)
}

// RemoveOneID returns an update builder for the given id.
func (c *AsInputDataClient) RemoveOneID(id int64) *AsInputDataUpdateOne {
	return c.UpdateOneID(id).SetIsDeleted(1)
}

// Delete returns a delete builder for AsInputData.
func (c *AsInputDataClient) Delete() *AsInputDataDelete {
	mutation := newAsInputDataMutation(c.config, OpDelete)
	return &AsInputDataDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AsInputDataClient) DeleteOne(aid *AsInputData) *AsInputDataDeleteOne {
	return c.DeleteOneID(aid.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AsInputDataClient) DeleteOneID(id int64) *AsInputDataDeleteOne {
	builder := c.Delete().Where(asinputdata.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AsInputDataDeleteOne{builder}
}

// Query returns a query builder for AsInputData.
func (c *AsInputDataClient) Query() *AsInputDataQuery {
	return &AsInputDataQuery{
		config: c.config,
	}
}

// Find returns a query builder for AsInputData, filter is_delete = 0.
func (c *AsInputDataClient) Find() *AsInputDataQuery {
	return c.Query().Where(asinputdata.IsDeleted(0))
}

// FindOne returns a AsInputData entity by its id., filter is_delete = 0.
func (c *AsInputDataClient) FindOne(ctx context.Context, id int64) (*AsInputData, error) {
	return c.Query().Where(asinputdata.IsDeleted(0), asinputdata.ID(id)).Only(ctx)
}

// FindOneX is like FindOne, but panics if an error occurs.
func (c *AsInputDataClient) FindOneX(ctx context.Context, id int64) *AsInputData {
	obj, err := c.FindOne(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Get returns a AsInputData entity by its id.
func (c *AsInputDataClient) Get(ctx context.Context, id int64) (*AsInputData, error) {
	return c.Query().Where(asinputdata.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AsInputDataClient) GetX(ctx context.Context, id int64) *AsInputData {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AsInputDataClient) Hooks() []Hook {
	return c.hooks.AsInputData
}

// AsJobClient is a client for the AsJob schema.
type AsJobClient struct {
	config
}

// NewAsJobClient returns a client for the AsJob from the given config.
func NewAsJobClient(c config) *AsJobClient {
	return &AsJobClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `asjob.Hooks(f(g(h())))`.
func (c *AsJobClient) Use(hooks ...Hook) {
	c.hooks.AsJob = append(c.hooks.AsJob, hooks...)
}

// Create returns a create builder for AsJob.
func (c *AsJobClient) Create() *AsJobCreate {
	mutation := newAsJobMutation(c.config, OpCreate)
	return &AsJobCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AsJob entities.
func (c *AsJobClient) CreateBulk(builders ...*AsJobCreate) *AsJobCreateBulk {
	return &AsJobCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AsJob.
func (c *AsJobClient) Update() *AsJobUpdate {
	mutation := newAsJobMutation(c.config, OpUpdate)
	return &AsJobUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AsJobClient) UpdateOne(aj *AsJob) *AsJobUpdateOne {
	mutation := newAsJobMutation(c.config, OpUpdateOne, withAsJob(aj))
	return &AsJobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AsJobClient) UpdateOneID(id int64) *AsJobUpdateOne {
	mutation := newAsJobMutation(c.config, OpUpdateOne, withAsJobID(id))
	return &AsJobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Remove returns an update builder for AsJob.
func (c *AsJobClient) Remove() *AsJobUpdate {
	return c.Update().SetIsDeleted(1)
}

// RemoveOne returns an update builder for the given entity.
func (c *AsJobClient) RemoveOne(aj *AsJob) *AsJobUpdateOne {
	return c.UpdateOne(aj).SetIsDeleted(1)
}

// RemoveOneID returns an update builder for the given id.
func (c *AsJobClient) RemoveOneID(id int64) *AsJobUpdateOne {
	return c.UpdateOneID(id).SetIsDeleted(1)
}

// Delete returns a delete builder for AsJob.
func (c *AsJobClient) Delete() *AsJobDelete {
	mutation := newAsJobMutation(c.config, OpDelete)
	return &AsJobDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AsJobClient) DeleteOne(aj *AsJob) *AsJobDeleteOne {
	return c.DeleteOneID(aj.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AsJobClient) DeleteOneID(id int64) *AsJobDeleteOne {
	builder := c.Delete().Where(asjob.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AsJobDeleteOne{builder}
}

// Query returns a query builder for AsJob.
func (c *AsJobClient) Query() *AsJobQuery {
	return &AsJobQuery{
		config: c.config,
	}
}

// Find returns a query builder for AsJob, filter is_delete = 0.
func (c *AsJobClient) Find() *AsJobQuery {
	return c.Query().Where(asjob.IsDeleted(0))
}

// FindOne returns a AsJob entity by its id., filter is_delete = 0.
func (c *AsJobClient) FindOne(ctx context.Context, id int64) (*AsJob, error) {
	return c.Query().Where(asjob.IsDeleted(0), asjob.ID(id)).Only(ctx)
}

// FindOneX is like FindOne, but panics if an error occurs.
func (c *AsJobClient) FindOneX(ctx context.Context, id int64) *AsJob {
	obj, err := c.FindOne(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Get returns a AsJob entity by its id.
func (c *AsJobClient) Get(ctx context.Context, id int64) (*AsJob, error) {
	return c.Query().Where(asjob.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AsJobClient) GetX(ctx context.Context, id int64) *AsJob {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPersons queries the persons edge of a AsJob.
func (c *AsJobClient) QueryPersons(aj *AsJob) *AsPersonQuery {
	query := &AsPersonQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := aj.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asjob.Table, asjob.FieldID, id),
			sqlgraph.To(asperson.Table, asperson.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, asjob.PersonsTable, asjob.PersonsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(aj.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoles queries the roles edge of a AsJob.
func (c *AsJobClient) QueryRoles(aj *AsJob) *AsRoleQuery {
	query := &AsRoleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := aj.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asjob.Table, asjob.FieldID, id),
			sqlgraph.To(asrole.Table, asrole.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, asjob.RolesTable, asjob.RolesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(aj.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUsers queries the users edge of a AsJob.
func (c *AsJobClient) QueryUsers(aj *AsJob) *AsUserQuery {
	query := &AsUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := aj.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asjob.Table, asjob.FieldID, id),
			sqlgraph.To(asuser.Table, asuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, asjob.UsersTable, asjob.UsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(aj.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAgencys queries the agencys edge of a AsJob.
func (c *AsJobClient) QueryAgencys(aj *AsJob) *AsInnerAgencyQuery {
	query := &AsInnerAgencyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := aj.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asjob.Table, asjob.FieldID, id),
			sqlgraph.To(asinneragency.Table, asinneragency.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, asjob.AgencysTable, asjob.AgencysPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(aj.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoleDistribs queries the roleDistribs edge of a AsJob.
func (c *AsJobClient) QueryRoleDistribs(aj *AsJob) *AsMarketRoleDistributionQuery {
	query := &AsMarketRoleDistributionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := aj.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asjob.Table, asjob.FieldID, id),
			sqlgraph.To(asmarketroledistribution.Table, asmarketroledistribution.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asjob.RoleDistribsTable, asjob.RoleDistribsColumn),
		)
		fromV = sqlgraph.Neighbors(aj.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// FindPersons queries the persons edge of a AsJob.
func (c *AsJobClient) FindPersons(aj *AsJob) *AsPersonQuery {
	return c.QueryPersons(aj).Where(asperson.IsDeleted(0))
}

// FindRoles queries the roles edge of a AsJob.
func (c *AsJobClient) FindRoles(aj *AsJob) *AsRoleQuery {
	return c.QueryRoles(aj).Where(asrole.IsDeleted(0))
}

// FindUsers queries the users edge of a AsJob.
func (c *AsJobClient) FindUsers(aj *AsJob) *AsUserQuery {
	return c.QueryUsers(aj).Where(asuser.IsDeleted(0))
}

// FindAgencys queries the agencys edge of a AsJob.
func (c *AsJobClient) FindAgencys(aj *AsJob) *AsInnerAgencyQuery {
	return c.QueryAgencys(aj).Where(asinneragency.IsDeleted(0))
}

// FindRoleDistribs queries the roleDistribs edge of a AsJob.
func (c *AsJobClient) FindRoleDistribs(aj *AsJob) *AsMarketRoleDistributionQuery {
	return c.QueryRoleDistribs(aj).Where(asmarketroledistribution.IsDeleted(0))
}

// Hooks returns the client hooks.
func (c *AsJobClient) Hooks() []Hook {
	return c.hooks.AsJob
}

// AsLayerClient is a client for the AsLayer schema.
type AsLayerClient struct {
	config
}

// NewAsLayerClient returns a client for the AsLayer from the given config.
func NewAsLayerClient(c config) *AsLayerClient {
	return &AsLayerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `aslayer.Hooks(f(g(h())))`.
func (c *AsLayerClient) Use(hooks ...Hook) {
	c.hooks.AsLayer = append(c.hooks.AsLayer, hooks...)
}

// Create returns a create builder for AsLayer.
func (c *AsLayerClient) Create() *AsLayerCreate {
	mutation := newAsLayerMutation(c.config, OpCreate)
	return &AsLayerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AsLayer entities.
func (c *AsLayerClient) CreateBulk(builders ...*AsLayerCreate) *AsLayerCreateBulk {
	return &AsLayerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AsLayer.
func (c *AsLayerClient) Update() *AsLayerUpdate {
	mutation := newAsLayerMutation(c.config, OpUpdate)
	return &AsLayerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AsLayerClient) UpdateOne(al *AsLayer) *AsLayerUpdateOne {
	mutation := newAsLayerMutation(c.config, OpUpdateOne, withAsLayer(al))
	return &AsLayerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AsLayerClient) UpdateOneID(id int64) *AsLayerUpdateOne {
	mutation := newAsLayerMutation(c.config, OpUpdateOne, withAsLayerID(id))
	return &AsLayerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Remove returns an update builder for AsLayer.
func (c *AsLayerClient) Remove() *AsLayerUpdate {
	return c.Update().SetIsDeleted(1)
}

// RemoveOne returns an update builder for the given entity.
func (c *AsLayerClient) RemoveOne(al *AsLayer) *AsLayerUpdateOne {
	return c.UpdateOne(al).SetIsDeleted(1)
}

// RemoveOneID returns an update builder for the given id.
func (c *AsLayerClient) RemoveOneID(id int64) *AsLayerUpdateOne {
	return c.UpdateOneID(id).SetIsDeleted(1)
}

// Delete returns a delete builder for AsLayer.
func (c *AsLayerClient) Delete() *AsLayerDelete {
	mutation := newAsLayerMutation(c.config, OpDelete)
	return &AsLayerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AsLayerClient) DeleteOne(al *AsLayer) *AsLayerDeleteOne {
	return c.DeleteOneID(al.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AsLayerClient) DeleteOneID(id int64) *AsLayerDeleteOne {
	builder := c.Delete().Where(aslayer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AsLayerDeleteOne{builder}
}

// Query returns a query builder for AsLayer.
func (c *AsLayerClient) Query() *AsLayerQuery {
	return &AsLayerQuery{
		config: c.config,
	}
}

// Find returns a query builder for AsLayer, filter is_delete = 0.
func (c *AsLayerClient) Find() *AsLayerQuery {
	return c.Query().Where(aslayer.IsDeleted(0))
}

// FindOne returns a AsLayer entity by its id., filter is_delete = 0.
func (c *AsLayerClient) FindOne(ctx context.Context, id int64) (*AsLayer, error) {
	return c.Query().Where(aslayer.IsDeleted(0), aslayer.ID(id)).Only(ctx)
}

// FindOneX is like FindOne, but panics if an error occurs.
func (c *AsLayerClient) FindOneX(ctx context.Context, id int64) *AsLayer {
	obj, err := c.FindOne(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Get returns a AsLayer entity by its id.
func (c *AsLayerClient) Get(ctx context.Context, id int64) (*AsLayer, error) {
	return c.Query().Where(aslayer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AsLayerClient) GetX(ctx context.Context, id int64) *AsLayer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGroup queries the group edge of a AsLayer.
func (c *AsLayerClient) QueryGroup(al *AsLayer) *AsAllGroupQuery {
	query := &AsAllGroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := al.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(aslayer.Table, aslayer.FieldID, id),
			sqlgraph.To(asallgroup.Table, asallgroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, aslayer.GroupTable, aslayer.GroupColumn),
		)
		fromV = sqlgraph.Neighbors(al.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// FindGroup queries the group edge of a AsLayer.
func (c *AsLayerClient) FindGroup(al *AsLayer) *AsAllGroupQuery {
	return c.QueryGroup(al).Where(asallgroup.IsDeleted(0))
}

// Hooks returns the client hooks.
func (c *AsLayerClient) Hooks() []Hook {
	return c.hooks.AsLayer
}

// AsMarketAppClient is a client for the AsMarketApp schema.
type AsMarketAppClient struct {
	config
}

// NewAsMarketAppClient returns a client for the AsMarketApp from the given config.
func NewAsMarketAppClient(c config) *AsMarketAppClient {
	return &AsMarketAppClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `asmarketapp.Hooks(f(g(h())))`.
func (c *AsMarketAppClient) Use(hooks ...Hook) {
	c.hooks.AsMarketApp = append(c.hooks.AsMarketApp, hooks...)
}

// Create returns a create builder for AsMarketApp.
func (c *AsMarketAppClient) Create() *AsMarketAppCreate {
	mutation := newAsMarketAppMutation(c.config, OpCreate)
	return &AsMarketAppCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AsMarketApp entities.
func (c *AsMarketAppClient) CreateBulk(builders ...*AsMarketAppCreate) *AsMarketAppCreateBulk {
	return &AsMarketAppCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AsMarketApp.
func (c *AsMarketAppClient) Update() *AsMarketAppUpdate {
	mutation := newAsMarketAppMutation(c.config, OpUpdate)
	return &AsMarketAppUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AsMarketAppClient) UpdateOne(ama *AsMarketApp) *AsMarketAppUpdateOne {
	mutation := newAsMarketAppMutation(c.config, OpUpdateOne, withAsMarketApp(ama))
	return &AsMarketAppUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AsMarketAppClient) UpdateOneID(id int64) *AsMarketAppUpdateOne {
	mutation := newAsMarketAppMutation(c.config, OpUpdateOne, withAsMarketAppID(id))
	return &AsMarketAppUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Remove returns an update builder for AsMarketApp.
func (c *AsMarketAppClient) Remove() *AsMarketAppUpdate {
	return c.Update().SetIsDeleted(1)
}

// RemoveOne returns an update builder for the given entity.
func (c *AsMarketAppClient) RemoveOne(ama *AsMarketApp) *AsMarketAppUpdateOne {
	return c.UpdateOne(ama).SetIsDeleted(1)
}

// RemoveOneID returns an update builder for the given id.
func (c *AsMarketAppClient) RemoveOneID(id int64) *AsMarketAppUpdateOne {
	return c.UpdateOneID(id).SetIsDeleted(1)
}

// Delete returns a delete builder for AsMarketApp.
func (c *AsMarketAppClient) Delete() *AsMarketAppDelete {
	mutation := newAsMarketAppMutation(c.config, OpDelete)
	return &AsMarketAppDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AsMarketAppClient) DeleteOne(ama *AsMarketApp) *AsMarketAppDeleteOne {
	return c.DeleteOneID(ama.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AsMarketAppClient) DeleteOneID(id int64) *AsMarketAppDeleteOne {
	builder := c.Delete().Where(asmarketapp.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AsMarketAppDeleteOne{builder}
}

// Query returns a query builder for AsMarketApp.
func (c *AsMarketAppClient) Query() *AsMarketAppQuery {
	return &AsMarketAppQuery{
		config: c.config,
	}
}

// Find returns a query builder for AsMarketApp, filter is_delete = 0.
func (c *AsMarketAppClient) Find() *AsMarketAppQuery {
	return c.Query().Where(asmarketapp.IsDeleted(0))
}

// FindOne returns a AsMarketApp entity by its id., filter is_delete = 0.
func (c *AsMarketAppClient) FindOne(ctx context.Context, id int64) (*AsMarketApp, error) {
	return c.Query().Where(asmarketapp.IsDeleted(0), asmarketapp.ID(id)).Only(ctx)
}

// FindOneX is like FindOne, but panics if an error occurs.
func (c *AsMarketAppClient) FindOneX(ctx context.Context, id int64) *AsMarketApp {
	obj, err := c.FindOne(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Get returns a AsMarketApp entity by its id.
func (c *AsMarketAppClient) Get(ctx context.Context, id int64) (*AsMarketApp, error) {
	return c.Query().Where(asmarketapp.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AsMarketAppClient) GetX(ctx context.Context, id int64) *AsMarketApp {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAppMenus queries the appMenus edge of a AsMarketApp.
func (c *AsMarketAppClient) QueryAppMenus(ama *AsMarketApp) *AsMarketMenuQuery {
	query := &AsMarketMenuQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ama.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketapp.Table, asmarketapp.FieldID, id),
			sqlgraph.To(asmarketmenu.Table, asmarketmenu.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asmarketapp.AppMenusTable, asmarketapp.AppMenusColumn),
		)
		fromV = sqlgraph.Neighbors(ama.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAppRoles queries the appRoles edge of a AsMarketApp.
func (c *AsMarketAppClient) QueryAppRoles(ama *AsMarketApp) *AsMarketAppRoleQuery {
	query := &AsMarketAppRoleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ama.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketapp.Table, asmarketapp.FieldID, id),
			sqlgraph.To(asmarketapprole.Table, asmarketapprole.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asmarketapp.AppRolesTable, asmarketapp.AppRolesColumn),
		)
		fromV = sqlgraph.Neighbors(ama.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUseds queries the useds edge of a AsMarketApp.
func (c *AsMarketAppClient) QueryUseds(ama *AsMarketApp) *AsMarketUsedAppQuery {
	query := &AsMarketUsedAppQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ama.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketapp.Table, asmarketapp.FieldID, id),
			sqlgraph.To(asmarketusedapp.Table, asmarketusedapp.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asmarketapp.UsedsTable, asmarketapp.UsedsColumn),
		)
		fromV = sqlgraph.Neighbors(ama.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAppAlerts queries the appAlerts edge of a AsMarketApp.
func (c *AsMarketAppClient) QueryAppAlerts(ama *AsMarketApp) *AsMarketAppAlertQuery {
	query := &AsMarketAppAlertQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ama.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketapp.Table, asmarketapp.FieldID, id),
			sqlgraph.To(asmarketappalert.Table, asmarketappalert.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asmarketapp.AppAlertsTable, asmarketapp.AppAlertsColumn),
		)
		fromV = sqlgraph.Neighbors(ama.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAppRedeploys queries the appRedeploys edge of a AsMarketApp.
func (c *AsMarketAppClient) QueryAppRedeploys(ama *AsMarketApp) *AsRedeployDataQuery {
	query := &AsRedeployDataQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ama.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketapp.Table, asmarketapp.FieldID, id),
			sqlgraph.To(asredeploydata.Table, asredeploydata.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asmarketapp.AppRedeploysTable, asmarketapp.AppRedeploysColumn),
		)
		fromV = sqlgraph.Neighbors(ama.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAppKeys queries the appKeys edge of a AsMarketApp.
func (c *AsMarketAppClient) QueryAppKeys(ama *AsMarketApp) *AsMarketAppKeySecretQuery {
	query := &AsMarketAppKeySecretQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ama.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketapp.Table, asmarketapp.FieldID, id),
			sqlgraph.To(asmarketappkeysecret.Table, asmarketappkeysecret.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asmarketapp.AppKeysTable, asmarketapp.AppKeysColumn),
		)
		fromV = sqlgraph.Neighbors(ama.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAppPurchases queries the appPurchases edge of a AsMarketApp.
func (c *AsMarketAppClient) QueryAppPurchases(ama *AsMarketApp) *AsMarketAppPurchaseQuery {
	query := &AsMarketAppPurchaseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ama.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketapp.Table, asmarketapp.FieldID, id),
			sqlgraph.To(asmarketapppurchase.Table, asmarketapppurchase.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asmarketapp.AppPurchasesTable, asmarketapp.AppPurchasesColumn),
		)
		fromV = sqlgraph.Neighbors(ama.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAppComponents queries the appComponents edge of a AsMarketApp.
func (c *AsMarketAppClient) QueryAppComponents(ama *AsMarketApp) *AsMarketAppComponentQuery {
	query := &AsMarketAppComponentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ama.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketapp.Table, asmarketapp.FieldID, id),
			sqlgraph.To(asmarketappcomponent.Table, asmarketappcomponent.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asmarketapp.AppComponentsTable, asmarketapp.AppComponentsColumn),
		)
		fromV = sqlgraph.Neighbors(ama.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAppGroupDistribs queries the appGroupDistribs edge of a AsMarketApp.
func (c *AsMarketAppClient) QueryAppGroupDistribs(ama *AsMarketApp) *AsMarketAppGroupDistributionQuery {
	query := &AsMarketAppGroupDistributionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ama.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketapp.Table, asmarketapp.FieldID, id),
			sqlgraph.To(asmarketappgroupdistribution.Table, asmarketappgroupdistribution.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asmarketapp.AppGroupDistribsTable, asmarketapp.AppGroupDistribsColumn),
		)
		fromV = sqlgraph.Neighbors(ama.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAppGroupDistribConfigs queries the appGroupDistribConfigs edge of a AsMarketApp.
func (c *AsMarketAppClient) QueryAppGroupDistribConfigs(ama *AsMarketApp) *AsAppGroupDistributionDataQuery {
	query := &AsAppGroupDistributionDataQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ama.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketapp.Table, asmarketapp.FieldID, id),
			sqlgraph.To(asappgroupdistributiondata.Table, asappgroupdistributiondata.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asmarketapp.AppGroupDistribConfigsTable, asmarketapp.AppGroupDistribConfigsColumn),
		)
		fromV = sqlgraph.Neighbors(ama.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAppGroupDistribsRelation queries the appGroupDistribsRelation edge of a AsMarketApp.
func (c *AsMarketAppClient) QueryAppGroupDistribsRelation(ama *AsMarketApp) *AsMarketAppGroupDistributionRelationQuery {
	query := &AsMarketAppGroupDistributionRelationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ama.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketapp.Table, asmarketapp.FieldID, id),
			sqlgraph.To(asmarketappgroupdistributionrelation.Table, asmarketappgroupdistributionrelation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asmarketapp.AppGroupDistribsRelationTable, asmarketapp.AppGroupDistribsRelationColumn),
		)
		fromV = sqlgraph.Neighbors(ama.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// FindAppMenus queries the appMenus edge of a AsMarketApp.
func (c *AsMarketAppClient) FindAppMenus(ama *AsMarketApp) *AsMarketMenuQuery {
	return c.QueryAppMenus(ama).Where(asmarketmenu.IsDeleted(0))
}

// FindAppRoles queries the appRoles edge of a AsMarketApp.
func (c *AsMarketAppClient) FindAppRoles(ama *AsMarketApp) *AsMarketAppRoleQuery {
	return c.QueryAppRoles(ama).Where(asmarketapprole.IsDeleted(0))
}

// FindUseds queries the useds edge of a AsMarketApp.
func (c *AsMarketAppClient) FindUseds(ama *AsMarketApp) *AsMarketUsedAppQuery {
	return c.QueryUseds(ama).Where(asmarketusedapp.IsDeleted(0))
}

// FindAppAlerts queries the appAlerts edge of a AsMarketApp.
func (c *AsMarketAppClient) FindAppAlerts(ama *AsMarketApp) *AsMarketAppAlertQuery {
	return c.QueryAppAlerts(ama).Where(asmarketappalert.IsDeleted(0))
}

// FindAppRedeploys queries the appRedeploys edge of a AsMarketApp.
func (c *AsMarketAppClient) FindAppRedeploys(ama *AsMarketApp) *AsRedeployDataQuery {
	return c.QueryAppRedeploys(ama).Where(asredeploydata.IsDeleted(0))
}

// FindAppKeys queries the appKeys edge of a AsMarketApp.
func (c *AsMarketAppClient) FindAppKeys(ama *AsMarketApp) *AsMarketAppKeySecretQuery {
	return c.QueryAppKeys(ama).Where(asmarketappkeysecret.IsDeleted(0))
}

// FindAppPurchases queries the appPurchases edge of a AsMarketApp.
func (c *AsMarketAppClient) FindAppPurchases(ama *AsMarketApp) *AsMarketAppPurchaseQuery {
	return c.QueryAppPurchases(ama).Where(asmarketapppurchase.IsDeleted(0))
}

// FindAppComponents queries the appComponents edge of a AsMarketApp.
func (c *AsMarketAppClient) FindAppComponents(ama *AsMarketApp) *AsMarketAppComponentQuery {
	return c.QueryAppComponents(ama).Where(asmarketappcomponent.IsDeleted(0))
}

// FindAppGroupDistribs queries the appGroupDistribs edge of a AsMarketApp.
func (c *AsMarketAppClient) FindAppGroupDistribs(ama *AsMarketApp) *AsMarketAppGroupDistributionQuery {
	return c.QueryAppGroupDistribs(ama).Where(asmarketappgroupdistribution.IsDeleted(0))
}

// FindAppGroupDistribConfigs queries the appGroupDistribConfigs edge of a AsMarketApp.
func (c *AsMarketAppClient) FindAppGroupDistribConfigs(ama *AsMarketApp) *AsAppGroupDistributionDataQuery {
	return c.QueryAppGroupDistribConfigs(ama).Where(asappgroupdistributiondata.IsDeleted(0))
}

// FindAppGroupDistribsRelation queries the appGroupDistribsRelation edge of a AsMarketApp.
func (c *AsMarketAppClient) FindAppGroupDistribsRelation(ama *AsMarketApp) *AsMarketAppGroupDistributionRelationQuery {
	return c.QueryAppGroupDistribsRelation(ama).Where(asmarketappgroupdistributionrelation.IsDeleted(0))
}

// Hooks returns the client hooks.
func (c *AsMarketAppClient) Hooks() []Hook {
	return c.hooks.AsMarketApp
}

// AsMarketAppAlertClient is a client for the AsMarketAppAlert schema.
type AsMarketAppAlertClient struct {
	config
}

// NewAsMarketAppAlertClient returns a client for the AsMarketAppAlert from the given config.
func NewAsMarketAppAlertClient(c config) *AsMarketAppAlertClient {
	return &AsMarketAppAlertClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `asmarketappalert.Hooks(f(g(h())))`.
func (c *AsMarketAppAlertClient) Use(hooks ...Hook) {
	c.hooks.AsMarketAppAlert = append(c.hooks.AsMarketAppAlert, hooks...)
}

// Create returns a create builder for AsMarketAppAlert.
func (c *AsMarketAppAlertClient) Create() *AsMarketAppAlertCreate {
	mutation := newAsMarketAppAlertMutation(c.config, OpCreate)
	return &AsMarketAppAlertCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AsMarketAppAlert entities.
func (c *AsMarketAppAlertClient) CreateBulk(builders ...*AsMarketAppAlertCreate) *AsMarketAppAlertCreateBulk {
	return &AsMarketAppAlertCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AsMarketAppAlert.
func (c *AsMarketAppAlertClient) Update() *AsMarketAppAlertUpdate {
	mutation := newAsMarketAppAlertMutation(c.config, OpUpdate)
	return &AsMarketAppAlertUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AsMarketAppAlertClient) UpdateOne(amaa *AsMarketAppAlert) *AsMarketAppAlertUpdateOne {
	mutation := newAsMarketAppAlertMutation(c.config, OpUpdateOne, withAsMarketAppAlert(amaa))
	return &AsMarketAppAlertUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AsMarketAppAlertClient) UpdateOneID(id int64) *AsMarketAppAlertUpdateOne {
	mutation := newAsMarketAppAlertMutation(c.config, OpUpdateOne, withAsMarketAppAlertID(id))
	return &AsMarketAppAlertUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Remove returns an update builder for AsMarketAppAlert.
func (c *AsMarketAppAlertClient) Remove() *AsMarketAppAlertUpdate {
	return c.Update().SetIsDeleted(1)
}

// RemoveOne returns an update builder for the given entity.
func (c *AsMarketAppAlertClient) RemoveOne(amaa *AsMarketAppAlert) *AsMarketAppAlertUpdateOne {
	return c.UpdateOne(amaa).SetIsDeleted(1)
}

// RemoveOneID returns an update builder for the given id.
func (c *AsMarketAppAlertClient) RemoveOneID(id int64) *AsMarketAppAlertUpdateOne {
	return c.UpdateOneID(id).SetIsDeleted(1)
}

// Delete returns a delete builder for AsMarketAppAlert.
func (c *AsMarketAppAlertClient) Delete() *AsMarketAppAlertDelete {
	mutation := newAsMarketAppAlertMutation(c.config, OpDelete)
	return &AsMarketAppAlertDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AsMarketAppAlertClient) DeleteOne(amaa *AsMarketAppAlert) *AsMarketAppAlertDeleteOne {
	return c.DeleteOneID(amaa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AsMarketAppAlertClient) DeleteOneID(id int64) *AsMarketAppAlertDeleteOne {
	builder := c.Delete().Where(asmarketappalert.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AsMarketAppAlertDeleteOne{builder}
}

// Query returns a query builder for AsMarketAppAlert.
func (c *AsMarketAppAlertClient) Query() *AsMarketAppAlertQuery {
	return &AsMarketAppAlertQuery{
		config: c.config,
	}
}

// Find returns a query builder for AsMarketAppAlert, filter is_delete = 0.
func (c *AsMarketAppAlertClient) Find() *AsMarketAppAlertQuery {
	return c.Query().Where(asmarketappalert.IsDeleted(0))
}

// FindOne returns a AsMarketAppAlert entity by its id., filter is_delete = 0.
func (c *AsMarketAppAlertClient) FindOne(ctx context.Context, id int64) (*AsMarketAppAlert, error) {
	return c.Query().Where(asmarketappalert.IsDeleted(0), asmarketappalert.ID(id)).Only(ctx)
}

// FindOneX is like FindOne, but panics if an error occurs.
func (c *AsMarketAppAlertClient) FindOneX(ctx context.Context, id int64) *AsMarketAppAlert {
	obj, err := c.FindOne(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Get returns a AsMarketAppAlert entity by its id.
func (c *AsMarketAppAlertClient) Get(ctx context.Context, id int64) (*AsMarketAppAlert, error) {
	return c.Query().Where(asmarketappalert.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AsMarketAppAlertClient) GetX(ctx context.Context, id int64) *AsMarketAppAlert {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAppx queries the appx edge of a AsMarketAppAlert.
func (c *AsMarketAppAlertClient) QueryAppx(amaa *AsMarketAppAlert) *AsMarketAppQuery {
	query := &AsMarketAppQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := amaa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketappalert.Table, asmarketappalert.FieldID, id),
			sqlgraph.To(asmarketapp.Table, asmarketapp.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asmarketappalert.AppxTable, asmarketappalert.AppxColumn),
		)
		fromV = sqlgraph.Neighbors(amaa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// FindAppx queries the appx edge of a AsMarketAppAlert.
func (c *AsMarketAppAlertClient) FindAppx(amaa *AsMarketAppAlert) *AsMarketAppQuery {
	return c.QueryAppx(amaa).Where(asmarketapp.IsDeleted(0))
}

// Hooks returns the client hooks.
func (c *AsMarketAppAlertClient) Hooks() []Hook {
	return c.hooks.AsMarketAppAlert
}

// AsMarketAppComponentClient is a client for the AsMarketAppComponent schema.
type AsMarketAppComponentClient struct {
	config
}

// NewAsMarketAppComponentClient returns a client for the AsMarketAppComponent from the given config.
func NewAsMarketAppComponentClient(c config) *AsMarketAppComponentClient {
	return &AsMarketAppComponentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `asmarketappcomponent.Hooks(f(g(h())))`.
func (c *AsMarketAppComponentClient) Use(hooks ...Hook) {
	c.hooks.AsMarketAppComponent = append(c.hooks.AsMarketAppComponent, hooks...)
}

// Create returns a create builder for AsMarketAppComponent.
func (c *AsMarketAppComponentClient) Create() *AsMarketAppComponentCreate {
	mutation := newAsMarketAppComponentMutation(c.config, OpCreate)
	return &AsMarketAppComponentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AsMarketAppComponent entities.
func (c *AsMarketAppComponentClient) CreateBulk(builders ...*AsMarketAppComponentCreate) *AsMarketAppComponentCreateBulk {
	return &AsMarketAppComponentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AsMarketAppComponent.
func (c *AsMarketAppComponentClient) Update() *AsMarketAppComponentUpdate {
	mutation := newAsMarketAppComponentMutation(c.config, OpUpdate)
	return &AsMarketAppComponentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AsMarketAppComponentClient) UpdateOne(amac *AsMarketAppComponent) *AsMarketAppComponentUpdateOne {
	mutation := newAsMarketAppComponentMutation(c.config, OpUpdateOne, withAsMarketAppComponent(amac))
	return &AsMarketAppComponentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AsMarketAppComponentClient) UpdateOneID(id int64) *AsMarketAppComponentUpdateOne {
	mutation := newAsMarketAppComponentMutation(c.config, OpUpdateOne, withAsMarketAppComponentID(id))
	return &AsMarketAppComponentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Remove returns an update builder for AsMarketAppComponent.
func (c *AsMarketAppComponentClient) Remove() *AsMarketAppComponentUpdate {
	return c.Update().SetIsDeleted(1)
}

// RemoveOne returns an update builder for the given entity.
func (c *AsMarketAppComponentClient) RemoveOne(amac *AsMarketAppComponent) *AsMarketAppComponentUpdateOne {
	return c.UpdateOne(amac).SetIsDeleted(1)
}

// RemoveOneID returns an update builder for the given id.
func (c *AsMarketAppComponentClient) RemoveOneID(id int64) *AsMarketAppComponentUpdateOne {
	return c.UpdateOneID(id).SetIsDeleted(1)
}

// Delete returns a delete builder for AsMarketAppComponent.
func (c *AsMarketAppComponentClient) Delete() *AsMarketAppComponentDelete {
	mutation := newAsMarketAppComponentMutation(c.config, OpDelete)
	return &AsMarketAppComponentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AsMarketAppComponentClient) DeleteOne(amac *AsMarketAppComponent) *AsMarketAppComponentDeleteOne {
	return c.DeleteOneID(amac.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AsMarketAppComponentClient) DeleteOneID(id int64) *AsMarketAppComponentDeleteOne {
	builder := c.Delete().Where(asmarketappcomponent.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AsMarketAppComponentDeleteOne{builder}
}

// Query returns a query builder for AsMarketAppComponent.
func (c *AsMarketAppComponentClient) Query() *AsMarketAppComponentQuery {
	return &AsMarketAppComponentQuery{
		config: c.config,
	}
}

// Find returns a query builder for AsMarketAppComponent, filter is_delete = 0.
func (c *AsMarketAppComponentClient) Find() *AsMarketAppComponentQuery {
	return c.Query().Where(asmarketappcomponent.IsDeleted(0))
}

// FindOne returns a AsMarketAppComponent entity by its id., filter is_delete = 0.
func (c *AsMarketAppComponentClient) FindOne(ctx context.Context, id int64) (*AsMarketAppComponent, error) {
	return c.Query().Where(asmarketappcomponent.IsDeleted(0), asmarketappcomponent.ID(id)).Only(ctx)
}

// FindOneX is like FindOne, but panics if an error occurs.
func (c *AsMarketAppComponentClient) FindOneX(ctx context.Context, id int64) *AsMarketAppComponent {
	obj, err := c.FindOne(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Get returns a AsMarketAppComponent entity by its id.
func (c *AsMarketAppComponentClient) Get(ctx context.Context, id int64) (*AsMarketAppComponent, error) {
	return c.Query().Where(asmarketappcomponent.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AsMarketAppComponentClient) GetX(ctx context.Context, id int64) *AsMarketAppComponent {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAppx queries the appx edge of a AsMarketAppComponent.
func (c *AsMarketAppComponentClient) QueryAppx(amac *AsMarketAppComponent) *AsMarketAppQuery {
	query := &AsMarketAppQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := amac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketappcomponent.Table, asmarketappcomponent.FieldID, id),
			sqlgraph.To(asmarketapp.Table, asmarketapp.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asmarketappcomponent.AppxTable, asmarketappcomponent.AppxColumn),
		)
		fromV = sqlgraph.Neighbors(amac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// FindAppx queries the appx edge of a AsMarketAppComponent.
func (c *AsMarketAppComponentClient) FindAppx(amac *AsMarketAppComponent) *AsMarketAppQuery {
	return c.QueryAppx(amac).Where(asmarketapp.IsDeleted(0))
}

// Hooks returns the client hooks.
func (c *AsMarketAppComponentClient) Hooks() []Hook {
	return c.hooks.AsMarketAppComponent
}

// AsMarketAppComponentTemplateClient is a client for the AsMarketAppComponentTemplate schema.
type AsMarketAppComponentTemplateClient struct {
	config
}

// NewAsMarketAppComponentTemplateClient returns a client for the AsMarketAppComponentTemplate from the given config.
func NewAsMarketAppComponentTemplateClient(c config) *AsMarketAppComponentTemplateClient {
	return &AsMarketAppComponentTemplateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `asmarketappcomponenttemplate.Hooks(f(g(h())))`.
func (c *AsMarketAppComponentTemplateClient) Use(hooks ...Hook) {
	c.hooks.AsMarketAppComponentTemplate = append(c.hooks.AsMarketAppComponentTemplate, hooks...)
}

// Create returns a create builder for AsMarketAppComponentTemplate.
func (c *AsMarketAppComponentTemplateClient) Create() *AsMarketAppComponentTemplateCreate {
	mutation := newAsMarketAppComponentTemplateMutation(c.config, OpCreate)
	return &AsMarketAppComponentTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AsMarketAppComponentTemplate entities.
func (c *AsMarketAppComponentTemplateClient) CreateBulk(builders ...*AsMarketAppComponentTemplateCreate) *AsMarketAppComponentTemplateCreateBulk {
	return &AsMarketAppComponentTemplateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AsMarketAppComponentTemplate.
func (c *AsMarketAppComponentTemplateClient) Update() *AsMarketAppComponentTemplateUpdate {
	mutation := newAsMarketAppComponentTemplateMutation(c.config, OpUpdate)
	return &AsMarketAppComponentTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AsMarketAppComponentTemplateClient) UpdateOne(amact *AsMarketAppComponentTemplate) *AsMarketAppComponentTemplateUpdateOne {
	mutation := newAsMarketAppComponentTemplateMutation(c.config, OpUpdateOne, withAsMarketAppComponentTemplate(amact))
	return &AsMarketAppComponentTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AsMarketAppComponentTemplateClient) UpdateOneID(id int64) *AsMarketAppComponentTemplateUpdateOne {
	mutation := newAsMarketAppComponentTemplateMutation(c.config, OpUpdateOne, withAsMarketAppComponentTemplateID(id))
	return &AsMarketAppComponentTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Remove returns an update builder for AsMarketAppComponentTemplate.
func (c *AsMarketAppComponentTemplateClient) Remove() *AsMarketAppComponentTemplateUpdate {
	return c.Update().SetIsDeleted(1)
}

// RemoveOne returns an update builder for the given entity.
func (c *AsMarketAppComponentTemplateClient) RemoveOne(amact *AsMarketAppComponentTemplate) *AsMarketAppComponentTemplateUpdateOne {
	return c.UpdateOne(amact).SetIsDeleted(1)
}

// RemoveOneID returns an update builder for the given id.
func (c *AsMarketAppComponentTemplateClient) RemoveOneID(id int64) *AsMarketAppComponentTemplateUpdateOne {
	return c.UpdateOneID(id).SetIsDeleted(1)
}

// Delete returns a delete builder for AsMarketAppComponentTemplate.
func (c *AsMarketAppComponentTemplateClient) Delete() *AsMarketAppComponentTemplateDelete {
	mutation := newAsMarketAppComponentTemplateMutation(c.config, OpDelete)
	return &AsMarketAppComponentTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AsMarketAppComponentTemplateClient) DeleteOne(amact *AsMarketAppComponentTemplate) *AsMarketAppComponentTemplateDeleteOne {
	return c.DeleteOneID(amact.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AsMarketAppComponentTemplateClient) DeleteOneID(id int64) *AsMarketAppComponentTemplateDeleteOne {
	builder := c.Delete().Where(asmarketappcomponenttemplate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AsMarketAppComponentTemplateDeleteOne{builder}
}

// Query returns a query builder for AsMarketAppComponentTemplate.
func (c *AsMarketAppComponentTemplateClient) Query() *AsMarketAppComponentTemplateQuery {
	return &AsMarketAppComponentTemplateQuery{
		config: c.config,
	}
}

// Find returns a query builder for AsMarketAppComponentTemplate, filter is_delete = 0.
func (c *AsMarketAppComponentTemplateClient) Find() *AsMarketAppComponentTemplateQuery {
	return c.Query().Where(asmarketappcomponenttemplate.IsDeleted(0))
}

// FindOne returns a AsMarketAppComponentTemplate entity by its id., filter is_delete = 0.
func (c *AsMarketAppComponentTemplateClient) FindOne(ctx context.Context, id int64) (*AsMarketAppComponentTemplate, error) {
	return c.Query().Where(asmarketappcomponenttemplate.IsDeleted(0), asmarketappcomponenttemplate.ID(id)).Only(ctx)
}

// FindOneX is like FindOne, but panics if an error occurs.
func (c *AsMarketAppComponentTemplateClient) FindOneX(ctx context.Context, id int64) *AsMarketAppComponentTemplate {
	obj, err := c.FindOne(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Get returns a AsMarketAppComponentTemplate entity by its id.
func (c *AsMarketAppComponentTemplateClient) Get(ctx context.Context, id int64) (*AsMarketAppComponentTemplate, error) {
	return c.Query().Where(asmarketappcomponenttemplate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AsMarketAppComponentTemplateClient) GetX(ctx context.Context, id int64) *AsMarketAppComponentTemplate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAppUserTemplates queries the appUserTemplates edge of a AsMarketAppComponentTemplate.
func (c *AsMarketAppComponentTemplateClient) QueryAppUserTemplates(amact *AsMarketAppComponentTemplate) *AsMarketAppUserTemplateQuery {
	query := &AsMarketAppUserTemplateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := amact.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketappcomponenttemplate.Table, asmarketappcomponenttemplate.FieldID, id),
			sqlgraph.To(asmarketappusertemplate.Table, asmarketappusertemplate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asmarketappcomponenttemplate.AppUserTemplatesTable, asmarketappcomponenttemplate.AppUserTemplatesColumn),
		)
		fromV = sqlgraph.Neighbors(amact.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// FindAppUserTemplates queries the appUserTemplates edge of a AsMarketAppComponentTemplate.
func (c *AsMarketAppComponentTemplateClient) FindAppUserTemplates(amact *AsMarketAppComponentTemplate) *AsMarketAppUserTemplateQuery {
	return c.QueryAppUserTemplates(amact).Where(asmarketappusertemplate.IsDeleted(0))
}

// Hooks returns the client hooks.
func (c *AsMarketAppComponentTemplateClient) Hooks() []Hook {
	return c.hooks.AsMarketAppComponentTemplate
}

// AsMarketAppGroupDistributionClient is a client for the AsMarketAppGroupDistribution schema.
type AsMarketAppGroupDistributionClient struct {
	config
}

// NewAsMarketAppGroupDistributionClient returns a client for the AsMarketAppGroupDistribution from the given config.
func NewAsMarketAppGroupDistributionClient(c config) *AsMarketAppGroupDistributionClient {
	return &AsMarketAppGroupDistributionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `asmarketappgroupdistribution.Hooks(f(g(h())))`.
func (c *AsMarketAppGroupDistributionClient) Use(hooks ...Hook) {
	c.hooks.AsMarketAppGroupDistribution = append(c.hooks.AsMarketAppGroupDistribution, hooks...)
}

// Create returns a create builder for AsMarketAppGroupDistribution.
func (c *AsMarketAppGroupDistributionClient) Create() *AsMarketAppGroupDistributionCreate {
	mutation := newAsMarketAppGroupDistributionMutation(c.config, OpCreate)
	return &AsMarketAppGroupDistributionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AsMarketAppGroupDistribution entities.
func (c *AsMarketAppGroupDistributionClient) CreateBulk(builders ...*AsMarketAppGroupDistributionCreate) *AsMarketAppGroupDistributionCreateBulk {
	return &AsMarketAppGroupDistributionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AsMarketAppGroupDistribution.
func (c *AsMarketAppGroupDistributionClient) Update() *AsMarketAppGroupDistributionUpdate {
	mutation := newAsMarketAppGroupDistributionMutation(c.config, OpUpdate)
	return &AsMarketAppGroupDistributionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AsMarketAppGroupDistributionClient) UpdateOne(amagd *AsMarketAppGroupDistribution) *AsMarketAppGroupDistributionUpdateOne {
	mutation := newAsMarketAppGroupDistributionMutation(c.config, OpUpdateOne, withAsMarketAppGroupDistribution(amagd))
	return &AsMarketAppGroupDistributionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AsMarketAppGroupDistributionClient) UpdateOneID(id int64) *AsMarketAppGroupDistributionUpdateOne {
	mutation := newAsMarketAppGroupDistributionMutation(c.config, OpUpdateOne, withAsMarketAppGroupDistributionID(id))
	return &AsMarketAppGroupDistributionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Remove returns an update builder for AsMarketAppGroupDistribution.
func (c *AsMarketAppGroupDistributionClient) Remove() *AsMarketAppGroupDistributionUpdate {
	return c.Update().SetIsDeleted(1)
}

// RemoveOne returns an update builder for the given entity.
func (c *AsMarketAppGroupDistributionClient) RemoveOne(amagd *AsMarketAppGroupDistribution) *AsMarketAppGroupDistributionUpdateOne {
	return c.UpdateOne(amagd).SetIsDeleted(1)
}

// RemoveOneID returns an update builder for the given id.
func (c *AsMarketAppGroupDistributionClient) RemoveOneID(id int64) *AsMarketAppGroupDistributionUpdateOne {
	return c.UpdateOneID(id).SetIsDeleted(1)
}

// Delete returns a delete builder for AsMarketAppGroupDistribution.
func (c *AsMarketAppGroupDistributionClient) Delete() *AsMarketAppGroupDistributionDelete {
	mutation := newAsMarketAppGroupDistributionMutation(c.config, OpDelete)
	return &AsMarketAppGroupDistributionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AsMarketAppGroupDistributionClient) DeleteOne(amagd *AsMarketAppGroupDistribution) *AsMarketAppGroupDistributionDeleteOne {
	return c.DeleteOneID(amagd.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AsMarketAppGroupDistributionClient) DeleteOneID(id int64) *AsMarketAppGroupDistributionDeleteOne {
	builder := c.Delete().Where(asmarketappgroupdistribution.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AsMarketAppGroupDistributionDeleteOne{builder}
}

// Query returns a query builder for AsMarketAppGroupDistribution.
func (c *AsMarketAppGroupDistributionClient) Query() *AsMarketAppGroupDistributionQuery {
	return &AsMarketAppGroupDistributionQuery{
		config: c.config,
	}
}

// Find returns a query builder for AsMarketAppGroupDistribution, filter is_delete = 0.
func (c *AsMarketAppGroupDistributionClient) Find() *AsMarketAppGroupDistributionQuery {
	return c.Query().Where(asmarketappgroupdistribution.IsDeleted(0))
}

// FindOne returns a AsMarketAppGroupDistribution entity by its id., filter is_delete = 0.
func (c *AsMarketAppGroupDistributionClient) FindOne(ctx context.Context, id int64) (*AsMarketAppGroupDistribution, error) {
	return c.Query().Where(asmarketappgroupdistribution.IsDeleted(0), asmarketappgroupdistribution.ID(id)).Only(ctx)
}

// FindOneX is like FindOne, but panics if an error occurs.
func (c *AsMarketAppGroupDistributionClient) FindOneX(ctx context.Context, id int64) *AsMarketAppGroupDistribution {
	obj, err := c.FindOne(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Get returns a AsMarketAppGroupDistribution entity by its id.
func (c *AsMarketAppGroupDistributionClient) Get(ctx context.Context, id int64) (*AsMarketAppGroupDistribution, error) {
	return c.Query().Where(asmarketappgroupdistribution.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AsMarketAppGroupDistributionClient) GetX(ctx context.Context, id int64) *AsMarketAppGroupDistribution {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAppx queries the appx edge of a AsMarketAppGroupDistribution.
func (c *AsMarketAppGroupDistributionClient) QueryAppx(amagd *AsMarketAppGroupDistribution) *AsMarketAppQuery {
	query := &AsMarketAppQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := amagd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketappgroupdistribution.Table, asmarketappgroupdistribution.FieldID, id),
			sqlgraph.To(asmarketapp.Table, asmarketapp.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asmarketappgroupdistribution.AppxTable, asmarketappgroupdistribution.AppxColumn),
		)
		fromV = sqlgraph.Neighbors(amagd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGroupx queries the groupx edge of a AsMarketAppGroupDistribution.
func (c *AsMarketAppGroupDistributionClient) QueryGroupx(amagd *AsMarketAppGroupDistribution) *AsAllGroupQuery {
	query := &AsAllGroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := amagd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketappgroupdistribution.Table, asmarketappgroupdistribution.FieldID, id),
			sqlgraph.To(asallgroup.Table, asallgroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asmarketappgroupdistribution.GroupxTable, asmarketappgroupdistribution.GroupxColumn),
		)
		fromV = sqlgraph.Neighbors(amagd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// FindAppx queries the appx edge of a AsMarketAppGroupDistribution.
func (c *AsMarketAppGroupDistributionClient) FindAppx(amagd *AsMarketAppGroupDistribution) *AsMarketAppQuery {
	return c.QueryAppx(amagd).Where(asmarketapp.IsDeleted(0))
}

// FindGroupx queries the groupx edge of a AsMarketAppGroupDistribution.
func (c *AsMarketAppGroupDistributionClient) FindGroupx(amagd *AsMarketAppGroupDistribution) *AsAllGroupQuery {
	return c.QueryGroupx(amagd).Where(asallgroup.IsDeleted(0))
}

// Hooks returns the client hooks.
func (c *AsMarketAppGroupDistributionClient) Hooks() []Hook {
	return c.hooks.AsMarketAppGroupDistribution
}

// AsMarketAppGroupDistributionRelationClient is a client for the AsMarketAppGroupDistributionRelation schema.
type AsMarketAppGroupDistributionRelationClient struct {
	config
}

// NewAsMarketAppGroupDistributionRelationClient returns a client for the AsMarketAppGroupDistributionRelation from the given config.
func NewAsMarketAppGroupDistributionRelationClient(c config) *AsMarketAppGroupDistributionRelationClient {
	return &AsMarketAppGroupDistributionRelationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `asmarketappgroupdistributionrelation.Hooks(f(g(h())))`.
func (c *AsMarketAppGroupDistributionRelationClient) Use(hooks ...Hook) {
	c.hooks.AsMarketAppGroupDistributionRelation = append(c.hooks.AsMarketAppGroupDistributionRelation, hooks...)
}

// Create returns a create builder for AsMarketAppGroupDistributionRelation.
func (c *AsMarketAppGroupDistributionRelationClient) Create() *AsMarketAppGroupDistributionRelationCreate {
	mutation := newAsMarketAppGroupDistributionRelationMutation(c.config, OpCreate)
	return &AsMarketAppGroupDistributionRelationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AsMarketAppGroupDistributionRelation entities.
func (c *AsMarketAppGroupDistributionRelationClient) CreateBulk(builders ...*AsMarketAppGroupDistributionRelationCreate) *AsMarketAppGroupDistributionRelationCreateBulk {
	return &AsMarketAppGroupDistributionRelationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AsMarketAppGroupDistributionRelation.
func (c *AsMarketAppGroupDistributionRelationClient) Update() *AsMarketAppGroupDistributionRelationUpdate {
	mutation := newAsMarketAppGroupDistributionRelationMutation(c.config, OpUpdate)
	return &AsMarketAppGroupDistributionRelationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AsMarketAppGroupDistributionRelationClient) UpdateOne(amagdr *AsMarketAppGroupDistributionRelation) *AsMarketAppGroupDistributionRelationUpdateOne {
	mutation := newAsMarketAppGroupDistributionRelationMutation(c.config, OpUpdateOne, withAsMarketAppGroupDistributionRelation(amagdr))
	return &AsMarketAppGroupDistributionRelationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AsMarketAppGroupDistributionRelationClient) UpdateOneID(id int64) *AsMarketAppGroupDistributionRelationUpdateOne {
	mutation := newAsMarketAppGroupDistributionRelationMutation(c.config, OpUpdateOne, withAsMarketAppGroupDistributionRelationID(id))
	return &AsMarketAppGroupDistributionRelationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Remove returns an update builder for AsMarketAppGroupDistributionRelation.
func (c *AsMarketAppGroupDistributionRelationClient) Remove() *AsMarketAppGroupDistributionRelationUpdate {
	return c.Update().SetIsDeleted(1)
}

// RemoveOne returns an update builder for the given entity.
func (c *AsMarketAppGroupDistributionRelationClient) RemoveOne(amagdr *AsMarketAppGroupDistributionRelation) *AsMarketAppGroupDistributionRelationUpdateOne {
	return c.UpdateOne(amagdr).SetIsDeleted(1)
}

// RemoveOneID returns an update builder for the given id.
func (c *AsMarketAppGroupDistributionRelationClient) RemoveOneID(id int64) *AsMarketAppGroupDistributionRelationUpdateOne {
	return c.UpdateOneID(id).SetIsDeleted(1)
}

// Delete returns a delete builder for AsMarketAppGroupDistributionRelation.
func (c *AsMarketAppGroupDistributionRelationClient) Delete() *AsMarketAppGroupDistributionRelationDelete {
	mutation := newAsMarketAppGroupDistributionRelationMutation(c.config, OpDelete)
	return &AsMarketAppGroupDistributionRelationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AsMarketAppGroupDistributionRelationClient) DeleteOne(amagdr *AsMarketAppGroupDistributionRelation) *AsMarketAppGroupDistributionRelationDeleteOne {
	return c.DeleteOneID(amagdr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AsMarketAppGroupDistributionRelationClient) DeleteOneID(id int64) *AsMarketAppGroupDistributionRelationDeleteOne {
	builder := c.Delete().Where(asmarketappgroupdistributionrelation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AsMarketAppGroupDistributionRelationDeleteOne{builder}
}

// Query returns a query builder for AsMarketAppGroupDistributionRelation.
func (c *AsMarketAppGroupDistributionRelationClient) Query() *AsMarketAppGroupDistributionRelationQuery {
	return &AsMarketAppGroupDistributionRelationQuery{
		config: c.config,
	}
}

// Find returns a query builder for AsMarketAppGroupDistributionRelation, filter is_delete = 0.
func (c *AsMarketAppGroupDistributionRelationClient) Find() *AsMarketAppGroupDistributionRelationQuery {
	return c.Query().Where(asmarketappgroupdistributionrelation.IsDeleted(0))
}

// FindOne returns a AsMarketAppGroupDistributionRelation entity by its id., filter is_delete = 0.
func (c *AsMarketAppGroupDistributionRelationClient) FindOne(ctx context.Context, id int64) (*AsMarketAppGroupDistributionRelation, error) {
	return c.Query().Where(asmarketappgroupdistributionrelation.IsDeleted(0), asmarketappgroupdistributionrelation.ID(id)).Only(ctx)
}

// FindOneX is like FindOne, but panics if an error occurs.
func (c *AsMarketAppGroupDistributionRelationClient) FindOneX(ctx context.Context, id int64) *AsMarketAppGroupDistributionRelation {
	obj, err := c.FindOne(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Get returns a AsMarketAppGroupDistributionRelation entity by its id.
func (c *AsMarketAppGroupDistributionRelationClient) Get(ctx context.Context, id int64) (*AsMarketAppGroupDistributionRelation, error) {
	return c.Query().Where(asmarketappgroupdistributionrelation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AsMarketAppGroupDistributionRelationClient) GetX(ctx context.Context, id int64) *AsMarketAppGroupDistributionRelation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAppx queries the appx edge of a AsMarketAppGroupDistributionRelation.
func (c *AsMarketAppGroupDistributionRelationClient) QueryAppx(amagdr *AsMarketAppGroupDistributionRelation) *AsMarketAppQuery {
	query := &AsMarketAppQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := amagdr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketappgroupdistributionrelation.Table, asmarketappgroupdistributionrelation.FieldID, id),
			sqlgraph.To(asmarketapp.Table, asmarketapp.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asmarketappgroupdistributionrelation.AppxTable, asmarketappgroupdistributionrelation.AppxColumn),
		)
		fromV = sqlgraph.Neighbors(amagdr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGroupx queries the groupx edge of a AsMarketAppGroupDistributionRelation.
func (c *AsMarketAppGroupDistributionRelationClient) QueryGroupx(amagdr *AsMarketAppGroupDistributionRelation) *AsAllGroupQuery {
	query := &AsAllGroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := amagdr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketappgroupdistributionrelation.Table, asmarketappgroupdistributionrelation.FieldID, id),
			sqlgraph.To(asallgroup.Table, asallgroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asmarketappgroupdistributionrelation.GroupxTable, asmarketappgroupdistributionrelation.GroupxColumn),
		)
		fromV = sqlgraph.Neighbors(amagdr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// FindAppx queries the appx edge of a AsMarketAppGroupDistributionRelation.
func (c *AsMarketAppGroupDistributionRelationClient) FindAppx(amagdr *AsMarketAppGroupDistributionRelation) *AsMarketAppQuery {
	return c.QueryAppx(amagdr).Where(asmarketapp.IsDeleted(0))
}

// FindGroupx queries the groupx edge of a AsMarketAppGroupDistributionRelation.
func (c *AsMarketAppGroupDistributionRelationClient) FindGroupx(amagdr *AsMarketAppGroupDistributionRelation) *AsAllGroupQuery {
	return c.QueryGroupx(amagdr).Where(asallgroup.IsDeleted(0))
}

// Hooks returns the client hooks.
func (c *AsMarketAppGroupDistributionRelationClient) Hooks() []Hook {
	return c.hooks.AsMarketAppGroupDistributionRelation
}

// AsMarketAppKeySecretClient is a client for the AsMarketAppKeySecret schema.
type AsMarketAppKeySecretClient struct {
	config
}

// NewAsMarketAppKeySecretClient returns a client for the AsMarketAppKeySecret from the given config.
func NewAsMarketAppKeySecretClient(c config) *AsMarketAppKeySecretClient {
	return &AsMarketAppKeySecretClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `asmarketappkeysecret.Hooks(f(g(h())))`.
func (c *AsMarketAppKeySecretClient) Use(hooks ...Hook) {
	c.hooks.AsMarketAppKeySecret = append(c.hooks.AsMarketAppKeySecret, hooks...)
}

// Create returns a create builder for AsMarketAppKeySecret.
func (c *AsMarketAppKeySecretClient) Create() *AsMarketAppKeySecretCreate {
	mutation := newAsMarketAppKeySecretMutation(c.config, OpCreate)
	return &AsMarketAppKeySecretCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AsMarketAppKeySecret entities.
func (c *AsMarketAppKeySecretClient) CreateBulk(builders ...*AsMarketAppKeySecretCreate) *AsMarketAppKeySecretCreateBulk {
	return &AsMarketAppKeySecretCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AsMarketAppKeySecret.
func (c *AsMarketAppKeySecretClient) Update() *AsMarketAppKeySecretUpdate {
	mutation := newAsMarketAppKeySecretMutation(c.config, OpUpdate)
	return &AsMarketAppKeySecretUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AsMarketAppKeySecretClient) UpdateOne(amaks *AsMarketAppKeySecret) *AsMarketAppKeySecretUpdateOne {
	mutation := newAsMarketAppKeySecretMutation(c.config, OpUpdateOne, withAsMarketAppKeySecret(amaks))
	return &AsMarketAppKeySecretUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AsMarketAppKeySecretClient) UpdateOneID(id int64) *AsMarketAppKeySecretUpdateOne {
	mutation := newAsMarketAppKeySecretMutation(c.config, OpUpdateOne, withAsMarketAppKeySecretID(id))
	return &AsMarketAppKeySecretUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Remove returns an update builder for AsMarketAppKeySecret.
func (c *AsMarketAppKeySecretClient) Remove() *AsMarketAppKeySecretUpdate {
	return c.Update().SetIsDeleted(1)
}

// RemoveOne returns an update builder for the given entity.
func (c *AsMarketAppKeySecretClient) RemoveOne(amaks *AsMarketAppKeySecret) *AsMarketAppKeySecretUpdateOne {
	return c.UpdateOne(amaks).SetIsDeleted(1)
}

// RemoveOneID returns an update builder for the given id.
func (c *AsMarketAppKeySecretClient) RemoveOneID(id int64) *AsMarketAppKeySecretUpdateOne {
	return c.UpdateOneID(id).SetIsDeleted(1)
}

// Delete returns a delete builder for AsMarketAppKeySecret.
func (c *AsMarketAppKeySecretClient) Delete() *AsMarketAppKeySecretDelete {
	mutation := newAsMarketAppKeySecretMutation(c.config, OpDelete)
	return &AsMarketAppKeySecretDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AsMarketAppKeySecretClient) DeleteOne(amaks *AsMarketAppKeySecret) *AsMarketAppKeySecretDeleteOne {
	return c.DeleteOneID(amaks.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AsMarketAppKeySecretClient) DeleteOneID(id int64) *AsMarketAppKeySecretDeleteOne {
	builder := c.Delete().Where(asmarketappkeysecret.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AsMarketAppKeySecretDeleteOne{builder}
}

// Query returns a query builder for AsMarketAppKeySecret.
func (c *AsMarketAppKeySecretClient) Query() *AsMarketAppKeySecretQuery {
	return &AsMarketAppKeySecretQuery{
		config: c.config,
	}
}

// Find returns a query builder for AsMarketAppKeySecret, filter is_delete = 0.
func (c *AsMarketAppKeySecretClient) Find() *AsMarketAppKeySecretQuery {
	return c.Query().Where(asmarketappkeysecret.IsDeleted(0))
}

// FindOne returns a AsMarketAppKeySecret entity by its id., filter is_delete = 0.
func (c *AsMarketAppKeySecretClient) FindOne(ctx context.Context, id int64) (*AsMarketAppKeySecret, error) {
	return c.Query().Where(asmarketappkeysecret.IsDeleted(0), asmarketappkeysecret.ID(id)).Only(ctx)
}

// FindOneX is like FindOne, but panics if an error occurs.
func (c *AsMarketAppKeySecretClient) FindOneX(ctx context.Context, id int64) *AsMarketAppKeySecret {
	obj, err := c.FindOne(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Get returns a AsMarketAppKeySecret entity by its id.
func (c *AsMarketAppKeySecretClient) Get(ctx context.Context, id int64) (*AsMarketAppKeySecret, error) {
	return c.Query().Where(asmarketappkeysecret.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AsMarketAppKeySecretClient) GetX(ctx context.Context, id int64) *AsMarketAppKeySecret {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAppx queries the appx edge of a AsMarketAppKeySecret.
func (c *AsMarketAppKeySecretClient) QueryAppx(amaks *AsMarketAppKeySecret) *AsMarketAppQuery {
	query := &AsMarketAppQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := amaks.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketappkeysecret.Table, asmarketappkeysecret.FieldID, id),
			sqlgraph.To(asmarketapp.Table, asmarketapp.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asmarketappkeysecret.AppxTable, asmarketappkeysecret.AppxColumn),
		)
		fromV = sqlgraph.Neighbors(amaks.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// FindAppx queries the appx edge of a AsMarketAppKeySecret.
func (c *AsMarketAppKeySecretClient) FindAppx(amaks *AsMarketAppKeySecret) *AsMarketAppQuery {
	return c.QueryAppx(amaks).Where(asmarketapp.IsDeleted(0))
}

// Hooks returns the client hooks.
func (c *AsMarketAppKeySecretClient) Hooks() []Hook {
	return c.hooks.AsMarketAppKeySecret
}

// AsMarketAppNoticeClient is a client for the AsMarketAppNotice schema.
type AsMarketAppNoticeClient struct {
	config
}

// NewAsMarketAppNoticeClient returns a client for the AsMarketAppNotice from the given config.
func NewAsMarketAppNoticeClient(c config) *AsMarketAppNoticeClient {
	return &AsMarketAppNoticeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `asmarketappnotice.Hooks(f(g(h())))`.
func (c *AsMarketAppNoticeClient) Use(hooks ...Hook) {
	c.hooks.AsMarketAppNotice = append(c.hooks.AsMarketAppNotice, hooks...)
}

// Create returns a create builder for AsMarketAppNotice.
func (c *AsMarketAppNoticeClient) Create() *AsMarketAppNoticeCreate {
	mutation := newAsMarketAppNoticeMutation(c.config, OpCreate)
	return &AsMarketAppNoticeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AsMarketAppNotice entities.
func (c *AsMarketAppNoticeClient) CreateBulk(builders ...*AsMarketAppNoticeCreate) *AsMarketAppNoticeCreateBulk {
	return &AsMarketAppNoticeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AsMarketAppNotice.
func (c *AsMarketAppNoticeClient) Update() *AsMarketAppNoticeUpdate {
	mutation := newAsMarketAppNoticeMutation(c.config, OpUpdate)
	return &AsMarketAppNoticeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AsMarketAppNoticeClient) UpdateOne(aman *AsMarketAppNotice) *AsMarketAppNoticeUpdateOne {
	mutation := newAsMarketAppNoticeMutation(c.config, OpUpdateOne, withAsMarketAppNotice(aman))
	return &AsMarketAppNoticeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AsMarketAppNoticeClient) UpdateOneID(id int64) *AsMarketAppNoticeUpdateOne {
	mutation := newAsMarketAppNoticeMutation(c.config, OpUpdateOne, withAsMarketAppNoticeID(id))
	return &AsMarketAppNoticeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Remove returns an update builder for AsMarketAppNotice.
func (c *AsMarketAppNoticeClient) Remove() *AsMarketAppNoticeUpdate {
	return c.Update().SetIsDeleted(1)
}

// RemoveOne returns an update builder for the given entity.
func (c *AsMarketAppNoticeClient) RemoveOne(aman *AsMarketAppNotice) *AsMarketAppNoticeUpdateOne {
	return c.UpdateOne(aman).SetIsDeleted(1)
}

// RemoveOneID returns an update builder for the given id.
func (c *AsMarketAppNoticeClient) RemoveOneID(id int64) *AsMarketAppNoticeUpdateOne {
	return c.UpdateOneID(id).SetIsDeleted(1)
}

// Delete returns a delete builder for AsMarketAppNotice.
func (c *AsMarketAppNoticeClient) Delete() *AsMarketAppNoticeDelete {
	mutation := newAsMarketAppNoticeMutation(c.config, OpDelete)
	return &AsMarketAppNoticeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AsMarketAppNoticeClient) DeleteOne(aman *AsMarketAppNotice) *AsMarketAppNoticeDeleteOne {
	return c.DeleteOneID(aman.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AsMarketAppNoticeClient) DeleteOneID(id int64) *AsMarketAppNoticeDeleteOne {
	builder := c.Delete().Where(asmarketappnotice.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AsMarketAppNoticeDeleteOne{builder}
}

// Query returns a query builder for AsMarketAppNotice.
func (c *AsMarketAppNoticeClient) Query() *AsMarketAppNoticeQuery {
	return &AsMarketAppNoticeQuery{
		config: c.config,
	}
}

// Find returns a query builder for AsMarketAppNotice, filter is_delete = 0.
func (c *AsMarketAppNoticeClient) Find() *AsMarketAppNoticeQuery {
	return c.Query().Where(asmarketappnotice.IsDeleted(0))
}

// FindOne returns a AsMarketAppNotice entity by its id., filter is_delete = 0.
func (c *AsMarketAppNoticeClient) FindOne(ctx context.Context, id int64) (*AsMarketAppNotice, error) {
	return c.Query().Where(asmarketappnotice.IsDeleted(0), asmarketappnotice.ID(id)).Only(ctx)
}

// FindOneX is like FindOne, but panics if an error occurs.
func (c *AsMarketAppNoticeClient) FindOneX(ctx context.Context, id int64) *AsMarketAppNotice {
	obj, err := c.FindOne(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Get returns a AsMarketAppNotice entity by its id.
func (c *AsMarketAppNoticeClient) Get(ctx context.Context, id int64) (*AsMarketAppNotice, error) {
	return c.Query().Where(asmarketappnotice.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AsMarketAppNoticeClient) GetX(ctx context.Context, id int64) *AsMarketAppNotice {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AsMarketAppNoticeClient) Hooks() []Hook {
	return c.hooks.AsMarketAppNotice
}

// AsMarketAppPurchaseClient is a client for the AsMarketAppPurchase schema.
type AsMarketAppPurchaseClient struct {
	config
}

// NewAsMarketAppPurchaseClient returns a client for the AsMarketAppPurchase from the given config.
func NewAsMarketAppPurchaseClient(c config) *AsMarketAppPurchaseClient {
	return &AsMarketAppPurchaseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `asmarketapppurchase.Hooks(f(g(h())))`.
func (c *AsMarketAppPurchaseClient) Use(hooks ...Hook) {
	c.hooks.AsMarketAppPurchase = append(c.hooks.AsMarketAppPurchase, hooks...)
}

// Create returns a create builder for AsMarketAppPurchase.
func (c *AsMarketAppPurchaseClient) Create() *AsMarketAppPurchaseCreate {
	mutation := newAsMarketAppPurchaseMutation(c.config, OpCreate)
	return &AsMarketAppPurchaseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AsMarketAppPurchase entities.
func (c *AsMarketAppPurchaseClient) CreateBulk(builders ...*AsMarketAppPurchaseCreate) *AsMarketAppPurchaseCreateBulk {
	return &AsMarketAppPurchaseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AsMarketAppPurchase.
func (c *AsMarketAppPurchaseClient) Update() *AsMarketAppPurchaseUpdate {
	mutation := newAsMarketAppPurchaseMutation(c.config, OpUpdate)
	return &AsMarketAppPurchaseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AsMarketAppPurchaseClient) UpdateOne(amap *AsMarketAppPurchase) *AsMarketAppPurchaseUpdateOne {
	mutation := newAsMarketAppPurchaseMutation(c.config, OpUpdateOne, withAsMarketAppPurchase(amap))
	return &AsMarketAppPurchaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AsMarketAppPurchaseClient) UpdateOneID(id int64) *AsMarketAppPurchaseUpdateOne {
	mutation := newAsMarketAppPurchaseMutation(c.config, OpUpdateOne, withAsMarketAppPurchaseID(id))
	return &AsMarketAppPurchaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Remove returns an update builder for AsMarketAppPurchase.
func (c *AsMarketAppPurchaseClient) Remove() *AsMarketAppPurchaseUpdate {
	return c.Update().SetIsDeleted(1)
}

// RemoveOne returns an update builder for the given entity.
func (c *AsMarketAppPurchaseClient) RemoveOne(amap *AsMarketAppPurchase) *AsMarketAppPurchaseUpdateOne {
	return c.UpdateOne(amap).SetIsDeleted(1)
}

// RemoveOneID returns an update builder for the given id.
func (c *AsMarketAppPurchaseClient) RemoveOneID(id int64) *AsMarketAppPurchaseUpdateOne {
	return c.UpdateOneID(id).SetIsDeleted(1)
}

// Delete returns a delete builder for AsMarketAppPurchase.
func (c *AsMarketAppPurchaseClient) Delete() *AsMarketAppPurchaseDelete {
	mutation := newAsMarketAppPurchaseMutation(c.config, OpDelete)
	return &AsMarketAppPurchaseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AsMarketAppPurchaseClient) DeleteOne(amap *AsMarketAppPurchase) *AsMarketAppPurchaseDeleteOne {
	return c.DeleteOneID(amap.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AsMarketAppPurchaseClient) DeleteOneID(id int64) *AsMarketAppPurchaseDeleteOne {
	builder := c.Delete().Where(asmarketapppurchase.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AsMarketAppPurchaseDeleteOne{builder}
}

// Query returns a query builder for AsMarketAppPurchase.
func (c *AsMarketAppPurchaseClient) Query() *AsMarketAppPurchaseQuery {
	return &AsMarketAppPurchaseQuery{
		config: c.config,
	}
}

// Find returns a query builder for AsMarketAppPurchase, filter is_delete = 0.
func (c *AsMarketAppPurchaseClient) Find() *AsMarketAppPurchaseQuery {
	return c.Query().Where(asmarketapppurchase.IsDeleted(0))
}

// FindOne returns a AsMarketAppPurchase entity by its id., filter is_delete = 0.
func (c *AsMarketAppPurchaseClient) FindOne(ctx context.Context, id int64) (*AsMarketAppPurchase, error) {
	return c.Query().Where(asmarketapppurchase.IsDeleted(0), asmarketapppurchase.ID(id)).Only(ctx)
}

// FindOneX is like FindOne, but panics if an error occurs.
func (c *AsMarketAppPurchaseClient) FindOneX(ctx context.Context, id int64) *AsMarketAppPurchase {
	obj, err := c.FindOne(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Get returns a AsMarketAppPurchase entity by its id.
func (c *AsMarketAppPurchaseClient) Get(ctx context.Context, id int64) (*AsMarketAppPurchase, error) {
	return c.Query().Where(asmarketapppurchase.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AsMarketAppPurchaseClient) GetX(ctx context.Context, id int64) *AsMarketAppPurchase {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAppx queries the appx edge of a AsMarketAppPurchase.
func (c *AsMarketAppPurchaseClient) QueryAppx(amap *AsMarketAppPurchase) *AsMarketAppQuery {
	query := &AsMarketAppQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := amap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketapppurchase.Table, asmarketapppurchase.FieldID, id),
			sqlgraph.To(asmarketapp.Table, asmarketapp.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asmarketapppurchase.AppxTable, asmarketapppurchase.AppxColumn),
		)
		fromV = sqlgraph.Neighbors(amap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGroupx queries the groupx edge of a AsMarketAppPurchase.
func (c *AsMarketAppPurchaseClient) QueryGroupx(amap *AsMarketAppPurchase) *AsAllGroupQuery {
	query := &AsAllGroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := amap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketapppurchase.Table, asmarketapppurchase.FieldID, id),
			sqlgraph.To(asallgroup.Table, asallgroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asmarketapppurchase.GroupxTable, asmarketapppurchase.GroupxColumn),
		)
		fromV = sqlgraph.Neighbors(amap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// FindAppx queries the appx edge of a AsMarketAppPurchase.
func (c *AsMarketAppPurchaseClient) FindAppx(amap *AsMarketAppPurchase) *AsMarketAppQuery {
	return c.QueryAppx(amap).Where(asmarketapp.IsDeleted(0))
}

// FindGroupx queries the groupx edge of a AsMarketAppPurchase.
func (c *AsMarketAppPurchaseClient) FindGroupx(amap *AsMarketAppPurchase) *AsAllGroupQuery {
	return c.QueryGroupx(amap).Where(asallgroup.IsDeleted(0))
}

// Hooks returns the client hooks.
func (c *AsMarketAppPurchaseClient) Hooks() []Hook {
	return c.hooks.AsMarketAppPurchase
}

// AsMarketAppRoleClient is a client for the AsMarketAppRole schema.
type AsMarketAppRoleClient struct {
	config
}

// NewAsMarketAppRoleClient returns a client for the AsMarketAppRole from the given config.
func NewAsMarketAppRoleClient(c config) *AsMarketAppRoleClient {
	return &AsMarketAppRoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `asmarketapprole.Hooks(f(g(h())))`.
func (c *AsMarketAppRoleClient) Use(hooks ...Hook) {
	c.hooks.AsMarketAppRole = append(c.hooks.AsMarketAppRole, hooks...)
}

// Create returns a create builder for AsMarketAppRole.
func (c *AsMarketAppRoleClient) Create() *AsMarketAppRoleCreate {
	mutation := newAsMarketAppRoleMutation(c.config, OpCreate)
	return &AsMarketAppRoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AsMarketAppRole entities.
func (c *AsMarketAppRoleClient) CreateBulk(builders ...*AsMarketAppRoleCreate) *AsMarketAppRoleCreateBulk {
	return &AsMarketAppRoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AsMarketAppRole.
func (c *AsMarketAppRoleClient) Update() *AsMarketAppRoleUpdate {
	mutation := newAsMarketAppRoleMutation(c.config, OpUpdate)
	return &AsMarketAppRoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AsMarketAppRoleClient) UpdateOne(amar *AsMarketAppRole) *AsMarketAppRoleUpdateOne {
	mutation := newAsMarketAppRoleMutation(c.config, OpUpdateOne, withAsMarketAppRole(amar))
	return &AsMarketAppRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AsMarketAppRoleClient) UpdateOneID(id int64) *AsMarketAppRoleUpdateOne {
	mutation := newAsMarketAppRoleMutation(c.config, OpUpdateOne, withAsMarketAppRoleID(id))
	return &AsMarketAppRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Remove returns an update builder for AsMarketAppRole.
func (c *AsMarketAppRoleClient) Remove() *AsMarketAppRoleUpdate {
	return c.Update().SetIsDeleted(1)
}

// RemoveOne returns an update builder for the given entity.
func (c *AsMarketAppRoleClient) RemoveOne(amar *AsMarketAppRole) *AsMarketAppRoleUpdateOne {
	return c.UpdateOne(amar).SetIsDeleted(1)
}

// RemoveOneID returns an update builder for the given id.
func (c *AsMarketAppRoleClient) RemoveOneID(id int64) *AsMarketAppRoleUpdateOne {
	return c.UpdateOneID(id).SetIsDeleted(1)
}

// Delete returns a delete builder for AsMarketAppRole.
func (c *AsMarketAppRoleClient) Delete() *AsMarketAppRoleDelete {
	mutation := newAsMarketAppRoleMutation(c.config, OpDelete)
	return &AsMarketAppRoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AsMarketAppRoleClient) DeleteOne(amar *AsMarketAppRole) *AsMarketAppRoleDeleteOne {
	return c.DeleteOneID(amar.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AsMarketAppRoleClient) DeleteOneID(id int64) *AsMarketAppRoleDeleteOne {
	builder := c.Delete().Where(asmarketapprole.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AsMarketAppRoleDeleteOne{builder}
}

// Query returns a query builder for AsMarketAppRole.
func (c *AsMarketAppRoleClient) Query() *AsMarketAppRoleQuery {
	return &AsMarketAppRoleQuery{
		config: c.config,
	}
}

// Find returns a query builder for AsMarketAppRole, filter is_delete = 0.
func (c *AsMarketAppRoleClient) Find() *AsMarketAppRoleQuery {
	return c.Query().Where(asmarketapprole.IsDeleted(0))
}

// FindOne returns a AsMarketAppRole entity by its id., filter is_delete = 0.
func (c *AsMarketAppRoleClient) FindOne(ctx context.Context, id int64) (*AsMarketAppRole, error) {
	return c.Query().Where(asmarketapprole.IsDeleted(0), asmarketapprole.ID(id)).Only(ctx)
}

// FindOneX is like FindOne, but panics if an error occurs.
func (c *AsMarketAppRoleClient) FindOneX(ctx context.Context, id int64) *AsMarketAppRole {
	obj, err := c.FindOne(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Get returns a AsMarketAppRole entity by its id.
func (c *AsMarketAppRoleClient) Get(ctx context.Context, id int64) (*AsMarketAppRole, error) {
	return c.Query().Where(asmarketapprole.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AsMarketAppRoleClient) GetX(ctx context.Context, id int64) *AsMarketAppRole {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRoleDistribs queries the roleDistribs edge of a AsMarketAppRole.
func (c *AsMarketAppRoleClient) QueryRoleDistribs(amar *AsMarketAppRole) *AsMarketRoleDistributionQuery {
	query := &AsMarketRoleDistributionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := amar.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketapprole.Table, asmarketapprole.FieldID, id),
			sqlgraph.To(asmarketroledistribution.Table, asmarketroledistribution.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asmarketapprole.RoleDistribsTable, asmarketapprole.RoleDistribsColumn),
		)
		fromV = sqlgraph.Neighbors(amar.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoleMenus queries the roleMenus edge of a AsMarketAppRole.
func (c *AsMarketAppRoleClient) QueryRoleMenus(amar *AsMarketAppRole) *AsMarketRoleMenuQuery {
	query := &AsMarketRoleMenuQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := amar.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketapprole.Table, asmarketapprole.FieldID, id),
			sqlgraph.To(asmarketrolemenu.Table, asmarketrolemenu.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asmarketapprole.RoleMenusTable, asmarketapprole.RoleMenusColumn),
		)
		fromV = sqlgraph.Neighbors(amar.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMenus queries the menus edge of a AsMarketAppRole.
func (c *AsMarketAppRoleClient) QueryMenus(amar *AsMarketAppRole) *AsMarketMenuQuery {
	query := &AsMarketMenuQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := amar.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketapprole.Table, asmarketapprole.FieldID, id),
			sqlgraph.To(asmarketmenu.Table, asmarketmenu.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, asmarketapprole.MenusTable, asmarketapprole.MenusPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(amar.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAppx queries the appx edge of a AsMarketAppRole.
func (c *AsMarketAppRoleClient) QueryAppx(amar *AsMarketAppRole) *AsMarketAppQuery {
	query := &AsMarketAppQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := amar.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketapprole.Table, asmarketapprole.FieldID, id),
			sqlgraph.To(asmarketapp.Table, asmarketapp.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asmarketapprole.AppxTable, asmarketapprole.AppxColumn),
		)
		fromV = sqlgraph.Neighbors(amar.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// FindRoleDistribs queries the roleDistribs edge of a AsMarketAppRole.
func (c *AsMarketAppRoleClient) FindRoleDistribs(amar *AsMarketAppRole) *AsMarketRoleDistributionQuery {
	return c.QueryRoleDistribs(amar).Where(asmarketroledistribution.IsDeleted(0))
}

// FindRoleMenus queries the roleMenus edge of a AsMarketAppRole.
func (c *AsMarketAppRoleClient) FindRoleMenus(amar *AsMarketAppRole) *AsMarketRoleMenuQuery {
	return c.QueryRoleMenus(amar).Where(asmarketrolemenu.IsDeleted(0))
}

// FindMenus queries the menus edge of a AsMarketAppRole.
func (c *AsMarketAppRoleClient) FindMenus(amar *AsMarketAppRole) *AsMarketMenuQuery {
	return c.QueryMenus(amar).Where(asmarketmenu.IsDeleted(0))
}

// FindAppx queries the appx edge of a AsMarketAppRole.
func (c *AsMarketAppRoleClient) FindAppx(amar *AsMarketAppRole) *AsMarketAppQuery {
	return c.QueryAppx(amar).Where(asmarketapp.IsDeleted(0))
}

// Hooks returns the client hooks.
func (c *AsMarketAppRoleClient) Hooks() []Hook {
	return c.hooks.AsMarketAppRole
}

// AsMarketAppUserTemplateClient is a client for the AsMarketAppUserTemplate schema.
type AsMarketAppUserTemplateClient struct {
	config
}

// NewAsMarketAppUserTemplateClient returns a client for the AsMarketAppUserTemplate from the given config.
func NewAsMarketAppUserTemplateClient(c config) *AsMarketAppUserTemplateClient {
	return &AsMarketAppUserTemplateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `asmarketappusertemplate.Hooks(f(g(h())))`.
func (c *AsMarketAppUserTemplateClient) Use(hooks ...Hook) {
	c.hooks.AsMarketAppUserTemplate = append(c.hooks.AsMarketAppUserTemplate, hooks...)
}

// Create returns a create builder for AsMarketAppUserTemplate.
func (c *AsMarketAppUserTemplateClient) Create() *AsMarketAppUserTemplateCreate {
	mutation := newAsMarketAppUserTemplateMutation(c.config, OpCreate)
	return &AsMarketAppUserTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AsMarketAppUserTemplate entities.
func (c *AsMarketAppUserTemplateClient) CreateBulk(builders ...*AsMarketAppUserTemplateCreate) *AsMarketAppUserTemplateCreateBulk {
	return &AsMarketAppUserTemplateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AsMarketAppUserTemplate.
func (c *AsMarketAppUserTemplateClient) Update() *AsMarketAppUserTemplateUpdate {
	mutation := newAsMarketAppUserTemplateMutation(c.config, OpUpdate)
	return &AsMarketAppUserTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AsMarketAppUserTemplateClient) UpdateOne(amaut *AsMarketAppUserTemplate) *AsMarketAppUserTemplateUpdateOne {
	mutation := newAsMarketAppUserTemplateMutation(c.config, OpUpdateOne, withAsMarketAppUserTemplate(amaut))
	return &AsMarketAppUserTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AsMarketAppUserTemplateClient) UpdateOneID(id int64) *AsMarketAppUserTemplateUpdateOne {
	mutation := newAsMarketAppUserTemplateMutation(c.config, OpUpdateOne, withAsMarketAppUserTemplateID(id))
	return &AsMarketAppUserTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Remove returns an update builder for AsMarketAppUserTemplate.
func (c *AsMarketAppUserTemplateClient) Remove() *AsMarketAppUserTemplateUpdate {
	return c.Update().SetIsDeleted(1)
}

// RemoveOne returns an update builder for the given entity.
func (c *AsMarketAppUserTemplateClient) RemoveOne(amaut *AsMarketAppUserTemplate) *AsMarketAppUserTemplateUpdateOne {
	return c.UpdateOne(amaut).SetIsDeleted(1)
}

// RemoveOneID returns an update builder for the given id.
func (c *AsMarketAppUserTemplateClient) RemoveOneID(id int64) *AsMarketAppUserTemplateUpdateOne {
	return c.UpdateOneID(id).SetIsDeleted(1)
}

// Delete returns a delete builder for AsMarketAppUserTemplate.
func (c *AsMarketAppUserTemplateClient) Delete() *AsMarketAppUserTemplateDelete {
	mutation := newAsMarketAppUserTemplateMutation(c.config, OpDelete)
	return &AsMarketAppUserTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AsMarketAppUserTemplateClient) DeleteOne(amaut *AsMarketAppUserTemplate) *AsMarketAppUserTemplateDeleteOne {
	return c.DeleteOneID(amaut.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AsMarketAppUserTemplateClient) DeleteOneID(id int64) *AsMarketAppUserTemplateDeleteOne {
	builder := c.Delete().Where(asmarketappusertemplate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AsMarketAppUserTemplateDeleteOne{builder}
}

// Query returns a query builder for AsMarketAppUserTemplate.
func (c *AsMarketAppUserTemplateClient) Query() *AsMarketAppUserTemplateQuery {
	return &AsMarketAppUserTemplateQuery{
		config: c.config,
	}
}

// Find returns a query builder for AsMarketAppUserTemplate, filter is_delete = 0.
func (c *AsMarketAppUserTemplateClient) Find() *AsMarketAppUserTemplateQuery {
	return c.Query().Where(asmarketappusertemplate.IsDeleted(0))
}

// FindOne returns a AsMarketAppUserTemplate entity by its id., filter is_delete = 0.
func (c *AsMarketAppUserTemplateClient) FindOne(ctx context.Context, id int64) (*AsMarketAppUserTemplate, error) {
	return c.Query().Where(asmarketappusertemplate.IsDeleted(0), asmarketappusertemplate.ID(id)).Only(ctx)
}

// FindOneX is like FindOne, but panics if an error occurs.
func (c *AsMarketAppUserTemplateClient) FindOneX(ctx context.Context, id int64) *AsMarketAppUserTemplate {
	obj, err := c.FindOne(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Get returns a AsMarketAppUserTemplate entity by its id.
func (c *AsMarketAppUserTemplateClient) Get(ctx context.Context, id int64) (*AsMarketAppUserTemplate, error) {
	return c.Query().Where(asmarketappusertemplate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AsMarketAppUserTemplateClient) GetX(ctx context.Context, id int64) *AsMarketAppUserTemplate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserx queries the userx edge of a AsMarketAppUserTemplate.
func (c *AsMarketAppUserTemplateClient) QueryUserx(amaut *AsMarketAppUserTemplate) *AsUserQuery {
	query := &AsUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := amaut.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketappusertemplate.Table, asmarketappusertemplate.FieldID, id),
			sqlgraph.To(asuser.Table, asuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asmarketappusertemplate.UserxTable, asmarketappusertemplate.UserxColumn),
		)
		fromV = sqlgraph.Neighbors(amaut.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTemplatex queries the templatex edge of a AsMarketAppUserTemplate.
func (c *AsMarketAppUserTemplateClient) QueryTemplatex(amaut *AsMarketAppUserTemplate) *AsMarketAppComponentTemplateQuery {
	query := &AsMarketAppComponentTemplateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := amaut.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketappusertemplate.Table, asmarketappusertemplate.FieldID, id),
			sqlgraph.To(asmarketappcomponenttemplate.Table, asmarketappcomponenttemplate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asmarketappusertemplate.TemplatexTable, asmarketappusertemplate.TemplatexColumn),
		)
		fromV = sqlgraph.Neighbors(amaut.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// FindUserx queries the userx edge of a AsMarketAppUserTemplate.
func (c *AsMarketAppUserTemplateClient) FindUserx(amaut *AsMarketAppUserTemplate) *AsUserQuery {
	return c.QueryUserx(amaut).Where(asuser.IsDeleted(0))
}

// FindTemplatex queries the templatex edge of a AsMarketAppUserTemplate.
func (c *AsMarketAppUserTemplateClient) FindTemplatex(amaut *AsMarketAppUserTemplate) *AsMarketAppComponentTemplateQuery {
	return c.QueryTemplatex(amaut).Where(asmarketappcomponenttemplate.IsDeleted(0))
}

// Hooks returns the client hooks.
func (c *AsMarketAppUserTemplateClient) Hooks() []Hook {
	return c.hooks.AsMarketAppUserTemplate
}

// AsMarketMenuClient is a client for the AsMarketMenu schema.
type AsMarketMenuClient struct {
	config
}

// NewAsMarketMenuClient returns a client for the AsMarketMenu from the given config.
func NewAsMarketMenuClient(c config) *AsMarketMenuClient {
	return &AsMarketMenuClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `asmarketmenu.Hooks(f(g(h())))`.
func (c *AsMarketMenuClient) Use(hooks ...Hook) {
	c.hooks.AsMarketMenu = append(c.hooks.AsMarketMenu, hooks...)
}

// Create returns a create builder for AsMarketMenu.
func (c *AsMarketMenuClient) Create() *AsMarketMenuCreate {
	mutation := newAsMarketMenuMutation(c.config, OpCreate)
	return &AsMarketMenuCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AsMarketMenu entities.
func (c *AsMarketMenuClient) CreateBulk(builders ...*AsMarketMenuCreate) *AsMarketMenuCreateBulk {
	return &AsMarketMenuCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AsMarketMenu.
func (c *AsMarketMenuClient) Update() *AsMarketMenuUpdate {
	mutation := newAsMarketMenuMutation(c.config, OpUpdate)
	return &AsMarketMenuUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AsMarketMenuClient) UpdateOne(amm *AsMarketMenu) *AsMarketMenuUpdateOne {
	mutation := newAsMarketMenuMutation(c.config, OpUpdateOne, withAsMarketMenu(amm))
	return &AsMarketMenuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AsMarketMenuClient) UpdateOneID(id int64) *AsMarketMenuUpdateOne {
	mutation := newAsMarketMenuMutation(c.config, OpUpdateOne, withAsMarketMenuID(id))
	return &AsMarketMenuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Remove returns an update builder for AsMarketMenu.
func (c *AsMarketMenuClient) Remove() *AsMarketMenuUpdate {
	return c.Update().SetIsDeleted(1)
}

// RemoveOne returns an update builder for the given entity.
func (c *AsMarketMenuClient) RemoveOne(amm *AsMarketMenu) *AsMarketMenuUpdateOne {
	return c.UpdateOne(amm).SetIsDeleted(1)
}

// RemoveOneID returns an update builder for the given id.
func (c *AsMarketMenuClient) RemoveOneID(id int64) *AsMarketMenuUpdateOne {
	return c.UpdateOneID(id).SetIsDeleted(1)
}

// Delete returns a delete builder for AsMarketMenu.
func (c *AsMarketMenuClient) Delete() *AsMarketMenuDelete {
	mutation := newAsMarketMenuMutation(c.config, OpDelete)
	return &AsMarketMenuDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AsMarketMenuClient) DeleteOne(amm *AsMarketMenu) *AsMarketMenuDeleteOne {
	return c.DeleteOneID(amm.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AsMarketMenuClient) DeleteOneID(id int64) *AsMarketMenuDeleteOne {
	builder := c.Delete().Where(asmarketmenu.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AsMarketMenuDeleteOne{builder}
}

// Query returns a query builder for AsMarketMenu.
func (c *AsMarketMenuClient) Query() *AsMarketMenuQuery {
	return &AsMarketMenuQuery{
		config: c.config,
	}
}

// Find returns a query builder for AsMarketMenu, filter is_delete = 0.
func (c *AsMarketMenuClient) Find() *AsMarketMenuQuery {
	return c.Query().Where(asmarketmenu.IsDeleted(0))
}

// FindOne returns a AsMarketMenu entity by its id., filter is_delete = 0.
func (c *AsMarketMenuClient) FindOne(ctx context.Context, id int64) (*AsMarketMenu, error) {
	return c.Query().Where(asmarketmenu.IsDeleted(0), asmarketmenu.ID(id)).Only(ctx)
}

// FindOneX is like FindOne, but panics if an error occurs.
func (c *AsMarketMenuClient) FindOneX(ctx context.Context, id int64) *AsMarketMenu {
	obj, err := c.FindOne(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Get returns a AsMarketMenu entity by its id.
func (c *AsMarketMenuClient) Get(ctx context.Context, id int64) (*AsMarketMenu, error) {
	return c.Query().Where(asmarketmenu.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AsMarketMenuClient) GetX(ctx context.Context, id int64) *AsMarketMenu {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a AsMarketMenu.
func (c *AsMarketMenuClient) QueryParent(amm *AsMarketMenu) *AsMarketMenuQuery {
	query := &AsMarketMenuQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := amm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketmenu.Table, asmarketmenu.FieldID, id),
			sqlgraph.To(asmarketmenu.Table, asmarketmenu.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asmarketmenu.ParentTable, asmarketmenu.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(amm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildrens queries the childrens edge of a AsMarketMenu.
func (c *AsMarketMenuClient) QueryChildrens(amm *AsMarketMenu) *AsMarketMenuQuery {
	query := &AsMarketMenuQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := amm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketmenu.Table, asmarketmenu.FieldID, id),
			sqlgraph.To(asmarketmenu.Table, asmarketmenu.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asmarketmenu.ChildrensTable, asmarketmenu.ChildrensColumn),
		)
		fromV = sqlgraph.Neighbors(amm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAppx queries the appx edge of a AsMarketMenu.
func (c *AsMarketMenuClient) QueryAppx(amm *AsMarketMenu) *AsMarketAppQuery {
	query := &AsMarketAppQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := amm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketmenu.Table, asmarketmenu.FieldID, id),
			sqlgraph.To(asmarketapp.Table, asmarketapp.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asmarketmenu.AppxTable, asmarketmenu.AppxColumn),
		)
		fromV = sqlgraph.Neighbors(amm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoleMenus queries the roleMenus edge of a AsMarketMenu.
func (c *AsMarketMenuClient) QueryRoleMenus(amm *AsMarketMenu) *AsMarketRoleMenuQuery {
	query := &AsMarketRoleMenuQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := amm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketmenu.Table, asmarketmenu.FieldID, id),
			sqlgraph.To(asmarketrolemenu.Table, asmarketrolemenu.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asmarketmenu.RoleMenusTable, asmarketmenu.RoleMenusColumn),
		)
		fromV = sqlgraph.Neighbors(amm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoles queries the roles edge of a AsMarketMenu.
func (c *AsMarketMenuClient) QueryRoles(amm *AsMarketMenu) *AsMarketAppRoleQuery {
	query := &AsMarketAppRoleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := amm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketmenu.Table, asmarketmenu.FieldID, id),
			sqlgraph.To(asmarketapprole.Table, asmarketapprole.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, asmarketmenu.RolesTable, asmarketmenu.RolesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(amm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserSorts queries the UserSorts edge of a AsMarketMenu.
func (c *AsMarketMenuClient) QueryUserSorts(amm *AsMarketMenu) *AsMarketMenuUserSortQuery {
	query := &AsMarketMenuUserSortQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := amm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketmenu.Table, asmarketmenu.FieldID, id),
			sqlgraph.To(asmarketmenuusersort.Table, asmarketmenuusersort.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asmarketmenu.UserSortsTable, asmarketmenu.UserSortsColumn),
		)
		fromV = sqlgraph.Neighbors(amm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// FindParent queries the parent edge of a AsMarketMenu.
func (c *AsMarketMenuClient) FindParent(amm *AsMarketMenu) *AsMarketMenuQuery {
	return c.QueryParent(amm).Where(asmarketmenu.IsDeleted(0))
}

// FindChildrens queries the childrens edge of a AsMarketMenu.
func (c *AsMarketMenuClient) FindChildrens(amm *AsMarketMenu) *AsMarketMenuQuery {
	return c.QueryChildrens(amm).Where(asmarketmenu.IsDeleted(0))
}

// FindAppx queries the appx edge of a AsMarketMenu.
func (c *AsMarketMenuClient) FindAppx(amm *AsMarketMenu) *AsMarketAppQuery {
	return c.QueryAppx(amm).Where(asmarketapp.IsDeleted(0))
}

// FindRoleMenus queries the roleMenus edge of a AsMarketMenu.
func (c *AsMarketMenuClient) FindRoleMenus(amm *AsMarketMenu) *AsMarketRoleMenuQuery {
	return c.QueryRoleMenus(amm).Where(asmarketrolemenu.IsDeleted(0))
}

// FindRoles queries the roles edge of a AsMarketMenu.
func (c *AsMarketMenuClient) FindRoles(amm *AsMarketMenu) *AsMarketAppRoleQuery {
	return c.QueryRoles(amm).Where(asmarketapprole.IsDeleted(0))
}

// FindUserSorts queries the UserSorts edge of a AsMarketMenu.
func (c *AsMarketMenuClient) FindUserSorts(amm *AsMarketMenu) *AsMarketMenuUserSortQuery {
	return c.QueryUserSorts(amm).Where(asmarketmenuusersort.IsDeleted(0))
}

// Hooks returns the client hooks.
func (c *AsMarketMenuClient) Hooks() []Hook {
	return c.hooks.AsMarketMenu
}

// AsMarketMenuUserSortClient is a client for the AsMarketMenuUserSort schema.
type AsMarketMenuUserSortClient struct {
	config
}

// NewAsMarketMenuUserSortClient returns a client for the AsMarketMenuUserSort from the given config.
func NewAsMarketMenuUserSortClient(c config) *AsMarketMenuUserSortClient {
	return &AsMarketMenuUserSortClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `asmarketmenuusersort.Hooks(f(g(h())))`.
func (c *AsMarketMenuUserSortClient) Use(hooks ...Hook) {
	c.hooks.AsMarketMenuUserSort = append(c.hooks.AsMarketMenuUserSort, hooks...)
}

// Create returns a create builder for AsMarketMenuUserSort.
func (c *AsMarketMenuUserSortClient) Create() *AsMarketMenuUserSortCreate {
	mutation := newAsMarketMenuUserSortMutation(c.config, OpCreate)
	return &AsMarketMenuUserSortCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AsMarketMenuUserSort entities.
func (c *AsMarketMenuUserSortClient) CreateBulk(builders ...*AsMarketMenuUserSortCreate) *AsMarketMenuUserSortCreateBulk {
	return &AsMarketMenuUserSortCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AsMarketMenuUserSort.
func (c *AsMarketMenuUserSortClient) Update() *AsMarketMenuUserSortUpdate {
	mutation := newAsMarketMenuUserSortMutation(c.config, OpUpdate)
	return &AsMarketMenuUserSortUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AsMarketMenuUserSortClient) UpdateOne(ammus *AsMarketMenuUserSort) *AsMarketMenuUserSortUpdateOne {
	mutation := newAsMarketMenuUserSortMutation(c.config, OpUpdateOne, withAsMarketMenuUserSort(ammus))
	return &AsMarketMenuUserSortUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AsMarketMenuUserSortClient) UpdateOneID(id int64) *AsMarketMenuUserSortUpdateOne {
	mutation := newAsMarketMenuUserSortMutation(c.config, OpUpdateOne, withAsMarketMenuUserSortID(id))
	return &AsMarketMenuUserSortUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Remove returns an update builder for AsMarketMenuUserSort.
func (c *AsMarketMenuUserSortClient) Remove() *AsMarketMenuUserSortUpdate {
	return c.Update().SetIsDeleted(1)
}

// RemoveOne returns an update builder for the given entity.
func (c *AsMarketMenuUserSortClient) RemoveOne(ammus *AsMarketMenuUserSort) *AsMarketMenuUserSortUpdateOne {
	return c.UpdateOne(ammus).SetIsDeleted(1)
}

// RemoveOneID returns an update builder for the given id.
func (c *AsMarketMenuUserSortClient) RemoveOneID(id int64) *AsMarketMenuUserSortUpdateOne {
	return c.UpdateOneID(id).SetIsDeleted(1)
}

// Delete returns a delete builder for AsMarketMenuUserSort.
func (c *AsMarketMenuUserSortClient) Delete() *AsMarketMenuUserSortDelete {
	mutation := newAsMarketMenuUserSortMutation(c.config, OpDelete)
	return &AsMarketMenuUserSortDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AsMarketMenuUserSortClient) DeleteOne(ammus *AsMarketMenuUserSort) *AsMarketMenuUserSortDeleteOne {
	return c.DeleteOneID(ammus.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AsMarketMenuUserSortClient) DeleteOneID(id int64) *AsMarketMenuUserSortDeleteOne {
	builder := c.Delete().Where(asmarketmenuusersort.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AsMarketMenuUserSortDeleteOne{builder}
}

// Query returns a query builder for AsMarketMenuUserSort.
func (c *AsMarketMenuUserSortClient) Query() *AsMarketMenuUserSortQuery {
	return &AsMarketMenuUserSortQuery{
		config: c.config,
	}
}

// Find returns a query builder for AsMarketMenuUserSort, filter is_delete = 0.
func (c *AsMarketMenuUserSortClient) Find() *AsMarketMenuUserSortQuery {
	return c.Query().Where(asmarketmenuusersort.IsDeleted(0))
}

// FindOne returns a AsMarketMenuUserSort entity by its id., filter is_delete = 0.
func (c *AsMarketMenuUserSortClient) FindOne(ctx context.Context, id int64) (*AsMarketMenuUserSort, error) {
	return c.Query().Where(asmarketmenuusersort.IsDeleted(0), asmarketmenuusersort.ID(id)).Only(ctx)
}

// FindOneX is like FindOne, but panics if an error occurs.
func (c *AsMarketMenuUserSortClient) FindOneX(ctx context.Context, id int64) *AsMarketMenuUserSort {
	obj, err := c.FindOne(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Get returns a AsMarketMenuUserSort entity by its id.
func (c *AsMarketMenuUserSortClient) Get(ctx context.Context, id int64) (*AsMarketMenuUserSort, error) {
	return c.Query().Where(asmarketmenuusersort.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AsMarketMenuUserSortClient) GetX(ctx context.Context, id int64) *AsMarketMenuUserSort {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserx queries the userx edge of a AsMarketMenuUserSort.
func (c *AsMarketMenuUserSortClient) QueryUserx(ammus *AsMarketMenuUserSort) *AsUserQuery {
	query := &AsUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ammus.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketmenuusersort.Table, asmarketmenuusersort.FieldID, id),
			sqlgraph.To(asuser.Table, asuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asmarketmenuusersort.UserxTable, asmarketmenuusersort.UserxColumn),
		)
		fromV = sqlgraph.Neighbors(ammus.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAppmenux queries the appmenux edge of a AsMarketMenuUserSort.
func (c *AsMarketMenuUserSortClient) QueryAppmenux(ammus *AsMarketMenuUserSort) *AsMarketMenuQuery {
	query := &AsMarketMenuQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ammus.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketmenuusersort.Table, asmarketmenuusersort.FieldID, id),
			sqlgraph.To(asmarketmenu.Table, asmarketmenu.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asmarketmenuusersort.AppmenuxTable, asmarketmenuusersort.AppmenuxColumn),
		)
		fromV = sqlgraph.Neighbors(ammus.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// FindUserx queries the userx edge of a AsMarketMenuUserSort.
func (c *AsMarketMenuUserSortClient) FindUserx(ammus *AsMarketMenuUserSort) *AsUserQuery {
	return c.QueryUserx(ammus).Where(asuser.IsDeleted(0))
}

// FindAppmenux queries the appmenux edge of a AsMarketMenuUserSort.
func (c *AsMarketMenuUserSortClient) FindAppmenux(ammus *AsMarketMenuUserSort) *AsMarketMenuQuery {
	return c.QueryAppmenux(ammus).Where(asmarketmenu.IsDeleted(0))
}

// Hooks returns the client hooks.
func (c *AsMarketMenuUserSortClient) Hooks() []Hook {
	return c.hooks.AsMarketMenuUserSort
}

// AsMarketRoleDistributionClient is a client for the AsMarketRoleDistribution schema.
type AsMarketRoleDistributionClient struct {
	config
}

// NewAsMarketRoleDistributionClient returns a client for the AsMarketRoleDistribution from the given config.
func NewAsMarketRoleDistributionClient(c config) *AsMarketRoleDistributionClient {
	return &AsMarketRoleDistributionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `asmarketroledistribution.Hooks(f(g(h())))`.
func (c *AsMarketRoleDistributionClient) Use(hooks ...Hook) {
	c.hooks.AsMarketRoleDistribution = append(c.hooks.AsMarketRoleDistribution, hooks...)
}

// Create returns a create builder for AsMarketRoleDistribution.
func (c *AsMarketRoleDistributionClient) Create() *AsMarketRoleDistributionCreate {
	mutation := newAsMarketRoleDistributionMutation(c.config, OpCreate)
	return &AsMarketRoleDistributionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AsMarketRoleDistribution entities.
func (c *AsMarketRoleDistributionClient) CreateBulk(builders ...*AsMarketRoleDistributionCreate) *AsMarketRoleDistributionCreateBulk {
	return &AsMarketRoleDistributionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AsMarketRoleDistribution.
func (c *AsMarketRoleDistributionClient) Update() *AsMarketRoleDistributionUpdate {
	mutation := newAsMarketRoleDistributionMutation(c.config, OpUpdate)
	return &AsMarketRoleDistributionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AsMarketRoleDistributionClient) UpdateOne(amrd *AsMarketRoleDistribution) *AsMarketRoleDistributionUpdateOne {
	mutation := newAsMarketRoleDistributionMutation(c.config, OpUpdateOne, withAsMarketRoleDistribution(amrd))
	return &AsMarketRoleDistributionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AsMarketRoleDistributionClient) UpdateOneID(id int64) *AsMarketRoleDistributionUpdateOne {
	mutation := newAsMarketRoleDistributionMutation(c.config, OpUpdateOne, withAsMarketRoleDistributionID(id))
	return &AsMarketRoleDistributionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Remove returns an update builder for AsMarketRoleDistribution.
func (c *AsMarketRoleDistributionClient) Remove() *AsMarketRoleDistributionUpdate {
	return c.Update().SetIsDeleted(1)
}

// RemoveOne returns an update builder for the given entity.
func (c *AsMarketRoleDistributionClient) RemoveOne(amrd *AsMarketRoleDistribution) *AsMarketRoleDistributionUpdateOne {
	return c.UpdateOne(amrd).SetIsDeleted(1)
}

// RemoveOneID returns an update builder for the given id.
func (c *AsMarketRoleDistributionClient) RemoveOneID(id int64) *AsMarketRoleDistributionUpdateOne {
	return c.UpdateOneID(id).SetIsDeleted(1)
}

// Delete returns a delete builder for AsMarketRoleDistribution.
func (c *AsMarketRoleDistributionClient) Delete() *AsMarketRoleDistributionDelete {
	mutation := newAsMarketRoleDistributionMutation(c.config, OpDelete)
	return &AsMarketRoleDistributionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AsMarketRoleDistributionClient) DeleteOne(amrd *AsMarketRoleDistribution) *AsMarketRoleDistributionDeleteOne {
	return c.DeleteOneID(amrd.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AsMarketRoleDistributionClient) DeleteOneID(id int64) *AsMarketRoleDistributionDeleteOne {
	builder := c.Delete().Where(asmarketroledistribution.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AsMarketRoleDistributionDeleteOne{builder}
}

// Query returns a query builder for AsMarketRoleDistribution.
func (c *AsMarketRoleDistributionClient) Query() *AsMarketRoleDistributionQuery {
	return &AsMarketRoleDistributionQuery{
		config: c.config,
	}
}

// Find returns a query builder for AsMarketRoleDistribution, filter is_delete = 0.
func (c *AsMarketRoleDistributionClient) Find() *AsMarketRoleDistributionQuery {
	return c.Query().Where(asmarketroledistribution.IsDeleted(0))
}

// FindOne returns a AsMarketRoleDistribution entity by its id., filter is_delete = 0.
func (c *AsMarketRoleDistributionClient) FindOne(ctx context.Context, id int64) (*AsMarketRoleDistribution, error) {
	return c.Query().Where(asmarketroledistribution.IsDeleted(0), asmarketroledistribution.ID(id)).Only(ctx)
}

// FindOneX is like FindOne, but panics if an error occurs.
func (c *AsMarketRoleDistributionClient) FindOneX(ctx context.Context, id int64) *AsMarketRoleDistribution {
	obj, err := c.FindOne(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Get returns a AsMarketRoleDistribution entity by its id.
func (c *AsMarketRoleDistributionClient) Get(ctx context.Context, id int64) (*AsMarketRoleDistribution, error) {
	return c.Query().Where(asmarketroledistribution.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AsMarketRoleDistributionClient) GetX(ctx context.Context, id int64) *AsMarketRoleDistribution {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserx queries the userx edge of a AsMarketRoleDistribution.
func (c *AsMarketRoleDistributionClient) QueryUserx(amrd *AsMarketRoleDistribution) *AsUserQuery {
	query := &AsUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := amrd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketroledistribution.Table, asmarketroledistribution.FieldID, id),
			sqlgraph.To(asuser.Table, asuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asmarketroledistribution.UserxTable, asmarketroledistribution.UserxColumn),
		)
		fromV = sqlgraph.Neighbors(amrd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAgencyx queries the agencyx edge of a AsMarketRoleDistribution.
func (c *AsMarketRoleDistributionClient) QueryAgencyx(amrd *AsMarketRoleDistribution) *AsInnerAgencyQuery {
	query := &AsInnerAgencyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := amrd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketroledistribution.Table, asmarketroledistribution.FieldID, id),
			sqlgraph.To(asinneragency.Table, asinneragency.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asmarketroledistribution.AgencyxTable, asmarketroledistribution.AgencyxColumn),
		)
		fromV = sqlgraph.Neighbors(amrd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryJobx queries the jobx edge of a AsMarketRoleDistribution.
func (c *AsMarketRoleDistributionClient) QueryJobx(amrd *AsMarketRoleDistribution) *AsJobQuery {
	query := &AsJobQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := amrd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketroledistribution.Table, asmarketroledistribution.FieldID, id),
			sqlgraph.To(asjob.Table, asjob.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asmarketroledistribution.JobxTable, asmarketroledistribution.JobxColumn),
		)
		fromV = sqlgraph.Neighbors(amrd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRolex queries the rolex edge of a AsMarketRoleDistribution.
func (c *AsMarketRoleDistributionClient) QueryRolex(amrd *AsMarketRoleDistribution) *AsMarketAppRoleQuery {
	query := &AsMarketAppRoleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := amrd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketroledistribution.Table, asmarketroledistribution.FieldID, id),
			sqlgraph.To(asmarketapprole.Table, asmarketapprole.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asmarketroledistribution.RolexTable, asmarketroledistribution.RolexColumn),
		)
		fromV = sqlgraph.Neighbors(amrd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// FindUserx queries the userx edge of a AsMarketRoleDistribution.
func (c *AsMarketRoleDistributionClient) FindUserx(amrd *AsMarketRoleDistribution) *AsUserQuery {
	return c.QueryUserx(amrd).Where(asuser.IsDeleted(0))
}

// FindAgencyx queries the agencyx edge of a AsMarketRoleDistribution.
func (c *AsMarketRoleDistributionClient) FindAgencyx(amrd *AsMarketRoleDistribution) *AsInnerAgencyQuery {
	return c.QueryAgencyx(amrd).Where(asinneragency.IsDeleted(0))
}

// FindJobx queries the jobx edge of a AsMarketRoleDistribution.
func (c *AsMarketRoleDistributionClient) FindJobx(amrd *AsMarketRoleDistribution) *AsJobQuery {
	return c.QueryJobx(amrd).Where(asjob.IsDeleted(0))
}

// FindRolex queries the rolex edge of a AsMarketRoleDistribution.
func (c *AsMarketRoleDistributionClient) FindRolex(amrd *AsMarketRoleDistribution) *AsMarketAppRoleQuery {
	return c.QueryRolex(amrd).Where(asmarketapprole.IsDeleted(0))
}

// Hooks returns the client hooks.
func (c *AsMarketRoleDistributionClient) Hooks() []Hook {
	return c.hooks.AsMarketRoleDistribution
}

// AsMarketRoleMenuClient is a client for the AsMarketRoleMenu schema.
type AsMarketRoleMenuClient struct {
	config
}

// NewAsMarketRoleMenuClient returns a client for the AsMarketRoleMenu from the given config.
func NewAsMarketRoleMenuClient(c config) *AsMarketRoleMenuClient {
	return &AsMarketRoleMenuClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `asmarketrolemenu.Hooks(f(g(h())))`.
func (c *AsMarketRoleMenuClient) Use(hooks ...Hook) {
	c.hooks.AsMarketRoleMenu = append(c.hooks.AsMarketRoleMenu, hooks...)
}

// Create returns a create builder for AsMarketRoleMenu.
func (c *AsMarketRoleMenuClient) Create() *AsMarketRoleMenuCreate {
	mutation := newAsMarketRoleMenuMutation(c.config, OpCreate)
	return &AsMarketRoleMenuCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AsMarketRoleMenu entities.
func (c *AsMarketRoleMenuClient) CreateBulk(builders ...*AsMarketRoleMenuCreate) *AsMarketRoleMenuCreateBulk {
	return &AsMarketRoleMenuCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AsMarketRoleMenu.
func (c *AsMarketRoleMenuClient) Update() *AsMarketRoleMenuUpdate {
	mutation := newAsMarketRoleMenuMutation(c.config, OpUpdate)
	return &AsMarketRoleMenuUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AsMarketRoleMenuClient) UpdateOne(amrm *AsMarketRoleMenu) *AsMarketRoleMenuUpdateOne {
	mutation := newAsMarketRoleMenuMutation(c.config, OpUpdateOne, withAsMarketRoleMenu(amrm))
	return &AsMarketRoleMenuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AsMarketRoleMenuClient) UpdateOneID(id int64) *AsMarketRoleMenuUpdateOne {
	mutation := newAsMarketRoleMenuMutation(c.config, OpUpdateOne, withAsMarketRoleMenuID(id))
	return &AsMarketRoleMenuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Remove returns an update builder for AsMarketRoleMenu.
func (c *AsMarketRoleMenuClient) Remove() *AsMarketRoleMenuUpdate {
	return c.Update().SetIsDeleted(1)
}

// RemoveOne returns an update builder for the given entity.
func (c *AsMarketRoleMenuClient) RemoveOne(amrm *AsMarketRoleMenu) *AsMarketRoleMenuUpdateOne {
	return c.UpdateOne(amrm).SetIsDeleted(1)
}

// RemoveOneID returns an update builder for the given id.
func (c *AsMarketRoleMenuClient) RemoveOneID(id int64) *AsMarketRoleMenuUpdateOne {
	return c.UpdateOneID(id).SetIsDeleted(1)
}

// Delete returns a delete builder for AsMarketRoleMenu.
func (c *AsMarketRoleMenuClient) Delete() *AsMarketRoleMenuDelete {
	mutation := newAsMarketRoleMenuMutation(c.config, OpDelete)
	return &AsMarketRoleMenuDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AsMarketRoleMenuClient) DeleteOne(amrm *AsMarketRoleMenu) *AsMarketRoleMenuDeleteOne {
	return c.DeleteOneID(amrm.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AsMarketRoleMenuClient) DeleteOneID(id int64) *AsMarketRoleMenuDeleteOne {
	builder := c.Delete().Where(asmarketrolemenu.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AsMarketRoleMenuDeleteOne{builder}
}

// Query returns a query builder for AsMarketRoleMenu.
func (c *AsMarketRoleMenuClient) Query() *AsMarketRoleMenuQuery {
	return &AsMarketRoleMenuQuery{
		config: c.config,
	}
}

// Find returns a query builder for AsMarketRoleMenu, filter is_delete = 0.
func (c *AsMarketRoleMenuClient) Find() *AsMarketRoleMenuQuery {
	return c.Query().Where(asmarketrolemenu.IsDeleted(0))
}

// FindOne returns a AsMarketRoleMenu entity by its id., filter is_delete = 0.
func (c *AsMarketRoleMenuClient) FindOne(ctx context.Context, id int64) (*AsMarketRoleMenu, error) {
	return c.Query().Where(asmarketrolemenu.IsDeleted(0), asmarketrolemenu.ID(id)).Only(ctx)
}

// FindOneX is like FindOne, but panics if an error occurs.
func (c *AsMarketRoleMenuClient) FindOneX(ctx context.Context, id int64) *AsMarketRoleMenu {
	obj, err := c.FindOne(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Get returns a AsMarketRoleMenu entity by its id.
func (c *AsMarketRoleMenuClient) Get(ctx context.Context, id int64) (*AsMarketRoleMenu, error) {
	return c.Query().Where(asmarketrolemenu.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AsMarketRoleMenuClient) GetX(ctx context.Context, id int64) *AsMarketRoleMenu {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMenux queries the menux edge of a AsMarketRoleMenu.
func (c *AsMarketRoleMenuClient) QueryMenux(amrm *AsMarketRoleMenu) *AsMarketMenuQuery {
	query := &AsMarketMenuQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := amrm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketrolemenu.Table, asmarketrolemenu.FieldID, id),
			sqlgraph.To(asmarketmenu.Table, asmarketmenu.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asmarketrolemenu.MenuxTable, asmarketrolemenu.MenuxColumn),
		)
		fromV = sqlgraph.Neighbors(amrm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRolex queries the rolex edge of a AsMarketRoleMenu.
func (c *AsMarketRoleMenuClient) QueryRolex(amrm *AsMarketRoleMenu) *AsMarketAppRoleQuery {
	query := &AsMarketAppRoleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := amrm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketrolemenu.Table, asmarketrolemenu.FieldID, id),
			sqlgraph.To(asmarketapprole.Table, asmarketapprole.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asmarketrolemenu.RolexTable, asmarketrolemenu.RolexColumn),
		)
		fromV = sqlgraph.Neighbors(amrm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// FindMenux queries the menux edge of a AsMarketRoleMenu.
func (c *AsMarketRoleMenuClient) FindMenux(amrm *AsMarketRoleMenu) *AsMarketMenuQuery {
	return c.QueryMenux(amrm).Where(asmarketmenu.IsDeleted(0))
}

// FindRolex queries the rolex edge of a AsMarketRoleMenu.
func (c *AsMarketRoleMenuClient) FindRolex(amrm *AsMarketRoleMenu) *AsMarketAppRoleQuery {
	return c.QueryRolex(amrm).Where(asmarketapprole.IsDeleted(0))
}

// Hooks returns the client hooks.
func (c *AsMarketRoleMenuClient) Hooks() []Hook {
	return c.hooks.AsMarketRoleMenu
}

// AsMarketUsedAppClient is a client for the AsMarketUsedApp schema.
type AsMarketUsedAppClient struct {
	config
}

// NewAsMarketUsedAppClient returns a client for the AsMarketUsedApp from the given config.
func NewAsMarketUsedAppClient(c config) *AsMarketUsedAppClient {
	return &AsMarketUsedAppClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `asmarketusedapp.Hooks(f(g(h())))`.
func (c *AsMarketUsedAppClient) Use(hooks ...Hook) {
	c.hooks.AsMarketUsedApp = append(c.hooks.AsMarketUsedApp, hooks...)
}

// Create returns a create builder for AsMarketUsedApp.
func (c *AsMarketUsedAppClient) Create() *AsMarketUsedAppCreate {
	mutation := newAsMarketUsedAppMutation(c.config, OpCreate)
	return &AsMarketUsedAppCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AsMarketUsedApp entities.
func (c *AsMarketUsedAppClient) CreateBulk(builders ...*AsMarketUsedAppCreate) *AsMarketUsedAppCreateBulk {
	return &AsMarketUsedAppCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AsMarketUsedApp.
func (c *AsMarketUsedAppClient) Update() *AsMarketUsedAppUpdate {
	mutation := newAsMarketUsedAppMutation(c.config, OpUpdate)
	return &AsMarketUsedAppUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AsMarketUsedAppClient) UpdateOne(amua *AsMarketUsedApp) *AsMarketUsedAppUpdateOne {
	mutation := newAsMarketUsedAppMutation(c.config, OpUpdateOne, withAsMarketUsedApp(amua))
	return &AsMarketUsedAppUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AsMarketUsedAppClient) UpdateOneID(id int64) *AsMarketUsedAppUpdateOne {
	mutation := newAsMarketUsedAppMutation(c.config, OpUpdateOne, withAsMarketUsedAppID(id))
	return &AsMarketUsedAppUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Remove returns an update builder for AsMarketUsedApp.
func (c *AsMarketUsedAppClient) Remove() *AsMarketUsedAppUpdate {
	return c.Update().SetIsDeleted(1)
}

// RemoveOne returns an update builder for the given entity.
func (c *AsMarketUsedAppClient) RemoveOne(amua *AsMarketUsedApp) *AsMarketUsedAppUpdateOne {
	return c.UpdateOne(amua).SetIsDeleted(1)
}

// RemoveOneID returns an update builder for the given id.
func (c *AsMarketUsedAppClient) RemoveOneID(id int64) *AsMarketUsedAppUpdateOne {
	return c.UpdateOneID(id).SetIsDeleted(1)
}

// Delete returns a delete builder for AsMarketUsedApp.
func (c *AsMarketUsedAppClient) Delete() *AsMarketUsedAppDelete {
	mutation := newAsMarketUsedAppMutation(c.config, OpDelete)
	return &AsMarketUsedAppDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AsMarketUsedAppClient) DeleteOne(amua *AsMarketUsedApp) *AsMarketUsedAppDeleteOne {
	return c.DeleteOneID(amua.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AsMarketUsedAppClient) DeleteOneID(id int64) *AsMarketUsedAppDeleteOne {
	builder := c.Delete().Where(asmarketusedapp.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AsMarketUsedAppDeleteOne{builder}
}

// Query returns a query builder for AsMarketUsedApp.
func (c *AsMarketUsedAppClient) Query() *AsMarketUsedAppQuery {
	return &AsMarketUsedAppQuery{
		config: c.config,
	}
}

// Find returns a query builder for AsMarketUsedApp, filter is_delete = 0.
func (c *AsMarketUsedAppClient) Find() *AsMarketUsedAppQuery {
	return c.Query().Where(asmarketusedapp.IsDeleted(0))
}

// FindOne returns a AsMarketUsedApp entity by its id., filter is_delete = 0.
func (c *AsMarketUsedAppClient) FindOne(ctx context.Context, id int64) (*AsMarketUsedApp, error) {
	return c.Query().Where(asmarketusedapp.IsDeleted(0), asmarketusedapp.ID(id)).Only(ctx)
}

// FindOneX is like FindOne, but panics if an error occurs.
func (c *AsMarketUsedAppClient) FindOneX(ctx context.Context, id int64) *AsMarketUsedApp {
	obj, err := c.FindOne(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Get returns a AsMarketUsedApp entity by its id.
func (c *AsMarketUsedAppClient) Get(ctx context.Context, id int64) (*AsMarketUsedApp, error) {
	return c.Query().Where(asmarketusedapp.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AsMarketUsedAppClient) GetX(ctx context.Context, id int64) *AsMarketUsedApp {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAppx queries the appx edge of a AsMarketUsedApp.
func (c *AsMarketUsedAppClient) QueryAppx(amua *AsMarketUsedApp) *AsMarketAppQuery {
	query := &AsMarketAppQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := amua.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketusedapp.Table, asmarketusedapp.FieldID, id),
			sqlgraph.To(asmarketapp.Table, asmarketapp.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asmarketusedapp.AppxTable, asmarketusedapp.AppxColumn),
		)
		fromV = sqlgraph.Neighbors(amua.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserx queries the userx edge of a AsMarketUsedApp.
func (c *AsMarketUsedAppClient) QueryUserx(amua *AsMarketUsedApp) *AsUserQuery {
	query := &AsUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := amua.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asmarketusedapp.Table, asmarketusedapp.FieldID, id),
			sqlgraph.To(asuser.Table, asuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asmarketusedapp.UserxTable, asmarketusedapp.UserxColumn),
		)
		fromV = sqlgraph.Neighbors(amua.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// FindAppx queries the appx edge of a AsMarketUsedApp.
func (c *AsMarketUsedAppClient) FindAppx(amua *AsMarketUsedApp) *AsMarketAppQuery {
	return c.QueryAppx(amua).Where(asmarketapp.IsDeleted(0))
}

// FindUserx queries the userx edge of a AsMarketUsedApp.
func (c *AsMarketUsedAppClient) FindUserx(amua *AsMarketUsedApp) *AsUserQuery {
	return c.QueryUserx(amua).Where(asuser.IsDeleted(0))
}

// Hooks returns the client hooks.
func (c *AsMarketUsedAppClient) Hooks() []Hook {
	return c.hooks.AsMarketUsedApp
}

// AsMenuClient is a client for the AsMenu schema.
type AsMenuClient struct {
	config
}

// NewAsMenuClient returns a client for the AsMenu from the given config.
func NewAsMenuClient(c config) *AsMenuClient {
	return &AsMenuClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `asmenu.Hooks(f(g(h())))`.
func (c *AsMenuClient) Use(hooks ...Hook) {
	c.hooks.AsMenu = append(c.hooks.AsMenu, hooks...)
}

// Create returns a create builder for AsMenu.
func (c *AsMenuClient) Create() *AsMenuCreate {
	mutation := newAsMenuMutation(c.config, OpCreate)
	return &AsMenuCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AsMenu entities.
func (c *AsMenuClient) CreateBulk(builders ...*AsMenuCreate) *AsMenuCreateBulk {
	return &AsMenuCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AsMenu.
func (c *AsMenuClient) Update() *AsMenuUpdate {
	mutation := newAsMenuMutation(c.config, OpUpdate)
	return &AsMenuUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AsMenuClient) UpdateOne(am *AsMenu) *AsMenuUpdateOne {
	mutation := newAsMenuMutation(c.config, OpUpdateOne, withAsMenu(am))
	return &AsMenuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AsMenuClient) UpdateOneID(id int64) *AsMenuUpdateOne {
	mutation := newAsMenuMutation(c.config, OpUpdateOne, withAsMenuID(id))
	return &AsMenuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Remove returns an update builder for AsMenu.
func (c *AsMenuClient) Remove() *AsMenuUpdate {
	return c.Update().SetIsDeleted(1)
}

// RemoveOne returns an update builder for the given entity.
func (c *AsMenuClient) RemoveOne(am *AsMenu) *AsMenuUpdateOne {
	return c.UpdateOne(am).SetIsDeleted(1)
}

// RemoveOneID returns an update builder for the given id.
func (c *AsMenuClient) RemoveOneID(id int64) *AsMenuUpdateOne {
	return c.UpdateOneID(id).SetIsDeleted(1)
}

// Delete returns a delete builder for AsMenu.
func (c *AsMenuClient) Delete() *AsMenuDelete {
	mutation := newAsMenuMutation(c.config, OpDelete)
	return &AsMenuDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AsMenuClient) DeleteOne(am *AsMenu) *AsMenuDeleteOne {
	return c.DeleteOneID(am.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AsMenuClient) DeleteOneID(id int64) *AsMenuDeleteOne {
	builder := c.Delete().Where(asmenu.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AsMenuDeleteOne{builder}
}

// Query returns a query builder for AsMenu.
func (c *AsMenuClient) Query() *AsMenuQuery {
	return &AsMenuQuery{
		config: c.config,
	}
}

// Find returns a query builder for AsMenu, filter is_delete = 0.
func (c *AsMenuClient) Find() *AsMenuQuery {
	return c.Query().Where(asmenu.IsDeleted(0))
}

// FindOne returns a AsMenu entity by its id., filter is_delete = 0.
func (c *AsMenuClient) FindOne(ctx context.Context, id int64) (*AsMenu, error) {
	return c.Query().Where(asmenu.IsDeleted(0), asmenu.ID(id)).Only(ctx)
}

// FindOneX is like FindOne, but panics if an error occurs.
func (c *AsMenuClient) FindOneX(ctx context.Context, id int64) *AsMenu {
	obj, err := c.FindOne(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Get returns a AsMenu entity by its id.
func (c *AsMenuClient) Get(ctx context.Context, id int64) (*AsMenu, error) {
	return c.Query().Where(asmenu.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AsMenuClient) GetX(ctx context.Context, id int64) *AsMenu {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParentx queries the parentx edge of a AsMenu.
func (c *AsMenuClient) QueryParentx(am *AsMenu) *AsMenuQuery {
	query := &AsMenuQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := am.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asmenu.Table, asmenu.FieldID, id),
			sqlgraph.To(asmenu.Table, asmenu.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asmenu.ParentxTable, asmenu.ParentxColumn),
		)
		fromV = sqlgraph.Neighbors(am.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildrens queries the childrens edge of a AsMenu.
func (c *AsMenuClient) QueryChildrens(am *AsMenu) *AsMenuQuery {
	query := &AsMenuQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := am.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asmenu.Table, asmenu.FieldID, id),
			sqlgraph.To(asmenu.Table, asmenu.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asmenu.ChildrensTable, asmenu.ChildrensColumn),
		)
		fromV = sqlgraph.Neighbors(am.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoles queries the roles edge of a AsMenu.
func (c *AsMenuClient) QueryRoles(am *AsMenu) *AsRoleQuery {
	query := &AsRoleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := am.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asmenu.Table, asmenu.FieldID, id),
			sqlgraph.To(asrole.Table, asrole.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, asmenu.RolesTable, asmenu.RolesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(am.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// FindParentx queries the parentx edge of a AsMenu.
func (c *AsMenuClient) FindParentx(am *AsMenu) *AsMenuQuery {
	return c.QueryParentx(am).Where(asmenu.IsDeleted(0))
}

// FindChildrens queries the childrens edge of a AsMenu.
func (c *AsMenuClient) FindChildrens(am *AsMenu) *AsMenuQuery {
	return c.QueryChildrens(am).Where(asmenu.IsDeleted(0))
}

// FindRoles queries the roles edge of a AsMenu.
func (c *AsMenuClient) FindRoles(am *AsMenu) *AsRoleQuery {
	return c.QueryRoles(am).Where(asrole.IsDeleted(0))
}

// Hooks returns the client hooks.
func (c *AsMenuClient) Hooks() []Hook {
	return c.hooks.AsMenu
}

// AsPersonClient is a client for the AsPerson schema.
type AsPersonClient struct {
	config
}

// NewAsPersonClient returns a client for the AsPerson from the given config.
func NewAsPersonClient(c config) *AsPersonClient {
	return &AsPersonClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `asperson.Hooks(f(g(h())))`.
func (c *AsPersonClient) Use(hooks ...Hook) {
	c.hooks.AsPerson = append(c.hooks.AsPerson, hooks...)
}

// Create returns a create builder for AsPerson.
func (c *AsPersonClient) Create() *AsPersonCreate {
	mutation := newAsPersonMutation(c.config, OpCreate)
	return &AsPersonCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AsPerson entities.
func (c *AsPersonClient) CreateBulk(builders ...*AsPersonCreate) *AsPersonCreateBulk {
	return &AsPersonCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AsPerson.
func (c *AsPersonClient) Update() *AsPersonUpdate {
	mutation := newAsPersonMutation(c.config, OpUpdate)
	return &AsPersonUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AsPersonClient) UpdateOne(ap *AsPerson) *AsPersonUpdateOne {
	mutation := newAsPersonMutation(c.config, OpUpdateOne, withAsPerson(ap))
	return &AsPersonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AsPersonClient) UpdateOneID(id int64) *AsPersonUpdateOne {
	mutation := newAsPersonMutation(c.config, OpUpdateOne, withAsPersonID(id))
	return &AsPersonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Remove returns an update builder for AsPerson.
func (c *AsPersonClient) Remove() *AsPersonUpdate {
	return c.Update().SetIsDeleted(1)
}

// RemoveOne returns an update builder for the given entity.
func (c *AsPersonClient) RemoveOne(ap *AsPerson) *AsPersonUpdateOne {
	return c.UpdateOne(ap).SetIsDeleted(1)
}

// RemoveOneID returns an update builder for the given id.
func (c *AsPersonClient) RemoveOneID(id int64) *AsPersonUpdateOne {
	return c.UpdateOneID(id).SetIsDeleted(1)
}

// Delete returns a delete builder for AsPerson.
func (c *AsPersonClient) Delete() *AsPersonDelete {
	mutation := newAsPersonMutation(c.config, OpDelete)
	return &AsPersonDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AsPersonClient) DeleteOne(ap *AsPerson) *AsPersonDeleteOne {
	return c.DeleteOneID(ap.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AsPersonClient) DeleteOneID(id int64) *AsPersonDeleteOne {
	builder := c.Delete().Where(asperson.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AsPersonDeleteOne{builder}
}

// Query returns a query builder for AsPerson.
func (c *AsPersonClient) Query() *AsPersonQuery {
	return &AsPersonQuery{
		config: c.config,
	}
}

// Find returns a query builder for AsPerson, filter is_delete = 0.
func (c *AsPersonClient) Find() *AsPersonQuery {
	return c.Query().Where(asperson.IsDeleted(0))
}

// FindOne returns a AsPerson entity by its id., filter is_delete = 0.
func (c *AsPersonClient) FindOne(ctx context.Context, id int64) (*AsPerson, error) {
	return c.Query().Where(asperson.IsDeleted(0), asperson.ID(id)).Only(ctx)
}

// FindOneX is like FindOne, but panics if an error occurs.
func (c *AsPersonClient) FindOneX(ctx context.Context, id int64) *AsPerson {
	obj, err := c.FindOne(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Get returns a AsPerson entity by its id.
func (c *AsPersonClient) Get(ctx context.Context, id int64) (*AsPerson, error) {
	return c.Query().Where(asperson.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AsPersonClient) GetX(ctx context.Context, id int64) *AsPerson {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserx queries the userx edge of a AsPerson.
func (c *AsPersonClient) QueryUserx(ap *AsPerson) *AsUserQuery {
	query := &AsUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asperson.Table, asperson.FieldID, id),
			sqlgraph.To(asuser.Table, asuser.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, asperson.UserxTable, asperson.UserxColumn),
		)
		fromV = sqlgraph.Neighbors(ap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAgencys queries the agencys edge of a AsPerson.
func (c *AsPersonClient) QueryAgencys(ap *AsPerson) *AsInnerAgencyQuery {
	query := &AsInnerAgencyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asperson.Table, asperson.FieldID, id),
			sqlgraph.To(asinneragency.Table, asinneragency.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, asperson.AgencysTable, asperson.AgencysPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryJobs queries the jobs edge of a AsPerson.
func (c *AsPersonClient) QueryJobs(ap *AsPerson) *AsJobQuery {
	query := &AsJobQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asperson.Table, asperson.FieldID, id),
			sqlgraph.To(asjob.Table, asjob.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, asperson.JobsTable, asperson.JobsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// FindUserx queries the userx edge of a AsPerson.
func (c *AsPersonClient) FindUserx(ap *AsPerson) *AsUserQuery {
	return c.QueryUserx(ap).Where(asuser.IsDeleted(0))
}

// FindAgencys queries the agencys edge of a AsPerson.
func (c *AsPersonClient) FindAgencys(ap *AsPerson) *AsInnerAgencyQuery {
	return c.QueryAgencys(ap).Where(asinneragency.IsDeleted(0))
}

// FindJobs queries the jobs edge of a AsPerson.
func (c *AsPersonClient) FindJobs(ap *AsPerson) *AsJobQuery {
	return c.QueryJobs(ap).Where(asjob.IsDeleted(0))
}

// Hooks returns the client hooks.
func (c *AsPersonClient) Hooks() []Hook {
	return c.hooks.AsPerson
}

// AsPersonSingleClient is a client for the AsPersonSingle schema.
type AsPersonSingleClient struct {
	config
}

// NewAsPersonSingleClient returns a client for the AsPersonSingle from the given config.
func NewAsPersonSingleClient(c config) *AsPersonSingleClient {
	return &AsPersonSingleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `aspersonsingle.Hooks(f(g(h())))`.
func (c *AsPersonSingleClient) Use(hooks ...Hook) {
	c.hooks.AsPersonSingle = append(c.hooks.AsPersonSingle, hooks...)
}

// Create returns a create builder for AsPersonSingle.
func (c *AsPersonSingleClient) Create() *AsPersonSingleCreate {
	mutation := newAsPersonSingleMutation(c.config, OpCreate)
	return &AsPersonSingleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AsPersonSingle entities.
func (c *AsPersonSingleClient) CreateBulk(builders ...*AsPersonSingleCreate) *AsPersonSingleCreateBulk {
	return &AsPersonSingleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AsPersonSingle.
func (c *AsPersonSingleClient) Update() *AsPersonSingleUpdate {
	mutation := newAsPersonSingleMutation(c.config, OpUpdate)
	return &AsPersonSingleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AsPersonSingleClient) UpdateOne(aps *AsPersonSingle) *AsPersonSingleUpdateOne {
	mutation := newAsPersonSingleMutation(c.config, OpUpdateOne, withAsPersonSingle(aps))
	return &AsPersonSingleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AsPersonSingleClient) UpdateOneID(id int64) *AsPersonSingleUpdateOne {
	mutation := newAsPersonSingleMutation(c.config, OpUpdateOne, withAsPersonSingleID(id))
	return &AsPersonSingleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Remove returns an update builder for AsPersonSingle.
func (c *AsPersonSingleClient) Remove() *AsPersonSingleUpdate {
	return c.Update().SetIsDeleted(1)
}

// RemoveOne returns an update builder for the given entity.
func (c *AsPersonSingleClient) RemoveOne(aps *AsPersonSingle) *AsPersonSingleUpdateOne {
	return c.UpdateOne(aps).SetIsDeleted(1)
}

// RemoveOneID returns an update builder for the given id.
func (c *AsPersonSingleClient) RemoveOneID(id int64) *AsPersonSingleUpdateOne {
	return c.UpdateOneID(id).SetIsDeleted(1)
}

// Delete returns a delete builder for AsPersonSingle.
func (c *AsPersonSingleClient) Delete() *AsPersonSingleDelete {
	mutation := newAsPersonSingleMutation(c.config, OpDelete)
	return &AsPersonSingleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AsPersonSingleClient) DeleteOne(aps *AsPersonSingle) *AsPersonSingleDeleteOne {
	return c.DeleteOneID(aps.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AsPersonSingleClient) DeleteOneID(id int64) *AsPersonSingleDeleteOne {
	builder := c.Delete().Where(aspersonsingle.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AsPersonSingleDeleteOne{builder}
}

// Query returns a query builder for AsPersonSingle.
func (c *AsPersonSingleClient) Query() *AsPersonSingleQuery {
	return &AsPersonSingleQuery{
		config: c.config,
	}
}

// Find returns a query builder for AsPersonSingle, filter is_delete = 0.
func (c *AsPersonSingleClient) Find() *AsPersonSingleQuery {
	return c.Query().Where(aspersonsingle.IsDeleted(0))
}

// FindOne returns a AsPersonSingle entity by its id., filter is_delete = 0.
func (c *AsPersonSingleClient) FindOne(ctx context.Context, id int64) (*AsPersonSingle, error) {
	return c.Query().Where(aspersonsingle.IsDeleted(0), aspersonsingle.ID(id)).Only(ctx)
}

// FindOneX is like FindOne, but panics if an error occurs.
func (c *AsPersonSingleClient) FindOneX(ctx context.Context, id int64) *AsPersonSingle {
	obj, err := c.FindOne(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Get returns a AsPersonSingle entity by its id.
func (c *AsPersonSingleClient) Get(ctx context.Context, id int64) (*AsPersonSingle, error) {
	return c.Query().Where(aspersonsingle.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AsPersonSingleClient) GetX(ctx context.Context, id int64) *AsPersonSingle {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AsPersonSingleClient) Hooks() []Hook {
	return c.hooks.AsPersonSingle
}

// AsPropertiesClient is a client for the AsProperties schema.
type AsPropertiesClient struct {
	config
}

// NewAsPropertiesClient returns a client for the AsProperties from the given config.
func NewAsPropertiesClient(c config) *AsPropertiesClient {
	return &AsPropertiesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `asproperties.Hooks(f(g(h())))`.
func (c *AsPropertiesClient) Use(hooks ...Hook) {
	c.hooks.AsProperties = append(c.hooks.AsProperties, hooks...)
}

// Create returns a create builder for AsProperties.
func (c *AsPropertiesClient) Create() *AsPropertiesCreate {
	mutation := newAsPropertiesMutation(c.config, OpCreate)
	return &AsPropertiesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AsProperties entities.
func (c *AsPropertiesClient) CreateBulk(builders ...*AsPropertiesCreate) *AsPropertiesCreateBulk {
	return &AsPropertiesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AsProperties.
func (c *AsPropertiesClient) Update() *AsPropertiesUpdate {
	mutation := newAsPropertiesMutation(c.config, OpUpdate)
	return &AsPropertiesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AsPropertiesClient) UpdateOne(ap *AsProperties) *AsPropertiesUpdateOne {
	mutation := newAsPropertiesMutation(c.config, OpUpdateOne, withAsProperties(ap))
	return &AsPropertiesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AsPropertiesClient) UpdateOneID(id int64) *AsPropertiesUpdateOne {
	mutation := newAsPropertiesMutation(c.config, OpUpdateOne, withAsPropertiesID(id))
	return &AsPropertiesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Remove returns an update builder for AsProperties.
func (c *AsPropertiesClient) Remove() *AsPropertiesUpdate {
	return c.Update().SetIsDeleted(1)
}

// RemoveOne returns an update builder for the given entity.
func (c *AsPropertiesClient) RemoveOne(ap *AsProperties) *AsPropertiesUpdateOne {
	return c.UpdateOne(ap).SetIsDeleted(1)
}

// RemoveOneID returns an update builder for the given id.
func (c *AsPropertiesClient) RemoveOneID(id int64) *AsPropertiesUpdateOne {
	return c.UpdateOneID(id).SetIsDeleted(1)
}

// Delete returns a delete builder for AsProperties.
func (c *AsPropertiesClient) Delete() *AsPropertiesDelete {
	mutation := newAsPropertiesMutation(c.config, OpDelete)
	return &AsPropertiesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AsPropertiesClient) DeleteOne(ap *AsProperties) *AsPropertiesDeleteOne {
	return c.DeleteOneID(ap.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AsPropertiesClient) DeleteOneID(id int64) *AsPropertiesDeleteOne {
	builder := c.Delete().Where(asproperties.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AsPropertiesDeleteOne{builder}
}

// Query returns a query builder for AsProperties.
func (c *AsPropertiesClient) Query() *AsPropertiesQuery {
	return &AsPropertiesQuery{
		config: c.config,
	}
}

// Find returns a query builder for AsProperties, filter is_delete = 0.
func (c *AsPropertiesClient) Find() *AsPropertiesQuery {
	return c.Query().Where(asproperties.IsDeleted(0))
}

// FindOne returns a AsProperties entity by its id., filter is_delete = 0.
func (c *AsPropertiesClient) FindOne(ctx context.Context, id int64) (*AsProperties, error) {
	return c.Query().Where(asproperties.IsDeleted(0), asproperties.ID(id)).Only(ctx)
}

// FindOneX is like FindOne, but panics if an error occurs.
func (c *AsPropertiesClient) FindOneX(ctx context.Context, id int64) *AsProperties {
	obj, err := c.FindOne(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Get returns a AsProperties entity by its id.
func (c *AsPropertiesClient) Get(ctx context.Context, id int64) (*AsProperties, error) {
	return c.Query().Where(asproperties.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AsPropertiesClient) GetX(ctx context.Context, id int64) *AsProperties {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAllTenants queries the allTenants edge of a AsProperties.
func (c *AsPropertiesClient) QueryAllTenants(ap *AsProperties) *AsPropertiesDistributionQuery {
	query := &AsPropertiesDistributionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asproperties.Table, asproperties.FieldID, id),
			sqlgraph.To(aspropertiesdistribution.Table, aspropertiesdistribution.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asproperties.AllTenantsTable, asproperties.AllTenantsColumn),
		)
		fromV = sqlgraph.Neighbors(ap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// FindAllTenants queries the allTenants edge of a AsProperties.
func (c *AsPropertiesClient) FindAllTenants(ap *AsProperties) *AsPropertiesDistributionQuery {
	return c.QueryAllTenants(ap).Where(aspropertiesdistribution.IsDeleted(0))
}

// Hooks returns the client hooks.
func (c *AsPropertiesClient) Hooks() []Hook {
	return c.hooks.AsProperties
}

// AsPropertiesDistributionClient is a client for the AsPropertiesDistribution schema.
type AsPropertiesDistributionClient struct {
	config
}

// NewAsPropertiesDistributionClient returns a client for the AsPropertiesDistribution from the given config.
func NewAsPropertiesDistributionClient(c config) *AsPropertiesDistributionClient {
	return &AsPropertiesDistributionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `aspropertiesdistribution.Hooks(f(g(h())))`.
func (c *AsPropertiesDistributionClient) Use(hooks ...Hook) {
	c.hooks.AsPropertiesDistribution = append(c.hooks.AsPropertiesDistribution, hooks...)
}

// Create returns a create builder for AsPropertiesDistribution.
func (c *AsPropertiesDistributionClient) Create() *AsPropertiesDistributionCreate {
	mutation := newAsPropertiesDistributionMutation(c.config, OpCreate)
	return &AsPropertiesDistributionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AsPropertiesDistribution entities.
func (c *AsPropertiesDistributionClient) CreateBulk(builders ...*AsPropertiesDistributionCreate) *AsPropertiesDistributionCreateBulk {
	return &AsPropertiesDistributionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AsPropertiesDistribution.
func (c *AsPropertiesDistributionClient) Update() *AsPropertiesDistributionUpdate {
	mutation := newAsPropertiesDistributionMutation(c.config, OpUpdate)
	return &AsPropertiesDistributionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AsPropertiesDistributionClient) UpdateOne(apd *AsPropertiesDistribution) *AsPropertiesDistributionUpdateOne {
	mutation := newAsPropertiesDistributionMutation(c.config, OpUpdateOne, withAsPropertiesDistribution(apd))
	return &AsPropertiesDistributionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AsPropertiesDistributionClient) UpdateOneID(id int64) *AsPropertiesDistributionUpdateOne {
	mutation := newAsPropertiesDistributionMutation(c.config, OpUpdateOne, withAsPropertiesDistributionID(id))
	return &AsPropertiesDistributionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Remove returns an update builder for AsPropertiesDistribution.
func (c *AsPropertiesDistributionClient) Remove() *AsPropertiesDistributionUpdate {
	return c.Update().SetIsDeleted(1)
}

// RemoveOne returns an update builder for the given entity.
func (c *AsPropertiesDistributionClient) RemoveOne(apd *AsPropertiesDistribution) *AsPropertiesDistributionUpdateOne {
	return c.UpdateOne(apd).SetIsDeleted(1)
}

// RemoveOneID returns an update builder for the given id.
func (c *AsPropertiesDistributionClient) RemoveOneID(id int64) *AsPropertiesDistributionUpdateOne {
	return c.UpdateOneID(id).SetIsDeleted(1)
}

// Delete returns a delete builder for AsPropertiesDistribution.
func (c *AsPropertiesDistributionClient) Delete() *AsPropertiesDistributionDelete {
	mutation := newAsPropertiesDistributionMutation(c.config, OpDelete)
	return &AsPropertiesDistributionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AsPropertiesDistributionClient) DeleteOne(apd *AsPropertiesDistribution) *AsPropertiesDistributionDeleteOne {
	return c.DeleteOneID(apd.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AsPropertiesDistributionClient) DeleteOneID(id int64) *AsPropertiesDistributionDeleteOne {
	builder := c.Delete().Where(aspropertiesdistribution.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AsPropertiesDistributionDeleteOne{builder}
}

// Query returns a query builder for AsPropertiesDistribution.
func (c *AsPropertiesDistributionClient) Query() *AsPropertiesDistributionQuery {
	return &AsPropertiesDistributionQuery{
		config: c.config,
	}
}

// Find returns a query builder for AsPropertiesDistribution, filter is_delete = 0.
func (c *AsPropertiesDistributionClient) Find() *AsPropertiesDistributionQuery {
	return c.Query().Where(aspropertiesdistribution.IsDeleted(0))
}

// FindOne returns a AsPropertiesDistribution entity by its id., filter is_delete = 0.
func (c *AsPropertiesDistributionClient) FindOne(ctx context.Context, id int64) (*AsPropertiesDistribution, error) {
	return c.Query().Where(aspropertiesdistribution.IsDeleted(0), aspropertiesdistribution.ID(id)).Only(ctx)
}

// FindOneX is like FindOne, but panics if an error occurs.
func (c *AsPropertiesDistributionClient) FindOneX(ctx context.Context, id int64) *AsPropertiesDistribution {
	obj, err := c.FindOne(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Get returns a AsPropertiesDistribution entity by its id.
func (c *AsPropertiesDistributionClient) Get(ctx context.Context, id int64) (*AsPropertiesDistribution, error) {
	return c.Query().Where(aspropertiesdistribution.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AsPropertiesDistributionClient) GetX(ctx context.Context, id int64) *AsPropertiesDistribution {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProperties queries the properties edge of a AsPropertiesDistribution.
func (c *AsPropertiesDistributionClient) QueryProperties(apd *AsPropertiesDistribution) *AsPropertiesQuery {
	query := &AsPropertiesQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := apd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(aspropertiesdistribution.Table, aspropertiesdistribution.FieldID, id),
			sqlgraph.To(asproperties.Table, asproperties.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, aspropertiesdistribution.PropertiesTable, aspropertiesdistribution.PropertiesColumn),
		)
		fromV = sqlgraph.Neighbors(apd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTenant queries the tenant edge of a AsPropertiesDistribution.
func (c *AsPropertiesDistributionClient) QueryTenant(apd *AsPropertiesDistribution) *AsTenantQuery {
	query := &AsTenantQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := apd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(aspropertiesdistribution.Table, aspropertiesdistribution.FieldID, id),
			sqlgraph.To(astenant.Table, astenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, aspropertiesdistribution.TenantTable, aspropertiesdistribution.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(apd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// FindProperties queries the properties edge of a AsPropertiesDistribution.
func (c *AsPropertiesDistributionClient) FindProperties(apd *AsPropertiesDistribution) *AsPropertiesQuery {
	return c.QueryProperties(apd).Where(asproperties.IsDeleted(0))
}

// FindTenant queries the tenant edge of a AsPropertiesDistribution.
func (c *AsPropertiesDistributionClient) FindTenant(apd *AsPropertiesDistribution) *AsTenantQuery {
	return c.QueryTenant(apd).Where(astenant.IsDeleted(0))
}

// Hooks returns the client hooks.
func (c *AsPropertiesDistributionClient) Hooks() []Hook {
	return c.hooks.AsPropertiesDistribution
}

// AsRedeployDataClient is a client for the AsRedeployData schema.
type AsRedeployDataClient struct {
	config
}

// NewAsRedeployDataClient returns a client for the AsRedeployData from the given config.
func NewAsRedeployDataClient(c config) *AsRedeployDataClient {
	return &AsRedeployDataClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `asredeploydata.Hooks(f(g(h())))`.
func (c *AsRedeployDataClient) Use(hooks ...Hook) {
	c.hooks.AsRedeployData = append(c.hooks.AsRedeployData, hooks...)
}

// Create returns a create builder for AsRedeployData.
func (c *AsRedeployDataClient) Create() *AsRedeployDataCreate {
	mutation := newAsRedeployDataMutation(c.config, OpCreate)
	return &AsRedeployDataCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AsRedeployData entities.
func (c *AsRedeployDataClient) CreateBulk(builders ...*AsRedeployDataCreate) *AsRedeployDataCreateBulk {
	return &AsRedeployDataCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AsRedeployData.
func (c *AsRedeployDataClient) Update() *AsRedeployDataUpdate {
	mutation := newAsRedeployDataMutation(c.config, OpUpdate)
	return &AsRedeployDataUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AsRedeployDataClient) UpdateOne(ard *AsRedeployData) *AsRedeployDataUpdateOne {
	mutation := newAsRedeployDataMutation(c.config, OpUpdateOne, withAsRedeployData(ard))
	return &AsRedeployDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AsRedeployDataClient) UpdateOneID(id int64) *AsRedeployDataUpdateOne {
	mutation := newAsRedeployDataMutation(c.config, OpUpdateOne, withAsRedeployDataID(id))
	return &AsRedeployDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Remove returns an update builder for AsRedeployData.
func (c *AsRedeployDataClient) Remove() *AsRedeployDataUpdate {
	return c.Update().SetIsDeleted(1)
}

// RemoveOne returns an update builder for the given entity.
func (c *AsRedeployDataClient) RemoveOne(ard *AsRedeployData) *AsRedeployDataUpdateOne {
	return c.UpdateOne(ard).SetIsDeleted(1)
}

// RemoveOneID returns an update builder for the given id.
func (c *AsRedeployDataClient) RemoveOneID(id int64) *AsRedeployDataUpdateOne {
	return c.UpdateOneID(id).SetIsDeleted(1)
}

// Delete returns a delete builder for AsRedeployData.
func (c *AsRedeployDataClient) Delete() *AsRedeployDataDelete {
	mutation := newAsRedeployDataMutation(c.config, OpDelete)
	return &AsRedeployDataDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AsRedeployDataClient) DeleteOne(ard *AsRedeployData) *AsRedeployDataDeleteOne {
	return c.DeleteOneID(ard.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AsRedeployDataClient) DeleteOneID(id int64) *AsRedeployDataDeleteOne {
	builder := c.Delete().Where(asredeploydata.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AsRedeployDataDeleteOne{builder}
}

// Query returns a query builder for AsRedeployData.
func (c *AsRedeployDataClient) Query() *AsRedeployDataQuery {
	return &AsRedeployDataQuery{
		config: c.config,
	}
}

// Find returns a query builder for AsRedeployData, filter is_delete = 0.
func (c *AsRedeployDataClient) Find() *AsRedeployDataQuery {
	return c.Query().Where(asredeploydata.IsDeleted(0))
}

// FindOne returns a AsRedeployData entity by its id., filter is_delete = 0.
func (c *AsRedeployDataClient) FindOne(ctx context.Context, id int64) (*AsRedeployData, error) {
	return c.Query().Where(asredeploydata.IsDeleted(0), asredeploydata.ID(id)).Only(ctx)
}

// FindOneX is like FindOne, but panics if an error occurs.
func (c *AsRedeployDataClient) FindOneX(ctx context.Context, id int64) *AsRedeployData {
	obj, err := c.FindOne(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Get returns a AsRedeployData entity by its id.
func (c *AsRedeployDataClient) Get(ctx context.Context, id int64) (*AsRedeployData, error) {
	return c.Query().Where(asredeploydata.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AsRedeployDataClient) GetX(ctx context.Context, id int64) *AsRedeployData {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAppx queries the appx edge of a AsRedeployData.
func (c *AsRedeployDataClient) QueryAppx(ard *AsRedeployData) *AsMarketAppQuery {
	query := &AsMarketAppQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ard.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asredeploydata.Table, asredeploydata.FieldID, id),
			sqlgraph.To(asmarketapp.Table, asmarketapp.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asredeploydata.AppxTable, asredeploydata.AppxColumn),
		)
		fromV = sqlgraph.Neighbors(ard.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// FindAppx queries the appx edge of a AsRedeployData.
func (c *AsRedeployDataClient) FindAppx(ard *AsRedeployData) *AsMarketAppQuery {
	return c.QueryAppx(ard).Where(asmarketapp.IsDeleted(0))
}

// Hooks returns the client hooks.
func (c *AsRedeployDataClient) Hooks() []Hook {
	return c.hooks.AsRedeployData
}

// AsRoleClient is a client for the AsRole schema.
type AsRoleClient struct {
	config
}

// NewAsRoleClient returns a client for the AsRole from the given config.
func NewAsRoleClient(c config) *AsRoleClient {
	return &AsRoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `asrole.Hooks(f(g(h())))`.
func (c *AsRoleClient) Use(hooks ...Hook) {
	c.hooks.AsRole = append(c.hooks.AsRole, hooks...)
}

// Create returns a create builder for AsRole.
func (c *AsRoleClient) Create() *AsRoleCreate {
	mutation := newAsRoleMutation(c.config, OpCreate)
	return &AsRoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AsRole entities.
func (c *AsRoleClient) CreateBulk(builders ...*AsRoleCreate) *AsRoleCreateBulk {
	return &AsRoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AsRole.
func (c *AsRoleClient) Update() *AsRoleUpdate {
	mutation := newAsRoleMutation(c.config, OpUpdate)
	return &AsRoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AsRoleClient) UpdateOne(ar *AsRole) *AsRoleUpdateOne {
	mutation := newAsRoleMutation(c.config, OpUpdateOne, withAsRole(ar))
	return &AsRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AsRoleClient) UpdateOneID(id int64) *AsRoleUpdateOne {
	mutation := newAsRoleMutation(c.config, OpUpdateOne, withAsRoleID(id))
	return &AsRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Remove returns an update builder for AsRole.
func (c *AsRoleClient) Remove() *AsRoleUpdate {
	return c.Update().SetIsDeleted(1)
}

// RemoveOne returns an update builder for the given entity.
func (c *AsRoleClient) RemoveOne(ar *AsRole) *AsRoleUpdateOne {
	return c.UpdateOne(ar).SetIsDeleted(1)
}

// RemoveOneID returns an update builder for the given id.
func (c *AsRoleClient) RemoveOneID(id int64) *AsRoleUpdateOne {
	return c.UpdateOneID(id).SetIsDeleted(1)
}

// Delete returns a delete builder for AsRole.
func (c *AsRoleClient) Delete() *AsRoleDelete {
	mutation := newAsRoleMutation(c.config, OpDelete)
	return &AsRoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AsRoleClient) DeleteOne(ar *AsRole) *AsRoleDeleteOne {
	return c.DeleteOneID(ar.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AsRoleClient) DeleteOneID(id int64) *AsRoleDeleteOne {
	builder := c.Delete().Where(asrole.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AsRoleDeleteOne{builder}
}

// Query returns a query builder for AsRole.
func (c *AsRoleClient) Query() *AsRoleQuery {
	return &AsRoleQuery{
		config: c.config,
	}
}

// Find returns a query builder for AsRole, filter is_delete = 0.
func (c *AsRoleClient) Find() *AsRoleQuery {
	return c.Query().Where(asrole.IsDeleted(0))
}

// FindOne returns a AsRole entity by its id., filter is_delete = 0.
func (c *AsRoleClient) FindOne(ctx context.Context, id int64) (*AsRole, error) {
	return c.Query().Where(asrole.IsDeleted(0), asrole.ID(id)).Only(ctx)
}

// FindOneX is like FindOne, but panics if an error occurs.
func (c *AsRoleClient) FindOneX(ctx context.Context, id int64) *AsRole {
	obj, err := c.FindOne(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Get returns a AsRole entity by its id.
func (c *AsRoleClient) Get(ctx context.Context, id int64) (*AsRole, error) {
	return c.Query().Where(asrole.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AsRoleClient) GetX(ctx context.Context, id int64) *AsRole {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a AsRole.
func (c *AsRoleClient) QueryUsers(ar *AsRole) *AsUserQuery {
	query := &AsUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ar.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asrole.Table, asrole.FieldID, id),
			sqlgraph.To(asuser.Table, asuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, asrole.UsersTable, asrole.UsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ar.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryJobs queries the jobs edge of a AsRole.
func (c *AsRoleClient) QueryJobs(ar *AsRole) *AsJobQuery {
	query := &AsJobQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ar.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asrole.Table, asrole.FieldID, id),
			sqlgraph.To(asjob.Table, asjob.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, asrole.JobsTable, asrole.JobsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ar.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMenus queries the menus edge of a AsRole.
func (c *AsRoleClient) QueryMenus(ar *AsRole) *AsMenuQuery {
	query := &AsMenuQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ar.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asrole.Table, asrole.FieldID, id),
			sqlgraph.To(asmenu.Table, asmenu.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, asrole.MenusTable, asrole.MenusPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ar.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAttrRoles queries the attrRoles edge of a AsRole.
func (c *AsRoleClient) QueryAttrRoles(ar *AsRole) *AsTenantAttrRoleQuery {
	query := &AsTenantAttrRoleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ar.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asrole.Table, asrole.FieldID, id),
			sqlgraph.To(astenantattrrole.Table, astenantattrrole.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asrole.AttrRolesTable, asrole.AttrRolesColumn),
		)
		fromV = sqlgraph.Neighbors(ar.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// FindUsers queries the users edge of a AsRole.
func (c *AsRoleClient) FindUsers(ar *AsRole) *AsUserQuery {
	return c.QueryUsers(ar).Where(asuser.IsDeleted(0))
}

// FindJobs queries the jobs edge of a AsRole.
func (c *AsRoleClient) FindJobs(ar *AsRole) *AsJobQuery {
	return c.QueryJobs(ar).Where(asjob.IsDeleted(0))
}

// FindMenus queries the menus edge of a AsRole.
func (c *AsRoleClient) FindMenus(ar *AsRole) *AsMenuQuery {
	return c.QueryMenus(ar).Where(asmenu.IsDeleted(0))
}

// FindAttrRoles queries the attrRoles edge of a AsRole.
func (c *AsRoleClient) FindAttrRoles(ar *AsRole) *AsTenantAttrRoleQuery {
	return c.QueryAttrRoles(ar).Where(astenantattrrole.IsDeleted(0))
}

// Hooks returns the client hooks.
func (c *AsRoleClient) Hooks() []Hook {
	return c.hooks.AsRole
}

// AsTenantClient is a client for the AsTenant schema.
type AsTenantClient struct {
	config
}

// NewAsTenantClient returns a client for the AsTenant from the given config.
func NewAsTenantClient(c config) *AsTenantClient {
	return &AsTenantClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `astenant.Hooks(f(g(h())))`.
func (c *AsTenantClient) Use(hooks ...Hook) {
	c.hooks.AsTenant = append(c.hooks.AsTenant, hooks...)
}

// Create returns a create builder for AsTenant.
func (c *AsTenantClient) Create() *AsTenantCreate {
	mutation := newAsTenantMutation(c.config, OpCreate)
	return &AsTenantCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AsTenant entities.
func (c *AsTenantClient) CreateBulk(builders ...*AsTenantCreate) *AsTenantCreateBulk {
	return &AsTenantCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AsTenant.
func (c *AsTenantClient) Update() *AsTenantUpdate {
	mutation := newAsTenantMutation(c.config, OpUpdate)
	return &AsTenantUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AsTenantClient) UpdateOne(at *AsTenant) *AsTenantUpdateOne {
	mutation := newAsTenantMutation(c.config, OpUpdateOne, withAsTenant(at))
	return &AsTenantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AsTenantClient) UpdateOneID(id int64) *AsTenantUpdateOne {
	mutation := newAsTenantMutation(c.config, OpUpdateOne, withAsTenantID(id))
	return &AsTenantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Remove returns an update builder for AsTenant.
func (c *AsTenantClient) Remove() *AsTenantUpdate {
	return c.Update().SetIsDeleted(1)
}

// RemoveOne returns an update builder for the given entity.
func (c *AsTenantClient) RemoveOne(at *AsTenant) *AsTenantUpdateOne {
	return c.UpdateOne(at).SetIsDeleted(1)
}

// RemoveOneID returns an update builder for the given id.
func (c *AsTenantClient) RemoveOneID(id int64) *AsTenantUpdateOne {
	return c.UpdateOneID(id).SetIsDeleted(1)
}

// Delete returns a delete builder for AsTenant.
func (c *AsTenantClient) Delete() *AsTenantDelete {
	mutation := newAsTenantMutation(c.config, OpDelete)
	return &AsTenantDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AsTenantClient) DeleteOne(at *AsTenant) *AsTenantDeleteOne {
	return c.DeleteOneID(at.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AsTenantClient) DeleteOneID(id int64) *AsTenantDeleteOne {
	builder := c.Delete().Where(astenant.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AsTenantDeleteOne{builder}
}

// Query returns a query builder for AsTenant.
func (c *AsTenantClient) Query() *AsTenantQuery {
	return &AsTenantQuery{
		config: c.config,
	}
}

// Find returns a query builder for AsTenant, filter is_delete = 0.
func (c *AsTenantClient) Find() *AsTenantQuery {
	return c.Query().Where(astenant.IsDeleted(0))
}

// FindOne returns a AsTenant entity by its id., filter is_delete = 0.
func (c *AsTenantClient) FindOne(ctx context.Context, id int64) (*AsTenant, error) {
	return c.Query().Where(astenant.IsDeleted(0), astenant.ID(id)).Only(ctx)
}

// FindOneX is like FindOne, but panics if an error occurs.
func (c *AsTenantClient) FindOneX(ctx context.Context, id int64) *AsTenant {
	obj, err := c.FindOne(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Get returns a AsTenant entity by its id.
func (c *AsTenantClient) Get(ctx context.Context, id int64) (*AsTenant, error) {
	return c.Query().Where(astenant.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AsTenantClient) GetX(ctx context.Context, id int64) *AsTenant {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUnit queries the unit edge of a AsTenant.
func (c *AsTenantClient) QueryUnit(at *AsTenant) *AsUnitQuery {
	query := &AsUnitQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(astenant.Table, astenant.FieldID, id),
			sqlgraph.To(asunit.Table, asunit.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, astenant.UnitTable, astenant.UnitColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAllGroups queries the allGroups edge of a AsTenant.
func (c *AsTenantClient) QueryAllGroups(at *AsTenant) *AsGroupTenantRelationsQuery {
	query := &AsGroupTenantRelationsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(astenant.Table, astenant.FieldID, id),
			sqlgraph.To(asgrouptenantrelations.Table, asgrouptenantrelations.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, astenant.AllGroupsTable, astenant.AllGroupsColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAllproperties queries the allproperties edge of a AsTenant.
func (c *AsTenantClient) QueryAllproperties(at *AsTenant) *AsPropertiesDistributionQuery {
	query := &AsPropertiesDistributionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(astenant.Table, astenant.FieldID, id),
			sqlgraph.To(aspropertiesdistribution.Table, aspropertiesdistribution.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, astenant.AllpropertiesTable, astenant.AllpropertiesColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// FindUnit queries the unit edge of a AsTenant.
func (c *AsTenantClient) FindUnit(at *AsTenant) *AsUnitQuery {
	return c.QueryUnit(at).Where(asunit.IsDeleted(0))
}

// FindAllGroups queries the allGroups edge of a AsTenant.
func (c *AsTenantClient) FindAllGroups(at *AsTenant) *AsGroupTenantRelationsQuery {
	return c.QueryAllGroups(at).Where(asgrouptenantrelations.IsDeleted(0))
}

// FindAllproperties queries the allproperties edge of a AsTenant.
func (c *AsTenantClient) FindAllproperties(at *AsTenant) *AsPropertiesDistributionQuery {
	return c.QueryAllproperties(at).Where(aspropertiesdistribution.IsDeleted(0))
}

// Hooks returns the client hooks.
func (c *AsTenantClient) Hooks() []Hook {
	return c.hooks.AsTenant
}

// AsTenantAttrClient is a client for the AsTenantAttr schema.
type AsTenantAttrClient struct {
	config
}

// NewAsTenantAttrClient returns a client for the AsTenantAttr from the given config.
func NewAsTenantAttrClient(c config) *AsTenantAttrClient {
	return &AsTenantAttrClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `astenantattr.Hooks(f(g(h())))`.
func (c *AsTenantAttrClient) Use(hooks ...Hook) {
	c.hooks.AsTenantAttr = append(c.hooks.AsTenantAttr, hooks...)
}

// Create returns a create builder for AsTenantAttr.
func (c *AsTenantAttrClient) Create() *AsTenantAttrCreate {
	mutation := newAsTenantAttrMutation(c.config, OpCreate)
	return &AsTenantAttrCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AsTenantAttr entities.
func (c *AsTenantAttrClient) CreateBulk(builders ...*AsTenantAttrCreate) *AsTenantAttrCreateBulk {
	return &AsTenantAttrCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AsTenantAttr.
func (c *AsTenantAttrClient) Update() *AsTenantAttrUpdate {
	mutation := newAsTenantAttrMutation(c.config, OpUpdate)
	return &AsTenantAttrUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AsTenantAttrClient) UpdateOne(ata *AsTenantAttr) *AsTenantAttrUpdateOne {
	mutation := newAsTenantAttrMutation(c.config, OpUpdateOne, withAsTenantAttr(ata))
	return &AsTenantAttrUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AsTenantAttrClient) UpdateOneID(id int64) *AsTenantAttrUpdateOne {
	mutation := newAsTenantAttrMutation(c.config, OpUpdateOne, withAsTenantAttrID(id))
	return &AsTenantAttrUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Remove returns an update builder for AsTenantAttr.
func (c *AsTenantAttrClient) Remove() *AsTenantAttrUpdate {
	return c.Update().SetIsDeleted(1)
}

// RemoveOne returns an update builder for the given entity.
func (c *AsTenantAttrClient) RemoveOne(ata *AsTenantAttr) *AsTenantAttrUpdateOne {
	return c.UpdateOne(ata).SetIsDeleted(1)
}

// RemoveOneID returns an update builder for the given id.
func (c *AsTenantAttrClient) RemoveOneID(id int64) *AsTenantAttrUpdateOne {
	return c.UpdateOneID(id).SetIsDeleted(1)
}

// Delete returns a delete builder for AsTenantAttr.
func (c *AsTenantAttrClient) Delete() *AsTenantAttrDelete {
	mutation := newAsTenantAttrMutation(c.config, OpDelete)
	return &AsTenantAttrDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AsTenantAttrClient) DeleteOne(ata *AsTenantAttr) *AsTenantAttrDeleteOne {
	return c.DeleteOneID(ata.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AsTenantAttrClient) DeleteOneID(id int64) *AsTenantAttrDeleteOne {
	builder := c.Delete().Where(astenantattr.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AsTenantAttrDeleteOne{builder}
}

// Query returns a query builder for AsTenantAttr.
func (c *AsTenantAttrClient) Query() *AsTenantAttrQuery {
	return &AsTenantAttrQuery{
		config: c.config,
	}
}

// Find returns a query builder for AsTenantAttr, filter is_delete = 0.
func (c *AsTenantAttrClient) Find() *AsTenantAttrQuery {
	return c.Query().Where(astenantattr.IsDeleted(0))
}

// FindOne returns a AsTenantAttr entity by its id., filter is_delete = 0.
func (c *AsTenantAttrClient) FindOne(ctx context.Context, id int64) (*AsTenantAttr, error) {
	return c.Query().Where(astenantattr.IsDeleted(0), astenantattr.ID(id)).Only(ctx)
}

// FindOneX is like FindOne, but panics if an error occurs.
func (c *AsTenantAttrClient) FindOneX(ctx context.Context, id int64) *AsTenantAttr {
	obj, err := c.FindOne(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Get returns a AsTenantAttr entity by its id.
func (c *AsTenantAttrClient) Get(ctx context.Context, id int64) (*AsTenantAttr, error) {
	return c.Query().Where(astenantattr.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AsTenantAttrClient) GetX(ctx context.Context, id int64) *AsTenantAttr {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParentx queries the parentx edge of a AsTenantAttr.
func (c *AsTenantAttrClient) QueryParentx(ata *AsTenantAttr) *AsTenantAttrQuery {
	query := &AsTenantAttrQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ata.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(astenantattr.Table, astenantattr.FieldID, id),
			sqlgraph.To(astenantattr.Table, astenantattr.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, astenantattr.ParentxTable, astenantattr.ParentxColumn),
		)
		fromV = sqlgraph.Neighbors(ata.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildrens queries the childrens edge of a AsTenantAttr.
func (c *AsTenantAttrClient) QueryChildrens(ata *AsTenantAttr) *AsTenantAttrQuery {
	query := &AsTenantAttrQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ata.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(astenantattr.Table, astenantattr.FieldID, id),
			sqlgraph.To(astenantattr.Table, astenantattr.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, astenantattr.ChildrensTable, astenantattr.ChildrensColumn),
		)
		fromV = sqlgraph.Neighbors(ata.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAttrRoles queries the attrRoles edge of a AsTenantAttr.
func (c *AsTenantAttrClient) QueryAttrRoles(ata *AsTenantAttr) *AsTenantAttrRoleQuery {
	query := &AsTenantAttrRoleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ata.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(astenantattr.Table, astenantattr.FieldID, id),
			sqlgraph.To(astenantattrrole.Table, astenantattrrole.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, astenantattr.AttrRolesTable, astenantattr.AttrRolesColumn),
		)
		fromV = sqlgraph.Neighbors(ata.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// FindParentx queries the parentx edge of a AsTenantAttr.
func (c *AsTenantAttrClient) FindParentx(ata *AsTenantAttr) *AsTenantAttrQuery {
	return c.QueryParentx(ata).Where(astenantattr.IsDeleted(0))
}

// FindChildrens queries the childrens edge of a AsTenantAttr.
func (c *AsTenantAttrClient) FindChildrens(ata *AsTenantAttr) *AsTenantAttrQuery {
	return c.QueryChildrens(ata).Where(astenantattr.IsDeleted(0))
}

// FindAttrRoles queries the attrRoles edge of a AsTenantAttr.
func (c *AsTenantAttrClient) FindAttrRoles(ata *AsTenantAttr) *AsTenantAttrRoleQuery {
	return c.QueryAttrRoles(ata).Where(astenantattrrole.IsDeleted(0))
}

// Hooks returns the client hooks.
func (c *AsTenantAttrClient) Hooks() []Hook {
	return c.hooks.AsTenantAttr
}

// AsTenantAttrRoleClient is a client for the AsTenantAttrRole schema.
type AsTenantAttrRoleClient struct {
	config
}

// NewAsTenantAttrRoleClient returns a client for the AsTenantAttrRole from the given config.
func NewAsTenantAttrRoleClient(c config) *AsTenantAttrRoleClient {
	return &AsTenantAttrRoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `astenantattrrole.Hooks(f(g(h())))`.
func (c *AsTenantAttrRoleClient) Use(hooks ...Hook) {
	c.hooks.AsTenantAttrRole = append(c.hooks.AsTenantAttrRole, hooks...)
}

// Create returns a create builder for AsTenantAttrRole.
func (c *AsTenantAttrRoleClient) Create() *AsTenantAttrRoleCreate {
	mutation := newAsTenantAttrRoleMutation(c.config, OpCreate)
	return &AsTenantAttrRoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AsTenantAttrRole entities.
func (c *AsTenantAttrRoleClient) CreateBulk(builders ...*AsTenantAttrRoleCreate) *AsTenantAttrRoleCreateBulk {
	return &AsTenantAttrRoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AsTenantAttrRole.
func (c *AsTenantAttrRoleClient) Update() *AsTenantAttrRoleUpdate {
	mutation := newAsTenantAttrRoleMutation(c.config, OpUpdate)
	return &AsTenantAttrRoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AsTenantAttrRoleClient) UpdateOne(atar *AsTenantAttrRole) *AsTenantAttrRoleUpdateOne {
	mutation := newAsTenantAttrRoleMutation(c.config, OpUpdateOne, withAsTenantAttrRole(atar))
	return &AsTenantAttrRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AsTenantAttrRoleClient) UpdateOneID(id int64) *AsTenantAttrRoleUpdateOne {
	mutation := newAsTenantAttrRoleMutation(c.config, OpUpdateOne, withAsTenantAttrRoleID(id))
	return &AsTenantAttrRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Remove returns an update builder for AsTenantAttrRole.
func (c *AsTenantAttrRoleClient) Remove() *AsTenantAttrRoleUpdate {
	return c.Update().SetIsDeleted(1)
}

// RemoveOne returns an update builder for the given entity.
func (c *AsTenantAttrRoleClient) RemoveOne(atar *AsTenantAttrRole) *AsTenantAttrRoleUpdateOne {
	return c.UpdateOne(atar).SetIsDeleted(1)
}

// RemoveOneID returns an update builder for the given id.
func (c *AsTenantAttrRoleClient) RemoveOneID(id int64) *AsTenantAttrRoleUpdateOne {
	return c.UpdateOneID(id).SetIsDeleted(1)
}

// Delete returns a delete builder for AsTenantAttrRole.
func (c *AsTenantAttrRoleClient) Delete() *AsTenantAttrRoleDelete {
	mutation := newAsTenantAttrRoleMutation(c.config, OpDelete)
	return &AsTenantAttrRoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AsTenantAttrRoleClient) DeleteOne(atar *AsTenantAttrRole) *AsTenantAttrRoleDeleteOne {
	return c.DeleteOneID(atar.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AsTenantAttrRoleClient) DeleteOneID(id int64) *AsTenantAttrRoleDeleteOne {
	builder := c.Delete().Where(astenantattrrole.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AsTenantAttrRoleDeleteOne{builder}
}

// Query returns a query builder for AsTenantAttrRole.
func (c *AsTenantAttrRoleClient) Query() *AsTenantAttrRoleQuery {
	return &AsTenantAttrRoleQuery{
		config: c.config,
	}
}

// Find returns a query builder for AsTenantAttrRole, filter is_delete = 0.
func (c *AsTenantAttrRoleClient) Find() *AsTenantAttrRoleQuery {
	return c.Query().Where(astenantattrrole.IsDeleted(0))
}

// FindOne returns a AsTenantAttrRole entity by its id., filter is_delete = 0.
func (c *AsTenantAttrRoleClient) FindOne(ctx context.Context, id int64) (*AsTenantAttrRole, error) {
	return c.Query().Where(astenantattrrole.IsDeleted(0), astenantattrrole.ID(id)).Only(ctx)
}

// FindOneX is like FindOne, but panics if an error occurs.
func (c *AsTenantAttrRoleClient) FindOneX(ctx context.Context, id int64) *AsTenantAttrRole {
	obj, err := c.FindOne(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Get returns a AsTenantAttrRole entity by its id.
func (c *AsTenantAttrRoleClient) Get(ctx context.Context, id int64) (*AsTenantAttrRole, error) {
	return c.Query().Where(astenantattrrole.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AsTenantAttrRoleClient) GetX(ctx context.Context, id int64) *AsTenantAttrRole {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenantAttrx queries the tenantAttrx edge of a AsTenantAttrRole.
func (c *AsTenantAttrRoleClient) QueryTenantAttrx(atar *AsTenantAttrRole) *AsTenantAttrQuery {
	query := &AsTenantAttrQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := atar.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(astenantattrrole.Table, astenantattrrole.FieldID, id),
			sqlgraph.To(astenantattr.Table, astenantattr.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, astenantattrrole.TenantAttrxTable, astenantattrrole.TenantAttrxColumn),
		)
		fromV = sqlgraph.Neighbors(atar.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRolex queries the rolex edge of a AsTenantAttrRole.
func (c *AsTenantAttrRoleClient) QueryRolex(atar *AsTenantAttrRole) *AsRoleQuery {
	query := &AsRoleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := atar.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(astenantattrrole.Table, astenantattrrole.FieldID, id),
			sqlgraph.To(asrole.Table, asrole.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, astenantattrrole.RolexTable, astenantattrrole.RolexColumn),
		)
		fromV = sqlgraph.Neighbors(atar.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// FindTenantAttrx queries the tenantAttrx edge of a AsTenantAttrRole.
func (c *AsTenantAttrRoleClient) FindTenantAttrx(atar *AsTenantAttrRole) *AsTenantAttrQuery {
	return c.QueryTenantAttrx(atar).Where(astenantattr.IsDeleted(0))
}

// FindRolex queries the rolex edge of a AsTenantAttrRole.
func (c *AsTenantAttrRoleClient) FindRolex(atar *AsTenantAttrRole) *AsRoleQuery {
	return c.QueryRolex(atar).Where(asrole.IsDeleted(0))
}

// Hooks returns the client hooks.
func (c *AsTenantAttrRoleClient) Hooks() []Hook {
	return c.hooks.AsTenantAttrRole
}

// AsTenantIconClient is a client for the AsTenantIcon schema.
type AsTenantIconClient struct {
	config
}

// NewAsTenantIconClient returns a client for the AsTenantIcon from the given config.
func NewAsTenantIconClient(c config) *AsTenantIconClient {
	return &AsTenantIconClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `astenanticon.Hooks(f(g(h())))`.
func (c *AsTenantIconClient) Use(hooks ...Hook) {
	c.hooks.AsTenantIcon = append(c.hooks.AsTenantIcon, hooks...)
}

// Create returns a create builder for AsTenantIcon.
func (c *AsTenantIconClient) Create() *AsTenantIconCreate {
	mutation := newAsTenantIconMutation(c.config, OpCreate)
	return &AsTenantIconCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AsTenantIcon entities.
func (c *AsTenantIconClient) CreateBulk(builders ...*AsTenantIconCreate) *AsTenantIconCreateBulk {
	return &AsTenantIconCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AsTenantIcon.
func (c *AsTenantIconClient) Update() *AsTenantIconUpdate {
	mutation := newAsTenantIconMutation(c.config, OpUpdate)
	return &AsTenantIconUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AsTenantIconClient) UpdateOne(ati *AsTenantIcon) *AsTenantIconUpdateOne {
	mutation := newAsTenantIconMutation(c.config, OpUpdateOne, withAsTenantIcon(ati))
	return &AsTenantIconUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AsTenantIconClient) UpdateOneID(id int64) *AsTenantIconUpdateOne {
	mutation := newAsTenantIconMutation(c.config, OpUpdateOne, withAsTenantIconID(id))
	return &AsTenantIconUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Remove returns an update builder for AsTenantIcon.
func (c *AsTenantIconClient) Remove() *AsTenantIconUpdate {
	return c.Update().SetIsDeleted(1)
}

// RemoveOne returns an update builder for the given entity.
func (c *AsTenantIconClient) RemoveOne(ati *AsTenantIcon) *AsTenantIconUpdateOne {
	return c.UpdateOne(ati).SetIsDeleted(1)
}

// RemoveOneID returns an update builder for the given id.
func (c *AsTenantIconClient) RemoveOneID(id int64) *AsTenantIconUpdateOne {
	return c.UpdateOneID(id).SetIsDeleted(1)
}

// Delete returns a delete builder for AsTenantIcon.
func (c *AsTenantIconClient) Delete() *AsTenantIconDelete {
	mutation := newAsTenantIconMutation(c.config, OpDelete)
	return &AsTenantIconDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AsTenantIconClient) DeleteOne(ati *AsTenantIcon) *AsTenantIconDeleteOne {
	return c.DeleteOneID(ati.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AsTenantIconClient) DeleteOneID(id int64) *AsTenantIconDeleteOne {
	builder := c.Delete().Where(astenanticon.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AsTenantIconDeleteOne{builder}
}

// Query returns a query builder for AsTenantIcon.
func (c *AsTenantIconClient) Query() *AsTenantIconQuery {
	return &AsTenantIconQuery{
		config: c.config,
	}
}

// Find returns a query builder for AsTenantIcon, filter is_delete = 0.
func (c *AsTenantIconClient) Find() *AsTenantIconQuery {
	return c.Query().Where(astenanticon.IsDeleted(0))
}

// FindOne returns a AsTenantIcon entity by its id., filter is_delete = 0.
func (c *AsTenantIconClient) FindOne(ctx context.Context, id int64) (*AsTenantIcon, error) {
	return c.Query().Where(astenanticon.IsDeleted(0), astenanticon.ID(id)).Only(ctx)
}

// FindOneX is like FindOne, but panics if an error occurs.
func (c *AsTenantIconClient) FindOneX(ctx context.Context, id int64) *AsTenantIcon {
	obj, err := c.FindOne(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Get returns a AsTenantIcon entity by its id.
func (c *AsTenantIconClient) Get(ctx context.Context, id int64) (*AsTenantIcon, error) {
	return c.Query().Where(astenanticon.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AsTenantIconClient) GetX(ctx context.Context, id int64) *AsTenantIcon {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AsTenantIconClient) Hooks() []Hook {
	return c.hooks.AsTenantIcon
}

// AsUnitClient is a client for the AsUnit schema.
type AsUnitClient struct {
	config
}

// NewAsUnitClient returns a client for the AsUnit from the given config.
func NewAsUnitClient(c config) *AsUnitClient {
	return &AsUnitClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `asunit.Hooks(f(g(h())))`.
func (c *AsUnitClient) Use(hooks ...Hook) {
	c.hooks.AsUnit = append(c.hooks.AsUnit, hooks...)
}

// Create returns a create builder for AsUnit.
func (c *AsUnitClient) Create() *AsUnitCreate {
	mutation := newAsUnitMutation(c.config, OpCreate)
	return &AsUnitCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AsUnit entities.
func (c *AsUnitClient) CreateBulk(builders ...*AsUnitCreate) *AsUnitCreateBulk {
	return &AsUnitCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AsUnit.
func (c *AsUnitClient) Update() *AsUnitUpdate {
	mutation := newAsUnitMutation(c.config, OpUpdate)
	return &AsUnitUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AsUnitClient) UpdateOne(au *AsUnit) *AsUnitUpdateOne {
	mutation := newAsUnitMutation(c.config, OpUpdateOne, withAsUnit(au))
	return &AsUnitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AsUnitClient) UpdateOneID(id int64) *AsUnitUpdateOne {
	mutation := newAsUnitMutation(c.config, OpUpdateOne, withAsUnitID(id))
	return &AsUnitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Remove returns an update builder for AsUnit.
func (c *AsUnitClient) Remove() *AsUnitUpdate {
	return c.Update().SetIsDeleted(1)
}

// RemoveOne returns an update builder for the given entity.
func (c *AsUnitClient) RemoveOne(au *AsUnit) *AsUnitUpdateOne {
	return c.UpdateOne(au).SetIsDeleted(1)
}

// RemoveOneID returns an update builder for the given id.
func (c *AsUnitClient) RemoveOneID(id int64) *AsUnitUpdateOne {
	return c.UpdateOneID(id).SetIsDeleted(1)
}

// Delete returns a delete builder for AsUnit.
func (c *AsUnitClient) Delete() *AsUnitDelete {
	mutation := newAsUnitMutation(c.config, OpDelete)
	return &AsUnitDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AsUnitClient) DeleteOne(au *AsUnit) *AsUnitDeleteOne {
	return c.DeleteOneID(au.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AsUnitClient) DeleteOneID(id int64) *AsUnitDeleteOne {
	builder := c.Delete().Where(asunit.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AsUnitDeleteOne{builder}
}

// Query returns a query builder for AsUnit.
func (c *AsUnitClient) Query() *AsUnitQuery {
	return &AsUnitQuery{
		config: c.config,
	}
}

// Find returns a query builder for AsUnit, filter is_delete = 0.
func (c *AsUnitClient) Find() *AsUnitQuery {
	return c.Query().Where(asunit.IsDeleted(0))
}

// FindOne returns a AsUnit entity by its id., filter is_delete = 0.
func (c *AsUnitClient) FindOne(ctx context.Context, id int64) (*AsUnit, error) {
	return c.Query().Where(asunit.IsDeleted(0), asunit.ID(id)).Only(ctx)
}

// FindOneX is like FindOne, but panics if an error occurs.
func (c *AsUnitClient) FindOneX(ctx context.Context, id int64) *AsUnit {
	obj, err := c.FindOne(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Get returns a AsUnit entity by its id.
func (c *AsUnitClient) Get(ctx context.Context, id int64) (*AsUnit, error) {
	return c.Query().Where(asunit.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AsUnitClient) GetX(ctx context.Context, id int64) *AsUnit {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenantx queries the tenantx edge of a AsUnit.
func (c *AsUnitClient) QueryTenantx(au *AsUnit) *AsTenantQuery {
	query := &AsTenantQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := au.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asunit.Table, asunit.FieldID, id),
			sqlgraph.To(astenant.Table, astenant.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, asunit.TenantxTable, asunit.TenantxColumn),
		)
		fromV = sqlgraph.Neighbors(au.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// FindTenantx queries the tenantx edge of a AsUnit.
func (c *AsUnitClient) FindTenantx(au *AsUnit) *AsTenantQuery {
	return c.QueryTenantx(au).Where(astenant.IsDeleted(0))
}

// Hooks returns the client hooks.
func (c *AsUnitClient) Hooks() []Hook {
	return c.hooks.AsUnit
}

// AsUserClient is a client for the AsUser schema.
type AsUserClient struct {
	config
}

// NewAsUserClient returns a client for the AsUser from the given config.
func NewAsUserClient(c config) *AsUserClient {
	return &AsUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `asuser.Hooks(f(g(h())))`.
func (c *AsUserClient) Use(hooks ...Hook) {
	c.hooks.AsUser = append(c.hooks.AsUser, hooks...)
}

// Create returns a create builder for AsUser.
func (c *AsUserClient) Create() *AsUserCreate {
	mutation := newAsUserMutation(c.config, OpCreate)
	return &AsUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AsUser entities.
func (c *AsUserClient) CreateBulk(builders ...*AsUserCreate) *AsUserCreateBulk {
	return &AsUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AsUser.
func (c *AsUserClient) Update() *AsUserUpdate {
	mutation := newAsUserMutation(c.config, OpUpdate)
	return &AsUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AsUserClient) UpdateOne(au *AsUser) *AsUserUpdateOne {
	mutation := newAsUserMutation(c.config, OpUpdateOne, withAsUser(au))
	return &AsUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AsUserClient) UpdateOneID(id int64) *AsUserUpdateOne {
	mutation := newAsUserMutation(c.config, OpUpdateOne, withAsUserID(id))
	return &AsUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Remove returns an update builder for AsUser.
func (c *AsUserClient) Remove() *AsUserUpdate {
	return c.Update().SetIsDeleted(1)
}

// RemoveOne returns an update builder for the given entity.
func (c *AsUserClient) RemoveOne(au *AsUser) *AsUserUpdateOne {
	return c.UpdateOne(au).SetIsDeleted(1)
}

// RemoveOneID returns an update builder for the given id.
func (c *AsUserClient) RemoveOneID(id int64) *AsUserUpdateOne {
	return c.UpdateOneID(id).SetIsDeleted(1)
}

// Delete returns a delete builder for AsUser.
func (c *AsUserClient) Delete() *AsUserDelete {
	mutation := newAsUserMutation(c.config, OpDelete)
	return &AsUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AsUserClient) DeleteOne(au *AsUser) *AsUserDeleteOne {
	return c.DeleteOneID(au.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AsUserClient) DeleteOneID(id int64) *AsUserDeleteOne {
	builder := c.Delete().Where(asuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AsUserDeleteOne{builder}
}

// Query returns a query builder for AsUser.
func (c *AsUserClient) Query() *AsUserQuery {
	return &AsUserQuery{
		config: c.config,
	}
}

// Find returns a query builder for AsUser, filter is_delete = 0.
func (c *AsUserClient) Find() *AsUserQuery {
	return c.Query().Where(asuser.IsDeleted(0))
}

// FindOne returns a AsUser entity by its id., filter is_delete = 0.
func (c *AsUserClient) FindOne(ctx context.Context, id int64) (*AsUser, error) {
	return c.Query().Where(asuser.IsDeleted(0), asuser.ID(id)).Only(ctx)
}

// FindOneX is like FindOne, but panics if an error occurs.
func (c *AsUserClient) FindOneX(ctx context.Context, id int64) *AsUser {
	obj, err := c.FindOne(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Get returns a AsUser entity by its id.
func (c *AsUserClient) Get(ctx context.Context, id int64) (*AsUser, error) {
	return c.Query().Where(asuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AsUserClient) GetX(ctx context.Context, id int64) *AsUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPerson queries the person edge of a AsUser.
func (c *AsUserClient) QueryPerson(au *AsUser) *AsPersonQuery {
	query := &AsPersonQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := au.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asuser.Table, asuser.FieldID, id),
			sqlgraph.To(asperson.Table, asperson.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, asuser.PersonTable, asuser.PersonColumn),
		)
		fromV = sqlgraph.Neighbors(au.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoles queries the roles edge of a AsUser.
func (c *AsUserClient) QueryRoles(au *AsUser) *AsRoleQuery {
	query := &AsRoleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := au.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asuser.Table, asuser.FieldID, id),
			sqlgraph.To(asrole.Table, asrole.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, asuser.RolesTable, asuser.RolesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(au.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryJobs queries the jobs edge of a AsUser.
func (c *AsUserClient) QueryJobs(au *AsUser) *AsJobQuery {
	query := &AsJobQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := au.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asuser.Table, asuser.FieldID, id),
			sqlgraph.To(asjob.Table, asjob.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, asuser.JobsTable, asuser.JobsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(au.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUsedapps queries the usedapps edge of a AsUser.
func (c *AsUserClient) QueryUsedapps(au *AsUser) *AsMarketUsedAppQuery {
	query := &AsMarketUsedAppQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := au.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asuser.Table, asuser.FieldID, id),
			sqlgraph.To(asmarketusedapp.Table, asmarketusedapp.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asuser.UsedappsTable, asuser.UsedappsColumn),
		)
		fromV = sqlgraph.Neighbors(au.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkingDatas queries the workingDatas edge of a AsUser.
func (c *AsUserClient) QueryWorkingDatas(au *AsUser) *AsWorkingDataQuery {
	query := &AsWorkingDataQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := au.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asuser.Table, asuser.FieldID, id),
			sqlgraph.To(asworkingdata.Table, asworkingdata.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asuser.WorkingDatasTable, asuser.WorkingDatasColumn),
		)
		fromV = sqlgraph.Neighbors(au.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAgencys queries the agencys edge of a AsUser.
func (c *AsUserClient) QueryAgencys(au *AsUser) *AsInnerAgencyQuery {
	query := &AsInnerAgencyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := au.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asuser.Table, asuser.FieldID, id),
			sqlgraph.To(asinneragency.Table, asinneragency.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, asuser.AgencysTable, asuser.AgencysPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(au.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoleDistribs queries the roleDistribs edge of a AsUser.
func (c *AsUserClient) QueryRoleDistribs(au *AsUser) *AsMarketRoleDistributionQuery {
	query := &AsMarketRoleDistributionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := au.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asuser.Table, asuser.FieldID, id),
			sqlgraph.To(asmarketroledistribution.Table, asmarketroledistribution.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asuser.RoleDistribsTable, asuser.RoleDistribsColumn),
		)
		fromV = sqlgraph.Neighbors(au.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAppMenusUserSorts queries the appMenusUserSorts edge of a AsUser.
func (c *AsUserClient) QueryAppMenusUserSorts(au *AsUser) *AsMarketMenuUserSortQuery {
	query := &AsMarketMenuUserSortQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := au.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asuser.Table, asuser.FieldID, id),
			sqlgraph.To(asmarketmenuusersort.Table, asmarketmenuusersort.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asuser.AppMenusUserSortsTable, asuser.AppMenusUserSortsColumn),
		)
		fromV = sqlgraph.Neighbors(au.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAppUserTemplates queries the appUserTemplates edge of a AsUser.
func (c *AsUserClient) QueryAppUserTemplates(au *AsUser) *AsMarketAppUserTemplateQuery {
	query := &AsMarketAppUserTemplateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := au.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asuser.Table, asuser.FieldID, id),
			sqlgraph.To(asmarketappusertemplate.Table, asmarketappusertemplate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asuser.AppUserTemplatesTable, asuser.AppUserTemplatesColumn),
		)
		fromV = sqlgraph.Neighbors(au.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// FindPerson queries the person edge of a AsUser.
func (c *AsUserClient) FindPerson(au *AsUser) *AsPersonQuery {
	return c.QueryPerson(au).Where(asperson.IsDeleted(0))
}

// FindRoles queries the roles edge of a AsUser.
func (c *AsUserClient) FindRoles(au *AsUser) *AsRoleQuery {
	return c.QueryRoles(au).Where(asrole.IsDeleted(0))
}

// FindJobs queries the jobs edge of a AsUser.
func (c *AsUserClient) FindJobs(au *AsUser) *AsJobQuery {
	return c.QueryJobs(au).Where(asjob.IsDeleted(0))
}

// FindUsedapps queries the usedapps edge of a AsUser.
func (c *AsUserClient) FindUsedapps(au *AsUser) *AsMarketUsedAppQuery {
	return c.QueryUsedapps(au).Where(asmarketusedapp.IsDeleted(0))
}

// FindWorkingDatas queries the workingDatas edge of a AsUser.
func (c *AsUserClient) FindWorkingDatas(au *AsUser) *AsWorkingDataQuery {
	return c.QueryWorkingDatas(au).Where(asworkingdata.IsDeleted(0))
}

// FindAgencys queries the agencys edge of a AsUser.
func (c *AsUserClient) FindAgencys(au *AsUser) *AsInnerAgencyQuery {
	return c.QueryAgencys(au).Where(asinneragency.IsDeleted(0))
}

// FindRoleDistribs queries the roleDistribs edge of a AsUser.
func (c *AsUserClient) FindRoleDistribs(au *AsUser) *AsMarketRoleDistributionQuery {
	return c.QueryRoleDistribs(au).Where(asmarketroledistribution.IsDeleted(0))
}

// FindAppMenusUserSorts queries the appMenusUserSorts edge of a AsUser.
func (c *AsUserClient) FindAppMenusUserSorts(au *AsUser) *AsMarketMenuUserSortQuery {
	return c.QueryAppMenusUserSorts(au).Where(asmarketmenuusersort.IsDeleted(0))
}

// FindAppUserTemplates queries the appUserTemplates edge of a AsUser.
func (c *AsUserClient) FindAppUserTemplates(au *AsUser) *AsMarketAppUserTemplateQuery {
	return c.QueryAppUserTemplates(au).Where(asmarketappusertemplate.IsDeleted(0))
}

// Hooks returns the client hooks.
func (c *AsUserClient) Hooks() []Hook {
	return c.hooks.AsUser
}

// AsWorkingDataClient is a client for the AsWorkingData schema.
type AsWorkingDataClient struct {
	config
}

// NewAsWorkingDataClient returns a client for the AsWorkingData from the given config.
func NewAsWorkingDataClient(c config) *AsWorkingDataClient {
	return &AsWorkingDataClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `asworkingdata.Hooks(f(g(h())))`.
func (c *AsWorkingDataClient) Use(hooks ...Hook) {
	c.hooks.AsWorkingData = append(c.hooks.AsWorkingData, hooks...)
}

// Create returns a create builder for AsWorkingData.
func (c *AsWorkingDataClient) Create() *AsWorkingDataCreate {
	mutation := newAsWorkingDataMutation(c.config, OpCreate)
	return &AsWorkingDataCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AsWorkingData entities.
func (c *AsWorkingDataClient) CreateBulk(builders ...*AsWorkingDataCreate) *AsWorkingDataCreateBulk {
	return &AsWorkingDataCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AsWorkingData.
func (c *AsWorkingDataClient) Update() *AsWorkingDataUpdate {
	mutation := newAsWorkingDataMutation(c.config, OpUpdate)
	return &AsWorkingDataUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AsWorkingDataClient) UpdateOne(awd *AsWorkingData) *AsWorkingDataUpdateOne {
	mutation := newAsWorkingDataMutation(c.config, OpUpdateOne, withAsWorkingData(awd))
	return &AsWorkingDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AsWorkingDataClient) UpdateOneID(id int64) *AsWorkingDataUpdateOne {
	mutation := newAsWorkingDataMutation(c.config, OpUpdateOne, withAsWorkingDataID(id))
	return &AsWorkingDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Remove returns an update builder for AsWorkingData.
func (c *AsWorkingDataClient) Remove() *AsWorkingDataUpdate {
	return c.Update().SetIsDeleted(1)
}

// RemoveOne returns an update builder for the given entity.
func (c *AsWorkingDataClient) RemoveOne(awd *AsWorkingData) *AsWorkingDataUpdateOne {
	return c.UpdateOne(awd).SetIsDeleted(1)
}

// RemoveOneID returns an update builder for the given id.
func (c *AsWorkingDataClient) RemoveOneID(id int64) *AsWorkingDataUpdateOne {
	return c.UpdateOneID(id).SetIsDeleted(1)
}

// Delete returns a delete builder for AsWorkingData.
func (c *AsWorkingDataClient) Delete() *AsWorkingDataDelete {
	mutation := newAsWorkingDataMutation(c.config, OpDelete)
	return &AsWorkingDataDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AsWorkingDataClient) DeleteOne(awd *AsWorkingData) *AsWorkingDataDeleteOne {
	return c.DeleteOneID(awd.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AsWorkingDataClient) DeleteOneID(id int64) *AsWorkingDataDeleteOne {
	builder := c.Delete().Where(asworkingdata.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AsWorkingDataDeleteOne{builder}
}

// Query returns a query builder for AsWorkingData.
func (c *AsWorkingDataClient) Query() *AsWorkingDataQuery {
	return &AsWorkingDataQuery{
		config: c.config,
	}
}

// Find returns a query builder for AsWorkingData, filter is_delete = 0.
func (c *AsWorkingDataClient) Find() *AsWorkingDataQuery {
	return c.Query().Where(asworkingdata.IsDeleted(0))
}

// FindOne returns a AsWorkingData entity by its id., filter is_delete = 0.
func (c *AsWorkingDataClient) FindOne(ctx context.Context, id int64) (*AsWorkingData, error) {
	return c.Query().Where(asworkingdata.IsDeleted(0), asworkingdata.ID(id)).Only(ctx)
}

// FindOneX is like FindOne, but panics if an error occurs.
func (c *AsWorkingDataClient) FindOneX(ctx context.Context, id int64) *AsWorkingData {
	obj, err := c.FindOne(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Get returns a AsWorkingData entity by its id.
func (c *AsWorkingDataClient) Get(ctx context.Context, id int64) (*AsWorkingData, error) {
	return c.Query().Where(asworkingdata.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AsWorkingDataClient) GetX(ctx context.Context, id int64) *AsWorkingData {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a AsWorkingData.
func (c *AsWorkingDataClient) QueryUser(awd *AsWorkingData) *AsUserQuery {
	query := &AsUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := awd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asworkingdata.Table, asworkingdata.FieldID, id),
			sqlgraph.To(asuser.Table, asuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asworkingdata.UserTable, asworkingdata.UserColumn),
		)
		fromV = sqlgraph.Neighbors(awd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// FindUser queries the user edge of a AsWorkingData.
func (c *AsWorkingDataClient) FindUser(awd *AsWorkingData) *AsUserQuery {
	return c.QueryUser(awd).Where(asuser.IsDeleted(0))
}

// Hooks returns the client hooks.
func (c *AsWorkingDataClient) Hooks() []Hook {
	return c.hooks.AsWorkingData
}

// BaseinfoadministrativeareaallClient is a client for the Baseinfoadministrativeareaall schema.
type BaseinfoadministrativeareaallClient struct {
	config
}

// NewBaseinfoadministrativeareaallClient returns a client for the Baseinfoadministrativeareaall from the given config.
func NewBaseinfoadministrativeareaallClient(c config) *BaseinfoadministrativeareaallClient {
	return &BaseinfoadministrativeareaallClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `baseinfoadministrativeareaall.Hooks(f(g(h())))`.
func (c *BaseinfoadministrativeareaallClient) Use(hooks ...Hook) {
	c.hooks.Baseinfoadministrativeareaall = append(c.hooks.Baseinfoadministrativeareaall, hooks...)
}

// Create returns a create builder for Baseinfoadministrativeareaall.
func (c *BaseinfoadministrativeareaallClient) Create() *BaseinfoadministrativeareaallCreate {
	mutation := newBaseinfoadministrativeareaallMutation(c.config, OpCreate)
	return &BaseinfoadministrativeareaallCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Baseinfoadministrativeareaall entities.
func (c *BaseinfoadministrativeareaallClient) CreateBulk(builders ...*BaseinfoadministrativeareaallCreate) *BaseinfoadministrativeareaallCreateBulk {
	return &BaseinfoadministrativeareaallCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Baseinfoadministrativeareaall.
func (c *BaseinfoadministrativeareaallClient) Update() *BaseinfoadministrativeareaallUpdate {
	mutation := newBaseinfoadministrativeareaallMutation(c.config, OpUpdate)
	return &BaseinfoadministrativeareaallUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BaseinfoadministrativeareaallClient) UpdateOne(b *Baseinfoadministrativeareaall) *BaseinfoadministrativeareaallUpdateOne {
	mutation := newBaseinfoadministrativeareaallMutation(c.config, OpUpdateOne, withBaseinfoadministrativeareaall(b))
	return &BaseinfoadministrativeareaallUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BaseinfoadministrativeareaallClient) UpdateOneID(id int64) *BaseinfoadministrativeareaallUpdateOne {
	mutation := newBaseinfoadministrativeareaallMutation(c.config, OpUpdateOne, withBaseinfoadministrativeareaallID(id))
	return &BaseinfoadministrativeareaallUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Remove returns an update builder for Baseinfoadministrativeareaall.
func (c *BaseinfoadministrativeareaallClient) Remove() *BaseinfoadministrativeareaallUpdate {
	return c.Update().SetIsDeleted(1)
}

// RemoveOne returns an update builder for the given entity.
func (c *BaseinfoadministrativeareaallClient) RemoveOne(b *Baseinfoadministrativeareaall) *BaseinfoadministrativeareaallUpdateOne {
	return c.UpdateOne(b).SetIsDeleted(1)
}

// RemoveOneID returns an update builder for the given id.
func (c *BaseinfoadministrativeareaallClient) RemoveOneID(id int64) *BaseinfoadministrativeareaallUpdateOne {
	return c.UpdateOneID(id).SetIsDeleted(1)
}

// Delete returns a delete builder for Baseinfoadministrativeareaall.
func (c *BaseinfoadministrativeareaallClient) Delete() *BaseinfoadministrativeareaallDelete {
	mutation := newBaseinfoadministrativeareaallMutation(c.config, OpDelete)
	return &BaseinfoadministrativeareaallDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BaseinfoadministrativeareaallClient) DeleteOne(b *Baseinfoadministrativeareaall) *BaseinfoadministrativeareaallDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BaseinfoadministrativeareaallClient) DeleteOneID(id int64) *BaseinfoadministrativeareaallDeleteOne {
	builder := c.Delete().Where(baseinfoadministrativeareaall.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BaseinfoadministrativeareaallDeleteOne{builder}
}

// Query returns a query builder for Baseinfoadministrativeareaall.
func (c *BaseinfoadministrativeareaallClient) Query() *BaseinfoadministrativeareaallQuery {
	return &BaseinfoadministrativeareaallQuery{
		config: c.config,
	}
}

// Find returns a query builder for Baseinfoadministrativeareaall, filter is_delete = 0.
func (c *BaseinfoadministrativeareaallClient) Find() *BaseinfoadministrativeareaallQuery {
	return c.Query().Where(baseinfoadministrativeareaall.IsDeleted(0))
}

// FindOne returns a Baseinfoadministrativeareaall entity by its id., filter is_delete = 0.
func (c *BaseinfoadministrativeareaallClient) FindOne(ctx context.Context, id int64) (*Baseinfoadministrativeareaall, error) {
	return c.Query().Where(baseinfoadministrativeareaall.IsDeleted(0), baseinfoadministrativeareaall.ID(id)).Only(ctx)
}

// FindOneX is like FindOne, but panics if an error occurs.
func (c *BaseinfoadministrativeareaallClient) FindOneX(ctx context.Context, id int64) *Baseinfoadministrativeareaall {
	obj, err := c.FindOne(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Get returns a Baseinfoadministrativeareaall entity by its id.
func (c *BaseinfoadministrativeareaallClient) Get(ctx context.Context, id int64) (*Baseinfoadministrativeareaall, error) {
	return c.Query().Where(baseinfoadministrativeareaall.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BaseinfoadministrativeareaallClient) GetX(ctx context.Context, id int64) *Baseinfoadministrativeareaall {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParentx queries the parentx edge of a Baseinfoadministrativeareaall.
func (c *BaseinfoadministrativeareaallClient) QueryParentx(b *Baseinfoadministrativeareaall) *BaseinfoadministrativeareaallQuery {
	query := &BaseinfoadministrativeareaallQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(baseinfoadministrativeareaall.Table, baseinfoadministrativeareaall.FieldID, id),
			sqlgraph.To(baseinfoadministrativeareaall.Table, baseinfoadministrativeareaall.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, baseinfoadministrativeareaall.ParentxTable, baseinfoadministrativeareaall.ParentxColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildrens queries the childrens edge of a Baseinfoadministrativeareaall.
func (c *BaseinfoadministrativeareaallClient) QueryChildrens(b *Baseinfoadministrativeareaall) *BaseinfoadministrativeareaallQuery {
	query := &BaseinfoadministrativeareaallQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(baseinfoadministrativeareaall.Table, baseinfoadministrativeareaall.FieldID, id),
			sqlgraph.To(baseinfoadministrativeareaall.Table, baseinfoadministrativeareaall.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, baseinfoadministrativeareaall.ChildrensTable, baseinfoadministrativeareaall.ChildrensColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// FindParentx queries the parentx edge of a Baseinfoadministrativeareaall.
func (c *BaseinfoadministrativeareaallClient) FindParentx(b *Baseinfoadministrativeareaall) *BaseinfoadministrativeareaallQuery {
	return c.QueryParentx(b).Where(baseinfoadministrativeareaall.IsDeleted(0))
}

// FindChildrens queries the childrens edge of a Baseinfoadministrativeareaall.
func (c *BaseinfoadministrativeareaallClient) FindChildrens(b *Baseinfoadministrativeareaall) *BaseinfoadministrativeareaallQuery {
	return c.QueryChildrens(b).Where(baseinfoadministrativeareaall.IsDeleted(0))
}

// Hooks returns the client hooks.
func (c *BaseinfoadministrativeareaallClient) Hooks() []Hook {
	return c.hooks.Baseinfoadministrativeareaall
}
