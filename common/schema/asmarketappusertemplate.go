// Code generated by entc, DO NOT EDIT.

package schema

import (
	"fmt"
	"orginone/common/schema/asmarketappcomponenttemplate"
	"orginone/common/schema/asmarketappusertemplate"
	"orginone/common/schema/asuser"
	"orginone/common/tools/date"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// AsMarketAppUserTemplate is the model entity for the AsMarketAppUserTemplate schema.
type AsMarketAppUserTemplate struct {
	config `json:"-"`
	// ID of the ent.
	// 主键
	ID int64 `json:"id,string"`
	// UserID holds the value of the "user_id" field.
	// 用户id
	UserID int64 `json:"userId"`
	// TemplateID holds the value of the "template_id" field.
	// 模板ID
	TemplateID int64 `json:"templateId"`
	// UseStatus holds the value of the "use_status" field.
	// 使用状态(-1-默认模板,1-用户自定义模板)
	UseStatus int64 `json:"useStatus"`
	// IsDeleted holds the value of the "is_deleted" field.
	// 是否被删除
	IsDeleted int64 `json:"isDeleted"`
	// Status holds the value of the "status" field.
	// 状态
	Status int64 `json:"status"`
	// CreateUser holds the value of the "create_user" field.
	// 创建用户
	CreateUser int64 `json:"createUser"`
	// UpdateUser holds the value of the "update_user" field.
	// 更新用户
	UpdateUser int64 `json:"updateUser"`
	// CreateTime holds the value of the "create_time" field.
	// 创建时间
	CreateTime date.DateTime `json:"createTime"`
	// UpdateTime holds the value of the "update_time" field.
	// 更新时间
	UpdateTime date.DateTime `json:"updateTime"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AsMarketAppUserTemplateQuery when eager-loading is set.
	Edges AsMarketAppUserTemplateEdges `json:"edges"`
}

// AsMarketAppUserTemplateEdges holds the relations/edges for other nodes in the graph.
type AsMarketAppUserTemplateEdges struct {
	// Userx holds the value of the userx edge.
	Userx *AsUser `json:"userx"`
	// Templatex holds the value of the templatex edge.
	Templatex *AsMarketAppComponentTemplate `json:"templatex"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserxOrErr returns the Userx value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AsMarketAppUserTemplateEdges) UserxOrErr() (*AsUser, error) {
	if e.loadedTypes[0] {
		if e.Userx == nil {
			// The edge userx was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: asuser.Label}
		}
		return e.Userx, nil
	}
	return nil, &NotLoadedError{edge: "userx"}
}

// TemplatexOrErr returns the Templatex value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AsMarketAppUserTemplateEdges) TemplatexOrErr() (*AsMarketAppComponentTemplate, error) {
	if e.loadedTypes[1] {
		if e.Templatex == nil {
			// The edge templatex was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: asmarketappcomponenttemplate.Label}
		}
		return e.Templatex, nil
	}
	return nil, &NotLoadedError{edge: "templatex"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AsMarketAppUserTemplate) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case asmarketappusertemplate.FieldID, asmarketappusertemplate.FieldUserID, asmarketappusertemplate.FieldTemplateID, asmarketappusertemplate.FieldUseStatus, asmarketappusertemplate.FieldIsDeleted, asmarketappusertemplate.FieldStatus, asmarketappusertemplate.FieldCreateUser, asmarketappusertemplate.FieldUpdateUser:
			values[i] = new(sql.NullInt64)
		case asmarketappusertemplate.FieldCreateTime, asmarketappusertemplate.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AsMarketAppUserTemplate", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AsMarketAppUserTemplate fields.
func (amaut *AsMarketAppUserTemplate) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case asmarketappusertemplate.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			amaut.ID = int64(value.Int64)
		case asmarketappusertemplate.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				amaut.UserID = value.Int64
			}
		case asmarketappusertemplate.FieldTemplateID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field template_id", values[i])
			} else if value.Valid {
				amaut.TemplateID = value.Int64
			}
		case asmarketappusertemplate.FieldUseStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field use_status", values[i])
			} else if value.Valid {
				amaut.UseStatus = value.Int64
			}
		case asmarketappusertemplate.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				amaut.IsDeleted = value.Int64
			}
		case asmarketappusertemplate.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				amaut.Status = value.Int64
			}
		case asmarketappusertemplate.FieldCreateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_user", values[i])
			} else if value.Valid {
				amaut.CreateUser = value.Int64
			}
		case asmarketappusertemplate.FieldUpdateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_user", values[i])
			} else if value.Valid {
				amaut.UpdateUser = value.Int64
			}
		case asmarketappusertemplate.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				amaut.CreateTime = date.DateTime(value.Time)
			}
		case asmarketappusertemplate.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				amaut.UpdateTime = date.DateTime(value.Time)
			}
		}
	}
	return nil
}

// QueryUserx queries the "userx" edge of the AsMarketAppUserTemplate entity.
func (amaut *AsMarketAppUserTemplate) QueryUserx() *AsUserQuery {
	return (&AsMarketAppUserTemplateClient{config: amaut.config}).QueryUserx(amaut)
}

// QueryTemplatex queries the "templatex" edge of the AsMarketAppUserTemplate entity.
func (amaut *AsMarketAppUserTemplate) QueryTemplatex() *AsMarketAppComponentTemplateQuery {
	return (&AsMarketAppUserTemplateClient{config: amaut.config}).QueryTemplatex(amaut)
}

// Update returns a builder for updating this AsMarketAppUserTemplate.
// Note that you need to call AsMarketAppUserTemplate.Unwrap() before calling this method if this AsMarketAppUserTemplate
// was returned from a transaction, and the transaction was committed or rolled back.
func (amaut *AsMarketAppUserTemplate) Update() *AsMarketAppUserTemplateUpdateOne {
	return (&AsMarketAppUserTemplateClient{config: amaut.config}).UpdateOne(amaut)
}

// Unwrap unwraps the AsMarketAppUserTemplate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (amaut *AsMarketAppUserTemplate) Unwrap() *AsMarketAppUserTemplate {
	tx, ok := amaut.config.driver.(*txDriver)
	if !ok {
		panic("schema: AsMarketAppUserTemplate is not a transactional entity")
	}
	amaut.config.driver = tx.drv
	return amaut
}

// String implements the fmt.Stringer.
func (amaut *AsMarketAppUserTemplate) String() string {
	var builder strings.Builder
	builder.WriteString("AsMarketAppUserTemplate(")
	builder.WriteString(fmt.Sprintf("id=%v", amaut.ID))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", amaut.UserID))
	builder.WriteString(", template_id=")
	builder.WriteString(fmt.Sprintf("%v", amaut.TemplateID))
	builder.WriteString(", use_status=")
	builder.WriteString(fmt.Sprintf("%v", amaut.UseStatus))
	builder.WriteString(", is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", amaut.IsDeleted))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", amaut.Status))
	builder.WriteString(", create_user=")
	builder.WriteString(fmt.Sprintf("%v", amaut.CreateUser))
	builder.WriteString(", update_user=")
	builder.WriteString(fmt.Sprintf("%v", amaut.UpdateUser))
	builder.WriteString(", create_time=")
	builder.WriteString(fmt.Sprintf("%v", amaut.CreateTime))
	builder.WriteString(", update_time=")
	builder.WriteString(fmt.Sprintf("%v", amaut.UpdateTime))
	builder.WriteByte(')')
	return builder.String()
}

// AsMarketAppUserTemplates is a parsable slice of AsMarketAppUserTemplate.
type AsMarketAppUserTemplates []*AsMarketAppUserTemplate

func (amaut AsMarketAppUserTemplates) config(cfg config) {
	for _i := range amaut {
		amaut[_i].config = cfg
	}
}
