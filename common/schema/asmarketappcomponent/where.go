// Code generated by entc, DO NOT EDIT.

package asmarketappcomponent

import (
	"orginone/common/schema/predicate"
	"orginone/common/tools/date"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCode), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldURL), v))
	})
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// PreviewPic applies equality check predicate on the "preview_pic" field. It's identical to PreviewPicEQ.
func PreviewPic(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPreviewPic), v))
	})
}

// LayoutType applies equality check predicate on the "layout_type" field. It's identical to LayoutTypeEQ.
func LayoutType(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLayoutType), v))
	})
}

// LayoutConfig applies equality check predicate on the "layout_config" field. It's identical to LayoutConfigEQ.
func LayoutConfig(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLayoutConfig), v))
	})
}

// TenantCode applies equality check predicate on the "tenant_code" field. It's identical to TenantCodeEQ.
func TenantCode(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantCode), v))
	})
}

// Source applies equality check predicate on the "source" field. It's identical to SourceEQ.
func Source(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSource), v))
	})
}

// IsDeleted applies equality check predicate on the "is_deleted" field. It's identical to IsDeletedEQ.
func IsDeleted(v int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDeleted), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// CreateUser applies equality check predicate on the "create_user" field. It's identical to CreateUserEQ.
func CreateUser(v int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateUser), v))
	})
}

// UpdateUser applies equality check predicate on the "update_user" field. It's identical to UpdateUserEQ.
func UpdateUser(v int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateUser), v))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v date.DateTime) predicate.AsMarketAppComponent {
	vc := time.Time(v)
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), vc))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v date.DateTime) predicate.AsMarketAppComponent {
	vc := time.Time(v)
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), vc))
	})
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppID), v))
	})
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...int64) predicate.AsMarketAppComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAppID), v...))
	})
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...int64) predicate.AsMarketAppComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAppID), v...))
	})
}

// AppIDIsNil applies the IsNil predicate on the "app_id" field.
func AppIDIsNil() predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAppID)))
	})
}

// AppIDNotNil applies the NotNil predicate on the "app_id" field.
func AppIDNotNil() predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAppID)))
	})
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCode), v))
	})
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCode), v))
	})
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.AsMarketAppComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCode), v...))
	})
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.AsMarketAppComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCode), v...))
	})
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCode), v))
	})
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCode), v))
	})
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCode), v))
	})
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCode), v))
	})
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCode), v))
	})
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCode), v))
	})
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCode), v))
	})
}

// CodeIsNil applies the IsNil predicate on the "code" field.
func CodeIsNil() predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCode)))
	})
}

// CodeNotNil applies the NotNil predicate on the "code" field.
func CodeNotNil() predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCode)))
	})
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCode), v))
	})
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCode), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.AsMarketAppComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.AsMarketAppComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldName)))
	})
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldName)))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldURL), v))
	})
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldURL), v))
	})
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.AsMarketAppComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldURL), v...))
	})
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.AsMarketAppComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldURL), v...))
	})
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldURL), v))
	})
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldURL), v))
	})
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldURL), v))
	})
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldURL), v))
	})
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldURL), v))
	})
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldURL), v))
	})
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldURL), v))
	})
}

// URLIsNil applies the IsNil predicate on the "url" field.
func URLIsNil() predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldURL)))
	})
}

// URLNotNil applies the NotNil predicate on the "url" field.
func URLNotNil() predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldURL)))
	})
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldURL), v))
	})
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldURL), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...int64) predicate.AsMarketAppComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...int64) predicate.AsMarketAppComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldType), v))
	})
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldType), v))
	})
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldType), v))
	})
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldType), v))
	})
}

// TypeIsNil applies the IsNil predicate on the "type" field.
func TypeIsNil() predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldType)))
	})
}

// TypeNotNil applies the NotNil predicate on the "type" field.
func TypeNotNil() predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldType)))
	})
}

// PreviewPicEQ applies the EQ predicate on the "preview_pic" field.
func PreviewPicEQ(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPreviewPic), v))
	})
}

// PreviewPicNEQ applies the NEQ predicate on the "preview_pic" field.
func PreviewPicNEQ(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPreviewPic), v))
	})
}

// PreviewPicIn applies the In predicate on the "preview_pic" field.
func PreviewPicIn(vs ...string) predicate.AsMarketAppComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPreviewPic), v...))
	})
}

// PreviewPicNotIn applies the NotIn predicate on the "preview_pic" field.
func PreviewPicNotIn(vs ...string) predicate.AsMarketAppComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPreviewPic), v...))
	})
}

// PreviewPicGT applies the GT predicate on the "preview_pic" field.
func PreviewPicGT(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPreviewPic), v))
	})
}

// PreviewPicGTE applies the GTE predicate on the "preview_pic" field.
func PreviewPicGTE(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPreviewPic), v))
	})
}

// PreviewPicLT applies the LT predicate on the "preview_pic" field.
func PreviewPicLT(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPreviewPic), v))
	})
}

// PreviewPicLTE applies the LTE predicate on the "preview_pic" field.
func PreviewPicLTE(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPreviewPic), v))
	})
}

// PreviewPicContains applies the Contains predicate on the "preview_pic" field.
func PreviewPicContains(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPreviewPic), v))
	})
}

// PreviewPicHasPrefix applies the HasPrefix predicate on the "preview_pic" field.
func PreviewPicHasPrefix(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPreviewPic), v))
	})
}

// PreviewPicHasSuffix applies the HasSuffix predicate on the "preview_pic" field.
func PreviewPicHasSuffix(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPreviewPic), v))
	})
}

// PreviewPicIsNil applies the IsNil predicate on the "preview_pic" field.
func PreviewPicIsNil() predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPreviewPic)))
	})
}

// PreviewPicNotNil applies the NotNil predicate on the "preview_pic" field.
func PreviewPicNotNil() predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPreviewPic)))
	})
}

// PreviewPicEqualFold applies the EqualFold predicate on the "preview_pic" field.
func PreviewPicEqualFold(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPreviewPic), v))
	})
}

// PreviewPicContainsFold applies the ContainsFold predicate on the "preview_pic" field.
func PreviewPicContainsFold(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPreviewPic), v))
	})
}

// LayoutTypeEQ applies the EQ predicate on the "layout_type" field.
func LayoutTypeEQ(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLayoutType), v))
	})
}

// LayoutTypeNEQ applies the NEQ predicate on the "layout_type" field.
func LayoutTypeNEQ(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLayoutType), v))
	})
}

// LayoutTypeIn applies the In predicate on the "layout_type" field.
func LayoutTypeIn(vs ...string) predicate.AsMarketAppComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLayoutType), v...))
	})
}

// LayoutTypeNotIn applies the NotIn predicate on the "layout_type" field.
func LayoutTypeNotIn(vs ...string) predicate.AsMarketAppComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLayoutType), v...))
	})
}

// LayoutTypeGT applies the GT predicate on the "layout_type" field.
func LayoutTypeGT(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLayoutType), v))
	})
}

// LayoutTypeGTE applies the GTE predicate on the "layout_type" field.
func LayoutTypeGTE(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLayoutType), v))
	})
}

// LayoutTypeLT applies the LT predicate on the "layout_type" field.
func LayoutTypeLT(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLayoutType), v))
	})
}

// LayoutTypeLTE applies the LTE predicate on the "layout_type" field.
func LayoutTypeLTE(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLayoutType), v))
	})
}

// LayoutTypeContains applies the Contains predicate on the "layout_type" field.
func LayoutTypeContains(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLayoutType), v))
	})
}

// LayoutTypeHasPrefix applies the HasPrefix predicate on the "layout_type" field.
func LayoutTypeHasPrefix(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLayoutType), v))
	})
}

// LayoutTypeHasSuffix applies the HasSuffix predicate on the "layout_type" field.
func LayoutTypeHasSuffix(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLayoutType), v))
	})
}

// LayoutTypeIsNil applies the IsNil predicate on the "layout_type" field.
func LayoutTypeIsNil() predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLayoutType)))
	})
}

// LayoutTypeNotNil applies the NotNil predicate on the "layout_type" field.
func LayoutTypeNotNil() predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLayoutType)))
	})
}

// LayoutTypeEqualFold applies the EqualFold predicate on the "layout_type" field.
func LayoutTypeEqualFold(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLayoutType), v))
	})
}

// LayoutTypeContainsFold applies the ContainsFold predicate on the "layout_type" field.
func LayoutTypeContainsFold(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLayoutType), v))
	})
}

// LayoutConfigEQ applies the EQ predicate on the "layout_config" field.
func LayoutConfigEQ(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLayoutConfig), v))
	})
}

// LayoutConfigNEQ applies the NEQ predicate on the "layout_config" field.
func LayoutConfigNEQ(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLayoutConfig), v))
	})
}

// LayoutConfigIn applies the In predicate on the "layout_config" field.
func LayoutConfigIn(vs ...string) predicate.AsMarketAppComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLayoutConfig), v...))
	})
}

// LayoutConfigNotIn applies the NotIn predicate on the "layout_config" field.
func LayoutConfigNotIn(vs ...string) predicate.AsMarketAppComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLayoutConfig), v...))
	})
}

// LayoutConfigGT applies the GT predicate on the "layout_config" field.
func LayoutConfigGT(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLayoutConfig), v))
	})
}

// LayoutConfigGTE applies the GTE predicate on the "layout_config" field.
func LayoutConfigGTE(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLayoutConfig), v))
	})
}

// LayoutConfigLT applies the LT predicate on the "layout_config" field.
func LayoutConfigLT(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLayoutConfig), v))
	})
}

// LayoutConfigLTE applies the LTE predicate on the "layout_config" field.
func LayoutConfigLTE(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLayoutConfig), v))
	})
}

// LayoutConfigContains applies the Contains predicate on the "layout_config" field.
func LayoutConfigContains(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLayoutConfig), v))
	})
}

// LayoutConfigHasPrefix applies the HasPrefix predicate on the "layout_config" field.
func LayoutConfigHasPrefix(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLayoutConfig), v))
	})
}

// LayoutConfigHasSuffix applies the HasSuffix predicate on the "layout_config" field.
func LayoutConfigHasSuffix(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLayoutConfig), v))
	})
}

// LayoutConfigIsNil applies the IsNil predicate on the "layout_config" field.
func LayoutConfigIsNil() predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLayoutConfig)))
	})
}

// LayoutConfigNotNil applies the NotNil predicate on the "layout_config" field.
func LayoutConfigNotNil() predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLayoutConfig)))
	})
}

// LayoutConfigEqualFold applies the EqualFold predicate on the "layout_config" field.
func LayoutConfigEqualFold(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLayoutConfig), v))
	})
}

// LayoutConfigContainsFold applies the ContainsFold predicate on the "layout_config" field.
func LayoutConfigContainsFold(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLayoutConfig), v))
	})
}

// TenantCodeEQ applies the EQ predicate on the "tenant_code" field.
func TenantCodeEQ(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantCode), v))
	})
}

// TenantCodeNEQ applies the NEQ predicate on the "tenant_code" field.
func TenantCodeNEQ(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantCode), v))
	})
}

// TenantCodeIn applies the In predicate on the "tenant_code" field.
func TenantCodeIn(vs ...string) predicate.AsMarketAppComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantCode), v...))
	})
}

// TenantCodeNotIn applies the NotIn predicate on the "tenant_code" field.
func TenantCodeNotIn(vs ...string) predicate.AsMarketAppComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantCode), v...))
	})
}

// TenantCodeGT applies the GT predicate on the "tenant_code" field.
func TenantCodeGT(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantCode), v))
	})
}

// TenantCodeGTE applies the GTE predicate on the "tenant_code" field.
func TenantCodeGTE(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantCode), v))
	})
}

// TenantCodeLT applies the LT predicate on the "tenant_code" field.
func TenantCodeLT(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantCode), v))
	})
}

// TenantCodeLTE applies the LTE predicate on the "tenant_code" field.
func TenantCodeLTE(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantCode), v))
	})
}

// TenantCodeContains applies the Contains predicate on the "tenant_code" field.
func TenantCodeContains(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTenantCode), v))
	})
}

// TenantCodeHasPrefix applies the HasPrefix predicate on the "tenant_code" field.
func TenantCodeHasPrefix(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTenantCode), v))
	})
}

// TenantCodeHasSuffix applies the HasSuffix predicate on the "tenant_code" field.
func TenantCodeHasSuffix(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTenantCode), v))
	})
}

// TenantCodeIsNil applies the IsNil predicate on the "tenant_code" field.
func TenantCodeIsNil() predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTenantCode)))
	})
}

// TenantCodeNotNil applies the NotNil predicate on the "tenant_code" field.
func TenantCodeNotNil() predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTenantCode)))
	})
}

// TenantCodeEqualFold applies the EqualFold predicate on the "tenant_code" field.
func TenantCodeEqualFold(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTenantCode), v))
	})
}

// TenantCodeContainsFold applies the ContainsFold predicate on the "tenant_code" field.
func TenantCodeContainsFold(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTenantCode), v))
	})
}

// SourceEQ applies the EQ predicate on the "source" field.
func SourceEQ(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSource), v))
	})
}

// SourceNEQ applies the NEQ predicate on the "source" field.
func SourceNEQ(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSource), v))
	})
}

// SourceIn applies the In predicate on the "source" field.
func SourceIn(vs ...string) predicate.AsMarketAppComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSource), v...))
	})
}

// SourceNotIn applies the NotIn predicate on the "source" field.
func SourceNotIn(vs ...string) predicate.AsMarketAppComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSource), v...))
	})
}

// SourceGT applies the GT predicate on the "source" field.
func SourceGT(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSource), v))
	})
}

// SourceGTE applies the GTE predicate on the "source" field.
func SourceGTE(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSource), v))
	})
}

// SourceLT applies the LT predicate on the "source" field.
func SourceLT(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSource), v))
	})
}

// SourceLTE applies the LTE predicate on the "source" field.
func SourceLTE(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSource), v))
	})
}

// SourceContains applies the Contains predicate on the "source" field.
func SourceContains(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSource), v))
	})
}

// SourceHasPrefix applies the HasPrefix predicate on the "source" field.
func SourceHasPrefix(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSource), v))
	})
}

// SourceHasSuffix applies the HasSuffix predicate on the "source" field.
func SourceHasSuffix(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSource), v))
	})
}

// SourceIsNil applies the IsNil predicate on the "source" field.
func SourceIsNil() predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSource)))
	})
}

// SourceNotNil applies the NotNil predicate on the "source" field.
func SourceNotNil() predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSource)))
	})
}

// SourceEqualFold applies the EqualFold predicate on the "source" field.
func SourceEqualFold(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSource), v))
	})
}

// SourceContainsFold applies the ContainsFold predicate on the "source" field.
func SourceContainsFold(v string) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSource), v))
	})
}

// IsDeletedEQ applies the EQ predicate on the "is_deleted" field.
func IsDeletedEQ(v int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedNEQ applies the NEQ predicate on the "is_deleted" field.
func IsDeletedNEQ(v int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedIn applies the In predicate on the "is_deleted" field.
func IsDeletedIn(vs ...int64) predicate.AsMarketAppComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsDeleted), v...))
	})
}

// IsDeletedNotIn applies the NotIn predicate on the "is_deleted" field.
func IsDeletedNotIn(vs ...int64) predicate.AsMarketAppComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsDeleted), v...))
	})
}

// IsDeletedGT applies the GT predicate on the "is_deleted" field.
func IsDeletedGT(v int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedGTE applies the GTE predicate on the "is_deleted" field.
func IsDeletedGTE(v int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedLT applies the LT predicate on the "is_deleted" field.
func IsDeletedLT(v int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedLTE applies the LTE predicate on the "is_deleted" field.
func IsDeletedLTE(v int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsDeleted), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int64) predicate.AsMarketAppComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int64) predicate.AsMarketAppComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStatus)))
	})
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStatus)))
	})
}

// CreateUserEQ applies the EQ predicate on the "create_user" field.
func CreateUserEQ(v int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateUser), v))
	})
}

// CreateUserNEQ applies the NEQ predicate on the "create_user" field.
func CreateUserNEQ(v int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateUser), v))
	})
}

// CreateUserIn applies the In predicate on the "create_user" field.
func CreateUserIn(vs ...int64) predicate.AsMarketAppComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateUser), v...))
	})
}

// CreateUserNotIn applies the NotIn predicate on the "create_user" field.
func CreateUserNotIn(vs ...int64) predicate.AsMarketAppComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateUser), v...))
	})
}

// CreateUserGT applies the GT predicate on the "create_user" field.
func CreateUserGT(v int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateUser), v))
	})
}

// CreateUserGTE applies the GTE predicate on the "create_user" field.
func CreateUserGTE(v int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateUser), v))
	})
}

// CreateUserLT applies the LT predicate on the "create_user" field.
func CreateUserLT(v int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateUser), v))
	})
}

// CreateUserLTE applies the LTE predicate on the "create_user" field.
func CreateUserLTE(v int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateUser), v))
	})
}

// CreateUserIsNil applies the IsNil predicate on the "create_user" field.
func CreateUserIsNil() predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreateUser)))
	})
}

// CreateUserNotNil applies the NotNil predicate on the "create_user" field.
func CreateUserNotNil() predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreateUser)))
	})
}

// UpdateUserEQ applies the EQ predicate on the "update_user" field.
func UpdateUserEQ(v int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserNEQ applies the NEQ predicate on the "update_user" field.
func UpdateUserNEQ(v int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserIn applies the In predicate on the "update_user" field.
func UpdateUserIn(vs ...int64) predicate.AsMarketAppComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateUser), v...))
	})
}

// UpdateUserNotIn applies the NotIn predicate on the "update_user" field.
func UpdateUserNotIn(vs ...int64) predicate.AsMarketAppComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateUser), v...))
	})
}

// UpdateUserGT applies the GT predicate on the "update_user" field.
func UpdateUserGT(v int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserGTE applies the GTE predicate on the "update_user" field.
func UpdateUserGTE(v int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserLT applies the LT predicate on the "update_user" field.
func UpdateUserLT(v int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserLTE applies the LTE predicate on the "update_user" field.
func UpdateUserLTE(v int64) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserIsNil applies the IsNil predicate on the "update_user" field.
func UpdateUserIsNil() predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdateUser)))
	})
}

// UpdateUserNotNil applies the NotNil predicate on the "update_user" field.
func UpdateUserNotNil() predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdateUser)))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v date.DateTime) predicate.AsMarketAppComponent {
	vc := time.Time(v)
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v date.DateTime) predicate.AsMarketAppComponent {
	vc := time.Time(v)
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...date.DateTime) predicate.AsMarketAppComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...date.DateTime) predicate.AsMarketAppComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v date.DateTime) predicate.AsMarketAppComponent {
	vc := time.Time(v)
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v date.DateTime) predicate.AsMarketAppComponent {
	vc := time.Time(v)
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v date.DateTime) predicate.AsMarketAppComponent {
	vc := time.Time(v)
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v date.DateTime) predicate.AsMarketAppComponent {
	vc := time.Time(v)
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeIsNil applies the IsNil predicate on the "create_time" field.
func CreateTimeIsNil() predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreateTime)))
	})
}

// CreateTimeNotNil applies the NotNil predicate on the "create_time" field.
func CreateTimeNotNil() predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreateTime)))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v date.DateTime) predicate.AsMarketAppComponent {
	vc := time.Time(v)
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v date.DateTime) predicate.AsMarketAppComponent {
	vc := time.Time(v)
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...date.DateTime) predicate.AsMarketAppComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...date.DateTime) predicate.AsMarketAppComponent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v date.DateTime) predicate.AsMarketAppComponent {
	vc := time.Time(v)
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v date.DateTime) predicate.AsMarketAppComponent {
	vc := time.Time(v)
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v date.DateTime) predicate.AsMarketAppComponent {
	vc := time.Time(v)
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v date.DateTime) predicate.AsMarketAppComponent {
	vc := time.Time(v)
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeIsNil applies the IsNil predicate on the "update_time" field.
func UpdateTimeIsNil() predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdateTime)))
	})
}

// UpdateTimeNotNil applies the NotNil predicate on the "update_time" field.
func UpdateTimeNotNil() predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdateTime)))
	})
}

// HasAppx applies the HasEdge predicate on the "appx" edge.
func HasAppx() predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppxTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AppxTable, AppxColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppxWith applies the HasEdge predicate on the "appx" edge with a given conditions (other predicates).
func HasAppxWith(preds ...predicate.AsMarketApp) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppxInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AppxTable, AppxColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AsMarketAppComponent) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AsMarketAppComponent) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AsMarketAppComponent) predicate.AsMarketAppComponent {
	return predicate.AsMarketAppComponent(func(s *sql.Selector) {
		p(s.Not())
	})
}
