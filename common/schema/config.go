// Code generated by entc, DO NOT EDIT.

package schema

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect"
)

// Option function to configure the client.
type Option func(*config)

// Config is the configuration for the client and its builder.
type config struct {
	// driver used for executing database requests.
	driver dialect.Driver
	// debug enable a debug logging.
	debug bool
	// log used for logging on debug mode.
	log func(...interface{})
	// hooks to execute on mutations.
	hooks *hooks
}

// hooks per client, for fast access.
type hooks struct {
	AsAllGroup                           []ent.Hook
	AsAppGroupDistributionData           []ent.Hook
	AsDict                               []ent.Hook
	AsGroupTenantRelations               []ent.Hook
	AsInnerAgency                        []ent.Hook
	AsInputData                          []ent.Hook
	AsJob                                []ent.Hook
	AsLayer                              []ent.Hook
	AsMarketApp                          []ent.Hook
	AsMarketAppAlert                     []ent.Hook
	AsMarketAppComponent                 []ent.Hook
	AsMarketAppComponentTemplate         []ent.Hook
	AsMarketAppGroupDistribution         []ent.Hook
	AsMarketAppGroupDistributionRelation []ent.Hook
	AsMarketAppKeySecret                 []ent.Hook
	AsMarketAppNotice                    []ent.Hook
	AsMarketAppPurchase                  []ent.Hook
	AsMarketAppRole                      []ent.Hook
	AsMarketAppUserTemplate              []ent.Hook
	AsMarketMenu                         []ent.Hook
	AsMarketMenuUserSort                 []ent.Hook
	AsMarketRoleDistribution             []ent.Hook
	AsMarketRoleMenu                     []ent.Hook
	AsMarketUsedApp                      []ent.Hook
	AsMenu                               []ent.Hook
	AsPerson                             []ent.Hook
	AsPersonSingle                       []ent.Hook
	AsProperties                         []ent.Hook
	AsPropertiesDistribution             []ent.Hook
	AsRedeployData                       []ent.Hook
	AsRole                               []ent.Hook
	AsTenant                             []ent.Hook
	AsTenantAttr                         []ent.Hook
	AsTenantAttrRole                     []ent.Hook
	AsTenantIcon                         []ent.Hook
	AsUnit                               []ent.Hook
	AsUser                               []ent.Hook
	AsWorkingData                        []ent.Hook
	Baseinfoadministrativeareaall        []ent.Hook
}

// Options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...interface{})) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}
