// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/asmarketapp"
	"orginone/common/schema/asmarketapprole"
	"orginone/common/schema/asmarketmenu"
	"orginone/common/schema/asmarketmenuusersort"
	"orginone/common/schema/asmarketrolemenu"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsMarketMenuCreate is the builder for creating a AsMarketMenu entity.
type AsMarketMenuCreate struct {
	config
	mutation *AsMarketMenuMutation
	hooks    []Hook
}

// SetAppID sets the "app_id" field.
func (ammc *AsMarketMenuCreate) SetAppID(i int64) *AsMarketMenuCreate {
	ammc.mutation.SetAppID(i)
	return ammc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (ammc *AsMarketMenuCreate) SetNillableAppID(i *int64) *AsMarketMenuCreate {
	if i != nil {
		ammc.SetAppID(*i)
	}
	return ammc
}

// SetParentID sets the "parent_id" field.
func (ammc *AsMarketMenuCreate) SetParentID(i int64) *AsMarketMenuCreate {
	ammc.mutation.SetParentID(i)
	return ammc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (ammc *AsMarketMenuCreate) SetNillableParentID(i *int64) *AsMarketMenuCreate {
	if i != nil {
		ammc.SetParentID(*i)
	}
	return ammc
}

// SetMenuName sets the "menu_name" field.
func (ammc *AsMarketMenuCreate) SetMenuName(s string) *AsMarketMenuCreate {
	ammc.mutation.SetMenuName(s)
	return ammc
}

// SetNillableMenuName sets the "menu_name" field if the given value is not nil.
func (ammc *AsMarketMenuCreate) SetNillableMenuName(s *string) *AsMarketMenuCreate {
	if s != nil {
		ammc.SetMenuName(*s)
	}
	return ammc
}

// SetMenuURL sets the "menu_url" field.
func (ammc *AsMarketMenuCreate) SetMenuURL(s string) *AsMarketMenuCreate {
	ammc.mutation.SetMenuURL(s)
	return ammc
}

// SetNillableMenuURL sets the "menu_url" field if the given value is not nil.
func (ammc *AsMarketMenuCreate) SetNillableMenuURL(s *string) *AsMarketMenuCreate {
	if s != nil {
		ammc.SetMenuURL(*s)
	}
	return ammc
}

// SetMenuColumn sets the "menu_column" field.
func (ammc *AsMarketMenuCreate) SetMenuColumn(s string) *AsMarketMenuCreate {
	ammc.mutation.SetMenuColumn(s)
	return ammc
}

// SetNillableMenuColumn sets the "menu_column" field if the given value is not nil.
func (ammc *AsMarketMenuCreate) SetNillableMenuColumn(s *string) *AsMarketMenuCreate {
	if s != nil {
		ammc.SetMenuColumn(*s)
	}
	return ammc
}

// SetIcon sets the "icon" field.
func (ammc *AsMarketMenuCreate) SetIcon(s string) *AsMarketMenuCreate {
	ammc.mutation.SetIcon(s)
	return ammc
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (ammc *AsMarketMenuCreate) SetNillableIcon(s *string) *AsMarketMenuCreate {
	if s != nil {
		ammc.SetIcon(*s)
	}
	return ammc
}

// SetSort sets the "sort" field.
func (ammc *AsMarketMenuCreate) SetSort(i int64) *AsMarketMenuCreate {
	ammc.mutation.SetSort(i)
	return ammc
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (ammc *AsMarketMenuCreate) SetNillableSort(i *int64) *AsMarketMenuCreate {
	if i != nil {
		ammc.SetSort(*i)
	}
	return ammc
}

// SetHTTPSMenuURL sets the "https_menu_url" field.
func (ammc *AsMarketMenuCreate) SetHTTPSMenuURL(s string) *AsMarketMenuCreate {
	ammc.mutation.SetHTTPSMenuURL(s)
	return ammc
}

// SetNillableHTTPSMenuURL sets the "https_menu_url" field if the given value is not nil.
func (ammc *AsMarketMenuCreate) SetNillableHTTPSMenuURL(s *string) *AsMarketMenuCreate {
	if s != nil {
		ammc.SetHTTPSMenuURL(*s)
	}
	return ammc
}

// SetReformStatus sets the "reform_status" field.
func (ammc *AsMarketMenuCreate) SetReformStatus(i int64) *AsMarketMenuCreate {
	ammc.mutation.SetReformStatus(i)
	return ammc
}

// SetNillableReformStatus sets the "reform_status" field if the given value is not nil.
func (ammc *AsMarketMenuCreate) SetNillableReformStatus(i *int64) *AsMarketMenuCreate {
	if i != nil {
		ammc.SetReformStatus(*i)
	}
	return ammc
}

// SetOutIPMenuURL sets the "out_ip_menu_url" field.
func (ammc *AsMarketMenuCreate) SetOutIPMenuURL(s string) *AsMarketMenuCreate {
	ammc.mutation.SetOutIPMenuURL(s)
	return ammc
}

// SetNillableOutIPMenuURL sets the "out_ip_menu_url" field if the given value is not nil.
func (ammc *AsMarketMenuCreate) SetNillableOutIPMenuURL(s *string) *AsMarketMenuCreate {
	if s != nil {
		ammc.SetOutIPMenuURL(*s)
	}
	return ammc
}

// SetIsDeleted sets the "is_deleted" field.
func (ammc *AsMarketMenuCreate) SetIsDeleted(i int64) *AsMarketMenuCreate {
	ammc.mutation.SetIsDeleted(i)
	return ammc
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (ammc *AsMarketMenuCreate) SetNillableIsDeleted(i *int64) *AsMarketMenuCreate {
	if i != nil {
		ammc.SetIsDeleted(*i)
	}
	return ammc
}

// SetStatus sets the "status" field.
func (ammc *AsMarketMenuCreate) SetStatus(i int64) *AsMarketMenuCreate {
	ammc.mutation.SetStatus(i)
	return ammc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ammc *AsMarketMenuCreate) SetNillableStatus(i *int64) *AsMarketMenuCreate {
	if i != nil {
		ammc.SetStatus(*i)
	}
	return ammc
}

// SetCreateUser sets the "create_user" field.
func (ammc *AsMarketMenuCreate) SetCreateUser(i int64) *AsMarketMenuCreate {
	ammc.mutation.SetCreateUser(i)
	return ammc
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (ammc *AsMarketMenuCreate) SetNillableCreateUser(i *int64) *AsMarketMenuCreate {
	if i != nil {
		ammc.SetCreateUser(*i)
	}
	return ammc
}

// SetUpdateUser sets the "update_user" field.
func (ammc *AsMarketMenuCreate) SetUpdateUser(i int64) *AsMarketMenuCreate {
	ammc.mutation.SetUpdateUser(i)
	return ammc
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (ammc *AsMarketMenuCreate) SetNillableUpdateUser(i *int64) *AsMarketMenuCreate {
	if i != nil {
		ammc.SetUpdateUser(*i)
	}
	return ammc
}

// SetCreateTime sets the "create_time" field.
func (ammc *AsMarketMenuCreate) SetCreateTime(dt date.DateTime) *AsMarketMenuCreate {
	ammc.mutation.SetCreateTime(dt)
	return ammc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ammc *AsMarketMenuCreate) SetNillableCreateTime(dt *date.DateTime) *AsMarketMenuCreate {
	if dt != nil {
		ammc.SetCreateTime(*dt)
	}
	return ammc
}

// SetUpdateTime sets the "update_time" field.
func (ammc *AsMarketMenuCreate) SetUpdateTime(dt date.DateTime) *AsMarketMenuCreate {
	ammc.mutation.SetUpdateTime(dt)
	return ammc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ammc *AsMarketMenuCreate) SetNillableUpdateTime(dt *date.DateTime) *AsMarketMenuCreate {
	if dt != nil {
		ammc.SetUpdateTime(*dt)
	}
	return ammc
}

// SetID sets the "id" field.
func (ammc *AsMarketMenuCreate) SetID(i int64) *AsMarketMenuCreate {
	ammc.mutation.SetID(i)
	return ammc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ammc *AsMarketMenuCreate) SetNillableID(i *int64) *AsMarketMenuCreate {
	if i != nil {
		ammc.SetID(*i)
	}
	return ammc
}

// SetParent sets the "parent" edge to the AsMarketMenu entity.
func (ammc *AsMarketMenuCreate) SetParent(a *AsMarketMenu) *AsMarketMenuCreate {
	return ammc.SetParentID(a.ID)
}

// AddChildrenIDs adds the "childrens" edge to the AsMarketMenu entity by IDs.
func (ammc *AsMarketMenuCreate) AddChildrenIDs(ids ...int64) *AsMarketMenuCreate {
	ammc.mutation.AddChildrenIDs(ids...)
	return ammc
}

// AddChildrens adds the "childrens" edges to the AsMarketMenu entity.
func (ammc *AsMarketMenuCreate) AddChildrens(a ...*AsMarketMenu) *AsMarketMenuCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ammc.AddChildrenIDs(ids...)
}

// SetAppxID sets the "appx" edge to the AsMarketApp entity by ID.
func (ammc *AsMarketMenuCreate) SetAppxID(id int64) *AsMarketMenuCreate {
	ammc.mutation.SetAppxID(id)
	return ammc
}

// SetNillableAppxID sets the "appx" edge to the AsMarketApp entity by ID if the given value is not nil.
func (ammc *AsMarketMenuCreate) SetNillableAppxID(id *int64) *AsMarketMenuCreate {
	if id != nil {
		ammc = ammc.SetAppxID(*id)
	}
	return ammc
}

// SetAppx sets the "appx" edge to the AsMarketApp entity.
func (ammc *AsMarketMenuCreate) SetAppx(a *AsMarketApp) *AsMarketMenuCreate {
	return ammc.SetAppxID(a.ID)
}

// AddRoleMenuIDs adds the "roleMenus" edge to the AsMarketRoleMenu entity by IDs.
func (ammc *AsMarketMenuCreate) AddRoleMenuIDs(ids ...int64) *AsMarketMenuCreate {
	ammc.mutation.AddRoleMenuIDs(ids...)
	return ammc
}

// AddRoleMenus adds the "roleMenus" edges to the AsMarketRoleMenu entity.
func (ammc *AsMarketMenuCreate) AddRoleMenus(a ...*AsMarketRoleMenu) *AsMarketMenuCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ammc.AddRoleMenuIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the AsMarketAppRole entity by IDs.
func (ammc *AsMarketMenuCreate) AddRoleIDs(ids ...int64) *AsMarketMenuCreate {
	ammc.mutation.AddRoleIDs(ids...)
	return ammc
}

// AddRoles adds the "roles" edges to the AsMarketAppRole entity.
func (ammc *AsMarketMenuCreate) AddRoles(a ...*AsMarketAppRole) *AsMarketMenuCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ammc.AddRoleIDs(ids...)
}

// AddUserSortIDs adds the "UserSorts" edge to the AsMarketMenuUserSort entity by IDs.
func (ammc *AsMarketMenuCreate) AddUserSortIDs(ids ...int64) *AsMarketMenuCreate {
	ammc.mutation.AddUserSortIDs(ids...)
	return ammc
}

// AddUserSorts adds the "UserSorts" edges to the AsMarketMenuUserSort entity.
func (ammc *AsMarketMenuCreate) AddUserSorts(a ...*AsMarketMenuUserSort) *AsMarketMenuCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ammc.AddUserSortIDs(ids...)
}

// Mutation returns the AsMarketMenuMutation object of the builder.
func (ammc *AsMarketMenuCreate) Mutation() *AsMarketMenuMutation {
	return ammc.mutation
}

// Save creates the AsMarketMenu in the database.
func (ammc *AsMarketMenuCreate) Save(ctx context.Context) (*AsMarketMenu, error) {
	var (
		err  error
		node *AsMarketMenu
	)
	ammc.defaults()
	if len(ammc.hooks) == 0 {
		if err = ammc.check(); err != nil {
			return nil, err
		}
		node, err = ammc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsMarketMenuMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ammc.check(); err != nil {
				return nil, err
			}
			ammc.mutation = mutation
			if node, err = ammc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ammc.hooks) - 1; i >= 0; i-- {
			if ammc.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = ammc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ammc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ammc *AsMarketMenuCreate) SaveX(ctx context.Context) *AsMarketMenu {
	v, err := ammc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ammc *AsMarketMenuCreate) Exec(ctx context.Context) error {
	_, err := ammc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ammc *AsMarketMenuCreate) ExecX(ctx context.Context) {
	if err := ammc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ammc *AsMarketMenuCreate) defaults() {
	if _, ok := ammc.mutation.Sort(); !ok {
		v := asmarketmenu.DefaultSort
		ammc.mutation.SetSort(v)
	}
	if _, ok := ammc.mutation.ReformStatus(); !ok {
		v := asmarketmenu.DefaultReformStatus
		ammc.mutation.SetReformStatus(v)
	}
	if _, ok := ammc.mutation.IsDeleted(); !ok {
		v := asmarketmenu.DefaultIsDeleted
		ammc.mutation.SetIsDeleted(v)
	}
	if _, ok := ammc.mutation.Status(); !ok {
		v := asmarketmenu.DefaultStatus
		ammc.mutation.SetStatus(v)
	}
	if _, ok := ammc.mutation.CreateTime(); !ok {
		v := asmarketmenu.DefaultCreateTime()
		ammc.mutation.SetCreateTime(v)
	}
	if _, ok := ammc.mutation.UpdateTime(); !ok {
		v := asmarketmenu.DefaultUpdateTime()
		ammc.mutation.SetUpdateTime(v)
	}
	if _, ok := ammc.mutation.ID(); !ok {
		v := asmarketmenu.DefaultID()
		ammc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ammc *AsMarketMenuCreate) check() error {
	if _, ok := ammc.mutation.ReformStatus(); !ok {
		return &ValidationError{Name: "reform_status", err: errors.New(`schema: missing required field "AsMarketMenu.reform_status"`)}
	}
	if _, ok := ammc.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "is_deleted", err: errors.New(`schema: missing required field "AsMarketMenu.is_deleted"`)}
	}
	return nil
}

func (ammc *AsMarketMenuCreate) sqlSave(ctx context.Context) (*AsMarketMenu, error) {
	_node, _spec := ammc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ammc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (ammc *AsMarketMenuCreate) createSpec() (*AsMarketMenu, *sqlgraph.CreateSpec) {
	var (
		_node = &AsMarketMenu{config: ammc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: asmarketmenu.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asmarketmenu.FieldID,
			},
		}
	)
	if id, ok := ammc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ammc.mutation.MenuName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketmenu.FieldMenuName,
		})
		_node.MenuName = value
	}
	if value, ok := ammc.mutation.MenuURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketmenu.FieldMenuURL,
		})
		_node.MenuURL = value
	}
	if value, ok := ammc.mutation.MenuColumn(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketmenu.FieldMenuColumn,
		})
		_node.MenuColumn = value
	}
	if value, ok := ammc.mutation.Icon(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketmenu.FieldIcon,
		})
		_node.Icon = value
	}
	if value, ok := ammc.mutation.Sort(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketmenu.FieldSort,
		})
		_node.Sort = value
	}
	if value, ok := ammc.mutation.HTTPSMenuURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketmenu.FieldHTTPSMenuURL,
		})
		_node.HTTPSMenuURL = value
	}
	if value, ok := ammc.mutation.ReformStatus(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketmenu.FieldReformStatus,
		})
		_node.ReformStatus = value
	}
	if value, ok := ammc.mutation.OutIPMenuURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketmenu.FieldOutIPMenuURL,
		})
		_node.OutIPMenuURL = value
	}
	if value, ok := ammc.mutation.IsDeleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketmenu.FieldIsDeleted,
		})
		_node.IsDeleted = value
	}
	if value, ok := ammc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketmenu.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := ammc.mutation.CreateUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketmenu.FieldCreateUser,
		})
		_node.CreateUser = value
	}
	if value, ok := ammc.mutation.UpdateUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketmenu.FieldUpdateUser,
		})
		_node.UpdateUser = value
	}
	if value, ok := ammc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketmenu.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := ammc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketmenu.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if nodes := ammc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketmenu.ParentTable,
			Columns: []string{asmarketmenu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ammc.mutation.ChildrensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketmenu.ChildrensTable,
			Columns: []string{asmarketmenu.ChildrensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ammc.mutation.AppxIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asmarketmenu.AppxTable,
			Columns: []string{asmarketmenu.AppxColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapp.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AppID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ammc.mutation.RoleMenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketmenu.RoleMenusTable,
			Columns: []string{asmarketmenu.RoleMenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketrolemenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ammc.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asmarketmenu.RolesTable,
			Columns: asmarketmenu.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketapprole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ammc.mutation.UserSortsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketmenu.UserSortsTable,
			Columns: []string{asmarketmenu.UserSortsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketmenuusersort.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AsMarketMenuCreateBulk is the builder for creating many AsMarketMenu entities in bulk.
type AsMarketMenuCreateBulk struct {
	config
	builders []*AsMarketMenuCreate
}

// Save creates the AsMarketMenu entities in the database.
func (ammcb *AsMarketMenuCreateBulk) Save(ctx context.Context) ([]*AsMarketMenu, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ammcb.builders))
	nodes := make([]*AsMarketMenu, len(ammcb.builders))
	mutators := make([]Mutator, len(ammcb.builders))
	for i := range ammcb.builders {
		func(i int, root context.Context) {
			builder := ammcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AsMarketMenuMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ammcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ammcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ammcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ammcb *AsMarketMenuCreateBulk) SaveX(ctx context.Context) []*AsMarketMenu {
	v, err := ammcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ammcb *AsMarketMenuCreateBulk) Exec(ctx context.Context) error {
	_, err := ammcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ammcb *AsMarketMenuCreateBulk) ExecX(ctx context.Context) {
	if err := ammcb.Exec(ctx); err != nil {
		panic(err)
	}
}
