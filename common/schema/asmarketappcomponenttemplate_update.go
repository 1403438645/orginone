// Code generated by entc, DO NOT EDIT.

package schema

import (
	"context"
	"errors"
	"fmt"
	"orginone/common/schema/asmarketappcomponenttemplate"
	"orginone/common/schema/asmarketappusertemplate"
	"orginone/common/schema/predicate"
	"orginone/common/tools/date"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsMarketAppComponentTemplateUpdate is the builder for updating AsMarketAppComponentTemplate entities.
type AsMarketAppComponentTemplateUpdate struct {
	config
	hooks    []Hook
	mutation *AsMarketAppComponentTemplateMutation
}

// Where appends a list predicates to the AsMarketAppComponentTemplateUpdate builder.
func (amactu *AsMarketAppComponentTemplateUpdate) Where(ps ...predicate.AsMarketAppComponentTemplate) *AsMarketAppComponentTemplateUpdate {
	amactu.mutation.Where(ps...)
	return amactu
}

// SetName sets the "name" field.
func (amactu *AsMarketAppComponentTemplateUpdate) SetName(s string) *AsMarketAppComponentTemplateUpdate {
	amactu.mutation.SetName(s)
	return amactu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (amactu *AsMarketAppComponentTemplateUpdate) SetNillableName(s *string) *AsMarketAppComponentTemplateUpdate {
	if s != nil {
		amactu.SetName(*s)
	}
	return amactu
}

// ClearName clears the value of the "name" field.
func (amactu *AsMarketAppComponentTemplateUpdate) ClearName() *AsMarketAppComponentTemplateUpdate {
	amactu.mutation.ClearName()
	return amactu
}

// SetConfig sets the "config" field.
func (amactu *AsMarketAppComponentTemplateUpdate) SetConfig(s string) *AsMarketAppComponentTemplateUpdate {
	amactu.mutation.SetConfig(s)
	return amactu
}

// SetNillableConfig sets the "config" field if the given value is not nil.
func (amactu *AsMarketAppComponentTemplateUpdate) SetNillableConfig(s *string) *AsMarketAppComponentTemplateUpdate {
	if s != nil {
		amactu.SetConfig(*s)
	}
	return amactu
}

// ClearConfig clears the value of the "config" field.
func (amactu *AsMarketAppComponentTemplateUpdate) ClearConfig() *AsMarketAppComponentTemplateUpdate {
	amactu.mutation.ClearConfig()
	return amactu
}

// SetIsDefault sets the "is_default" field.
func (amactu *AsMarketAppComponentTemplateUpdate) SetIsDefault(i int64) *AsMarketAppComponentTemplateUpdate {
	amactu.mutation.ResetIsDefault()
	amactu.mutation.SetIsDefault(i)
	return amactu
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (amactu *AsMarketAppComponentTemplateUpdate) SetNillableIsDefault(i *int64) *AsMarketAppComponentTemplateUpdate {
	if i != nil {
		amactu.SetIsDefault(*i)
	}
	return amactu
}

// AddIsDefault adds i to the "is_default" field.
func (amactu *AsMarketAppComponentTemplateUpdate) AddIsDefault(i int64) *AsMarketAppComponentTemplateUpdate {
	amactu.mutation.AddIsDefault(i)
	return amactu
}

// ClearIsDefault clears the value of the "is_default" field.
func (amactu *AsMarketAppComponentTemplateUpdate) ClearIsDefault() *AsMarketAppComponentTemplateUpdate {
	amactu.mutation.ClearIsDefault()
	return amactu
}

// SetIsDeleted sets the "is_deleted" field.
func (amactu *AsMarketAppComponentTemplateUpdate) SetIsDeleted(i int64) *AsMarketAppComponentTemplateUpdate {
	amactu.mutation.ResetIsDeleted()
	amactu.mutation.SetIsDeleted(i)
	return amactu
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (amactu *AsMarketAppComponentTemplateUpdate) SetNillableIsDeleted(i *int64) *AsMarketAppComponentTemplateUpdate {
	if i != nil {
		amactu.SetIsDeleted(*i)
	}
	return amactu
}

// AddIsDeleted adds i to the "is_deleted" field.
func (amactu *AsMarketAppComponentTemplateUpdate) AddIsDeleted(i int64) *AsMarketAppComponentTemplateUpdate {
	amactu.mutation.AddIsDeleted(i)
	return amactu
}

// SetStatus sets the "status" field.
func (amactu *AsMarketAppComponentTemplateUpdate) SetStatus(i int64) *AsMarketAppComponentTemplateUpdate {
	amactu.mutation.ResetStatus()
	amactu.mutation.SetStatus(i)
	return amactu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (amactu *AsMarketAppComponentTemplateUpdate) SetNillableStatus(i *int64) *AsMarketAppComponentTemplateUpdate {
	if i != nil {
		amactu.SetStatus(*i)
	}
	return amactu
}

// AddStatus adds i to the "status" field.
func (amactu *AsMarketAppComponentTemplateUpdate) AddStatus(i int64) *AsMarketAppComponentTemplateUpdate {
	amactu.mutation.AddStatus(i)
	return amactu
}

// ClearStatus clears the value of the "status" field.
func (amactu *AsMarketAppComponentTemplateUpdate) ClearStatus() *AsMarketAppComponentTemplateUpdate {
	amactu.mutation.ClearStatus()
	return amactu
}

// SetCreateUser sets the "create_user" field.
func (amactu *AsMarketAppComponentTemplateUpdate) SetCreateUser(i int64) *AsMarketAppComponentTemplateUpdate {
	amactu.mutation.ResetCreateUser()
	amactu.mutation.SetCreateUser(i)
	return amactu
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (amactu *AsMarketAppComponentTemplateUpdate) SetNillableCreateUser(i *int64) *AsMarketAppComponentTemplateUpdate {
	if i != nil {
		amactu.SetCreateUser(*i)
	}
	return amactu
}

// AddCreateUser adds i to the "create_user" field.
func (amactu *AsMarketAppComponentTemplateUpdate) AddCreateUser(i int64) *AsMarketAppComponentTemplateUpdate {
	amactu.mutation.AddCreateUser(i)
	return amactu
}

// ClearCreateUser clears the value of the "create_user" field.
func (amactu *AsMarketAppComponentTemplateUpdate) ClearCreateUser() *AsMarketAppComponentTemplateUpdate {
	amactu.mutation.ClearCreateUser()
	return amactu
}

// SetUpdateUser sets the "update_user" field.
func (amactu *AsMarketAppComponentTemplateUpdate) SetUpdateUser(i int64) *AsMarketAppComponentTemplateUpdate {
	amactu.mutation.ResetUpdateUser()
	amactu.mutation.SetUpdateUser(i)
	return amactu
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (amactu *AsMarketAppComponentTemplateUpdate) SetNillableUpdateUser(i *int64) *AsMarketAppComponentTemplateUpdate {
	if i != nil {
		amactu.SetUpdateUser(*i)
	}
	return amactu
}

// AddUpdateUser adds i to the "update_user" field.
func (amactu *AsMarketAppComponentTemplateUpdate) AddUpdateUser(i int64) *AsMarketAppComponentTemplateUpdate {
	amactu.mutation.AddUpdateUser(i)
	return amactu
}

// ClearUpdateUser clears the value of the "update_user" field.
func (amactu *AsMarketAppComponentTemplateUpdate) ClearUpdateUser() *AsMarketAppComponentTemplateUpdate {
	amactu.mutation.ClearUpdateUser()
	return amactu
}

// SetUpdateTime sets the "update_time" field.
func (amactu *AsMarketAppComponentTemplateUpdate) SetUpdateTime(dt date.DateTime) *AsMarketAppComponentTemplateUpdate {
	amactu.mutation.SetUpdateTime(dt)
	return amactu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (amactu *AsMarketAppComponentTemplateUpdate) ClearUpdateTime() *AsMarketAppComponentTemplateUpdate {
	amactu.mutation.ClearUpdateTime()
	return amactu
}

// AddAppUserTemplateIDs adds the "appUserTemplates" edge to the AsMarketAppUserTemplate entity by IDs.
func (amactu *AsMarketAppComponentTemplateUpdate) AddAppUserTemplateIDs(ids ...int64) *AsMarketAppComponentTemplateUpdate {
	amactu.mutation.AddAppUserTemplateIDs(ids...)
	return amactu
}

// AddAppUserTemplates adds the "appUserTemplates" edges to the AsMarketAppUserTemplate entity.
func (amactu *AsMarketAppComponentTemplateUpdate) AddAppUserTemplates(a ...*AsMarketAppUserTemplate) *AsMarketAppComponentTemplateUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amactu.AddAppUserTemplateIDs(ids...)
}

// Mutation returns the AsMarketAppComponentTemplateMutation object of the builder.
func (amactu *AsMarketAppComponentTemplateUpdate) Mutation() *AsMarketAppComponentTemplateMutation {
	return amactu.mutation
}

// ClearAppUserTemplates clears all "appUserTemplates" edges to the AsMarketAppUserTemplate entity.
func (amactu *AsMarketAppComponentTemplateUpdate) ClearAppUserTemplates() *AsMarketAppComponentTemplateUpdate {
	amactu.mutation.ClearAppUserTemplates()
	return amactu
}

// RemoveAppUserTemplateIDs removes the "appUserTemplates" edge to AsMarketAppUserTemplate entities by IDs.
func (amactu *AsMarketAppComponentTemplateUpdate) RemoveAppUserTemplateIDs(ids ...int64) *AsMarketAppComponentTemplateUpdate {
	amactu.mutation.RemoveAppUserTemplateIDs(ids...)
	return amactu
}

// RemoveAppUserTemplates removes "appUserTemplates" edges to AsMarketAppUserTemplate entities.
func (amactu *AsMarketAppComponentTemplateUpdate) RemoveAppUserTemplates(a ...*AsMarketAppUserTemplate) *AsMarketAppComponentTemplateUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amactu.RemoveAppUserTemplateIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (amactu *AsMarketAppComponentTemplateUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	amactu.defaults()
	if len(amactu.hooks) == 0 {
		affected, err = amactu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsMarketAppComponentTemplateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			amactu.mutation = mutation
			affected, err = amactu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(amactu.hooks) - 1; i >= 0; i-- {
			if amactu.hooks[i] == nil {
				return 0, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = amactu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, amactu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (amactu *AsMarketAppComponentTemplateUpdate) SaveX(ctx context.Context) int {
	affected, err := amactu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (amactu *AsMarketAppComponentTemplateUpdate) Exec(ctx context.Context) error {
	_, err := amactu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amactu *AsMarketAppComponentTemplateUpdate) ExecX(ctx context.Context) {
	if err := amactu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amactu *AsMarketAppComponentTemplateUpdate) defaults() {
	if _, ok := amactu.mutation.UpdateTime(); !ok && !amactu.mutation.UpdateTimeCleared() {
		v := asmarketappcomponenttemplate.UpdateDefaultUpdateTime()
		amactu.mutation.SetUpdateTime(v)
	}
}

func (amactu *AsMarketAppComponentTemplateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asmarketappcomponenttemplate.Table,
			Columns: asmarketappcomponenttemplate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asmarketappcomponenttemplate.FieldID,
			},
		},
	}
	if ps := amactu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amactu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappcomponenttemplate.FieldName,
		})
	}
	if amactu.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappcomponenttemplate.FieldName,
		})
	}
	if value, ok := amactu.mutation.Config(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappcomponenttemplate.FieldConfig,
		})
	}
	if amactu.mutation.ConfigCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappcomponenttemplate.FieldConfig,
		})
	}
	if value, ok := amactu.mutation.IsDefault(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappcomponenttemplate.FieldIsDefault,
		})
	}
	if value, ok := amactu.mutation.AddedIsDefault(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappcomponenttemplate.FieldIsDefault,
		})
	}
	if amactu.mutation.IsDefaultCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappcomponenttemplate.FieldIsDefault,
		})
	}
	if value, ok := amactu.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappcomponenttemplate.FieldIsDeleted,
		})
	}
	if value, ok := amactu.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappcomponenttemplate.FieldIsDeleted,
		})
	}
	if value, ok := amactu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappcomponenttemplate.FieldStatus,
		})
	}
	if value, ok := amactu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappcomponenttemplate.FieldStatus,
		})
	}
	if amactu.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappcomponenttemplate.FieldStatus,
		})
	}
	if value, ok := amactu.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappcomponenttemplate.FieldCreateUser,
		})
	}
	if value, ok := amactu.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappcomponenttemplate.FieldCreateUser,
		})
	}
	if amactu.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappcomponenttemplate.FieldCreateUser,
		})
	}
	if value, ok := amactu.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappcomponenttemplate.FieldUpdateUser,
		})
	}
	if value, ok := amactu.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappcomponenttemplate.FieldUpdateUser,
		})
	}
	if amactu.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappcomponenttemplate.FieldUpdateUser,
		})
	}
	if amactu.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketappcomponenttemplate.FieldCreateTime,
		})
	}
	if value, ok := amactu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketappcomponenttemplate.FieldUpdateTime,
		})
	}
	if amactu.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketappcomponenttemplate.FieldUpdateTime,
		})
	}
	if amactu.mutation.AppUserTemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketappcomponenttemplate.AppUserTemplatesTable,
			Columns: []string{asmarketappcomponenttemplate.AppUserTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappusertemplate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amactu.mutation.RemovedAppUserTemplatesIDs(); len(nodes) > 0 && !amactu.mutation.AppUserTemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketappcomponenttemplate.AppUserTemplatesTable,
			Columns: []string{asmarketappcomponenttemplate.AppUserTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappusertemplate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amactu.mutation.AppUserTemplatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketappcomponenttemplate.AppUserTemplatesTable,
			Columns: []string{asmarketappcomponenttemplate.AppUserTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappusertemplate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, amactu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asmarketappcomponenttemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AsMarketAppComponentTemplateUpdateOne is the builder for updating a single AsMarketAppComponentTemplate entity.
type AsMarketAppComponentTemplateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AsMarketAppComponentTemplateMutation
}

// SetName sets the "name" field.
func (amactuo *AsMarketAppComponentTemplateUpdateOne) SetName(s string) *AsMarketAppComponentTemplateUpdateOne {
	amactuo.mutation.SetName(s)
	return amactuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (amactuo *AsMarketAppComponentTemplateUpdateOne) SetNillableName(s *string) *AsMarketAppComponentTemplateUpdateOne {
	if s != nil {
		amactuo.SetName(*s)
	}
	return amactuo
}

// ClearName clears the value of the "name" field.
func (amactuo *AsMarketAppComponentTemplateUpdateOne) ClearName() *AsMarketAppComponentTemplateUpdateOne {
	amactuo.mutation.ClearName()
	return amactuo
}

// SetConfig sets the "config" field.
func (amactuo *AsMarketAppComponentTemplateUpdateOne) SetConfig(s string) *AsMarketAppComponentTemplateUpdateOne {
	amactuo.mutation.SetConfig(s)
	return amactuo
}

// SetNillableConfig sets the "config" field if the given value is not nil.
func (amactuo *AsMarketAppComponentTemplateUpdateOne) SetNillableConfig(s *string) *AsMarketAppComponentTemplateUpdateOne {
	if s != nil {
		amactuo.SetConfig(*s)
	}
	return amactuo
}

// ClearConfig clears the value of the "config" field.
func (amactuo *AsMarketAppComponentTemplateUpdateOne) ClearConfig() *AsMarketAppComponentTemplateUpdateOne {
	amactuo.mutation.ClearConfig()
	return amactuo
}

// SetIsDefault sets the "is_default" field.
func (amactuo *AsMarketAppComponentTemplateUpdateOne) SetIsDefault(i int64) *AsMarketAppComponentTemplateUpdateOne {
	amactuo.mutation.ResetIsDefault()
	amactuo.mutation.SetIsDefault(i)
	return amactuo
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (amactuo *AsMarketAppComponentTemplateUpdateOne) SetNillableIsDefault(i *int64) *AsMarketAppComponentTemplateUpdateOne {
	if i != nil {
		amactuo.SetIsDefault(*i)
	}
	return amactuo
}

// AddIsDefault adds i to the "is_default" field.
func (amactuo *AsMarketAppComponentTemplateUpdateOne) AddIsDefault(i int64) *AsMarketAppComponentTemplateUpdateOne {
	amactuo.mutation.AddIsDefault(i)
	return amactuo
}

// ClearIsDefault clears the value of the "is_default" field.
func (amactuo *AsMarketAppComponentTemplateUpdateOne) ClearIsDefault() *AsMarketAppComponentTemplateUpdateOne {
	amactuo.mutation.ClearIsDefault()
	return amactuo
}

// SetIsDeleted sets the "is_deleted" field.
func (amactuo *AsMarketAppComponentTemplateUpdateOne) SetIsDeleted(i int64) *AsMarketAppComponentTemplateUpdateOne {
	amactuo.mutation.ResetIsDeleted()
	amactuo.mutation.SetIsDeleted(i)
	return amactuo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (amactuo *AsMarketAppComponentTemplateUpdateOne) SetNillableIsDeleted(i *int64) *AsMarketAppComponentTemplateUpdateOne {
	if i != nil {
		amactuo.SetIsDeleted(*i)
	}
	return amactuo
}

// AddIsDeleted adds i to the "is_deleted" field.
func (amactuo *AsMarketAppComponentTemplateUpdateOne) AddIsDeleted(i int64) *AsMarketAppComponentTemplateUpdateOne {
	amactuo.mutation.AddIsDeleted(i)
	return amactuo
}

// SetStatus sets the "status" field.
func (amactuo *AsMarketAppComponentTemplateUpdateOne) SetStatus(i int64) *AsMarketAppComponentTemplateUpdateOne {
	amactuo.mutation.ResetStatus()
	amactuo.mutation.SetStatus(i)
	return amactuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (amactuo *AsMarketAppComponentTemplateUpdateOne) SetNillableStatus(i *int64) *AsMarketAppComponentTemplateUpdateOne {
	if i != nil {
		amactuo.SetStatus(*i)
	}
	return amactuo
}

// AddStatus adds i to the "status" field.
func (amactuo *AsMarketAppComponentTemplateUpdateOne) AddStatus(i int64) *AsMarketAppComponentTemplateUpdateOne {
	amactuo.mutation.AddStatus(i)
	return amactuo
}

// ClearStatus clears the value of the "status" field.
func (amactuo *AsMarketAppComponentTemplateUpdateOne) ClearStatus() *AsMarketAppComponentTemplateUpdateOne {
	amactuo.mutation.ClearStatus()
	return amactuo
}

// SetCreateUser sets the "create_user" field.
func (amactuo *AsMarketAppComponentTemplateUpdateOne) SetCreateUser(i int64) *AsMarketAppComponentTemplateUpdateOne {
	amactuo.mutation.ResetCreateUser()
	amactuo.mutation.SetCreateUser(i)
	return amactuo
}

// SetNillableCreateUser sets the "create_user" field if the given value is not nil.
func (amactuo *AsMarketAppComponentTemplateUpdateOne) SetNillableCreateUser(i *int64) *AsMarketAppComponentTemplateUpdateOne {
	if i != nil {
		amactuo.SetCreateUser(*i)
	}
	return amactuo
}

// AddCreateUser adds i to the "create_user" field.
func (amactuo *AsMarketAppComponentTemplateUpdateOne) AddCreateUser(i int64) *AsMarketAppComponentTemplateUpdateOne {
	amactuo.mutation.AddCreateUser(i)
	return amactuo
}

// ClearCreateUser clears the value of the "create_user" field.
func (amactuo *AsMarketAppComponentTemplateUpdateOne) ClearCreateUser() *AsMarketAppComponentTemplateUpdateOne {
	amactuo.mutation.ClearCreateUser()
	return amactuo
}

// SetUpdateUser sets the "update_user" field.
func (amactuo *AsMarketAppComponentTemplateUpdateOne) SetUpdateUser(i int64) *AsMarketAppComponentTemplateUpdateOne {
	amactuo.mutation.ResetUpdateUser()
	amactuo.mutation.SetUpdateUser(i)
	return amactuo
}

// SetNillableUpdateUser sets the "update_user" field if the given value is not nil.
func (amactuo *AsMarketAppComponentTemplateUpdateOne) SetNillableUpdateUser(i *int64) *AsMarketAppComponentTemplateUpdateOne {
	if i != nil {
		amactuo.SetUpdateUser(*i)
	}
	return amactuo
}

// AddUpdateUser adds i to the "update_user" field.
func (amactuo *AsMarketAppComponentTemplateUpdateOne) AddUpdateUser(i int64) *AsMarketAppComponentTemplateUpdateOne {
	amactuo.mutation.AddUpdateUser(i)
	return amactuo
}

// ClearUpdateUser clears the value of the "update_user" field.
func (amactuo *AsMarketAppComponentTemplateUpdateOne) ClearUpdateUser() *AsMarketAppComponentTemplateUpdateOne {
	amactuo.mutation.ClearUpdateUser()
	return amactuo
}

// SetUpdateTime sets the "update_time" field.
func (amactuo *AsMarketAppComponentTemplateUpdateOne) SetUpdateTime(dt date.DateTime) *AsMarketAppComponentTemplateUpdateOne {
	amactuo.mutation.SetUpdateTime(dt)
	return amactuo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (amactuo *AsMarketAppComponentTemplateUpdateOne) ClearUpdateTime() *AsMarketAppComponentTemplateUpdateOne {
	amactuo.mutation.ClearUpdateTime()
	return amactuo
}

// AddAppUserTemplateIDs adds the "appUserTemplates" edge to the AsMarketAppUserTemplate entity by IDs.
func (amactuo *AsMarketAppComponentTemplateUpdateOne) AddAppUserTemplateIDs(ids ...int64) *AsMarketAppComponentTemplateUpdateOne {
	amactuo.mutation.AddAppUserTemplateIDs(ids...)
	return amactuo
}

// AddAppUserTemplates adds the "appUserTemplates" edges to the AsMarketAppUserTemplate entity.
func (amactuo *AsMarketAppComponentTemplateUpdateOne) AddAppUserTemplates(a ...*AsMarketAppUserTemplate) *AsMarketAppComponentTemplateUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amactuo.AddAppUserTemplateIDs(ids...)
}

// Mutation returns the AsMarketAppComponentTemplateMutation object of the builder.
func (amactuo *AsMarketAppComponentTemplateUpdateOne) Mutation() *AsMarketAppComponentTemplateMutation {
	return amactuo.mutation
}

// ClearAppUserTemplates clears all "appUserTemplates" edges to the AsMarketAppUserTemplate entity.
func (amactuo *AsMarketAppComponentTemplateUpdateOne) ClearAppUserTemplates() *AsMarketAppComponentTemplateUpdateOne {
	amactuo.mutation.ClearAppUserTemplates()
	return amactuo
}

// RemoveAppUserTemplateIDs removes the "appUserTemplates" edge to AsMarketAppUserTemplate entities by IDs.
func (amactuo *AsMarketAppComponentTemplateUpdateOne) RemoveAppUserTemplateIDs(ids ...int64) *AsMarketAppComponentTemplateUpdateOne {
	amactuo.mutation.RemoveAppUserTemplateIDs(ids...)
	return amactuo
}

// RemoveAppUserTemplates removes "appUserTemplates" edges to AsMarketAppUserTemplate entities.
func (amactuo *AsMarketAppComponentTemplateUpdateOne) RemoveAppUserTemplates(a ...*AsMarketAppUserTemplate) *AsMarketAppComponentTemplateUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amactuo.RemoveAppUserTemplateIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (amactuo *AsMarketAppComponentTemplateUpdateOne) Select(field string, fields ...string) *AsMarketAppComponentTemplateUpdateOne {
	amactuo.fields = append([]string{field}, fields...)
	return amactuo
}

// Save executes the query and returns the updated AsMarketAppComponentTemplate entity.
func (amactuo *AsMarketAppComponentTemplateUpdateOne) Save(ctx context.Context) (*AsMarketAppComponentTemplate, error) {
	var (
		err  error
		node *AsMarketAppComponentTemplate
	)
	amactuo.defaults()
	if len(amactuo.hooks) == 0 {
		node, err = amactuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AsMarketAppComponentTemplateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			amactuo.mutation = mutation
			node, err = amactuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(amactuo.hooks) - 1; i >= 0; i-- {
			if amactuo.hooks[i] == nil {
				return nil, fmt.Errorf("schema: uninitialized hook (forgotten import schema/runtime?)")
			}
			mut = amactuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, amactuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (amactuo *AsMarketAppComponentTemplateUpdateOne) SaveX(ctx context.Context) *AsMarketAppComponentTemplate {
	node, err := amactuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (amactuo *AsMarketAppComponentTemplateUpdateOne) Exec(ctx context.Context) error {
	_, err := amactuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amactuo *AsMarketAppComponentTemplateUpdateOne) ExecX(ctx context.Context) {
	if err := amactuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amactuo *AsMarketAppComponentTemplateUpdateOne) defaults() {
	if _, ok := amactuo.mutation.UpdateTime(); !ok && !amactuo.mutation.UpdateTimeCleared() {
		v := asmarketappcomponenttemplate.UpdateDefaultUpdateTime()
		amactuo.mutation.SetUpdateTime(v)
	}
}

func (amactuo *AsMarketAppComponentTemplateUpdateOne) sqlSave(ctx context.Context) (_node *AsMarketAppComponentTemplate, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   asmarketappcomponenttemplate.Table,
			Columns: asmarketappcomponenttemplate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: asmarketappcomponenttemplate.FieldID,
			},
		},
	}
	id, ok := amactuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`schema: missing "AsMarketAppComponentTemplate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := amactuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asmarketappcomponenttemplate.FieldID)
		for _, f := range fields {
			if !asmarketappcomponenttemplate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("schema: invalid field %q for query", f)}
			}
			if f != asmarketappcomponenttemplate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := amactuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amactuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappcomponenttemplate.FieldName,
		})
	}
	if amactuo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappcomponenttemplate.FieldName,
		})
	}
	if value, ok := amactuo.mutation.Config(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: asmarketappcomponenttemplate.FieldConfig,
		})
	}
	if amactuo.mutation.ConfigCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: asmarketappcomponenttemplate.FieldConfig,
		})
	}
	if value, ok := amactuo.mutation.IsDefault(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappcomponenttemplate.FieldIsDefault,
		})
	}
	if value, ok := amactuo.mutation.AddedIsDefault(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappcomponenttemplate.FieldIsDefault,
		})
	}
	if amactuo.mutation.IsDefaultCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappcomponenttemplate.FieldIsDefault,
		})
	}
	if value, ok := amactuo.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappcomponenttemplate.FieldIsDeleted,
		})
	}
	if value, ok := amactuo.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappcomponenttemplate.FieldIsDeleted,
		})
	}
	if value, ok := amactuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappcomponenttemplate.FieldStatus,
		})
	}
	if value, ok := amactuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappcomponenttemplate.FieldStatus,
		})
	}
	if amactuo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappcomponenttemplate.FieldStatus,
		})
	}
	if value, ok := amactuo.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappcomponenttemplate.FieldCreateUser,
		})
	}
	if value, ok := amactuo.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappcomponenttemplate.FieldCreateUser,
		})
	}
	if amactuo.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappcomponenttemplate.FieldCreateUser,
		})
	}
	if value, ok := amactuo.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappcomponenttemplate.FieldUpdateUser,
		})
	}
	if value, ok := amactuo.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: asmarketappcomponenttemplate.FieldUpdateUser,
		})
	}
	if amactuo.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: asmarketappcomponenttemplate.FieldUpdateUser,
		})
	}
	if amactuo.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketappcomponenttemplate.FieldCreateTime,
		})
	}
	if value, ok := amactuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: asmarketappcomponenttemplate.FieldUpdateTime,
		})
	}
	if amactuo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: asmarketappcomponenttemplate.FieldUpdateTime,
		})
	}
	if amactuo.mutation.AppUserTemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketappcomponenttemplate.AppUserTemplatesTable,
			Columns: []string{asmarketappcomponenttemplate.AppUserTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappusertemplate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amactuo.mutation.RemovedAppUserTemplatesIDs(); len(nodes) > 0 && !amactuo.mutation.AppUserTemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketappcomponenttemplate.AppUserTemplatesTable,
			Columns: []string{asmarketappcomponenttemplate.AppUserTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappusertemplate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amactuo.mutation.AppUserTemplatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asmarketappcomponenttemplate.AppUserTemplatesTable,
			Columns: []string{asmarketappcomponenttemplate.AppUserTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: asmarketappusertemplate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AsMarketAppComponentTemplate{config: amactuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, amactuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asmarketappcomponenttemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
