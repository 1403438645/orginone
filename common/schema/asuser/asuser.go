// Code generated by entc, DO NOT EDIT.

package asuser

import (
	"orginone/common/tools/date"
)

const (
	// Label holds the string label denoting the asuser type in the database.
	Label = "as_user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantCode holds the string denoting the tenant_code field in the database.
	FieldTenantCode = "tenant_code"
	// FieldPwd holds the string denoting the pwd field in the database.
	FieldPwd = "pwd"
	// FieldPhoneNumber holds the string denoting the phone_number field in the database.
	FieldPhoneNumber = "phone_number"
	// FieldIsAdmin holds the string denoting the is_admin field in the database.
	FieldIsAdmin = "is_admin"
	// FieldTenantApplyingState holds the string denoting the tenant_applying_state field in the database.
	FieldTenantApplyingState = "tenant_applying_state"
	// FieldIsMaster holds the string denoting the is_master field in the database.
	FieldIsMaster = "is_master"
	// FieldIsCreated holds the string denoting the is_created field in the database.
	FieldIsCreated = "is_created"
	// FieldOpenID holds the string denoting the open_id field in the database.
	FieldOpenID = "open_id"
	// FieldUserName holds the string denoting the user_name field in the database.
	FieldUserName = "user_name"
	// FieldIsDeleted holds the string denoting the is_deleted field in the database.
	FieldIsDeleted = "is_deleted"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreateUser holds the string denoting the create_user field in the database.
	FieldCreateUser = "create_user"
	// FieldUpdateUser holds the string denoting the update_user field in the database.
	FieldUpdateUser = "update_user"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// EdgePerson holds the string denoting the person edge name in mutations.
	EdgePerson = "person"
	// EdgeRoles holds the string denoting the roles edge name in mutations.
	EdgeRoles = "roles"
	// EdgeJobs holds the string denoting the jobs edge name in mutations.
	EdgeJobs = "jobs"
	// EdgeUsedapps holds the string denoting the usedapps edge name in mutations.
	EdgeUsedapps = "usedapps"
	// EdgeWorkingDatas holds the string denoting the workingdatas edge name in mutations.
	EdgeWorkingDatas = "workingDatas"
	// EdgeAgencys holds the string denoting the agencys edge name in mutations.
	EdgeAgencys = "agencys"
	// EdgeRoleDistribs holds the string denoting the roledistribs edge name in mutations.
	EdgeRoleDistribs = "roleDistribs"
	// EdgeAppMenusUserSorts holds the string denoting the appmenususersorts edge name in mutations.
	EdgeAppMenusUserSorts = "appMenusUserSorts"
	// EdgeAppUserTemplates holds the string denoting the appusertemplates edge name in mutations.
	EdgeAppUserTemplates = "appUserTemplates"
	// Table holds the table name of the asuser in the database.
	Table = "as_user"
	// PersonTable is the table that holds the person relation/edge.
	PersonTable = "as_person"
	// PersonInverseTable is the table name for the AsPerson entity.
	// It exists in this package in order to avoid circular dependency with the "asperson" package.
	PersonInverseTable = "as_person"
	// PersonColumn is the table column denoting the person relation/edge.
	PersonColumn = "user_id"
	// RolesTable is the table that holds the roles relation/edge. The primary key declared below.
	RolesTable = "as_user_role"
	// RolesInverseTable is the table name for the AsRole entity.
	// It exists in this package in order to avoid circular dependency with the "asrole" package.
	RolesInverseTable = "as_role"
	// JobsTable is the table that holds the jobs relation/edge. The primary key declared below.
	JobsTable = "as_user_job"
	// JobsInverseTable is the table name for the AsJob entity.
	// It exists in this package in order to avoid circular dependency with the "asjob" package.
	JobsInverseTable = "as_job"
	// UsedappsTable is the table that holds the usedapps relation/edge.
	UsedappsTable = "as_market_used_app"
	// UsedappsInverseTable is the table name for the AsMarketUsedApp entity.
	// It exists in this package in order to avoid circular dependency with the "asmarketusedapp" package.
	UsedappsInverseTable = "as_market_used_app"
	// UsedappsColumn is the table column denoting the usedapps relation/edge.
	UsedappsColumn = "app_id"
	// WorkingDatasTable is the table that holds the workingDatas relation/edge.
	WorkingDatasTable = "as_working_data"
	// WorkingDatasInverseTable is the table name for the AsWorkingData entity.
	// It exists in this package in order to avoid circular dependency with the "asworkingdata" package.
	WorkingDatasInverseTable = "as_working_data"
	// WorkingDatasColumn is the table column denoting the workingDatas relation/edge.
	WorkingDatasColumn = "user_id"
	// AgencysTable is the table that holds the agencys relation/edge. The primary key declared below.
	AgencysTable = "as_agency_user"
	// AgencysInverseTable is the table name for the AsInnerAgency entity.
	// It exists in this package in order to avoid circular dependency with the "asinneragency" package.
	AgencysInverseTable = "as_inner_agency"
	// RoleDistribsTable is the table that holds the roleDistribs relation/edge.
	RoleDistribsTable = "as_market_role_distribution"
	// RoleDistribsInverseTable is the table name for the AsMarketRoleDistribution entity.
	// It exists in this package in order to avoid circular dependency with the "asmarketroledistribution" package.
	RoleDistribsInverseTable = "as_market_role_distribution"
	// RoleDistribsColumn is the table column denoting the roleDistribs relation/edge.
	RoleDistribsColumn = "user_id"
	// AppMenusUserSortsTable is the table that holds the appMenusUserSorts relation/edge.
	AppMenusUserSortsTable = "as_market_menu_user_sort"
	// AppMenusUserSortsInverseTable is the table name for the AsMarketMenuUserSort entity.
	// It exists in this package in order to avoid circular dependency with the "asmarketmenuusersort" package.
	AppMenusUserSortsInverseTable = "as_market_menu_user_sort"
	// AppMenusUserSortsColumn is the table column denoting the appMenusUserSorts relation/edge.
	AppMenusUserSortsColumn = "user_id"
	// AppUserTemplatesTable is the table that holds the appUserTemplates relation/edge.
	AppUserTemplatesTable = "as_market_app_user_template"
	// AppUserTemplatesInverseTable is the table name for the AsMarketAppUserTemplate entity.
	// It exists in this package in order to avoid circular dependency with the "asmarketappusertemplate" package.
	AppUserTemplatesInverseTable = "as_market_app_user_template"
	// AppUserTemplatesColumn is the table column denoting the appUserTemplates relation/edge.
	AppUserTemplatesColumn = "user_id"
)

// Columns holds all SQL columns for asuser fields.
var Columns = []string{
	FieldID,
	FieldTenantCode,
	FieldPwd,
	FieldPhoneNumber,
	FieldIsAdmin,
	FieldTenantApplyingState,
	FieldIsMaster,
	FieldIsCreated,
	FieldOpenID,
	FieldUserName,
	FieldIsDeleted,
	FieldStatus,
	FieldCreateUser,
	FieldUpdateUser,
	FieldCreateTime,
	FieldUpdateTime,
}

var (
	// RolesPrimaryKey and RolesColumn2 are the table columns denoting the
	// primary key for the roles relation (M2M).
	RolesPrimaryKey = []string{"user_id", "role_id"}
	// JobsPrimaryKey and JobsColumn2 are the table columns denoting the
	// primary key for the jobs relation (M2M).
	JobsPrimaryKey = []string{"user_id", "job_id"}
	// AgencysPrimaryKey and AgencysColumn2 are the table columns denoting the
	// primary key for the agencys relation (M2M).
	AgencysPrimaryKey = []string{"agency_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsAdmin holds the default value on creation for the "is_admin" field.
	DefaultIsAdmin int64
	// DefaultTenantApplyingState holds the default value on creation for the "tenant_applying_state" field.
	DefaultTenantApplyingState int64
	// DefaultIsMaster holds the default value on creation for the "is_master" field.
	DefaultIsMaster int64
	// DefaultIsCreated holds the default value on creation for the "is_created" field.
	DefaultIsCreated int64
	// DefaultIsDeleted holds the default value on creation for the "is_deleted" field.
	DefaultIsDeleted int64
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int64
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() date.DateTime
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() date.DateTime
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() date.DateTime
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() int64
)
