// Code generated by entc, DO NOT EDIT.

package asuser

import (
	"orginone/common/schema/predicate"
	"orginone/common/tools/date"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// TenantCode applies equality check predicate on the "tenant_code" field. It's identical to TenantCodeEQ.
func TenantCode(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantCode), v))
	})
}

// Pwd applies equality check predicate on the "pwd" field. It's identical to PwdEQ.
func Pwd(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPwd), v))
	})
}

// PhoneNumber applies equality check predicate on the "phone_number" field. It's identical to PhoneNumberEQ.
func PhoneNumber(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhoneNumber), v))
	})
}

// IsAdmin applies equality check predicate on the "is_admin" field. It's identical to IsAdminEQ.
func IsAdmin(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsAdmin), v))
	})
}

// TenantApplyingState applies equality check predicate on the "tenant_applying_state" field. It's identical to TenantApplyingStateEQ.
func TenantApplyingState(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantApplyingState), v))
	})
}

// IsMaster applies equality check predicate on the "is_master" field. It's identical to IsMasterEQ.
func IsMaster(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsMaster), v))
	})
}

// IsCreated applies equality check predicate on the "is_created" field. It's identical to IsCreatedEQ.
func IsCreated(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsCreated), v))
	})
}

// OpenID applies equality check predicate on the "open_id" field. It's identical to OpenIDEQ.
func OpenID(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOpenID), v))
	})
}

// UserName applies equality check predicate on the "user_name" field. It's identical to UserNameEQ.
func UserName(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserName), v))
	})
}

// IsDeleted applies equality check predicate on the "is_deleted" field. It's identical to IsDeletedEQ.
func IsDeleted(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDeleted), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// CreateUser applies equality check predicate on the "create_user" field. It's identical to CreateUserEQ.
func CreateUser(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateUser), v))
	})
}

// UpdateUser applies equality check predicate on the "update_user" field. It's identical to UpdateUserEQ.
func UpdateUser(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateUser), v))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v date.DateTime) predicate.AsUser {
	vc := time.Time(v)
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), vc))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v date.DateTime) predicate.AsUser {
	vc := time.Time(v)
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), vc))
	})
}

// TenantCodeEQ applies the EQ predicate on the "tenant_code" field.
func TenantCodeEQ(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantCode), v))
	})
}

// TenantCodeNEQ applies the NEQ predicate on the "tenant_code" field.
func TenantCodeNEQ(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantCode), v))
	})
}

// TenantCodeIn applies the In predicate on the "tenant_code" field.
func TenantCodeIn(vs ...string) predicate.AsUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantCode), v...))
	})
}

// TenantCodeNotIn applies the NotIn predicate on the "tenant_code" field.
func TenantCodeNotIn(vs ...string) predicate.AsUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantCode), v...))
	})
}

// TenantCodeGT applies the GT predicate on the "tenant_code" field.
func TenantCodeGT(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantCode), v))
	})
}

// TenantCodeGTE applies the GTE predicate on the "tenant_code" field.
func TenantCodeGTE(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantCode), v))
	})
}

// TenantCodeLT applies the LT predicate on the "tenant_code" field.
func TenantCodeLT(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantCode), v))
	})
}

// TenantCodeLTE applies the LTE predicate on the "tenant_code" field.
func TenantCodeLTE(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantCode), v))
	})
}

// TenantCodeContains applies the Contains predicate on the "tenant_code" field.
func TenantCodeContains(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTenantCode), v))
	})
}

// TenantCodeHasPrefix applies the HasPrefix predicate on the "tenant_code" field.
func TenantCodeHasPrefix(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTenantCode), v))
	})
}

// TenantCodeHasSuffix applies the HasSuffix predicate on the "tenant_code" field.
func TenantCodeHasSuffix(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTenantCode), v))
	})
}

// TenantCodeIsNil applies the IsNil predicate on the "tenant_code" field.
func TenantCodeIsNil() predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTenantCode)))
	})
}

// TenantCodeNotNil applies the NotNil predicate on the "tenant_code" field.
func TenantCodeNotNil() predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTenantCode)))
	})
}

// TenantCodeEqualFold applies the EqualFold predicate on the "tenant_code" field.
func TenantCodeEqualFold(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTenantCode), v))
	})
}

// TenantCodeContainsFold applies the ContainsFold predicate on the "tenant_code" field.
func TenantCodeContainsFold(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTenantCode), v))
	})
}

// PwdEQ applies the EQ predicate on the "pwd" field.
func PwdEQ(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPwd), v))
	})
}

// PwdNEQ applies the NEQ predicate on the "pwd" field.
func PwdNEQ(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPwd), v))
	})
}

// PwdIn applies the In predicate on the "pwd" field.
func PwdIn(vs ...string) predicate.AsUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPwd), v...))
	})
}

// PwdNotIn applies the NotIn predicate on the "pwd" field.
func PwdNotIn(vs ...string) predicate.AsUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPwd), v...))
	})
}

// PwdGT applies the GT predicate on the "pwd" field.
func PwdGT(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPwd), v))
	})
}

// PwdGTE applies the GTE predicate on the "pwd" field.
func PwdGTE(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPwd), v))
	})
}

// PwdLT applies the LT predicate on the "pwd" field.
func PwdLT(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPwd), v))
	})
}

// PwdLTE applies the LTE predicate on the "pwd" field.
func PwdLTE(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPwd), v))
	})
}

// PwdContains applies the Contains predicate on the "pwd" field.
func PwdContains(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPwd), v))
	})
}

// PwdHasPrefix applies the HasPrefix predicate on the "pwd" field.
func PwdHasPrefix(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPwd), v))
	})
}

// PwdHasSuffix applies the HasSuffix predicate on the "pwd" field.
func PwdHasSuffix(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPwd), v))
	})
}

// PwdEqualFold applies the EqualFold predicate on the "pwd" field.
func PwdEqualFold(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPwd), v))
	})
}

// PwdContainsFold applies the ContainsFold predicate on the "pwd" field.
func PwdContainsFold(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPwd), v))
	})
}

// PhoneNumberEQ applies the EQ predicate on the "phone_number" field.
func PhoneNumberEQ(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberNEQ applies the NEQ predicate on the "phone_number" field.
func PhoneNumberNEQ(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberIn applies the In predicate on the "phone_number" field.
func PhoneNumberIn(vs ...string) predicate.AsUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPhoneNumber), v...))
	})
}

// PhoneNumberNotIn applies the NotIn predicate on the "phone_number" field.
func PhoneNumberNotIn(vs ...string) predicate.AsUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPhoneNumber), v...))
	})
}

// PhoneNumberGT applies the GT predicate on the "phone_number" field.
func PhoneNumberGT(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberGTE applies the GTE predicate on the "phone_number" field.
func PhoneNumberGTE(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberLT applies the LT predicate on the "phone_number" field.
func PhoneNumberLT(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberLTE applies the LTE predicate on the "phone_number" field.
func PhoneNumberLTE(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberContains applies the Contains predicate on the "phone_number" field.
func PhoneNumberContains(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberHasPrefix applies the HasPrefix predicate on the "phone_number" field.
func PhoneNumberHasPrefix(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberHasSuffix applies the HasSuffix predicate on the "phone_number" field.
func PhoneNumberHasSuffix(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberIsNil applies the IsNil predicate on the "phone_number" field.
func PhoneNumberIsNil() predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPhoneNumber)))
	})
}

// PhoneNumberNotNil applies the NotNil predicate on the "phone_number" field.
func PhoneNumberNotNil() predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPhoneNumber)))
	})
}

// PhoneNumberEqualFold applies the EqualFold predicate on the "phone_number" field.
func PhoneNumberEqualFold(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPhoneNumber), v))
	})
}

// PhoneNumberContainsFold applies the ContainsFold predicate on the "phone_number" field.
func PhoneNumberContainsFold(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPhoneNumber), v))
	})
}

// IsAdminEQ applies the EQ predicate on the "is_admin" field.
func IsAdminEQ(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsAdmin), v))
	})
}

// IsAdminNEQ applies the NEQ predicate on the "is_admin" field.
func IsAdminNEQ(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsAdmin), v))
	})
}

// IsAdminIn applies the In predicate on the "is_admin" field.
func IsAdminIn(vs ...int64) predicate.AsUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsAdmin), v...))
	})
}

// IsAdminNotIn applies the NotIn predicate on the "is_admin" field.
func IsAdminNotIn(vs ...int64) predicate.AsUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsAdmin), v...))
	})
}

// IsAdminGT applies the GT predicate on the "is_admin" field.
func IsAdminGT(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsAdmin), v))
	})
}

// IsAdminGTE applies the GTE predicate on the "is_admin" field.
func IsAdminGTE(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsAdmin), v))
	})
}

// IsAdminLT applies the LT predicate on the "is_admin" field.
func IsAdminLT(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsAdmin), v))
	})
}

// IsAdminLTE applies the LTE predicate on the "is_admin" field.
func IsAdminLTE(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsAdmin), v))
	})
}

// TenantApplyingStateEQ applies the EQ predicate on the "tenant_applying_state" field.
func TenantApplyingStateEQ(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantApplyingState), v))
	})
}

// TenantApplyingStateNEQ applies the NEQ predicate on the "tenant_applying_state" field.
func TenantApplyingStateNEQ(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantApplyingState), v))
	})
}

// TenantApplyingStateIn applies the In predicate on the "tenant_applying_state" field.
func TenantApplyingStateIn(vs ...int64) predicate.AsUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTenantApplyingState), v...))
	})
}

// TenantApplyingStateNotIn applies the NotIn predicate on the "tenant_applying_state" field.
func TenantApplyingStateNotIn(vs ...int64) predicate.AsUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTenantApplyingState), v...))
	})
}

// TenantApplyingStateGT applies the GT predicate on the "tenant_applying_state" field.
func TenantApplyingStateGT(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenantApplyingState), v))
	})
}

// TenantApplyingStateGTE applies the GTE predicate on the "tenant_applying_state" field.
func TenantApplyingStateGTE(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenantApplyingState), v))
	})
}

// TenantApplyingStateLT applies the LT predicate on the "tenant_applying_state" field.
func TenantApplyingStateLT(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenantApplyingState), v))
	})
}

// TenantApplyingStateLTE applies the LTE predicate on the "tenant_applying_state" field.
func TenantApplyingStateLTE(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenantApplyingState), v))
	})
}

// IsMasterEQ applies the EQ predicate on the "is_master" field.
func IsMasterEQ(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsMaster), v))
	})
}

// IsMasterNEQ applies the NEQ predicate on the "is_master" field.
func IsMasterNEQ(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsMaster), v))
	})
}

// IsMasterIn applies the In predicate on the "is_master" field.
func IsMasterIn(vs ...int64) predicate.AsUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsMaster), v...))
	})
}

// IsMasterNotIn applies the NotIn predicate on the "is_master" field.
func IsMasterNotIn(vs ...int64) predicate.AsUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsMaster), v...))
	})
}

// IsMasterGT applies the GT predicate on the "is_master" field.
func IsMasterGT(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsMaster), v))
	})
}

// IsMasterGTE applies the GTE predicate on the "is_master" field.
func IsMasterGTE(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsMaster), v))
	})
}

// IsMasterLT applies the LT predicate on the "is_master" field.
func IsMasterLT(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsMaster), v))
	})
}

// IsMasterLTE applies the LTE predicate on the "is_master" field.
func IsMasterLTE(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsMaster), v))
	})
}

// IsMasterIsNil applies the IsNil predicate on the "is_master" field.
func IsMasterIsNil() predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsMaster)))
	})
}

// IsMasterNotNil applies the NotNil predicate on the "is_master" field.
func IsMasterNotNil() predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsMaster)))
	})
}

// IsCreatedEQ applies the EQ predicate on the "is_created" field.
func IsCreatedEQ(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsCreated), v))
	})
}

// IsCreatedNEQ applies the NEQ predicate on the "is_created" field.
func IsCreatedNEQ(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsCreated), v))
	})
}

// IsCreatedIn applies the In predicate on the "is_created" field.
func IsCreatedIn(vs ...int64) predicate.AsUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsCreated), v...))
	})
}

// IsCreatedNotIn applies the NotIn predicate on the "is_created" field.
func IsCreatedNotIn(vs ...int64) predicate.AsUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsCreated), v...))
	})
}

// IsCreatedGT applies the GT predicate on the "is_created" field.
func IsCreatedGT(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsCreated), v))
	})
}

// IsCreatedGTE applies the GTE predicate on the "is_created" field.
func IsCreatedGTE(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsCreated), v))
	})
}

// IsCreatedLT applies the LT predicate on the "is_created" field.
func IsCreatedLT(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsCreated), v))
	})
}

// IsCreatedLTE applies the LTE predicate on the "is_created" field.
func IsCreatedLTE(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsCreated), v))
	})
}

// OpenIDEQ applies the EQ predicate on the "open_id" field.
func OpenIDEQ(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOpenID), v))
	})
}

// OpenIDNEQ applies the NEQ predicate on the "open_id" field.
func OpenIDNEQ(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOpenID), v))
	})
}

// OpenIDIn applies the In predicate on the "open_id" field.
func OpenIDIn(vs ...string) predicate.AsUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOpenID), v...))
	})
}

// OpenIDNotIn applies the NotIn predicate on the "open_id" field.
func OpenIDNotIn(vs ...string) predicate.AsUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOpenID), v...))
	})
}

// OpenIDGT applies the GT predicate on the "open_id" field.
func OpenIDGT(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOpenID), v))
	})
}

// OpenIDGTE applies the GTE predicate on the "open_id" field.
func OpenIDGTE(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOpenID), v))
	})
}

// OpenIDLT applies the LT predicate on the "open_id" field.
func OpenIDLT(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOpenID), v))
	})
}

// OpenIDLTE applies the LTE predicate on the "open_id" field.
func OpenIDLTE(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOpenID), v))
	})
}

// OpenIDContains applies the Contains predicate on the "open_id" field.
func OpenIDContains(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOpenID), v))
	})
}

// OpenIDHasPrefix applies the HasPrefix predicate on the "open_id" field.
func OpenIDHasPrefix(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOpenID), v))
	})
}

// OpenIDHasSuffix applies the HasSuffix predicate on the "open_id" field.
func OpenIDHasSuffix(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOpenID), v))
	})
}

// OpenIDIsNil applies the IsNil predicate on the "open_id" field.
func OpenIDIsNil() predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOpenID)))
	})
}

// OpenIDNotNil applies the NotNil predicate on the "open_id" field.
func OpenIDNotNil() predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOpenID)))
	})
}

// OpenIDEqualFold applies the EqualFold predicate on the "open_id" field.
func OpenIDEqualFold(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOpenID), v))
	})
}

// OpenIDContainsFold applies the ContainsFold predicate on the "open_id" field.
func OpenIDContainsFold(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOpenID), v))
	})
}

// UserNameEQ applies the EQ predicate on the "user_name" field.
func UserNameEQ(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserName), v))
	})
}

// UserNameNEQ applies the NEQ predicate on the "user_name" field.
func UserNameNEQ(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserName), v))
	})
}

// UserNameIn applies the In predicate on the "user_name" field.
func UserNameIn(vs ...string) predicate.AsUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserName), v...))
	})
}

// UserNameNotIn applies the NotIn predicate on the "user_name" field.
func UserNameNotIn(vs ...string) predicate.AsUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserName), v...))
	})
}

// UserNameGT applies the GT predicate on the "user_name" field.
func UserNameGT(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserName), v))
	})
}

// UserNameGTE applies the GTE predicate on the "user_name" field.
func UserNameGTE(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserName), v))
	})
}

// UserNameLT applies the LT predicate on the "user_name" field.
func UserNameLT(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserName), v))
	})
}

// UserNameLTE applies the LTE predicate on the "user_name" field.
func UserNameLTE(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserName), v))
	})
}

// UserNameContains applies the Contains predicate on the "user_name" field.
func UserNameContains(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUserName), v))
	})
}

// UserNameHasPrefix applies the HasPrefix predicate on the "user_name" field.
func UserNameHasPrefix(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUserName), v))
	})
}

// UserNameHasSuffix applies the HasSuffix predicate on the "user_name" field.
func UserNameHasSuffix(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUserName), v))
	})
}

// UserNameIsNil applies the IsNil predicate on the "user_name" field.
func UserNameIsNil() predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserName)))
	})
}

// UserNameNotNil applies the NotNil predicate on the "user_name" field.
func UserNameNotNil() predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserName)))
	})
}

// UserNameEqualFold applies the EqualFold predicate on the "user_name" field.
func UserNameEqualFold(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUserName), v))
	})
}

// UserNameContainsFold applies the ContainsFold predicate on the "user_name" field.
func UserNameContainsFold(v string) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUserName), v))
	})
}

// IsDeletedEQ applies the EQ predicate on the "is_deleted" field.
func IsDeletedEQ(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedNEQ applies the NEQ predicate on the "is_deleted" field.
func IsDeletedNEQ(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedIn applies the In predicate on the "is_deleted" field.
func IsDeletedIn(vs ...int64) predicate.AsUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsDeleted), v...))
	})
}

// IsDeletedNotIn applies the NotIn predicate on the "is_deleted" field.
func IsDeletedNotIn(vs ...int64) predicate.AsUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsDeleted), v...))
	})
}

// IsDeletedGT applies the GT predicate on the "is_deleted" field.
func IsDeletedGT(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedGTE applies the GTE predicate on the "is_deleted" field.
func IsDeletedGTE(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedLT applies the LT predicate on the "is_deleted" field.
func IsDeletedLT(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedLTE applies the LTE predicate on the "is_deleted" field.
func IsDeletedLTE(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsDeleted), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int64) predicate.AsUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int64) predicate.AsUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStatus)))
	})
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStatus)))
	})
}

// CreateUserEQ applies the EQ predicate on the "create_user" field.
func CreateUserEQ(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateUser), v))
	})
}

// CreateUserNEQ applies the NEQ predicate on the "create_user" field.
func CreateUserNEQ(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateUser), v))
	})
}

// CreateUserIn applies the In predicate on the "create_user" field.
func CreateUserIn(vs ...int64) predicate.AsUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateUser), v...))
	})
}

// CreateUserNotIn applies the NotIn predicate on the "create_user" field.
func CreateUserNotIn(vs ...int64) predicate.AsUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateUser), v...))
	})
}

// CreateUserGT applies the GT predicate on the "create_user" field.
func CreateUserGT(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateUser), v))
	})
}

// CreateUserGTE applies the GTE predicate on the "create_user" field.
func CreateUserGTE(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateUser), v))
	})
}

// CreateUserLT applies the LT predicate on the "create_user" field.
func CreateUserLT(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateUser), v))
	})
}

// CreateUserLTE applies the LTE predicate on the "create_user" field.
func CreateUserLTE(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateUser), v))
	})
}

// CreateUserIsNil applies the IsNil predicate on the "create_user" field.
func CreateUserIsNil() predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreateUser)))
	})
}

// CreateUserNotNil applies the NotNil predicate on the "create_user" field.
func CreateUserNotNil() predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreateUser)))
	})
}

// UpdateUserEQ applies the EQ predicate on the "update_user" field.
func UpdateUserEQ(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserNEQ applies the NEQ predicate on the "update_user" field.
func UpdateUserNEQ(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserIn applies the In predicate on the "update_user" field.
func UpdateUserIn(vs ...int64) predicate.AsUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateUser), v...))
	})
}

// UpdateUserNotIn applies the NotIn predicate on the "update_user" field.
func UpdateUserNotIn(vs ...int64) predicate.AsUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AsUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateUser), v...))
	})
}

// UpdateUserGT applies the GT predicate on the "update_user" field.
func UpdateUserGT(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserGTE applies the GTE predicate on the "update_user" field.
func UpdateUserGTE(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserLT applies the LT predicate on the "update_user" field.
func UpdateUserLT(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserLTE applies the LTE predicate on the "update_user" field.
func UpdateUserLTE(v int64) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserIsNil applies the IsNil predicate on the "update_user" field.
func UpdateUserIsNil() predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdateUser)))
	})
}

// UpdateUserNotNil applies the NotNil predicate on the "update_user" field.
func UpdateUserNotNil() predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdateUser)))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v date.DateTime) predicate.AsUser {
	vc := time.Time(v)
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v date.DateTime) predicate.AsUser {
	vc := time.Time(v)
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...date.DateTime) predicate.AsUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...date.DateTime) predicate.AsUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v date.DateTime) predicate.AsUser {
	vc := time.Time(v)
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v date.DateTime) predicate.AsUser {
	vc := time.Time(v)
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v date.DateTime) predicate.AsUser {
	vc := time.Time(v)
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v date.DateTime) predicate.AsUser {
	vc := time.Time(v)
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), vc))
	})
}

// CreateTimeIsNil applies the IsNil predicate on the "create_time" field.
func CreateTimeIsNil() predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreateTime)))
	})
}

// CreateTimeNotNil applies the NotNil predicate on the "create_time" field.
func CreateTimeNotNil() predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreateTime)))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v date.DateTime) predicate.AsUser {
	vc := time.Time(v)
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v date.DateTime) predicate.AsUser {
	vc := time.Time(v)
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...date.DateTime) predicate.AsUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...date.DateTime) predicate.AsUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = time.Time(vs[i])
	}
	return predicate.AsUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v date.DateTime) predicate.AsUser {
	vc := time.Time(v)
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v date.DateTime) predicate.AsUser {
	vc := time.Time(v)
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v date.DateTime) predicate.AsUser {
	vc := time.Time(v)
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v date.DateTime) predicate.AsUser {
	vc := time.Time(v)
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), vc))
	})
}

// UpdateTimeIsNil applies the IsNil predicate on the "update_time" field.
func UpdateTimeIsNil() predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdateTime)))
	})
}

// UpdateTimeNotNil applies the NotNil predicate on the "update_time" field.
func UpdateTimeNotNil() predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdateTime)))
	})
}

// HasPerson applies the HasEdge predicate on the "person" edge.
func HasPerson() predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PersonTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, PersonTable, PersonColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPersonWith applies the HasEdge predicate on the "person" edge with a given conditions (other predicates).
func HasPersonWith(preds ...predicate.AsPerson) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PersonInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, PersonTable, PersonColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoles applies the HasEdge predicate on the "roles" edge.
func HasRoles() predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RolesTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, RolesTable, RolesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRolesWith applies the HasEdge predicate on the "roles" edge with a given conditions (other predicates).
func HasRolesWith(preds ...predicate.AsRole) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RolesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, RolesTable, RolesPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasJobs applies the HasEdge predicate on the "jobs" edge.
func HasJobs() predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(JobsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, JobsTable, JobsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasJobsWith applies the HasEdge predicate on the "jobs" edge with a given conditions (other predicates).
func HasJobsWith(preds ...predicate.AsJob) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(JobsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, JobsTable, JobsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUsedapps applies the HasEdge predicate on the "usedapps" edge.
func HasUsedapps() predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UsedappsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UsedappsTable, UsedappsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsedappsWith applies the HasEdge predicate on the "usedapps" edge with a given conditions (other predicates).
func HasUsedappsWith(preds ...predicate.AsMarketUsedApp) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UsedappsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UsedappsTable, UsedappsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWorkingDatas applies the HasEdge predicate on the "workingDatas" edge.
func HasWorkingDatas() predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WorkingDatasTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WorkingDatasTable, WorkingDatasColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkingDatasWith applies the HasEdge predicate on the "workingDatas" edge with a given conditions (other predicates).
func HasWorkingDatasWith(preds ...predicate.AsWorkingData) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WorkingDatasInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WorkingDatasTable, WorkingDatasColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAgencys applies the HasEdge predicate on the "agencys" edge.
func HasAgencys() predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AgencysTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, AgencysTable, AgencysPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAgencysWith applies the HasEdge predicate on the "agencys" edge with a given conditions (other predicates).
func HasAgencysWith(preds ...predicate.AsInnerAgency) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AgencysInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, AgencysTable, AgencysPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoleDistribs applies the HasEdge predicate on the "roleDistribs" edge.
func HasRoleDistribs() predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RoleDistribsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RoleDistribsTable, RoleDistribsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoleDistribsWith applies the HasEdge predicate on the "roleDistribs" edge with a given conditions (other predicates).
func HasRoleDistribsWith(preds ...predicate.AsMarketRoleDistribution) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RoleDistribsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RoleDistribsTable, RoleDistribsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAppMenusUserSorts applies the HasEdge predicate on the "appMenusUserSorts" edge.
func HasAppMenusUserSorts() predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppMenusUserSortsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AppMenusUserSortsTable, AppMenusUserSortsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppMenusUserSortsWith applies the HasEdge predicate on the "appMenusUserSorts" edge with a given conditions (other predicates).
func HasAppMenusUserSortsWith(preds ...predicate.AsMarketMenuUserSort) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppMenusUserSortsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AppMenusUserSortsTable, AppMenusUserSortsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAppUserTemplates applies the HasEdge predicate on the "appUserTemplates" edge.
func HasAppUserTemplates() predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppUserTemplatesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AppUserTemplatesTable, AppUserTemplatesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppUserTemplatesWith applies the HasEdge predicate on the "appUserTemplates" edge with a given conditions (other predicates).
func HasAppUserTemplatesWith(preds ...predicate.AsMarketAppUserTemplate) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppUserTemplatesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AppUserTemplatesTable, AppUserTemplatesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AsUser) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AsUser) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AsUser) predicate.AsUser {
	return predicate.AsUser(func(s *sql.Selector) {
		p(s.Not())
	})
}
