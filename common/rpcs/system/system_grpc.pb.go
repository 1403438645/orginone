// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: source/rpc/asset-system/system.proto

package system

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SystemClient is the client API for System service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SystemClient interface {
	//系统字典(blade-system)
	FindDicItemsByValue(ctx context.Context, in *FindDicItemReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//字典分页查询
	FindAllDic(ctx context.Context, in *FindAllDicReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//设置主租户
	SetMasterUnit(ctx context.Context, in *SetMasterUnitReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//修改用户名
	UpdateUserName(ctx context.Context, in *UpdateUserName, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//获取用户信息
	FindPersonByUserId(ctx context.Context, in *PersonByUserReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//获取用户或角色信息
	FindUserOrRoleInfo(ctx context.Context, in *RoleUserReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//获取用户信息
	FindUserByUserId(ctx context.Context, in *PrimaryKeyReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//获取机构或人员信息
	FindAgencyOrPerson(ctx context.Context, in *AgencyPersonReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//根据账户查找租户
	FindTenantByAccount(ctx context.Context, in *ByAccountReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//根据账户查找租户分页
	FindTenantInfoByAccount(ctx context.Context, in *AccountTenantReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//根据名称查询账户
	SearchTeantByName(ctx context.Context, in *SearchTeantReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//加入租户
	JoinTeantByCode(ctx context.Context, in *TenantCodeReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//创建租户
	CreateTenant(ctx context.Context, in *CreateTenantReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//获取租户详情
	FindTenantById(ctx context.Context, in *TenantByIdReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//根据组织编号和类型
	FindAllGroupByCodeAndType(ctx context.Context, in *SearchAllGroupReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//查询用户系统菜单树
	FindRoleMenusByUser(ctx context.Context, in *RoleMenusByUserReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//查询用户应用菜单树
	FindMarketAppRoleMenusByUser(ctx context.Context, in *RoleMenusByUserReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//更新单位信息
	UpdateUnitInfo(ctx context.Context, in *CommonRpcReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//查询租户内设机构列表(树)
	FindInnerAgencyTreeByTenantCode(ctx context.Context, in *TenantCodeReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//查询全新的部门编码
	FindAgencyDeptCodeByTenantCode(ctx context.Context, in *TenantCodeReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//查询全新人员编号
	GetNewPersonUserCode(ctx context.Context, in *TenantCodeReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//获取租户下人员信息
	FindTenantPersons(ctx context.Context, in *SearchPersonByTenantCodeReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//获取租户下集团信息
	FindAllGroupByTentantCode(ctx context.Context, in *FindAllGroupByTenantCodeReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//获取行政区域树
	FindAdministrativeTree(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//分页获取行政区域
	FindAdministrativeList(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//获取岗位列表
	FindJobList(ctx context.Context, in *FindJobListReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//获取所有单位列表（包含子集团）根据集团id
	FindUnitPageByGroupId(ctx context.Context, in *FindUnitPageReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//获取所有单位列表（不含子集团）根据集团id
	FindBlowUnitPageByGroupId(ctx context.Context, in *FindUnitPageReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//获取集团信息
	FingGroupInfoById(ctx context.Context, in *PrimaryKeyReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//分页查询租户
	FindScenesListPage(ctx context.Context, in *FindScenesListPageReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//删除租户
	RemoveScenesByIds(ctx context.Context, in *RemoveScenesByIdsReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//分页查询单位
	FindOrgansV2ListPage(ctx context.Context, in *FindOrgansV2ListPageReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//删除单位
	RemoveOrgansByIds(ctx context.Context, in *V2RemoveByIdsReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//分页查询人员
	FindPersonListPage(ctx context.Context, in *FindPersonListPageReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//删除人员
	RemovePersonByIds(ctx context.Context, in *RemovePersonByIdsReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//删除集团
	RemoveAllGroupByIds(ctx context.Context, in *RemoveAllGroupByIdsReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//分页查询集团
	FindAllGroupListAll(ctx context.Context, in *FindAllGroupListAllReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//分页查询角色
	FindRoleListPage(ctx context.Context, in *FindRoleListReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//查询集团层级根据集团id
	FindGroupLayerById(ctx context.Context, in *GroupLayerByIdReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//分页查询租户特性
	FindTenantAttrList(ctx context.Context, in *FindTenantAttrListReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//获取导入状态详情
	FindImportStatusList(ctx context.Context, in *FindImportStatusListReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//新增组织人员
	AddPerson(ctx context.Context, in *AddPersonReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//批量新增组织人员
	AddPersons(ctx context.Context, in *CommonRpcReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//查询租户图标
	FindTenantIconList(ctx context.Context, in *FindTenantIconListReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//分页查询部门
	FindInnerAgencyList(ctx context.Context, in *FindInnerAgencyListReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//获取所有角色列表
	FindAllRolesList(ctx context.Context, in *FindAllRolesListReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//修改部门层级关系及用户所在部门
	UpdateAgencyInnerUser(ctx context.Context, in *UpdateAgencyInnerUserReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//创建集团
	CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//查询集团
	QueryGroup(ctx context.Context, in *QueryGroupReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//解散集团
	DisbandGroupById(ctx context.Context, in *DisbandGroupReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//获取组织树
	GetGroupTree(ctx context.Context, in *GroupTreeReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//获取集团信息
	GetAllgroupInfoById(ctx context.Context, in *PrimaryKeyReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//集团应用分发
	GroupAppDistribute(ctx context.Context, in *GroupAppDistributeReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//申请加入集团租户列表
	ListApplyTenant(ctx context.Context, in *ListApplyTenantReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//分配部门人员
	DistributeDeptPersons(ctx context.Context, in *DistributeDeptPersonsReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//根据名字查询人员
	SearchPersonByName(ctx context.Context, in *SerarchDeptPersonReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//分配名字查询部门
	SearchDeptByName(ctx context.Context, in *SerarchDeptPersonReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//更新人员电话 补充电话
	UpdatePersonPhoneNumber(ctx context.Context, in *UpdatePersonPhoneNumberReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//租户加入申请及审批集团
	TenantsJoinGroup(ctx context.Context, in *TenantsJoinGroupReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//模糊搜索岗位列表
	SearchJobList(ctx context.Context, in *SearchJobListReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//修改岗位并分配人员
	UpdateJobUser(ctx context.Context, in *UpdateJobUserReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//新增岗位并分配人员
	AddJobUser(ctx context.Context, in *AddJobUserReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//删除岗位
	RemoveJob(ctx context.Context, in *RemoveJobReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//批量修改岗位并分配人员
	UpdateJobUsers(ctx context.Context, in *UpdateJobUsersReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//隐藏、显示树形单位
	UpdateGroupIsHide(ctx context.Context, in *UpdateGroupIsHideReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//移除实集团叶子节点租户
	RemoveLeafTenants(ctx context.Context, in *RemoveLeafTenantsReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//取性质里的租户列表分页
	FindPropertiesUnitList(ctx context.Context, in *FindPropertiesUnitListReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//取性质里的租户列表分页
	CreateDistributeProperties(ctx context.Context, in *CreateDistributePropertiesReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//集团创建性质并进行分配
	CreateAndDistributeProperties(ctx context.Context, in *CreateAndDistributePropertiesReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//分配性质给租户
	DistributeProperties(ctx context.Context, in *DistributePropertiesReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//获取所有下属集团
	FindGroupListByRelations(ctx context.Context, in *FindGroupListByRelationsReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//批量调整租户上级
	UpdateFatherTenant(ctx context.Context, in *UpdateFatherTenantReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//人员停用
	BanPersonUser(ctx context.Context, in *BanPersonUserReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//更新用户角色
	UpdateUserRole(ctx context.Context, in *UpdateUserRoleReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//删除用户角色
	DeleteUserRole(ctx context.Context, in *UpdateUserRoleReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//新增内部机构并分配人员
	AddInnerUser(ctx context.Context, in *AddInnerUserReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//新增内部机构并分配人员
	ActiveUser(ctx context.Context, in *ActiveUserReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//移除内部机构人员
	RemoveDeptJobUser(ctx context.Context, in *RemoveDeptUserJobReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//分页查询性质
	FindPropertiesList(ctx context.Context, in *FindPropertiesListReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//分页角色
	FindRoleListByUserId(ctx context.Context, in *FindRoleListByUserIdReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//分页角色Id
	FindRoleIdListByUserId(ctx context.Context, in *FindRoleListByUserIdReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//更新人员信息
	UpdatePersonInfo(ctx context.Context, in *CommonRpcRes, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//更新单位信息
	UpdateOrgansInfo(ctx context.Context, in *CommonRpcRes, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//更新租户信息
	UpdateScenesInfo(ctx context.Context, in *CommonRpcRes, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//更新集团信息
	UpdateGroupInfo(ctx context.Context, in *UpdateGroupInfoReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//插入文件导入记录
	CreateInputRecord(ctx context.Context, in *CommonRpcReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//批量导入租户与集团关系
	UpdateTenantRelations(ctx context.Context, in *UpdateTenantRelationsReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//获取所有单位列表（包含子集团）根据集团id
	FindUnitByIds(ctx context.Context, in *FindUnitByIdsReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//获取菜单树形结构
	TreeMenu(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//新增或修改菜单
	SubmitMenu(ctx context.Context, in *CommonRpcRes, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//删除菜单
	RemoveMenu(ctx context.Context, in *RemoveMenuReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//角色权限
	RoleTreeKeysMenu(ctx context.Context, in *RoleTreeKeysMenuReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//获取租户组角色
	ListRoleByAttr(ctx context.Context, in *ListRoleByAttrReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//新增或修改角色
	UpdateRole(ctx context.Context, in *CommonRpcRes, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//设置角色权限
	AuthorizationRole(ctx context.Context, in *AuthorizationRoleReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//删除角色
	RemoveRoleByIds(ctx context.Context, in *RemoveRoleByIdsReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//租户组角色分配
	TenantAttrRoleAlloc(ctx context.Context, in *TenantAttrRoleAllocReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//新增或编辑分类信息
	TenantAttrSubmit(ctx context.Context, in *CommonRpcRes, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//删除分类信息
	TenantAttrRemove(ctx context.Context, in *TenantAttrRemoveReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//删除部门
	AgencyRemove(ctx context.Context, in *AgencyRemoveReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//主单位导入
	UpdateMsterUnit(ctx context.Context, in *CommonRpcReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//岗位导入
	AddJobs(ctx context.Context, in *CommonRpcReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//部门导入
	AddAgencys(ctx context.Context, in *CommonRpcReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//部门导入
	AddGroupRelations(ctx context.Context, in *CommonRpcReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//删除性质
	RemoveProperties(ctx context.Context, in *RemovePropertiesReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//保存字典
	SubmitDict(ctx context.Context, in *CommonRpcRes, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//通过名字查找租户列表
	FindTenantByNames(ctx context.Context, in *CommonRpcReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//租户导入
	AddTenants(ctx context.Context, in *CommonRpcReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//租户图片批量导入
	ImportTenantIcon(ctx context.Context, in *ImportTenantIconReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//租户图片批量导入
	RemoveTenantIcon(ctx context.Context, in *CommonRpcReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
}

type systemClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemClient(cc grpc.ClientConnInterface) SystemClient {
	return &systemClient{cc}
}

func (c *systemClient) FindDicItemsByValue(ctx context.Context, in *FindDicItemReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/findDicItemsByValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) FindAllDic(ctx context.Context, in *FindAllDicReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/findAllDic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) SetMasterUnit(ctx context.Context, in *SetMasterUnitReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/setMasterUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) UpdateUserName(ctx context.Context, in *UpdateUserName, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/updateUserName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) FindPersonByUserId(ctx context.Context, in *PersonByUserReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/findPersonByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) FindUserOrRoleInfo(ctx context.Context, in *RoleUserReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/findUserOrRoleInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) FindUserByUserId(ctx context.Context, in *PrimaryKeyReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/findUserByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) FindAgencyOrPerson(ctx context.Context, in *AgencyPersonReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/findAgencyOrPerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) FindTenantByAccount(ctx context.Context, in *ByAccountReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/findTenantByAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) FindTenantInfoByAccount(ctx context.Context, in *AccountTenantReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/findTenantInfoByAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) SearchTeantByName(ctx context.Context, in *SearchTeantReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/searchTeantByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) JoinTeantByCode(ctx context.Context, in *TenantCodeReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/joinTeantByCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) CreateTenant(ctx context.Context, in *CreateTenantReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/createTenant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) FindTenantById(ctx context.Context, in *TenantByIdReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/findTenantById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) FindAllGroupByCodeAndType(ctx context.Context, in *SearchAllGroupReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/findAllGroupByCodeAndType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) FindRoleMenusByUser(ctx context.Context, in *RoleMenusByUserReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/findRoleMenusByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) FindMarketAppRoleMenusByUser(ctx context.Context, in *RoleMenusByUserReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/findMarketAppRoleMenusByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) UpdateUnitInfo(ctx context.Context, in *CommonRpcReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/updateUnitInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) FindInnerAgencyTreeByTenantCode(ctx context.Context, in *TenantCodeReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/findInnerAgencyTreeByTenantCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) FindAgencyDeptCodeByTenantCode(ctx context.Context, in *TenantCodeReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/findAgencyDeptCodeByTenantCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) GetNewPersonUserCode(ctx context.Context, in *TenantCodeReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/getNewPersonUserCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) FindTenantPersons(ctx context.Context, in *SearchPersonByTenantCodeReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/findTenantPersons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) FindAllGroupByTentantCode(ctx context.Context, in *FindAllGroupByTenantCodeReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/findAllGroupByTentantCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) FindAdministrativeTree(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/findAdministrativeTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) FindAdministrativeList(ctx context.Context, in *PageRequest, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/findAdministrativeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) FindJobList(ctx context.Context, in *FindJobListReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/findJobList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) FindUnitPageByGroupId(ctx context.Context, in *FindUnitPageReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/findUnitPageByGroupId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) FindBlowUnitPageByGroupId(ctx context.Context, in *FindUnitPageReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/findBlowUnitPageByGroupId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) FingGroupInfoById(ctx context.Context, in *PrimaryKeyReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/fingGroupInfoById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) FindScenesListPage(ctx context.Context, in *FindScenesListPageReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/findScenesListPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) RemoveScenesByIds(ctx context.Context, in *RemoveScenesByIdsReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/removeScenesByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) FindOrgansV2ListPage(ctx context.Context, in *FindOrgansV2ListPageReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/findOrgansV2ListPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) RemoveOrgansByIds(ctx context.Context, in *V2RemoveByIdsReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/removeOrgansByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) FindPersonListPage(ctx context.Context, in *FindPersonListPageReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/findPersonListPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) RemovePersonByIds(ctx context.Context, in *RemovePersonByIdsReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/removePersonByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) RemoveAllGroupByIds(ctx context.Context, in *RemoveAllGroupByIdsReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/removeAllGroupByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) FindAllGroupListAll(ctx context.Context, in *FindAllGroupListAllReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/findAllGroupListAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) FindRoleListPage(ctx context.Context, in *FindRoleListReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/findRoleListPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) FindGroupLayerById(ctx context.Context, in *GroupLayerByIdReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/findGroupLayerById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) FindTenantAttrList(ctx context.Context, in *FindTenantAttrListReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/findTenantAttrList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) FindImportStatusList(ctx context.Context, in *FindImportStatusListReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/findImportStatusList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) AddPerson(ctx context.Context, in *AddPersonReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/addPerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) AddPersons(ctx context.Context, in *CommonRpcReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/addPersons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) FindTenantIconList(ctx context.Context, in *FindTenantIconListReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/findTenantIconList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) FindInnerAgencyList(ctx context.Context, in *FindInnerAgencyListReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/findInnerAgencyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) FindAllRolesList(ctx context.Context, in *FindAllRolesListReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/findAllRolesList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) UpdateAgencyInnerUser(ctx context.Context, in *UpdateAgencyInnerUserReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/updateAgencyInnerUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/createGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) QueryGroup(ctx context.Context, in *QueryGroupReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/queryGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) DisbandGroupById(ctx context.Context, in *DisbandGroupReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/disbandGroupById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) GetGroupTree(ctx context.Context, in *GroupTreeReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/getGroupTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) GetAllgroupInfoById(ctx context.Context, in *PrimaryKeyReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/getAllgroupInfoById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) GroupAppDistribute(ctx context.Context, in *GroupAppDistributeReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/groupAppDistribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) ListApplyTenant(ctx context.Context, in *ListApplyTenantReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/listApplyTenant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) DistributeDeptPersons(ctx context.Context, in *DistributeDeptPersonsReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/distributeDeptPersons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) SearchPersonByName(ctx context.Context, in *SerarchDeptPersonReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/searchPersonByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) SearchDeptByName(ctx context.Context, in *SerarchDeptPersonReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/searchDeptByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) UpdatePersonPhoneNumber(ctx context.Context, in *UpdatePersonPhoneNumberReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/updatePersonPhoneNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) TenantsJoinGroup(ctx context.Context, in *TenantsJoinGroupReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/tenantsJoinGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) SearchJobList(ctx context.Context, in *SearchJobListReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/searchJobList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) UpdateJobUser(ctx context.Context, in *UpdateJobUserReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/updateJobUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) AddJobUser(ctx context.Context, in *AddJobUserReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/addJobUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) RemoveJob(ctx context.Context, in *RemoveJobReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/RemoveJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) UpdateJobUsers(ctx context.Context, in *UpdateJobUsersReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/updateJobUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) UpdateGroupIsHide(ctx context.Context, in *UpdateGroupIsHideReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/updateGroupIsHide", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) RemoveLeafTenants(ctx context.Context, in *RemoveLeafTenantsReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/removeLeafTenants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) FindPropertiesUnitList(ctx context.Context, in *FindPropertiesUnitListReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/findPropertiesUnitList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) CreateDistributeProperties(ctx context.Context, in *CreateDistributePropertiesReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/createDistributeProperties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) CreateAndDistributeProperties(ctx context.Context, in *CreateAndDistributePropertiesReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/createAndDistributeProperties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) DistributeProperties(ctx context.Context, in *DistributePropertiesReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/distributeProperties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) FindGroupListByRelations(ctx context.Context, in *FindGroupListByRelationsReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/findGroupListByRelations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) UpdateFatherTenant(ctx context.Context, in *UpdateFatherTenantReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/updateFatherTenant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) BanPersonUser(ctx context.Context, in *BanPersonUserReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/banPersonUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) UpdateUserRole(ctx context.Context, in *UpdateUserRoleReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/updateUserRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) DeleteUserRole(ctx context.Context, in *UpdateUserRoleReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/deleteUserRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) AddInnerUser(ctx context.Context, in *AddInnerUserReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/addInnerUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) ActiveUser(ctx context.Context, in *ActiveUserReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/activeUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) RemoveDeptJobUser(ctx context.Context, in *RemoveDeptUserJobReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/removeDeptJobUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) FindPropertiesList(ctx context.Context, in *FindPropertiesListReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/findPropertiesList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) FindRoleListByUserId(ctx context.Context, in *FindRoleListByUserIdReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/findRoleListByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) FindRoleIdListByUserId(ctx context.Context, in *FindRoleListByUserIdReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/findRoleIdListByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) UpdatePersonInfo(ctx context.Context, in *CommonRpcRes, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/updatePersonInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) UpdateOrgansInfo(ctx context.Context, in *CommonRpcRes, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/updateOrgansInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) UpdateScenesInfo(ctx context.Context, in *CommonRpcRes, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/updateScenesInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) UpdateGroupInfo(ctx context.Context, in *UpdateGroupInfoReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/updateGroupInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) CreateInputRecord(ctx context.Context, in *CommonRpcReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/createInputRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) UpdateTenantRelations(ctx context.Context, in *UpdateTenantRelationsReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/updateTenantRelations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) FindUnitByIds(ctx context.Context, in *FindUnitByIdsReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/findUnitByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) TreeMenu(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/treeMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) SubmitMenu(ctx context.Context, in *CommonRpcRes, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/submitMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) RemoveMenu(ctx context.Context, in *RemoveMenuReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/removeMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) RoleTreeKeysMenu(ctx context.Context, in *RoleTreeKeysMenuReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/roleTreeKeysMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) ListRoleByAttr(ctx context.Context, in *ListRoleByAttrReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/listRoleByAttr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) UpdateRole(ctx context.Context, in *CommonRpcRes, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/updateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) AuthorizationRole(ctx context.Context, in *AuthorizationRoleReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/authorizationRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) RemoveRoleByIds(ctx context.Context, in *RemoveRoleByIdsReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/removeRoleByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) TenantAttrRoleAlloc(ctx context.Context, in *TenantAttrRoleAllocReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/tenantAttrRoleAlloc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) TenantAttrSubmit(ctx context.Context, in *CommonRpcRes, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/tenantAttrSubmit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) TenantAttrRemove(ctx context.Context, in *TenantAttrRemoveReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/tenantAttrRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) AgencyRemove(ctx context.Context, in *AgencyRemoveReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/agencyRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) UpdateMsterUnit(ctx context.Context, in *CommonRpcReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/updateMsterUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) AddJobs(ctx context.Context, in *CommonRpcReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/addJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) AddAgencys(ctx context.Context, in *CommonRpcReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/addAgencys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) AddGroupRelations(ctx context.Context, in *CommonRpcReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/addGroupRelations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) RemoveProperties(ctx context.Context, in *RemovePropertiesReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/removeProperties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) SubmitDict(ctx context.Context, in *CommonRpcRes, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/submitDict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) FindTenantByNames(ctx context.Context, in *CommonRpcReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/findTenantByNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) AddTenants(ctx context.Context, in *CommonRpcReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/addTenants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) ImportTenantIcon(ctx context.Context, in *ImportTenantIconReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/importTenantIcon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) RemoveTenantIcon(ctx context.Context, in *CommonRpcReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/system.system/removeTenantIcon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemServer is the server API for System service.
// All implementations must embed UnimplementedSystemServer
// for forward compatibility
type SystemServer interface {
	//系统字典(blade-system)
	FindDicItemsByValue(context.Context, *FindDicItemReq) (*CommonRpcRes, error)
	//字典分页查询
	FindAllDic(context.Context, *FindAllDicReq) (*CommonRpcRes, error)
	//设置主租户
	SetMasterUnit(context.Context, *SetMasterUnitReq) (*CommonRpcRes, error)
	//修改用户名
	UpdateUserName(context.Context, *UpdateUserName) (*CommonRpcRes, error)
	//获取用户信息
	FindPersonByUserId(context.Context, *PersonByUserReq) (*CommonRpcRes, error)
	//获取用户或角色信息
	FindUserOrRoleInfo(context.Context, *RoleUserReq) (*CommonRpcRes, error)
	//获取用户信息
	FindUserByUserId(context.Context, *PrimaryKeyReq) (*CommonRpcRes, error)
	//获取机构或人员信息
	FindAgencyOrPerson(context.Context, *AgencyPersonReq) (*CommonRpcRes, error)
	//根据账户查找租户
	FindTenantByAccount(context.Context, *ByAccountReq) (*CommonRpcRes, error)
	//根据账户查找租户分页
	FindTenantInfoByAccount(context.Context, *AccountTenantReq) (*CommonRpcRes, error)
	//根据名称查询账户
	SearchTeantByName(context.Context, *SearchTeantReq) (*CommonRpcRes, error)
	//加入租户
	JoinTeantByCode(context.Context, *TenantCodeReq) (*CommonRpcRes, error)
	//创建租户
	CreateTenant(context.Context, *CreateTenantReq) (*CommonRpcRes, error)
	//获取租户详情
	FindTenantById(context.Context, *TenantByIdReq) (*CommonRpcRes, error)
	//根据组织编号和类型
	FindAllGroupByCodeAndType(context.Context, *SearchAllGroupReq) (*CommonRpcRes, error)
	//查询用户系统菜单树
	FindRoleMenusByUser(context.Context, *RoleMenusByUserReq) (*CommonRpcRes, error)
	//查询用户应用菜单树
	FindMarketAppRoleMenusByUser(context.Context, *RoleMenusByUserReq) (*CommonRpcRes, error)
	//更新单位信息
	UpdateUnitInfo(context.Context, *CommonRpcReq) (*CommonRpcRes, error)
	//查询租户内设机构列表(树)
	FindInnerAgencyTreeByTenantCode(context.Context, *TenantCodeReq) (*CommonRpcRes, error)
	//查询全新的部门编码
	FindAgencyDeptCodeByTenantCode(context.Context, *TenantCodeReq) (*CommonRpcRes, error)
	//查询全新人员编号
	GetNewPersonUserCode(context.Context, *TenantCodeReq) (*CommonRpcRes, error)
	//获取租户下人员信息
	FindTenantPersons(context.Context, *SearchPersonByTenantCodeReq) (*CommonRpcRes, error)
	//获取租户下集团信息
	FindAllGroupByTentantCode(context.Context, *FindAllGroupByTenantCodeReq) (*CommonRpcRes, error)
	//获取行政区域树
	FindAdministrativeTree(context.Context, *Nil) (*CommonRpcRes, error)
	//分页获取行政区域
	FindAdministrativeList(context.Context, *PageRequest) (*CommonRpcRes, error)
	//获取岗位列表
	FindJobList(context.Context, *FindJobListReq) (*CommonRpcRes, error)
	//获取所有单位列表（包含子集团）根据集团id
	FindUnitPageByGroupId(context.Context, *FindUnitPageReq) (*CommonRpcRes, error)
	//获取所有单位列表（不含子集团）根据集团id
	FindBlowUnitPageByGroupId(context.Context, *FindUnitPageReq) (*CommonRpcRes, error)
	//获取集团信息
	FingGroupInfoById(context.Context, *PrimaryKeyReq) (*CommonRpcRes, error)
	//分页查询租户
	FindScenesListPage(context.Context, *FindScenesListPageReq) (*CommonRpcRes, error)
	//删除租户
	RemoveScenesByIds(context.Context, *RemoveScenesByIdsReq) (*CommonRpcRes, error)
	//分页查询单位
	FindOrgansV2ListPage(context.Context, *FindOrgansV2ListPageReq) (*CommonRpcRes, error)
	//删除单位
	RemoveOrgansByIds(context.Context, *V2RemoveByIdsReq) (*CommonRpcRes, error)
	//分页查询人员
	FindPersonListPage(context.Context, *FindPersonListPageReq) (*CommonRpcRes, error)
	//删除人员
	RemovePersonByIds(context.Context, *RemovePersonByIdsReq) (*CommonRpcRes, error)
	//删除集团
	RemoveAllGroupByIds(context.Context, *RemoveAllGroupByIdsReq) (*CommonRpcRes, error)
	//分页查询集团
	FindAllGroupListAll(context.Context, *FindAllGroupListAllReq) (*CommonRpcRes, error)
	//分页查询角色
	FindRoleListPage(context.Context, *FindRoleListReq) (*CommonRpcRes, error)
	//查询集团层级根据集团id
	FindGroupLayerById(context.Context, *GroupLayerByIdReq) (*CommonRpcRes, error)
	//分页查询租户特性
	FindTenantAttrList(context.Context, *FindTenantAttrListReq) (*CommonRpcRes, error)
	//获取导入状态详情
	FindImportStatusList(context.Context, *FindImportStatusListReq) (*CommonRpcRes, error)
	//新增组织人员
	AddPerson(context.Context, *AddPersonReq) (*CommonRpcRes, error)
	//批量新增组织人员
	AddPersons(context.Context, *CommonRpcReq) (*CommonRpcRes, error)
	//查询租户图标
	FindTenantIconList(context.Context, *FindTenantIconListReq) (*CommonRpcRes, error)
	//分页查询部门
	FindInnerAgencyList(context.Context, *FindInnerAgencyListReq) (*CommonRpcRes, error)
	//获取所有角色列表
	FindAllRolesList(context.Context, *FindAllRolesListReq) (*CommonRpcRes, error)
	//修改部门层级关系及用户所在部门
	UpdateAgencyInnerUser(context.Context, *UpdateAgencyInnerUserReq) (*CommonRpcRes, error)
	//创建集团
	CreateGroup(context.Context, *CreateGroupReq) (*CommonRpcRes, error)
	//查询集团
	QueryGroup(context.Context, *QueryGroupReq) (*CommonRpcRes, error)
	//解散集团
	DisbandGroupById(context.Context, *DisbandGroupReq) (*CommonRpcRes, error)
	//获取组织树
	GetGroupTree(context.Context, *GroupTreeReq) (*CommonRpcRes, error)
	//获取集团信息
	GetAllgroupInfoById(context.Context, *PrimaryKeyReq) (*CommonRpcRes, error)
	//集团应用分发
	GroupAppDistribute(context.Context, *GroupAppDistributeReq) (*CommonRpcRes, error)
	//申请加入集团租户列表
	ListApplyTenant(context.Context, *ListApplyTenantReq) (*CommonRpcRes, error)
	//分配部门人员
	DistributeDeptPersons(context.Context, *DistributeDeptPersonsReq) (*CommonRpcRes, error)
	//根据名字查询人员
	SearchPersonByName(context.Context, *SerarchDeptPersonReq) (*CommonRpcRes, error)
	//分配名字查询部门
	SearchDeptByName(context.Context, *SerarchDeptPersonReq) (*CommonRpcRes, error)
	//更新人员电话 补充电话
	UpdatePersonPhoneNumber(context.Context, *UpdatePersonPhoneNumberReq) (*CommonRpcRes, error)
	//租户加入申请及审批集团
	TenantsJoinGroup(context.Context, *TenantsJoinGroupReq) (*CommonRpcRes, error)
	//模糊搜索岗位列表
	SearchJobList(context.Context, *SearchJobListReq) (*CommonRpcRes, error)
	//修改岗位并分配人员
	UpdateJobUser(context.Context, *UpdateJobUserReq) (*CommonRpcRes, error)
	//新增岗位并分配人员
	AddJobUser(context.Context, *AddJobUserReq) (*CommonRpcRes, error)
	//删除岗位
	RemoveJob(context.Context, *RemoveJobReq) (*CommonRpcRes, error)
	//批量修改岗位并分配人员
	UpdateJobUsers(context.Context, *UpdateJobUsersReq) (*CommonRpcRes, error)
	//隐藏、显示树形单位
	UpdateGroupIsHide(context.Context, *UpdateGroupIsHideReq) (*CommonRpcRes, error)
	//移除实集团叶子节点租户
	RemoveLeafTenants(context.Context, *RemoveLeafTenantsReq) (*CommonRpcRes, error)
	//取性质里的租户列表分页
	FindPropertiesUnitList(context.Context, *FindPropertiesUnitListReq) (*CommonRpcRes, error)
	//取性质里的租户列表分页
	CreateDistributeProperties(context.Context, *CreateDistributePropertiesReq) (*CommonRpcRes, error)
	//集团创建性质并进行分配
	CreateAndDistributeProperties(context.Context, *CreateAndDistributePropertiesReq) (*CommonRpcRes, error)
	//分配性质给租户
	DistributeProperties(context.Context, *DistributePropertiesReq) (*CommonRpcRes, error)
	//获取所有下属集团
	FindGroupListByRelations(context.Context, *FindGroupListByRelationsReq) (*CommonRpcRes, error)
	//批量调整租户上级
	UpdateFatherTenant(context.Context, *UpdateFatherTenantReq) (*CommonRpcRes, error)
	//人员停用
	BanPersonUser(context.Context, *BanPersonUserReq) (*CommonRpcRes, error)
	//更新用户角色
	UpdateUserRole(context.Context, *UpdateUserRoleReq) (*CommonRpcRes, error)
	//删除用户角色
	DeleteUserRole(context.Context, *UpdateUserRoleReq) (*CommonRpcRes, error)
	//新增内部机构并分配人员
	AddInnerUser(context.Context, *AddInnerUserReq) (*CommonRpcRes, error)
	//新增内部机构并分配人员
	ActiveUser(context.Context, *ActiveUserReq) (*CommonRpcRes, error)
	//移除内部机构人员
	RemoveDeptJobUser(context.Context, *RemoveDeptUserJobReq) (*CommonRpcRes, error)
	//分页查询性质
	FindPropertiesList(context.Context, *FindPropertiesListReq) (*CommonRpcRes, error)
	//分页角色
	FindRoleListByUserId(context.Context, *FindRoleListByUserIdReq) (*CommonRpcRes, error)
	//分页角色Id
	FindRoleIdListByUserId(context.Context, *FindRoleListByUserIdReq) (*CommonRpcRes, error)
	//更新人员信息
	UpdatePersonInfo(context.Context, *CommonRpcRes) (*CommonRpcRes, error)
	//更新单位信息
	UpdateOrgansInfo(context.Context, *CommonRpcRes) (*CommonRpcRes, error)
	//更新租户信息
	UpdateScenesInfo(context.Context, *CommonRpcRes) (*CommonRpcRes, error)
	//更新集团信息
	UpdateGroupInfo(context.Context, *UpdateGroupInfoReq) (*CommonRpcRes, error)
	//插入文件导入记录
	CreateInputRecord(context.Context, *CommonRpcReq) (*CommonRpcRes, error)
	//批量导入租户与集团关系
	UpdateTenantRelations(context.Context, *UpdateTenantRelationsReq) (*CommonRpcRes, error)
	//获取所有单位列表（包含子集团）根据集团id
	FindUnitByIds(context.Context, *FindUnitByIdsReq) (*CommonRpcRes, error)
	//获取菜单树形结构
	TreeMenu(context.Context, *Nil) (*CommonRpcRes, error)
	//新增或修改菜单
	SubmitMenu(context.Context, *CommonRpcRes) (*CommonRpcRes, error)
	//删除菜单
	RemoveMenu(context.Context, *RemoveMenuReq) (*CommonRpcRes, error)
	//角色权限
	RoleTreeKeysMenu(context.Context, *RoleTreeKeysMenuReq) (*CommonRpcRes, error)
	//获取租户组角色
	ListRoleByAttr(context.Context, *ListRoleByAttrReq) (*CommonRpcRes, error)
	//新增或修改角色
	UpdateRole(context.Context, *CommonRpcRes) (*CommonRpcRes, error)
	//设置角色权限
	AuthorizationRole(context.Context, *AuthorizationRoleReq) (*CommonRpcRes, error)
	//删除角色
	RemoveRoleByIds(context.Context, *RemoveRoleByIdsReq) (*CommonRpcRes, error)
	//租户组角色分配
	TenantAttrRoleAlloc(context.Context, *TenantAttrRoleAllocReq) (*CommonRpcRes, error)
	//新增或编辑分类信息
	TenantAttrSubmit(context.Context, *CommonRpcRes) (*CommonRpcRes, error)
	//删除分类信息
	TenantAttrRemove(context.Context, *TenantAttrRemoveReq) (*CommonRpcRes, error)
	//删除部门
	AgencyRemove(context.Context, *AgencyRemoveReq) (*CommonRpcRes, error)
	//主单位导入
	UpdateMsterUnit(context.Context, *CommonRpcReq) (*CommonRpcRes, error)
	//岗位导入
	AddJobs(context.Context, *CommonRpcReq) (*CommonRpcRes, error)
	//部门导入
	AddAgencys(context.Context, *CommonRpcReq) (*CommonRpcRes, error)
	//部门导入
	AddGroupRelations(context.Context, *CommonRpcReq) (*CommonRpcRes, error)
	//删除性质
	RemoveProperties(context.Context, *RemovePropertiesReq) (*CommonRpcRes, error)
	//保存字典
	SubmitDict(context.Context, *CommonRpcRes) (*CommonRpcRes, error)
	//通过名字查找租户列表
	FindTenantByNames(context.Context, *CommonRpcReq) (*CommonRpcRes, error)
	//租户导入
	AddTenants(context.Context, *CommonRpcReq) (*CommonRpcRes, error)
	//租户图片批量导入
	ImportTenantIcon(context.Context, *ImportTenantIconReq) (*CommonRpcRes, error)
	//租户图片批量导入
	RemoveTenantIcon(context.Context, *CommonRpcReq) (*CommonRpcRes, error)
	mustEmbedUnimplementedSystemServer()
}

// UnimplementedSystemServer must be embedded to have forward compatible implementations.
type UnimplementedSystemServer struct {
}

func (UnimplementedSystemServer) FindDicItemsByValue(context.Context, *FindDicItemReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDicItemsByValue not implemented")
}
func (UnimplementedSystemServer) FindAllDic(context.Context, *FindAllDicReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllDic not implemented")
}
func (UnimplementedSystemServer) SetMasterUnit(context.Context, *SetMasterUnitReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMasterUnit not implemented")
}
func (UnimplementedSystemServer) UpdateUserName(context.Context, *UpdateUserName) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserName not implemented")
}
func (UnimplementedSystemServer) FindPersonByUserId(context.Context, *PersonByUserReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPersonByUserId not implemented")
}
func (UnimplementedSystemServer) FindUserOrRoleInfo(context.Context, *RoleUserReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserOrRoleInfo not implemented")
}
func (UnimplementedSystemServer) FindUserByUserId(context.Context, *PrimaryKeyReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserByUserId not implemented")
}
func (UnimplementedSystemServer) FindAgencyOrPerson(context.Context, *AgencyPersonReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAgencyOrPerson not implemented")
}
func (UnimplementedSystemServer) FindTenantByAccount(context.Context, *ByAccountReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTenantByAccount not implemented")
}
func (UnimplementedSystemServer) FindTenantInfoByAccount(context.Context, *AccountTenantReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTenantInfoByAccount not implemented")
}
func (UnimplementedSystemServer) SearchTeantByName(context.Context, *SearchTeantReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTeantByName not implemented")
}
func (UnimplementedSystemServer) JoinTeantByCode(context.Context, *TenantCodeReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinTeantByCode not implemented")
}
func (UnimplementedSystemServer) CreateTenant(context.Context, *CreateTenantReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTenant not implemented")
}
func (UnimplementedSystemServer) FindTenantById(context.Context, *TenantByIdReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTenantById not implemented")
}
func (UnimplementedSystemServer) FindAllGroupByCodeAndType(context.Context, *SearchAllGroupReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllGroupByCodeAndType not implemented")
}
func (UnimplementedSystemServer) FindRoleMenusByUser(context.Context, *RoleMenusByUserReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRoleMenusByUser not implemented")
}
func (UnimplementedSystemServer) FindMarketAppRoleMenusByUser(context.Context, *RoleMenusByUserReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMarketAppRoleMenusByUser not implemented")
}
func (UnimplementedSystemServer) UpdateUnitInfo(context.Context, *CommonRpcReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUnitInfo not implemented")
}
func (UnimplementedSystemServer) FindInnerAgencyTreeByTenantCode(context.Context, *TenantCodeReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindInnerAgencyTreeByTenantCode not implemented")
}
func (UnimplementedSystemServer) FindAgencyDeptCodeByTenantCode(context.Context, *TenantCodeReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAgencyDeptCodeByTenantCode not implemented")
}
func (UnimplementedSystemServer) GetNewPersonUserCode(context.Context, *TenantCodeReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewPersonUserCode not implemented")
}
func (UnimplementedSystemServer) FindTenantPersons(context.Context, *SearchPersonByTenantCodeReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTenantPersons not implemented")
}
func (UnimplementedSystemServer) FindAllGroupByTentantCode(context.Context, *FindAllGroupByTenantCodeReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllGroupByTentantCode not implemented")
}
func (UnimplementedSystemServer) FindAdministrativeTree(context.Context, *Nil) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAdministrativeTree not implemented")
}
func (UnimplementedSystemServer) FindAdministrativeList(context.Context, *PageRequest) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAdministrativeList not implemented")
}
func (UnimplementedSystemServer) FindJobList(context.Context, *FindJobListReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindJobList not implemented")
}
func (UnimplementedSystemServer) FindUnitPageByGroupId(context.Context, *FindUnitPageReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUnitPageByGroupId not implemented")
}
func (UnimplementedSystemServer) FindBlowUnitPageByGroupId(context.Context, *FindUnitPageReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindBlowUnitPageByGroupId not implemented")
}
func (UnimplementedSystemServer) FingGroupInfoById(context.Context, *PrimaryKeyReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FingGroupInfoById not implemented")
}
func (UnimplementedSystemServer) FindScenesListPage(context.Context, *FindScenesListPageReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindScenesListPage not implemented")
}
func (UnimplementedSystemServer) RemoveScenesByIds(context.Context, *RemoveScenesByIdsReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveScenesByIds not implemented")
}
func (UnimplementedSystemServer) FindOrgansV2ListPage(context.Context, *FindOrgansV2ListPageReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOrgansV2ListPage not implemented")
}
func (UnimplementedSystemServer) RemoveOrgansByIds(context.Context, *V2RemoveByIdsReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOrgansByIds not implemented")
}
func (UnimplementedSystemServer) FindPersonListPage(context.Context, *FindPersonListPageReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPersonListPage not implemented")
}
func (UnimplementedSystemServer) RemovePersonByIds(context.Context, *RemovePersonByIdsReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePersonByIds not implemented")
}
func (UnimplementedSystemServer) RemoveAllGroupByIds(context.Context, *RemoveAllGroupByIdsReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAllGroupByIds not implemented")
}
func (UnimplementedSystemServer) FindAllGroupListAll(context.Context, *FindAllGroupListAllReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllGroupListAll not implemented")
}
func (UnimplementedSystemServer) FindRoleListPage(context.Context, *FindRoleListReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRoleListPage not implemented")
}
func (UnimplementedSystemServer) FindGroupLayerById(context.Context, *GroupLayerByIdReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindGroupLayerById not implemented")
}
func (UnimplementedSystemServer) FindTenantAttrList(context.Context, *FindTenantAttrListReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTenantAttrList not implemented")
}
func (UnimplementedSystemServer) FindImportStatusList(context.Context, *FindImportStatusListReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindImportStatusList not implemented")
}
func (UnimplementedSystemServer) AddPerson(context.Context, *AddPersonReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPerson not implemented")
}
func (UnimplementedSystemServer) AddPersons(context.Context, *CommonRpcReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPersons not implemented")
}
func (UnimplementedSystemServer) FindTenantIconList(context.Context, *FindTenantIconListReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTenantIconList not implemented")
}
func (UnimplementedSystemServer) FindInnerAgencyList(context.Context, *FindInnerAgencyListReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindInnerAgencyList not implemented")
}
func (UnimplementedSystemServer) FindAllRolesList(context.Context, *FindAllRolesListReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllRolesList not implemented")
}
func (UnimplementedSystemServer) UpdateAgencyInnerUser(context.Context, *UpdateAgencyInnerUserReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgencyInnerUser not implemented")
}
func (UnimplementedSystemServer) CreateGroup(context.Context, *CreateGroupReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedSystemServer) QueryGroup(context.Context, *QueryGroupReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGroup not implemented")
}
func (UnimplementedSystemServer) DisbandGroupById(context.Context, *DisbandGroupReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisbandGroupById not implemented")
}
func (UnimplementedSystemServer) GetGroupTree(context.Context, *GroupTreeReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupTree not implemented")
}
func (UnimplementedSystemServer) GetAllgroupInfoById(context.Context, *PrimaryKeyReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllgroupInfoById not implemented")
}
func (UnimplementedSystemServer) GroupAppDistribute(context.Context, *GroupAppDistributeReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupAppDistribute not implemented")
}
func (UnimplementedSystemServer) ListApplyTenant(context.Context, *ListApplyTenantReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApplyTenant not implemented")
}
func (UnimplementedSystemServer) DistributeDeptPersons(context.Context, *DistributeDeptPersonsReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DistributeDeptPersons not implemented")
}
func (UnimplementedSystemServer) SearchPersonByName(context.Context, *SerarchDeptPersonReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPersonByName not implemented")
}
func (UnimplementedSystemServer) SearchDeptByName(context.Context, *SerarchDeptPersonReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchDeptByName not implemented")
}
func (UnimplementedSystemServer) UpdatePersonPhoneNumber(context.Context, *UpdatePersonPhoneNumberReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePersonPhoneNumber not implemented")
}
func (UnimplementedSystemServer) TenantsJoinGroup(context.Context, *TenantsJoinGroupReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantsJoinGroup not implemented")
}
func (UnimplementedSystemServer) SearchJobList(context.Context, *SearchJobListReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchJobList not implemented")
}
func (UnimplementedSystemServer) UpdateJobUser(context.Context, *UpdateJobUserReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJobUser not implemented")
}
func (UnimplementedSystemServer) AddJobUser(context.Context, *AddJobUserReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddJobUser not implemented")
}
func (UnimplementedSystemServer) RemoveJob(context.Context, *RemoveJobReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveJob not implemented")
}
func (UnimplementedSystemServer) UpdateJobUsers(context.Context, *UpdateJobUsersReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJobUsers not implemented")
}
func (UnimplementedSystemServer) UpdateGroupIsHide(context.Context, *UpdateGroupIsHideReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupIsHide not implemented")
}
func (UnimplementedSystemServer) RemoveLeafTenants(context.Context, *RemoveLeafTenantsReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLeafTenants not implemented")
}
func (UnimplementedSystemServer) FindPropertiesUnitList(context.Context, *FindPropertiesUnitListReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPropertiesUnitList not implemented")
}
func (UnimplementedSystemServer) CreateDistributeProperties(context.Context, *CreateDistributePropertiesReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDistributeProperties not implemented")
}
func (UnimplementedSystemServer) CreateAndDistributeProperties(context.Context, *CreateAndDistributePropertiesReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAndDistributeProperties not implemented")
}
func (UnimplementedSystemServer) DistributeProperties(context.Context, *DistributePropertiesReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DistributeProperties not implemented")
}
func (UnimplementedSystemServer) FindGroupListByRelations(context.Context, *FindGroupListByRelationsReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindGroupListByRelations not implemented")
}
func (UnimplementedSystemServer) UpdateFatherTenant(context.Context, *UpdateFatherTenantReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFatherTenant not implemented")
}
func (UnimplementedSystemServer) BanPersonUser(context.Context, *BanPersonUserReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BanPersonUser not implemented")
}
func (UnimplementedSystemServer) UpdateUserRole(context.Context, *UpdateUserRoleReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserRole not implemented")
}
func (UnimplementedSystemServer) DeleteUserRole(context.Context, *UpdateUserRoleReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserRole not implemented")
}
func (UnimplementedSystemServer) AddInnerUser(context.Context, *AddInnerUserReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInnerUser not implemented")
}
func (UnimplementedSystemServer) ActiveUser(context.Context, *ActiveUserReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActiveUser not implemented")
}
func (UnimplementedSystemServer) RemoveDeptJobUser(context.Context, *RemoveDeptUserJobReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDeptJobUser not implemented")
}
func (UnimplementedSystemServer) FindPropertiesList(context.Context, *FindPropertiesListReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPropertiesList not implemented")
}
func (UnimplementedSystemServer) FindRoleListByUserId(context.Context, *FindRoleListByUserIdReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRoleListByUserId not implemented")
}
func (UnimplementedSystemServer) FindRoleIdListByUserId(context.Context, *FindRoleListByUserIdReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRoleIdListByUserId not implemented")
}
func (UnimplementedSystemServer) UpdatePersonInfo(context.Context, *CommonRpcRes) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePersonInfo not implemented")
}
func (UnimplementedSystemServer) UpdateOrgansInfo(context.Context, *CommonRpcRes) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrgansInfo not implemented")
}
func (UnimplementedSystemServer) UpdateScenesInfo(context.Context, *CommonRpcRes) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScenesInfo not implemented")
}
func (UnimplementedSystemServer) UpdateGroupInfo(context.Context, *UpdateGroupInfoReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupInfo not implemented")
}
func (UnimplementedSystemServer) CreateInputRecord(context.Context, *CommonRpcReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInputRecord not implemented")
}
func (UnimplementedSystemServer) UpdateTenantRelations(context.Context, *UpdateTenantRelationsReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTenantRelations not implemented")
}
func (UnimplementedSystemServer) FindUnitByIds(context.Context, *FindUnitByIdsReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUnitByIds not implemented")
}
func (UnimplementedSystemServer) TreeMenu(context.Context, *Nil) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TreeMenu not implemented")
}
func (UnimplementedSystemServer) SubmitMenu(context.Context, *CommonRpcRes) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitMenu not implemented")
}
func (UnimplementedSystemServer) RemoveMenu(context.Context, *RemoveMenuReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMenu not implemented")
}
func (UnimplementedSystemServer) RoleTreeKeysMenu(context.Context, *RoleTreeKeysMenuReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleTreeKeysMenu not implemented")
}
func (UnimplementedSystemServer) ListRoleByAttr(context.Context, *ListRoleByAttrReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoleByAttr not implemented")
}
func (UnimplementedSystemServer) UpdateRole(context.Context, *CommonRpcRes) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedSystemServer) AuthorizationRole(context.Context, *AuthorizationRoleReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizationRole not implemented")
}
func (UnimplementedSystemServer) RemoveRoleByIds(context.Context, *RemoveRoleByIdsReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRoleByIds not implemented")
}
func (UnimplementedSystemServer) TenantAttrRoleAlloc(context.Context, *TenantAttrRoleAllocReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantAttrRoleAlloc not implemented")
}
func (UnimplementedSystemServer) TenantAttrSubmit(context.Context, *CommonRpcRes) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantAttrSubmit not implemented")
}
func (UnimplementedSystemServer) TenantAttrRemove(context.Context, *TenantAttrRemoveReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantAttrRemove not implemented")
}
func (UnimplementedSystemServer) AgencyRemove(context.Context, *AgencyRemoveReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgencyRemove not implemented")
}
func (UnimplementedSystemServer) UpdateMsterUnit(context.Context, *CommonRpcReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMsterUnit not implemented")
}
func (UnimplementedSystemServer) AddJobs(context.Context, *CommonRpcReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddJobs not implemented")
}
func (UnimplementedSystemServer) AddAgencys(context.Context, *CommonRpcReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAgencys not implemented")
}
func (UnimplementedSystemServer) AddGroupRelations(context.Context, *CommonRpcReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGroupRelations not implemented")
}
func (UnimplementedSystemServer) RemoveProperties(context.Context, *RemovePropertiesReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProperties not implemented")
}
func (UnimplementedSystemServer) SubmitDict(context.Context, *CommonRpcRes) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitDict not implemented")
}
func (UnimplementedSystemServer) FindTenantByNames(context.Context, *CommonRpcReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTenantByNames not implemented")
}
func (UnimplementedSystemServer) AddTenants(context.Context, *CommonRpcReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTenants not implemented")
}
func (UnimplementedSystemServer) ImportTenantIcon(context.Context, *ImportTenantIconReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportTenantIcon not implemented")
}
func (UnimplementedSystemServer) RemoveTenantIcon(context.Context, *CommonRpcReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTenantIcon not implemented")
}
func (UnimplementedSystemServer) mustEmbedUnimplementedSystemServer() {}

// UnsafeSystemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemServer will
// result in compilation errors.
type UnsafeSystemServer interface {
	mustEmbedUnimplementedSystemServer()
}

func RegisterSystemServer(s grpc.ServiceRegistrar, srv SystemServer) {
	s.RegisterService(&System_ServiceDesc, srv)
}

func _System_FindDicItemsByValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDicItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).FindDicItemsByValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/findDicItemsByValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).FindDicItemsByValue(ctx, req.(*FindDicItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_FindAllDic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllDicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).FindAllDic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/findAllDic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).FindAllDic(ctx, req.(*FindAllDicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_SetMasterUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMasterUnitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).SetMasterUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/setMasterUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).SetMasterUnit(ctx, req.(*SetMasterUnitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_UpdateUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).UpdateUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/updateUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).UpdateUserName(ctx, req.(*UpdateUserName))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_FindPersonByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonByUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).FindPersonByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/findPersonByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).FindPersonByUserId(ctx, req.(*PersonByUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_FindUserOrRoleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).FindUserOrRoleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/findUserOrRoleInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).FindUserOrRoleInfo(ctx, req.(*RoleUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_FindUserByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrimaryKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).FindUserByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/findUserByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).FindUserByUserId(ctx, req.(*PrimaryKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_FindAgencyOrPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgencyPersonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).FindAgencyOrPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/findAgencyOrPerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).FindAgencyOrPerson(ctx, req.(*AgencyPersonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_FindTenantByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).FindTenantByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/findTenantByAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).FindTenantByAccount(ctx, req.(*ByAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_FindTenantInfoByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountTenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).FindTenantInfoByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/findTenantInfoByAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).FindTenantInfoByAccount(ctx, req.(*AccountTenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_SearchTeantByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTeantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).SearchTeantByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/searchTeantByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).SearchTeantByName(ctx, req.(*SearchTeantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_JoinTeantByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).JoinTeantByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/joinTeantByCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).JoinTeantByCode(ctx, req.(*TenantCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_CreateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).CreateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/createTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).CreateTenant(ctx, req.(*CreateTenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_FindTenantById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).FindTenantById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/findTenantById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).FindTenantById(ctx, req.(*TenantByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_FindAllGroupByCodeAndType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAllGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).FindAllGroupByCodeAndType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/findAllGroupByCodeAndType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).FindAllGroupByCodeAndType(ctx, req.(*SearchAllGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_FindRoleMenusByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleMenusByUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).FindRoleMenusByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/findRoleMenusByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).FindRoleMenusByUser(ctx, req.(*RoleMenusByUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_FindMarketAppRoleMenusByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleMenusByUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).FindMarketAppRoleMenusByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/findMarketAppRoleMenusByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).FindMarketAppRoleMenusByUser(ctx, req.(*RoleMenusByUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_UpdateUnitInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRpcReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).UpdateUnitInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/updateUnitInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).UpdateUnitInfo(ctx, req.(*CommonRpcReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_FindInnerAgencyTreeByTenantCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).FindInnerAgencyTreeByTenantCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/findInnerAgencyTreeByTenantCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).FindInnerAgencyTreeByTenantCode(ctx, req.(*TenantCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_FindAgencyDeptCodeByTenantCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).FindAgencyDeptCodeByTenantCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/findAgencyDeptCodeByTenantCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).FindAgencyDeptCodeByTenantCode(ctx, req.(*TenantCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_GetNewPersonUserCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).GetNewPersonUserCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/getNewPersonUserCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).GetNewPersonUserCode(ctx, req.(*TenantCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_FindTenantPersons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPersonByTenantCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).FindTenantPersons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/findTenantPersons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).FindTenantPersons(ctx, req.(*SearchPersonByTenantCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_FindAllGroupByTentantCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllGroupByTenantCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).FindAllGroupByTentantCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/findAllGroupByTentantCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).FindAllGroupByTentantCode(ctx, req.(*FindAllGroupByTenantCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_FindAdministrativeTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).FindAdministrativeTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/findAdministrativeTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).FindAdministrativeTree(ctx, req.(*Nil))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_FindAdministrativeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).FindAdministrativeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/findAdministrativeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).FindAdministrativeList(ctx, req.(*PageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_FindJobList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindJobListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).FindJobList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/findJobList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).FindJobList(ctx, req.(*FindJobListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_FindUnitPageByGroupId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUnitPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).FindUnitPageByGroupId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/findUnitPageByGroupId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).FindUnitPageByGroupId(ctx, req.(*FindUnitPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_FindBlowUnitPageByGroupId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUnitPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).FindBlowUnitPageByGroupId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/findBlowUnitPageByGroupId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).FindBlowUnitPageByGroupId(ctx, req.(*FindUnitPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_FingGroupInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrimaryKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).FingGroupInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/fingGroupInfoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).FingGroupInfoById(ctx, req.(*PrimaryKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_FindScenesListPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindScenesListPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).FindScenesListPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/findScenesListPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).FindScenesListPage(ctx, req.(*FindScenesListPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_RemoveScenesByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveScenesByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).RemoveScenesByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/removeScenesByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).RemoveScenesByIds(ctx, req.(*RemoveScenesByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_FindOrgansV2ListPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOrgansV2ListPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).FindOrgansV2ListPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/findOrgansV2ListPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).FindOrgansV2ListPage(ctx, req.(*FindOrgansV2ListPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_RemoveOrgansByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(V2RemoveByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).RemoveOrgansByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/removeOrgansByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).RemoveOrgansByIds(ctx, req.(*V2RemoveByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_FindPersonListPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPersonListPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).FindPersonListPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/findPersonListPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).FindPersonListPage(ctx, req.(*FindPersonListPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_RemovePersonByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePersonByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).RemovePersonByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/removePersonByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).RemovePersonByIds(ctx, req.(*RemovePersonByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_RemoveAllGroupByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAllGroupByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).RemoveAllGroupByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/removeAllGroupByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).RemoveAllGroupByIds(ctx, req.(*RemoveAllGroupByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_FindAllGroupListAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllGroupListAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).FindAllGroupListAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/findAllGroupListAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).FindAllGroupListAll(ctx, req.(*FindAllGroupListAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_FindRoleListPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRoleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).FindRoleListPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/findRoleListPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).FindRoleListPage(ctx, req.(*FindRoleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_FindGroupLayerById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupLayerByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).FindGroupLayerById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/findGroupLayerById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).FindGroupLayerById(ctx, req.(*GroupLayerByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_FindTenantAttrList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindTenantAttrListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).FindTenantAttrList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/findTenantAttrList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).FindTenantAttrList(ctx, req.(*FindTenantAttrListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_FindImportStatusList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindImportStatusListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).FindImportStatusList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/findImportStatusList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).FindImportStatusList(ctx, req.(*FindImportStatusListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_AddPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPersonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).AddPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/addPerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).AddPerson(ctx, req.(*AddPersonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_AddPersons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRpcReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).AddPersons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/addPersons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).AddPersons(ctx, req.(*CommonRpcReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_FindTenantIconList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindTenantIconListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).FindTenantIconList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/findTenantIconList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).FindTenantIconList(ctx, req.(*FindTenantIconListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_FindInnerAgencyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindInnerAgencyListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).FindInnerAgencyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/findInnerAgencyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).FindInnerAgencyList(ctx, req.(*FindInnerAgencyListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_FindAllRolesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllRolesListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).FindAllRolesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/findAllRolesList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).FindAllRolesList(ctx, req.(*FindAllRolesListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_UpdateAgencyInnerUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAgencyInnerUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).UpdateAgencyInnerUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/updateAgencyInnerUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).UpdateAgencyInnerUser(ctx, req.(*UpdateAgencyInnerUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/createGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).CreateGroup(ctx, req.(*CreateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_QueryGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).QueryGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/queryGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).QueryGroup(ctx, req.(*QueryGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_DisbandGroupById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisbandGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).DisbandGroupById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/disbandGroupById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).DisbandGroupById(ctx, req.(*DisbandGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_GetGroupTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupTreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).GetGroupTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/getGroupTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).GetGroupTree(ctx, req.(*GroupTreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_GetAllgroupInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrimaryKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).GetAllgroupInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/getAllgroupInfoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).GetAllgroupInfoById(ctx, req.(*PrimaryKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_GroupAppDistribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupAppDistributeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).GroupAppDistribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/groupAppDistribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).GroupAppDistribute(ctx, req.(*GroupAppDistributeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_ListApplyTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApplyTenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).ListApplyTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/listApplyTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).ListApplyTenant(ctx, req.(*ListApplyTenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_DistributeDeptPersons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistributeDeptPersonsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).DistributeDeptPersons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/distributeDeptPersons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).DistributeDeptPersons(ctx, req.(*DistributeDeptPersonsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_SearchPersonByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SerarchDeptPersonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).SearchPersonByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/searchPersonByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).SearchPersonByName(ctx, req.(*SerarchDeptPersonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_SearchDeptByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SerarchDeptPersonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).SearchDeptByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/searchDeptByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).SearchDeptByName(ctx, req.(*SerarchDeptPersonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_UpdatePersonPhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePersonPhoneNumberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).UpdatePersonPhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/updatePersonPhoneNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).UpdatePersonPhoneNumber(ctx, req.(*UpdatePersonPhoneNumberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_TenantsJoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantsJoinGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).TenantsJoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/tenantsJoinGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).TenantsJoinGroup(ctx, req.(*TenantsJoinGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_SearchJobList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchJobListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).SearchJobList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/searchJobList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).SearchJobList(ctx, req.(*SearchJobListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_UpdateJobUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJobUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).UpdateJobUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/updateJobUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).UpdateJobUser(ctx, req.(*UpdateJobUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_AddJobUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddJobUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).AddJobUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/addJobUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).AddJobUser(ctx, req.(*AddJobUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_RemoveJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).RemoveJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/RemoveJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).RemoveJob(ctx, req.(*RemoveJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_UpdateJobUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJobUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).UpdateJobUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/updateJobUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).UpdateJobUsers(ctx, req.(*UpdateJobUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_UpdateGroupIsHide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupIsHideReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).UpdateGroupIsHide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/updateGroupIsHide",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).UpdateGroupIsHide(ctx, req.(*UpdateGroupIsHideReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_RemoveLeafTenants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveLeafTenantsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).RemoveLeafTenants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/removeLeafTenants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).RemoveLeafTenants(ctx, req.(*RemoveLeafTenantsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_FindPropertiesUnitList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPropertiesUnitListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).FindPropertiesUnitList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/findPropertiesUnitList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).FindPropertiesUnitList(ctx, req.(*FindPropertiesUnitListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_CreateDistributeProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDistributePropertiesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).CreateDistributeProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/createDistributeProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).CreateDistributeProperties(ctx, req.(*CreateDistributePropertiesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_CreateAndDistributeProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAndDistributePropertiesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).CreateAndDistributeProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/createAndDistributeProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).CreateAndDistributeProperties(ctx, req.(*CreateAndDistributePropertiesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_DistributeProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistributePropertiesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).DistributeProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/distributeProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).DistributeProperties(ctx, req.(*DistributePropertiesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_FindGroupListByRelations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindGroupListByRelationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).FindGroupListByRelations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/findGroupListByRelations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).FindGroupListByRelations(ctx, req.(*FindGroupListByRelationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_UpdateFatherTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFatherTenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).UpdateFatherTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/updateFatherTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).UpdateFatherTenant(ctx, req.(*UpdateFatherTenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_BanPersonUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BanPersonUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).BanPersonUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/banPersonUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).BanPersonUser(ctx, req.(*BanPersonUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_UpdateUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).UpdateUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/updateUserRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).UpdateUserRole(ctx, req.(*UpdateUserRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_DeleteUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).DeleteUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/deleteUserRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).DeleteUserRole(ctx, req.(*UpdateUserRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_AddInnerUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInnerUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).AddInnerUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/addInnerUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).AddInnerUser(ctx, req.(*AddInnerUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_ActiveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActiveUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).ActiveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/activeUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).ActiveUser(ctx, req.(*ActiveUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_RemoveDeptJobUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDeptUserJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).RemoveDeptJobUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/removeDeptJobUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).RemoveDeptJobUser(ctx, req.(*RemoveDeptUserJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_FindPropertiesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPropertiesListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).FindPropertiesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/findPropertiesList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).FindPropertiesList(ctx, req.(*FindPropertiesListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_FindRoleListByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRoleListByUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).FindRoleListByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/findRoleListByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).FindRoleListByUserId(ctx, req.(*FindRoleListByUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_FindRoleIdListByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRoleListByUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).FindRoleIdListByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/findRoleIdListByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).FindRoleIdListByUserId(ctx, req.(*FindRoleListByUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_UpdatePersonInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRpcRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).UpdatePersonInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/updatePersonInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).UpdatePersonInfo(ctx, req.(*CommonRpcRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_UpdateOrgansInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRpcRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).UpdateOrgansInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/updateOrgansInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).UpdateOrgansInfo(ctx, req.(*CommonRpcRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_UpdateScenesInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRpcRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).UpdateScenesInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/updateScenesInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).UpdateScenesInfo(ctx, req.(*CommonRpcRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_UpdateGroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).UpdateGroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/updateGroupInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).UpdateGroupInfo(ctx, req.(*UpdateGroupInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_CreateInputRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRpcReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).CreateInputRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/createInputRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).CreateInputRecord(ctx, req.(*CommonRpcReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_UpdateTenantRelations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTenantRelationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).UpdateTenantRelations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/updateTenantRelations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).UpdateTenantRelations(ctx, req.(*UpdateTenantRelationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_FindUnitByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUnitByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).FindUnitByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/findUnitByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).FindUnitByIds(ctx, req.(*FindUnitByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_TreeMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).TreeMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/treeMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).TreeMenu(ctx, req.(*Nil))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_SubmitMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRpcRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).SubmitMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/submitMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).SubmitMenu(ctx, req.(*CommonRpcRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_RemoveMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).RemoveMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/removeMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).RemoveMenu(ctx, req.(*RemoveMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_RoleTreeKeysMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleTreeKeysMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).RoleTreeKeysMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/roleTreeKeysMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).RoleTreeKeysMenu(ctx, req.(*RoleTreeKeysMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_ListRoleByAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoleByAttrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).ListRoleByAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/listRoleByAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).ListRoleByAttr(ctx, req.(*ListRoleByAttrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRpcRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/updateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).UpdateRole(ctx, req.(*CommonRpcRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_AuthorizationRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).AuthorizationRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/authorizationRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).AuthorizationRole(ctx, req.(*AuthorizationRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_RemoveRoleByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRoleByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).RemoveRoleByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/removeRoleByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).RemoveRoleByIds(ctx, req.(*RemoveRoleByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_TenantAttrRoleAlloc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantAttrRoleAllocReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).TenantAttrRoleAlloc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/tenantAttrRoleAlloc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).TenantAttrRoleAlloc(ctx, req.(*TenantAttrRoleAllocReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_TenantAttrSubmit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRpcRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).TenantAttrSubmit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/tenantAttrSubmit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).TenantAttrSubmit(ctx, req.(*CommonRpcRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_TenantAttrRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantAttrRemoveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).TenantAttrRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/tenantAttrRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).TenantAttrRemove(ctx, req.(*TenantAttrRemoveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_AgencyRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgencyRemoveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).AgencyRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/agencyRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).AgencyRemove(ctx, req.(*AgencyRemoveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_UpdateMsterUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRpcReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).UpdateMsterUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/updateMsterUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).UpdateMsterUnit(ctx, req.(*CommonRpcReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_AddJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRpcReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).AddJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/addJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).AddJobs(ctx, req.(*CommonRpcReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_AddAgencys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRpcReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).AddAgencys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/addAgencys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).AddAgencys(ctx, req.(*CommonRpcReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_AddGroupRelations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRpcReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).AddGroupRelations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/addGroupRelations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).AddGroupRelations(ctx, req.(*CommonRpcReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_RemoveProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePropertiesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).RemoveProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/removeProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).RemoveProperties(ctx, req.(*RemovePropertiesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_SubmitDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRpcRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).SubmitDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/submitDict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).SubmitDict(ctx, req.(*CommonRpcRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_FindTenantByNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRpcReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).FindTenantByNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/findTenantByNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).FindTenantByNames(ctx, req.(*CommonRpcReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_AddTenants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRpcReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).AddTenants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/addTenants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).AddTenants(ctx, req.(*CommonRpcReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_ImportTenantIcon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportTenantIconReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).ImportTenantIcon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/importTenantIcon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).ImportTenantIcon(ctx, req.(*ImportTenantIconReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_RemoveTenantIcon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRpcReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).RemoveTenantIcon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.system/removeTenantIcon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).RemoveTenantIcon(ctx, req.(*CommonRpcReq))
	}
	return interceptor(ctx, in, info, handler)
}

// System_ServiceDesc is the grpc.ServiceDesc for System service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var System_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "system.system",
	HandlerType: (*SystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "findDicItemsByValue",
			Handler:    _System_FindDicItemsByValue_Handler,
		},
		{
			MethodName: "findAllDic",
			Handler:    _System_FindAllDic_Handler,
		},
		{
			MethodName: "setMasterUnit",
			Handler:    _System_SetMasterUnit_Handler,
		},
		{
			MethodName: "updateUserName",
			Handler:    _System_UpdateUserName_Handler,
		},
		{
			MethodName: "findPersonByUserId",
			Handler:    _System_FindPersonByUserId_Handler,
		},
		{
			MethodName: "findUserOrRoleInfo",
			Handler:    _System_FindUserOrRoleInfo_Handler,
		},
		{
			MethodName: "findUserByUserId",
			Handler:    _System_FindUserByUserId_Handler,
		},
		{
			MethodName: "findAgencyOrPerson",
			Handler:    _System_FindAgencyOrPerson_Handler,
		},
		{
			MethodName: "findTenantByAccount",
			Handler:    _System_FindTenantByAccount_Handler,
		},
		{
			MethodName: "findTenantInfoByAccount",
			Handler:    _System_FindTenantInfoByAccount_Handler,
		},
		{
			MethodName: "searchTeantByName",
			Handler:    _System_SearchTeantByName_Handler,
		},
		{
			MethodName: "joinTeantByCode",
			Handler:    _System_JoinTeantByCode_Handler,
		},
		{
			MethodName: "createTenant",
			Handler:    _System_CreateTenant_Handler,
		},
		{
			MethodName: "findTenantById",
			Handler:    _System_FindTenantById_Handler,
		},
		{
			MethodName: "findAllGroupByCodeAndType",
			Handler:    _System_FindAllGroupByCodeAndType_Handler,
		},
		{
			MethodName: "findRoleMenusByUser",
			Handler:    _System_FindRoleMenusByUser_Handler,
		},
		{
			MethodName: "findMarketAppRoleMenusByUser",
			Handler:    _System_FindMarketAppRoleMenusByUser_Handler,
		},
		{
			MethodName: "updateUnitInfo",
			Handler:    _System_UpdateUnitInfo_Handler,
		},
		{
			MethodName: "findInnerAgencyTreeByTenantCode",
			Handler:    _System_FindInnerAgencyTreeByTenantCode_Handler,
		},
		{
			MethodName: "findAgencyDeptCodeByTenantCode",
			Handler:    _System_FindAgencyDeptCodeByTenantCode_Handler,
		},
		{
			MethodName: "getNewPersonUserCode",
			Handler:    _System_GetNewPersonUserCode_Handler,
		},
		{
			MethodName: "findTenantPersons",
			Handler:    _System_FindTenantPersons_Handler,
		},
		{
			MethodName: "findAllGroupByTentantCode",
			Handler:    _System_FindAllGroupByTentantCode_Handler,
		},
		{
			MethodName: "findAdministrativeTree",
			Handler:    _System_FindAdministrativeTree_Handler,
		},
		{
			MethodName: "findAdministrativeList",
			Handler:    _System_FindAdministrativeList_Handler,
		},
		{
			MethodName: "findJobList",
			Handler:    _System_FindJobList_Handler,
		},
		{
			MethodName: "findUnitPageByGroupId",
			Handler:    _System_FindUnitPageByGroupId_Handler,
		},
		{
			MethodName: "findBlowUnitPageByGroupId",
			Handler:    _System_FindBlowUnitPageByGroupId_Handler,
		},
		{
			MethodName: "fingGroupInfoById",
			Handler:    _System_FingGroupInfoById_Handler,
		},
		{
			MethodName: "findScenesListPage",
			Handler:    _System_FindScenesListPage_Handler,
		},
		{
			MethodName: "removeScenesByIds",
			Handler:    _System_RemoveScenesByIds_Handler,
		},
		{
			MethodName: "findOrgansV2ListPage",
			Handler:    _System_FindOrgansV2ListPage_Handler,
		},
		{
			MethodName: "removeOrgansByIds",
			Handler:    _System_RemoveOrgansByIds_Handler,
		},
		{
			MethodName: "findPersonListPage",
			Handler:    _System_FindPersonListPage_Handler,
		},
		{
			MethodName: "removePersonByIds",
			Handler:    _System_RemovePersonByIds_Handler,
		},
		{
			MethodName: "removeAllGroupByIds",
			Handler:    _System_RemoveAllGroupByIds_Handler,
		},
		{
			MethodName: "findAllGroupListAll",
			Handler:    _System_FindAllGroupListAll_Handler,
		},
		{
			MethodName: "findRoleListPage",
			Handler:    _System_FindRoleListPage_Handler,
		},
		{
			MethodName: "findGroupLayerById",
			Handler:    _System_FindGroupLayerById_Handler,
		},
		{
			MethodName: "findTenantAttrList",
			Handler:    _System_FindTenantAttrList_Handler,
		},
		{
			MethodName: "findImportStatusList",
			Handler:    _System_FindImportStatusList_Handler,
		},
		{
			MethodName: "addPerson",
			Handler:    _System_AddPerson_Handler,
		},
		{
			MethodName: "addPersons",
			Handler:    _System_AddPersons_Handler,
		},
		{
			MethodName: "findTenantIconList",
			Handler:    _System_FindTenantIconList_Handler,
		},
		{
			MethodName: "findInnerAgencyList",
			Handler:    _System_FindInnerAgencyList_Handler,
		},
		{
			MethodName: "findAllRolesList",
			Handler:    _System_FindAllRolesList_Handler,
		},
		{
			MethodName: "updateAgencyInnerUser",
			Handler:    _System_UpdateAgencyInnerUser_Handler,
		},
		{
			MethodName: "createGroup",
			Handler:    _System_CreateGroup_Handler,
		},
		{
			MethodName: "queryGroup",
			Handler:    _System_QueryGroup_Handler,
		},
		{
			MethodName: "disbandGroupById",
			Handler:    _System_DisbandGroupById_Handler,
		},
		{
			MethodName: "getGroupTree",
			Handler:    _System_GetGroupTree_Handler,
		},
		{
			MethodName: "getAllgroupInfoById",
			Handler:    _System_GetAllgroupInfoById_Handler,
		},
		{
			MethodName: "groupAppDistribute",
			Handler:    _System_GroupAppDistribute_Handler,
		},
		{
			MethodName: "listApplyTenant",
			Handler:    _System_ListApplyTenant_Handler,
		},
		{
			MethodName: "distributeDeptPersons",
			Handler:    _System_DistributeDeptPersons_Handler,
		},
		{
			MethodName: "searchPersonByName",
			Handler:    _System_SearchPersonByName_Handler,
		},
		{
			MethodName: "searchDeptByName",
			Handler:    _System_SearchDeptByName_Handler,
		},
		{
			MethodName: "updatePersonPhoneNumber",
			Handler:    _System_UpdatePersonPhoneNumber_Handler,
		},
		{
			MethodName: "tenantsJoinGroup",
			Handler:    _System_TenantsJoinGroup_Handler,
		},
		{
			MethodName: "searchJobList",
			Handler:    _System_SearchJobList_Handler,
		},
		{
			MethodName: "updateJobUser",
			Handler:    _System_UpdateJobUser_Handler,
		},
		{
			MethodName: "addJobUser",
			Handler:    _System_AddJobUser_Handler,
		},
		{
			MethodName: "RemoveJob",
			Handler:    _System_RemoveJob_Handler,
		},
		{
			MethodName: "updateJobUsers",
			Handler:    _System_UpdateJobUsers_Handler,
		},
		{
			MethodName: "updateGroupIsHide",
			Handler:    _System_UpdateGroupIsHide_Handler,
		},
		{
			MethodName: "removeLeafTenants",
			Handler:    _System_RemoveLeafTenants_Handler,
		},
		{
			MethodName: "findPropertiesUnitList",
			Handler:    _System_FindPropertiesUnitList_Handler,
		},
		{
			MethodName: "createDistributeProperties",
			Handler:    _System_CreateDistributeProperties_Handler,
		},
		{
			MethodName: "createAndDistributeProperties",
			Handler:    _System_CreateAndDistributeProperties_Handler,
		},
		{
			MethodName: "distributeProperties",
			Handler:    _System_DistributeProperties_Handler,
		},
		{
			MethodName: "findGroupListByRelations",
			Handler:    _System_FindGroupListByRelations_Handler,
		},
		{
			MethodName: "updateFatherTenant",
			Handler:    _System_UpdateFatherTenant_Handler,
		},
		{
			MethodName: "banPersonUser",
			Handler:    _System_BanPersonUser_Handler,
		},
		{
			MethodName: "updateUserRole",
			Handler:    _System_UpdateUserRole_Handler,
		},
		{
			MethodName: "deleteUserRole",
			Handler:    _System_DeleteUserRole_Handler,
		},
		{
			MethodName: "addInnerUser",
			Handler:    _System_AddInnerUser_Handler,
		},
		{
			MethodName: "activeUser",
			Handler:    _System_ActiveUser_Handler,
		},
		{
			MethodName: "removeDeptJobUser",
			Handler:    _System_RemoveDeptJobUser_Handler,
		},
		{
			MethodName: "findPropertiesList",
			Handler:    _System_FindPropertiesList_Handler,
		},
		{
			MethodName: "findRoleListByUserId",
			Handler:    _System_FindRoleListByUserId_Handler,
		},
		{
			MethodName: "findRoleIdListByUserId",
			Handler:    _System_FindRoleIdListByUserId_Handler,
		},
		{
			MethodName: "updatePersonInfo",
			Handler:    _System_UpdatePersonInfo_Handler,
		},
		{
			MethodName: "updateOrgansInfo",
			Handler:    _System_UpdateOrgansInfo_Handler,
		},
		{
			MethodName: "updateScenesInfo",
			Handler:    _System_UpdateScenesInfo_Handler,
		},
		{
			MethodName: "updateGroupInfo",
			Handler:    _System_UpdateGroupInfo_Handler,
		},
		{
			MethodName: "createInputRecord",
			Handler:    _System_CreateInputRecord_Handler,
		},
		{
			MethodName: "updateTenantRelations",
			Handler:    _System_UpdateTenantRelations_Handler,
		},
		{
			MethodName: "findUnitByIds",
			Handler:    _System_FindUnitByIds_Handler,
		},
		{
			MethodName: "treeMenu",
			Handler:    _System_TreeMenu_Handler,
		},
		{
			MethodName: "submitMenu",
			Handler:    _System_SubmitMenu_Handler,
		},
		{
			MethodName: "removeMenu",
			Handler:    _System_RemoveMenu_Handler,
		},
		{
			MethodName: "roleTreeKeysMenu",
			Handler:    _System_RoleTreeKeysMenu_Handler,
		},
		{
			MethodName: "listRoleByAttr",
			Handler:    _System_ListRoleByAttr_Handler,
		},
		{
			MethodName: "updateRole",
			Handler:    _System_UpdateRole_Handler,
		},
		{
			MethodName: "authorizationRole",
			Handler:    _System_AuthorizationRole_Handler,
		},
		{
			MethodName: "removeRoleByIds",
			Handler:    _System_RemoveRoleByIds_Handler,
		},
		{
			MethodName: "tenantAttrRoleAlloc",
			Handler:    _System_TenantAttrRoleAlloc_Handler,
		},
		{
			MethodName: "tenantAttrSubmit",
			Handler:    _System_TenantAttrSubmit_Handler,
		},
		{
			MethodName: "tenantAttrRemove",
			Handler:    _System_TenantAttrRemove_Handler,
		},
		{
			MethodName: "agencyRemove",
			Handler:    _System_AgencyRemove_Handler,
		},
		{
			MethodName: "updateMsterUnit",
			Handler:    _System_UpdateMsterUnit_Handler,
		},
		{
			MethodName: "addJobs",
			Handler:    _System_AddJobs_Handler,
		},
		{
			MethodName: "addAgencys",
			Handler:    _System_AddAgencys_Handler,
		},
		{
			MethodName: "addGroupRelations",
			Handler:    _System_AddGroupRelations_Handler,
		},
		{
			MethodName: "removeProperties",
			Handler:    _System_RemoveProperties_Handler,
		},
		{
			MethodName: "submitDict",
			Handler:    _System_SubmitDict_Handler,
		},
		{
			MethodName: "findTenantByNames",
			Handler:    _System_FindTenantByNames_Handler,
		},
		{
			MethodName: "addTenants",
			Handler:    _System_AddTenants_Handler,
		},
		{
			MethodName: "importTenantIcon",
			Handler:    _System_ImportTenantIcon_Handler,
		},
		{
			MethodName: "removeTenantIcon",
			Handler:    _System_RemoveTenantIcon_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "source/rpc/asset-system/system.proto",
}
