// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

package user

import (
	"context"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	User interface {
		// 用户注册
		UserReReg(ctx context.Context, in *UserReRegReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
		// 修改密码
		UpdatePasswd(ctx context.Context, in *UpdatePasswdReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
		// 切换主单位
		SwitchTenantByCode(ctx context.Context, in *SwitchTenantReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
		// 查找用户
		FindUserByAccount(ctx context.Context, in *UserByAccountReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
		// 加入租户
		JoinTeantByCode(ctx context.Context, in *TenantCodeReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
		// 分页查询用户
		FindUserListPage(ctx context.Context, in *FindUserListPageReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
		// 分页查询用户
		FindUserTenantUser(ctx context.Context, in *FindserTenantUserReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
		// 删除用户
		DeleteUserInfo(ctx context.Context, in *DeleteUserInfoReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
		// 审核租户
		AuditUser(ctx context.Context, in *AuditUserReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
		// 取消加入租户申请
		CancelJoinTenantRequest(ctx context.Context, in *CancelJoinTenantReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
		// 更新用户信息
		UpdateUserInfo(ctx context.Context, in *CommonRpcRes, opts ...grpc.CallOption) (*CommonRpcRes, error)
		// 重置用户密码
		ResetPassWord(ctx context.Context, in *CommonRpcRes, opts ...grpc.CallOption) (*CommonRpcRes, error)
		// 删除用户
		RemoveUserByIds(ctx context.Context, in *RemoveUserByIdsReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
		// 获取应用信息
		GetMarketAppInfo(ctx context.Context, in *GetMarketAppInfoReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

// 用户注册
func (m *defaultUser) UserReReg(ctx context.Context, in *UserReRegReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	client := NewUserClient(m.cli.Conn())
	return client.UserReReg(ctx, in, opts...)
}

// 修改密码
func (m *defaultUser) UpdatePasswd(ctx context.Context, in *UpdatePasswdReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	client := NewUserClient(m.cli.Conn())
	return client.UpdatePasswd(ctx, in, opts...)
}

// 切换主单位
func (m *defaultUser) SwitchTenantByCode(ctx context.Context, in *SwitchTenantReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	client := NewUserClient(m.cli.Conn())
	return client.SwitchTenantByCode(ctx, in, opts...)
}

// 查找用户
func (m *defaultUser) FindUserByAccount(ctx context.Context, in *UserByAccountReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	client := NewUserClient(m.cli.Conn())
	return client.FindUserByAccount(ctx, in, opts...)
}

// 加入租户
func (m *defaultUser) JoinTeantByCode(ctx context.Context, in *TenantCodeReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	client := NewUserClient(m.cli.Conn())
	return client.JoinTeantByCode(ctx, in, opts...)
}

// 分页查询用户
func (m *defaultUser) FindUserListPage(ctx context.Context, in *FindUserListPageReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	client := NewUserClient(m.cli.Conn())
	return client.FindUserListPage(ctx, in, opts...)
}

// 分页查询用户
func (m *defaultUser) FindUserTenantUser(ctx context.Context, in *FindserTenantUserReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	client := NewUserClient(m.cli.Conn())
	return client.FindUserTenantUser(ctx, in, opts...)
}

// 删除用户
func (m *defaultUser) DeleteUserInfo(ctx context.Context, in *DeleteUserInfoReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	client := NewUserClient(m.cli.Conn())
	return client.DeleteUserInfo(ctx, in, opts...)
}

// 审核租户
func (m *defaultUser) AuditUser(ctx context.Context, in *AuditUserReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	client := NewUserClient(m.cli.Conn())
	return client.AuditUser(ctx, in, opts...)
}

// 取消加入租户申请
func (m *defaultUser) CancelJoinTenantRequest(ctx context.Context, in *CancelJoinTenantReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	client := NewUserClient(m.cli.Conn())
	return client.CancelJoinTenantRequest(ctx, in, opts...)
}

// 更新用户信息
func (m *defaultUser) UpdateUserInfo(ctx context.Context, in *CommonRpcRes, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	client := NewUserClient(m.cli.Conn())
	return client.UpdateUserInfo(ctx, in, opts...)
}

// 重置用户密码
func (m *defaultUser) ResetPassWord(ctx context.Context, in *CommonRpcRes, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	client := NewUserClient(m.cli.Conn())
	return client.ResetPassWord(ctx, in, opts...)
}

// 删除用户
func (m *defaultUser) RemoveUserByIds(ctx context.Context, in *RemoveUserByIdsReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	client := NewUserClient(m.cli.Conn())
	return client.RemoveUserByIds(ctx, in, opts...)
}

// 获取应用信息
func (m *defaultUser) GetMarketAppInfo(ctx context.Context, in *GetMarketAppInfoReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	client := NewUserClient(m.cli.Conn())
	return client.GetMarketAppInfo(ctx, in, opts...)
}
