// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: source/rpc/asset-user/user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	//用户注册
	UserReReg(ctx context.Context, in *UserReRegReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//修改密码
	UpdatePasswd(ctx context.Context, in *UpdatePasswdReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//切换主单位
	SwitchTenantByCode(ctx context.Context, in *SwitchTenantReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//查找用户
	FindUserByAccount(ctx context.Context, in *UserByAccountReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//加入租户
	JoinTeantByCode(ctx context.Context, in *TenantCodeReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//分页查询用户
	FindUserListPage(ctx context.Context, in *FindUserListPageReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//分页查询用户
	FindUserTenantUser(ctx context.Context, in *FindserTenantUserReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//删除用户
	DeleteUserInfo(ctx context.Context, in *DeleteUserInfoReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//审核租户
	AuditUser(ctx context.Context, in *AuditUserReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//取消加入租户申请
	CancelJoinTenantRequest(ctx context.Context, in *CancelJoinTenantReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//更新用户信息
	UpdateUserInfo(ctx context.Context, in *CommonRpcRes, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//重置用户密码
	ResetPassWord(ctx context.Context, in *CommonRpcRes, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//删除用户
	RemoveUserByIds(ctx context.Context, in *RemoveUserByIdsReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//获取应用信息
	GetMarketAppInfo(ctx context.Context, in *GetMarketAppInfoReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) UserReReg(ctx context.Context, in *UserReRegReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/user.user/userReReg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdatePasswd(ctx context.Context, in *UpdatePasswdReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/user.user/updatePasswd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SwitchTenantByCode(ctx context.Context, in *SwitchTenantReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/user.user/switchTenantByCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FindUserByAccount(ctx context.Context, in *UserByAccountReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/user.user/findUserByAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) JoinTeantByCode(ctx context.Context, in *TenantCodeReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/user.user/JoinTeantByCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FindUserListPage(ctx context.Context, in *FindUserListPageReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/user.user/findUserListPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FindUserTenantUser(ctx context.Context, in *FindserTenantUserReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/user.user/findUserTenantUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DeleteUserInfo(ctx context.Context, in *DeleteUserInfoReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/user.user/deleteUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AuditUser(ctx context.Context, in *AuditUserReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/user.user/auditUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CancelJoinTenantRequest(ctx context.Context, in *CancelJoinTenantReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/user.user/cancelJoinTenantRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateUserInfo(ctx context.Context, in *CommonRpcRes, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/user.user/updateUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ResetPassWord(ctx context.Context, in *CommonRpcRes, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/user.user/resetPassWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) RemoveUserByIds(ctx context.Context, in *RemoveUserByIdsReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/user.user/removeUserByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetMarketAppInfo(ctx context.Context, in *GetMarketAppInfoReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/user.user/getMarketAppInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	//用户注册
	UserReReg(context.Context, *UserReRegReq) (*CommonRpcRes, error)
	//修改密码
	UpdatePasswd(context.Context, *UpdatePasswdReq) (*CommonRpcRes, error)
	//切换主单位
	SwitchTenantByCode(context.Context, *SwitchTenantReq) (*CommonRpcRes, error)
	//查找用户
	FindUserByAccount(context.Context, *UserByAccountReq) (*CommonRpcRes, error)
	//加入租户
	JoinTeantByCode(context.Context, *TenantCodeReq) (*CommonRpcRes, error)
	//分页查询用户
	FindUserListPage(context.Context, *FindUserListPageReq) (*CommonRpcRes, error)
	//分页查询用户
	FindUserTenantUser(context.Context, *FindserTenantUserReq) (*CommonRpcRes, error)
	//删除用户
	DeleteUserInfo(context.Context, *DeleteUserInfoReq) (*CommonRpcRes, error)
	//审核租户
	AuditUser(context.Context, *AuditUserReq) (*CommonRpcRes, error)
	//取消加入租户申请
	CancelJoinTenantRequest(context.Context, *CancelJoinTenantReq) (*CommonRpcRes, error)
	//更新用户信息
	UpdateUserInfo(context.Context, *CommonRpcRes) (*CommonRpcRes, error)
	//重置用户密码
	ResetPassWord(context.Context, *CommonRpcRes) (*CommonRpcRes, error)
	//删除用户
	RemoveUserByIds(context.Context, *RemoveUserByIdsReq) (*CommonRpcRes, error)
	//获取应用信息
	GetMarketAppInfo(context.Context, *GetMarketAppInfoReq) (*CommonRpcRes, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) UserReReg(context.Context, *UserReRegReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserReReg not implemented")
}
func (UnimplementedUserServer) UpdatePasswd(context.Context, *UpdatePasswdReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePasswd not implemented")
}
func (UnimplementedUserServer) SwitchTenantByCode(context.Context, *SwitchTenantReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchTenantByCode not implemented")
}
func (UnimplementedUserServer) FindUserByAccount(context.Context, *UserByAccountReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserByAccount not implemented")
}
func (UnimplementedUserServer) JoinTeantByCode(context.Context, *TenantCodeReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinTeantByCode not implemented")
}
func (UnimplementedUserServer) FindUserListPage(context.Context, *FindUserListPageReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserListPage not implemented")
}
func (UnimplementedUserServer) FindUserTenantUser(context.Context, *FindserTenantUserReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserTenantUser not implemented")
}
func (UnimplementedUserServer) DeleteUserInfo(context.Context, *DeleteUserInfoReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserInfo not implemented")
}
func (UnimplementedUserServer) AuditUser(context.Context, *AuditUserReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuditUser not implemented")
}
func (UnimplementedUserServer) CancelJoinTenantRequest(context.Context, *CancelJoinTenantReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelJoinTenantRequest not implemented")
}
func (UnimplementedUserServer) UpdateUserInfo(context.Context, *CommonRpcRes) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserInfo not implemented")
}
func (UnimplementedUserServer) ResetPassWord(context.Context, *CommonRpcRes) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassWord not implemented")
}
func (UnimplementedUserServer) RemoveUserByIds(context.Context, *RemoveUserByIdsReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserByIds not implemented")
}
func (UnimplementedUserServer) GetMarketAppInfo(context.Context, *GetMarketAppInfoReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketAppInfo not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_UserReReg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReRegReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserReReg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/userReReg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserReReg(ctx, req.(*UserReRegReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdatePasswd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdatePasswd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/updatePasswd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdatePasswd(ctx, req.(*UpdatePasswdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SwitchTenantByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchTenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SwitchTenantByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/switchTenantByCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SwitchTenantByCode(ctx, req.(*SwitchTenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FindUserByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserByAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindUserByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/findUserByAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindUserByAccount(ctx, req.(*UserByAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_JoinTeantByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).JoinTeantByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/JoinTeantByCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).JoinTeantByCode(ctx, req.(*TenantCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FindUserListPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserListPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindUserListPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/findUserListPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindUserListPage(ctx, req.(*FindUserListPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FindUserTenantUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindserTenantUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindUserTenantUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/findUserTenantUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindUserTenantUser(ctx, req.(*FindserTenantUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DeleteUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DeleteUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/deleteUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DeleteUserInfo(ctx, req.(*DeleteUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AuditUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuditUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AuditUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/auditUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AuditUser(ctx, req.(*AuditUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CancelJoinTenantRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelJoinTenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CancelJoinTenantRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/cancelJoinTenantRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CancelJoinTenantRequest(ctx, req.(*CancelJoinTenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRpcRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/updateUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateUserInfo(ctx, req.(*CommonRpcRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ResetPassWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRpcRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ResetPassWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/resetPassWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ResetPassWord(ctx, req.(*CommonRpcRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_RemoveUserByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).RemoveUserByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/removeUserByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).RemoveUserByIds(ctx, req.(*RemoveUserByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetMarketAppInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketAppInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetMarketAppInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.user/getMarketAppInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetMarketAppInfo(ctx, req.(*GetMarketAppInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.user",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "userReReg",
			Handler:    _User_UserReReg_Handler,
		},
		{
			MethodName: "updatePasswd",
			Handler:    _User_UpdatePasswd_Handler,
		},
		{
			MethodName: "switchTenantByCode",
			Handler:    _User_SwitchTenantByCode_Handler,
		},
		{
			MethodName: "findUserByAccount",
			Handler:    _User_FindUserByAccount_Handler,
		},
		{
			MethodName: "JoinTeantByCode",
			Handler:    _User_JoinTeantByCode_Handler,
		},
		{
			MethodName: "findUserListPage",
			Handler:    _User_FindUserListPage_Handler,
		},
		{
			MethodName: "findUserTenantUser",
			Handler:    _User_FindUserTenantUser_Handler,
		},
		{
			MethodName: "deleteUserInfo",
			Handler:    _User_DeleteUserInfo_Handler,
		},
		{
			MethodName: "auditUser",
			Handler:    _User_AuditUser_Handler,
		},
		{
			MethodName: "cancelJoinTenantRequest",
			Handler:    _User_CancelJoinTenantRequest_Handler,
		},
		{
			MethodName: "updateUserInfo",
			Handler:    _User_UpdateUserInfo_Handler,
		},
		{
			MethodName: "resetPassWord",
			Handler:    _User_ResetPassWord_Handler,
		},
		{
			MethodName: "removeUserByIds",
			Handler:    _User_RemoveUserByIds_Handler,
		},
		{
			MethodName: "getMarketAppInfo",
			Handler:    _User_GetMarketAppInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "source/rpc/asset-user/user.proto",
}
