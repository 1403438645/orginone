// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: source/rpc/asset-market/market.proto

package market

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MarketClient is the client API for Market service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketClient interface {
	//获取单位应用
	FintTenantPurchase(ctx context.Context, in *TenantPurchaseReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//获取集团应用
	FintGroupPurchase(ctx context.Context, in *GroupPurchaseReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//获取应用市场应用分页
	FindMarketApp(ctx context.Context, in *MarketAppReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//提交应用市场应用注册
	SubmitMarketApp(ctx context.Context, in *CommonRpcReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//获取重新发布应用列表
	GetRedeployAppList(ctx context.Context, in *GetRedeployReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//获取应用详情
	GetMarketAppInfo(ctx context.Context, in *PrimaryKeyReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//集团租户应用购买列表
	GetGroupDistributeAppTenantList(ctx context.Context, in *GroupPurchaseAppReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//获取集团分发配置
	GetGroupDistributeConfigList(ctx context.Context, in *GroupAppByIdReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//单位应用退订
	UnitAppUnsubscribe(ctx context.Context, in *UnitAppUnsubscribeReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//集团应用退订
	GroupAppUnsubscribe(ctx context.Context, in *GroupAppUnsubscribeReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//获取应用已购租户
	GetAppDisTenantList(ctx context.Context, in *AppLinkReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//获取应用已购集团
	GetAppDisGroupList(ctx context.Context, in *AppLinkReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//获取通知列表
	FindMarkAppNoticeList(ctx context.Context, in *FindMarkAppNoticeListReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//根据ID列表移除应用通知
	RemoveMarkAppNoticeList(ctx context.Context, in *MarkAppNoticeIdsReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//根据ID列表获取应用通知
	FindMarkAppNoticeByIds(ctx context.Context, in *MarkAppNoticeIdsReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//单位获取应用
	UnitAppPurchas(ctx context.Context, in *UnitAppPurchasReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//集团获取应用
	GroupAppPurchas(ctx context.Context, in *GroupAppPurchasReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//获取应用对当前租户的分发情况
	GetAppPurchasConfig(ctx context.Context, in *AppPurchasConfigReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//应用上下架
	MarketAppOnOrOffSale(ctx context.Context, in *AppOnOrOffSaleReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//应用删除
	MarketAppDelete(ctx context.Context, in *DeleteAppReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//应用部署
	MarketAppDeploy(ctx context.Context, in *AppDeployReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//应用取消部署
	MarketAppCancelApply(ctx context.Context, in *AppCancelApplyReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//应用发布
	MarketAppPublish(ctx context.Context, in *CommonRpcReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//获取应用组件
	GetAppComponmentList(ctx context.Context, in *AppLinkReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//应用权限分配
	AppRoleDistribe(ctx context.Context, in *AppRoleDistribeRpcReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//获取应用权限分配数据
	GetAppRoleDistribe(ctx context.Context, in *GetAppRoleDistribeReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//获取用户使用的应用Ids
	GetUserAppIds(ctx context.Context, in *GetUserAppIdsReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//获取应用组件
	GetAppComponments(ctx context.Context, in *GetComponmentReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//获取用户应用组件
	GetUserTemplates(ctx context.Context, in *GetUserTemplateReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//获取用户应用组件ID
	GetUserTemplateId(ctx context.Context, in *GetUserTemplateIdReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//新增或修改通知
	UpdateMarketAppNotice(ctx context.Context, in *UpdateMarketAppNoticeReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//更新应用通知状态
	UpdateMarkAppNoticesStatus(ctx context.Context, in *UpdateMarkAppNoticesStatusReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//查询Portal模板
	GetMarketappcomponenttemplateList(ctx context.Context, in *MarketappcomponenttemplateListReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//集团取消分发
	MarketAppUnitCancelDistribute(ctx context.Context, in *MarketAppUnitCancelDistributeReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//获取常用应用菜单
	GetUsedAppMenu(ctx context.Context, in *GetUsedAppMenuReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//根据应用token获取应用角色信息
	ApiRoleList(ctx context.Context, in *ApiRoleLitReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//删除
	RemoveByRelation(ctx context.Context, in *RemoveByRelationReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//常用应用排序
	SortUsedApp(ctx context.Context, in *SortUsedAppReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//新增或修改
	SubmitMarketUsedApp(ctx context.Context, in *SubmitMarketUsedAppReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//获取应用审核列表分页
	FindMarketAppCheckList(ctx context.Context, in *FindMarketAppCheckListReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//通过或拒绝应用
	CheckRedeploy(ctx context.Context, in *CheckRedeployReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//通过或拒绝应用
	AppCheck(ctx context.Context, in *AppCheckReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
	//查询app角色是否可以删除(发布时)
	CheckRoleCanDelete(ctx context.Context, in *CheckRoleReq, opts ...grpc.CallOption) (*CommonRpcRes, error)
}

type marketClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketClient(cc grpc.ClientConnInterface) MarketClient {
	return &marketClient{cc}
}

func (c *marketClient) FintTenantPurchase(ctx context.Context, in *TenantPurchaseReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/market.market/fintTenantPurchase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) FintGroupPurchase(ctx context.Context, in *GroupPurchaseReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/market.market/fintGroupPurchase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) FindMarketApp(ctx context.Context, in *MarketAppReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/market.market/findMarketApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) SubmitMarketApp(ctx context.Context, in *CommonRpcReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/market.market/submitMarketApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) GetRedeployAppList(ctx context.Context, in *GetRedeployReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/market.market/getRedeployAppList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) GetMarketAppInfo(ctx context.Context, in *PrimaryKeyReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/market.market/getMarketAppInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) GetGroupDistributeAppTenantList(ctx context.Context, in *GroupPurchaseAppReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/market.market/getGroupDistributeAppTenantList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) GetGroupDistributeConfigList(ctx context.Context, in *GroupAppByIdReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/market.market/getGroupDistributeConfigList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) UnitAppUnsubscribe(ctx context.Context, in *UnitAppUnsubscribeReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/market.market/unitAppUnsubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) GroupAppUnsubscribe(ctx context.Context, in *GroupAppUnsubscribeReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/market.market/groupAppUnsubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) GetAppDisTenantList(ctx context.Context, in *AppLinkReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/market.market/getAppDisTenantList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) GetAppDisGroupList(ctx context.Context, in *AppLinkReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/market.market/getAppDisGroupList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) FindMarkAppNoticeList(ctx context.Context, in *FindMarkAppNoticeListReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/market.market/findMarkAppNoticeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) RemoveMarkAppNoticeList(ctx context.Context, in *MarkAppNoticeIdsReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/market.market/removeMarkAppNoticeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) FindMarkAppNoticeByIds(ctx context.Context, in *MarkAppNoticeIdsReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/market.market/findMarkAppNoticeByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) UnitAppPurchas(ctx context.Context, in *UnitAppPurchasReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/market.market/unitAppPurchas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) GroupAppPurchas(ctx context.Context, in *GroupAppPurchasReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/market.market/groupAppPurchas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) GetAppPurchasConfig(ctx context.Context, in *AppPurchasConfigReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/market.market/getAppPurchasConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) MarketAppOnOrOffSale(ctx context.Context, in *AppOnOrOffSaleReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/market.market/marketAppOnOrOffSale", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) MarketAppDelete(ctx context.Context, in *DeleteAppReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/market.market/marketAppDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) MarketAppDeploy(ctx context.Context, in *AppDeployReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/market.market/marketAppDeploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) MarketAppCancelApply(ctx context.Context, in *AppCancelApplyReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/market.market/marketAppCancelApply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) MarketAppPublish(ctx context.Context, in *CommonRpcReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/market.market/marketAppPublish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) GetAppComponmentList(ctx context.Context, in *AppLinkReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/market.market/getAppComponmentList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) AppRoleDistribe(ctx context.Context, in *AppRoleDistribeRpcReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/market.market/appRoleDistribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) GetAppRoleDistribe(ctx context.Context, in *GetAppRoleDistribeReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/market.market/getAppRoleDistribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) GetUserAppIds(ctx context.Context, in *GetUserAppIdsReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/market.market/GetUserAppIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) GetAppComponments(ctx context.Context, in *GetComponmentReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/market.market/GetAppComponments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) GetUserTemplates(ctx context.Context, in *GetUserTemplateReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/market.market/GetUserTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) GetUserTemplateId(ctx context.Context, in *GetUserTemplateIdReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/market.market/GetUserTemplateId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) UpdateMarketAppNotice(ctx context.Context, in *UpdateMarketAppNoticeReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/market.market/updateMarketAppNotice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) UpdateMarkAppNoticesStatus(ctx context.Context, in *UpdateMarkAppNoticesStatusReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/market.market/updateMarkAppNoticesStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) GetMarketappcomponenttemplateList(ctx context.Context, in *MarketappcomponenttemplateListReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/market.market/getMarketappcomponenttemplateList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) MarketAppUnitCancelDistribute(ctx context.Context, in *MarketAppUnitCancelDistributeReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/market.market/marketAppUnitCancelDistribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) GetUsedAppMenu(ctx context.Context, in *GetUsedAppMenuReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/market.market/getUsedAppMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) ApiRoleList(ctx context.Context, in *ApiRoleLitReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/market.market/apiRoleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) RemoveByRelation(ctx context.Context, in *RemoveByRelationReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/market.market/removeByRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) SortUsedApp(ctx context.Context, in *SortUsedAppReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/market.market/sortUsedApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) SubmitMarketUsedApp(ctx context.Context, in *SubmitMarketUsedAppReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/market.market/submitMarketUsedApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) FindMarketAppCheckList(ctx context.Context, in *FindMarketAppCheckListReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/market.market/findMarketAppCheckList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) CheckRedeploy(ctx context.Context, in *CheckRedeployReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/market.market/checkRedeploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) AppCheck(ctx context.Context, in *AppCheckReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/market.market/appCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) CheckRoleCanDelete(ctx context.Context, in *CheckRoleReq, opts ...grpc.CallOption) (*CommonRpcRes, error) {
	out := new(CommonRpcRes)
	err := c.cc.Invoke(ctx, "/market.market/checkRoleCanDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketServer is the server API for Market service.
// All implementations must embed UnimplementedMarketServer
// for forward compatibility
type MarketServer interface {
	//获取单位应用
	FintTenantPurchase(context.Context, *TenantPurchaseReq) (*CommonRpcRes, error)
	//获取集团应用
	FintGroupPurchase(context.Context, *GroupPurchaseReq) (*CommonRpcRes, error)
	//获取应用市场应用分页
	FindMarketApp(context.Context, *MarketAppReq) (*CommonRpcRes, error)
	//提交应用市场应用注册
	SubmitMarketApp(context.Context, *CommonRpcReq) (*CommonRpcRes, error)
	//获取重新发布应用列表
	GetRedeployAppList(context.Context, *GetRedeployReq) (*CommonRpcRes, error)
	//获取应用详情
	GetMarketAppInfo(context.Context, *PrimaryKeyReq) (*CommonRpcRes, error)
	//集团租户应用购买列表
	GetGroupDistributeAppTenantList(context.Context, *GroupPurchaseAppReq) (*CommonRpcRes, error)
	//获取集团分发配置
	GetGroupDistributeConfigList(context.Context, *GroupAppByIdReq) (*CommonRpcRes, error)
	//单位应用退订
	UnitAppUnsubscribe(context.Context, *UnitAppUnsubscribeReq) (*CommonRpcRes, error)
	//集团应用退订
	GroupAppUnsubscribe(context.Context, *GroupAppUnsubscribeReq) (*CommonRpcRes, error)
	//获取应用已购租户
	GetAppDisTenantList(context.Context, *AppLinkReq) (*CommonRpcRes, error)
	//获取应用已购集团
	GetAppDisGroupList(context.Context, *AppLinkReq) (*CommonRpcRes, error)
	//获取通知列表
	FindMarkAppNoticeList(context.Context, *FindMarkAppNoticeListReq) (*CommonRpcRes, error)
	//根据ID列表移除应用通知
	RemoveMarkAppNoticeList(context.Context, *MarkAppNoticeIdsReq) (*CommonRpcRes, error)
	//根据ID列表获取应用通知
	FindMarkAppNoticeByIds(context.Context, *MarkAppNoticeIdsReq) (*CommonRpcRes, error)
	//单位获取应用
	UnitAppPurchas(context.Context, *UnitAppPurchasReq) (*CommonRpcRes, error)
	//集团获取应用
	GroupAppPurchas(context.Context, *GroupAppPurchasReq) (*CommonRpcRes, error)
	//获取应用对当前租户的分发情况
	GetAppPurchasConfig(context.Context, *AppPurchasConfigReq) (*CommonRpcRes, error)
	//应用上下架
	MarketAppOnOrOffSale(context.Context, *AppOnOrOffSaleReq) (*CommonRpcRes, error)
	//应用删除
	MarketAppDelete(context.Context, *DeleteAppReq) (*CommonRpcRes, error)
	//应用部署
	MarketAppDeploy(context.Context, *AppDeployReq) (*CommonRpcRes, error)
	//应用取消部署
	MarketAppCancelApply(context.Context, *AppCancelApplyReq) (*CommonRpcRes, error)
	//应用发布
	MarketAppPublish(context.Context, *CommonRpcReq) (*CommonRpcRes, error)
	//获取应用组件
	GetAppComponmentList(context.Context, *AppLinkReq) (*CommonRpcRes, error)
	//应用权限分配
	AppRoleDistribe(context.Context, *AppRoleDistribeRpcReq) (*CommonRpcRes, error)
	//获取应用权限分配数据
	GetAppRoleDistribe(context.Context, *GetAppRoleDistribeReq) (*CommonRpcRes, error)
	//获取用户使用的应用Ids
	GetUserAppIds(context.Context, *GetUserAppIdsReq) (*CommonRpcRes, error)
	//获取应用组件
	GetAppComponments(context.Context, *GetComponmentReq) (*CommonRpcRes, error)
	//获取用户应用组件
	GetUserTemplates(context.Context, *GetUserTemplateReq) (*CommonRpcRes, error)
	//获取用户应用组件ID
	GetUserTemplateId(context.Context, *GetUserTemplateIdReq) (*CommonRpcRes, error)
	//新增或修改通知
	UpdateMarketAppNotice(context.Context, *UpdateMarketAppNoticeReq) (*CommonRpcRes, error)
	//更新应用通知状态
	UpdateMarkAppNoticesStatus(context.Context, *UpdateMarkAppNoticesStatusReq) (*CommonRpcRes, error)
	//查询Portal模板
	GetMarketappcomponenttemplateList(context.Context, *MarketappcomponenttemplateListReq) (*CommonRpcRes, error)
	//集团取消分发
	MarketAppUnitCancelDistribute(context.Context, *MarketAppUnitCancelDistributeReq) (*CommonRpcRes, error)
	//获取常用应用菜单
	GetUsedAppMenu(context.Context, *GetUsedAppMenuReq) (*CommonRpcRes, error)
	//根据应用token获取应用角色信息
	ApiRoleList(context.Context, *ApiRoleLitReq) (*CommonRpcRes, error)
	//删除
	RemoveByRelation(context.Context, *RemoveByRelationReq) (*CommonRpcRes, error)
	//常用应用排序
	SortUsedApp(context.Context, *SortUsedAppReq) (*CommonRpcRes, error)
	//新增或修改
	SubmitMarketUsedApp(context.Context, *SubmitMarketUsedAppReq) (*CommonRpcRes, error)
	//获取应用审核列表分页
	FindMarketAppCheckList(context.Context, *FindMarketAppCheckListReq) (*CommonRpcRes, error)
	//通过或拒绝应用
	CheckRedeploy(context.Context, *CheckRedeployReq) (*CommonRpcRes, error)
	//通过或拒绝应用
	AppCheck(context.Context, *AppCheckReq) (*CommonRpcRes, error)
	//查询app角色是否可以删除(发布时)
	CheckRoleCanDelete(context.Context, *CheckRoleReq) (*CommonRpcRes, error)
	mustEmbedUnimplementedMarketServer()
}

// UnimplementedMarketServer must be embedded to have forward compatible implementations.
type UnimplementedMarketServer struct {
}

func (UnimplementedMarketServer) FintTenantPurchase(context.Context, *TenantPurchaseReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FintTenantPurchase not implemented")
}
func (UnimplementedMarketServer) FintGroupPurchase(context.Context, *GroupPurchaseReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FintGroupPurchase not implemented")
}
func (UnimplementedMarketServer) FindMarketApp(context.Context, *MarketAppReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMarketApp not implemented")
}
func (UnimplementedMarketServer) SubmitMarketApp(context.Context, *CommonRpcReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitMarketApp not implemented")
}
func (UnimplementedMarketServer) GetRedeployAppList(context.Context, *GetRedeployReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRedeployAppList not implemented")
}
func (UnimplementedMarketServer) GetMarketAppInfo(context.Context, *PrimaryKeyReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketAppInfo not implemented")
}
func (UnimplementedMarketServer) GetGroupDistributeAppTenantList(context.Context, *GroupPurchaseAppReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupDistributeAppTenantList not implemented")
}
func (UnimplementedMarketServer) GetGroupDistributeConfigList(context.Context, *GroupAppByIdReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupDistributeConfigList not implemented")
}
func (UnimplementedMarketServer) UnitAppUnsubscribe(context.Context, *UnitAppUnsubscribeReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnitAppUnsubscribe not implemented")
}
func (UnimplementedMarketServer) GroupAppUnsubscribe(context.Context, *GroupAppUnsubscribeReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupAppUnsubscribe not implemented")
}
func (UnimplementedMarketServer) GetAppDisTenantList(context.Context, *AppLinkReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppDisTenantList not implemented")
}
func (UnimplementedMarketServer) GetAppDisGroupList(context.Context, *AppLinkReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppDisGroupList not implemented")
}
func (UnimplementedMarketServer) FindMarkAppNoticeList(context.Context, *FindMarkAppNoticeListReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMarkAppNoticeList not implemented")
}
func (UnimplementedMarketServer) RemoveMarkAppNoticeList(context.Context, *MarkAppNoticeIdsReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMarkAppNoticeList not implemented")
}
func (UnimplementedMarketServer) FindMarkAppNoticeByIds(context.Context, *MarkAppNoticeIdsReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMarkAppNoticeByIds not implemented")
}
func (UnimplementedMarketServer) UnitAppPurchas(context.Context, *UnitAppPurchasReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnitAppPurchas not implemented")
}
func (UnimplementedMarketServer) GroupAppPurchas(context.Context, *GroupAppPurchasReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupAppPurchas not implemented")
}
func (UnimplementedMarketServer) GetAppPurchasConfig(context.Context, *AppPurchasConfigReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppPurchasConfig not implemented")
}
func (UnimplementedMarketServer) MarketAppOnOrOffSale(context.Context, *AppOnOrOffSaleReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketAppOnOrOffSale not implemented")
}
func (UnimplementedMarketServer) MarketAppDelete(context.Context, *DeleteAppReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketAppDelete not implemented")
}
func (UnimplementedMarketServer) MarketAppDeploy(context.Context, *AppDeployReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketAppDeploy not implemented")
}
func (UnimplementedMarketServer) MarketAppCancelApply(context.Context, *AppCancelApplyReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketAppCancelApply not implemented")
}
func (UnimplementedMarketServer) MarketAppPublish(context.Context, *CommonRpcReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketAppPublish not implemented")
}
func (UnimplementedMarketServer) GetAppComponmentList(context.Context, *AppLinkReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppComponmentList not implemented")
}
func (UnimplementedMarketServer) AppRoleDistribe(context.Context, *AppRoleDistribeRpcReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppRoleDistribe not implemented")
}
func (UnimplementedMarketServer) GetAppRoleDistribe(context.Context, *GetAppRoleDistribeReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppRoleDistribe not implemented")
}
func (UnimplementedMarketServer) GetUserAppIds(context.Context, *GetUserAppIdsReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAppIds not implemented")
}
func (UnimplementedMarketServer) GetAppComponments(context.Context, *GetComponmentReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppComponments not implemented")
}
func (UnimplementedMarketServer) GetUserTemplates(context.Context, *GetUserTemplateReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserTemplates not implemented")
}
func (UnimplementedMarketServer) GetUserTemplateId(context.Context, *GetUserTemplateIdReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserTemplateId not implemented")
}
func (UnimplementedMarketServer) UpdateMarketAppNotice(context.Context, *UpdateMarketAppNoticeReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMarketAppNotice not implemented")
}
func (UnimplementedMarketServer) UpdateMarkAppNoticesStatus(context.Context, *UpdateMarkAppNoticesStatusReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMarkAppNoticesStatus not implemented")
}
func (UnimplementedMarketServer) GetMarketappcomponenttemplateList(context.Context, *MarketappcomponenttemplateListReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketappcomponenttemplateList not implemented")
}
func (UnimplementedMarketServer) MarketAppUnitCancelDistribute(context.Context, *MarketAppUnitCancelDistributeReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketAppUnitCancelDistribute not implemented")
}
func (UnimplementedMarketServer) GetUsedAppMenu(context.Context, *GetUsedAppMenuReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsedAppMenu not implemented")
}
func (UnimplementedMarketServer) ApiRoleList(context.Context, *ApiRoleLitReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiRoleList not implemented")
}
func (UnimplementedMarketServer) RemoveByRelation(context.Context, *RemoveByRelationReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveByRelation not implemented")
}
func (UnimplementedMarketServer) SortUsedApp(context.Context, *SortUsedAppReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SortUsedApp not implemented")
}
func (UnimplementedMarketServer) SubmitMarketUsedApp(context.Context, *SubmitMarketUsedAppReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitMarketUsedApp not implemented")
}
func (UnimplementedMarketServer) FindMarketAppCheckList(context.Context, *FindMarketAppCheckListReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMarketAppCheckList not implemented")
}
func (UnimplementedMarketServer) CheckRedeploy(context.Context, *CheckRedeployReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRedeploy not implemented")
}
func (UnimplementedMarketServer) AppCheck(context.Context, *AppCheckReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppCheck not implemented")
}
func (UnimplementedMarketServer) CheckRoleCanDelete(context.Context, *CheckRoleReq) (*CommonRpcRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRoleCanDelete not implemented")
}
func (UnimplementedMarketServer) mustEmbedUnimplementedMarketServer() {}

// UnsafeMarketServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketServer will
// result in compilation errors.
type UnsafeMarketServer interface {
	mustEmbedUnimplementedMarketServer()
}

func RegisterMarketServer(s grpc.ServiceRegistrar, srv MarketServer) {
	s.RegisterService(&Market_ServiceDesc, srv)
}

func _Market_FintTenantPurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantPurchaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).FintTenantPurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.market/fintTenantPurchase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).FintTenantPurchase(ctx, req.(*TenantPurchaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_FintGroupPurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupPurchaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).FintGroupPurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.market/fintGroupPurchase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).FintGroupPurchase(ctx, req.(*GroupPurchaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_FindMarketApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).FindMarketApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.market/findMarketApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).FindMarketApp(ctx, req.(*MarketAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_SubmitMarketApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRpcReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).SubmitMarketApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.market/submitMarketApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).SubmitMarketApp(ctx, req.(*CommonRpcReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_GetRedeployAppList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRedeployReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).GetRedeployAppList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.market/getRedeployAppList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).GetRedeployAppList(ctx, req.(*GetRedeployReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_GetMarketAppInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrimaryKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).GetMarketAppInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.market/getMarketAppInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).GetMarketAppInfo(ctx, req.(*PrimaryKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_GetGroupDistributeAppTenantList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupPurchaseAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).GetGroupDistributeAppTenantList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.market/getGroupDistributeAppTenantList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).GetGroupDistributeAppTenantList(ctx, req.(*GroupPurchaseAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_GetGroupDistributeConfigList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupAppByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).GetGroupDistributeConfigList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.market/getGroupDistributeConfigList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).GetGroupDistributeConfigList(ctx, req.(*GroupAppByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_UnitAppUnsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnitAppUnsubscribeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).UnitAppUnsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.market/unitAppUnsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).UnitAppUnsubscribe(ctx, req.(*UnitAppUnsubscribeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_GroupAppUnsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupAppUnsubscribeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).GroupAppUnsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.market/groupAppUnsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).GroupAppUnsubscribe(ctx, req.(*GroupAppUnsubscribeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_GetAppDisTenantList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).GetAppDisTenantList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.market/getAppDisTenantList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).GetAppDisTenantList(ctx, req.(*AppLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_GetAppDisGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).GetAppDisGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.market/getAppDisGroupList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).GetAppDisGroupList(ctx, req.(*AppLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_FindMarkAppNoticeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindMarkAppNoticeListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).FindMarkAppNoticeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.market/findMarkAppNoticeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).FindMarkAppNoticeList(ctx, req.(*FindMarkAppNoticeListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_RemoveMarkAppNoticeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkAppNoticeIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).RemoveMarkAppNoticeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.market/removeMarkAppNoticeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).RemoveMarkAppNoticeList(ctx, req.(*MarkAppNoticeIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_FindMarkAppNoticeByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkAppNoticeIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).FindMarkAppNoticeByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.market/findMarkAppNoticeByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).FindMarkAppNoticeByIds(ctx, req.(*MarkAppNoticeIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_UnitAppPurchas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnitAppPurchasReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).UnitAppPurchas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.market/unitAppPurchas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).UnitAppPurchas(ctx, req.(*UnitAppPurchasReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_GroupAppPurchas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupAppPurchasReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).GroupAppPurchas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.market/groupAppPurchas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).GroupAppPurchas(ctx, req.(*GroupAppPurchasReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_GetAppPurchasConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppPurchasConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).GetAppPurchasConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.market/getAppPurchasConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).GetAppPurchasConfig(ctx, req.(*AppPurchasConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_MarketAppOnOrOffSale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppOnOrOffSaleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).MarketAppOnOrOffSale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.market/marketAppOnOrOffSale",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).MarketAppOnOrOffSale(ctx, req.(*AppOnOrOffSaleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_MarketAppDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).MarketAppDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.market/marketAppDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).MarketAppDelete(ctx, req.(*DeleteAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_MarketAppDeploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppDeployReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).MarketAppDeploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.market/marketAppDeploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).MarketAppDeploy(ctx, req.(*AppDeployReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_MarketAppCancelApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppCancelApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).MarketAppCancelApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.market/marketAppCancelApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).MarketAppCancelApply(ctx, req.(*AppCancelApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_MarketAppPublish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRpcReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).MarketAppPublish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.market/marketAppPublish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).MarketAppPublish(ctx, req.(*CommonRpcReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_GetAppComponmentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).GetAppComponmentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.market/getAppComponmentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).GetAppComponmentList(ctx, req.(*AppLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_AppRoleDistribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppRoleDistribeRpcReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).AppRoleDistribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.market/appRoleDistribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).AppRoleDistribe(ctx, req.(*AppRoleDistribeRpcReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_GetAppRoleDistribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppRoleDistribeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).GetAppRoleDistribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.market/getAppRoleDistribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).GetAppRoleDistribe(ctx, req.(*GetAppRoleDistribeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_GetUserAppIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAppIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).GetUserAppIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.market/GetUserAppIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).GetUserAppIds(ctx, req.(*GetUserAppIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_GetAppComponments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetComponmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).GetAppComponments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.market/GetAppComponments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).GetAppComponments(ctx, req.(*GetComponmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_GetUserTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).GetUserTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.market/GetUserTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).GetUserTemplates(ctx, req.(*GetUserTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_GetUserTemplateId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserTemplateIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).GetUserTemplateId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.market/GetUserTemplateId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).GetUserTemplateId(ctx, req.(*GetUserTemplateIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_UpdateMarketAppNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMarketAppNoticeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).UpdateMarketAppNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.market/updateMarketAppNotice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).UpdateMarketAppNotice(ctx, req.(*UpdateMarketAppNoticeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_UpdateMarkAppNoticesStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMarkAppNoticesStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).UpdateMarkAppNoticesStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.market/updateMarkAppNoticesStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).UpdateMarkAppNoticesStatus(ctx, req.(*UpdateMarkAppNoticesStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_GetMarketappcomponenttemplateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketappcomponenttemplateListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).GetMarketappcomponenttemplateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.market/getMarketappcomponenttemplateList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).GetMarketappcomponenttemplateList(ctx, req.(*MarketappcomponenttemplateListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_MarketAppUnitCancelDistribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketAppUnitCancelDistributeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).MarketAppUnitCancelDistribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.market/marketAppUnitCancelDistribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).MarketAppUnitCancelDistribute(ctx, req.(*MarketAppUnitCancelDistributeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_GetUsedAppMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsedAppMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).GetUsedAppMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.market/getUsedAppMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).GetUsedAppMenu(ctx, req.(*GetUsedAppMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_ApiRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiRoleLitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).ApiRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.market/apiRoleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).ApiRoleList(ctx, req.(*ApiRoleLitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_RemoveByRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveByRelationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).RemoveByRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.market/removeByRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).RemoveByRelation(ctx, req.(*RemoveByRelationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_SortUsedApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SortUsedAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).SortUsedApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.market/sortUsedApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).SortUsedApp(ctx, req.(*SortUsedAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_SubmitMarketUsedApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitMarketUsedAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).SubmitMarketUsedApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.market/submitMarketUsedApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).SubmitMarketUsedApp(ctx, req.(*SubmitMarketUsedAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_FindMarketAppCheckList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindMarketAppCheckListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).FindMarketAppCheckList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.market/findMarketAppCheckList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).FindMarketAppCheckList(ctx, req.(*FindMarketAppCheckListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_CheckRedeploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRedeployReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).CheckRedeploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.market/checkRedeploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).CheckRedeploy(ctx, req.(*CheckRedeployReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_AppCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).AppCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.market/appCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).AppCheck(ctx, req.(*AppCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_CheckRoleCanDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).CheckRoleCanDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.market/checkRoleCanDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).CheckRoleCanDelete(ctx, req.(*CheckRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Market_ServiceDesc is the grpc.ServiceDesc for Market service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Market_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "market.market",
	HandlerType: (*MarketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "fintTenantPurchase",
			Handler:    _Market_FintTenantPurchase_Handler,
		},
		{
			MethodName: "fintGroupPurchase",
			Handler:    _Market_FintGroupPurchase_Handler,
		},
		{
			MethodName: "findMarketApp",
			Handler:    _Market_FindMarketApp_Handler,
		},
		{
			MethodName: "submitMarketApp",
			Handler:    _Market_SubmitMarketApp_Handler,
		},
		{
			MethodName: "getRedeployAppList",
			Handler:    _Market_GetRedeployAppList_Handler,
		},
		{
			MethodName: "getMarketAppInfo",
			Handler:    _Market_GetMarketAppInfo_Handler,
		},
		{
			MethodName: "getGroupDistributeAppTenantList",
			Handler:    _Market_GetGroupDistributeAppTenantList_Handler,
		},
		{
			MethodName: "getGroupDistributeConfigList",
			Handler:    _Market_GetGroupDistributeConfigList_Handler,
		},
		{
			MethodName: "unitAppUnsubscribe",
			Handler:    _Market_UnitAppUnsubscribe_Handler,
		},
		{
			MethodName: "groupAppUnsubscribe",
			Handler:    _Market_GroupAppUnsubscribe_Handler,
		},
		{
			MethodName: "getAppDisTenantList",
			Handler:    _Market_GetAppDisTenantList_Handler,
		},
		{
			MethodName: "getAppDisGroupList",
			Handler:    _Market_GetAppDisGroupList_Handler,
		},
		{
			MethodName: "findMarkAppNoticeList",
			Handler:    _Market_FindMarkAppNoticeList_Handler,
		},
		{
			MethodName: "removeMarkAppNoticeList",
			Handler:    _Market_RemoveMarkAppNoticeList_Handler,
		},
		{
			MethodName: "findMarkAppNoticeByIds",
			Handler:    _Market_FindMarkAppNoticeByIds_Handler,
		},
		{
			MethodName: "unitAppPurchas",
			Handler:    _Market_UnitAppPurchas_Handler,
		},
		{
			MethodName: "groupAppPurchas",
			Handler:    _Market_GroupAppPurchas_Handler,
		},
		{
			MethodName: "getAppPurchasConfig",
			Handler:    _Market_GetAppPurchasConfig_Handler,
		},
		{
			MethodName: "marketAppOnOrOffSale",
			Handler:    _Market_MarketAppOnOrOffSale_Handler,
		},
		{
			MethodName: "marketAppDelete",
			Handler:    _Market_MarketAppDelete_Handler,
		},
		{
			MethodName: "marketAppDeploy",
			Handler:    _Market_MarketAppDeploy_Handler,
		},
		{
			MethodName: "marketAppCancelApply",
			Handler:    _Market_MarketAppCancelApply_Handler,
		},
		{
			MethodName: "marketAppPublish",
			Handler:    _Market_MarketAppPublish_Handler,
		},
		{
			MethodName: "getAppComponmentList",
			Handler:    _Market_GetAppComponmentList_Handler,
		},
		{
			MethodName: "appRoleDistribe",
			Handler:    _Market_AppRoleDistribe_Handler,
		},
		{
			MethodName: "getAppRoleDistribe",
			Handler:    _Market_GetAppRoleDistribe_Handler,
		},
		{
			MethodName: "GetUserAppIds",
			Handler:    _Market_GetUserAppIds_Handler,
		},
		{
			MethodName: "GetAppComponments",
			Handler:    _Market_GetAppComponments_Handler,
		},
		{
			MethodName: "GetUserTemplates",
			Handler:    _Market_GetUserTemplates_Handler,
		},
		{
			MethodName: "GetUserTemplateId",
			Handler:    _Market_GetUserTemplateId_Handler,
		},
		{
			MethodName: "updateMarketAppNotice",
			Handler:    _Market_UpdateMarketAppNotice_Handler,
		},
		{
			MethodName: "updateMarkAppNoticesStatus",
			Handler:    _Market_UpdateMarkAppNoticesStatus_Handler,
		},
		{
			MethodName: "getMarketappcomponenttemplateList",
			Handler:    _Market_GetMarketappcomponenttemplateList_Handler,
		},
		{
			MethodName: "marketAppUnitCancelDistribute",
			Handler:    _Market_MarketAppUnitCancelDistribute_Handler,
		},
		{
			MethodName: "getUsedAppMenu",
			Handler:    _Market_GetUsedAppMenu_Handler,
		},
		{
			MethodName: "apiRoleList",
			Handler:    _Market_ApiRoleList_Handler,
		},
		{
			MethodName: "removeByRelation",
			Handler:    _Market_RemoveByRelation_Handler,
		},
		{
			MethodName: "sortUsedApp",
			Handler:    _Market_SortUsedApp_Handler,
		},
		{
			MethodName: "submitMarketUsedApp",
			Handler:    _Market_SubmitMarketUsedApp_Handler,
		},
		{
			MethodName: "findMarketAppCheckList",
			Handler:    _Market_FindMarketAppCheckList_Handler,
		},
		{
			MethodName: "checkRedeploy",
			Handler:    _Market_CheckRedeploy_Handler,
		},
		{
			MethodName: "appCheck",
			Handler:    _Market_AppCheck_Handler,
		},
		{
			MethodName: "checkRoleCanDelete",
			Handler:    _Market_CheckRoleCanDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "source/rpc/asset-market/market.proto",
}
