// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asSmsMessageFieldNames          = builder.RawFieldNames(&AsSmsMessage{})
	asSmsMessageRows                = strings.Join(asSmsMessageFieldNames, ",")
	asSmsMessageRowsExpectAutoSet   = strings.Join(stringx.Remove(asSmsMessageFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	asSmsMessageRowsWithPlaceHolder = strings.Join(stringx.Remove(asSmsMessageFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsSmsMessageIdPrefix = "cache:asset:asSmsMessage:id:"
)

type (
	asSmsMessageModel interface {
		Insert(ctx context.Context, data *AsSmsMessage) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AsSmsMessage, error)
		Update(ctx context.Context, data *AsSmsMessage) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAsSmsMessageModel struct {
		sqlc.CachedConn
		table string
	}

	AsSmsMessage struct {
		Id         int64          `db:"id"`          // 短信消息主码
		Title      string         `db:"title"`       // 标题
		Content    sql.NullString `db:"content"`     // 内容
		CreateTime time.Time      `db:"create_time"` // 创建时间
		UpdateTime time.Time      `db:"update_time"` // 修改时间
		CreateUser sql.NullInt64  `db:"create_user"` // 创建用户
		UpdateUser sql.NullInt64  `db:"update_user"` // 更新用户
		IsDeleted  int64          `db:"is_deleted"`  // 是否已删除
		Status     int64          `db:"status"`      // 状态
	}
)

func newAsSmsMessageModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsSmsMessageModel {
	return &defaultAsSmsMessageModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_sms_message`",
	}
}

func (m *defaultAsSmsMessageModel) Insert(ctx context.Context, data *AsSmsMessage) (sql.Result, error) {
	assetAsSmsMessageIdKey := fmt.Sprintf("%s%v", cacheAssetAsSmsMessageIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, asSmsMessageRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Title, data.Content, data.CreateUser, data.UpdateUser, data.IsDeleted, data.Status)
	}, assetAsSmsMessageIdKey)
	return ret, err
}

func (m *defaultAsSmsMessageModel) FindOne(ctx context.Context, id int64) (*AsSmsMessage, error) {
	assetAsSmsMessageIdKey := fmt.Sprintf("%s%v", cacheAssetAsSmsMessageIdPrefix, id)
	var resp AsSmsMessage
	err := m.QueryRowCtx(ctx, &resp, assetAsSmsMessageIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asSmsMessageRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsSmsMessageModel) Update(ctx context.Context, data *AsSmsMessage) error {
	assetAsSmsMessageIdKey := fmt.Sprintf("%s%v", cacheAssetAsSmsMessageIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asSmsMessageRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Title, data.Content, data.CreateUser, data.UpdateUser, data.IsDeleted, data.Status, data.Id)
	}, assetAsSmsMessageIdKey)
	return err
}

func (m *defaultAsSmsMessageModel) Delete(ctx context.Context, id int64) error {
	assetAsSmsMessageIdKey := fmt.Sprintf("%s%v", cacheAssetAsSmsMessageIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsSmsMessageIdKey)
	return err
}

func (m *defaultAsSmsMessageModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsSmsMessageIdPrefix, primary)
}

func (m *defaultAsSmsMessageModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asSmsMessageRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsSmsMessageModel) tableName() string {
	return m.table
}
