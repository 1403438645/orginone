// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	actHiTaskinstFieldNames          = builder.RawFieldNames(&ActHiTaskinst{})
	actHiTaskinstRows                = strings.Join(actHiTaskinstFieldNames, ",")
	actHiTaskinstRowsExpectAutoSet   = strings.Join(stringx.Remove(actHiTaskinstFieldNames, "`create_time`", "`update_time`"), ",")
	actHiTaskinstRowsWithPlaceHolder = strings.Join(stringx.Remove(actHiTaskinstFieldNames, "`ID_`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetActHiTaskinstIDPrefix = "cache:asset:actHiTaskinst:iD:"
)

type (
	actHiTaskinstModel interface {
		Insert(ctx context.Context, data *ActHiTaskinst) (sql.Result, error)
		FindOne(ctx context.Context, iD string) (*ActHiTaskinst, error)
		Update(ctx context.Context, data *ActHiTaskinst) error
		Delete(ctx context.Context, iD string) error
	}

	defaultActHiTaskinstModel struct {
		sqlc.CachedConn
		table string
	}

	ActHiTaskinst struct {
		ID                    string         `db:"ID_"`
		REV                   int64          `db:"REV_"`
		PROCDEFID             sql.NullString `db:"PROC_DEF_ID_"`
		TASKDEFID             sql.NullString `db:"TASK_DEF_ID_"`
		TASKDEFKEY            sql.NullString `db:"TASK_DEF_KEY_"`
		PROCINSTID            sql.NullString `db:"PROC_INST_ID_"`
		EXECUTIONID           sql.NullString `db:"EXECUTION_ID_"`
		SCOPEID               sql.NullString `db:"SCOPE_ID_"`
		SUBSCOPEID            sql.NullString `db:"SUB_SCOPE_ID_"`
		SCOPETYPE             sql.NullString `db:"SCOPE_TYPE_"`
		SCOPEDEFINITIONID     sql.NullString `db:"SCOPE_DEFINITION_ID_"`
		NAME                  sql.NullString `db:"NAME_"`
		PARENTTASKID          sql.NullString `db:"PARENT_TASK_ID_"`
		DESCRIPTION           sql.NullString `db:"DESCRIPTION_"`
		OWNER                 sql.NullString `db:"OWNER_"`
		ASSIGNEE              sql.NullString `db:"ASSIGNEE_"`
		STARTTIME             time.Time      `db:"START_TIME_"`
		CLAIMTIME             sql.NullTime   `db:"CLAIM_TIME_"`
		ENDTIME               sql.NullTime   `db:"END_TIME_"`
		DURATION              sql.NullInt64  `db:"DURATION_"`
		DELETEREASON          sql.NullString `db:"DELETE_REASON_"`
		PRIORITY              sql.NullInt64  `db:"PRIORITY_"`
		DUEDATE               sql.NullTime   `db:"DUE_DATE_"`
		FORMKEY               sql.NullString `db:"FORM_KEY_"`
		CATEGORY              sql.NullString `db:"CATEGORY_"`
		TENANTID              string         `db:"TENANT_ID_"`
		LASTUPDATEDTIME       sql.NullTime   `db:"LAST_UPDATED_TIME_"`
		PROPAGATEDSTAGEINSTID sql.NullString `db:"PROPAGATED_STAGE_INST_ID_"`
	}
)

func newActHiTaskinstModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultActHiTaskinstModel {
	return &defaultActHiTaskinstModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`act_hi_taskinst`",
	}
}

func (m *defaultActHiTaskinstModel) Insert(ctx context.Context, data *ActHiTaskinst) (sql.Result, error) {
	assetActHiTaskinstIDKey := fmt.Sprintf("%s%v", cacheAssetActHiTaskinstIDPrefix, data.ID)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, actHiTaskinstRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ID, data.REV, data.PROCDEFID, data.TASKDEFID, data.TASKDEFKEY, data.PROCINSTID, data.EXECUTIONID, data.SCOPEID, data.SUBSCOPEID, data.SCOPETYPE, data.SCOPEDEFINITIONID, data.NAME, data.PARENTTASKID, data.DESCRIPTION, data.OWNER, data.ASSIGNEE, data.STARTTIME, data.CLAIMTIME, data.ENDTIME, data.DURATION, data.DELETEREASON, data.PRIORITY, data.DUEDATE, data.FORMKEY, data.CATEGORY, data.TENANTID, data.LASTUPDATEDTIME, data.PROPAGATEDSTAGEINSTID)
	}, assetActHiTaskinstIDKey)
	return ret, err
}

func (m *defaultActHiTaskinstModel) FindOne(ctx context.Context, iD string) (*ActHiTaskinst, error) {
	assetActHiTaskinstIDKey := fmt.Sprintf("%s%v", cacheAssetActHiTaskinstIDPrefix, iD)
	var resp ActHiTaskinst
	err := m.QueryRowCtx(ctx, &resp, assetActHiTaskinstIDKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actHiTaskinstRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, iD)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActHiTaskinstModel) Update(ctx context.Context, data *ActHiTaskinst) error {
	assetActHiTaskinstIDKey := fmt.Sprintf("%s%v", cacheAssetActHiTaskinstIDPrefix, data.ID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `ID_` = ?", m.table, actHiTaskinstRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.REV, data.PROCDEFID, data.TASKDEFID, data.TASKDEFKEY, data.PROCINSTID, data.EXECUTIONID, data.SCOPEID, data.SUBSCOPEID, data.SCOPETYPE, data.SCOPEDEFINITIONID, data.NAME, data.PARENTTASKID, data.DESCRIPTION, data.OWNER, data.ASSIGNEE, data.STARTTIME, data.CLAIMTIME, data.ENDTIME, data.DURATION, data.DELETEREASON, data.PRIORITY, data.DUEDATE, data.FORMKEY, data.CATEGORY, data.TENANTID, data.LASTUPDATEDTIME, data.PROPAGATEDSTAGEINSTID, data.ID)
	}, assetActHiTaskinstIDKey)
	return err
}

func (m *defaultActHiTaskinstModel) Delete(ctx context.Context, iD string) error {
	assetActHiTaskinstIDKey := fmt.Sprintf("%s%v", cacheAssetActHiTaskinstIDPrefix, iD)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `ID_` = ?", m.table)
		return conn.ExecCtx(ctx, query, iD)
	}, assetActHiTaskinstIDKey)
	return err
}

func (m *defaultActHiTaskinstModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetActHiTaskinstIDPrefix, primary)
}

func (m *defaultActHiTaskinstModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actHiTaskinstRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultActHiTaskinstModel) tableName() string {
	return m.table
}
