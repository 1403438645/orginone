// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	actHiCommentFieldNames          = builder.RawFieldNames(&ActHiComment{})
	actHiCommentRows                = strings.Join(actHiCommentFieldNames, ",")
	actHiCommentRowsExpectAutoSet   = strings.Join(stringx.Remove(actHiCommentFieldNames, "`create_time`", "`update_time`"), ",")
	actHiCommentRowsWithPlaceHolder = strings.Join(stringx.Remove(actHiCommentFieldNames, "`ID_`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetActHiCommentIDPrefix = "cache:asset:actHiComment:iD:"
)

type (
	actHiCommentModel interface {
		Insert(ctx context.Context, data *ActHiComment) (sql.Result, error)
		FindOne(ctx context.Context, iD string) (*ActHiComment, error)
		Update(ctx context.Context, data *ActHiComment) error
		Delete(ctx context.Context, iD string) error
	}

	defaultActHiCommentModel struct {
		sqlc.CachedConn
		table string
	}

	ActHiComment struct {
		ID         string         `db:"ID_"`
		TYPE       sql.NullString `db:"TYPE_"`
		TIME       time.Time      `db:"TIME_"`
		USERID     sql.NullString `db:"USER_ID_"`
		TASKID     sql.NullString `db:"TASK_ID_"`
		PROCINSTID sql.NullString `db:"PROC_INST_ID_"`
		ACTION     sql.NullString `db:"ACTION_"`
		MESSAGE    sql.NullString `db:"MESSAGE_"`
		FULLMSG    sql.NullString `db:"FULL_MSG_"`
	}
)

func newActHiCommentModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultActHiCommentModel {
	return &defaultActHiCommentModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`act_hi_comment`",
	}
}

func (m *defaultActHiCommentModel) Insert(ctx context.Context, data *ActHiComment) (sql.Result, error) {
	assetActHiCommentIDKey := fmt.Sprintf("%s%v", cacheAssetActHiCommentIDPrefix, data.ID)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, actHiCommentRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ID, data.TYPE, data.TIME, data.USERID, data.TASKID, data.PROCINSTID, data.ACTION, data.MESSAGE, data.FULLMSG)
	}, assetActHiCommentIDKey)
	return ret, err
}

func (m *defaultActHiCommentModel) FindOne(ctx context.Context, iD string) (*ActHiComment, error) {
	assetActHiCommentIDKey := fmt.Sprintf("%s%v", cacheAssetActHiCommentIDPrefix, iD)
	var resp ActHiComment
	err := m.QueryRowCtx(ctx, &resp, assetActHiCommentIDKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actHiCommentRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, iD)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActHiCommentModel) Update(ctx context.Context, data *ActHiComment) error {
	assetActHiCommentIDKey := fmt.Sprintf("%s%v", cacheAssetActHiCommentIDPrefix, data.ID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `ID_` = ?", m.table, actHiCommentRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.TYPE, data.TIME, data.USERID, data.TASKID, data.PROCINSTID, data.ACTION, data.MESSAGE, data.FULLMSG, data.ID)
	}, assetActHiCommentIDKey)
	return err
}

func (m *defaultActHiCommentModel) Delete(ctx context.Context, iD string) error {
	assetActHiCommentIDKey := fmt.Sprintf("%s%v", cacheAssetActHiCommentIDPrefix, iD)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `ID_` = ?", m.table)
		return conn.ExecCtx(ctx, query, iD)
	}, assetActHiCommentIDKey)
	return err
}

func (m *defaultActHiCommentModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetActHiCommentIDPrefix, primary)
}

func (m *defaultActHiCommentModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actHiCommentRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultActHiCommentModel) tableName() string {
	return m.table
}
