// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asMarketAppGroupDistributionRelationFieldNames          = builder.RawFieldNames(&AsMarketAppGroupDistributionRelation{})
	asMarketAppGroupDistributionRelationRows                = strings.Join(asMarketAppGroupDistributionRelationFieldNames, ",")
	asMarketAppGroupDistributionRelationRowsExpectAutoSet   = strings.Join(stringx.Remove(asMarketAppGroupDistributionRelationFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	asMarketAppGroupDistributionRelationRowsWithPlaceHolder = strings.Join(stringx.Remove(asMarketAppGroupDistributionRelationFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsMarketAppGroupDistributionRelationIdPrefix = "cache:asset:asMarketAppGroupDistributionRelation:id:"
)

type (
	asMarketAppGroupDistributionRelationModel interface {
		Insert(ctx context.Context, data *AsMarketAppGroupDistributionRelation) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AsMarketAppGroupDistributionRelation, error)
		Update(ctx context.Context, data *AsMarketAppGroupDistributionRelation) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAsMarketAppGroupDistributionRelationModel struct {
		sqlc.CachedConn
		table string
	}

	AsMarketAppGroupDistributionRelation struct {
		Id         int64          `db:"id"`          // 主键
		CreateUser sql.NullInt64  `db:"create_user"` // 创建人
		CreateTime sql.NullTime   `db:"create_time"` // 创建时间
		UpdateUser sql.NullInt64  `db:"update_user"` // 修改人
		UpdateTime sql.NullTime   `db:"update_time"` // 修改时间
		Status     sql.NullInt64  `db:"status"`      // 状态
		IsDeleted  sql.NullInt64  `db:"is_deleted"`  // 是否已删除
		Remark     sql.NullString `db:"remark"`      // 备注
		AppId      sql.NullInt64  `db:"app_id"`      // 应用id
		GroupId    sql.NullInt64  `db:"group_id"`    // 集团id
		RelationId sql.NullInt64  `db:"relation_id"` // 被分配租户id
	}
)

func newAsMarketAppGroupDistributionRelationModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsMarketAppGroupDistributionRelationModel {
	return &defaultAsMarketAppGroupDistributionRelationModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_market_app_group_distribution_relation`",
	}
}

func (m *defaultAsMarketAppGroupDistributionRelationModel) Insert(ctx context.Context, data *AsMarketAppGroupDistributionRelation) (sql.Result, error) {
	assetAsMarketAppGroupDistributionRelationIdKey := fmt.Sprintf("%s%v", cacheAssetAsMarketAppGroupDistributionRelationIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, asMarketAppGroupDistributionRelationRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.CreateUser, data.UpdateUser, data.Status, data.IsDeleted, data.Remark, data.AppId, data.GroupId, data.RelationId)
	}, assetAsMarketAppGroupDistributionRelationIdKey)
	return ret, err
}

func (m *defaultAsMarketAppGroupDistributionRelationModel) FindOne(ctx context.Context, id int64) (*AsMarketAppGroupDistributionRelation, error) {
	assetAsMarketAppGroupDistributionRelationIdKey := fmt.Sprintf("%s%v", cacheAssetAsMarketAppGroupDistributionRelationIdPrefix, id)
	var resp AsMarketAppGroupDistributionRelation
	err := m.QueryRowCtx(ctx, &resp, assetAsMarketAppGroupDistributionRelationIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asMarketAppGroupDistributionRelationRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsMarketAppGroupDistributionRelationModel) Update(ctx context.Context, data *AsMarketAppGroupDistributionRelation) error {
	assetAsMarketAppGroupDistributionRelationIdKey := fmt.Sprintf("%s%v", cacheAssetAsMarketAppGroupDistributionRelationIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asMarketAppGroupDistributionRelationRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.CreateUser, data.UpdateUser, data.Status, data.IsDeleted, data.Remark, data.AppId, data.GroupId, data.RelationId, data.Id)
	}, assetAsMarketAppGroupDistributionRelationIdKey)
	return err
}

func (m *defaultAsMarketAppGroupDistributionRelationModel) Delete(ctx context.Context, id int64) error {
	assetAsMarketAppGroupDistributionRelationIdKey := fmt.Sprintf("%s%v", cacheAssetAsMarketAppGroupDistributionRelationIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsMarketAppGroupDistributionRelationIdKey)
	return err
}

func (m *defaultAsMarketAppGroupDistributionRelationModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsMarketAppGroupDistributionRelationIdPrefix, primary)
}

func (m *defaultAsMarketAppGroupDistributionRelationModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asMarketAppGroupDistributionRelationRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsMarketAppGroupDistributionRelationModel) tableName() string {
	return m.table
}
