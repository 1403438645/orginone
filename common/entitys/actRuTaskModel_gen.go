// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	actRuTaskFieldNames          = builder.RawFieldNames(&ActRuTask{})
	actRuTaskRows                = strings.Join(actRuTaskFieldNames, ",")
	actRuTaskRowsExpectAutoSet   = strings.Join(stringx.Remove(actRuTaskFieldNames, "`create_time`", "`update_time`"), ",")
	actRuTaskRowsWithPlaceHolder = strings.Join(stringx.Remove(actRuTaskFieldNames, "`ID_`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetActRuTaskIDPrefix = "cache:asset:actRuTask:iD:"
)

type (
	actRuTaskModel interface {
		Insert(ctx context.Context, data *ActRuTask) (sql.Result, error)
		FindOne(ctx context.Context, iD string) (*ActRuTask, error)
		Update(ctx context.Context, data *ActRuTask) error
		Delete(ctx context.Context, iD string) error
	}

	defaultActRuTaskModel struct {
		sqlc.CachedConn
		table string
	}

	ActRuTask struct {
		ID                    string         `db:"ID_"`
		REV                   sql.NullInt64  `db:"REV_"`
		EXECUTIONID           sql.NullString `db:"EXECUTION_ID_"`
		PROCINSTID            sql.NullString `db:"PROC_INST_ID_"`
		PROCDEFID             sql.NullString `db:"PROC_DEF_ID_"`
		TASKDEFID             sql.NullString `db:"TASK_DEF_ID_"`
		SCOPEID               sql.NullString `db:"SCOPE_ID_"`
		SUBSCOPEID            sql.NullString `db:"SUB_SCOPE_ID_"`
		SCOPETYPE             sql.NullString `db:"SCOPE_TYPE_"`
		SCOPEDEFINITIONID     sql.NullString `db:"SCOPE_DEFINITION_ID_"`
		NAME                  sql.NullString `db:"NAME_"`
		PARENTTASKID          sql.NullString `db:"PARENT_TASK_ID_"`
		DESCRIPTION           sql.NullString `db:"DESCRIPTION_"`
		TASKDEFKEY            sql.NullString `db:"TASK_DEF_KEY_"`
		OWNER                 sql.NullString `db:"OWNER_"`
		ASSIGNEE              sql.NullString `db:"ASSIGNEE_"`
		DELEGATION            sql.NullString `db:"DELEGATION_"`
		PRIORITY              sql.NullInt64  `db:"PRIORITY_"`
		CREATETIME            sql.NullTime   `db:"CREATE_TIME_"`
		DUEDATE               sql.NullTime   `db:"DUE_DATE_"`
		CATEGORY              sql.NullString `db:"CATEGORY_"`
		SUSPENSIONSTATE       sql.NullInt64  `db:"SUSPENSION_STATE_"`
		TENANTID              string         `db:"TENANT_ID_"`
		FORMKEY               sql.NullString `db:"FORM_KEY_"`
		CLAIMTIME             sql.NullTime   `db:"CLAIM_TIME_"`
		ISCOUNTENABLED        sql.NullInt64  `db:"IS_COUNT_ENABLED_"`
		VARCOUNT              sql.NullInt64  `db:"VAR_COUNT_"`
		IDLINKCOUNT           sql.NullInt64  `db:"ID_LINK_COUNT_"`
		SUBTASKCOUNT          sql.NullInt64  `db:"SUB_TASK_COUNT_"`
		PROPAGATEDSTAGEINSTID sql.NullString `db:"PROPAGATED_STAGE_INST_ID_"`
	}
)

func newActRuTaskModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultActRuTaskModel {
	return &defaultActRuTaskModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`act_ru_task`",
	}
}

func (m *defaultActRuTaskModel) Insert(ctx context.Context, data *ActRuTask) (sql.Result, error) {
	assetActRuTaskIDKey := fmt.Sprintf("%s%v", cacheAssetActRuTaskIDPrefix, data.ID)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, actRuTaskRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ID, data.REV, data.EXECUTIONID, data.PROCINSTID, data.PROCDEFID, data.TASKDEFID, data.SCOPEID, data.SUBSCOPEID, data.SCOPETYPE, data.SCOPEDEFINITIONID, data.NAME, data.PARENTTASKID, data.DESCRIPTION, data.TASKDEFKEY, data.OWNER, data.ASSIGNEE, data.DELEGATION, data.PRIORITY, data.CREATETIME, data.DUEDATE, data.CATEGORY, data.SUSPENSIONSTATE, data.TENANTID, data.FORMKEY, data.CLAIMTIME, data.ISCOUNTENABLED, data.VARCOUNT, data.IDLINKCOUNT, data.SUBTASKCOUNT, data.PROPAGATEDSTAGEINSTID)
	}, assetActRuTaskIDKey)
	return ret, err
}

func (m *defaultActRuTaskModel) FindOne(ctx context.Context, iD string) (*ActRuTask, error) {
	assetActRuTaskIDKey := fmt.Sprintf("%s%v", cacheAssetActRuTaskIDPrefix, iD)
	var resp ActRuTask
	err := m.QueryRowCtx(ctx, &resp, assetActRuTaskIDKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actRuTaskRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, iD)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActRuTaskModel) Update(ctx context.Context, data *ActRuTask) error {
	assetActRuTaskIDKey := fmt.Sprintf("%s%v", cacheAssetActRuTaskIDPrefix, data.ID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `ID_` = ?", m.table, actRuTaskRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.REV, data.EXECUTIONID, data.PROCINSTID, data.PROCDEFID, data.TASKDEFID, data.SCOPEID, data.SUBSCOPEID, data.SCOPETYPE, data.SCOPEDEFINITIONID, data.NAME, data.PARENTTASKID, data.DESCRIPTION, data.TASKDEFKEY, data.OWNER, data.ASSIGNEE, data.DELEGATION, data.PRIORITY, data.CREATETIME, data.DUEDATE, data.CATEGORY, data.SUSPENSIONSTATE, data.TENANTID, data.FORMKEY, data.CLAIMTIME, data.ISCOUNTENABLED, data.VARCOUNT, data.IDLINKCOUNT, data.SUBTASKCOUNT, data.PROPAGATEDSTAGEINSTID, data.ID)
	}, assetActRuTaskIDKey)
	return err
}

func (m *defaultActRuTaskModel) Delete(ctx context.Context, iD string) error {
	assetActRuTaskIDKey := fmt.Sprintf("%s%v", cacheAssetActRuTaskIDPrefix, iD)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `ID_` = ?", m.table)
		return conn.ExecCtx(ctx, query, iD)
	}, assetActRuTaskIDKey)
	return err
}

func (m *defaultActRuTaskModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetActRuTaskIDPrefix, primary)
}

func (m *defaultActRuTaskModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actRuTaskRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultActRuTaskModel) tableName() string {
	return m.table
}
