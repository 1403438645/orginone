// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asApplicationFieldNames          = builder.RawFieldNames(&AsApplication{})
	asApplicationRows                = strings.Join(asApplicationFieldNames, ",")
	asApplicationRowsExpectAutoSet   = strings.Join(stringx.Remove(asApplicationFieldNames, "`create_time`", "`update_time`"), ",")
	asApplicationRowsWithPlaceHolder = strings.Join(stringx.Remove(asApplicationFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsApplicationIdPrefix = "cache:asset:asApplication:id:"
)

type (
	asApplicationModel interface {
		Insert(ctx context.Context, data *AsApplication) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*AsApplication, error)
		Update(ctx context.Context, data *AsApplication) error
		Delete(ctx context.Context, id string) error
	}

	defaultAsApplicationModel struct {
		sqlc.CachedConn
		table string
	}

	AsApplication struct {
		Id              string         `db:"id"`
		ApplicationName sql.NullString `db:"application_name"` // 模块名称
		IconCls         sql.NullString `db:"icon_cls"`         // 模块图标
		Status          sql.NullInt64  `db:"status"`           // 状态：1、可用；0、不可用
		IsPublished     sql.NullInt64  `db:"is_published"`     // 是否发布：1——发布，0——没发布
		CreatedTime     sql.NullTime   `db:"created_time"`     // 创建时间
		DisableTime     sql.NullTime   `db:"disable_time"`     // 失效时间
		RemoveTime      sql.NullTime   `db:"remove_time"`      // 删除时间
	}
)

func newAsApplicationModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsApplicationModel {
	return &defaultAsApplicationModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_application`",
	}
}

func (m *defaultAsApplicationModel) Insert(ctx context.Context, data *AsApplication) (sql.Result, error) {
	assetAsApplicationIdKey := fmt.Sprintf("%s%v", cacheAssetAsApplicationIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, asApplicationRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.ApplicationName, data.IconCls, data.Status, data.IsPublished, data.CreatedTime, data.DisableTime, data.RemoveTime)
	}, assetAsApplicationIdKey)
	return ret, err
}

func (m *defaultAsApplicationModel) FindOne(ctx context.Context, id string) (*AsApplication, error) {
	assetAsApplicationIdKey := fmt.Sprintf("%s%v", cacheAssetAsApplicationIdPrefix, id)
	var resp AsApplication
	err := m.QueryRowCtx(ctx, &resp, assetAsApplicationIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asApplicationRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsApplicationModel) Update(ctx context.Context, data *AsApplication) error {
	assetAsApplicationIdKey := fmt.Sprintf("%s%v", cacheAssetAsApplicationIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asApplicationRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ApplicationName, data.IconCls, data.Status, data.IsPublished, data.CreatedTime, data.DisableTime, data.RemoveTime, data.Id)
	}, assetAsApplicationIdKey)
	return err
}

func (m *defaultAsApplicationModel) Delete(ctx context.Context, id string) error {
	assetAsApplicationIdKey := fmt.Sprintf("%s%v", cacheAssetAsApplicationIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsApplicationIdKey)
	return err
}

func (m *defaultAsApplicationModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsApplicationIdPrefix, primary)
}

func (m *defaultAsApplicationModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asApplicationRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsApplicationModel) tableName() string {
	return m.table
}
