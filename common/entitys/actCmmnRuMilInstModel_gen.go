// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	actCmmnRuMilInstFieldNames          = builder.RawFieldNames(&ActCmmnRuMilInst{})
	actCmmnRuMilInstRows                = strings.Join(actCmmnRuMilInstFieldNames, ",")
	actCmmnRuMilInstRowsExpectAutoSet   = strings.Join(stringx.Remove(actCmmnRuMilInstFieldNames, "`create_time`", "`update_time`"), ",")
	actCmmnRuMilInstRowsWithPlaceHolder = strings.Join(stringx.Remove(actCmmnRuMilInstFieldNames, "`ID_`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetActCmmnRuMilInstIDPrefix = "cache:asset:actCmmnRuMilInst:iD:"
)

type (
	actCmmnRuMilInstModel interface {
		Insert(ctx context.Context, data *ActCmmnRuMilInst) (sql.Result, error)
		FindOne(ctx context.Context, iD string) (*ActCmmnRuMilInst, error)
		Update(ctx context.Context, data *ActCmmnRuMilInst) error
		Delete(ctx context.Context, iD string) error
	}

	defaultActCmmnRuMilInstModel struct {
		sqlc.CachedConn
		table string
	}

	ActCmmnRuMilInst struct {
		ID         string       `db:"ID_"`
		NAME       string       `db:"NAME_"`
		TIMESTAMP  sql.NullTime `db:"TIME_STAMP_"`
		CASEINSTID string       `db:"CASE_INST_ID_"`
		CASEDEFID  string       `db:"CASE_DEF_ID_"`
		ELEMENTID  string       `db:"ELEMENT_ID_"`
		TENANTID   string       `db:"TENANT_ID_"`
	}
)

func newActCmmnRuMilInstModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultActCmmnRuMilInstModel {
	return &defaultActCmmnRuMilInstModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`act_cmmn_ru_mil_inst`",
	}
}

func (m *defaultActCmmnRuMilInstModel) Insert(ctx context.Context, data *ActCmmnRuMilInst) (sql.Result, error) {
	assetActCmmnRuMilInstIDKey := fmt.Sprintf("%s%v", cacheAssetActCmmnRuMilInstIDPrefix, data.ID)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, actCmmnRuMilInstRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ID, data.NAME, data.TIMESTAMP, data.CASEINSTID, data.CASEDEFID, data.ELEMENTID, data.TENANTID)
	}, assetActCmmnRuMilInstIDKey)
	return ret, err
}

func (m *defaultActCmmnRuMilInstModel) FindOne(ctx context.Context, iD string) (*ActCmmnRuMilInst, error) {
	assetActCmmnRuMilInstIDKey := fmt.Sprintf("%s%v", cacheAssetActCmmnRuMilInstIDPrefix, iD)
	var resp ActCmmnRuMilInst
	err := m.QueryRowCtx(ctx, &resp, assetActCmmnRuMilInstIDKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actCmmnRuMilInstRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, iD)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActCmmnRuMilInstModel) Update(ctx context.Context, data *ActCmmnRuMilInst) error {
	assetActCmmnRuMilInstIDKey := fmt.Sprintf("%s%v", cacheAssetActCmmnRuMilInstIDPrefix, data.ID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `ID_` = ?", m.table, actCmmnRuMilInstRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.NAME, data.TIMESTAMP, data.CASEINSTID, data.CASEDEFID, data.ELEMENTID, data.TENANTID, data.ID)
	}, assetActCmmnRuMilInstIDKey)
	return err
}

func (m *defaultActCmmnRuMilInstModel) Delete(ctx context.Context, iD string) error {
	assetActCmmnRuMilInstIDKey := fmt.Sprintf("%s%v", cacheAssetActCmmnRuMilInstIDPrefix, iD)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `ID_` = ?", m.table)
		return conn.ExecCtx(ctx, query, iD)
	}, assetActCmmnRuMilInstIDKey)
	return err
}

func (m *defaultActCmmnRuMilInstModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetActCmmnRuMilInstIDPrefix, primary)
}

func (m *defaultActCmmnRuMilInstModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actCmmnRuMilInstRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultActCmmnRuMilInstModel) tableName() string {
	return m.table
}
