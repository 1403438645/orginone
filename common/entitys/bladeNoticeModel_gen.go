// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bladeNoticeFieldNames          = builder.RawFieldNames(&BladeNotice{})
	bladeNoticeRows                = strings.Join(bladeNoticeFieldNames, ",")
	bladeNoticeRowsExpectAutoSet   = strings.Join(stringx.Remove(bladeNoticeFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	bladeNoticeRowsWithPlaceHolder = strings.Join(stringx.Remove(bladeNoticeFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetBladeNoticeIdPrefix = "cache:asset:bladeNotice:id:"
)

type (
	bladeNoticeModel interface {
		Insert(ctx context.Context, data *BladeNotice) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BladeNotice, error)
		Update(ctx context.Context, data *BladeNotice) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBladeNoticeModel struct {
		sqlc.CachedConn
		table string
	}

	BladeNotice struct {
		Id          int64          `db:"id"`           // 主键
		TenantCode  string         `db:"tenant_code"`  // 租户编号
		Title       sql.NullString `db:"title"`        // 标题
		Category    sql.NullInt64  `db:"category"`     // 类型
		ReleaseTime sql.NullTime   `db:"release_time"` // 发布时间
		Content     sql.NullString `db:"content"`      // 内容
		CreateUser  sql.NullInt64  `db:"create_user"`  // 创建人
		CreateTime  sql.NullTime   `db:"create_time"`  // 创建时间
		UpdateUser  sql.NullInt64  `db:"update_user"`  // 修改人
		UpdateTime  sql.NullTime   `db:"update_time"`  // 修改时间
		Status      sql.NullInt64  `db:"status"`       // 状态
		IsDeleted   sql.NullInt64  `db:"is_deleted"`   // 是否已删除
	}
)

func newBladeNoticeModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultBladeNoticeModel {
	return &defaultBladeNoticeModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`blade_notice`",
	}
}

func (m *defaultBladeNoticeModel) Insert(ctx context.Context, data *BladeNotice) (sql.Result, error) {
	assetBladeNoticeIdKey := fmt.Sprintf("%s%v", cacheAssetBladeNoticeIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, bladeNoticeRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.TenantCode, data.Title, data.Category, data.ReleaseTime, data.Content, data.CreateUser, data.UpdateUser, data.Status, data.IsDeleted)
	}, assetBladeNoticeIdKey)
	return ret, err
}

func (m *defaultBladeNoticeModel) FindOne(ctx context.Context, id int64) (*BladeNotice, error) {
	assetBladeNoticeIdKey := fmt.Sprintf("%s%v", cacheAssetBladeNoticeIdPrefix, id)
	var resp BladeNotice
	err := m.QueryRowCtx(ctx, &resp, assetBladeNoticeIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bladeNoticeRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBladeNoticeModel) Update(ctx context.Context, data *BladeNotice) error {
	assetBladeNoticeIdKey := fmt.Sprintf("%s%v", cacheAssetBladeNoticeIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, bladeNoticeRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.TenantCode, data.Title, data.Category, data.ReleaseTime, data.Content, data.CreateUser, data.UpdateUser, data.Status, data.IsDeleted, data.Id)
	}, assetBladeNoticeIdKey)
	return err
}

func (m *defaultBladeNoticeModel) Delete(ctx context.Context, id int64) error {
	assetBladeNoticeIdKey := fmt.Sprintf("%s%v", cacheAssetBladeNoticeIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetBladeNoticeIdKey)
	return err
}

func (m *defaultBladeNoticeModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetBladeNoticeIdPrefix, primary)
}

func (m *defaultBladeNoticeModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bladeNoticeRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBladeNoticeModel) tableName() string {
	return m.table
}
