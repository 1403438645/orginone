// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asProcValueFieldNames          = builder.RawFieldNames(&AsProcValue{})
	asProcValueRows                = strings.Join(asProcValueFieldNames, ",")
	asProcValueRowsExpectAutoSet   = strings.Join(stringx.Remove(asProcValueFieldNames, "`create_time`", "`update_time`"), ",")
	asProcValueRowsWithPlaceHolder = strings.Join(stringx.Remove(asProcValueFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsProcValueIdPrefix = "cache:asset:asProcValue:id:"
)

type (
	asProcValueModel interface {
		Insert(ctx context.Context, data *AsProcValue) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*AsProcValue, error)
		Update(ctx context.Context, data *AsProcValue) error
		Delete(ctx context.Context, id string) error
	}

	defaultAsProcValueModel struct {
		sqlc.CachedConn
		table string
	}

	AsProcValue struct {
		Id                string        `db:"id"`
		ProcModelId       string        `db:"proc_model_id"`
		AdaptationVersion sql.NullInt64 `db:"adaptation_version"`
		NewInst           sql.NullInt64 `db:"new_inst"`
		IsChanged         int64         `db:"is_changed"`
		IsAdapted         int64         `db:"is_adapted"`
	}
)

func newAsProcValueModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsProcValueModel {
	return &defaultAsProcValueModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_proc_value`",
	}
}

func (m *defaultAsProcValueModel) Insert(ctx context.Context, data *AsProcValue) (sql.Result, error) {
	assetAsProcValueIdKey := fmt.Sprintf("%s%v", cacheAssetAsProcValueIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, asProcValueRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.ProcModelId, data.AdaptationVersion, data.NewInst, data.IsChanged, data.IsAdapted)
	}, assetAsProcValueIdKey)
	return ret, err
}

func (m *defaultAsProcValueModel) FindOne(ctx context.Context, id string) (*AsProcValue, error) {
	assetAsProcValueIdKey := fmt.Sprintf("%s%v", cacheAssetAsProcValueIdPrefix, id)
	var resp AsProcValue
	err := m.QueryRowCtx(ctx, &resp, assetAsProcValueIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asProcValueRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsProcValueModel) Update(ctx context.Context, data *AsProcValue) error {
	assetAsProcValueIdKey := fmt.Sprintf("%s%v", cacheAssetAsProcValueIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asProcValueRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ProcModelId, data.AdaptationVersion, data.NewInst, data.IsChanged, data.IsAdapted, data.Id)
	}, assetAsProcValueIdKey)
	return err
}

func (m *defaultAsProcValueModel) Delete(ctx context.Context, id string) error {
	assetAsProcValueIdKey := fmt.Sprintf("%s%v", cacheAssetAsProcValueIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsProcValueIdKey)
	return err
}

func (m *defaultAsProcValueModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsProcValueIdPrefix, primary)
}

func (m *defaultAsProcValueModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asProcValueRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsProcValueModel) tableName() string {
	return m.table
}
