// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asMarketMenuUserSortFieldNames          = builder.RawFieldNames(&AsMarketMenuUserSort{})
	asMarketMenuUserSortRows                = strings.Join(asMarketMenuUserSortFieldNames, ",")
	asMarketMenuUserSortRowsExpectAutoSet   = strings.Join(stringx.Remove(asMarketMenuUserSortFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	asMarketMenuUserSortRowsWithPlaceHolder = strings.Join(stringx.Remove(asMarketMenuUserSortFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsMarketMenuUserSortIdPrefix = "cache:asset:asMarketMenuUserSort:id:"
)

type (
	asMarketMenuUserSortModel interface {
		Insert(ctx context.Context, data *AsMarketMenuUserSort) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AsMarketMenuUserSort, error)
		Update(ctx context.Context, data *AsMarketMenuUserSort) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAsMarketMenuUserSortModel struct {
		sqlc.CachedConn
		table string
	}

	AsMarketMenuUserSort struct {
		Id         int64         `db:"id"`          // 主键
		UserId     sql.NullInt64 `db:"user_id"`     // 用户id
		MenuId     sql.NullInt64 `db:"menu_id"`     // 一级应用菜单
		Sort       sql.NullInt64 `db:"sort"`        // 排序字段
		CreateUser sql.NullInt64 `db:"create_user"` // 创建人
		CreateTime sql.NullTime  `db:"create_time"` // 创建时间
		UpdateUser sql.NullInt64 `db:"update_user"` // 修改人
		UpdateTime sql.NullTime  `db:"update_time"` // 修改时间
		Status     sql.NullInt64 `db:"status"`      // 状态
		IsDeleted  sql.NullInt64 `db:"is_deleted"`  // 是否已删除
	}
)

func newAsMarketMenuUserSortModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsMarketMenuUserSortModel {
	return &defaultAsMarketMenuUserSortModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_market_menu_user_sort`",
	}
}

func (m *defaultAsMarketMenuUserSortModel) Insert(ctx context.Context, data *AsMarketMenuUserSort) (sql.Result, error) {
	assetAsMarketMenuUserSortIdKey := fmt.Sprintf("%s%v", cacheAssetAsMarketMenuUserSortIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, asMarketMenuUserSortRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.MenuId, data.Sort, data.CreateUser, data.UpdateUser, data.Status, data.IsDeleted)
	}, assetAsMarketMenuUserSortIdKey)
	return ret, err
}

func (m *defaultAsMarketMenuUserSortModel) FindOne(ctx context.Context, id int64) (*AsMarketMenuUserSort, error) {
	assetAsMarketMenuUserSortIdKey := fmt.Sprintf("%s%v", cacheAssetAsMarketMenuUserSortIdPrefix, id)
	var resp AsMarketMenuUserSort
	err := m.QueryRowCtx(ctx, &resp, assetAsMarketMenuUserSortIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asMarketMenuUserSortRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsMarketMenuUserSortModel) Update(ctx context.Context, data *AsMarketMenuUserSort) error {
	assetAsMarketMenuUserSortIdKey := fmt.Sprintf("%s%v", cacheAssetAsMarketMenuUserSortIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asMarketMenuUserSortRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.MenuId, data.Sort, data.CreateUser, data.UpdateUser, data.Status, data.IsDeleted, data.Id)
	}, assetAsMarketMenuUserSortIdKey)
	return err
}

func (m *defaultAsMarketMenuUserSortModel) Delete(ctx context.Context, id int64) error {
	assetAsMarketMenuUserSortIdKey := fmt.Sprintf("%s%v", cacheAssetAsMarketMenuUserSortIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsMarketMenuUserSortIdKey)
	return err
}

func (m *defaultAsMarketMenuUserSortModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsMarketMenuUserSortIdPrefix, primary)
}

func (m *defaultAsMarketMenuUserSortModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asMarketMenuUserSortRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsMarketMenuUserSortModel) tableName() string {
	return m.table
}
