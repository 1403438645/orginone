// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	actRuVariableFieldNames          = builder.RawFieldNames(&ActRuVariable{})
	actRuVariableRows                = strings.Join(actRuVariableFieldNames, ",")
	actRuVariableRowsExpectAutoSet   = strings.Join(stringx.Remove(actRuVariableFieldNames, "`create_time`", "`update_time`"), ",")
	actRuVariableRowsWithPlaceHolder = strings.Join(stringx.Remove(actRuVariableFieldNames, "`ID_`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetActRuVariableIDPrefix = "cache:asset:actRuVariable:iD:"
)

type (
	actRuVariableModel interface {
		Insert(ctx context.Context, data *ActRuVariable) (sql.Result, error)
		FindOne(ctx context.Context, iD string) (*ActRuVariable, error)
		Update(ctx context.Context, data *ActRuVariable) error
		Delete(ctx context.Context, iD string) error
	}

	defaultActRuVariableModel struct {
		sqlc.CachedConn
		table string
	}

	ActRuVariable struct {
		ID          string          `db:"ID_"`
		REV         sql.NullInt64   `db:"REV_"`
		TYPE        string          `db:"TYPE_"`
		NAME        string          `db:"NAME_"`
		EXECUTIONID sql.NullString  `db:"EXECUTION_ID_"`
		PROCINSTID  sql.NullString  `db:"PROC_INST_ID_"`
		TASKID      sql.NullString  `db:"TASK_ID_"`
		SCOPEID     sql.NullString  `db:"SCOPE_ID_"`
		SUBSCOPEID  sql.NullString  `db:"SUB_SCOPE_ID_"`
		SCOPETYPE   sql.NullString  `db:"SCOPE_TYPE_"`
		BYTEARRAYID sql.NullString  `db:"BYTEARRAY_ID_"`
		DOUBLE      sql.NullFloat64 `db:"DOUBLE_"`
		LONG        sql.NullInt64   `db:"LONG_"`
		TEXT        sql.NullString  `db:"TEXT_"`
		TEXT2       sql.NullString  `db:"TEXT2_"`
	}
)

func newActRuVariableModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultActRuVariableModel {
	return &defaultActRuVariableModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`act_ru_variable`",
	}
}

func (m *defaultActRuVariableModel) Insert(ctx context.Context, data *ActRuVariable) (sql.Result, error) {
	assetActRuVariableIDKey := fmt.Sprintf("%s%v", cacheAssetActRuVariableIDPrefix, data.ID)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, actRuVariableRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ID, data.REV, data.TYPE, data.NAME, data.EXECUTIONID, data.PROCINSTID, data.TASKID, data.SCOPEID, data.SUBSCOPEID, data.SCOPETYPE, data.BYTEARRAYID, data.DOUBLE, data.LONG, data.TEXT, data.TEXT2)
	}, assetActRuVariableIDKey)
	return ret, err
}

func (m *defaultActRuVariableModel) FindOne(ctx context.Context, iD string) (*ActRuVariable, error) {
	assetActRuVariableIDKey := fmt.Sprintf("%s%v", cacheAssetActRuVariableIDPrefix, iD)
	var resp ActRuVariable
	err := m.QueryRowCtx(ctx, &resp, assetActRuVariableIDKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actRuVariableRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, iD)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActRuVariableModel) Update(ctx context.Context, data *ActRuVariable) error {
	assetActRuVariableIDKey := fmt.Sprintf("%s%v", cacheAssetActRuVariableIDPrefix, data.ID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `ID_` = ?", m.table, actRuVariableRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.REV, data.TYPE, data.NAME, data.EXECUTIONID, data.PROCINSTID, data.TASKID, data.SCOPEID, data.SUBSCOPEID, data.SCOPETYPE, data.BYTEARRAYID, data.DOUBLE, data.LONG, data.TEXT, data.TEXT2, data.ID)
	}, assetActRuVariableIDKey)
	return err
}

func (m *defaultActRuVariableModel) Delete(ctx context.Context, iD string) error {
	assetActRuVariableIDKey := fmt.Sprintf("%s%v", cacheAssetActRuVariableIDPrefix, iD)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `ID_` = ?", m.table)
		return conn.ExecCtx(ctx, query, iD)
	}, assetActRuVariableIDKey)
	return err
}

func (m *defaultActRuVariableModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetActRuVariableIDPrefix, primary)
}

func (m *defaultActRuVariableModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actRuVariableRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultActRuVariableModel) tableName() string {
	return m.table
}
