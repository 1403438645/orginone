// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bladeClientFieldNames          = builder.RawFieldNames(&BladeClient{})
	bladeClientRows                = strings.Join(bladeClientFieldNames, ",")
	bladeClientRowsExpectAutoSet   = strings.Join(stringx.Remove(bladeClientFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	bladeClientRowsWithPlaceHolder = strings.Join(stringx.Remove(bladeClientFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetBladeClientIdPrefix = "cache:asset:bladeClient:id:"
)

type (
	bladeClientModel interface {
		Insert(ctx context.Context, data *BladeClient) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BladeClient, error)
		Update(ctx context.Context, data *BladeClient) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBladeClientModel struct {
		sqlc.CachedConn
		table string
	}

	BladeClient struct {
		Id                    int64          `db:"id"`                      // 主键
		ClientId              string         `db:"client_id"`               // 客户端id
		ClientSecret          string         `db:"client_secret"`           // 客户端密钥
		ResourceIds           sql.NullString `db:"resource_ids"`            // 资源集合
		Scope                 string         `db:"scope"`                   // 授权范围
		AuthorizedGrantTypes  string         `db:"authorized_grant_types"`  // 授权类型
		WebServerRedirectUri  sql.NullString `db:"web_server_redirect_uri"` // 回调地址
		Authorities           sql.NullString `db:"authorities"`             // 权限
		AccessTokenValidity   int64          `db:"access_token_validity"`   // 令牌过期秒数
		RefreshTokenValidity  int64          `db:"refresh_token_validity"`  // 刷新令牌过期秒数
		AdditionalInformation sql.NullString `db:"additional_information"`  // 附加说明
		Autoapprove           sql.NullString `db:"autoapprove"`             // 自动授权
		CreateUser            sql.NullInt64  `db:"create_user"`             // 创建人
		CreateTime            sql.NullTime   `db:"create_time"`             // 创建时间
		UpdateUser            sql.NullInt64  `db:"update_user"`             // 修改人
		UpdateTime            sql.NullTime   `db:"update_time"`             // 修改时间
		Status                int64          `db:"status"`                  // 状态
		IsDeleted             int64          `db:"is_deleted"`              // 是否已删除
	}
)

func newBladeClientModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultBladeClientModel {
	return &defaultBladeClientModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`blade_client`",
	}
}

func (m *defaultBladeClientModel) Insert(ctx context.Context, data *BladeClient) (sql.Result, error) {
	assetBladeClientIdKey := fmt.Sprintf("%s%v", cacheAssetBladeClientIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, bladeClientRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ClientId, data.ClientSecret, data.ResourceIds, data.Scope, data.AuthorizedGrantTypes, data.WebServerRedirectUri, data.Authorities, data.AccessTokenValidity, data.RefreshTokenValidity, data.AdditionalInformation, data.Autoapprove, data.CreateUser, data.UpdateUser, data.Status, data.IsDeleted)
	}, assetBladeClientIdKey)
	return ret, err
}

func (m *defaultBladeClientModel) FindOne(ctx context.Context, id int64) (*BladeClient, error) {
	assetBladeClientIdKey := fmt.Sprintf("%s%v", cacheAssetBladeClientIdPrefix, id)
	var resp BladeClient
	err := m.QueryRowCtx(ctx, &resp, assetBladeClientIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bladeClientRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBladeClientModel) Update(ctx context.Context, data *BladeClient) error {
	assetBladeClientIdKey := fmt.Sprintf("%s%v", cacheAssetBladeClientIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, bladeClientRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ClientId, data.ClientSecret, data.ResourceIds, data.Scope, data.AuthorizedGrantTypes, data.WebServerRedirectUri, data.Authorities, data.AccessTokenValidity, data.RefreshTokenValidity, data.AdditionalInformation, data.Autoapprove, data.CreateUser, data.UpdateUser, data.Status, data.IsDeleted, data.Id)
	}, assetBladeClientIdKey)
	return err
}

func (m *defaultBladeClientModel) Delete(ctx context.Context, id int64) error {
	assetBladeClientIdKey := fmt.Sprintf("%s%v", cacheAssetBladeClientIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetBladeClientIdKey)
	return err
}

func (m *defaultBladeClientModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetBladeClientIdPrefix, primary)
}

func (m *defaultBladeClientModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bladeClientRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBladeClientModel) tableName() string {
	return m.table
}
