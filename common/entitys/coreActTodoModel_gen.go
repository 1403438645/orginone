// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	coreActTodoFieldNames          = builder.RawFieldNames(&CoreActTodo{})
	coreActTodoRows                = strings.Join(coreActTodoFieldNames, ",")
	coreActTodoRowsExpectAutoSet   = strings.Join(stringx.Remove(coreActTodoFieldNames, "`create_time`", "`update_time`"), ",")
	coreActTodoRowsWithPlaceHolder = strings.Join(stringx.Remove(coreActTodoFieldNames, "`recid`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetCoreActTodoRecidPrefix = "cache:asset:coreActTodo:recid:"
)

type (
	coreActTodoModel interface {
		Insert(ctx context.Context, data *CoreActTodo) (sql.Result, error)
		FindOne(ctx context.Context, recid int64) (*CoreActTodo, error)
		Update(ctx context.Context, data *CoreActTodo) error
		Delete(ctx context.Context, recid int64) error
	}

	defaultCoreActTodoModel struct {
		sqlc.CachedConn
		table string
	}

	CoreActTodo struct {
		Recid              int64          `db:"recid"`
		Todotitle          sql.NullString `db:"todotitle"`
		Todocontent        sql.NullString `db:"todocontent"`
		Todotype           sql.NullInt64  `db:"todotype"` // 1、待办；2、已办
		Pcformlink         sql.NullString `db:"pcformlink"`
		Mobileformlink     sql.NullString `db:"mobileformlink"`
		Todotime           sql.NullTime   `db:"todotime"`
		Todoperson         sql.NullInt64  `db:"todoperson"`
		Todounit           sql.NullInt64  `db:"todounit"`
		Tododepartment     sql.NullInt64  `db:"tododepartment"`
		Todoappid          sql.NullInt64  `db:"todoappid"`
		Todoappname        sql.NullString `db:"todoappname"`
		Finishtime         sql.NullTime   `db:"finishtime"`
		Ifread             sql.NullInt64  `db:"ifread"`
		Procid             sql.NullString `db:"procid"`
		Taskid             sql.NullString `db:"taskid"`
		TodoSendPerson     sql.NullInt64  `db:"todoSendPerson"`
		TodoSendTenantCode sql.NullString `db:"todoSendTenantCode"` // 发送人所在租户
	}
)

func newCoreActTodoModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultCoreActTodoModel {
	return &defaultCoreActTodoModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`core_act_todo`",
	}
}

func (m *defaultCoreActTodoModel) Insert(ctx context.Context, data *CoreActTodo) (sql.Result, error) {
	assetCoreActTodoRecidKey := fmt.Sprintf("%s%v", cacheAssetCoreActTodoRecidPrefix, data.Recid)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, coreActTodoRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Recid, data.Todotitle, data.Todocontent, data.Todotype, data.Pcformlink, data.Mobileformlink, data.Todotime, data.Todoperson, data.Todounit, data.Tododepartment, data.Todoappid, data.Todoappname, data.Finishtime, data.Ifread, data.Procid, data.Taskid, data.TodoSendPerson, data.TodoSendTenantCode)
	}, assetCoreActTodoRecidKey)
	return ret, err
}

func (m *defaultCoreActTodoModel) FindOne(ctx context.Context, recid int64) (*CoreActTodo, error) {
	assetCoreActTodoRecidKey := fmt.Sprintf("%s%v", cacheAssetCoreActTodoRecidPrefix, recid)
	var resp CoreActTodo
	err := m.QueryRowCtx(ctx, &resp, assetCoreActTodoRecidKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `recid` = ? limit 1", coreActTodoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, recid)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCoreActTodoModel) Update(ctx context.Context, data *CoreActTodo) error {
	assetCoreActTodoRecidKey := fmt.Sprintf("%s%v", cacheAssetCoreActTodoRecidPrefix, data.Recid)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `recid` = ?", m.table, coreActTodoRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Todotitle, data.Todocontent, data.Todotype, data.Pcformlink, data.Mobileformlink, data.Todotime, data.Todoperson, data.Todounit, data.Tododepartment, data.Todoappid, data.Todoappname, data.Finishtime, data.Ifread, data.Procid, data.Taskid, data.TodoSendPerson, data.TodoSendTenantCode, data.Recid)
	}, assetCoreActTodoRecidKey)
	return err
}

func (m *defaultCoreActTodoModel) Delete(ctx context.Context, recid int64) error {
	assetCoreActTodoRecidKey := fmt.Sprintf("%s%v", cacheAssetCoreActTodoRecidPrefix, recid)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `recid` = ?", m.table)
		return conn.ExecCtx(ctx, query, recid)
	}, assetCoreActTodoRecidKey)
	return err
}

func (m *defaultCoreActTodoModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetCoreActTodoRecidPrefix, primary)
}

func (m *defaultCoreActTodoModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `recid` = ? limit 1", coreActTodoRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultCoreActTodoModel) tableName() string {
	return m.table
}
