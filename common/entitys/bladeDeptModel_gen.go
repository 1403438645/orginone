// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bladeDeptFieldNames          = builder.RawFieldNames(&BladeDept{})
	bladeDeptRows                = strings.Join(bladeDeptFieldNames, ",")
	bladeDeptRowsExpectAutoSet   = strings.Join(stringx.Remove(bladeDeptFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	bladeDeptRowsWithPlaceHolder = strings.Join(stringx.Remove(bladeDeptFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetBladeDeptIdPrefix = "cache:asset:bladeDept:id:"
)

type (
	bladeDeptModel interface {
		Insert(ctx context.Context, data *BladeDept) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BladeDept, error)
		Update(ctx context.Context, data *BladeDept) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBladeDeptModel struct {
		sqlc.CachedConn
		table string
	}

	BladeDept struct {
		Id         int64          `db:"id"`          // 主键
		TenantCode string         `db:"tenant_code"` // 租户编号
		ParentId   int64          `db:"parent_id"`   // 父主键
		DeptName   sql.NullString `db:"dept_name"`   // 部门名
		FullName   sql.NullString `db:"full_name"`   // 部门全称
		Sort       sql.NullInt64  `db:"sort"`        // 排序
		Remark     sql.NullString `db:"remark"`      // 备注
		IsDeleted  int64          `db:"is_deleted"`  // 是否已删除
	}
)

func newBladeDeptModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultBladeDeptModel {
	return &defaultBladeDeptModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`blade_dept`",
	}
}

func (m *defaultBladeDeptModel) Insert(ctx context.Context, data *BladeDept) (sql.Result, error) {
	assetBladeDeptIdKey := fmt.Sprintf("%s%v", cacheAssetBladeDeptIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, bladeDeptRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.TenantCode, data.ParentId, data.DeptName, data.FullName, data.Sort, data.Remark, data.IsDeleted)
	}, assetBladeDeptIdKey)
	return ret, err
}

func (m *defaultBladeDeptModel) FindOne(ctx context.Context, id int64) (*BladeDept, error) {
	assetBladeDeptIdKey := fmt.Sprintf("%s%v", cacheAssetBladeDeptIdPrefix, id)
	var resp BladeDept
	err := m.QueryRowCtx(ctx, &resp, assetBladeDeptIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bladeDeptRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBladeDeptModel) Update(ctx context.Context, data *BladeDept) error {
	assetBladeDeptIdKey := fmt.Sprintf("%s%v", cacheAssetBladeDeptIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, bladeDeptRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.TenantCode, data.ParentId, data.DeptName, data.FullName, data.Sort, data.Remark, data.IsDeleted, data.Id)
	}, assetBladeDeptIdKey)
	return err
}

func (m *defaultBladeDeptModel) Delete(ctx context.Context, id int64) error {
	assetBladeDeptIdKey := fmt.Sprintf("%s%v", cacheAssetBladeDeptIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetBladeDeptIdKey)
	return err
}

func (m *defaultBladeDeptModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetBladeDeptIdPrefix, primary)
}

func (m *defaultBladeDeptModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bladeDeptRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBladeDeptModel) tableName() string {
	return m.table
}
