// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	actAppDeploymentResourceFieldNames          = builder.RawFieldNames(&ActAppDeploymentResource{})
	actAppDeploymentResourceRows                = strings.Join(actAppDeploymentResourceFieldNames, ",")
	actAppDeploymentResourceRowsExpectAutoSet   = strings.Join(stringx.Remove(actAppDeploymentResourceFieldNames, "`create_time`", "`update_time`"), ",")
	actAppDeploymentResourceRowsWithPlaceHolder = strings.Join(stringx.Remove(actAppDeploymentResourceFieldNames, "`ID_`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetActAppDeploymentResourceIDPrefix = "cache:asset:actAppDeploymentResource:iD:"
)

type (
	actAppDeploymentResourceModel interface {
		Insert(ctx context.Context, data *ActAppDeploymentResource) (sql.Result, error)
		FindOne(ctx context.Context, iD string) (*ActAppDeploymentResource, error)
		Update(ctx context.Context, data *ActAppDeploymentResource) error
		Delete(ctx context.Context, iD string) error
	}

	defaultActAppDeploymentResourceModel struct {
		sqlc.CachedConn
		table string
	}

	ActAppDeploymentResource struct {
		ID            string         `db:"ID_"`
		NAME          sql.NullString `db:"NAME_"`
		DEPLOYMENTID  sql.NullString `db:"DEPLOYMENT_ID_"`
		RESOURCEBYTES sql.NullString `db:"RESOURCE_BYTES_"`
	}
)

func newActAppDeploymentResourceModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultActAppDeploymentResourceModel {
	return &defaultActAppDeploymentResourceModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`act_app_deployment_resource`",
	}
}

func (m *defaultActAppDeploymentResourceModel) Insert(ctx context.Context, data *ActAppDeploymentResource) (sql.Result, error) {
	assetActAppDeploymentResourceIDKey := fmt.Sprintf("%s%v", cacheAssetActAppDeploymentResourceIDPrefix, data.ID)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, actAppDeploymentResourceRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ID, data.NAME, data.DEPLOYMENTID, data.RESOURCEBYTES)
	}, assetActAppDeploymentResourceIDKey)
	return ret, err
}

func (m *defaultActAppDeploymentResourceModel) FindOne(ctx context.Context, iD string) (*ActAppDeploymentResource, error) {
	assetActAppDeploymentResourceIDKey := fmt.Sprintf("%s%v", cacheAssetActAppDeploymentResourceIDPrefix, iD)
	var resp ActAppDeploymentResource
	err := m.QueryRowCtx(ctx, &resp, assetActAppDeploymentResourceIDKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actAppDeploymentResourceRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, iD)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActAppDeploymentResourceModel) Update(ctx context.Context, data *ActAppDeploymentResource) error {
	assetActAppDeploymentResourceIDKey := fmt.Sprintf("%s%v", cacheAssetActAppDeploymentResourceIDPrefix, data.ID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `ID_` = ?", m.table, actAppDeploymentResourceRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.NAME, data.DEPLOYMENTID, data.RESOURCEBYTES, data.ID)
	}, assetActAppDeploymentResourceIDKey)
	return err
}

func (m *defaultActAppDeploymentResourceModel) Delete(ctx context.Context, iD string) error {
	assetActAppDeploymentResourceIDKey := fmt.Sprintf("%s%v", cacheAssetActAppDeploymentResourceIDPrefix, iD)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `ID_` = ?", m.table)
		return conn.ExecCtx(ctx, query, iD)
	}, assetActAppDeploymentResourceIDKey)
	return err
}

func (m *defaultActAppDeploymentResourceModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetActAppDeploymentResourceIDPrefix, primary)
}

func (m *defaultActAppDeploymentResourceModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actAppDeploymentResourceRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultActAppDeploymentResourceModel) tableName() string {
	return m.table
}
