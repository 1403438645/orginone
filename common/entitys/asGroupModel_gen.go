// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asGroupFieldNames          = builder.RawFieldNames(&AsGroup{})
	asGroupRows                = strings.Join(asGroupFieldNames, ",")
	asGroupRowsExpectAutoSet   = strings.Join(stringx.Remove(asGroupFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	asGroupRowsWithPlaceHolder = strings.Join(stringx.Remove(asGroupFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsGroupIdPrefix = "cache:asset:asGroup:id:"
)

type (
	asGroupModel interface {
		Insert(ctx context.Context, data *AsGroup) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AsGroup, error)
		Update(ctx context.Context, data *AsGroup) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAsGroupModel struct {
		sqlc.CachedConn
		table string
	}

	AsGroup struct {
		Id        int64          `db:"id"`
		GroupName sql.NullString `db:"group_name"` // 分组名称
		Status    sql.NullInt64  `db:"status"`
		AppId     string         `db:"app_id"`
	}
)

func newAsGroupModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsGroupModel {
	return &defaultAsGroupModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_group`",
	}
}

func (m *defaultAsGroupModel) Insert(ctx context.Context, data *AsGroup) (sql.Result, error) {
	assetAsGroupIdKey := fmt.Sprintf("%s%v", cacheAssetAsGroupIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, asGroupRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.GroupName, data.Status, data.AppId)
	}, assetAsGroupIdKey)
	return ret, err
}

func (m *defaultAsGroupModel) FindOne(ctx context.Context, id int64) (*AsGroup, error) {
	assetAsGroupIdKey := fmt.Sprintf("%s%v", cacheAssetAsGroupIdPrefix, id)
	var resp AsGroup
	err := m.QueryRowCtx(ctx, &resp, assetAsGroupIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asGroupRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsGroupModel) Update(ctx context.Context, data *AsGroup) error {
	assetAsGroupIdKey := fmt.Sprintf("%s%v", cacheAssetAsGroupIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asGroupRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.GroupName, data.Status, data.AppId, data.Id)
	}, assetAsGroupIdKey)
	return err
}

func (m *defaultAsGroupModel) Delete(ctx context.Context, id int64) error {
	assetAsGroupIdKey := fmt.Sprintf("%s%v", cacheAssetAsGroupIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsGroupIdKey)
	return err
}

func (m *defaultAsGroupModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsGroupIdPrefix, primary)
}

func (m *defaultAsGroupModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asGroupRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsGroupModel) tableName() string {
	return m.table
}
