// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bladeCodeFieldNames          = builder.RawFieldNames(&BladeCode{})
	bladeCodeRows                = strings.Join(bladeCodeFieldNames, ",")
	bladeCodeRowsExpectAutoSet   = strings.Join(stringx.Remove(bladeCodeFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	bladeCodeRowsWithPlaceHolder = strings.Join(stringx.Remove(bladeCodeFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetBladeCodeIdPrefix = "cache:asset:bladeCode:id:"
)

type (
	bladeCodeModel interface {
		Insert(ctx context.Context, data *BladeCode) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BladeCode, error)
		Update(ctx context.Context, data *BladeCode) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBladeCodeModel struct {
		sqlc.CachedConn
		table string
	}

	BladeCode struct {
		Id          int64          `db:"id"`           // 主键
		ServiceName sql.NullString `db:"service_name"` // 服务名称
		CodeName    sql.NullString `db:"code_name"`    // 模块名称
		TableName   sql.NullString `db:"table_name"`   // 表名
		TablePrefix sql.NullString `db:"table_prefix"` // 表前缀
		PkName      sql.NullString `db:"pk_name"`      // 主键名
		PackageName sql.NullString `db:"package_name"` // 后端包名
		ApiPath     sql.NullString `db:"api_path"`     // 后端路径
		WebPath     sql.NullString `db:"web_path"`     // 前端路径
		IsDeleted   int64          `db:"is_deleted"`   // 是否已删除
	}
)

func newBladeCodeModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultBladeCodeModel {
	return &defaultBladeCodeModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`blade_code`",
	}
}

func (m *defaultBladeCodeModel) Insert(ctx context.Context, data *BladeCode) (sql.Result, error) {
	assetBladeCodeIdKey := fmt.Sprintf("%s%v", cacheAssetBladeCodeIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, bladeCodeRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ServiceName, data.CodeName, data.TableName, data.TablePrefix, data.PkName, data.PackageName, data.ApiPath, data.WebPath, data.IsDeleted)
	}, assetBladeCodeIdKey)
	return ret, err
}

func (m *defaultBladeCodeModel) FindOne(ctx context.Context, id int64) (*BladeCode, error) {
	assetBladeCodeIdKey := fmt.Sprintf("%s%v", cacheAssetBladeCodeIdPrefix, id)
	var resp BladeCode
	err := m.QueryRowCtx(ctx, &resp, assetBladeCodeIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bladeCodeRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBladeCodeModel) Update(ctx context.Context, data *BladeCode) error {
	assetBladeCodeIdKey := fmt.Sprintf("%s%v", cacheAssetBladeCodeIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, bladeCodeRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ServiceName, data.CodeName, data.TableName, data.TablePrefix, data.PkName, data.PackageName, data.ApiPath, data.WebPath, data.IsDeleted, data.Id)
	}, assetBladeCodeIdKey)
	return err
}

func (m *defaultBladeCodeModel) Delete(ctx context.Context, id int64) error {
	assetBladeCodeIdKey := fmt.Sprintf("%s%v", cacheAssetBladeCodeIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetBladeCodeIdKey)
	return err
}

func (m *defaultBladeCodeModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetBladeCodeIdPrefix, primary)
}

func (m *defaultBladeCodeModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bladeCodeRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBladeCodeModel) tableName() string {
	return m.table
}
