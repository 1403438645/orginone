// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asPropertiesDistributionFieldNames          = builder.RawFieldNames(&AsPropertiesDistribution{})
	asPropertiesDistributionRows                = strings.Join(asPropertiesDistributionFieldNames, ",")
	asPropertiesDistributionRowsExpectAutoSet   = strings.Join(stringx.Remove(asPropertiesDistributionFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	asPropertiesDistributionRowsWithPlaceHolder = strings.Join(stringx.Remove(asPropertiesDistributionFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsPropertiesDistributionIdPrefix = "cache:asset:asPropertiesDistribution:id:"
)

type (
	asPropertiesDistributionModel interface {
		Insert(ctx context.Context, data *AsPropertiesDistribution) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AsPropertiesDistribution, error)
		Update(ctx context.Context, data *AsPropertiesDistribution) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAsPropertiesDistributionModel struct {
		sqlc.CachedConn
		table string
	}

	AsPropertiesDistribution struct {
		Id           int64         `db:"id"`            // 主键
		PropertiesId int64         `db:"properties_id"` // 性质id
		TenantId     int64         `db:"tenant_id"`     // 租户id
		CreateTime   time.Time     `db:"create_time"`   // 创建时间
		UpdateTime   time.Time     `db:"update_time"`   // 更新时间
		CreateUser   sql.NullInt64 `db:"create_user"`   // 创建用户
		UpdateUser   sql.NullInt64 `db:"update_user"`   // 更新用户
		IsDeleted    int64         `db:"is_deleted"`    // 是否被删除
		Status       int64         `db:"status"`        // 状态
	}
)

func newAsPropertiesDistributionModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsPropertiesDistributionModel {
	return &defaultAsPropertiesDistributionModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_properties_distribution`",
	}
}

func (m *defaultAsPropertiesDistributionModel) Insert(ctx context.Context, data *AsPropertiesDistribution) (sql.Result, error) {
	assetAsPropertiesDistributionIdKey := fmt.Sprintf("%s%v", cacheAssetAsPropertiesDistributionIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, asPropertiesDistributionRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.PropertiesId, data.TenantId, data.CreateUser, data.UpdateUser, data.IsDeleted, data.Status)
	}, assetAsPropertiesDistributionIdKey)
	return ret, err
}

func (m *defaultAsPropertiesDistributionModel) FindOne(ctx context.Context, id int64) (*AsPropertiesDistribution, error) {
	assetAsPropertiesDistributionIdKey := fmt.Sprintf("%s%v", cacheAssetAsPropertiesDistributionIdPrefix, id)
	var resp AsPropertiesDistribution
	err := m.QueryRowCtx(ctx, &resp, assetAsPropertiesDistributionIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asPropertiesDistributionRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsPropertiesDistributionModel) Update(ctx context.Context, data *AsPropertiesDistribution) error {
	assetAsPropertiesDistributionIdKey := fmt.Sprintf("%s%v", cacheAssetAsPropertiesDistributionIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asPropertiesDistributionRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.PropertiesId, data.TenantId, data.CreateUser, data.UpdateUser, data.IsDeleted, data.Status, data.Id)
	}, assetAsPropertiesDistributionIdKey)
	return err
}

func (m *defaultAsPropertiesDistributionModel) Delete(ctx context.Context, id int64) error {
	assetAsPropertiesDistributionIdKey := fmt.Sprintf("%s%v", cacheAssetAsPropertiesDistributionIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsPropertiesDistributionIdKey)
	return err
}

func (m *defaultAsPropertiesDistributionModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsPropertiesDistributionIdPrefix, primary)
}

func (m *defaultAsPropertiesDistributionModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asPropertiesDistributionRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsPropertiesDistributionModel) tableName() string {
	return m.table
}
