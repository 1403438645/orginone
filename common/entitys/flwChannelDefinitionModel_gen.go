// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	flwChannelDefinitionFieldNames          = builder.RawFieldNames(&FlwChannelDefinition{})
	flwChannelDefinitionRows                = strings.Join(flwChannelDefinitionFieldNames, ",")
	flwChannelDefinitionRowsExpectAutoSet   = strings.Join(stringx.Remove(flwChannelDefinitionFieldNames, "`create_time`", "`update_time`"), ",")
	flwChannelDefinitionRowsWithPlaceHolder = strings.Join(stringx.Remove(flwChannelDefinitionFieldNames, "`ID_`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetFlwChannelDefinitionIDPrefix                 = "cache:asset:flwChannelDefinition:iD:"
	cacheAssetFlwChannelDefinitionKEYVERSIONTENANTIDPrefix = "cache:asset:flwChannelDefinition:kEY:vERSION:tENANTID:"
)

type (
	flwChannelDefinitionModel interface {
		Insert(ctx context.Context, data *FlwChannelDefinition) (sql.Result, error)
		FindOne(ctx context.Context, iD string) (*FlwChannelDefinition, error)
		FindOneByKEYVERSIONTENANTID(ctx context.Context, kEY sql.NullString, vERSION sql.NullInt64, tENANTID sql.NullString) (*FlwChannelDefinition, error)
		Update(ctx context.Context, data *FlwChannelDefinition) error
		Delete(ctx context.Context, iD string) error
	}

	defaultFlwChannelDefinitionModel struct {
		sqlc.CachedConn
		table string
	}

	FlwChannelDefinition struct {
		ID           string         `db:"ID_"`
		NAME         sql.NullString `db:"NAME_"`
		VERSION      sql.NullInt64  `db:"VERSION_"`
		KEY          sql.NullString `db:"KEY_"`
		CATEGORY     sql.NullString `db:"CATEGORY_"`
		DEPLOYMENTID sql.NullString `db:"DEPLOYMENT_ID_"`
		CREATETIME   sql.NullTime   `db:"CREATE_TIME_"`
		TENANTID     sql.NullString `db:"TENANT_ID_"`
		RESOURCENAME sql.NullString `db:"RESOURCE_NAME_"`
		DESCRIPTION  sql.NullString `db:"DESCRIPTION_"`
	}
)

func newFlwChannelDefinitionModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultFlwChannelDefinitionModel {
	return &defaultFlwChannelDefinitionModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`flw_channel_definition`",
	}
}

func (m *defaultFlwChannelDefinitionModel) Insert(ctx context.Context, data *FlwChannelDefinition) (sql.Result, error) {
	assetFlwChannelDefinitionIDKey := fmt.Sprintf("%s%v", cacheAssetFlwChannelDefinitionIDPrefix, data.ID)
	assetFlwChannelDefinitionKEYVERSIONTENANTIDKey := fmt.Sprintf("%s%v:%v:%v", cacheAssetFlwChannelDefinitionKEYVERSIONTENANTIDPrefix, data.KEY, data.VERSION, data.TENANTID)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, flwChannelDefinitionRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ID, data.NAME, data.VERSION, data.KEY, data.CATEGORY, data.DEPLOYMENTID, data.CREATETIME, data.TENANTID, data.RESOURCENAME, data.DESCRIPTION)
	}, assetFlwChannelDefinitionIDKey, assetFlwChannelDefinitionKEYVERSIONTENANTIDKey)
	return ret, err
}

func (m *defaultFlwChannelDefinitionModel) FindOne(ctx context.Context, iD string) (*FlwChannelDefinition, error) {
	assetFlwChannelDefinitionIDKey := fmt.Sprintf("%s%v", cacheAssetFlwChannelDefinitionIDPrefix, iD)
	var resp FlwChannelDefinition
	err := m.QueryRowCtx(ctx, &resp, assetFlwChannelDefinitionIDKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", flwChannelDefinitionRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, iD)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFlwChannelDefinitionModel) FindOneByKEYVERSIONTENANTID(ctx context.Context, kEY sql.NullString, vERSION sql.NullInt64, tENANTID sql.NullString) (*FlwChannelDefinition, error) {
	assetFlwChannelDefinitionKEYVERSIONTENANTIDKey := fmt.Sprintf("%s%v:%v:%v", cacheAssetFlwChannelDefinitionKEYVERSIONTENANTIDPrefix, kEY, vERSION, tENANTID)
	var resp FlwChannelDefinition
	err := m.QueryRowIndexCtx(ctx, &resp, assetFlwChannelDefinitionKEYVERSIONTENANTIDKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `KEY_` = ? and `VERSION_` = ? and `TENANT_ID_` = ? limit 1", flwChannelDefinitionRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, kEY, vERSION, tENANTID); err != nil {
			return nil, err
		}
		return resp.ID, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFlwChannelDefinitionModel) Update(ctx context.Context, data *FlwChannelDefinition) error {
	assetFlwChannelDefinitionIDKey := fmt.Sprintf("%s%v", cacheAssetFlwChannelDefinitionIDPrefix, data.ID)
	assetFlwChannelDefinitionKEYVERSIONTENANTIDKey := fmt.Sprintf("%s%v:%v:%v", cacheAssetFlwChannelDefinitionKEYVERSIONTENANTIDPrefix, data.KEY, data.VERSION, data.TENANTID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `ID_` = ?", m.table, flwChannelDefinitionRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.NAME, data.VERSION, data.KEY, data.CATEGORY, data.DEPLOYMENTID, data.CREATETIME, data.TENANTID, data.RESOURCENAME, data.DESCRIPTION, data.ID)
	}, assetFlwChannelDefinitionIDKey, assetFlwChannelDefinitionKEYVERSIONTENANTIDKey)
	return err
}

func (m *defaultFlwChannelDefinitionModel) Delete(ctx context.Context, iD string) error {
	data, err := m.FindOne(ctx, iD)
	if err != nil {
		return err
	}

	assetFlwChannelDefinitionIDKey := fmt.Sprintf("%s%v", cacheAssetFlwChannelDefinitionIDPrefix, iD)
	assetFlwChannelDefinitionKEYVERSIONTENANTIDKey := fmt.Sprintf("%s%v:%v:%v", cacheAssetFlwChannelDefinitionKEYVERSIONTENANTIDPrefix, data.KEY, data.VERSION, data.TENANTID)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `ID_` = ?", m.table)
		return conn.ExecCtx(ctx, query, iD)
	}, assetFlwChannelDefinitionKEYVERSIONTENANTIDKey, assetFlwChannelDefinitionIDKey)
	return err
}

func (m *defaultFlwChannelDefinitionModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetFlwChannelDefinitionIDPrefix, primary)
}

func (m *defaultFlwChannelDefinitionModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", flwChannelDefinitionRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultFlwChannelDefinitionModel) tableName() string {
	return m.table
}
