// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asItopsFieldNames          = builder.RawFieldNames(&AsItops{})
	asItopsRows                = strings.Join(asItopsFieldNames, ",")
	asItopsRowsExpectAutoSet   = strings.Join(stringx.Remove(asItopsFieldNames, "`create_time`", "`update_time`"), ",")
	asItopsRowsWithPlaceHolder = strings.Join(stringx.Remove(asItopsFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsItopsIdPrefix = "cache:asset:asItops:id:"
)

type (
	asItopsModel interface {
		Insert(ctx context.Context, data *AsItops) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AsItops, error)
		Update(ctx context.Context, data *AsItops) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAsItopsModel struct {
		sqlc.CachedConn
		table string
	}

	AsItops struct {
		Id          int64          `db:"id"`
		StartTime   sql.NullTime   `db:"start_time"`
		EndTime     sql.NullTime   `db:"end_time"`
		Content     sql.NullString `db:"content"`
		StartDate   sql.NullTime   `db:"start_date"`
		Remark      sql.NullString `db:"remark"`
		Tp          sql.NullInt64  `db:"tp"`           // 1:自动扫描并修复；2、找到租户；3、找到用户
		IfEnd       sql.NullInt64  `db:"if_end"`       // 0:未结束；1：已结束
		IfModifyend sql.NullInt64  `db:"if_modifyend"` // 1:已修复完成；2：未修复完成
	}
)

func newAsItopsModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsItopsModel {
	return &defaultAsItopsModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_itops`",
	}
}

func (m *defaultAsItopsModel) Insert(ctx context.Context, data *AsItops) (sql.Result, error) {
	assetAsItopsIdKey := fmt.Sprintf("%s%v", cacheAssetAsItopsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, asItopsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.StartTime, data.EndTime, data.Content, data.StartDate, data.Remark, data.Tp, data.IfEnd, data.IfModifyend)
	}, assetAsItopsIdKey)
	return ret, err
}

func (m *defaultAsItopsModel) FindOne(ctx context.Context, id int64) (*AsItops, error) {
	assetAsItopsIdKey := fmt.Sprintf("%s%v", cacheAssetAsItopsIdPrefix, id)
	var resp AsItops
	err := m.QueryRowCtx(ctx, &resp, assetAsItopsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asItopsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsItopsModel) Update(ctx context.Context, data *AsItops) error {
	assetAsItopsIdKey := fmt.Sprintf("%s%v", cacheAssetAsItopsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asItopsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.StartTime, data.EndTime, data.Content, data.StartDate, data.Remark, data.Tp, data.IfEnd, data.IfModifyend, data.Id)
	}, assetAsItopsIdKey)
	return err
}

func (m *defaultAsItopsModel) Delete(ctx context.Context, id int64) error {
	assetAsItopsIdKey := fmt.Sprintf("%s%v", cacheAssetAsItopsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsItopsIdKey)
	return err
}

func (m *defaultAsItopsModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsItopsIdPrefix, primary)
}

func (m *defaultAsItopsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asItopsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsItopsModel) tableName() string {
	return m.table
}
