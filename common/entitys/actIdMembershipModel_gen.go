// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	actIdMembershipFieldNames          = builder.RawFieldNames(&ActIdMembership{})
	actIdMembershipRows                = strings.Join(actIdMembershipFieldNames, ",")
	actIdMembershipRowsExpectAutoSet   = strings.Join(stringx.Remove(actIdMembershipFieldNames, "`create_time`", "`update_time`"), ",")
	actIdMembershipRowsWithPlaceHolder = strings.Join(stringx.Remove(actIdMembershipFieldNames, "`USER_ID_`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetActIdMembershipUSERIDPrefix = "cache:asset:actIdMembership:uSERID:"
)

type (
	actIdMembershipModel interface {
		Insert(ctx context.Context, data *ActIdMembership) (sql.Result, error)
		FindOne(ctx context.Context, uSERID string) (*ActIdMembership, error)
		Update(ctx context.Context, data *ActIdMembership) error
		Delete(ctx context.Context, uSERID string) error
	}

	defaultActIdMembershipModel struct {
		sqlc.CachedConn
		table string
	}

	ActIdMembership struct {
		USERID  string `db:"USER_ID_"`
		GROUPID string `db:"GROUP_ID_"`
	}
)

func newActIdMembershipModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultActIdMembershipModel {
	return &defaultActIdMembershipModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`act_id_membership`",
	}
}

func (m *defaultActIdMembershipModel) Insert(ctx context.Context, data *ActIdMembership) (sql.Result, error) {
	assetActIdMembershipUSERIDKey := fmt.Sprintf("%s%v", cacheAssetActIdMembershipUSERIDPrefix, data.USERID)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, actIdMembershipRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.USERID, data.GROUPID)
	}, assetActIdMembershipUSERIDKey)
	return ret, err
}

func (m *defaultActIdMembershipModel) FindOne(ctx context.Context, uSERID string) (*ActIdMembership, error) {
	assetActIdMembershipUSERIDKey := fmt.Sprintf("%s%v", cacheAssetActIdMembershipUSERIDPrefix, uSERID)
	var resp ActIdMembership
	err := m.QueryRowCtx(ctx, &resp, assetActIdMembershipUSERIDKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `USER_ID_` = ? limit 1", actIdMembershipRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, uSERID)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActIdMembershipModel) Update(ctx context.Context, data *ActIdMembership) error {
	assetActIdMembershipUSERIDKey := fmt.Sprintf("%s%v", cacheAssetActIdMembershipUSERIDPrefix, data.USERID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `USER_ID_` = ?", m.table, actIdMembershipRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.GROUPID, data.USERID)
	}, assetActIdMembershipUSERIDKey)
	return err
}

func (m *defaultActIdMembershipModel) Delete(ctx context.Context, uSERID string) error {
	assetActIdMembershipUSERIDKey := fmt.Sprintf("%s%v", cacheAssetActIdMembershipUSERIDPrefix, uSERID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `USER_ID_` = ?", m.table)
		return conn.ExecCtx(ctx, query, uSERID)
	}, assetActIdMembershipUSERIDKey)
	return err
}

func (m *defaultActIdMembershipModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetActIdMembershipUSERIDPrefix, primary)
}

func (m *defaultActIdMembershipModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `USER_ID_` = ? limit 1", actIdMembershipRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultActIdMembershipModel) tableName() string {
	return m.table
}
