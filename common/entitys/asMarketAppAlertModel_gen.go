// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asMarketAppAlertFieldNames          = builder.RawFieldNames(&AsMarketAppAlert{})
	asMarketAppAlertRows                = strings.Join(asMarketAppAlertFieldNames, ",")
	asMarketAppAlertRowsExpectAutoSet   = strings.Join(stringx.Remove(asMarketAppAlertFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	asMarketAppAlertRowsWithPlaceHolder = strings.Join(stringx.Remove(asMarketAppAlertFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsMarketAppAlertIdPrefix = "cache:asset:asMarketAppAlert:id:"
)

type (
	asMarketAppAlertModel interface {
		Insert(ctx context.Context, data *AsMarketAppAlert) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AsMarketAppAlert, error)
		Update(ctx context.Context, data *AsMarketAppAlert) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAsMarketAppAlertModel struct {
		sqlc.CachedConn
		table string
	}

	AsMarketAppAlert struct {
		Id                  int64          `db:"id"`                    // 主键
		AlertTitle          sql.NullString `db:"alert_title"`           // 标题
		AlertContent        sql.NullString `db:"alert_content"`         // 内容
		AlertBusiness       sql.NullString `db:"alert_business"`        // 业务
		AlertEmergencyLevel sql.NullInt64  `db:"alert_emergency_level"` // 紧急程度
		AlertReleaseAppId   sql.NullInt64  `db:"alert_release_app_id"`  // 发布方
		AlertReleaseTime    sql.NullTime   `db:"alert_release_time"`    // 发布时间
		AlertRoleIds        sql.NullString `db:"alert_role_ids"`        // 分发对象角色
		AlertJobIds         sql.NullString `db:"alert_job_ids"`         // 分发对象岗位
		AlertStatus         sql.NullInt64  `db:"alert_status"`          // 预警消息状态
		CreateUser          sql.NullInt64  `db:"create_user"`           // 创建人
		CreateTime          sql.NullTime   `db:"create_time"`           // 创建时间
		UpdateUser          sql.NullInt64  `db:"update_user"`           // 修改人
		UpdateTime          sql.NullTime   `db:"update_time"`           // 修改时间
		Status              sql.NullInt64  `db:"status"`                // 状态
		IsDeleted           sql.NullInt64  `db:"is_deleted"`            // 是否已删除
	}
)

func newAsMarketAppAlertModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsMarketAppAlertModel {
	return &defaultAsMarketAppAlertModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_market_app_alert`",
	}
}

func (m *defaultAsMarketAppAlertModel) Insert(ctx context.Context, data *AsMarketAppAlert) (sql.Result, error) {
	assetAsMarketAppAlertIdKey := fmt.Sprintf("%s%v", cacheAssetAsMarketAppAlertIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, asMarketAppAlertRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.AlertTitle, data.AlertContent, data.AlertBusiness, data.AlertEmergencyLevel, data.AlertReleaseAppId, data.AlertReleaseTime, data.AlertRoleIds, data.AlertJobIds, data.AlertStatus, data.CreateUser, data.UpdateUser, data.Status, data.IsDeleted)
	}, assetAsMarketAppAlertIdKey)
	return ret, err
}

func (m *defaultAsMarketAppAlertModel) FindOne(ctx context.Context, id int64) (*AsMarketAppAlert, error) {
	assetAsMarketAppAlertIdKey := fmt.Sprintf("%s%v", cacheAssetAsMarketAppAlertIdPrefix, id)
	var resp AsMarketAppAlert
	err := m.QueryRowCtx(ctx, &resp, assetAsMarketAppAlertIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asMarketAppAlertRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsMarketAppAlertModel) Update(ctx context.Context, data *AsMarketAppAlert) error {
	assetAsMarketAppAlertIdKey := fmt.Sprintf("%s%v", cacheAssetAsMarketAppAlertIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asMarketAppAlertRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.AlertTitle, data.AlertContent, data.AlertBusiness, data.AlertEmergencyLevel, data.AlertReleaseAppId, data.AlertReleaseTime, data.AlertRoleIds, data.AlertJobIds, data.AlertStatus, data.CreateUser, data.UpdateUser, data.Status, data.IsDeleted, data.Id)
	}, assetAsMarketAppAlertIdKey)
	return err
}

func (m *defaultAsMarketAppAlertModel) Delete(ctx context.Context, id int64) error {
	assetAsMarketAppAlertIdKey := fmt.Sprintf("%s%v", cacheAssetAsMarketAppAlertIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsMarketAppAlertIdKey)
	return err
}

func (m *defaultAsMarketAppAlertModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsMarketAppAlertIdPrefix, primary)
}

func (m *defaultAsMarketAppAlertModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asMarketAppAlertRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsMarketAppAlertModel) tableName() string {
	return m.table
}
