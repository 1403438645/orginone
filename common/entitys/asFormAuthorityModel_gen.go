// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asFormAuthorityFieldNames          = builder.RawFieldNames(&AsFormAuthority{})
	asFormAuthorityRows                = strings.Join(asFormAuthorityFieldNames, ",")
	asFormAuthorityRowsExpectAutoSet   = strings.Join(stringx.Remove(asFormAuthorityFieldNames, "`create_time`", "`update_time`"), ",")
	asFormAuthorityRowsWithPlaceHolder = strings.Join(stringx.Remove(asFormAuthorityFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsFormAuthorityIdPrefix = "cache:asset:asFormAuthority:id:"
)

type (
	asFormAuthorityModel interface {
		Insert(ctx context.Context, data *AsFormAuthority) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*AsFormAuthority, error)
		Update(ctx context.Context, data *AsFormAuthority) error
		Delete(ctx context.Context, id string) error
	}

	defaultAsFormAuthorityModel struct {
		sqlc.CachedConn
		table string
	}

	AsFormAuthority struct {
		Id          string `db:"id"`
		ProcModelId string `db:"proc_model_id"`
		ActId       string `db:"act_id"`
		FormItemKey string `db:"form_item_key"`
		Authority   int64  `db:"authority"` // 1不可见，2可见+不可编辑，3可见+可编辑，4必填
	}
)

func newAsFormAuthorityModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsFormAuthorityModel {
	return &defaultAsFormAuthorityModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_form_authority`",
	}
}

func (m *defaultAsFormAuthorityModel) Insert(ctx context.Context, data *AsFormAuthority) (sql.Result, error) {
	assetAsFormAuthorityIdKey := fmt.Sprintf("%s%v", cacheAssetAsFormAuthorityIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, asFormAuthorityRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.ProcModelId, data.ActId, data.FormItemKey, data.Authority)
	}, assetAsFormAuthorityIdKey)
	return ret, err
}

func (m *defaultAsFormAuthorityModel) FindOne(ctx context.Context, id string) (*AsFormAuthority, error) {
	assetAsFormAuthorityIdKey := fmt.Sprintf("%s%v", cacheAssetAsFormAuthorityIdPrefix, id)
	var resp AsFormAuthority
	err := m.QueryRowCtx(ctx, &resp, assetAsFormAuthorityIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asFormAuthorityRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsFormAuthorityModel) Update(ctx context.Context, data *AsFormAuthority) error {
	assetAsFormAuthorityIdKey := fmt.Sprintf("%s%v", cacheAssetAsFormAuthorityIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asFormAuthorityRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ProcModelId, data.ActId, data.FormItemKey, data.Authority, data.Id)
	}, assetAsFormAuthorityIdKey)
	return err
}

func (m *defaultAsFormAuthorityModel) Delete(ctx context.Context, id string) error {
	assetAsFormAuthorityIdKey := fmt.Sprintf("%s%v", cacheAssetAsFormAuthorityIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsFormAuthorityIdKey)
	return err
}

func (m *defaultAsFormAuthorityModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsFormAuthorityIdPrefix, primary)
}

func (m *defaultAsFormAuthorityModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asFormAuthorityRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsFormAuthorityModel) tableName() string {
	return m.table
}
