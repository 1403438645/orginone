// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	basedataClppFieldNames          = builder.RawFieldNames(&BasedataClpp{})
	basedataClppRows                = strings.Join(basedataClppFieldNames, ",")
	basedataClppRowsExpectAutoSet   = strings.Join(stringx.Remove(basedataClppFieldNames, "`create_time`", "`update_time`"), ",")
	basedataClppRowsWithPlaceHolder = strings.Join(stringx.Remove(basedataClppFieldNames, "`RECID`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetBasedataClppRECIDPrefix = "cache:asset:basedataClpp:rECID:"
)

type (
	basedataClppModel interface {
		Insert(ctx context.Context, data *BasedataClpp) (sql.Result, error)
		FindOne(ctx context.Context, rECID int64) (*BasedataClpp, error)
		Update(ctx context.Context, data *BasedataClpp) error
		Delete(ctx context.Context, rECID int64) error
	}

	defaultBasedataClppModel struct {
		sqlc.CachedConn
		table string
	}

	BasedataClpp struct {
		RECID      int64           `db:"RECID"`
		RECVER     sql.NullInt64   `db:"RECVER"`
		CODE       sql.NullString  `db:"CODE"`
		NAME       sql.NullString  `db:"NAME"`
		STATE      sql.NullString  `db:"STATE"`
		ORDER      sql.NullFloat64 `db:"ORDER_"`
		OLDID      sql.NullString  `db:"OLDID"`
		SHORTNAME  sql.NullString  `db:"SHORTNAME"`
		PARENTID   sql.NullString  `db:"PARENTID"`
		SHIFOUMJJD sql.NullString  `db:"SHIFOUMJJD"`
		LEVEL      sql.NullString  `db:"LEVEL"`
		ORGID      sql.NullString  `db:"ORGID"`
	}
)

func newBasedataClppModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultBasedataClppModel {
	return &defaultBasedataClppModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`basedata_clpp`",
	}
}

func (m *defaultBasedataClppModel) Insert(ctx context.Context, data *BasedataClpp) (sql.Result, error) {
	assetBasedataClppRECIDKey := fmt.Sprintf("%s%v", cacheAssetBasedataClppRECIDPrefix, data.RECID)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, basedataClppRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.RECID, data.RECVER, data.CODE, data.NAME, data.STATE, data.ORDER, data.OLDID, data.SHORTNAME, data.PARENTID, data.SHIFOUMJJD, data.LEVEL, data.ORGID)
	}, assetBasedataClppRECIDKey)
	return ret, err
}

func (m *defaultBasedataClppModel) FindOne(ctx context.Context, rECID int64) (*BasedataClpp, error) {
	assetBasedataClppRECIDKey := fmt.Sprintf("%s%v", cacheAssetBasedataClppRECIDPrefix, rECID)
	var resp BasedataClpp
	err := m.QueryRowCtx(ctx, &resp, assetBasedataClppRECIDKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `RECID` = ? limit 1", basedataClppRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, rECID)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBasedataClppModel) Update(ctx context.Context, data *BasedataClpp) error {
	assetBasedataClppRECIDKey := fmt.Sprintf("%s%v", cacheAssetBasedataClppRECIDPrefix, data.RECID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `RECID` = ?", m.table, basedataClppRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.RECVER, data.CODE, data.NAME, data.STATE, data.ORDER, data.OLDID, data.SHORTNAME, data.PARENTID, data.SHIFOUMJJD, data.LEVEL, data.ORGID, data.RECID)
	}, assetBasedataClppRECIDKey)
	return err
}

func (m *defaultBasedataClppModel) Delete(ctx context.Context, rECID int64) error {
	assetBasedataClppRECIDKey := fmt.Sprintf("%s%v", cacheAssetBasedataClppRECIDPrefix, rECID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `RECID` = ?", m.table)
		return conn.ExecCtx(ctx, query, rECID)
	}, assetBasedataClppRECIDKey)
	return err
}

func (m *defaultBasedataClppModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetBasedataClppRECIDPrefix, primary)
}

func (m *defaultBasedataClppModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `RECID` = ? limit 1", basedataClppRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBasedataClppModel) tableName() string {
	return m.table
}
