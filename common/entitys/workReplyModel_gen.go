// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	workReplyFieldNames          = builder.RawFieldNames(&WorkReply{})
	workReplyRows                = strings.Join(workReplyFieldNames, ",")
	workReplyRowsExpectAutoSet   = strings.Join(stringx.Remove(workReplyFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	workReplyRowsWithPlaceHolder = strings.Join(stringx.Remove(workReplyFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetWorkReplyIdPrefix = "cache:asset:workReply:id:"
)

type (
	workReplyModel interface {
		Insert(ctx context.Context, data *WorkReply) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*WorkReply, error)
		Update(ctx context.Context, data *WorkReply) error
		Delete(ctx context.Context, id int64) error
	}

	defaultWorkReplyModel struct {
		sqlc.CachedConn
		table string
	}

	WorkReply struct {
		Id                int64          `db:"id"`                  // 主键
		ProcessInstanceId string         `db:"process_instance_id"` // 流程实例id
		TaskId            string         `db:"task_id"`             // 任务id
		UserName          string         `db:"user_name"`           // 用户名称
		UserId            string         `db:"user_id"`             // 用户id
		Content           sql.NullString `db:"content"`             // 回复内容
		ParentId          int64          `db:"parent_id"`           // 父id
		Tp                int64          `db:"tp"`                  // 0-工作人员回复 1-是客户回复
		IsRead            int64          `db:"is_read"`             // 是否已读；0：未读；1：已读
		IsDelete          int64          `db:"is_delete"`           // 是否删除 默认0 0-未删除 1-删除
		UpdateTime        time.Time      `db:"update_time"`         // 更新时间
		CreateTime        time.Time      `db:"create_time"`         // 创建时间
	}
)

func newWorkReplyModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultWorkReplyModel {
	return &defaultWorkReplyModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`work_reply`",
	}
}

func (m *defaultWorkReplyModel) Insert(ctx context.Context, data *WorkReply) (sql.Result, error) {
	assetWorkReplyIdKey := fmt.Sprintf("%s%v", cacheAssetWorkReplyIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, workReplyRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ProcessInstanceId, data.TaskId, data.UserName, data.UserId, data.Content, data.ParentId, data.Tp, data.IsRead, data.IsDelete)
	}, assetWorkReplyIdKey)
	return ret, err
}

func (m *defaultWorkReplyModel) FindOne(ctx context.Context, id int64) (*WorkReply, error) {
	assetWorkReplyIdKey := fmt.Sprintf("%s%v", cacheAssetWorkReplyIdPrefix, id)
	var resp WorkReply
	err := m.QueryRowCtx(ctx, &resp, assetWorkReplyIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", workReplyRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultWorkReplyModel) Update(ctx context.Context, data *WorkReply) error {
	assetWorkReplyIdKey := fmt.Sprintf("%s%v", cacheAssetWorkReplyIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, workReplyRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ProcessInstanceId, data.TaskId, data.UserName, data.UserId, data.Content, data.ParentId, data.Tp, data.IsRead, data.IsDelete, data.Id)
	}, assetWorkReplyIdKey)
	return err
}

func (m *defaultWorkReplyModel) Delete(ctx context.Context, id int64) error {
	assetWorkReplyIdKey := fmt.Sprintf("%s%v", cacheAssetWorkReplyIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetWorkReplyIdKey)
	return err
}

func (m *defaultWorkReplyModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetWorkReplyIdPrefix, primary)
}

func (m *defaultWorkReplyModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", workReplyRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultWorkReplyModel) tableName() string {
	return m.table
}
