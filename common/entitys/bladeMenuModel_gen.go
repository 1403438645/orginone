// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bladeMenuFieldNames          = builder.RawFieldNames(&BladeMenu{})
	bladeMenuRows                = strings.Join(bladeMenuFieldNames, ",")
	bladeMenuRowsExpectAutoSet   = strings.Join(stringx.Remove(bladeMenuFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	bladeMenuRowsWithPlaceHolder = strings.Join(stringx.Remove(bladeMenuFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetBladeMenuIdPrefix = "cache:asset:bladeMenu:id:"
)

type (
	bladeMenuModel interface {
		Insert(ctx context.Context, data *BladeMenu) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BladeMenu, error)
		Update(ctx context.Context, data *BladeMenu) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBladeMenuModel struct {
		sqlc.CachedConn
		table string
	}

	BladeMenu struct {
		Id        int64          `db:"id"`         // 主键
		ParentId  int64          `db:"parent_id"`  // 父级菜单
		Code      sql.NullString `db:"code"`       // 菜单编号
		Name      sql.NullString `db:"name"`       // 菜单名称
		Alias     sql.NullString `db:"alias"`      // 菜单别名
		Path      sql.NullString `db:"path"`       // 请求地址
		Source    sql.NullString `db:"source"`     // 菜单资源
		Sort      sql.NullInt64  `db:"sort"`       // 排序
		Category  sql.NullInt64  `db:"category"`   // 菜单类型
		Action    int64          `db:"action"`     // 操作按钮类型
		IsOpen    int64          `db:"is_open"`    // 是否打开新页面
		Remark    sql.NullString `db:"remark"`     // 备注
		IsDeleted int64          `db:"is_deleted"` // 是否已删除
	}
)

func newBladeMenuModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultBladeMenuModel {
	return &defaultBladeMenuModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`blade_menu`",
	}
}

func (m *defaultBladeMenuModel) Insert(ctx context.Context, data *BladeMenu) (sql.Result, error) {
	assetBladeMenuIdKey := fmt.Sprintf("%s%v", cacheAssetBladeMenuIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, bladeMenuRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ParentId, data.Code, data.Name, data.Alias, data.Path, data.Source, data.Sort, data.Category, data.Action, data.IsOpen, data.Remark, data.IsDeleted)
	}, assetBladeMenuIdKey)
	return ret, err
}

func (m *defaultBladeMenuModel) FindOne(ctx context.Context, id int64) (*BladeMenu, error) {
	assetBladeMenuIdKey := fmt.Sprintf("%s%v", cacheAssetBladeMenuIdPrefix, id)
	var resp BladeMenu
	err := m.QueryRowCtx(ctx, &resp, assetBladeMenuIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bladeMenuRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBladeMenuModel) Update(ctx context.Context, data *BladeMenu) error {
	assetBladeMenuIdKey := fmt.Sprintf("%s%v", cacheAssetBladeMenuIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, bladeMenuRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ParentId, data.Code, data.Name, data.Alias, data.Path, data.Source, data.Sort, data.Category, data.Action, data.IsOpen, data.Remark, data.IsDeleted, data.Id)
	}, assetBladeMenuIdKey)
	return err
}

func (m *defaultBladeMenuModel) Delete(ctx context.Context, id int64) error {
	assetBladeMenuIdKey := fmt.Sprintf("%s%v", cacheAssetBladeMenuIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetBladeMenuIdKey)
	return err
}

func (m *defaultBladeMenuModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetBladeMenuIdPrefix, primary)
}

func (m *defaultBladeMenuModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bladeMenuRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBladeMenuModel) tableName() string {
	return m.table
}
