// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asInstNodeFieldNames          = builder.RawFieldNames(&AsInstNode{})
	asInstNodeRows                = strings.Join(asInstNodeFieldNames, ",")
	asInstNodeRowsExpectAutoSet   = strings.Join(stringx.Remove(asInstNodeFieldNames, "`create_time`", "`update_time`"), ",")
	asInstNodeRowsWithPlaceHolder = strings.Join(stringx.Remove(asInstNodeFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsInstNodeIdPrefix = "cache:asset:asInstNode:id:"
)

type (
	asInstNodeModel interface {
		Insert(ctx context.Context, data *AsInstNode) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*AsInstNode, error)
		Update(ctx context.Context, data *AsInstNode) error
		Delete(ctx context.Context, id string) error
	}

	defaultAsInstNodeModel struct {
		sqlc.CachedConn
		table string
	}

	AsInstNode struct {
		Id             string         `db:"id"`
		TaskId         sql.NullString `db:"task_id"`
		CandidateUsers sql.NullString `db:"candidate_users"`
		TerminateUsers sql.NullString `db:"terminate_users"`
	}
)

func newAsInstNodeModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsInstNodeModel {
	return &defaultAsInstNodeModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_inst_node`",
	}
}

func (m *defaultAsInstNodeModel) Insert(ctx context.Context, data *AsInstNode) (sql.Result, error) {
	assetAsInstNodeIdKey := fmt.Sprintf("%s%v", cacheAssetAsInstNodeIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, asInstNodeRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.TaskId, data.CandidateUsers, data.TerminateUsers)
	}, assetAsInstNodeIdKey)
	return ret, err
}

func (m *defaultAsInstNodeModel) FindOne(ctx context.Context, id string) (*AsInstNode, error) {
	assetAsInstNodeIdKey := fmt.Sprintf("%s%v", cacheAssetAsInstNodeIdPrefix, id)
	var resp AsInstNode
	err := m.QueryRowCtx(ctx, &resp, assetAsInstNodeIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asInstNodeRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsInstNodeModel) Update(ctx context.Context, data *AsInstNode) error {
	assetAsInstNodeIdKey := fmt.Sprintf("%s%v", cacheAssetAsInstNodeIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asInstNodeRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.TaskId, data.CandidateUsers, data.TerminateUsers, data.Id)
	}, assetAsInstNodeIdKey)
	return err
}

func (m *defaultAsInstNodeModel) Delete(ctx context.Context, id string) error {
	assetAsInstNodeIdKey := fmt.Sprintf("%s%v", cacheAssetAsInstNodeIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsInstNodeIdKey)
	return err
}

func (m *defaultAsInstNodeModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsInstNodeIdPrefix, primary)
}

func (m *defaultAsInstNodeModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asInstNodeRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsInstNodeModel) tableName() string {
	return m.table
}
