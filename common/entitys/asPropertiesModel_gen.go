// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asPropertiesFieldNames          = builder.RawFieldNames(&AsProperties{})
	asPropertiesRows                = strings.Join(asPropertiesFieldNames, ",")
	asPropertiesRowsExpectAutoSet   = strings.Join(stringx.Remove(asPropertiesFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	asPropertiesRowsWithPlaceHolder = strings.Join(stringx.Remove(asPropertiesFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsPropertiesIdPrefix = "cache:asset:asProperties:id:"
)

type (
	asPropertiesModel interface {
		Insert(ctx context.Context, data *AsProperties) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AsProperties, error)
		Update(ctx context.Context, data *AsProperties) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAsPropertiesModel struct {
		sqlc.CachedConn
		table string
	}

	AsProperties struct {
		Id             int64         `db:"id"`              // 主键
		PropertiesName string        `db:"properties_name"` // 岗位名称
		GroupId        int64         `db:"group_id"`        // 租户id
		CreateTime     time.Time     `db:"create_time"`     // 创建时间
		UpdateTime     time.Time     `db:"update_time"`     // 更新时间
		CreateUser     sql.NullInt64 `db:"create_user"`     // 创建用户
		UpdateUser     sql.NullInt64 `db:"update_user"`     // 更新用户
		IsDeleted      int64         `db:"is_deleted"`      // 是否被删除
		Status         int64         `db:"status"`          // 状态
	}
)

func newAsPropertiesModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsPropertiesModel {
	return &defaultAsPropertiesModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_properties`",
	}
}

func (m *defaultAsPropertiesModel) Insert(ctx context.Context, data *AsProperties) (sql.Result, error) {
	assetAsPropertiesIdKey := fmt.Sprintf("%s%v", cacheAssetAsPropertiesIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, asPropertiesRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.PropertiesName, data.GroupId, data.CreateUser, data.UpdateUser, data.IsDeleted, data.Status)
	}, assetAsPropertiesIdKey)
	return ret, err
}

func (m *defaultAsPropertiesModel) FindOne(ctx context.Context, id int64) (*AsProperties, error) {
	assetAsPropertiesIdKey := fmt.Sprintf("%s%v", cacheAssetAsPropertiesIdPrefix, id)
	var resp AsProperties
	err := m.QueryRowCtx(ctx, &resp, assetAsPropertiesIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asPropertiesRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsPropertiesModel) Update(ctx context.Context, data *AsProperties) error {
	assetAsPropertiesIdKey := fmt.Sprintf("%s%v", cacheAssetAsPropertiesIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asPropertiesRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.PropertiesName, data.GroupId, data.CreateUser, data.UpdateUser, data.IsDeleted, data.Status, data.Id)
	}, assetAsPropertiesIdKey)
	return err
}

func (m *defaultAsPropertiesModel) Delete(ctx context.Context, id int64) error {
	assetAsPropertiesIdKey := fmt.Sprintf("%s%v", cacheAssetAsPropertiesIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsPropertiesIdKey)
	return err
}

func (m *defaultAsPropertiesModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsPropertiesIdPrefix, primary)
}

func (m *defaultAsPropertiesModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asPropertiesRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsPropertiesModel) tableName() string {
	return m.table
}
