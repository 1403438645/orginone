// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tFlowableFormFieldNames          = builder.RawFieldNames(&TFlowableForm{})
	tFlowableFormRows                = strings.Join(tFlowableFormFieldNames, ",")
	tFlowableFormRowsExpectAutoSet   = strings.Join(stringx.Remove(tFlowableFormFieldNames, "`create_time`", "`update_time`"), ",")
	tFlowableFormRowsWithPlaceHolder = strings.Join(stringx.Remove(tFlowableFormFieldNames, "`FORM_KEY`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetTFlowableFormFORMKEYPrefix = "cache:asset:tFlowableForm:fORMKEY:"
)

type (
	tFlowableFormModel interface {
		Insert(ctx context.Context, data *TFlowableForm) (sql.Result, error)
		FindOne(ctx context.Context, fORMKEY string) (*TFlowableForm, error)
		Update(ctx context.Context, data *TFlowableForm) error
		Delete(ctx context.Context, fORMKEY string) error
	}

	defaultTFlowableFormModel struct {
		sqlc.CachedConn
		table string
	}

	TFlowableForm struct {
		FORMKEY    string         `db:"FORM_KEY"`    // 表单key
		FORMNAME   string         `db:"FORM_NAME"`   // 表单名称
		FORMJSON   sql.NullString `db:"FORM_JSON"`   // 表单内容json串
		CREATEBY   sql.NullString `db:"CREATE_BY"`   // 创建人
		CREATEDATE sql.NullTime   `db:"CREATE_DATE"` // 创建日期
		CREATETIME sql.NullTime   `db:"CREATE_TIME"` // 创建时间
		UPDATEBY   sql.NullString `db:"UPDATE_BY"`   // 修改人
		UPDATEDATE sql.NullTime   `db:"UPDATE_DATE"` // 修改日期
		UPDATETIME sql.NullTime   `db:"UPDATE_TIME"` // 修改时间
	}
)

func newTFlowableFormModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTFlowableFormModel {
	return &defaultTFlowableFormModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`t_flowable_form`",
	}
}

func (m *defaultTFlowableFormModel) Insert(ctx context.Context, data *TFlowableForm) (sql.Result, error) {
	assetTFlowableFormFORMKEYKey := fmt.Sprintf("%s%v", cacheAssetTFlowableFormFORMKEYPrefix, data.FORMKEY)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, tFlowableFormRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.FORMKEY, data.FORMNAME, data.FORMJSON, data.CREATEBY, data.CREATEDATE, data.CREATETIME, data.UPDATEBY, data.UPDATEDATE, data.UPDATETIME)
	}, assetTFlowableFormFORMKEYKey)
	return ret, err
}

func (m *defaultTFlowableFormModel) FindOne(ctx context.Context, fORMKEY string) (*TFlowableForm, error) {
	assetTFlowableFormFORMKEYKey := fmt.Sprintf("%s%v", cacheAssetTFlowableFormFORMKEYPrefix, fORMKEY)
	var resp TFlowableForm
	err := m.QueryRowCtx(ctx, &resp, assetTFlowableFormFORMKEYKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `FORM_KEY` = ? limit 1", tFlowableFormRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, fORMKEY)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTFlowableFormModel) Update(ctx context.Context, data *TFlowableForm) error {
	assetTFlowableFormFORMKEYKey := fmt.Sprintf("%s%v", cacheAssetTFlowableFormFORMKEYPrefix, data.FORMKEY)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `FORM_KEY` = ?", m.table, tFlowableFormRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.FORMNAME, data.FORMJSON, data.CREATEBY, data.CREATEDATE, data.CREATETIME, data.UPDATEBY, data.UPDATEDATE, data.UPDATETIME, data.FORMKEY)
	}, assetTFlowableFormFORMKEYKey)
	return err
}

func (m *defaultTFlowableFormModel) Delete(ctx context.Context, fORMKEY string) error {
	assetTFlowableFormFORMKEYKey := fmt.Sprintf("%s%v", cacheAssetTFlowableFormFORMKEYPrefix, fORMKEY)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `FORM_KEY` = ?", m.table)
		return conn.ExecCtx(ctx, query, fORMKEY)
	}, assetTFlowableFormFORMKEYKey)
	return err
}

func (m *defaultTFlowableFormModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetTFlowableFormFORMKEYPrefix, primary)
}

func (m *defaultTFlowableFormModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `FORM_KEY` = ? limit 1", tFlowableFormRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTFlowableFormModel) tableName() string {
	return m.table
}
