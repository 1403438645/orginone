// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tSysCodeInfoFieldNames          = builder.RawFieldNames(&TSysCodeInfo{})
	tSysCodeInfoRows                = strings.Join(tSysCodeInfoFieldNames, ",")
	tSysCodeInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(tSysCodeInfoFieldNames, "`create_time`", "`update_time`"), ",")
	tSysCodeInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(tSysCodeInfoFieldNames, "`CODE_INFO_ID`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetTSysCodeInfoCODEINFOIDPrefix = "cache:asset:tSysCodeInfo:cODEINFOID:"
)

type (
	tSysCodeInfoModel interface {
		Insert(ctx context.Context, data *TSysCodeInfo) (sql.Result, error)
		FindOne(ctx context.Context, cODEINFOID string) (*TSysCodeInfo, error)
		Update(ctx context.Context, data *TSysCodeInfo) error
		Delete(ctx context.Context, cODEINFOID string) error
	}

	defaultTSysCodeInfoModel struct {
		sqlc.CachedConn
		table string
	}

	TSysCodeInfo struct {
		CODEINFOID  string         `db:"CODE_INFO_ID"` // 代码信息ID
		CODETYPEID  string         `db:"CODE_TYPE_ID"` // 代码类别ID
		VALUE       string         `db:"VALUE"`        // 下拉框值
		CONTENT     string         `db:"CONTENT"`      // 下拉框内容
		PARENTVALUE sql.NullString `db:"PARENT_VALUE"` // 上级联动下拉框值
		SORTNO      int64          `db:"SORT_NO"`      // 排序号
		REMARK      sql.NullString `db:"REMARK"`       // 备注
		ISOK        sql.NullString `db:"IS_OK"`        // 是否显示
		CREATEBY    sql.NullString `db:"CREATE_BY"`    // 创建人
		CREATEDATE  sql.NullTime   `db:"CREATE_DATE"`  // 创建日期
		CREATETIME  sql.NullTime   `db:"CREATE_TIME"`  // 创建时间
		UPDATEBY    sql.NullString `db:"UPDATE_BY"`    // 修改人
		UPDATEDATE  sql.NullTime   `db:"UPDATE_DATE"`  // 修改日期
		UPDATETIME  sql.NullTime   `db:"UPDATE_TIME"`  // 修改时间
	}
)

func newTSysCodeInfoModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTSysCodeInfoModel {
	return &defaultTSysCodeInfoModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`t_sys_code_info`",
	}
}

func (m *defaultTSysCodeInfoModel) Insert(ctx context.Context, data *TSysCodeInfo) (sql.Result, error) {
	assetTSysCodeInfoCODEINFOIDKey := fmt.Sprintf("%s%v", cacheAssetTSysCodeInfoCODEINFOIDPrefix, data.CODEINFOID)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, tSysCodeInfoRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.CODEINFOID, data.CODETYPEID, data.VALUE, data.CONTENT, data.PARENTVALUE, data.SORTNO, data.REMARK, data.ISOK, data.CREATEBY, data.CREATEDATE, data.CREATETIME, data.UPDATEBY, data.UPDATEDATE, data.UPDATETIME)
	}, assetTSysCodeInfoCODEINFOIDKey)
	return ret, err
}

func (m *defaultTSysCodeInfoModel) FindOne(ctx context.Context, cODEINFOID string) (*TSysCodeInfo, error) {
	assetTSysCodeInfoCODEINFOIDKey := fmt.Sprintf("%s%v", cacheAssetTSysCodeInfoCODEINFOIDPrefix, cODEINFOID)
	var resp TSysCodeInfo
	err := m.QueryRowCtx(ctx, &resp, assetTSysCodeInfoCODEINFOIDKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `CODE_INFO_ID` = ? limit 1", tSysCodeInfoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, cODEINFOID)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTSysCodeInfoModel) Update(ctx context.Context, data *TSysCodeInfo) error {
	assetTSysCodeInfoCODEINFOIDKey := fmt.Sprintf("%s%v", cacheAssetTSysCodeInfoCODEINFOIDPrefix, data.CODEINFOID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `CODE_INFO_ID` = ?", m.table, tSysCodeInfoRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.CODETYPEID, data.VALUE, data.CONTENT, data.PARENTVALUE, data.SORTNO, data.REMARK, data.ISOK, data.CREATEBY, data.CREATEDATE, data.CREATETIME, data.UPDATEBY, data.UPDATEDATE, data.UPDATETIME, data.CODEINFOID)
	}, assetTSysCodeInfoCODEINFOIDKey)
	return err
}

func (m *defaultTSysCodeInfoModel) Delete(ctx context.Context, cODEINFOID string) error {
	assetTSysCodeInfoCODEINFOIDKey := fmt.Sprintf("%s%v", cacheAssetTSysCodeInfoCODEINFOIDPrefix, cODEINFOID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `CODE_INFO_ID` = ?", m.table)
		return conn.ExecCtx(ctx, query, cODEINFOID)
	}, assetTSysCodeInfoCODEINFOIDKey)
	return err
}

func (m *defaultTSysCodeInfoModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetTSysCodeInfoCODEINFOIDPrefix, primary)
}

func (m *defaultTSysCodeInfoModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `CODE_INFO_ID` = ? limit 1", tSysCodeInfoRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTSysCodeInfoModel) tableName() string {
	return m.table
}
