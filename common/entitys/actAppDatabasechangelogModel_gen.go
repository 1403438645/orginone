// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	actAppDatabasechangelogFieldNames          = builder.RawFieldNames(&ActAppDatabasechangelog{})
	actAppDatabasechangelogRows                = strings.Join(actAppDatabasechangelogFieldNames, ",")
	actAppDatabasechangelogRowsExpectAutoSet   = strings.Join(stringx.Remove(actAppDatabasechangelogFieldNames, "`create_time`", "`update_time`"), ",")
	actAppDatabasechangelogRowsWithPlaceHolder = strings.Join(stringx.Remove(actAppDatabasechangelogFieldNames, "`ID`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetActAppDatabasechangelogIDPrefix = "cache:asset:actAppDatabasechangelog:iD:"
)

type (
	actAppDatabasechangelogModel interface {
		Insert(ctx context.Context, data *ActAppDatabasechangelog) (sql.Result, error)
		FindOne(ctx context.Context, iD string) (*ActAppDatabasechangelog, error)
		Update(ctx context.Context, data *ActAppDatabasechangelog) error
		Delete(ctx context.Context, iD string) error
	}

	defaultActAppDatabasechangelogModel struct {
		sqlc.CachedConn
		table string
	}

	ActAppDatabasechangelog struct {
		ID            string         `db:"ID"`
		AUTHOR        string         `db:"AUTHOR"`
		FILENAME      string         `db:"FILENAME"`
		DATEEXECUTED  time.Time      `db:"DATEEXECUTED"`
		ORDEREXECUTED int64          `db:"ORDEREXECUTED"`
		EXECTYPE      string         `db:"EXECTYPE"`
		MD5SUM        sql.NullString `db:"MD5SUM"`
		DESCRIPTION   sql.NullString `db:"DESCRIPTION"`
		COMMENTS      sql.NullString `db:"COMMENTS"`
		TAG           sql.NullString `db:"TAG"`
		LIQUIBASE     sql.NullString `db:"LIQUIBASE"`
		CONTEXTS      sql.NullString `db:"CONTEXTS"`
		LABELS        sql.NullString `db:"LABELS"`
		DEPLOYMENTID  sql.NullString `db:"DEPLOYMENT_ID"`
	}
)

func newActAppDatabasechangelogModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultActAppDatabasechangelogModel {
	return &defaultActAppDatabasechangelogModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`act_app_databasechangelog`",
	}
}

func (m *defaultActAppDatabasechangelogModel) Insert(ctx context.Context, data *ActAppDatabasechangelog) (sql.Result, error) {
	assetActAppDatabasechangelogIDKey := fmt.Sprintf("%s%v", cacheAssetActAppDatabasechangelogIDPrefix, data.ID)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, actAppDatabasechangelogRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ID, data.AUTHOR, data.FILENAME, data.DATEEXECUTED, data.ORDEREXECUTED, data.EXECTYPE, data.MD5SUM, data.DESCRIPTION, data.COMMENTS, data.TAG, data.LIQUIBASE, data.CONTEXTS, data.LABELS, data.DEPLOYMENTID)
	}, assetActAppDatabasechangelogIDKey)
	return ret, err
}

func (m *defaultActAppDatabasechangelogModel) FindOne(ctx context.Context, iD string) (*ActAppDatabasechangelog, error) {
	assetActAppDatabasechangelogIDKey := fmt.Sprintf("%s%v", cacheAssetActAppDatabasechangelogIDPrefix, iD)
	var resp ActAppDatabasechangelog
	err := m.QueryRowCtx(ctx, &resp, assetActAppDatabasechangelogIDKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `ID` = ? limit 1", actAppDatabasechangelogRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, iD)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActAppDatabasechangelogModel) Update(ctx context.Context, data *ActAppDatabasechangelog) error {
	assetActAppDatabasechangelogIDKey := fmt.Sprintf("%s%v", cacheAssetActAppDatabasechangelogIDPrefix, data.ID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `ID` = ?", m.table, actAppDatabasechangelogRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.AUTHOR, data.FILENAME, data.DATEEXECUTED, data.ORDEREXECUTED, data.EXECTYPE, data.MD5SUM, data.DESCRIPTION, data.COMMENTS, data.TAG, data.LIQUIBASE, data.CONTEXTS, data.LABELS, data.DEPLOYMENTID, data.ID)
	}, assetActAppDatabasechangelogIDKey)
	return err
}

func (m *defaultActAppDatabasechangelogModel) Delete(ctx context.Context, iD string) error {
	assetActAppDatabasechangelogIDKey := fmt.Sprintf("%s%v", cacheAssetActAppDatabasechangelogIDPrefix, iD)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `ID` = ?", m.table)
		return conn.ExecCtx(ctx, query, iD)
	}, assetActAppDatabasechangelogIDKey)
	return err
}

func (m *defaultActAppDatabasechangelogModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetActAppDatabasechangelogIDPrefix, primary)
}

func (m *defaultActAppDatabasechangelogModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `ID` = ? limit 1", actAppDatabasechangelogRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultActAppDatabasechangelogModel) tableName() string {
	return m.table
}
