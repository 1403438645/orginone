// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asAppGroupDistributionDataFieldNames          = builder.RawFieldNames(&AsAppGroupDistributionData{})
	asAppGroupDistributionDataRows                = strings.Join(asAppGroupDistributionDataFieldNames, ",")
	asAppGroupDistributionDataRowsExpectAutoSet   = strings.Join(stringx.Remove(asAppGroupDistributionDataFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	asAppGroupDistributionDataRowsWithPlaceHolder = strings.Join(stringx.Remove(asAppGroupDistributionDataFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsAppGroupDistributionDataIdPrefix = "cache:asset:asAppGroupDistributionData:id:"
)

type (
	asAppGroupDistributionDataModel interface {
		Insert(ctx context.Context, data *AsAppGroupDistributionData) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AsAppGroupDistributionData, error)
		Update(ctx context.Context, data *AsAppGroupDistributionData) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAsAppGroupDistributionDataModel struct {
		sqlc.CachedConn
		table string
	}

	AsAppGroupDistributionData struct {
		Id         int64          `db:"id"`          // 主键
		AppId      sql.NullInt64  `db:"app_id"`      // 应用id
		GroupId    sql.NullInt64  `db:"group_id"`    // 集团id
		Config     sql.NullString `db:"config"`      // 配置列表
		CreateTime time.Time      `db:"create_time"` // 创建时间
		UpdateTime time.Time      `db:"update_time"` // 更新时间
		CreateUser sql.NullInt64  `db:"create_user"` // 创建用户
		UpdateUser sql.NullInt64  `db:"update_user"` // 更新用户
		IsDeleted  int64          `db:"is_deleted"`  // 是否被删除
		Status     int64          `db:"status"`      // 状态
	}
)

func newAsAppGroupDistributionDataModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsAppGroupDistributionDataModel {
	return &defaultAsAppGroupDistributionDataModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_app_group_distribution_data`",
	}
}

func (m *defaultAsAppGroupDistributionDataModel) Insert(ctx context.Context, data *AsAppGroupDistributionData) (sql.Result, error) {
	assetAsAppGroupDistributionDataIdKey := fmt.Sprintf("%s%v", cacheAssetAsAppGroupDistributionDataIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, asAppGroupDistributionDataRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.AppId, data.GroupId, data.Config, data.CreateUser, data.UpdateUser, data.IsDeleted, data.Status)
	}, assetAsAppGroupDistributionDataIdKey)
	return ret, err
}

func (m *defaultAsAppGroupDistributionDataModel) FindOne(ctx context.Context, id int64) (*AsAppGroupDistributionData, error) {
	assetAsAppGroupDistributionDataIdKey := fmt.Sprintf("%s%v", cacheAssetAsAppGroupDistributionDataIdPrefix, id)
	var resp AsAppGroupDistributionData
	err := m.QueryRowCtx(ctx, &resp, assetAsAppGroupDistributionDataIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asAppGroupDistributionDataRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsAppGroupDistributionDataModel) Update(ctx context.Context, data *AsAppGroupDistributionData) error {
	assetAsAppGroupDistributionDataIdKey := fmt.Sprintf("%s%v", cacheAssetAsAppGroupDistributionDataIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asAppGroupDistributionDataRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.AppId, data.GroupId, data.Config, data.CreateUser, data.UpdateUser, data.IsDeleted, data.Status, data.Id)
	}, assetAsAppGroupDistributionDataIdKey)
	return err
}

func (m *defaultAsAppGroupDistributionDataModel) Delete(ctx context.Context, id int64) error {
	assetAsAppGroupDistributionDataIdKey := fmt.Sprintf("%s%v", cacheAssetAsAppGroupDistributionDataIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsAppGroupDistributionDataIdKey)
	return err
}

func (m *defaultAsAppGroupDistributionDataModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsAppGroupDistributionDataIdPrefix, primary)
}

func (m *defaultAsAppGroupDistributionDataModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asAppGroupDistributionDataRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsAppGroupDistributionDataModel) tableName() string {
	return m.table
}
