// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	coreActHistoryFieldNames          = builder.RawFieldNames(&CoreActHistory{})
	coreActHistoryRows                = strings.Join(coreActHistoryFieldNames, ",")
	coreActHistoryRowsExpectAutoSet   = strings.Join(stringx.Remove(coreActHistoryFieldNames, "`create_time`", "`update_time`"), ",")
	coreActHistoryRowsWithPlaceHolder = strings.Join(stringx.Remove(coreActHistoryFieldNames, "`recid`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetCoreActHistoryRecidPrefix = "cache:asset:coreActHistory:recid:"
)

type (
	coreActHistoryModel interface {
		Insert(ctx context.Context, data *CoreActHistory) (sql.Result, error)
		FindOne(ctx context.Context, recid int64) (*CoreActHistory, error)
		Update(ctx context.Context, data *CoreActHistory) error
		Delete(ctx context.Context, recid int64) error
	}

	defaultCoreActHistoryModel struct {
		sqlc.CachedConn
		table string
	}

	CoreActHistory struct {
		Recid                int64          `db:"recid"`
		Todotitle            sql.NullString `db:"todotitle"`
		Todocontent          sql.NullString `db:"todocontent"`
		Pcformlink           sql.NullString `db:"pcformlink"`
		Mobileformlink       sql.NullString `db:"mobileformlink"`
		Launshperson         sql.NullInt64  `db:"launshperson"`
		Launshunit           sql.NullInt64  `db:"launshunit"`
		Launshdepartment     sql.NullInt64  `db:"launshdepartment"`
		Launshappid          sql.NullInt64  `db:"launshappid"`
		Launshappname        sql.NullString `db:"launshappname"`
		Starttime            sql.NullTime   `db:"starttime"`
		Finishtime           sql.NullTime   `db:"finishtime"`
		Procid               sql.NullString `db:"procid"`
		Ifread               sql.NullInt64  `db:"ifread"`
		Taskid               sql.NullString `db:"taskid"`
		LaunshSendPerson     sql.NullInt64  `db:"launshSendPerson"`
		LaunshSendTenantCode sql.NullString `db:"launshSendTenantCode"` // 发送人所在租户
		Todotype             sql.NullInt64  `db:"todotype"`
	}
)

func newCoreActHistoryModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultCoreActHistoryModel {
	return &defaultCoreActHistoryModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`core_act_history`",
	}
}

func (m *defaultCoreActHistoryModel) Insert(ctx context.Context, data *CoreActHistory) (sql.Result, error) {
	assetCoreActHistoryRecidKey := fmt.Sprintf("%s%v", cacheAssetCoreActHistoryRecidPrefix, data.Recid)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, coreActHistoryRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Recid, data.Todotitle, data.Todocontent, data.Pcformlink, data.Mobileformlink, data.Launshperson, data.Launshunit, data.Launshdepartment, data.Launshappid, data.Launshappname, data.Starttime, data.Finishtime, data.Procid, data.Ifread, data.Taskid, data.LaunshSendPerson, data.LaunshSendTenantCode, data.Todotype)
	}, assetCoreActHistoryRecidKey)
	return ret, err
}

func (m *defaultCoreActHistoryModel) FindOne(ctx context.Context, recid int64) (*CoreActHistory, error) {
	assetCoreActHistoryRecidKey := fmt.Sprintf("%s%v", cacheAssetCoreActHistoryRecidPrefix, recid)
	var resp CoreActHistory
	err := m.QueryRowCtx(ctx, &resp, assetCoreActHistoryRecidKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `recid` = ? limit 1", coreActHistoryRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, recid)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCoreActHistoryModel) Update(ctx context.Context, data *CoreActHistory) error {
	assetCoreActHistoryRecidKey := fmt.Sprintf("%s%v", cacheAssetCoreActHistoryRecidPrefix, data.Recid)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `recid` = ?", m.table, coreActHistoryRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Todotitle, data.Todocontent, data.Pcformlink, data.Mobileformlink, data.Launshperson, data.Launshunit, data.Launshdepartment, data.Launshappid, data.Launshappname, data.Starttime, data.Finishtime, data.Procid, data.Ifread, data.Taskid, data.LaunshSendPerson, data.LaunshSendTenantCode, data.Todotype, data.Recid)
	}, assetCoreActHistoryRecidKey)
	return err
}

func (m *defaultCoreActHistoryModel) Delete(ctx context.Context, recid int64) error {
	assetCoreActHistoryRecidKey := fmt.Sprintf("%s%v", cacheAssetCoreActHistoryRecidPrefix, recid)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `recid` = ?", m.table)
		return conn.ExecCtx(ctx, query, recid)
	}, assetCoreActHistoryRecidKey)
	return err
}

func (m *defaultCoreActHistoryModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetCoreActHistoryRecidPrefix, primary)
}

func (m *defaultCoreActHistoryModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `recid` = ? limit 1", coreActHistoryRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultCoreActHistoryModel) tableName() string {
	return m.table
}
