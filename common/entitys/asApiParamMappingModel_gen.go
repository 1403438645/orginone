// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asApiParamMappingFieldNames          = builder.RawFieldNames(&AsApiParamMapping{})
	asApiParamMappingRows                = strings.Join(asApiParamMappingFieldNames, ",")
	asApiParamMappingRowsExpectAutoSet   = strings.Join(stringx.Remove(asApiParamMappingFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	asApiParamMappingRowsWithPlaceHolder = strings.Join(stringx.Remove(asApiParamMappingFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsApiParamMappingIdPrefix = "cache:asset:asApiParamMapping:id:"
)

type (
	asApiParamMappingModel interface {
		Insert(ctx context.Context, data *AsApiParamMapping) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AsApiParamMapping, error)
		Update(ctx context.Context, data *AsApiParamMapping) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAsApiParamMappingModel struct {
		sqlc.CachedConn
		table string
	}

	AsApiParamMapping struct {
		Id                    int64          `db:"id"`                       // id
		ApiSourceId           string         `db:"api_source_id"`            // 数据库源id
		RemoteUserId          sql.NullString `db:"remote_user_id"`           // 远程用户id
		RemoteUserAccount     sql.NullString `db:"remote_user_account"`      // 远程用户登录账号
		RemoteUserName        sql.NullString `db:"remote_user_name"`         // 远程用户姓名
		RemoteUserPhoneNumber sql.NullString `db:"remote_user_phone_number"` // 远程用户手机号码
		RemoteUserExtension   sql.NullString `db:"remote_user_extension"`    // 远程用户扩展属性
		RemoteUserUnitId      sql.NullString `db:"remote_user_unit_id"`      // 远程用户所属部门id
		RemoteUnitId          sql.NullString `db:"remote_unit_id"`           // 远程部门id
		RemoteUnitName        sql.NullString `db:"remote_unit_name"`         // 远程部门名称
		RemoteParentUnitId    sql.NullString `db:"remote_parent_unit_id"`    // 远程部门父节点id
		AddTime               time.Time      `db:"add_time"`                 // 添加时间
		IsDeleted             int64          `db:"is_deleted"`               // 是否已删除
	}
)

func newAsApiParamMappingModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsApiParamMappingModel {
	return &defaultAsApiParamMappingModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_api_param_mapping`",
	}
}

func (m *defaultAsApiParamMappingModel) Insert(ctx context.Context, data *AsApiParamMapping) (sql.Result, error) {
	assetAsApiParamMappingIdKey := fmt.Sprintf("%s%v", cacheAssetAsApiParamMappingIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, asApiParamMappingRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ApiSourceId, data.RemoteUserId, data.RemoteUserAccount, data.RemoteUserName, data.RemoteUserPhoneNumber, data.RemoteUserExtension, data.RemoteUserUnitId, data.RemoteUnitId, data.RemoteUnitName, data.RemoteParentUnitId, data.AddTime, data.IsDeleted)
	}, assetAsApiParamMappingIdKey)
	return ret, err
}

func (m *defaultAsApiParamMappingModel) FindOne(ctx context.Context, id int64) (*AsApiParamMapping, error) {
	assetAsApiParamMappingIdKey := fmt.Sprintf("%s%v", cacheAssetAsApiParamMappingIdPrefix, id)
	var resp AsApiParamMapping
	err := m.QueryRowCtx(ctx, &resp, assetAsApiParamMappingIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asApiParamMappingRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsApiParamMappingModel) Update(ctx context.Context, data *AsApiParamMapping) error {
	assetAsApiParamMappingIdKey := fmt.Sprintf("%s%v", cacheAssetAsApiParamMappingIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asApiParamMappingRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ApiSourceId, data.RemoteUserId, data.RemoteUserAccount, data.RemoteUserName, data.RemoteUserPhoneNumber, data.RemoteUserExtension, data.RemoteUserUnitId, data.RemoteUnitId, data.RemoteUnitName, data.RemoteParentUnitId, data.AddTime, data.IsDeleted, data.Id)
	}, assetAsApiParamMappingIdKey)
	return err
}

func (m *defaultAsApiParamMappingModel) Delete(ctx context.Context, id int64) error {
	assetAsApiParamMappingIdKey := fmt.Sprintf("%s%v", cacheAssetAsApiParamMappingIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsApiParamMappingIdKey)
	return err
}

func (m *defaultAsApiParamMappingModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsApiParamMappingIdPrefix, primary)
}

func (m *defaultAsApiParamMappingModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asApiParamMappingRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsApiParamMappingModel) tableName() string {
	return m.table
}
