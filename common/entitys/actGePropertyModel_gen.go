// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	actGePropertyFieldNames          = builder.RawFieldNames(&ActGeProperty{})
	actGePropertyRows                = strings.Join(actGePropertyFieldNames, ",")
	actGePropertyRowsExpectAutoSet   = strings.Join(stringx.Remove(actGePropertyFieldNames, "`create_time`", "`update_time`"), ",")
	actGePropertyRowsWithPlaceHolder = strings.Join(stringx.Remove(actGePropertyFieldNames, "`NAME_`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetActGePropertyNAMEPrefix = "cache:asset:actGeProperty:nAME:"
)

type (
	actGePropertyModel interface {
		Insert(ctx context.Context, data *ActGeProperty) (sql.Result, error)
		FindOne(ctx context.Context, nAME string) (*ActGeProperty, error)
		Update(ctx context.Context, data *ActGeProperty) error
		Delete(ctx context.Context, nAME string) error
	}

	defaultActGePropertyModel struct {
		sqlc.CachedConn
		table string
	}

	ActGeProperty struct {
		NAME  string         `db:"NAME_"`
		VALUE sql.NullString `db:"VALUE_"`
		REV   sql.NullInt64  `db:"REV_"`
	}
)

func newActGePropertyModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultActGePropertyModel {
	return &defaultActGePropertyModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`act_ge_property`",
	}
}

func (m *defaultActGePropertyModel) Insert(ctx context.Context, data *ActGeProperty) (sql.Result, error) {
	assetActGePropertyNAMEKey := fmt.Sprintf("%s%v", cacheAssetActGePropertyNAMEPrefix, data.NAME)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, actGePropertyRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.NAME, data.VALUE, data.REV)
	}, assetActGePropertyNAMEKey)
	return ret, err
}

func (m *defaultActGePropertyModel) FindOne(ctx context.Context, nAME string) (*ActGeProperty, error) {
	assetActGePropertyNAMEKey := fmt.Sprintf("%s%v", cacheAssetActGePropertyNAMEPrefix, nAME)
	var resp ActGeProperty
	err := m.QueryRowCtx(ctx, &resp, assetActGePropertyNAMEKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `NAME_` = ? limit 1", actGePropertyRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, nAME)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActGePropertyModel) Update(ctx context.Context, data *ActGeProperty) error {
	assetActGePropertyNAMEKey := fmt.Sprintf("%s%v", cacheAssetActGePropertyNAMEPrefix, data.NAME)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `NAME_` = ?", m.table, actGePropertyRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.VALUE, data.REV, data.NAME)
	}, assetActGePropertyNAMEKey)
	return err
}

func (m *defaultActGePropertyModel) Delete(ctx context.Context, nAME string) error {
	assetActGePropertyNAMEKey := fmt.Sprintf("%s%v", cacheAssetActGePropertyNAMEPrefix, nAME)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `NAME_` = ?", m.table)
		return conn.ExecCtx(ctx, query, nAME)
	}, assetActGePropertyNAMEKey)
	return err
}

func (m *defaultActGePropertyModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetActGePropertyNAMEPrefix, primary)
}

func (m *defaultActGePropertyModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `NAME_` = ? limit 1", actGePropertyRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultActGePropertyModel) tableName() string {
	return m.table
}
