// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asApiDatabaseSourceFieldNames          = builder.RawFieldNames(&AsApiDatabaseSource{})
	asApiDatabaseSourceRows                = strings.Join(asApiDatabaseSourceFieldNames, ",")
	asApiDatabaseSourceRowsExpectAutoSet   = strings.Join(stringx.Remove(asApiDatabaseSourceFieldNames, "`create_time`", "`update_time`"), ",")
	asApiDatabaseSourceRowsWithPlaceHolder = strings.Join(stringx.Remove(asApiDatabaseSourceFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsApiDatabaseSourceIdPrefix = "cache:asset:asApiDatabaseSource:id:"
)

type (
	asApiDatabaseSourceModel interface {
		Insert(ctx context.Context, data *AsApiDatabaseSource) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AsApiDatabaseSource, error)
		Update(ctx context.Context, data *AsApiDatabaseSource) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAsApiDatabaseSourceModel struct {
		sqlc.CachedConn
		table string
	}

	AsApiDatabaseSource struct {
		Id           int64          `db:"id"`            // id
		TenantCode   sql.NullString `db:"tenant_code"`   // 场景id（若是总管理员创建的，则为null）
		SourceType   int64          `db:"source_type"`   // 数据库源对应数据类型（1：无；2：组织数据；3：用户数据）
		SourceName   string         `db:"source_name"`   // 数据源名称
		DatabaseName string         `db:"database_name"` // 数据库名称
		DbType       int64          `db:"db_type"`       // 数据库类型，依赖数据字典，key->db-type
		DbUrl        string         `db:"db_url"`        // 数据库url
		DbDriver     string         `db:"db_driver"`     // 数据库驱动
		DbUsername   string         `db:"db_username"`   // 数据库用户名
		DbPassword   string         `db:"db_password"`   // 数据库密码（是否加密？）
		SqlQuery     string         `db:"sql_query"`     // 执行的sql语句
		CreateTime   sql.NullTime   `db:"create_time"`   // 创建时间
		UpdateTime   sql.NullTime   `db:"update_time"`   // 更新时间
		CreateUser   sql.NullInt64  `db:"create_user"`   // 创建用户
		UpdateUser   sql.NullInt64  `db:"update_user"`   // 更新用户
		IsDeleted    int64          `db:"is_deleted"`    // 是否被删除
		Status       int64          `db:"status"`        // 状态
	}
)

func newAsApiDatabaseSourceModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsApiDatabaseSourceModel {
	return &defaultAsApiDatabaseSourceModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_api_database_source`",
	}
}

func (m *defaultAsApiDatabaseSourceModel) Insert(ctx context.Context, data *AsApiDatabaseSource) (sql.Result, error) {
	assetAsApiDatabaseSourceIdKey := fmt.Sprintf("%s%v", cacheAssetAsApiDatabaseSourceIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, asApiDatabaseSourceRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.TenantCode, data.SourceType, data.SourceName, data.DatabaseName, data.DbType, data.DbUrl, data.DbDriver, data.DbUsername, data.DbPassword, data.SqlQuery, data.CreateUser, data.UpdateUser, data.IsDeleted, data.Status)
	}, assetAsApiDatabaseSourceIdKey)
	return ret, err
}

func (m *defaultAsApiDatabaseSourceModel) FindOne(ctx context.Context, id int64) (*AsApiDatabaseSource, error) {
	assetAsApiDatabaseSourceIdKey := fmt.Sprintf("%s%v", cacheAssetAsApiDatabaseSourceIdPrefix, id)
	var resp AsApiDatabaseSource
	err := m.QueryRowCtx(ctx, &resp, assetAsApiDatabaseSourceIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asApiDatabaseSourceRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsApiDatabaseSourceModel) Update(ctx context.Context, data *AsApiDatabaseSource) error {
	assetAsApiDatabaseSourceIdKey := fmt.Sprintf("%s%v", cacheAssetAsApiDatabaseSourceIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asApiDatabaseSourceRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.TenantCode, data.SourceType, data.SourceName, data.DatabaseName, data.DbType, data.DbUrl, data.DbDriver, data.DbUsername, data.DbPassword, data.SqlQuery, data.CreateUser, data.UpdateUser, data.IsDeleted, data.Status, data.Id)
	}, assetAsApiDatabaseSourceIdKey)
	return err
}

func (m *defaultAsApiDatabaseSourceModel) Delete(ctx context.Context, id int64) error {
	assetAsApiDatabaseSourceIdKey := fmt.Sprintf("%s%v", cacheAssetAsApiDatabaseSourceIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsApiDatabaseSourceIdKey)
	return err
}

func (m *defaultAsApiDatabaseSourceModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsApiDatabaseSourceIdPrefix, primary)
}

func (m *defaultAsApiDatabaseSourceModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asApiDatabaseSourceRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsApiDatabaseSourceModel) tableName() string {
	return m.table
}
