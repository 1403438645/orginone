// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bladeLogErrorFieldNames          = builder.RawFieldNames(&BladeLogError{})
	bladeLogErrorRows                = strings.Join(bladeLogErrorFieldNames, ",")
	bladeLogErrorRowsExpectAutoSet   = strings.Join(stringx.Remove(bladeLogErrorFieldNames, "`create_time`", "`update_time`"), ",")
	bladeLogErrorRowsWithPlaceHolder = strings.Join(stringx.Remove(bladeLogErrorFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetBladeLogErrorIdPrefix = "cache:asset:bladeLogError:id:"
)

type (
	bladeLogErrorModel interface {
		Insert(ctx context.Context, data *BladeLogError) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BladeLogError, error)
		Update(ctx context.Context, data *BladeLogError) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBladeLogErrorModel struct {
		sqlc.CachedConn
		table string
	}

	BladeLogError struct {
		Id            int64          `db:"id"`             // 编号
		TenantId      string         `db:"tenant_id"`      // 租户ID
		ServiceId     sql.NullString `db:"service_id"`     // 服务ID
		ServerHost    sql.NullString `db:"server_host"`    // 服务器名
		ServerIp      sql.NullString `db:"server_ip"`      // 服务器IP地址
		Env           sql.NullString `db:"env"`            // 系统环境
		Method        sql.NullString `db:"method"`         // 操作方式
		RequestUri    sql.NullString `db:"request_uri"`    // 请求URI
		UserAgent     sql.NullString `db:"user_agent"`     // 用户代理
		StackTrace    sql.NullString `db:"stack_trace"`    // 堆栈
		ExceptionName sql.NullString `db:"exception_name"` // 异常名
		Message       sql.NullString `db:"message"`        // 异常信息
		LineNumber    sql.NullInt64  `db:"line_number"`    // 错误行数
		RemoteIp      sql.NullString `db:"remote_ip"`      // 操作IP地址
		MethodClass   sql.NullString `db:"method_class"`   // 方法类
		FileName      sql.NullString `db:"file_name"`      // 文件名
		MethodName    sql.NullString `db:"method_name"`    // 方法名
		Params        sql.NullString `db:"params"`         // 操作提交的数据
		Time          sql.NullString `db:"time"`           // 执行时间
		CreateBy      sql.NullString `db:"create_by"`      // 创建者
		CreateTime    time.Time      `db:"create_time"`    // 创建时间
	}
)

func newBladeLogErrorModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultBladeLogErrorModel {
	return &defaultBladeLogErrorModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`blade_log_error`",
	}
}

func (m *defaultBladeLogErrorModel) Insert(ctx context.Context, data *BladeLogError) (sql.Result, error) {
	assetBladeLogErrorIdKey := fmt.Sprintf("%s%v", cacheAssetBladeLogErrorIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, bladeLogErrorRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.TenantId, data.ServiceId, data.ServerHost, data.ServerIp, data.Env, data.Method, data.RequestUri, data.UserAgent, data.StackTrace, data.ExceptionName, data.Message, data.LineNumber, data.RemoteIp, data.MethodClass, data.FileName, data.MethodName, data.Params, data.Time, data.CreateBy)
	}, assetBladeLogErrorIdKey)
	return ret, err
}

func (m *defaultBladeLogErrorModel) FindOne(ctx context.Context, id int64) (*BladeLogError, error) {
	assetBladeLogErrorIdKey := fmt.Sprintf("%s%v", cacheAssetBladeLogErrorIdPrefix, id)
	var resp BladeLogError
	err := m.QueryRowCtx(ctx, &resp, assetBladeLogErrorIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bladeLogErrorRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBladeLogErrorModel) Update(ctx context.Context, data *BladeLogError) error {
	assetBladeLogErrorIdKey := fmt.Sprintf("%s%v", cacheAssetBladeLogErrorIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, bladeLogErrorRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.TenantId, data.ServiceId, data.ServerHost, data.ServerIp, data.Env, data.Method, data.RequestUri, data.UserAgent, data.StackTrace, data.ExceptionName, data.Message, data.LineNumber, data.RemoteIp, data.MethodClass, data.FileName, data.MethodName, data.Params, data.Time, data.CreateBy, data.Id)
	}, assetBladeLogErrorIdKey)
	return err
}

func (m *defaultBladeLogErrorModel) Delete(ctx context.Context, id int64) error {
	assetBladeLogErrorIdKey := fmt.Sprintf("%s%v", cacheAssetBladeLogErrorIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetBladeLogErrorIdKey)
	return err
}

func (m *defaultBladeLogErrorModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetBladeLogErrorIdPrefix, primary)
}

func (m *defaultBladeLogErrorModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bladeLogErrorRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBladeLogErrorModel) tableName() string {
	return m.table
}
