// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	actFoFormDeploymentFieldNames          = builder.RawFieldNames(&ActFoFormDeployment{})
	actFoFormDeploymentRows                = strings.Join(actFoFormDeploymentFieldNames, ",")
	actFoFormDeploymentRowsExpectAutoSet   = strings.Join(stringx.Remove(actFoFormDeploymentFieldNames, "`create_time`", "`update_time`"), ",")
	actFoFormDeploymentRowsWithPlaceHolder = strings.Join(stringx.Remove(actFoFormDeploymentFieldNames, "`ID_`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetActFoFormDeploymentIDPrefix = "cache:asset:actFoFormDeployment:iD:"
)

type (
	actFoFormDeploymentModel interface {
		Insert(ctx context.Context, data *ActFoFormDeployment) (sql.Result, error)
		FindOne(ctx context.Context, iD string) (*ActFoFormDeployment, error)
		Update(ctx context.Context, data *ActFoFormDeployment) error
		Delete(ctx context.Context, iD string) error
	}

	defaultActFoFormDeploymentModel struct {
		sqlc.CachedConn
		table string
	}

	ActFoFormDeployment struct {
		ID                 string         `db:"ID_"`
		NAME               sql.NullString `db:"NAME_"`
		CATEGORY           sql.NullString `db:"CATEGORY_"`
		DEPLOYTIME         sql.NullTime   `db:"DEPLOY_TIME_"`
		TENANTID           sql.NullString `db:"TENANT_ID_"`
		PARENTDEPLOYMENTID sql.NullString `db:"PARENT_DEPLOYMENT_ID_"`
	}
)

func newActFoFormDeploymentModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultActFoFormDeploymentModel {
	return &defaultActFoFormDeploymentModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`act_fo_form_deployment`",
	}
}

func (m *defaultActFoFormDeploymentModel) Insert(ctx context.Context, data *ActFoFormDeployment) (sql.Result, error) {
	assetActFoFormDeploymentIDKey := fmt.Sprintf("%s%v", cacheAssetActFoFormDeploymentIDPrefix, data.ID)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, actFoFormDeploymentRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ID, data.NAME, data.CATEGORY, data.DEPLOYTIME, data.TENANTID, data.PARENTDEPLOYMENTID)
	}, assetActFoFormDeploymentIDKey)
	return ret, err
}

func (m *defaultActFoFormDeploymentModel) FindOne(ctx context.Context, iD string) (*ActFoFormDeployment, error) {
	assetActFoFormDeploymentIDKey := fmt.Sprintf("%s%v", cacheAssetActFoFormDeploymentIDPrefix, iD)
	var resp ActFoFormDeployment
	err := m.QueryRowCtx(ctx, &resp, assetActFoFormDeploymentIDKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actFoFormDeploymentRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, iD)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActFoFormDeploymentModel) Update(ctx context.Context, data *ActFoFormDeployment) error {
	assetActFoFormDeploymentIDKey := fmt.Sprintf("%s%v", cacheAssetActFoFormDeploymentIDPrefix, data.ID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `ID_` = ?", m.table, actFoFormDeploymentRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.NAME, data.CATEGORY, data.DEPLOYTIME, data.TENANTID, data.PARENTDEPLOYMENTID, data.ID)
	}, assetActFoFormDeploymentIDKey)
	return err
}

func (m *defaultActFoFormDeploymentModel) Delete(ctx context.Context, iD string) error {
	assetActFoFormDeploymentIDKey := fmt.Sprintf("%s%v", cacheAssetActFoFormDeploymentIDPrefix, iD)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `ID_` = ?", m.table)
		return conn.ExecCtx(ctx, query, iD)
	}, assetActFoFormDeploymentIDKey)
	return err
}

func (m *defaultActFoFormDeploymentModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetActFoFormDeploymentIDPrefix, primary)
}

func (m *defaultActFoFormDeploymentModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actFoFormDeploymentRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultActFoFormDeploymentModel) tableName() string {
	return m.table
}
