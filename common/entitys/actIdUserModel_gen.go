// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	actIdUserFieldNames          = builder.RawFieldNames(&ActIdUser{})
	actIdUserRows                = strings.Join(actIdUserFieldNames, ",")
	actIdUserRowsExpectAutoSet   = strings.Join(stringx.Remove(actIdUserFieldNames, "`create_time`", "`update_time`"), ",")
	actIdUserRowsWithPlaceHolder = strings.Join(stringx.Remove(actIdUserFieldNames, "`ID_`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetActIdUserIDPrefix = "cache:asset:actIdUser:iD:"
)

type (
	actIdUserModel interface {
		Insert(ctx context.Context, data *ActIdUser) (sql.Result, error)
		FindOne(ctx context.Context, iD string) (*ActIdUser, error)
		Update(ctx context.Context, data *ActIdUser) error
		Delete(ctx context.Context, iD string) error
	}

	defaultActIdUserModel struct {
		sqlc.CachedConn
		table string
	}

	ActIdUser struct {
		ID          string         `db:"ID_"`
		REV         sql.NullInt64  `db:"REV_"`
		FIRST       sql.NullString `db:"FIRST_"`
		LAST        sql.NullString `db:"LAST_"`
		DISPLAYNAME sql.NullString `db:"DISPLAY_NAME_"`
		EMAIL       sql.NullString `db:"EMAIL_"`
		PWD         sql.NullString `db:"PWD_"`
		PICTUREID   sql.NullString `db:"PICTURE_ID_"`
		TENANTID    string         `db:"TENANT_ID_"`
	}
)

func newActIdUserModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultActIdUserModel {
	return &defaultActIdUserModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`act_id_user`",
	}
}

func (m *defaultActIdUserModel) Insert(ctx context.Context, data *ActIdUser) (sql.Result, error) {
	assetActIdUserIDKey := fmt.Sprintf("%s%v", cacheAssetActIdUserIDPrefix, data.ID)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, actIdUserRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ID, data.REV, data.FIRST, data.LAST, data.DISPLAYNAME, data.EMAIL, data.PWD, data.PICTUREID, data.TENANTID)
	}, assetActIdUserIDKey)
	return ret, err
}

func (m *defaultActIdUserModel) FindOne(ctx context.Context, iD string) (*ActIdUser, error) {
	assetActIdUserIDKey := fmt.Sprintf("%s%v", cacheAssetActIdUserIDPrefix, iD)
	var resp ActIdUser
	err := m.QueryRowCtx(ctx, &resp, assetActIdUserIDKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actIdUserRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, iD)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActIdUserModel) Update(ctx context.Context, data *ActIdUser) error {
	assetActIdUserIDKey := fmt.Sprintf("%s%v", cacheAssetActIdUserIDPrefix, data.ID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `ID_` = ?", m.table, actIdUserRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.REV, data.FIRST, data.LAST, data.DISPLAYNAME, data.EMAIL, data.PWD, data.PICTUREID, data.TENANTID, data.ID)
	}, assetActIdUserIDKey)
	return err
}

func (m *defaultActIdUserModel) Delete(ctx context.Context, iD string) error {
	assetActIdUserIDKey := fmt.Sprintf("%s%v", cacheAssetActIdUserIDPrefix, iD)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `ID_` = ?", m.table)
		return conn.ExecCtx(ctx, query, iD)
	}, assetActIdUserIDKey)
	return err
}

func (m *defaultActIdUserModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetActIdUserIDPrefix, primary)
}

func (m *defaultActIdUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actIdUserRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultActIdUserModel) tableName() string {
	return m.table
}
