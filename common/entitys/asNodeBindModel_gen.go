// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asNodeBindFieldNames          = builder.RawFieldNames(&AsNodeBind{})
	asNodeBindRows                = strings.Join(asNodeBindFieldNames, ",")
	asNodeBindRowsExpectAutoSet   = strings.Join(stringx.Remove(asNodeBindFieldNames, "`create_time`", "`update_time`"), ",")
	asNodeBindRowsWithPlaceHolder = strings.Join(stringx.Remove(asNodeBindFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsNodeBindIdPrefix = "cache:asset:asNodeBind:id:"
)

type (
	asNodeBindModel interface {
		Insert(ctx context.Context, data *AsNodeBind) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*AsNodeBind, error)
		Update(ctx context.Context, data *AsNodeBind) error
		Delete(ctx context.Context, id string) error
	}

	defaultAsNodeBindModel struct {
		sqlc.CachedConn
		table string
	}

	AsNodeBind struct {
		Id          string         `db:"id"`
		ProcModelId string         `db:"proc_model_id"`
		NodeId      string         `db:"node_id"`
		AgencyIds   sql.NullString `db:"agency_ids"`
		JobIds      sql.NullString `db:"job_ids"`
		RoleIds     sql.NullString `db:"role_ids"`
		UserIds     sql.NullString `db:"user_ids"`
		Version     sql.NullInt64  `db:"version"`
	}
)

func newAsNodeBindModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsNodeBindModel {
	return &defaultAsNodeBindModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_node_bind`",
	}
}

func (m *defaultAsNodeBindModel) Insert(ctx context.Context, data *AsNodeBind) (sql.Result, error) {
	assetAsNodeBindIdKey := fmt.Sprintf("%s%v", cacheAssetAsNodeBindIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, asNodeBindRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.ProcModelId, data.NodeId, data.AgencyIds, data.JobIds, data.RoleIds, data.UserIds, data.Version)
	}, assetAsNodeBindIdKey)
	return ret, err
}

func (m *defaultAsNodeBindModel) FindOne(ctx context.Context, id string) (*AsNodeBind, error) {
	assetAsNodeBindIdKey := fmt.Sprintf("%s%v", cacheAssetAsNodeBindIdPrefix, id)
	var resp AsNodeBind
	err := m.QueryRowCtx(ctx, &resp, assetAsNodeBindIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asNodeBindRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsNodeBindModel) Update(ctx context.Context, data *AsNodeBind) error {
	assetAsNodeBindIdKey := fmt.Sprintf("%s%v", cacheAssetAsNodeBindIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asNodeBindRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ProcModelId, data.NodeId, data.AgencyIds, data.JobIds, data.RoleIds, data.UserIds, data.Version, data.Id)
	}, assetAsNodeBindIdKey)
	return err
}

func (m *defaultAsNodeBindModel) Delete(ctx context.Context, id string) error {
	assetAsNodeBindIdKey := fmt.Sprintf("%s%v", cacheAssetAsNodeBindIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsNodeBindIdKey)
	return err
}

func (m *defaultAsNodeBindModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsNodeBindIdPrefix, primary)
}

func (m *defaultAsNodeBindModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asNodeBindRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsNodeBindModel) tableName() string {
	return m.table
}
