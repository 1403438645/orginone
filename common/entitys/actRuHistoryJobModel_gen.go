// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	actRuHistoryJobFieldNames          = builder.RawFieldNames(&ActRuHistoryJob{})
	actRuHistoryJobRows                = strings.Join(actRuHistoryJobFieldNames, ",")
	actRuHistoryJobRowsExpectAutoSet   = strings.Join(stringx.Remove(actRuHistoryJobFieldNames, "`create_time`", "`update_time`"), ",")
	actRuHistoryJobRowsWithPlaceHolder = strings.Join(stringx.Remove(actRuHistoryJobFieldNames, "`ID_`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetActRuHistoryJobIDPrefix = "cache:asset:actRuHistoryJob:iD:"
)

type (
	actRuHistoryJobModel interface {
		Insert(ctx context.Context, data *ActRuHistoryJob) (sql.Result, error)
		FindOne(ctx context.Context, iD string) (*ActRuHistoryJob, error)
		Update(ctx context.Context, data *ActRuHistoryJob) error
		Delete(ctx context.Context, iD string) error
	}

	defaultActRuHistoryJobModel struct {
		sqlc.CachedConn
		table string
	}

	ActRuHistoryJob struct {
		ID               string         `db:"ID_"`
		REV              sql.NullInt64  `db:"REV_"`
		LOCKEXPTIME      sql.NullTime   `db:"LOCK_EXP_TIME_"`
		LOCKOWNER        sql.NullString `db:"LOCK_OWNER_"`
		RETRIES          sql.NullInt64  `db:"RETRIES_"`
		EXCEPTIONSTACKID sql.NullString `db:"EXCEPTION_STACK_ID_"`
		EXCEPTIONMSG     sql.NullString `db:"EXCEPTION_MSG_"`
		HANDLERTYPE      sql.NullString `db:"HANDLER_TYPE_"`
		HANDLERCFG       sql.NullString `db:"HANDLER_CFG_"`
		CUSTOMVALUESID   sql.NullString `db:"CUSTOM_VALUES_ID_"`
		ADVHANDLERCFGID  sql.NullString `db:"ADV_HANDLER_CFG_ID_"`
		CREATETIME       sql.NullTime   `db:"CREATE_TIME_"`
		SCOPETYPE        sql.NullString `db:"SCOPE_TYPE_"`
		TENANTID         string         `db:"TENANT_ID_"`
	}
)

func newActRuHistoryJobModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultActRuHistoryJobModel {
	return &defaultActRuHistoryJobModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`act_ru_history_job`",
	}
}

func (m *defaultActRuHistoryJobModel) Insert(ctx context.Context, data *ActRuHistoryJob) (sql.Result, error) {
	assetActRuHistoryJobIDKey := fmt.Sprintf("%s%v", cacheAssetActRuHistoryJobIDPrefix, data.ID)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, actRuHistoryJobRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ID, data.REV, data.LOCKEXPTIME, data.LOCKOWNER, data.RETRIES, data.EXCEPTIONSTACKID, data.EXCEPTIONMSG, data.HANDLERTYPE, data.HANDLERCFG, data.CUSTOMVALUESID, data.ADVHANDLERCFGID, data.CREATETIME, data.SCOPETYPE, data.TENANTID)
	}, assetActRuHistoryJobIDKey)
	return ret, err
}

func (m *defaultActRuHistoryJobModel) FindOne(ctx context.Context, iD string) (*ActRuHistoryJob, error) {
	assetActRuHistoryJobIDKey := fmt.Sprintf("%s%v", cacheAssetActRuHistoryJobIDPrefix, iD)
	var resp ActRuHistoryJob
	err := m.QueryRowCtx(ctx, &resp, assetActRuHistoryJobIDKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actRuHistoryJobRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, iD)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActRuHistoryJobModel) Update(ctx context.Context, data *ActRuHistoryJob) error {
	assetActRuHistoryJobIDKey := fmt.Sprintf("%s%v", cacheAssetActRuHistoryJobIDPrefix, data.ID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `ID_` = ?", m.table, actRuHistoryJobRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.REV, data.LOCKEXPTIME, data.LOCKOWNER, data.RETRIES, data.EXCEPTIONSTACKID, data.EXCEPTIONMSG, data.HANDLERTYPE, data.HANDLERCFG, data.CUSTOMVALUESID, data.ADVHANDLERCFGID, data.CREATETIME, data.SCOPETYPE, data.TENANTID, data.ID)
	}, assetActRuHistoryJobIDKey)
	return err
}

func (m *defaultActRuHistoryJobModel) Delete(ctx context.Context, iD string) error {
	assetActRuHistoryJobIDKey := fmt.Sprintf("%s%v", cacheAssetActRuHistoryJobIDPrefix, iD)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `ID_` = ?", m.table)
		return conn.ExecCtx(ctx, query, iD)
	}, assetActRuHistoryJobIDKey)
	return err
}

func (m *defaultActRuHistoryJobModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetActRuHistoryJobIDPrefix, primary)
}

func (m *defaultActRuHistoryJobModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actRuHistoryJobRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultActRuHistoryJobModel) tableName() string {
	return m.table
}
