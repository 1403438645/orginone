// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asFormModelHistoryFieldNames          = builder.RawFieldNames(&AsFormModelHistory{})
	asFormModelHistoryRows                = strings.Join(asFormModelHistoryFieldNames, ",")
	asFormModelHistoryRowsExpectAutoSet   = strings.Join(stringx.Remove(asFormModelHistoryFieldNames, "`create_time`", "`update_time`"), ",")
	asFormModelHistoryRowsWithPlaceHolder = strings.Join(stringx.Remove(asFormModelHistoryFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsFormModelHistoryIdPrefix = "cache:asset:asFormModelHistory:id:"
)

type (
	asFormModelHistoryModel interface {
		Insert(ctx context.Context, data *AsFormModelHistory) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*AsFormModelHistory, error)
		Update(ctx context.Context, data *AsFormModelHistory) error
		Delete(ctx context.Context, id string) error
	}

	defaultAsFormModelHistoryModel struct {
		sqlc.CachedConn
		table string
	}

	AsFormModelHistory struct {
		Id                string         `db:"id"`
		FormName          string         `db:"form_name"`
		CreatedTime       time.Time      `db:"created_time"`
		CreatedBy         string         `db:"created_by"`
		LastUpdatedTime   sql.NullTime   `db:"last_updated_time"`
		LastUpdatedBy     sql.NullString `db:"last_updated_by"`
		Version           int64          `db:"version"`
		ModelSheet        string         `db:"model_sheet"`
		GroupId           int64          `db:"group_id"`
		IconCls           sql.NullString `db:"icon_cls"`
		ProcModelId       sql.NullString `db:"proc_model_id"`
		SceneId           sql.NullString `db:"scene_id"`
		AppId             sql.NullString `db:"app_id"`
		IsBinded          sql.NullInt64  `db:"is_binded"`
		IsBindAuthority   sql.NullInt64  `db:"is_bind_authority"`
		IsAddNodeInfo     sql.NullInt64  `db:"is_add_node_info"`
		IsAddSeqCondition sql.NullInt64  `db:"is_add_seq_condition"`
		IsDeleted         sql.NullInt64  `db:"is_deleted"`
		Status            sql.NullInt64  `db:"status"`
		AsFormId          string         `db:"as_form_id"`
		RemovalDate       sql.NullTime   `db:"removal_date"`
		TenantId          sql.NullString `db:"tenant_id"`
	}
)

func newAsFormModelHistoryModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsFormModelHistoryModel {
	return &defaultAsFormModelHistoryModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_form_model_history`",
	}
}

func (m *defaultAsFormModelHistoryModel) Insert(ctx context.Context, data *AsFormModelHistory) (sql.Result, error) {
	assetAsFormModelHistoryIdKey := fmt.Sprintf("%s%v", cacheAssetAsFormModelHistoryIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, asFormModelHistoryRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.FormName, data.CreatedTime, data.CreatedBy, data.LastUpdatedTime, data.LastUpdatedBy, data.Version, data.ModelSheet, data.GroupId, data.IconCls, data.ProcModelId, data.SceneId, data.AppId, data.IsBinded, data.IsBindAuthority, data.IsAddNodeInfo, data.IsAddSeqCondition, data.IsDeleted, data.Status, data.AsFormId, data.RemovalDate, data.TenantId)
	}, assetAsFormModelHistoryIdKey)
	return ret, err
}

func (m *defaultAsFormModelHistoryModel) FindOne(ctx context.Context, id string) (*AsFormModelHistory, error) {
	assetAsFormModelHistoryIdKey := fmt.Sprintf("%s%v", cacheAssetAsFormModelHistoryIdPrefix, id)
	var resp AsFormModelHistory
	err := m.QueryRowCtx(ctx, &resp, assetAsFormModelHistoryIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asFormModelHistoryRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsFormModelHistoryModel) Update(ctx context.Context, data *AsFormModelHistory) error {
	assetAsFormModelHistoryIdKey := fmt.Sprintf("%s%v", cacheAssetAsFormModelHistoryIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asFormModelHistoryRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.FormName, data.CreatedTime, data.CreatedBy, data.LastUpdatedTime, data.LastUpdatedBy, data.Version, data.ModelSheet, data.GroupId, data.IconCls, data.ProcModelId, data.SceneId, data.AppId, data.IsBinded, data.IsBindAuthority, data.IsAddNodeInfo, data.IsAddSeqCondition, data.IsDeleted, data.Status, data.AsFormId, data.RemovalDate, data.TenantId, data.Id)
	}, assetAsFormModelHistoryIdKey)
	return err
}

func (m *defaultAsFormModelHistoryModel) Delete(ctx context.Context, id string) error {
	assetAsFormModelHistoryIdKey := fmt.Sprintf("%s%v", cacheAssetAsFormModelHistoryIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsFormModelHistoryIdKey)
	return err
}

func (m *defaultAsFormModelHistoryModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsFormModelHistoryIdPrefix, primary)
}

func (m *defaultAsFormModelHistoryModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asFormModelHistoryRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsFormModelHistoryModel) tableName() string {
	return m.table
}
