// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	actHiAttachmentFieldNames          = builder.RawFieldNames(&ActHiAttachment{})
	actHiAttachmentRows                = strings.Join(actHiAttachmentFieldNames, ",")
	actHiAttachmentRowsExpectAutoSet   = strings.Join(stringx.Remove(actHiAttachmentFieldNames, "`create_time`", "`update_time`"), ",")
	actHiAttachmentRowsWithPlaceHolder = strings.Join(stringx.Remove(actHiAttachmentFieldNames, "`ID_`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetActHiAttachmentIDPrefix = "cache:asset:actHiAttachment:iD:"
)

type (
	actHiAttachmentModel interface {
		Insert(ctx context.Context, data *ActHiAttachment) (sql.Result, error)
		FindOne(ctx context.Context, iD string) (*ActHiAttachment, error)
		Update(ctx context.Context, data *ActHiAttachment) error
		Delete(ctx context.Context, iD string) error
	}

	defaultActHiAttachmentModel struct {
		sqlc.CachedConn
		table string
	}

	ActHiAttachment struct {
		ID          string         `db:"ID_"`
		REV         sql.NullInt64  `db:"REV_"`
		USERID      sql.NullString `db:"USER_ID_"`
		NAME        sql.NullString `db:"NAME_"`
		DESCRIPTION sql.NullString `db:"DESCRIPTION_"`
		TYPE        sql.NullString `db:"TYPE_"`
		TASKID      sql.NullString `db:"TASK_ID_"`
		PROCINSTID  sql.NullString `db:"PROC_INST_ID_"`
		URL         sql.NullString `db:"URL_"`
		CONTENTID   sql.NullString `db:"CONTENT_ID_"`
		TIME        sql.NullTime   `db:"TIME_"`
	}
)

func newActHiAttachmentModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultActHiAttachmentModel {
	return &defaultActHiAttachmentModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`act_hi_attachment`",
	}
}

func (m *defaultActHiAttachmentModel) Insert(ctx context.Context, data *ActHiAttachment) (sql.Result, error) {
	assetActHiAttachmentIDKey := fmt.Sprintf("%s%v", cacheAssetActHiAttachmentIDPrefix, data.ID)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, actHiAttachmentRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ID, data.REV, data.USERID, data.NAME, data.DESCRIPTION, data.TYPE, data.TASKID, data.PROCINSTID, data.URL, data.CONTENTID, data.TIME)
	}, assetActHiAttachmentIDKey)
	return ret, err
}

func (m *defaultActHiAttachmentModel) FindOne(ctx context.Context, iD string) (*ActHiAttachment, error) {
	assetActHiAttachmentIDKey := fmt.Sprintf("%s%v", cacheAssetActHiAttachmentIDPrefix, iD)
	var resp ActHiAttachment
	err := m.QueryRowCtx(ctx, &resp, assetActHiAttachmentIDKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actHiAttachmentRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, iD)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActHiAttachmentModel) Update(ctx context.Context, data *ActHiAttachment) error {
	assetActHiAttachmentIDKey := fmt.Sprintf("%s%v", cacheAssetActHiAttachmentIDPrefix, data.ID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `ID_` = ?", m.table, actHiAttachmentRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.REV, data.USERID, data.NAME, data.DESCRIPTION, data.TYPE, data.TASKID, data.PROCINSTID, data.URL, data.CONTENTID, data.TIME, data.ID)
	}, assetActHiAttachmentIDKey)
	return err
}

func (m *defaultActHiAttachmentModel) Delete(ctx context.Context, iD string) error {
	assetActHiAttachmentIDKey := fmt.Sprintf("%s%v", cacheAssetActHiAttachmentIDPrefix, iD)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `ID_` = ?", m.table)
		return conn.ExecCtx(ctx, query, iD)
	}, assetActHiAttachmentIDKey)
	return err
}

func (m *defaultActHiAttachmentModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetActHiAttachmentIDPrefix, primary)
}

func (m *defaultActHiAttachmentModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actHiAttachmentRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultActHiAttachmentModel) tableName() string {
	return m.table
}
