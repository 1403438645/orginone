// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asApiDataSourceFieldNames          = builder.RawFieldNames(&AsApiDataSource{})
	asApiDataSourceRows                = strings.Join(asApiDataSourceFieldNames, ",")
	asApiDataSourceRowsExpectAutoSet   = strings.Join(stringx.Remove(asApiDataSourceFieldNames, "`create_time`", "`update_time`"), ",")
	asApiDataSourceRowsWithPlaceHolder = strings.Join(stringx.Remove(asApiDataSourceFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsApiDataSourceIdPrefix = "cache:asset:asApiDataSource:id:"
)

type (
	asApiDataSourceModel interface {
		Insert(ctx context.Context, data *AsApiDataSource) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AsApiDataSource, error)
		Update(ctx context.Context, data *AsApiDataSource) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAsApiDataSourceModel struct {
		sqlc.CachedConn
		table string
	}

	AsApiDataSource struct {
		Id          int64          `db:"id"`
		SourceName  string         `db:"source_name"`  // api名称
		SourceType  int64          `db:"source_type"`  // 数据源对应数据类型（1：无；2：组织数据；3：用户数据）
		TenantCode  string         `db:"tenant_code"`  // 租户编码
		ApiUrl      string         `db:"api_url"`      // api地址
		Params      sql.NullString `db:"params"`       // 参数集合
		ApiMethod   int64          `db:"api_method"`   // 访问方式：get和post
		ApiType     int64          `db:"api_type"`     // api类型
		ApiHeader   sql.NullString `db:"api_header"`   // api请求头
		ApiCookie   sql.NullString `db:"api_cookie"`   // cookie
		ContentType int64          `db:"content_type"` // 请求的与实体对应的MIME信息（依赖数据字典）
		UpdateTime  time.Time      `db:"update_time"`  // 更新时间
		CreateTime  time.Time      `db:"create_time"`  // 添加时间
		UpdateUser  sql.NullInt64  `db:"update_user"`  // 更新用户
		CreateUser  sql.NullInt64  `db:"create_user"`  // 创建用户
		IsDeleted   int64          `db:"is_deleted"`   // 是否被删除
		Status      int64          `db:"status"`       // 状态
	}
)

func newAsApiDataSourceModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsApiDataSourceModel {
	return &defaultAsApiDataSourceModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_api_data_source`",
	}
}

func (m *defaultAsApiDataSourceModel) Insert(ctx context.Context, data *AsApiDataSource) (sql.Result, error) {
	assetAsApiDataSourceIdKey := fmt.Sprintf("%s%v", cacheAssetAsApiDataSourceIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, asApiDataSourceRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.SourceName, data.SourceType, data.TenantCode, data.ApiUrl, data.Params, data.ApiMethod, data.ApiType, data.ApiHeader, data.ApiCookie, data.ContentType, data.UpdateUser, data.CreateUser, data.IsDeleted, data.Status)
	}, assetAsApiDataSourceIdKey)
	return ret, err
}

func (m *defaultAsApiDataSourceModel) FindOne(ctx context.Context, id int64) (*AsApiDataSource, error) {
	assetAsApiDataSourceIdKey := fmt.Sprintf("%s%v", cacheAssetAsApiDataSourceIdPrefix, id)
	var resp AsApiDataSource
	err := m.QueryRowCtx(ctx, &resp, assetAsApiDataSourceIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asApiDataSourceRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsApiDataSourceModel) Update(ctx context.Context, data *AsApiDataSource) error {
	assetAsApiDataSourceIdKey := fmt.Sprintf("%s%v", cacheAssetAsApiDataSourceIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asApiDataSourceRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.SourceName, data.SourceType, data.TenantCode, data.ApiUrl, data.Params, data.ApiMethod, data.ApiType, data.ApiHeader, data.ApiCookie, data.ContentType, data.UpdateUser, data.CreateUser, data.IsDeleted, data.Status, data.Id)
	}, assetAsApiDataSourceIdKey)
	return err
}

func (m *defaultAsApiDataSourceModel) Delete(ctx context.Context, id int64) error {
	assetAsApiDataSourceIdKey := fmt.Sprintf("%s%v", cacheAssetAsApiDataSourceIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsApiDataSourceIdKey)
	return err
}

func (m *defaultAsApiDataSourceModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsApiDataSourceIdPrefix, primary)
}

func (m *defaultAsApiDataSourceModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asApiDataSourceRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsApiDataSourceModel) tableName() string {
	return m.table
}
