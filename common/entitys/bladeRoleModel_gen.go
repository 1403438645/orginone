// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bladeRoleFieldNames          = builder.RawFieldNames(&BladeRole{})
	bladeRoleRows                = strings.Join(bladeRoleFieldNames, ",")
	bladeRoleRowsExpectAutoSet   = strings.Join(stringx.Remove(bladeRoleFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	bladeRoleRowsWithPlaceHolder = strings.Join(stringx.Remove(bladeRoleFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetBladeRoleIdPrefix = "cache:asset:bladeRole:id:"
)

type (
	bladeRoleModel interface {
		Insert(ctx context.Context, data *BladeRole) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BladeRole, error)
		Update(ctx context.Context, data *BladeRole) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBladeRoleModel struct {
		sqlc.CachedConn
		table string
	}

	BladeRole struct {
		Id         int64          `db:"id"`          // 主键
		TenantCode string         `db:"tenant_code"` // 租户编号
		ParentId   int64          `db:"parent_id"`   // 父主键
		RoleName   sql.NullString `db:"role_name"`   // 角色名
		Sort       sql.NullInt64  `db:"sort"`        // 排序
		RoleAlias  sql.NullString `db:"role_alias"`  // 角色别名
		IsDeleted  int64          `db:"is_deleted"`  // 是否已删除
	}
)

func newBladeRoleModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultBladeRoleModel {
	return &defaultBladeRoleModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`blade_role`",
	}
}

func (m *defaultBladeRoleModel) Insert(ctx context.Context, data *BladeRole) (sql.Result, error) {
	assetBladeRoleIdKey := fmt.Sprintf("%s%v", cacheAssetBladeRoleIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, bladeRoleRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.TenantCode, data.ParentId, data.RoleName, data.Sort, data.RoleAlias, data.IsDeleted)
	}, assetBladeRoleIdKey)
	return ret, err
}

func (m *defaultBladeRoleModel) FindOne(ctx context.Context, id int64) (*BladeRole, error) {
	assetBladeRoleIdKey := fmt.Sprintf("%s%v", cacheAssetBladeRoleIdPrefix, id)
	var resp BladeRole
	err := m.QueryRowCtx(ctx, &resp, assetBladeRoleIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bladeRoleRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBladeRoleModel) Update(ctx context.Context, data *BladeRole) error {
	assetBladeRoleIdKey := fmt.Sprintf("%s%v", cacheAssetBladeRoleIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, bladeRoleRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.TenantCode, data.ParentId, data.RoleName, data.Sort, data.RoleAlias, data.IsDeleted, data.Id)
	}, assetBladeRoleIdKey)
	return err
}

func (m *defaultBladeRoleModel) Delete(ctx context.Context, id int64) error {
	assetBladeRoleIdKey := fmt.Sprintf("%s%v", cacheAssetBladeRoleIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetBladeRoleIdKey)
	return err
}

func (m *defaultBladeRoleModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetBladeRoleIdPrefix, primary)
}

func (m *defaultBladeRoleModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bladeRoleRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBladeRoleModel) tableName() string {
	return m.table
}
