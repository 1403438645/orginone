// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asDictFieldNames          = builder.RawFieldNames(&AsDict{})
	asDictRows                = strings.Join(asDictFieldNames, ",")
	asDictRowsExpectAutoSet   = strings.Join(stringx.Remove(asDictFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	asDictRowsWithPlaceHolder = strings.Join(stringx.Remove(asDictFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsDictIdPrefix = "cache:asset:asDict:id:"
)

type (
	asDictModel interface {
		Insert(ctx context.Context, data *AsDict) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AsDict, error)
		Update(ctx context.Context, data *AsDict) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAsDictModel struct {
		sqlc.CachedConn
		table string
	}

	AsDict struct {
		Id           int64          `db:"id"`            // 主键
		ParentId     int64          `db:"parent_id"`     // 父主键
		Code         sql.NullString `db:"code"`          // 字典码
		DictKey      sql.NullInt64  `db:"dict_key"`      // 字典值
		DictValue    sql.NullString `db:"dict_value"`    // 字典名称
		Sort         sql.NullInt64  `db:"sort"`          // 排序
		Remark       sql.NullString `db:"remark"`        // 字典备注
		IsDeleted    int64          `db:"is_deleted"`    // 是否已删除
		Currversion  sql.NullInt64  `db:"currversion"`   // 当前版本号
		Version      sql.NullInt64  `db:"version"`       // 版本号
		DictparentId sql.NullInt64  `db:"dictparent_id"` // 枚举父节点
	}
)

func newAsDictModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsDictModel {
	return &defaultAsDictModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_dict`",
	}
}

func (m *defaultAsDictModel) Insert(ctx context.Context, data *AsDict) (sql.Result, error) {
	assetAsDictIdKey := fmt.Sprintf("%s%v", cacheAssetAsDictIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, asDictRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ParentId, data.Code, data.DictKey, data.DictValue, data.Sort, data.Remark, data.IsDeleted, data.Currversion, data.Version, data.DictparentId)
	}, assetAsDictIdKey)
	return ret, err
}

func (m *defaultAsDictModel) FindOne(ctx context.Context, id int64) (*AsDict, error) {
	assetAsDictIdKey := fmt.Sprintf("%s%v", cacheAssetAsDictIdPrefix, id)
	var resp AsDict
	err := m.QueryRowCtx(ctx, &resp, assetAsDictIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asDictRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsDictModel) Update(ctx context.Context, data *AsDict) error {
	assetAsDictIdKey := fmt.Sprintf("%s%v", cacheAssetAsDictIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asDictRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ParentId, data.Code, data.DictKey, data.DictValue, data.Sort, data.Remark, data.IsDeleted, data.Currversion, data.Version, data.DictparentId, data.Id)
	}, assetAsDictIdKey)
	return err
}

func (m *defaultAsDictModel) Delete(ctx context.Context, id int64) error {
	assetAsDictIdKey := fmt.Sprintf("%s%v", cacheAssetAsDictIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsDictIdKey)
	return err
}

func (m *defaultAsDictModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsDictIdPrefix, primary)
}

func (m *defaultAsDictModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asDictRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsDictModel) tableName() string {
	return m.table
}
