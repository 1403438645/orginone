// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	actAppAppdefFieldNames          = builder.RawFieldNames(&ActAppAppdef{})
	actAppAppdefRows                = strings.Join(actAppAppdefFieldNames, ",")
	actAppAppdefRowsExpectAutoSet   = strings.Join(stringx.Remove(actAppAppdefFieldNames, "`create_time`", "`update_time`"), ",")
	actAppAppdefRowsWithPlaceHolder = strings.Join(stringx.Remove(actAppAppdefFieldNames, "`ID_`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetActAppAppdefIDPrefix = "cache:asset:actAppAppdef:iD:"
)

type (
	actAppAppdefModel interface {
		Insert(ctx context.Context, data *ActAppAppdef) (sql.Result, error)
		FindOne(ctx context.Context, iD string) (*ActAppAppdef, error)
		Update(ctx context.Context, data *ActAppAppdef) error
		Delete(ctx context.Context, iD string) error
	}

	defaultActAppAppdefModel struct {
		sqlc.CachedConn
		table string
	}

	ActAppAppdef struct {
		ID           string         `db:"ID_"`
		REV          int64          `db:"REV_"`
		NAME         sql.NullString `db:"NAME_"`
		KEY          string         `db:"KEY_"`
		VERSION      int64          `db:"VERSION_"`
		CATEGORY     sql.NullString `db:"CATEGORY_"`
		DEPLOYMENTID sql.NullString `db:"DEPLOYMENT_ID_"`
		RESOURCENAME sql.NullString `db:"RESOURCE_NAME_"`
		DESCRIPTION  sql.NullString `db:"DESCRIPTION_"`
		TENANTID     string         `db:"TENANT_ID_"`
	}
)

func newActAppAppdefModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultActAppAppdefModel {
	return &defaultActAppAppdefModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`act_app_appdef`",
	}
}

func (m *defaultActAppAppdefModel) Insert(ctx context.Context, data *ActAppAppdef) (sql.Result, error) {
	assetActAppAppdefIDKey := fmt.Sprintf("%s%v", cacheAssetActAppAppdefIDPrefix, data.ID)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, actAppAppdefRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ID, data.REV, data.NAME, data.KEY, data.VERSION, data.CATEGORY, data.DEPLOYMENTID, data.RESOURCENAME, data.DESCRIPTION, data.TENANTID)
	}, assetActAppAppdefIDKey)
	return ret, err
}

func (m *defaultActAppAppdefModel) FindOne(ctx context.Context, iD string) (*ActAppAppdef, error) {
	assetActAppAppdefIDKey := fmt.Sprintf("%s%v", cacheAssetActAppAppdefIDPrefix, iD)
	var resp ActAppAppdef
	err := m.QueryRowCtx(ctx, &resp, assetActAppAppdefIDKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actAppAppdefRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, iD)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActAppAppdefModel) Update(ctx context.Context, data *ActAppAppdef) error {
	assetActAppAppdefIDKey := fmt.Sprintf("%s%v", cacheAssetActAppAppdefIDPrefix, data.ID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `ID_` = ?", m.table, actAppAppdefRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.REV, data.NAME, data.KEY, data.VERSION, data.CATEGORY, data.DEPLOYMENTID, data.RESOURCENAME, data.DESCRIPTION, data.TENANTID, data.ID)
	}, assetActAppAppdefIDKey)
	return err
}

func (m *defaultActAppAppdefModel) Delete(ctx context.Context, iD string) error {
	assetActAppAppdefIDKey := fmt.Sprintf("%s%v", cacheAssetActAppAppdefIDPrefix, iD)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `ID_` = ?", m.table)
		return conn.ExecCtx(ctx, query, iD)
	}, assetActAppAppdefIDKey)
	return err
}

func (m *defaultActAppAppdefModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetActAppAppdefIDPrefix, primary)
}

func (m *defaultActAppAppdefModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actAppAppdefRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultActAppAppdefModel) tableName() string {
	return m.table
}
