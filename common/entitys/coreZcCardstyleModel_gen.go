// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	coreZcCardstyleFieldNames          = builder.RawFieldNames(&CoreZcCardstyle{})
	coreZcCardstyleRows                = strings.Join(coreZcCardstyleFieldNames, ",")
	coreZcCardstyleRowsExpectAutoSet   = strings.Join(stringx.Remove(coreZcCardstyleFieldNames, "`create_time`", "`update_time`"), ",")
	coreZcCardstyleRowsWithPlaceHolder = strings.Join(stringx.Remove(coreZcCardstyleFieldNames, "`RECID`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetCoreZcCardstyleRECIDPrefix = "cache:asset:coreZcCardstyle:rECID:"
)

type (
	coreZcCardstyleModel interface {
		Insert(ctx context.Context, data *CoreZcCardstyle) (sql.Result, error)
		FindOne(ctx context.Context, rECID int64) (*CoreZcCardstyle, error)
		Update(ctx context.Context, data *CoreZcCardstyle) error
		Delete(ctx context.Context, rECID int64) error
	}

	defaultCoreZcCardstyleModel struct {
		sqlc.CachedConn
		table string
	}

	CoreZcCardstyle struct {
		RECID      int64          `db:"RECID"`
		NAME       sql.NullString `db:"NAME"` // 名称
		TYPE       sql.NullInt64  `db:"TYPE"` // 类型
		MODIFYTIME sql.NullTime   `db:"MODIFYTIME"`
		MODIFYUSER sql.NullString `db:"MODIFYUSER"`
		CREATETIME sql.NullTime   `db:"CREATETIME"`
		CREATEUSER sql.NullString `db:"CREATEUSER"`
		REMARKS    sql.NullString `db:"REMARKS"`  // 备注
		PARENTID   sql.NullInt64  `db:"PARENTID"` // 父节点
		STATE      sql.NullInt64  `db:"STATE"`    // 是否启用，1启用，0不启用
		TORDER     sql.NullInt64  `db:"T_ORDER"`
	}
)

func newCoreZcCardstyleModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultCoreZcCardstyleModel {
	return &defaultCoreZcCardstyleModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`core_zc_cardstyle`",
	}
}

func (m *defaultCoreZcCardstyleModel) Insert(ctx context.Context, data *CoreZcCardstyle) (sql.Result, error) {
	assetCoreZcCardstyleRECIDKey := fmt.Sprintf("%s%v", cacheAssetCoreZcCardstyleRECIDPrefix, data.RECID)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, coreZcCardstyleRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.RECID, data.NAME, data.TYPE, data.MODIFYTIME, data.MODIFYUSER, data.CREATETIME, data.CREATEUSER, data.REMARKS, data.PARENTID, data.STATE, data.TORDER)
	}, assetCoreZcCardstyleRECIDKey)
	return ret, err
}

func (m *defaultCoreZcCardstyleModel) FindOne(ctx context.Context, rECID int64) (*CoreZcCardstyle, error) {
	assetCoreZcCardstyleRECIDKey := fmt.Sprintf("%s%v", cacheAssetCoreZcCardstyleRECIDPrefix, rECID)
	var resp CoreZcCardstyle
	err := m.QueryRowCtx(ctx, &resp, assetCoreZcCardstyleRECIDKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `RECID` = ? limit 1", coreZcCardstyleRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, rECID)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCoreZcCardstyleModel) Update(ctx context.Context, data *CoreZcCardstyle) error {
	assetCoreZcCardstyleRECIDKey := fmt.Sprintf("%s%v", cacheAssetCoreZcCardstyleRECIDPrefix, data.RECID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `RECID` = ?", m.table, coreZcCardstyleRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.NAME, data.TYPE, data.MODIFYTIME, data.MODIFYUSER, data.CREATETIME, data.CREATEUSER, data.REMARKS, data.PARENTID, data.STATE, data.TORDER, data.RECID)
	}, assetCoreZcCardstyleRECIDKey)
	return err
}

func (m *defaultCoreZcCardstyleModel) Delete(ctx context.Context, rECID int64) error {
	assetCoreZcCardstyleRECIDKey := fmt.Sprintf("%s%v", cacheAssetCoreZcCardstyleRECIDPrefix, rECID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `RECID` = ?", m.table)
		return conn.ExecCtx(ctx, query, rECID)
	}, assetCoreZcCardstyleRECIDKey)
	return err
}

func (m *defaultCoreZcCardstyleModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetCoreZcCardstyleRECIDPrefix, primary)
}

func (m *defaultCoreZcCardstyleModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `RECID` = ? limit 1", coreZcCardstyleRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultCoreZcCardstyleModel) tableName() string {
	return m.table
}
