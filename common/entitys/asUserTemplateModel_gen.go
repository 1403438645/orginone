// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asUserTemplateFieldNames          = builder.RawFieldNames(&AsUserTemplate{})
	asUserTemplateRows                = strings.Join(asUserTemplateFieldNames, ",")
	asUserTemplateRowsExpectAutoSet   = strings.Join(stringx.Remove(asUserTemplateFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	asUserTemplateRowsWithPlaceHolder = strings.Join(stringx.Remove(asUserTemplateFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsUserTemplateIdPrefix = "cache:asset:asUserTemplate:id:"
)

type (
	asUserTemplateModel interface {
		Insert(ctx context.Context, data *AsUserTemplate) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AsUserTemplate, error)
		Update(ctx context.Context, data *AsUserTemplate) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAsUserTemplateModel struct {
		sqlc.CachedConn
		table string
	}

	AsUserTemplate struct {
		TemplateId int64  `db:"template_id"`
		UserId     int64  `db:"user_id"`
		TenantCode string `db:"tenant_code"`
		Id         int64  `db:"id"`
	}
)

func newAsUserTemplateModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsUserTemplateModel {
	return &defaultAsUserTemplateModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_user_template`",
	}
}

func (m *defaultAsUserTemplateModel) Insert(ctx context.Context, data *AsUserTemplate) (sql.Result, error) {
	assetAsUserTemplateIdKey := fmt.Sprintf("%s%v", cacheAssetAsUserTemplateIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, asUserTemplateRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.TemplateId, data.UserId, data.TenantCode)
	}, assetAsUserTemplateIdKey)
	return ret, err
}

func (m *defaultAsUserTemplateModel) FindOne(ctx context.Context, id int64) (*AsUserTemplate, error) {
	assetAsUserTemplateIdKey := fmt.Sprintf("%s%v", cacheAssetAsUserTemplateIdPrefix, id)
	var resp AsUserTemplate
	err := m.QueryRowCtx(ctx, &resp, assetAsUserTemplateIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asUserTemplateRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsUserTemplateModel) Update(ctx context.Context, data *AsUserTemplate) error {
	assetAsUserTemplateIdKey := fmt.Sprintf("%s%v", cacheAssetAsUserTemplateIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asUserTemplateRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.TemplateId, data.UserId, data.TenantCode, data.Id)
	}, assetAsUserTemplateIdKey)
	return err
}

func (m *defaultAsUserTemplateModel) Delete(ctx context.Context, id int64) error {
	assetAsUserTemplateIdKey := fmt.Sprintf("%s%v", cacheAssetAsUserTemplateIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsUserTemplateIdKey)
	return err
}

func (m *defaultAsUserTemplateModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsUserTemplateIdPrefix, primary)
}

func (m *defaultAsUserTemplateModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asUserTemplateRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsUserTemplateModel) tableName() string {
	return m.table
}
