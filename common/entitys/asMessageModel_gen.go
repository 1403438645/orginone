// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asMessageFieldNames          = builder.RawFieldNames(&AsMessage{})
	asMessageRows                = strings.Join(asMessageFieldNames, ",")
	asMessageRowsExpectAutoSet   = strings.Join(stringx.Remove(asMessageFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	asMessageRowsWithPlaceHolder = strings.Join(stringx.Remove(asMessageFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsMessageIdPrefix = "cache:asset:asMessage:id:"
)

type (
	asMessageModel interface {
		Insert(ctx context.Context, data *AsMessage) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AsMessage, error)
		Update(ctx context.Context, data *AsMessage) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAsMessageModel struct {
		sqlc.CachedConn
		table string
	}

	AsMessage struct {
		Id          int64          `db:"id"`           // 用户代码
		AppId       sql.NullInt64  `db:"app_id"`       // 应用id
		MsgSource   int64          `db:"msg_source"`   // 消息来源 0 管理后台 1应用 默认 0
		Title       string         `db:"title"`        // 标题
		Content     sql.NullString `db:"content"`      // 内容
		Url         string         `db:"url"`          // 链接
		ReceiveType sql.NullInt64  `db:"receive_type"` // 接受类型
		Sender      sql.NullString `db:"sender"`       // 发送人
		SenderId    sql.NullInt64  `db:"sender_id"`    // 发送人id
		Color       sql.NullString `db:"color"`        // 预警颜色
		SendTime    sql.NullTime   `db:"send_time"`    // 发送时间
		CreateTime  time.Time      `db:"create_time"`  // 创建时间
		UpdateTime  time.Time      `db:"update_time"`  // 修改时间
		IsDeleted   int64          `db:"is_deleted"`   // 是否已删除
		MsgType     sql.NullString `db:"msg_type"`
	}
)

func newAsMessageModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsMessageModel {
	return &defaultAsMessageModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_message`",
	}
}

func (m *defaultAsMessageModel) Insert(ctx context.Context, data *AsMessage) (sql.Result, error) {
	assetAsMessageIdKey := fmt.Sprintf("%s%v", cacheAssetAsMessageIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, asMessageRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.AppId, data.MsgSource, data.Title, data.Content, data.Url, data.ReceiveType, data.Sender, data.SenderId, data.Color, data.SendTime, data.IsDeleted, data.MsgType)
	}, assetAsMessageIdKey)
	return ret, err
}

func (m *defaultAsMessageModel) FindOne(ctx context.Context, id int64) (*AsMessage, error) {
	assetAsMessageIdKey := fmt.Sprintf("%s%v", cacheAssetAsMessageIdPrefix, id)
	var resp AsMessage
	err := m.QueryRowCtx(ctx, &resp, assetAsMessageIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asMessageRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsMessageModel) Update(ctx context.Context, data *AsMessage) error {
	assetAsMessageIdKey := fmt.Sprintf("%s%v", cacheAssetAsMessageIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asMessageRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.AppId, data.MsgSource, data.Title, data.Content, data.Url, data.ReceiveType, data.Sender, data.SenderId, data.Color, data.SendTime, data.IsDeleted, data.MsgType, data.Id)
	}, assetAsMessageIdKey)
	return err
}

func (m *defaultAsMessageModel) Delete(ctx context.Context, id int64) error {
	assetAsMessageIdKey := fmt.Sprintf("%s%v", cacheAssetAsMessageIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsMessageIdKey)
	return err
}

func (m *defaultAsMessageModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsMessageIdPrefix, primary)
}

func (m *defaultAsMessageModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asMessageRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsMessageModel) tableName() string {
	return m.table
}
