// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	marketPortalFieldNames          = builder.RawFieldNames(&MarketPortal{})
	marketPortalRows                = strings.Join(marketPortalFieldNames, ",")
	marketPortalRowsExpectAutoSet   = strings.Join(stringx.Remove(marketPortalFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	marketPortalRowsWithPlaceHolder = strings.Join(stringx.Remove(marketPortalFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetMarketPortalIdPrefix = "cache:asset:marketPortal:id:"
)

type (
	marketPortalModel interface {
		Insert(ctx context.Context, data *MarketPortal) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*MarketPortal, error)
		Update(ctx context.Context, data *MarketPortal) error
		Delete(ctx context.Context, id int64) error
	}

	defaultMarketPortalModel struct {
		sqlc.CachedConn
		table string
	}

	MarketPortal struct {
		Id          int64          `db:"id"` // 主键
		UserId      sql.NullInt64  `db:"user_id"`
		AppId       sql.NullInt64  `db:"app_id"`
		OrderNumber sql.NullInt64  `db:"order_number"`
		Display     sql.NullString `db:"display"`
		CreateUser  sql.NullInt64  `db:"create_user"` // 创建人
		CreateTime  sql.NullTime   `db:"create_time"` // 创建时间
		UpdateUser  sql.NullInt64  `db:"update_user"` // 修改人
		UpdateTime  sql.NullTime   `db:"update_time"` // 修改时间
		Status      sql.NullInt64  `db:"status"`      // 状态
		IsDeleted   sql.NullInt64  `db:"is_deleted"`  // 是否已删除
		TenantId    sql.NullString `db:"tenant_id"`   // 租户id
	}
)

func newMarketPortalModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultMarketPortalModel {
	return &defaultMarketPortalModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`market_portal`",
	}
}

func (m *defaultMarketPortalModel) Insert(ctx context.Context, data *MarketPortal) (sql.Result, error) {
	assetMarketPortalIdKey := fmt.Sprintf("%s%v", cacheAssetMarketPortalIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, marketPortalRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.AppId, data.OrderNumber, data.Display, data.CreateUser, data.UpdateUser, data.Status, data.IsDeleted, data.TenantId)
	}, assetMarketPortalIdKey)
	return ret, err
}

func (m *defaultMarketPortalModel) FindOne(ctx context.Context, id int64) (*MarketPortal, error) {
	assetMarketPortalIdKey := fmt.Sprintf("%s%v", cacheAssetMarketPortalIdPrefix, id)
	var resp MarketPortal
	err := m.QueryRowCtx(ctx, &resp, assetMarketPortalIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", marketPortalRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMarketPortalModel) Update(ctx context.Context, data *MarketPortal) error {
	assetMarketPortalIdKey := fmt.Sprintf("%s%v", cacheAssetMarketPortalIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, marketPortalRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.AppId, data.OrderNumber, data.Display, data.CreateUser, data.UpdateUser, data.Status, data.IsDeleted, data.TenantId, data.Id)
	}, assetMarketPortalIdKey)
	return err
}

func (m *defaultMarketPortalModel) Delete(ctx context.Context, id int64) error {
	assetMarketPortalIdKey := fmt.Sprintf("%s%v", cacheAssetMarketPortalIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetMarketPortalIdKey)
	return err
}

func (m *defaultMarketPortalModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetMarketPortalIdPrefix, primary)
}

func (m *defaultMarketPortalModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", marketPortalRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultMarketPortalModel) tableName() string {
	return m.table
}
