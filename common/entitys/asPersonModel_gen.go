// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asPersonFieldNames          = builder.RawFieldNames(&AsPerson{})
	asPersonRows                = strings.Join(asPersonFieldNames, ",")
	asPersonRowsExpectAutoSet   = strings.Join(stringx.Remove(asPersonFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	asPersonRowsWithPlaceHolder = strings.Join(stringx.Remove(asPersonFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsPersonIdPrefix = "cache:asset:asPerson:id:"
)

type (
	asPersonModel interface {
		Insert(ctx context.Context, data *AsPerson) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AsPerson, error)
		Update(ctx context.Context, data *AsPerson) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAsPersonModel struct {
		sqlc.CachedConn
		table string
	}

	AsPerson struct {
		Id            int64          `db:"id"`
		TenantCode    sql.NullString `db:"tenant_code"`
		RealName      string         `db:"real_name"`      // 姓名
		IdCard        sql.NullString `db:"id_card"`        // 身份证号
		Gender        sql.NullInt64  `db:"gender"`         // 性别：1、男2、女
		UserBirthday  sql.NullTime   `db:"user_birthday"`  // 出生日期
		UserEmail     sql.NullString `db:"user_email"`     // 邮箱号码
		UserPhoto     sql.NullString `db:"user_photo"`     // 照片
		UpdateTime    time.Time      `db:"update_time"`    // 最后一次更新时间戳
		CreateTime    time.Time      `db:"create_time"`    // 添加时间
		CreateUser    sql.NullInt64  `db:"create_user"`    // 添加者
		UpdateUser    sql.NullInt64  `db:"update_user"`    // 修改者
		IsDeleted     int64          `db:"is_deleted"`     // 状态 1：有效 0：无效
		Status        int64          `db:"status"`         // 用户状态：0-不可用 1-审核中 2-可用 3-未激活
		UserId        int64          `db:"user_id"`        // 对应用户id
		PhoneNumber   sql.NullString `db:"phone_number"`   // 手机号码
		Province      sql.NullString `db:"province"`       // 省
		City          sql.NullString `db:"city"`           // 市
		StreetAddress sql.NullString `db:"street_address"` // 地区
		UserCode      sql.NullString `db:"user_code"`      // 用户code
		IsMaster      sql.NullInt64  `db:"is_master"`      // 是否是主单位(0-否,1-是)
	}
)

func newAsPersonModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsPersonModel {
	return &defaultAsPersonModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_person`",
	}
}

func (m *defaultAsPersonModel) Insert(ctx context.Context, data *AsPerson) (sql.Result, error) {
	assetAsPersonIdKey := fmt.Sprintf("%s%v", cacheAssetAsPersonIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, asPersonRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.TenantCode, data.RealName, data.IdCard, data.Gender, data.UserBirthday, data.UserEmail, data.UserPhoto, data.CreateUser, data.UpdateUser, data.IsDeleted, data.Status, data.UserId, data.PhoneNumber, data.Province, data.City, data.StreetAddress, data.UserCode, data.IsMaster)
	}, assetAsPersonIdKey)
	return ret, err
}

func (m *defaultAsPersonModel) FindOne(ctx context.Context, id int64) (*AsPerson, error) {
	assetAsPersonIdKey := fmt.Sprintf("%s%v", cacheAssetAsPersonIdPrefix, id)
	var resp AsPerson
	err := m.QueryRowCtx(ctx, &resp, assetAsPersonIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asPersonRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsPersonModel) Update(ctx context.Context, data *AsPerson) error {
	assetAsPersonIdKey := fmt.Sprintf("%s%v", cacheAssetAsPersonIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asPersonRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.TenantCode, data.RealName, data.IdCard, data.Gender, data.UserBirthday, data.UserEmail, data.UserPhoto, data.CreateUser, data.UpdateUser, data.IsDeleted, data.Status, data.UserId, data.PhoneNumber, data.Province, data.City, data.StreetAddress, data.UserCode, data.IsMaster, data.Id)
	}, assetAsPersonIdKey)
	return err
}

func (m *defaultAsPersonModel) Delete(ctx context.Context, id int64) error {
	assetAsPersonIdKey := fmt.Sprintf("%s%v", cacheAssetAsPersonIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsPersonIdKey)
	return err
}

func (m *defaultAsPersonModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsPersonIdPrefix, primary)
}

func (m *defaultAsPersonModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asPersonRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsPersonModel) tableName() string {
	return m.table
}
