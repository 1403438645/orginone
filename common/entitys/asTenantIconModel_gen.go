// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asTenantIconFieldNames          = builder.RawFieldNames(&AsTenantIcon{})
	asTenantIconRows                = strings.Join(asTenantIconFieldNames, ",")
	asTenantIconRowsExpectAutoSet   = strings.Join(stringx.Remove(asTenantIconFieldNames, "`create_time`", "`update_time`"), ",")
	asTenantIconRowsWithPlaceHolder = strings.Join(stringx.Remove(asTenantIconFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsTenantIconIdPrefix = "cache:asset:asTenantIcon:id:"
)

type (
	asTenantIconModel interface {
		Insert(ctx context.Context, data *AsTenantIcon) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AsTenantIcon, error)
		Update(ctx context.Context, data *AsTenantIcon) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAsTenantIconModel struct {
		sqlc.CachedConn
		table string
	}

	AsTenantIcon struct {
		Id         int64          `db:"id"`          // 主码
		TenantCode sql.NullString `db:"tenant_code"` // 租户编码
		Icon       sql.NullString `db:"icon"`        // 图标
		CreateTime sql.NullTime   `db:"create_time"` // 创建时间
		UpdateTime sql.NullTime   `db:"update_time"` // 更新时间
		CreateUser sql.NullInt64  `db:"create_user"` // 创建用户
		UpdateUser sql.NullInt64  `db:"update_user"` // 更新用户
		IsDeleted  int64          `db:"is_deleted"`  // 是否被删除
		Status     sql.NullInt64  `db:"status"`      // 状态
	}
)

func newAsTenantIconModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsTenantIconModel {
	return &defaultAsTenantIconModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_tenant_icon`",
	}
}

func (m *defaultAsTenantIconModel) Insert(ctx context.Context, data *AsTenantIcon) (sql.Result, error) {
	assetAsTenantIconIdKey := fmt.Sprintf("%s%v", cacheAssetAsTenantIconIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, asTenantIconRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.TenantCode, data.Icon, data.CreateUser, data.UpdateUser, data.IsDeleted, data.Status)
	}, assetAsTenantIconIdKey)
	return ret, err
}

func (m *defaultAsTenantIconModel) FindOne(ctx context.Context, id int64) (*AsTenantIcon, error) {
	assetAsTenantIconIdKey := fmt.Sprintf("%s%v", cacheAssetAsTenantIconIdPrefix, id)
	var resp AsTenantIcon
	err := m.QueryRowCtx(ctx, &resp, assetAsTenantIconIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asTenantIconRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsTenantIconModel) Update(ctx context.Context, data *AsTenantIcon) error {
	assetAsTenantIconIdKey := fmt.Sprintf("%s%v", cacheAssetAsTenantIconIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asTenantIconRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.TenantCode, data.Icon, data.CreateUser, data.UpdateUser, data.IsDeleted, data.Status, data.Id)
	}, assetAsTenantIconIdKey)
	return err
}

func (m *defaultAsTenantIconModel) Delete(ctx context.Context, id int64) error {
	assetAsTenantIconIdKey := fmt.Sprintf("%s%v", cacheAssetAsTenantIconIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsTenantIconIdKey)
	return err
}

func (m *defaultAsTenantIconModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsTenantIconIdPrefix, primary)
}

func (m *defaultAsTenantIconModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asTenantIconRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsTenantIconModel) tableName() string {
	return m.table
}
