// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	actHiTskLogFieldNames          = builder.RawFieldNames(&ActHiTskLog{})
	actHiTskLogRows                = strings.Join(actHiTskLogFieldNames, ",")
	actHiTskLogRowsExpectAutoSet   = strings.Join(stringx.Remove(actHiTskLogFieldNames, "`ID_`", "`create_time`", "`update_time`"), ",")
	actHiTskLogRowsWithPlaceHolder = strings.Join(stringx.Remove(actHiTskLogFieldNames, "`ID_`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetActHiTskLogIDPrefix = "cache:asset:actHiTskLog:iD:"
)

type (
	actHiTskLogModel interface {
		Insert(ctx context.Context, data *ActHiTskLog) (sql.Result, error)
		FindOne(ctx context.Context, iD int64) (*ActHiTskLog, error)
		Update(ctx context.Context, data *ActHiTskLog) error
		Delete(ctx context.Context, iD int64) error
	}

	defaultActHiTskLogModel struct {
		sqlc.CachedConn
		table string
	}

	ActHiTskLog struct {
		ID                int64          `db:"ID_"`
		TYPE              sql.NullString `db:"TYPE_"`
		TASKID            string         `db:"TASK_ID_"`
		TIMESTAMP         time.Time      `db:"TIME_STAMP_"`
		USERID            sql.NullString `db:"USER_ID_"`
		DATA              sql.NullString `db:"DATA_"`
		EXECUTIONID       sql.NullString `db:"EXECUTION_ID_"`
		PROCINSTID        sql.NullString `db:"PROC_INST_ID_"`
		PROCDEFID         sql.NullString `db:"PROC_DEF_ID_"`
		SCOPEID           sql.NullString `db:"SCOPE_ID_"`
		SCOPEDEFINITIONID sql.NullString `db:"SCOPE_DEFINITION_ID_"`
		SUBSCOPEID        sql.NullString `db:"SUB_SCOPE_ID_"`
		SCOPETYPE         sql.NullString `db:"SCOPE_TYPE_"`
		TENANTID          string         `db:"TENANT_ID_"`
	}
)

func newActHiTskLogModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultActHiTskLogModel {
	return &defaultActHiTskLogModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`act_hi_tsk_log`",
	}
}

func (m *defaultActHiTskLogModel) Insert(ctx context.Context, data *ActHiTskLog) (sql.Result, error) {
	assetActHiTskLogIDKey := fmt.Sprintf("%s%v", cacheAssetActHiTskLogIDPrefix, data.ID)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, actHiTskLogRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.TYPE, data.TASKID, data.TIMESTAMP, data.USERID, data.DATA, data.EXECUTIONID, data.PROCINSTID, data.PROCDEFID, data.SCOPEID, data.SCOPEDEFINITIONID, data.SUBSCOPEID, data.SCOPETYPE, data.TENANTID)
	}, assetActHiTskLogIDKey)
	return ret, err
}

func (m *defaultActHiTskLogModel) FindOne(ctx context.Context, iD int64) (*ActHiTskLog, error) {
	assetActHiTskLogIDKey := fmt.Sprintf("%s%v", cacheAssetActHiTskLogIDPrefix, iD)
	var resp ActHiTskLog
	err := m.QueryRowCtx(ctx, &resp, assetActHiTskLogIDKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actHiTskLogRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, iD)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActHiTskLogModel) Update(ctx context.Context, data *ActHiTskLog) error {
	assetActHiTskLogIDKey := fmt.Sprintf("%s%v", cacheAssetActHiTskLogIDPrefix, data.ID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `ID_` = ?", m.table, actHiTskLogRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.TYPE, data.TASKID, data.TIMESTAMP, data.USERID, data.DATA, data.EXECUTIONID, data.PROCINSTID, data.PROCDEFID, data.SCOPEID, data.SCOPEDEFINITIONID, data.SUBSCOPEID, data.SCOPETYPE, data.TENANTID, data.ID)
	}, assetActHiTskLogIDKey)
	return err
}

func (m *defaultActHiTskLogModel) Delete(ctx context.Context, iD int64) error {
	assetActHiTskLogIDKey := fmt.Sprintf("%s%v", cacheAssetActHiTskLogIDPrefix, iD)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `ID_` = ?", m.table)
		return conn.ExecCtx(ctx, query, iD)
	}, assetActHiTskLogIDKey)
	return err
}

func (m *defaultActHiTskLogModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetActHiTskLogIDPrefix, primary)
}

func (m *defaultActHiTskLogModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actHiTskLogRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultActHiTskLogModel) tableName() string {
	return m.table
}
