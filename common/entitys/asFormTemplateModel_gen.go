// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asFormTemplateFieldNames          = builder.RawFieldNames(&AsFormTemplate{})
	asFormTemplateRows                = strings.Join(asFormTemplateFieldNames, ",")
	asFormTemplateRowsExpectAutoSet   = strings.Join(stringx.Remove(asFormTemplateFieldNames, "`create_time`", "`update_time`"), ",")
	asFormTemplateRowsWithPlaceHolder = strings.Join(stringx.Remove(asFormTemplateFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsFormTemplateIdPrefix = "cache:asset:asFormTemplate:id:"
)

type (
	asFormTemplateModel interface {
		Insert(ctx context.Context, data *AsFormTemplate) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AsFormTemplate, error)
		Update(ctx context.Context, data *AsFormTemplate) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAsFormTemplateModel struct {
		sqlc.CachedConn
		table string
	}

	AsFormTemplate struct {
		Id             int64          `db:"id"`               // 主键
		Name           string         `db:"name"`             // 模板名称
		IconCls        sql.NullString `db:"icon_cls"`         // 对应单据图标编码
		ModelSheetJson string         `db:"model_sheet_json"` // 单据的json源数据
		Description    sql.NullString `db:"description"`      // 描述信息
		ModelType      sql.NullInt64  `db:"model_type"`       // 单据模板分类
		Version        int64          `db:"version"`          // 模板版本
		TenantCode     sql.NullString `db:"tenant_code"`      // 模板所属租户的编码
		CreateTime     time.Time      `db:"create_time"`      // 创建时间
		CreateUser     sql.NullString `db:"create_user"`      // 创建者id
		UpdateTime     time.Time      `db:"update_time"`      // 更新时间
		UpdateUser     sql.NullString `db:"update_user"`      // 更新用户id
		Status         int64          `db:"status"`           // 数据状态：0：不可用；1：可用；
		IsDeleted      int64          `db:"is_deleted"`       // 是否被删除：0：未删除；1：已删除
		CategoryId     sql.NullInt64  `db:"category_id"`      // 分类
		UserIds        sql.NullString `db:"user_ids"`         // 用户id结合
		CreatedBy      sql.NullString `db:"created_by"`
		CreateUserName sql.NullString `db:"create_user_name"`
		IsPublic       int64          `db:"is_public"` // 0-普通模板  1- 公共模板
	}
)

func newAsFormTemplateModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsFormTemplateModel {
	return &defaultAsFormTemplateModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_form_template`",
	}
}

func (m *defaultAsFormTemplateModel) Insert(ctx context.Context, data *AsFormTemplate) (sql.Result, error) {
	assetAsFormTemplateIdKey := fmt.Sprintf("%s%v", cacheAssetAsFormTemplateIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, asFormTemplateRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.Name, data.IconCls, data.ModelSheetJson, data.Description, data.ModelType, data.Version, data.TenantCode, data.CreateUser, data.UpdateUser, data.Status, data.IsDeleted, data.CategoryId, data.UserIds, data.CreatedBy, data.CreateUserName, data.IsPublic)
	}, assetAsFormTemplateIdKey)
	return ret, err
}

func (m *defaultAsFormTemplateModel) FindOne(ctx context.Context, id int64) (*AsFormTemplate, error) {
	assetAsFormTemplateIdKey := fmt.Sprintf("%s%v", cacheAssetAsFormTemplateIdPrefix, id)
	var resp AsFormTemplate
	err := m.QueryRowCtx(ctx, &resp, assetAsFormTemplateIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asFormTemplateRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsFormTemplateModel) Update(ctx context.Context, data *AsFormTemplate) error {
	assetAsFormTemplateIdKey := fmt.Sprintf("%s%v", cacheAssetAsFormTemplateIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asFormTemplateRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.IconCls, data.ModelSheetJson, data.Description, data.ModelType, data.Version, data.TenantCode, data.CreateUser, data.UpdateUser, data.Status, data.IsDeleted, data.CategoryId, data.UserIds, data.CreatedBy, data.CreateUserName, data.IsPublic, data.Id)
	}, assetAsFormTemplateIdKey)
	return err
}

func (m *defaultAsFormTemplateModel) Delete(ctx context.Context, id int64) error {
	assetAsFormTemplateIdKey := fmt.Sprintf("%s%v", cacheAssetAsFormTemplateIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsFormTemplateIdKey)
	return err
}

func (m *defaultAsFormTemplateModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsFormTemplateIdPrefix, primary)
}

func (m *defaultAsFormTemplateModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asFormTemplateRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsFormTemplateModel) tableName() string {
	return m.table
}
