// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	actCmmnDatabasechangeloglockFieldNames          = builder.RawFieldNames(&ActCmmnDatabasechangeloglock{})
	actCmmnDatabasechangeloglockRows                = strings.Join(actCmmnDatabasechangeloglockFieldNames, ",")
	actCmmnDatabasechangeloglockRowsExpectAutoSet   = strings.Join(stringx.Remove(actCmmnDatabasechangeloglockFieldNames, "`create_time`", "`update_time`"), ",")
	actCmmnDatabasechangeloglockRowsWithPlaceHolder = strings.Join(stringx.Remove(actCmmnDatabasechangeloglockFieldNames, "`ID`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetActCmmnDatabasechangeloglockIDPrefix = "cache:asset:actCmmnDatabasechangeloglock:iD:"
)

type (
	actCmmnDatabasechangeloglockModel interface {
		Insert(ctx context.Context, data *ActCmmnDatabasechangeloglock) (sql.Result, error)
		FindOne(ctx context.Context, iD int64) (*ActCmmnDatabasechangeloglock, error)
		Update(ctx context.Context, data *ActCmmnDatabasechangeloglock) error
		Delete(ctx context.Context, iD int64) error
	}

	defaultActCmmnDatabasechangeloglockModel struct {
		sqlc.CachedConn
		table string
	}

	ActCmmnDatabasechangeloglock struct {
		ID          int64          `db:"ID"`
		LOCKED      byte           `db:"LOCKED"`
		LOCKGRANTED sql.NullTime   `db:"LOCKGRANTED"`
		LOCKEDBY    sql.NullString `db:"LOCKEDBY"`
	}
)

func newActCmmnDatabasechangeloglockModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultActCmmnDatabasechangeloglockModel {
	return &defaultActCmmnDatabasechangeloglockModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`act_cmmn_databasechangeloglock`",
	}
}

func (m *defaultActCmmnDatabasechangeloglockModel) Insert(ctx context.Context, data *ActCmmnDatabasechangeloglock) (sql.Result, error) {
	assetActCmmnDatabasechangeloglockIDKey := fmt.Sprintf("%s%v", cacheAssetActCmmnDatabasechangeloglockIDPrefix, data.ID)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, actCmmnDatabasechangeloglockRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ID, data.LOCKED, data.LOCKGRANTED, data.LOCKEDBY)
	}, assetActCmmnDatabasechangeloglockIDKey)
	return ret, err
}

func (m *defaultActCmmnDatabasechangeloglockModel) FindOne(ctx context.Context, iD int64) (*ActCmmnDatabasechangeloglock, error) {
	assetActCmmnDatabasechangeloglockIDKey := fmt.Sprintf("%s%v", cacheAssetActCmmnDatabasechangeloglockIDPrefix, iD)
	var resp ActCmmnDatabasechangeloglock
	err := m.QueryRowCtx(ctx, &resp, assetActCmmnDatabasechangeloglockIDKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `ID` = ? limit 1", actCmmnDatabasechangeloglockRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, iD)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActCmmnDatabasechangeloglockModel) Update(ctx context.Context, data *ActCmmnDatabasechangeloglock) error {
	assetActCmmnDatabasechangeloglockIDKey := fmt.Sprintf("%s%v", cacheAssetActCmmnDatabasechangeloglockIDPrefix, data.ID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `ID` = ?", m.table, actCmmnDatabasechangeloglockRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.LOCKED, data.LOCKGRANTED, data.LOCKEDBY, data.ID)
	}, assetActCmmnDatabasechangeloglockIDKey)
	return err
}

func (m *defaultActCmmnDatabasechangeloglockModel) Delete(ctx context.Context, iD int64) error {
	assetActCmmnDatabasechangeloglockIDKey := fmt.Sprintf("%s%v", cacheAssetActCmmnDatabasechangeloglockIDPrefix, iD)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `ID` = ?", m.table)
		return conn.ExecCtx(ctx, query, iD)
	}, assetActCmmnDatabasechangeloglockIDKey)
	return err
}

func (m *defaultActCmmnDatabasechangeloglockModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetActCmmnDatabasechangeloglockIDPrefix, primary)
}

func (m *defaultActCmmnDatabasechangeloglockModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `ID` = ? limit 1", actCmmnDatabasechangeloglockRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultActCmmnDatabasechangeloglockModel) tableName() string {
	return m.table
}
