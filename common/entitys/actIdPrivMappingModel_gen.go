// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	actIdPrivMappingFieldNames          = builder.RawFieldNames(&ActIdPrivMapping{})
	actIdPrivMappingRows                = strings.Join(actIdPrivMappingFieldNames, ",")
	actIdPrivMappingRowsExpectAutoSet   = strings.Join(stringx.Remove(actIdPrivMappingFieldNames, "`create_time`", "`update_time`"), ",")
	actIdPrivMappingRowsWithPlaceHolder = strings.Join(stringx.Remove(actIdPrivMappingFieldNames, "`ID_`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetActIdPrivMappingIDPrefix = "cache:asset:actIdPrivMapping:iD:"
)

type (
	actIdPrivMappingModel interface {
		Insert(ctx context.Context, data *ActIdPrivMapping) (sql.Result, error)
		FindOne(ctx context.Context, iD string) (*ActIdPrivMapping, error)
		Update(ctx context.Context, data *ActIdPrivMapping) error
		Delete(ctx context.Context, iD string) error
	}

	defaultActIdPrivMappingModel struct {
		sqlc.CachedConn
		table string
	}

	ActIdPrivMapping struct {
		ID      string         `db:"ID_"`
		PRIVID  string         `db:"PRIV_ID_"`
		USERID  sql.NullString `db:"USER_ID_"`
		GROUPID sql.NullString `db:"GROUP_ID_"`
	}
)

func newActIdPrivMappingModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultActIdPrivMappingModel {
	return &defaultActIdPrivMappingModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`act_id_priv_mapping`",
	}
}

func (m *defaultActIdPrivMappingModel) Insert(ctx context.Context, data *ActIdPrivMapping) (sql.Result, error) {
	assetActIdPrivMappingIDKey := fmt.Sprintf("%s%v", cacheAssetActIdPrivMappingIDPrefix, data.ID)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, actIdPrivMappingRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ID, data.PRIVID, data.USERID, data.GROUPID)
	}, assetActIdPrivMappingIDKey)
	return ret, err
}

func (m *defaultActIdPrivMappingModel) FindOne(ctx context.Context, iD string) (*ActIdPrivMapping, error) {
	assetActIdPrivMappingIDKey := fmt.Sprintf("%s%v", cacheAssetActIdPrivMappingIDPrefix, iD)
	var resp ActIdPrivMapping
	err := m.QueryRowCtx(ctx, &resp, assetActIdPrivMappingIDKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actIdPrivMappingRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, iD)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActIdPrivMappingModel) Update(ctx context.Context, data *ActIdPrivMapping) error {
	assetActIdPrivMappingIDKey := fmt.Sprintf("%s%v", cacheAssetActIdPrivMappingIDPrefix, data.ID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `ID_` = ?", m.table, actIdPrivMappingRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.PRIVID, data.USERID, data.GROUPID, data.ID)
	}, assetActIdPrivMappingIDKey)
	return err
}

func (m *defaultActIdPrivMappingModel) Delete(ctx context.Context, iD string) error {
	assetActIdPrivMappingIDKey := fmt.Sprintf("%s%v", cacheAssetActIdPrivMappingIDPrefix, iD)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `ID_` = ?", m.table)
		return conn.ExecCtx(ctx, query, iD)
	}, assetActIdPrivMappingIDKey)
	return err
}

func (m *defaultActIdPrivMappingModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetActIdPrivMappingIDPrefix, primary)
}

func (m *defaultActIdPrivMappingModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actIdPrivMappingRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultActIdPrivMappingModel) tableName() string {
	return m.table
}
