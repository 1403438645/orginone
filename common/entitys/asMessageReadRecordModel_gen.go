// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asMessageReadRecordFieldNames          = builder.RawFieldNames(&AsMessageReadRecord{})
	asMessageReadRecordRows                = strings.Join(asMessageReadRecordFieldNames, ",")
	asMessageReadRecordRowsExpectAutoSet   = strings.Join(stringx.Remove(asMessageReadRecordFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	asMessageReadRecordRowsWithPlaceHolder = strings.Join(stringx.Remove(asMessageReadRecordFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsMessageReadRecordIdPrefix = "cache:asset:asMessageReadRecord:id:"
)

type (
	asMessageReadRecordModel interface {
		Insert(ctx context.Context, data *AsMessageReadRecord) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AsMessageReadRecord, error)
		Update(ctx context.Context, data *AsMessageReadRecord) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAsMessageReadRecordModel struct {
		sqlc.CachedConn
		table string
	}

	AsMessageReadRecord struct {
		Id         int64     `db:"id"`          // 用户代码
		MessageId  int64     `db:"message_id"`  // 消息id
		ReceiverId int64     `db:"receiver_id"` // 读取消息人id
		ReadState  int64     `db:"read_state"`  // 已读未读状态 0 未读 1 已读
		CreateTime time.Time `db:"create_time"` // 创建时间
		UpdateTime time.Time `db:"update_time"` // 修改时间
		IsDeleted  int64     `db:"is_deleted"`  // 是否已删除
	}
)

func newAsMessageReadRecordModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsMessageReadRecordModel {
	return &defaultAsMessageReadRecordModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_message_read_record`",
	}
}

func (m *defaultAsMessageReadRecordModel) Insert(ctx context.Context, data *AsMessageReadRecord) (sql.Result, error) {
	assetAsMessageReadRecordIdKey := fmt.Sprintf("%s%v", cacheAssetAsMessageReadRecordIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, asMessageReadRecordRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.MessageId, data.ReceiverId, data.ReadState, data.IsDeleted)
	}, assetAsMessageReadRecordIdKey)
	return ret, err
}

func (m *defaultAsMessageReadRecordModel) FindOne(ctx context.Context, id int64) (*AsMessageReadRecord, error) {
	assetAsMessageReadRecordIdKey := fmt.Sprintf("%s%v", cacheAssetAsMessageReadRecordIdPrefix, id)
	var resp AsMessageReadRecord
	err := m.QueryRowCtx(ctx, &resp, assetAsMessageReadRecordIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asMessageReadRecordRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsMessageReadRecordModel) Update(ctx context.Context, data *AsMessageReadRecord) error {
	assetAsMessageReadRecordIdKey := fmt.Sprintf("%s%v", cacheAssetAsMessageReadRecordIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asMessageReadRecordRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.MessageId, data.ReceiverId, data.ReadState, data.IsDeleted, data.Id)
	}, assetAsMessageReadRecordIdKey)
	return err
}

func (m *defaultAsMessageReadRecordModel) Delete(ctx context.Context, id int64) error {
	assetAsMessageReadRecordIdKey := fmt.Sprintf("%s%v", cacheAssetAsMessageReadRecordIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsMessageReadRecordIdKey)
	return err
}

func (m *defaultAsMessageReadRecordModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsMessageReadRecordIdPrefix, primary)
}

func (m *defaultAsMessageReadRecordModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asMessageReadRecordRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsMessageReadRecordModel) tableName() string {
	return m.table
}
