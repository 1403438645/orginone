// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	actHiVarinstFieldNames          = builder.RawFieldNames(&ActHiVarinst{})
	actHiVarinstRows                = strings.Join(actHiVarinstFieldNames, ",")
	actHiVarinstRowsExpectAutoSet   = strings.Join(stringx.Remove(actHiVarinstFieldNames, "`create_time`", "`update_time`"), ",")
	actHiVarinstRowsWithPlaceHolder = strings.Join(stringx.Remove(actHiVarinstFieldNames, "`ID_`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetActHiVarinstIDPrefix = "cache:asset:actHiVarinst:iD:"
)

type (
	actHiVarinstModel interface {
		Insert(ctx context.Context, data *ActHiVarinst) (sql.Result, error)
		FindOne(ctx context.Context, iD string) (*ActHiVarinst, error)
		Update(ctx context.Context, data *ActHiVarinst) error
		Delete(ctx context.Context, iD string) error
	}

	defaultActHiVarinstModel struct {
		sqlc.CachedConn
		table string
	}

	ActHiVarinst struct {
		ID              string          `db:"ID_"`
		REV             int64           `db:"REV_"`
		PROCINSTID      sql.NullString  `db:"PROC_INST_ID_"`
		EXECUTIONID     sql.NullString  `db:"EXECUTION_ID_"`
		TASKID          sql.NullString  `db:"TASK_ID_"`
		NAME            string          `db:"NAME_"`
		VARTYPE         sql.NullString  `db:"VAR_TYPE_"`
		SCOPEID         sql.NullString  `db:"SCOPE_ID_"`
		SUBSCOPEID      sql.NullString  `db:"SUB_SCOPE_ID_"`
		SCOPETYPE       sql.NullString  `db:"SCOPE_TYPE_"`
		BYTEARRAYID     sql.NullString  `db:"BYTEARRAY_ID_"`
		DOUBLE          sql.NullFloat64 `db:"DOUBLE_"`
		LONG            sql.NullInt64   `db:"LONG_"`
		TEXT            sql.NullString  `db:"TEXT_"`
		TEXT2           sql.NullString  `db:"TEXT2_"`
		CREATETIME      sql.NullTime    `db:"CREATE_TIME_"`
		LASTUPDATEDTIME sql.NullTime    `db:"LAST_UPDATED_TIME_"`
	}
)

func newActHiVarinstModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultActHiVarinstModel {
	return &defaultActHiVarinstModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`act_hi_varinst`",
	}
}

func (m *defaultActHiVarinstModel) Insert(ctx context.Context, data *ActHiVarinst) (sql.Result, error) {
	assetActHiVarinstIDKey := fmt.Sprintf("%s%v", cacheAssetActHiVarinstIDPrefix, data.ID)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, actHiVarinstRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ID, data.REV, data.PROCINSTID, data.EXECUTIONID, data.TASKID, data.NAME, data.VARTYPE, data.SCOPEID, data.SUBSCOPEID, data.SCOPETYPE, data.BYTEARRAYID, data.DOUBLE, data.LONG, data.TEXT, data.TEXT2, data.CREATETIME, data.LASTUPDATEDTIME)
	}, assetActHiVarinstIDKey)
	return ret, err
}

func (m *defaultActHiVarinstModel) FindOne(ctx context.Context, iD string) (*ActHiVarinst, error) {
	assetActHiVarinstIDKey := fmt.Sprintf("%s%v", cacheAssetActHiVarinstIDPrefix, iD)
	var resp ActHiVarinst
	err := m.QueryRowCtx(ctx, &resp, assetActHiVarinstIDKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actHiVarinstRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, iD)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActHiVarinstModel) Update(ctx context.Context, data *ActHiVarinst) error {
	assetActHiVarinstIDKey := fmt.Sprintf("%s%v", cacheAssetActHiVarinstIDPrefix, data.ID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `ID_` = ?", m.table, actHiVarinstRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.REV, data.PROCINSTID, data.EXECUTIONID, data.TASKID, data.NAME, data.VARTYPE, data.SCOPEID, data.SUBSCOPEID, data.SCOPETYPE, data.BYTEARRAYID, data.DOUBLE, data.LONG, data.TEXT, data.TEXT2, data.CREATETIME, data.LASTUPDATEDTIME, data.ID)
	}, assetActHiVarinstIDKey)
	return err
}

func (m *defaultActHiVarinstModel) Delete(ctx context.Context, iD string) error {
	assetActHiVarinstIDKey := fmt.Sprintf("%s%v", cacheAssetActHiVarinstIDPrefix, iD)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `ID_` = ?", m.table)
		return conn.ExecCtx(ctx, query, iD)
	}, assetActHiVarinstIDKey)
	return err
}

func (m *defaultActHiVarinstModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetActHiVarinstIDPrefix, primary)
}

func (m *defaultActHiVarinstModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actHiVarinstRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultActHiVarinstModel) tableName() string {
	return m.table
}
