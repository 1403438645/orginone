// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tSysPostUserFieldNames          = builder.RawFieldNames(&TSysPostUser{})
	tSysPostUserRows                = strings.Join(tSysPostUserFieldNames, ",")
	tSysPostUserRowsExpectAutoSet   = strings.Join(stringx.Remove(tSysPostUserFieldNames, "`create_time`", "`update_time`"), ",")
	tSysPostUserRowsWithPlaceHolder = strings.Join(stringx.Remove(tSysPostUserFieldNames, "`POST_USER_ID`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetTSysPostUserPOSTUSERIDPrefix = "cache:asset:tSysPostUser:pOSTUSERID:"
)

type (
	tSysPostUserModel interface {
		Insert(ctx context.Context, data *TSysPostUser) (sql.Result, error)
		FindOne(ctx context.Context, pOSTUSERID string) (*TSysPostUser, error)
		Update(ctx context.Context, data *TSysPostUser) error
		Delete(ctx context.Context, pOSTUSERID string) error
	}

	defaultTSysPostUserModel struct {
		sqlc.CachedConn
		table string
	}

	TSysPostUser struct {
		POSTUSERID string         `db:"POST_USER_ID"` // UUID
		POSTID     string         `db:"POST_ID"`      // 岗位ID
		USERID     string         `db:"USER_ID"`      // 用户ID
		CREATEBY   sql.NullString `db:"CREATE_BY"`    // 创建人
		CREATEDATE sql.NullTime   `db:"CREATE_DATE"`  // 创建日期
		CREATETIME sql.NullTime   `db:"CREATE_TIME"`  // 创建时间
		UPDATEBY   sql.NullString `db:"UPDATE_BY"`    // 修改人
		UPDATEDATE sql.NullTime   `db:"UPDATE_DATE"`  // 修改日期
		UPDATETIME sql.NullTime   `db:"UPDATE_TIME"`  // 修改时间
	}
)

func newTSysPostUserModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTSysPostUserModel {
	return &defaultTSysPostUserModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`t_sys_post_user`",
	}
}

func (m *defaultTSysPostUserModel) Insert(ctx context.Context, data *TSysPostUser) (sql.Result, error) {
	assetTSysPostUserPOSTUSERIDKey := fmt.Sprintf("%s%v", cacheAssetTSysPostUserPOSTUSERIDPrefix, data.POSTUSERID)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, tSysPostUserRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.POSTUSERID, data.POSTID, data.USERID, data.CREATEBY, data.CREATEDATE, data.CREATETIME, data.UPDATEBY, data.UPDATEDATE, data.UPDATETIME)
	}, assetTSysPostUserPOSTUSERIDKey)
	return ret, err
}

func (m *defaultTSysPostUserModel) FindOne(ctx context.Context, pOSTUSERID string) (*TSysPostUser, error) {
	assetTSysPostUserPOSTUSERIDKey := fmt.Sprintf("%s%v", cacheAssetTSysPostUserPOSTUSERIDPrefix, pOSTUSERID)
	var resp TSysPostUser
	err := m.QueryRowCtx(ctx, &resp, assetTSysPostUserPOSTUSERIDKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `POST_USER_ID` = ? limit 1", tSysPostUserRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, pOSTUSERID)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTSysPostUserModel) Update(ctx context.Context, data *TSysPostUser) error {
	assetTSysPostUserPOSTUSERIDKey := fmt.Sprintf("%s%v", cacheAssetTSysPostUserPOSTUSERIDPrefix, data.POSTUSERID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `POST_USER_ID` = ?", m.table, tSysPostUserRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.POSTID, data.USERID, data.CREATEBY, data.CREATEDATE, data.CREATETIME, data.UPDATEBY, data.UPDATEDATE, data.UPDATETIME, data.POSTUSERID)
	}, assetTSysPostUserPOSTUSERIDKey)
	return err
}

func (m *defaultTSysPostUserModel) Delete(ctx context.Context, pOSTUSERID string) error {
	assetTSysPostUserPOSTUSERIDKey := fmt.Sprintf("%s%v", cacheAssetTSysPostUserPOSTUSERIDPrefix, pOSTUSERID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `POST_USER_ID` = ?", m.table)
		return conn.ExecCtx(ctx, query, pOSTUSERID)
	}, assetTSysPostUserPOSTUSERIDKey)
	return err
}

func (m *defaultTSysPostUserModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetTSysPostUserPOSTUSERIDPrefix, primary)
}

func (m *defaultTSysPostUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `POST_USER_ID` = ? limit 1", tSysPostUserRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTSysPostUserModel) tableName() string {
	return m.table
}
