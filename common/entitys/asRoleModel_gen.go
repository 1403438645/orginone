// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asRoleFieldNames          = builder.RawFieldNames(&AsRole{})
	asRoleRows                = strings.Join(asRoleFieldNames, ",")
	asRoleRowsExpectAutoSet   = strings.Join(stringx.Remove(asRoleFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	asRoleRowsWithPlaceHolder = strings.Join(stringx.Remove(asRoleFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsRoleIdPrefix = "cache:asset:asRole:id:"
)

type (
	asRoleModel interface {
		Insert(ctx context.Context, data *AsRole) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AsRole, error)
		Update(ctx context.Context, data *AsRole) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAsRoleModel struct {
		sqlc.CachedConn
		table string
	}

	AsRole struct {
		Id              int64          `db:"id"`               // 主键
		Sort            int64          `db:"sort"`             // 排序
		RoleAlias       sql.NullString `db:"role_alias"`       // 角色别名（角色名的首字母拼音），可用于接口鉴权，自动生成
		RoleName        sql.NullString `db:"role_name"`        // 角色名
		RoleDescription sql.NullString `db:"role_description"` // 角色描述
		UpdateUser      int64          `db:"update_user"`      // 更新用户
		CreateUser      int64          `db:"create_user"`      // 添加用户
		UpdateTime      time.Time      `db:"update_time"`      // 更新时间
		CreateTime      time.Time      `db:"create_time"`      // 创建时间
		IsDeleted       int64          `db:"is_deleted"`       // 是否已删除
		Status          int64          `db:"status"`           // 数据状态
	}
)

func newAsRoleModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsRoleModel {
	return &defaultAsRoleModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_role`",
	}
}

func (m *defaultAsRoleModel) Insert(ctx context.Context, data *AsRole) (sql.Result, error) {
	assetAsRoleIdKey := fmt.Sprintf("%s%v", cacheAssetAsRoleIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, asRoleRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Sort, data.RoleAlias, data.RoleName, data.RoleDescription, data.UpdateUser, data.CreateUser, data.IsDeleted, data.Status)
	}, assetAsRoleIdKey)
	return ret, err
}

func (m *defaultAsRoleModel) FindOne(ctx context.Context, id int64) (*AsRole, error) {
	assetAsRoleIdKey := fmt.Sprintf("%s%v", cacheAssetAsRoleIdPrefix, id)
	var resp AsRole
	err := m.QueryRowCtx(ctx, &resp, assetAsRoleIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asRoleRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsRoleModel) Update(ctx context.Context, data *AsRole) error {
	assetAsRoleIdKey := fmt.Sprintf("%s%v", cacheAssetAsRoleIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asRoleRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Sort, data.RoleAlias, data.RoleName, data.RoleDescription, data.UpdateUser, data.CreateUser, data.IsDeleted, data.Status, data.Id)
	}, assetAsRoleIdKey)
	return err
}

func (m *defaultAsRoleModel) Delete(ctx context.Context, id int64) error {
	assetAsRoleIdKey := fmt.Sprintf("%s%v", cacheAssetAsRoleIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsRoleIdKey)
	return err
}

func (m *defaultAsRoleModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsRoleIdPrefix, primary)
}

func (m *defaultAsRoleModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asRoleRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsRoleModel) tableName() string {
	return m.table
}
