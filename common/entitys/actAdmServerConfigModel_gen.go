// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	actAdmServerConfigFieldNames          = builder.RawFieldNames(&ActAdmServerConfig{})
	actAdmServerConfigRows                = strings.Join(actAdmServerConfigFieldNames, ",")
	actAdmServerConfigRowsExpectAutoSet   = strings.Join(stringx.Remove(actAdmServerConfigFieldNames, "`create_time`", "`update_time`"), ",")
	actAdmServerConfigRowsWithPlaceHolder = strings.Join(stringx.Remove(actAdmServerConfigFieldNames, "`ID_`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetActAdmServerConfigIDPrefix = "cache:asset:actAdmServerConfig:iD:"
)

type (
	actAdmServerConfigModel interface {
		Insert(ctx context.Context, data *ActAdmServerConfig) (sql.Result, error)
		FindOne(ctx context.Context, iD string) (*ActAdmServerConfig, error)
		Update(ctx context.Context, data *ActAdmServerConfig) error
		Delete(ctx context.Context, iD string) error
	}

	defaultActAdmServerConfigModel struct {
		sqlc.CachedConn
		table string
	}

	ActAdmServerConfig struct {
		ID            string         `db:"ID_"`
		NAME          sql.NullString `db:"NAME_"`
		DESCRIPTION   sql.NullString `db:"DESCRIPTION_"`
		SERVERADDRESS sql.NullString `db:"SERVER_ADDRESS_"`
		PORT          sql.NullInt64  `db:"PORT_"`
		CONTEXTROOT   sql.NullString `db:"CONTEXT_ROOT_"`
		RESTROOT      sql.NullString `db:"REST_ROOT_"`
		USERNAME      sql.NullString `db:"USER_NAME_"`
		PASSWORD      sql.NullString `db:"PASSWORD_"`
		ENDPOINTTYPE  sql.NullInt64  `db:"ENDPOINT_TYPE_"`
		TENANTID      sql.NullString `db:"TENANT_ID_"`
	}
)

func newActAdmServerConfigModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultActAdmServerConfigModel {
	return &defaultActAdmServerConfigModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`act_adm_server_config`",
	}
}

func (m *defaultActAdmServerConfigModel) Insert(ctx context.Context, data *ActAdmServerConfig) (sql.Result, error) {
	assetActAdmServerConfigIDKey := fmt.Sprintf("%s%v", cacheAssetActAdmServerConfigIDPrefix, data.ID)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, actAdmServerConfigRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ID, data.NAME, data.DESCRIPTION, data.SERVERADDRESS, data.PORT, data.CONTEXTROOT, data.RESTROOT, data.USERNAME, data.PASSWORD, data.ENDPOINTTYPE, data.TENANTID)
	}, assetActAdmServerConfigIDKey)
	return ret, err
}

func (m *defaultActAdmServerConfigModel) FindOne(ctx context.Context, iD string) (*ActAdmServerConfig, error) {
	assetActAdmServerConfigIDKey := fmt.Sprintf("%s%v", cacheAssetActAdmServerConfigIDPrefix, iD)
	var resp ActAdmServerConfig
	err := m.QueryRowCtx(ctx, &resp, assetActAdmServerConfigIDKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actAdmServerConfigRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, iD)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActAdmServerConfigModel) Update(ctx context.Context, data *ActAdmServerConfig) error {
	assetActAdmServerConfigIDKey := fmt.Sprintf("%s%v", cacheAssetActAdmServerConfigIDPrefix, data.ID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `ID_` = ?", m.table, actAdmServerConfigRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.NAME, data.DESCRIPTION, data.SERVERADDRESS, data.PORT, data.CONTEXTROOT, data.RESTROOT, data.USERNAME, data.PASSWORD, data.ENDPOINTTYPE, data.TENANTID, data.ID)
	}, assetActAdmServerConfigIDKey)
	return err
}

func (m *defaultActAdmServerConfigModel) Delete(ctx context.Context, iD string) error {
	assetActAdmServerConfigIDKey := fmt.Sprintf("%s%v", cacheAssetActAdmServerConfigIDPrefix, iD)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `ID_` = ?", m.table)
		return conn.ExecCtx(ctx, query, iD)
	}, assetActAdmServerConfigIDKey)
	return err
}

func (m *defaultActAdmServerConfigModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetActAdmServerConfigIDPrefix, primary)
}

func (m *defaultActAdmServerConfigModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actAdmServerConfigRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultActAdmServerConfigModel) tableName() string {
	return m.table
}
