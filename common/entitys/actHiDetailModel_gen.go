// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	actHiDetailFieldNames          = builder.RawFieldNames(&ActHiDetail{})
	actHiDetailRows                = strings.Join(actHiDetailFieldNames, ",")
	actHiDetailRowsExpectAutoSet   = strings.Join(stringx.Remove(actHiDetailFieldNames, "`create_time`", "`update_time`"), ",")
	actHiDetailRowsWithPlaceHolder = strings.Join(stringx.Remove(actHiDetailFieldNames, "`ID_`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetActHiDetailIDPrefix = "cache:asset:actHiDetail:iD:"
)

type (
	actHiDetailModel interface {
		Insert(ctx context.Context, data *ActHiDetail) (sql.Result, error)
		FindOne(ctx context.Context, iD string) (*ActHiDetail, error)
		Update(ctx context.Context, data *ActHiDetail) error
		Delete(ctx context.Context, iD string) error
	}

	defaultActHiDetailModel struct {
		sqlc.CachedConn
		table string
	}

	ActHiDetail struct {
		ID          string          `db:"ID_"`
		TYPE        string          `db:"TYPE_"`
		PROCINSTID  sql.NullString  `db:"PROC_INST_ID_"`
		EXECUTIONID sql.NullString  `db:"EXECUTION_ID_"`
		TASKID      sql.NullString  `db:"TASK_ID_"`
		ACTINSTID   sql.NullString  `db:"ACT_INST_ID_"`
		NAME        string          `db:"NAME_"`
		VARTYPE     sql.NullString  `db:"VAR_TYPE_"`
		REV         sql.NullInt64   `db:"REV_"`
		TIME        time.Time       `db:"TIME_"`
		BYTEARRAYID sql.NullString  `db:"BYTEARRAY_ID_"`
		DOUBLE      sql.NullFloat64 `db:"DOUBLE_"`
		LONG        sql.NullInt64   `db:"LONG_"`
		TEXT        sql.NullString  `db:"TEXT_"`
		TEXT2       sql.NullString  `db:"TEXT2_"`
	}
)

func newActHiDetailModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultActHiDetailModel {
	return &defaultActHiDetailModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`act_hi_detail`",
	}
}

func (m *defaultActHiDetailModel) Insert(ctx context.Context, data *ActHiDetail) (sql.Result, error) {
	assetActHiDetailIDKey := fmt.Sprintf("%s%v", cacheAssetActHiDetailIDPrefix, data.ID)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, actHiDetailRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ID, data.TYPE, data.PROCINSTID, data.EXECUTIONID, data.TASKID, data.ACTINSTID, data.NAME, data.VARTYPE, data.REV, data.TIME, data.BYTEARRAYID, data.DOUBLE, data.LONG, data.TEXT, data.TEXT2)
	}, assetActHiDetailIDKey)
	return ret, err
}

func (m *defaultActHiDetailModel) FindOne(ctx context.Context, iD string) (*ActHiDetail, error) {
	assetActHiDetailIDKey := fmt.Sprintf("%s%v", cacheAssetActHiDetailIDPrefix, iD)
	var resp ActHiDetail
	err := m.QueryRowCtx(ctx, &resp, assetActHiDetailIDKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actHiDetailRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, iD)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActHiDetailModel) Update(ctx context.Context, data *ActHiDetail) error {
	assetActHiDetailIDKey := fmt.Sprintf("%s%v", cacheAssetActHiDetailIDPrefix, data.ID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `ID_` = ?", m.table, actHiDetailRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.TYPE, data.PROCINSTID, data.EXECUTIONID, data.TASKID, data.ACTINSTID, data.NAME, data.VARTYPE, data.REV, data.TIME, data.BYTEARRAYID, data.DOUBLE, data.LONG, data.TEXT, data.TEXT2, data.ID)
	}, assetActHiDetailIDKey)
	return err
}

func (m *defaultActHiDetailModel) Delete(ctx context.Context, iD string) error {
	assetActHiDetailIDKey := fmt.Sprintf("%s%v", cacheAssetActHiDetailIDPrefix, iD)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `ID_` = ?", m.table)
		return conn.ExecCtx(ctx, query, iD)
	}, assetActHiDetailIDKey)
	return err
}

func (m *defaultActHiDetailModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetActHiDetailIDPrefix, primary)
}

func (m *defaultActHiDetailModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actHiDetailRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultActHiDetailModel) tableName() string {
	return m.table
}
