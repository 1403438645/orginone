// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asCategoryFieldNames          = builder.RawFieldNames(&AsCategory{})
	asCategoryRows                = strings.Join(asCategoryFieldNames, ",")
	asCategoryRowsExpectAutoSet   = strings.Join(stringx.Remove(asCategoryFieldNames, "`create_time`", "`update_time`"), ",")
	asCategoryRowsWithPlaceHolder = strings.Join(stringx.Remove(asCategoryFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsCategoryIdPrefix = "cache:asset:asCategory:id:"
)

type (
	asCategoryModel interface {
		Insert(ctx context.Context, data *AsCategory) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AsCategory, error)
		Update(ctx context.Context, data *AsCategory) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAsCategoryModel struct {
		sqlc.CachedConn
		table string
	}

	AsCategory struct {
		Id          int64          `db:"id"`          // 主键
		Name        string         `db:"name"`        // 分类名称
		Code        string         `db:"code"`        // 分类编码
		Description sql.NullString `db:"description"` // 分类描述信息
		Pid         int64          `db:"pid"`         // 父节点id
		TenantCode  sql.NullString `db:"tenant_code"` // 分类所属租户的id
		CreateTime  time.Time      `db:"create_time"` // 创建时间
		CreateUser  sql.NullString `db:"create_user"` // 创建者id
		UpdateTime  time.Time      `db:"update_time"` // 更新时间
		UpdateUser  sql.NullString `db:"update_user"` // 更新用户id
		Status      int64          `db:"status"`      // 数据状态：0：不可用；1：可用；
		IsDeleted   int64          `db:"is_deleted"`  // 是否被删除：0：未删除；1：已删除
	}
)

func newAsCategoryModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsCategoryModel {
	return &defaultAsCategoryModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_category`",
	}
}

func (m *defaultAsCategoryModel) Insert(ctx context.Context, data *AsCategory) (sql.Result, error) {
	assetAsCategoryIdKey := fmt.Sprintf("%s%v", cacheAssetAsCategoryIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, asCategoryRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.Name, data.Code, data.Description, data.Pid, data.TenantCode, data.CreateUser, data.UpdateUser, data.Status, data.IsDeleted)
	}, assetAsCategoryIdKey)
	return ret, err
}

func (m *defaultAsCategoryModel) FindOne(ctx context.Context, id int64) (*AsCategory, error) {
	assetAsCategoryIdKey := fmt.Sprintf("%s%v", cacheAssetAsCategoryIdPrefix, id)
	var resp AsCategory
	err := m.QueryRowCtx(ctx, &resp, assetAsCategoryIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asCategoryRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsCategoryModel) Update(ctx context.Context, data *AsCategory) error {
	assetAsCategoryIdKey := fmt.Sprintf("%s%v", cacheAssetAsCategoryIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asCategoryRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.Code, data.Description, data.Pid, data.TenantCode, data.CreateUser, data.UpdateUser, data.Status, data.IsDeleted, data.Id)
	}, assetAsCategoryIdKey)
	return err
}

func (m *defaultAsCategoryModel) Delete(ctx context.Context, id int64) error {
	assetAsCategoryIdKey := fmt.Sprintf("%s%v", cacheAssetAsCategoryIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsCategoryIdKey)
	return err
}

func (m *defaultAsCategoryModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsCategoryIdPrefix, primary)
}

func (m *defaultAsCategoryModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asCategoryRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsCategoryModel) tableName() string {
	return m.table
}
