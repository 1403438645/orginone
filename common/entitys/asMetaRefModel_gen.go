// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asMetaRefFieldNames          = builder.RawFieldNames(&AsMetaRef{})
	asMetaRefRows                = strings.Join(asMetaRefFieldNames, ",")
	asMetaRefRowsExpectAutoSet   = strings.Join(stringx.Remove(asMetaRefFieldNames, "`create_time`", "`update_time`"), ",")
	asMetaRefRowsWithPlaceHolder = strings.Join(stringx.Remove(asMetaRefFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsMetaRefIdPrefix = "cache:asset:asMetaRef:id:"
)

type (
	asMetaRefModel interface {
		Insert(ctx context.Context, data *AsMetaRef) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AsMetaRef, error)
		Update(ctx context.Context, data *AsMetaRef) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAsMetaRefModel struct {
		sqlc.CachedConn
		table string
	}

	AsMetaRef struct {
		Id           int64          `db:"id"`            // 主键id
		SourceTable  string         `db:"source_table"`  // 源数据库表名
		SourceColumn string         `db:"source_column"` // 源数据库表列名
		MetaDataId   int64          `db:"meta_data_id"`  // 元数据对应id
		TargetTable  string         `db:"target_table"`  // 目标数据库表名
		TargetColumn sql.NullString `db:"target_column"` // 目标数据库列名
		IsDeleted    int64          `db:"is_deleted"`
		CreateTime   time.Time      `db:"create_time"`
		CreateUser   int64          `db:"create_user"`
		UpdateTime   time.Time      `db:"update_time"`
		UpdateUser   int64          `db:"update_user"`
		Status       int64          `db:"status"`
	}
)

func newAsMetaRefModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsMetaRefModel {
	return &defaultAsMetaRefModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_meta_ref`",
	}
}

func (m *defaultAsMetaRefModel) Insert(ctx context.Context, data *AsMetaRef) (sql.Result, error) {
	assetAsMetaRefIdKey := fmt.Sprintf("%s%v", cacheAssetAsMetaRefIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, asMetaRefRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.SourceTable, data.SourceColumn, data.MetaDataId, data.TargetTable, data.TargetColumn, data.IsDeleted, data.CreateUser, data.UpdateUser, data.Status)
	}, assetAsMetaRefIdKey)
	return ret, err
}

func (m *defaultAsMetaRefModel) FindOne(ctx context.Context, id int64) (*AsMetaRef, error) {
	assetAsMetaRefIdKey := fmt.Sprintf("%s%v", cacheAssetAsMetaRefIdPrefix, id)
	var resp AsMetaRef
	err := m.QueryRowCtx(ctx, &resp, assetAsMetaRefIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asMetaRefRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsMetaRefModel) Update(ctx context.Context, data *AsMetaRef) error {
	assetAsMetaRefIdKey := fmt.Sprintf("%s%v", cacheAssetAsMetaRefIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asMetaRefRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.SourceTable, data.SourceColumn, data.MetaDataId, data.TargetTable, data.TargetColumn, data.IsDeleted, data.CreateUser, data.UpdateUser, data.Status, data.Id)
	}, assetAsMetaRefIdKey)
	return err
}

func (m *defaultAsMetaRefModel) Delete(ctx context.Context, id int64) error {
	assetAsMetaRefIdKey := fmt.Sprintf("%s%v", cacheAssetAsMetaRefIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsMetaRefIdKey)
	return err
}

func (m *defaultAsMetaRefModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsMetaRefIdPrefix, primary)
}

func (m *defaultAsMetaRefModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asMetaRefRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsMetaRefModel) tableName() string {
	return m.table
}
