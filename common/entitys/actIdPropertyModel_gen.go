// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	actIdPropertyFieldNames          = builder.RawFieldNames(&ActIdProperty{})
	actIdPropertyRows                = strings.Join(actIdPropertyFieldNames, ",")
	actIdPropertyRowsExpectAutoSet   = strings.Join(stringx.Remove(actIdPropertyFieldNames, "`create_time`", "`update_time`"), ",")
	actIdPropertyRowsWithPlaceHolder = strings.Join(stringx.Remove(actIdPropertyFieldNames, "`NAME_`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetActIdPropertyNAMEPrefix = "cache:asset:actIdProperty:nAME:"
)

type (
	actIdPropertyModel interface {
		Insert(ctx context.Context, data *ActIdProperty) (sql.Result, error)
		FindOne(ctx context.Context, nAME string) (*ActIdProperty, error)
		Update(ctx context.Context, data *ActIdProperty) error
		Delete(ctx context.Context, nAME string) error
	}

	defaultActIdPropertyModel struct {
		sqlc.CachedConn
		table string
	}

	ActIdProperty struct {
		NAME  string         `db:"NAME_"`
		VALUE sql.NullString `db:"VALUE_"`
		REV   sql.NullInt64  `db:"REV_"`
	}
)

func newActIdPropertyModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultActIdPropertyModel {
	return &defaultActIdPropertyModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`act_id_property`",
	}
}

func (m *defaultActIdPropertyModel) Insert(ctx context.Context, data *ActIdProperty) (sql.Result, error) {
	assetActIdPropertyNAMEKey := fmt.Sprintf("%s%v", cacheAssetActIdPropertyNAMEPrefix, data.NAME)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, actIdPropertyRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.NAME, data.VALUE, data.REV)
	}, assetActIdPropertyNAMEKey)
	return ret, err
}

func (m *defaultActIdPropertyModel) FindOne(ctx context.Context, nAME string) (*ActIdProperty, error) {
	assetActIdPropertyNAMEKey := fmt.Sprintf("%s%v", cacheAssetActIdPropertyNAMEPrefix, nAME)
	var resp ActIdProperty
	err := m.QueryRowCtx(ctx, &resp, assetActIdPropertyNAMEKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `NAME_` = ? limit 1", actIdPropertyRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, nAME)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActIdPropertyModel) Update(ctx context.Context, data *ActIdProperty) error {
	assetActIdPropertyNAMEKey := fmt.Sprintf("%s%v", cacheAssetActIdPropertyNAMEPrefix, data.NAME)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `NAME_` = ?", m.table, actIdPropertyRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.VALUE, data.REV, data.NAME)
	}, assetActIdPropertyNAMEKey)
	return err
}

func (m *defaultActIdPropertyModel) Delete(ctx context.Context, nAME string) error {
	assetActIdPropertyNAMEKey := fmt.Sprintf("%s%v", cacheAssetActIdPropertyNAMEPrefix, nAME)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `NAME_` = ?", m.table)
		return conn.ExecCtx(ctx, query, nAME)
	}, assetActIdPropertyNAMEKey)
	return err
}

func (m *defaultActIdPropertyModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetActIdPropertyNAMEPrefix, primary)
}

func (m *defaultActIdPropertyModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `NAME_` = ? limit 1", actIdPropertyRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultActIdPropertyModel) tableName() string {
	return m.table
}
