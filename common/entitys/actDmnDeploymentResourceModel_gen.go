// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	actDmnDeploymentResourceFieldNames          = builder.RawFieldNames(&ActDmnDeploymentResource{})
	actDmnDeploymentResourceRows                = strings.Join(actDmnDeploymentResourceFieldNames, ",")
	actDmnDeploymentResourceRowsExpectAutoSet   = strings.Join(stringx.Remove(actDmnDeploymentResourceFieldNames, "`create_time`", "`update_time`"), ",")
	actDmnDeploymentResourceRowsWithPlaceHolder = strings.Join(stringx.Remove(actDmnDeploymentResourceFieldNames, "`ID_`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetActDmnDeploymentResourceIDPrefix = "cache:asset:actDmnDeploymentResource:iD:"
)

type (
	actDmnDeploymentResourceModel interface {
		Insert(ctx context.Context, data *ActDmnDeploymentResource) (sql.Result, error)
		FindOne(ctx context.Context, iD string) (*ActDmnDeploymentResource, error)
		Update(ctx context.Context, data *ActDmnDeploymentResource) error
		Delete(ctx context.Context, iD string) error
	}

	defaultActDmnDeploymentResourceModel struct {
		sqlc.CachedConn
		table string
	}

	ActDmnDeploymentResource struct {
		ID            string         `db:"ID_"`
		NAME          sql.NullString `db:"NAME_"`
		DEPLOYMENTID  sql.NullString `db:"DEPLOYMENT_ID_"`
		RESOURCEBYTES sql.NullString `db:"RESOURCE_BYTES_"`
	}
)

func newActDmnDeploymentResourceModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultActDmnDeploymentResourceModel {
	return &defaultActDmnDeploymentResourceModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`act_dmn_deployment_resource`",
	}
}

func (m *defaultActDmnDeploymentResourceModel) Insert(ctx context.Context, data *ActDmnDeploymentResource) (sql.Result, error) {
	assetActDmnDeploymentResourceIDKey := fmt.Sprintf("%s%v", cacheAssetActDmnDeploymentResourceIDPrefix, data.ID)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, actDmnDeploymentResourceRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ID, data.NAME, data.DEPLOYMENTID, data.RESOURCEBYTES)
	}, assetActDmnDeploymentResourceIDKey)
	return ret, err
}

func (m *defaultActDmnDeploymentResourceModel) FindOne(ctx context.Context, iD string) (*ActDmnDeploymentResource, error) {
	assetActDmnDeploymentResourceIDKey := fmt.Sprintf("%s%v", cacheAssetActDmnDeploymentResourceIDPrefix, iD)
	var resp ActDmnDeploymentResource
	err := m.QueryRowCtx(ctx, &resp, assetActDmnDeploymentResourceIDKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actDmnDeploymentResourceRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, iD)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActDmnDeploymentResourceModel) Update(ctx context.Context, data *ActDmnDeploymentResource) error {
	assetActDmnDeploymentResourceIDKey := fmt.Sprintf("%s%v", cacheAssetActDmnDeploymentResourceIDPrefix, data.ID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `ID_` = ?", m.table, actDmnDeploymentResourceRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.NAME, data.DEPLOYMENTID, data.RESOURCEBYTES, data.ID)
	}, assetActDmnDeploymentResourceIDKey)
	return err
}

func (m *defaultActDmnDeploymentResourceModel) Delete(ctx context.Context, iD string) error {
	assetActDmnDeploymentResourceIDKey := fmt.Sprintf("%s%v", cacheAssetActDmnDeploymentResourceIDPrefix, iD)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `ID_` = ?", m.table)
		return conn.ExecCtx(ctx, query, iD)
	}, assetActDmnDeploymentResourceIDKey)
	return err
}

func (m *defaultActDmnDeploymentResourceModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetActDmnDeploymentResourceIDPrefix, primary)
}

func (m *defaultActDmnDeploymentResourceModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actDmnDeploymentResourceRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultActDmnDeploymentResourceModel) tableName() string {
	return m.table
}
