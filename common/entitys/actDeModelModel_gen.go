// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	actDeModelFieldNames          = builder.RawFieldNames(&ActDeModel{})
	actDeModelRows                = strings.Join(actDeModelFieldNames, ",")
	actDeModelRowsExpectAutoSet   = strings.Join(stringx.Remove(actDeModelFieldNames, "`create_time`", "`update_time`"), ",")
	actDeModelRowsWithPlaceHolder = strings.Join(stringx.Remove(actDeModelFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetActDeModelIdPrefix = "cache:asset:actDeModel:id:"
)

type (
	actDeModelModel interface {
		Insert(ctx context.Context, data *ActDeModel) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*ActDeModel, error)
		Update(ctx context.Context, data *ActDeModel) error
		Delete(ctx context.Context, id string) error
	}

	defaultActDeModelModel struct {
		sqlc.CachedConn
		table string
	}

	ActDeModel struct {
		Id              string         `db:"id"`
		Name            string         `db:"name"`
		ModelKey        string         `db:"model_key"`
		Description     sql.NullString `db:"description"`
		ModelComment    sql.NullString `db:"model_comment"`
		Created         sql.NullTime   `db:"created"`
		CreatedBy       sql.NullString `db:"created_by"`
		LastUpdated     sql.NullTime   `db:"last_updated"`
		LastUpdatedBy   sql.NullString `db:"last_updated_by"`
		Version         sql.NullInt64  `db:"version"`
		ModelEditorJson sql.NullString `db:"model_editor_json"`
		Thumbnail       sql.NullString `db:"thumbnail"`
		ModelType       sql.NullInt64  `db:"model_type"`
		TenantId        sql.NullString `db:"tenant_id"`
	}
)

func newActDeModelModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultActDeModelModel {
	return &defaultActDeModelModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`act_de_model`",
	}
}

func (m *defaultActDeModelModel) Insert(ctx context.Context, data *ActDeModel) (sql.Result, error) {
	assetActDeModelIdKey := fmt.Sprintf("%s%v", cacheAssetActDeModelIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, actDeModelRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.Name, data.ModelKey, data.Description, data.ModelComment, data.Created, data.CreatedBy, data.LastUpdated, data.LastUpdatedBy, data.Version, data.ModelEditorJson, data.Thumbnail, data.ModelType, data.TenantId)
	}, assetActDeModelIdKey)
	return ret, err
}

func (m *defaultActDeModelModel) FindOne(ctx context.Context, id string) (*ActDeModel, error) {
	assetActDeModelIdKey := fmt.Sprintf("%s%v", cacheAssetActDeModelIdPrefix, id)
	var resp ActDeModel
	err := m.QueryRowCtx(ctx, &resp, assetActDeModelIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", actDeModelRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActDeModelModel) Update(ctx context.Context, data *ActDeModel) error {
	assetActDeModelIdKey := fmt.Sprintf("%s%v", cacheAssetActDeModelIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, actDeModelRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.ModelKey, data.Description, data.ModelComment, data.Created, data.CreatedBy, data.LastUpdated, data.LastUpdatedBy, data.Version, data.ModelEditorJson, data.Thumbnail, data.ModelType, data.TenantId, data.Id)
	}, assetActDeModelIdKey)
	return err
}

func (m *defaultActDeModelModel) Delete(ctx context.Context, id string) error {
	assetActDeModelIdKey := fmt.Sprintf("%s%v", cacheAssetActDeModelIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetActDeModelIdKey)
	return err
}

func (m *defaultActDeModelModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetActDeModelIdPrefix, primary)
}

func (m *defaultActDeModelModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", actDeModelRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultActDeModelModel) tableName() string {
	return m.table
}
