// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	actCmmnHiMilInstFieldNames          = builder.RawFieldNames(&ActCmmnHiMilInst{})
	actCmmnHiMilInstRows                = strings.Join(actCmmnHiMilInstFieldNames, ",")
	actCmmnHiMilInstRowsExpectAutoSet   = strings.Join(stringx.Remove(actCmmnHiMilInstFieldNames, "`create_time`", "`update_time`"), ",")
	actCmmnHiMilInstRowsWithPlaceHolder = strings.Join(stringx.Remove(actCmmnHiMilInstFieldNames, "`ID_`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetActCmmnHiMilInstIDPrefix = "cache:asset:actCmmnHiMilInst:iD:"
)

type (
	actCmmnHiMilInstModel interface {
		Insert(ctx context.Context, data *ActCmmnHiMilInst) (sql.Result, error)
		FindOne(ctx context.Context, iD string) (*ActCmmnHiMilInst, error)
		Update(ctx context.Context, data *ActCmmnHiMilInst) error
		Delete(ctx context.Context, iD string) error
	}

	defaultActCmmnHiMilInstModel struct {
		sqlc.CachedConn
		table string
	}

	ActCmmnHiMilInst struct {
		ID         string       `db:"ID_"`
		REV        int64        `db:"REV_"`
		NAME       string       `db:"NAME_"`
		TIMESTAMP  sql.NullTime `db:"TIME_STAMP_"`
		CASEINSTID string       `db:"CASE_INST_ID_"`
		CASEDEFID  string       `db:"CASE_DEF_ID_"`
		ELEMENTID  string       `db:"ELEMENT_ID_"`
		TENANTID   string       `db:"TENANT_ID_"`
	}
)

func newActCmmnHiMilInstModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultActCmmnHiMilInstModel {
	return &defaultActCmmnHiMilInstModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`act_cmmn_hi_mil_inst`",
	}
}

func (m *defaultActCmmnHiMilInstModel) Insert(ctx context.Context, data *ActCmmnHiMilInst) (sql.Result, error) {
	assetActCmmnHiMilInstIDKey := fmt.Sprintf("%s%v", cacheAssetActCmmnHiMilInstIDPrefix, data.ID)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, actCmmnHiMilInstRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ID, data.REV, data.NAME, data.TIMESTAMP, data.CASEINSTID, data.CASEDEFID, data.ELEMENTID, data.TENANTID)
	}, assetActCmmnHiMilInstIDKey)
	return ret, err
}

func (m *defaultActCmmnHiMilInstModel) FindOne(ctx context.Context, iD string) (*ActCmmnHiMilInst, error) {
	assetActCmmnHiMilInstIDKey := fmt.Sprintf("%s%v", cacheAssetActCmmnHiMilInstIDPrefix, iD)
	var resp ActCmmnHiMilInst
	err := m.QueryRowCtx(ctx, &resp, assetActCmmnHiMilInstIDKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actCmmnHiMilInstRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, iD)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActCmmnHiMilInstModel) Update(ctx context.Context, data *ActCmmnHiMilInst) error {
	assetActCmmnHiMilInstIDKey := fmt.Sprintf("%s%v", cacheAssetActCmmnHiMilInstIDPrefix, data.ID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `ID_` = ?", m.table, actCmmnHiMilInstRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.REV, data.NAME, data.TIMESTAMP, data.CASEINSTID, data.CASEDEFID, data.ELEMENTID, data.TENANTID, data.ID)
	}, assetActCmmnHiMilInstIDKey)
	return err
}

func (m *defaultActCmmnHiMilInstModel) Delete(ctx context.Context, iD string) error {
	assetActCmmnHiMilInstIDKey := fmt.Sprintf("%s%v", cacheAssetActCmmnHiMilInstIDPrefix, iD)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `ID_` = ?", m.table)
		return conn.ExecCtx(ctx, query, iD)
	}, assetActCmmnHiMilInstIDKey)
	return err
}

func (m *defaultActCmmnHiMilInstModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetActCmmnHiMilInstIDPrefix, primary)
}

func (m *defaultActCmmnHiMilInstModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actCmmnHiMilInstRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultActCmmnHiMilInstModel) tableName() string {
	return m.table
}
