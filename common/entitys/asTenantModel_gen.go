// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asTenantFieldNames          = builder.RawFieldNames(&AsTenant{})
	asTenantRows                = strings.Join(asTenantFieldNames, ",")
	asTenantRowsExpectAutoSet   = strings.Join(stringx.Remove(asTenantFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	asTenantRowsWithPlaceHolder = strings.Join(stringx.Remove(asTenantFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsTenantIdPrefix = "cache:asset:asTenant:id:"
)

type (
	asTenantModel interface {
		Insert(ctx context.Context, data *AsTenant) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AsTenant, error)
		Update(ctx context.Context, data *AsTenant) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAsTenantModel struct {
		sqlc.CachedConn
		table string
	}

	AsTenant struct {
		Id         int64          `db:"id"`          // 主键
		TenantCode string         `db:"tenant_code"` // 租户编码（系统生成）
		TenantName string         `db:"tenant_name"` // 租户名称
		CreateUser sql.NullInt64  `db:"create_user"` // 创建用户id
		CreateTime time.Time      `db:"create_time"` // 添加时间
		UpdateUser sql.NullInt64  `db:"update_user"` // 更新用户id
		UpdateTime time.Time      `db:"update_time"` // 更新时间
		TenantType int64          `db:"tenant_type"` // 租户类型
		Status     sql.NullInt64  `db:"status"`      // 租户状态（2-可用；1-审核中；0-不可用）
		IsDeleted  int64          `db:"is_deleted"`  // 是否被删除
		Theme      sql.NullString `db:"theme"`       // 租户界面主题
		IsVirtual  int64          `db:"is_virtual"`  // 是否虚拟单位（1-虚，0-实）
	}
)

func newAsTenantModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsTenantModel {
	return &defaultAsTenantModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_tenant`",
	}
}

func (m *defaultAsTenantModel) Insert(ctx context.Context, data *AsTenant) (sql.Result, error) {
	assetAsTenantIdKey := fmt.Sprintf("%s%v", cacheAssetAsTenantIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, asTenantRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.TenantCode, data.TenantName, data.CreateUser, data.UpdateUser, data.TenantType, data.Status, data.IsDeleted, data.Theme, data.IsVirtual)
	}, assetAsTenantIdKey)
	return ret, err
}

func (m *defaultAsTenantModel) FindOne(ctx context.Context, id int64) (*AsTenant, error) {
	assetAsTenantIdKey := fmt.Sprintf("%s%v", cacheAssetAsTenantIdPrefix, id)
	var resp AsTenant
	err := m.QueryRowCtx(ctx, &resp, assetAsTenantIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asTenantRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsTenantModel) Update(ctx context.Context, data *AsTenant) error {
	assetAsTenantIdKey := fmt.Sprintf("%s%v", cacheAssetAsTenantIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asTenantRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.TenantCode, data.TenantName, data.CreateUser, data.UpdateUser, data.TenantType, data.Status, data.IsDeleted, data.Theme, data.IsVirtual, data.Id)
	}, assetAsTenantIdKey)
	return err
}

func (m *defaultAsTenantModel) Delete(ctx context.Context, id int64) error {
	assetAsTenantIdKey := fmt.Sprintf("%s%v", cacheAssetAsTenantIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsTenantIdKey)
	return err
}

func (m *defaultAsTenantModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsTenantIdPrefix, primary)
}

func (m *defaultAsTenantModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asTenantRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsTenantModel) tableName() string {
	return m.table
}
