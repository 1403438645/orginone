// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asAllGroupFieldNames          = builder.RawFieldNames(&AsAllGroup{})
	asAllGroupRows                = strings.Join(asAllGroupFieldNames, ",")
	asAllGroupRowsExpectAutoSet   = strings.Join(stringx.Remove(asAllGroupFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	asAllGroupRowsWithPlaceHolder = strings.Join(stringx.Remove(asAllGroupFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsAllGroupIdPrefix = "cache:asset:asAllGroup:id:"
)

type (
	asAllGroupModel interface {
		Insert(ctx context.Context, data *AsAllGroup) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AsAllGroup, error)
		Update(ctx context.Context, data *AsAllGroup) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAsAllGroupModel struct {
		sqlc.CachedConn
		table string
	}

	AsAllGroup struct {
		Id               int64          `db:"id"`                 // 主码
		TenantCode       sql.NullString `db:"tenant_code"`        // 租户编码(管理租户，默认为创建租户)
		GroupName        sql.NullString `db:"group_name"`         // 集团名称
		GroupDescription sql.NullString `db:"group_description"`  // 集团描述
		GroupCode        sql.NullString `db:"group_code"`         // 集团编码
		CreateTime       sql.NullTime   `db:"create_time"`        // 创建时间
		UpdateTime       sql.NullTime   `db:"update_time"`        // 更新时间
		CreateUser       sql.NullInt64  `db:"create_user"`        // 创建用户
		UpdateUser       sql.NullInt64  `db:"update_user"`        // 更新用户
		IsDeleted        int64          `db:"is_deleted"`         // 是否被删除
		Depth            sql.NullInt64  `db:"depth"`              // 深度
		Tp               sql.NullInt64  `db:"tp"`                 // 类型（1-集团，2-虚节点）
		Status           sql.NullInt64  `db:"status"`             // 状态
		SocialCreditCode sql.NullString `db:"social_credit_code"` // 统一社会信用代码
	}
)

func newAsAllGroupModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsAllGroupModel {
	return &defaultAsAllGroupModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_all_group`",
	}
}

func (m *defaultAsAllGroupModel) Insert(ctx context.Context, data *AsAllGroup) (sql.Result, error) {
	assetAsAllGroupIdKey := fmt.Sprintf("%s%v", cacheAssetAsAllGroupIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, asAllGroupRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.TenantCode, data.GroupName, data.GroupDescription, data.GroupCode, data.CreateUser, data.UpdateUser, data.IsDeleted, data.Depth, data.Tp, data.Status, data.SocialCreditCode)
	}, assetAsAllGroupIdKey)
	return ret, err
}

func (m *defaultAsAllGroupModel) FindOne(ctx context.Context, id int64) (*AsAllGroup, error) {
	assetAsAllGroupIdKey := fmt.Sprintf("%s%v", cacheAssetAsAllGroupIdPrefix, id)
	var resp AsAllGroup
	err := m.QueryRowCtx(ctx, &resp, assetAsAllGroupIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asAllGroupRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsAllGroupModel) Update(ctx context.Context, data *AsAllGroup) error {
	assetAsAllGroupIdKey := fmt.Sprintf("%s%v", cacheAssetAsAllGroupIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asAllGroupRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.TenantCode, data.GroupName, data.GroupDescription, data.GroupCode, data.CreateUser, data.UpdateUser, data.IsDeleted, data.Depth, data.Tp, data.Status, data.SocialCreditCode, data.Id)
	}, assetAsAllGroupIdKey)
	return err
}

func (m *defaultAsAllGroupModel) Delete(ctx context.Context, id int64) error {
	assetAsAllGroupIdKey := fmt.Sprintf("%s%v", cacheAssetAsAllGroupIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsAllGroupIdKey)
	return err
}

func (m *defaultAsAllGroupModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsAllGroupIdPrefix, primary)
}

func (m *defaultAsAllGroupModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asAllGroupRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsAllGroupModel) tableName() string {
	return m.table
}
