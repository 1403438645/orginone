// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asTempletProcNodeFieldNames          = builder.RawFieldNames(&AsTempletProcNode{})
	asTempletProcNodeRows                = strings.Join(asTempletProcNodeFieldNames, ",")
	asTempletProcNodeRowsExpectAutoSet   = strings.Join(stringx.Remove(asTempletProcNodeFieldNames, "`create_time`", "`update_time`"), ",")
	asTempletProcNodeRowsWithPlaceHolder = strings.Join(stringx.Remove(asTempletProcNodeFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsTempletProcNodeIdPrefix = "cache:asset:asTempletProcNode:id:"
)

type (
	asTempletProcNodeModel interface {
		Insert(ctx context.Context, data *AsTempletProcNode) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*AsTempletProcNode, error)
		Update(ctx context.Context, data *AsTempletProcNode) error
		Delete(ctx context.Context, id string) error
	}

	defaultAsTempletProcNodeModel struct {
		sqlc.CachedConn
		table string
	}

	AsTempletProcNode struct {
		Id                 string         `db:"id"`                    // 流程节点模板Id
		TempletProcModelId string         `db:"templet_proc_model_id"` // 注意这里绑定的是流程模型资源的模板Id，资源导入之后还需要获取这个流程模型的Id
		NodeId             string         `db:"node_id"`
		NodeType           int64          `db:"node_type"`         // 1经办，2审批，3抄送
		CandidateUser      sql.NullString `db:"candidate_user"`    // 处理人
		CandidateGroup     sql.NullString `db:"candidate_group"`   // 处理组，这里应该设置成json数据，可以包含复杂数据，比如排除掉某个组里的某些人或者某个组里的某些小组（这个暂时不做，先留个接口在这里）
		LimitTime          sql.NullTime   `db:"limit_time"`        // 处理该节点事项的限时，目前暂时只做审批节点超过限时后，转交其他人处理或者直接流到下一节点
		OvertimeStrategy   sql.NullInt64  `db:"overtime_strategy"` // 节点如果超时之后的处理方式：0：交由系统管理员处理1：自动到下一节点
		SignStrategy       sql.NullString `db:"sign_strategy"`     // 这是设置节点多人审批的策略，用json格式存储实现复杂规则
		TodoStrategy       sql.NullString `db:"todo_strategy"`     // 这是设置节点多人处理经办节点的策略，用json格式存储实现复杂规则
		IfJointSign        sql.NullInt64  `db:"if_joint_sign"`     // 判断是否是多人会签节点0：不是会签1：是会签，串行2：是会签，并行
	}
)

func newAsTempletProcNodeModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsTempletProcNodeModel {
	return &defaultAsTempletProcNodeModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_templet_proc_node`",
	}
}

func (m *defaultAsTempletProcNodeModel) Insert(ctx context.Context, data *AsTempletProcNode) (sql.Result, error) {
	assetAsTempletProcNodeIdKey := fmt.Sprintf("%s%v", cacheAssetAsTempletProcNodeIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, asTempletProcNodeRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.TempletProcModelId, data.NodeId, data.NodeType, data.CandidateUser, data.CandidateGroup, data.LimitTime, data.OvertimeStrategy, data.SignStrategy, data.TodoStrategy, data.IfJointSign)
	}, assetAsTempletProcNodeIdKey)
	return ret, err
}

func (m *defaultAsTempletProcNodeModel) FindOne(ctx context.Context, id string) (*AsTempletProcNode, error) {
	assetAsTempletProcNodeIdKey := fmt.Sprintf("%s%v", cacheAssetAsTempletProcNodeIdPrefix, id)
	var resp AsTempletProcNode
	err := m.QueryRowCtx(ctx, &resp, assetAsTempletProcNodeIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asTempletProcNodeRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsTempletProcNodeModel) Update(ctx context.Context, data *AsTempletProcNode) error {
	assetAsTempletProcNodeIdKey := fmt.Sprintf("%s%v", cacheAssetAsTempletProcNodeIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asTempletProcNodeRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.TempletProcModelId, data.NodeId, data.NodeType, data.CandidateUser, data.CandidateGroup, data.LimitTime, data.OvertimeStrategy, data.SignStrategy, data.TodoStrategy, data.IfJointSign, data.Id)
	}, assetAsTempletProcNodeIdKey)
	return err
}

func (m *defaultAsTempletProcNodeModel) Delete(ctx context.Context, id string) error {
	assetAsTempletProcNodeIdKey := fmt.Sprintf("%s%v", cacheAssetAsTempletProcNodeIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsTempletProcNodeIdKey)
	return err
}

func (m *defaultAsTempletProcNodeModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsTempletProcNodeIdPrefix, primary)
}

func (m *defaultAsTempletProcNodeModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asTempletProcNodeRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsTempletProcNodeModel) tableName() string {
	return m.table
}
