// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	actIdGroupFieldNames          = builder.RawFieldNames(&ActIdGroup{})
	actIdGroupRows                = strings.Join(actIdGroupFieldNames, ",")
	actIdGroupRowsExpectAutoSet   = strings.Join(stringx.Remove(actIdGroupFieldNames, "`create_time`", "`update_time`"), ",")
	actIdGroupRowsWithPlaceHolder = strings.Join(stringx.Remove(actIdGroupFieldNames, "`ID_`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetActIdGroupIDPrefix = "cache:asset:actIdGroup:iD:"
)

type (
	actIdGroupModel interface {
		Insert(ctx context.Context, data *ActIdGroup) (sql.Result, error)
		FindOne(ctx context.Context, iD string) (*ActIdGroup, error)
		Update(ctx context.Context, data *ActIdGroup) error
		Delete(ctx context.Context, iD string) error
	}

	defaultActIdGroupModel struct {
		sqlc.CachedConn
		table string
	}

	ActIdGroup struct {
		ID   string         `db:"ID_"`
		REV  sql.NullInt64  `db:"REV_"`
		NAME sql.NullString `db:"NAME_"`
		TYPE sql.NullString `db:"TYPE_"`
	}
)

func newActIdGroupModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultActIdGroupModel {
	return &defaultActIdGroupModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`act_id_group`",
	}
}

func (m *defaultActIdGroupModel) Insert(ctx context.Context, data *ActIdGroup) (sql.Result, error) {
	assetActIdGroupIDKey := fmt.Sprintf("%s%v", cacheAssetActIdGroupIDPrefix, data.ID)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, actIdGroupRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ID, data.REV, data.NAME, data.TYPE)
	}, assetActIdGroupIDKey)
	return ret, err
}

func (m *defaultActIdGroupModel) FindOne(ctx context.Context, iD string) (*ActIdGroup, error) {
	assetActIdGroupIDKey := fmt.Sprintf("%s%v", cacheAssetActIdGroupIDPrefix, iD)
	var resp ActIdGroup
	err := m.QueryRowCtx(ctx, &resp, assetActIdGroupIDKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actIdGroupRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, iD)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActIdGroupModel) Update(ctx context.Context, data *ActIdGroup) error {
	assetActIdGroupIDKey := fmt.Sprintf("%s%v", cacheAssetActIdGroupIDPrefix, data.ID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `ID_` = ?", m.table, actIdGroupRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.REV, data.NAME, data.TYPE, data.ID)
	}, assetActIdGroupIDKey)
	return err
}

func (m *defaultActIdGroupModel) Delete(ctx context.Context, iD string) error {
	assetActIdGroupIDKey := fmt.Sprintf("%s%v", cacheAssetActIdGroupIDPrefix, iD)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `ID_` = ?", m.table)
		return conn.ExecCtx(ctx, query, iD)
	}, assetActIdGroupIDKey)
	return err
}

func (m *defaultActIdGroupModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetActIdGroupIDPrefix, primary)
}

func (m *defaultActIdGroupModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actIdGroupRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultActIdGroupModel) tableName() string {
	return m.table
}
