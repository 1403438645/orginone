// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asProcDiagramFieldNames          = builder.RawFieldNames(&AsProcDiagram{})
	asProcDiagramRows                = strings.Join(asProcDiagramFieldNames, ",")
	asProcDiagramRowsExpectAutoSet   = strings.Join(stringx.Remove(asProcDiagramFieldNames, "`create_time`", "`update_time`"), ",")
	asProcDiagramRowsWithPlaceHolder = strings.Join(stringx.Remove(asProcDiagramFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsProcDiagramIdPrefix = "cache:asset:asProcDiagram:id:"
)

type (
	asProcDiagramModel interface {
		Insert(ctx context.Context, data *AsProcDiagram) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*AsProcDiagram, error)
		Update(ctx context.Context, data *AsProcDiagram) error
		Delete(ctx context.Context, id string) error
	}

	defaultAsProcDiagramModel struct {
		sqlc.CachedConn
		table string
	}

	AsProcDiagram struct {
		Id         string         `db:"id"`
		ProcInstId sql.NullString `db:"proc_inst_id"`
		Version    sql.NullInt64  `db:"version"`
		Diagram    sql.NullString `db:"diagram"`
	}
)

func newAsProcDiagramModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsProcDiagramModel {
	return &defaultAsProcDiagramModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_proc_diagram`",
	}
}

func (m *defaultAsProcDiagramModel) Insert(ctx context.Context, data *AsProcDiagram) (sql.Result, error) {
	assetAsProcDiagramIdKey := fmt.Sprintf("%s%v", cacheAssetAsProcDiagramIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, asProcDiagramRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.ProcInstId, data.Version, data.Diagram)
	}, assetAsProcDiagramIdKey)
	return ret, err
}

func (m *defaultAsProcDiagramModel) FindOne(ctx context.Context, id string) (*AsProcDiagram, error) {
	assetAsProcDiagramIdKey := fmt.Sprintf("%s%v", cacheAssetAsProcDiagramIdPrefix, id)
	var resp AsProcDiagram
	err := m.QueryRowCtx(ctx, &resp, assetAsProcDiagramIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asProcDiagramRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsProcDiagramModel) Update(ctx context.Context, data *AsProcDiagram) error {
	assetAsProcDiagramIdKey := fmt.Sprintf("%s%v", cacheAssetAsProcDiagramIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asProcDiagramRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ProcInstId, data.Version, data.Diagram, data.Id)
	}, assetAsProcDiagramIdKey)
	return err
}

func (m *defaultAsProcDiagramModel) Delete(ctx context.Context, id string) error {
	assetAsProcDiagramIdKey := fmt.Sprintf("%s%v", cacheAssetAsProcDiagramIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsProcDiagramIdKey)
	return err
}

func (m *defaultAsProcDiagramModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsProcDiagramIdPrefix, primary)
}

func (m *defaultAsProcDiagramModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asProcDiagramRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsProcDiagramModel) tableName() string {
	return m.table
}
