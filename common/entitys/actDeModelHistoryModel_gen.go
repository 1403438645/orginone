// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	actDeModelHistoryFieldNames          = builder.RawFieldNames(&ActDeModelHistory{})
	actDeModelHistoryRows                = strings.Join(actDeModelHistoryFieldNames, ",")
	actDeModelHistoryRowsExpectAutoSet   = strings.Join(stringx.Remove(actDeModelHistoryFieldNames, "`create_time`", "`update_time`"), ",")
	actDeModelHistoryRowsWithPlaceHolder = strings.Join(stringx.Remove(actDeModelHistoryFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetActDeModelHistoryIdPrefix = "cache:asset:actDeModelHistory:id:"
)

type (
	actDeModelHistoryModel interface {
		Insert(ctx context.Context, data *ActDeModelHistory) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*ActDeModelHistory, error)
		Update(ctx context.Context, data *ActDeModelHistory) error
		Delete(ctx context.Context, id string) error
	}

	defaultActDeModelHistoryModel struct {
		sqlc.CachedConn
		table string
	}

	ActDeModelHistory struct {
		Id              string         `db:"id"`
		Name            string         `db:"name"`
		ModelKey        string         `db:"model_key"`
		Description     sql.NullString `db:"description"`
		ModelComment    sql.NullString `db:"model_comment"`
		Created         sql.NullTime   `db:"created"`
		CreatedBy       sql.NullString `db:"created_by"`
		LastUpdated     sql.NullTime   `db:"last_updated"`
		LastUpdatedBy   sql.NullString `db:"last_updated_by"`
		RemovalDate     sql.NullTime   `db:"removal_date"`
		Version         sql.NullInt64  `db:"version"`
		ModelEditorJson sql.NullString `db:"model_editor_json"`
		ModelId         string         `db:"model_id"`
		ModelType       sql.NullInt64  `db:"model_type"`
		TenantId        sql.NullString `db:"tenant_id"`
	}
)

func newActDeModelHistoryModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultActDeModelHistoryModel {
	return &defaultActDeModelHistoryModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`act_de_model_history`",
	}
}

func (m *defaultActDeModelHistoryModel) Insert(ctx context.Context, data *ActDeModelHistory) (sql.Result, error) {
	assetActDeModelHistoryIdKey := fmt.Sprintf("%s%v", cacheAssetActDeModelHistoryIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, actDeModelHistoryRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.Name, data.ModelKey, data.Description, data.ModelComment, data.Created, data.CreatedBy, data.LastUpdated, data.LastUpdatedBy, data.RemovalDate, data.Version, data.ModelEditorJson, data.ModelId, data.ModelType, data.TenantId)
	}, assetActDeModelHistoryIdKey)
	return ret, err
}

func (m *defaultActDeModelHistoryModel) FindOne(ctx context.Context, id string) (*ActDeModelHistory, error) {
	assetActDeModelHistoryIdKey := fmt.Sprintf("%s%v", cacheAssetActDeModelHistoryIdPrefix, id)
	var resp ActDeModelHistory
	err := m.QueryRowCtx(ctx, &resp, assetActDeModelHistoryIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", actDeModelHistoryRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActDeModelHistoryModel) Update(ctx context.Context, data *ActDeModelHistory) error {
	assetActDeModelHistoryIdKey := fmt.Sprintf("%s%v", cacheAssetActDeModelHistoryIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, actDeModelHistoryRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.ModelKey, data.Description, data.ModelComment, data.Created, data.CreatedBy, data.LastUpdated, data.LastUpdatedBy, data.RemovalDate, data.Version, data.ModelEditorJson, data.ModelId, data.ModelType, data.TenantId, data.Id)
	}, assetActDeModelHistoryIdKey)
	return err
}

func (m *defaultActDeModelHistoryModel) Delete(ctx context.Context, id string) error {
	assetActDeModelHistoryIdKey := fmt.Sprintf("%s%v", cacheAssetActDeModelHistoryIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetActDeModelHistoryIdKey)
	return err
}

func (m *defaultActDeModelHistoryModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetActDeModelHistoryIdPrefix, primary)
}

func (m *defaultActDeModelHistoryModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", actDeModelHistoryRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultActDeModelHistoryModel) tableName() string {
	return m.table
}
