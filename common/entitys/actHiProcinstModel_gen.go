// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	actHiProcinstFieldNames          = builder.RawFieldNames(&ActHiProcinst{})
	actHiProcinstRows                = strings.Join(actHiProcinstFieldNames, ",")
	actHiProcinstRowsExpectAutoSet   = strings.Join(stringx.Remove(actHiProcinstFieldNames, "`create_time`", "`update_time`"), ",")
	actHiProcinstRowsWithPlaceHolder = strings.Join(stringx.Remove(actHiProcinstFieldNames, "`ID_`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetActHiProcinstIDPrefix         = "cache:asset:actHiProcinst:iD:"
	cacheAssetActHiProcinstPROCINSTIDPrefix = "cache:asset:actHiProcinst:pROCINSTID:"
)

type (
	actHiProcinstModel interface {
		Insert(ctx context.Context, data *ActHiProcinst) (sql.Result, error)
		FindOne(ctx context.Context, iD string) (*ActHiProcinst, error)
		FindOneByPROCINSTID(ctx context.Context, pROCINSTID string) (*ActHiProcinst, error)
		Update(ctx context.Context, data *ActHiProcinst) error
		Delete(ctx context.Context, iD string) error
	}

	defaultActHiProcinstModel struct {
		sqlc.CachedConn
		table string
	}

	ActHiProcinst struct {
		ID                     string         `db:"ID_"`
		REV                    int64          `db:"REV_"`
		PROCINSTID             string         `db:"PROC_INST_ID_"`
		BUSINESSKEY            sql.NullString `db:"BUSINESS_KEY_"`
		PROCDEFID              string         `db:"PROC_DEF_ID_"`
		STARTTIME              time.Time      `db:"START_TIME_"`
		ENDTIME                sql.NullTime   `db:"END_TIME_"`
		DURATION               sql.NullInt64  `db:"DURATION_"`
		STARTUSERID            sql.NullString `db:"START_USER_ID_"`
		STARTACTID             sql.NullString `db:"START_ACT_ID_"`
		ENDACTID               sql.NullString `db:"END_ACT_ID_"`
		SUPERPROCESSINSTANCEID sql.NullString `db:"SUPER_PROCESS_INSTANCE_ID_"`
		DELETEREASON           sql.NullString `db:"DELETE_REASON_"`
		TENANTID               string         `db:"TENANT_ID_"`
		NAME                   sql.NullString `db:"NAME_"`
		CALLBACKID             sql.NullString `db:"CALLBACK_ID_"`
		CALLBACKTYPE           sql.NullString `db:"CALLBACK_TYPE_"`
		REFERENCEID            sql.NullString `db:"REFERENCE_ID_"`
		REFERENCETYPE          sql.NullString `db:"REFERENCE_TYPE_"`
	}
)

func newActHiProcinstModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultActHiProcinstModel {
	return &defaultActHiProcinstModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`act_hi_procinst`",
	}
}

func (m *defaultActHiProcinstModel) Insert(ctx context.Context, data *ActHiProcinst) (sql.Result, error) {
	assetActHiProcinstIDKey := fmt.Sprintf("%s%v", cacheAssetActHiProcinstIDPrefix, data.ID)
	assetActHiProcinstPROCINSTIDKey := fmt.Sprintf("%s%v", cacheAssetActHiProcinstPROCINSTIDPrefix, data.PROCINSTID)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, actHiProcinstRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ID, data.REV, data.PROCINSTID, data.BUSINESSKEY, data.PROCDEFID, data.STARTTIME, data.ENDTIME, data.DURATION, data.STARTUSERID, data.STARTACTID, data.ENDACTID, data.SUPERPROCESSINSTANCEID, data.DELETEREASON, data.TENANTID, data.NAME, data.CALLBACKID, data.CALLBACKTYPE, data.REFERENCEID, data.REFERENCETYPE)
	}, assetActHiProcinstIDKey, assetActHiProcinstPROCINSTIDKey)
	return ret, err
}

func (m *defaultActHiProcinstModel) FindOne(ctx context.Context, iD string) (*ActHiProcinst, error) {
	assetActHiProcinstIDKey := fmt.Sprintf("%s%v", cacheAssetActHiProcinstIDPrefix, iD)
	var resp ActHiProcinst
	err := m.QueryRowCtx(ctx, &resp, assetActHiProcinstIDKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actHiProcinstRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, iD)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActHiProcinstModel) FindOneByPROCINSTID(ctx context.Context, pROCINSTID string) (*ActHiProcinst, error) {
	assetActHiProcinstPROCINSTIDKey := fmt.Sprintf("%s%v", cacheAssetActHiProcinstPROCINSTIDPrefix, pROCINSTID)
	var resp ActHiProcinst
	err := m.QueryRowIndexCtx(ctx, &resp, assetActHiProcinstPROCINSTIDKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `PROC_INST_ID_` = ? limit 1", actHiProcinstRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, pROCINSTID); err != nil {
			return nil, err
		}
		return resp.ID, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActHiProcinstModel) Update(ctx context.Context, data *ActHiProcinst) error {
	assetActHiProcinstIDKey := fmt.Sprintf("%s%v", cacheAssetActHiProcinstIDPrefix, data.ID)
	assetActHiProcinstPROCINSTIDKey := fmt.Sprintf("%s%v", cacheAssetActHiProcinstPROCINSTIDPrefix, data.PROCINSTID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `ID_` = ?", m.table, actHiProcinstRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.REV, data.PROCINSTID, data.BUSINESSKEY, data.PROCDEFID, data.STARTTIME, data.ENDTIME, data.DURATION, data.STARTUSERID, data.STARTACTID, data.ENDACTID, data.SUPERPROCESSINSTANCEID, data.DELETEREASON, data.TENANTID, data.NAME, data.CALLBACKID, data.CALLBACKTYPE, data.REFERENCEID, data.REFERENCETYPE, data.ID)
	}, assetActHiProcinstIDKey, assetActHiProcinstPROCINSTIDKey)
	return err
}

func (m *defaultActHiProcinstModel) Delete(ctx context.Context, iD string) error {
	data, err := m.FindOne(ctx, iD)
	if err != nil {
		return err
	}

	assetActHiProcinstIDKey := fmt.Sprintf("%s%v", cacheAssetActHiProcinstIDPrefix, iD)
	assetActHiProcinstPROCINSTIDKey := fmt.Sprintf("%s%v", cacheAssetActHiProcinstPROCINSTIDPrefix, data.PROCINSTID)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `ID_` = ?", m.table)
		return conn.ExecCtx(ctx, query, iD)
	}, assetActHiProcinstPROCINSTIDKey, assetActHiProcinstIDKey)
	return err
}

func (m *defaultActHiProcinstModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetActHiProcinstIDPrefix, primary)
}

func (m *defaultActHiProcinstModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actHiProcinstRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultActHiProcinstModel) tableName() string {
	return m.table
}
