// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asUserBindFieldNames          = builder.RawFieldNames(&AsUserBind{})
	asUserBindRows                = strings.Join(asUserBindFieldNames, ",")
	asUserBindRowsExpectAutoSet   = strings.Join(stringx.Remove(asUserBindFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	asUserBindRowsWithPlaceHolder = strings.Join(stringx.Remove(asUserBindFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsUserBindIdPrefix = "cache:asset:asUserBind:id:"
)

type (
	asUserBindModel interface {
		Insert(ctx context.Context, data *AsUserBind) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AsUserBind, error)
		Update(ctx context.Context, data *AsUserBind) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAsUserBindModel struct {
		sqlc.CachedConn
		table string
	}

	AsUserBind struct {
		Id          int64          `db:"id"`           // 用户id
		UserId      sql.NullString `db:"user_id"`      // 其他平台用户编码
		PhoneNumber sql.NullString `db:"phone_number"` // 资产云平台手机号
		Platform    sql.NullInt64  `db:"platform"`     // 其他平台(1-浙政钉)
		UpdateTime  time.Time      `db:"update_time"`  // 最后一次更新时间戳
		CreateTime  time.Time      `db:"create_time"`  // 添加时间
		CreateUser  sql.NullInt64  `db:"create_user"`  // 添加者
		UpdateUser  sql.NullInt64  `db:"update_user"`  // 修改者
		IsDeleted   int64          `db:"is_deleted"`   // 状态 1：有效 0：无效
		Status      int64          `db:"status"`       // 用户状态：0-不可用 1-审核中 2-可用 3-未激活
	}
)

func newAsUserBindModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsUserBindModel {
	return &defaultAsUserBindModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_user_bind`",
	}
}

func (m *defaultAsUserBindModel) Insert(ctx context.Context, data *AsUserBind) (sql.Result, error) {
	assetAsUserBindIdKey := fmt.Sprintf("%s%v", cacheAssetAsUserBindIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, asUserBindRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.PhoneNumber, data.Platform, data.CreateUser, data.UpdateUser, data.IsDeleted, data.Status)
	}, assetAsUserBindIdKey)
	return ret, err
}

func (m *defaultAsUserBindModel) FindOne(ctx context.Context, id int64) (*AsUserBind, error) {
	assetAsUserBindIdKey := fmt.Sprintf("%s%v", cacheAssetAsUserBindIdPrefix, id)
	var resp AsUserBind
	err := m.QueryRowCtx(ctx, &resp, assetAsUserBindIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asUserBindRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsUserBindModel) Update(ctx context.Context, data *AsUserBind) error {
	assetAsUserBindIdKey := fmt.Sprintf("%s%v", cacheAssetAsUserBindIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asUserBindRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.PhoneNumber, data.Platform, data.CreateUser, data.UpdateUser, data.IsDeleted, data.Status, data.Id)
	}, assetAsUserBindIdKey)
	return err
}

func (m *defaultAsUserBindModel) Delete(ctx context.Context, id int64) error {
	assetAsUserBindIdKey := fmt.Sprintf("%s%v", cacheAssetAsUserBindIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsUserBindIdKey)
	return err
}

func (m *defaultAsUserBindModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsUserBindIdPrefix, primary)
}

func (m *defaultAsUserBindModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asUserBindRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsUserBindModel) tableName() string {
	return m.table
}
