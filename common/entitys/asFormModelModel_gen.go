// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asFormModelFieldNames          = builder.RawFieldNames(&AsFormModel{})
	asFormModelRows                = strings.Join(asFormModelFieldNames, ",")
	asFormModelRowsExpectAutoSet   = strings.Join(stringx.Remove(asFormModelFieldNames, "`create_time`", "`update_time`"), ",")
	asFormModelRowsWithPlaceHolder = strings.Join(stringx.Remove(asFormModelFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsFormModelIdPrefix = "cache:asset:asFormModel:id:"
)

type (
	asFormModelModel interface {
		Insert(ctx context.Context, data *AsFormModel) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*AsFormModel, error)
		Update(ctx context.Context, data *AsFormModel) error
		Delete(ctx context.Context, id string) error
	}

	defaultAsFormModelModel struct {
		sqlc.CachedConn
		table string
	}

	AsFormModel struct {
		Id                string         `db:"id"`
		FormName          string         `db:"form_name"`
		Description       sql.NullString `db:"description"` // 表单描述
		CreatedTime       time.Time      `db:"created_time"`
		CreatedBy         string         `db:"created_by"`
		LastUpdatedTime   sql.NullTime   `db:"last_updated_time"`
		LastUpdatedBy     sql.NullString `db:"last_updated_by"`
		Version           int64          `db:"version"`
		ModelSheet        string         `db:"model_sheet"`
		CategoryId        sql.NullInt64  `db:"category_id"`          // 表单分类id
		GroupId           int64          `db:"group_id"`             // 该表单所属分组（负值代表不属于任一分组）
		IconCls           sql.NullString `db:"icon_cls"`             // 表单显示的vue图标
		ProcModelId       sql.NullString `db:"proc_model_id"`        // 绑定的流程模型ID
		SceneId           sql.NullString `db:"scene_id"`             // 当前表单流程模型所属的工作场景
		AppId             sql.NullString `db:"app_id"`               // 表单模型在哪个应用下，暂时先放着，不用
		IsBinded          sql.NullInt64  `db:"is_binded"`            // 表单模型是否绑定流程模型，0否，1是
		IsBindAuthority   sql.NullInt64  `db:"is_bind_authority"`    // 表单项权限数据是否添加，0否，1是
		IsAddNodeInfo     sql.NullInt64  `db:"is_add_node_info"`     // 是否正确增加节点信息，0否，1是
		IsAddSeqCondition sql.NullInt64  `db:"is_add_seq_condition"` // 是否增加seqCondition，0否，1是
		IsDeleted         int64          `db:"is_deleted"`           // 是否被删除，0否，1是
		Status            sql.NullInt64  `db:"status"`               // 表单模型状态 0：暂存 1：可用 2：已发布 3：已上架 4：已下架
		TenantId          sql.NullString `db:"tenant_id"`            // 租户编码
		CreateUserName    sql.NullString `db:"create_user_name"`
		IfUsed            int64          `db:"if_used"` // 是否常用 0-不常用  1-常用
		IsChanged         int64          `db:"is_changed"`
		IsAdapted         int64          `db:"is_adapted"`
	}
)

func newAsFormModelModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsFormModelModel {
	return &defaultAsFormModelModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_form_model`",
	}
}

func (m *defaultAsFormModelModel) Insert(ctx context.Context, data *AsFormModel) (sql.Result, error) {
	assetAsFormModelIdKey := fmt.Sprintf("%s%v", cacheAssetAsFormModelIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, asFormModelRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.FormName, data.Description, data.CreatedTime, data.CreatedBy, data.LastUpdatedTime, data.LastUpdatedBy, data.Version, data.ModelSheet, data.CategoryId, data.GroupId, data.IconCls, data.ProcModelId, data.SceneId, data.AppId, data.IsBinded, data.IsBindAuthority, data.IsAddNodeInfo, data.IsAddSeqCondition, data.IsDeleted, data.Status, data.TenantId, data.CreateUserName, data.IfUsed, data.IsChanged, data.IsAdapted)
	}, assetAsFormModelIdKey)
	return ret, err
}

func (m *defaultAsFormModelModel) FindOne(ctx context.Context, id string) (*AsFormModel, error) {
	assetAsFormModelIdKey := fmt.Sprintf("%s%v", cacheAssetAsFormModelIdPrefix, id)
	var resp AsFormModel
	err := m.QueryRowCtx(ctx, &resp, assetAsFormModelIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asFormModelRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsFormModelModel) Update(ctx context.Context, data *AsFormModel) error {
	assetAsFormModelIdKey := fmt.Sprintf("%s%v", cacheAssetAsFormModelIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asFormModelRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.FormName, data.Description, data.CreatedTime, data.CreatedBy, data.LastUpdatedTime, data.LastUpdatedBy, data.Version, data.ModelSheet, data.CategoryId, data.GroupId, data.IconCls, data.ProcModelId, data.SceneId, data.AppId, data.IsBinded, data.IsBindAuthority, data.IsAddNodeInfo, data.IsAddSeqCondition, data.IsDeleted, data.Status, data.TenantId, data.CreateUserName, data.IfUsed, data.IsChanged, data.IsAdapted, data.Id)
	}, assetAsFormModelIdKey)
	return err
}

func (m *defaultAsFormModelModel) Delete(ctx context.Context, id string) error {
	assetAsFormModelIdKey := fmt.Sprintf("%s%v", cacheAssetAsFormModelIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsFormModelIdKey)
	return err
}

func (m *defaultAsFormModelModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsFormModelIdPrefix, primary)
}

func (m *defaultAsFormModelModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asFormModelRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsFormModelModel) tableName() string {
	return m.table
}
