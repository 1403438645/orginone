// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asMarketAppNoticeFieldNames          = builder.RawFieldNames(&AsMarketAppNotice{})
	asMarketAppNoticeRows                = strings.Join(asMarketAppNoticeFieldNames, ",")
	asMarketAppNoticeRowsExpectAutoSet   = strings.Join(stringx.Remove(asMarketAppNoticeFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	asMarketAppNoticeRowsWithPlaceHolder = strings.Join(stringx.Remove(asMarketAppNoticeFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsMarketAppNoticeIdPrefix = "cache:asset:asMarketAppNotice:id:"
)

type (
	asMarketAppNoticeModel interface {
		Insert(ctx context.Context, data *AsMarketAppNotice) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AsMarketAppNotice, error)
		Update(ctx context.Context, data *AsMarketAppNotice) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAsMarketAppNoticeModel struct {
		sqlc.CachedConn
		table string
	}

	AsMarketAppNotice struct {
		Id                  int64          `db:"id"`                     // 主键
		NoticeTitle         sql.NullString `db:"notice_title"`           // 标题
		NoticeContent       sql.NullString `db:"notice_content"`         // 内容
		NoticeReleaseUnitId sql.NullInt64  `db:"notice_release_unit_id"` // 发布方
		NoticeReleaseStatus sql.NullInt64  `db:"notice_release_status"`  // 发布状态
		NoticeReleaseTime   sql.NullTime   `db:"notice_release_time"`    // 发布时间
		NoticeRoleIds       sql.NullString `db:"notice_role_ids"`        // 发布对象角色
		NoticeUnitIds       sql.NullString `db:"notice_unit_ids"`        // 发布对象单位
		GroupOrUnit         sql.NullInt64  `db:"group_or_unit"`          // 集团或单位
		CreateUser          sql.NullInt64  `db:"create_user"`            // 创建人
		CreateTime          sql.NullTime   `db:"create_time"`            // 创建时间
		UpdateUser          sql.NullInt64  `db:"update_user"`            // 修改人
		UpdateTime          sql.NullTime   `db:"update_time"`            // 修改时间
		Status              sql.NullInt64  `db:"status"`                 // 状态
		IsDeleted           sql.NullInt64  `db:"is_deleted"`             // 是否已删除
		UnitQueryIds        sql.NullString `db:"unit_query_ids"`         // 单位ids用于查询
	}
)

func newAsMarketAppNoticeModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsMarketAppNoticeModel {
	return &defaultAsMarketAppNoticeModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_market_app_notice`",
	}
}

func (m *defaultAsMarketAppNoticeModel) Insert(ctx context.Context, data *AsMarketAppNotice) (sql.Result, error) {
	assetAsMarketAppNoticeIdKey := fmt.Sprintf("%s%v", cacheAssetAsMarketAppNoticeIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, asMarketAppNoticeRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.NoticeTitle, data.NoticeContent, data.NoticeReleaseUnitId, data.NoticeReleaseStatus, data.NoticeReleaseTime, data.NoticeRoleIds, data.NoticeUnitIds, data.GroupOrUnit, data.CreateUser, data.UpdateUser, data.Status, data.IsDeleted, data.UnitQueryIds)
	}, assetAsMarketAppNoticeIdKey)
	return ret, err
}

func (m *defaultAsMarketAppNoticeModel) FindOne(ctx context.Context, id int64) (*AsMarketAppNotice, error) {
	assetAsMarketAppNoticeIdKey := fmt.Sprintf("%s%v", cacheAssetAsMarketAppNoticeIdPrefix, id)
	var resp AsMarketAppNotice
	err := m.QueryRowCtx(ctx, &resp, assetAsMarketAppNoticeIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asMarketAppNoticeRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsMarketAppNoticeModel) Update(ctx context.Context, data *AsMarketAppNotice) error {
	assetAsMarketAppNoticeIdKey := fmt.Sprintf("%s%v", cacheAssetAsMarketAppNoticeIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asMarketAppNoticeRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.NoticeTitle, data.NoticeContent, data.NoticeReleaseUnitId, data.NoticeReleaseStatus, data.NoticeReleaseTime, data.NoticeRoleIds, data.NoticeUnitIds, data.GroupOrUnit, data.CreateUser, data.UpdateUser, data.Status, data.IsDeleted, data.UnitQueryIds, data.Id)
	}, assetAsMarketAppNoticeIdKey)
	return err
}

func (m *defaultAsMarketAppNoticeModel) Delete(ctx context.Context, id int64) error {
	assetAsMarketAppNoticeIdKey := fmt.Sprintf("%s%v", cacheAssetAsMarketAppNoticeIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsMarketAppNoticeIdKey)
	return err
}

func (m *defaultAsMarketAppNoticeModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsMarketAppNoticeIdPrefix, primary)
}

func (m *defaultAsMarketAppNoticeModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asMarketAppNoticeRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsMarketAppNoticeModel) tableName() string {
	return m.table
}
