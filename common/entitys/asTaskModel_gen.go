// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asTaskFieldNames          = builder.RawFieldNames(&AsTask{})
	asTaskRows                = strings.Join(asTaskFieldNames, ",")
	asTaskRowsExpectAutoSet   = strings.Join(stringx.Remove(asTaskFieldNames, "`create_time`", "`update_time`"), ",")
	asTaskRowsWithPlaceHolder = strings.Join(stringx.Remove(asTaskFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsTaskIdPrefix = "cache:asset:asTask:id:"
)

type (
	asTaskModel interface {
		Insert(ctx context.Context, data *AsTask) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*AsTask, error)
		Update(ctx context.Context, data *AsTask) error
		Delete(ctx context.Context, id string) error
	}

	defaultAsTaskModel struct {
		sqlc.CachedConn
		table string
	}

	AsTask struct {
		Id            string         `db:"id"` // 这个值就是flowable中taskId
		FormModelId   sql.NullString `db:"form_model_id"`
		ProcInstId    sql.NullString `db:"proc_inst_id"`
		ExecutionId   sql.NullString `db:"execution_id"`
		Executor      sql.NullString `db:"executor"` // 执行人
		ExecuteTime   sql.NullTime   `db:"execute_time"`
		FormInstSheet sql.NullString `db:"form_inst_sheet"`
		FormInstValue sql.NullString `db:"form_inst_value"` // 表单项中填的信息
		Status        int64          `db:"status"`          //  0;   //表示被创建，等待被执行 1;   //被执行了99;  //表单实例被丢弃（即没被执行了，可能是直接被回滚了）999;  //表单实例原来被正确执行了的，但是现在被回滚了
		NodeType      sql.NullInt64  `db:"node_type"`       // 用来标示当前任务节点类型：经办1、审批2、抄送3
		ApproveResult sql.NullInt64  `db:"approve_result"`  // 1表示对当前审批节点同意，0表示不同意
	}
)

func newAsTaskModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsTaskModel {
	return &defaultAsTaskModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_task`",
	}
}

func (m *defaultAsTaskModel) Insert(ctx context.Context, data *AsTask) (sql.Result, error) {
	assetAsTaskIdKey := fmt.Sprintf("%s%v", cacheAssetAsTaskIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, asTaskRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.FormModelId, data.ProcInstId, data.ExecutionId, data.Executor, data.ExecuteTime, data.FormInstSheet, data.FormInstValue, data.Status, data.NodeType, data.ApproveResult)
	}, assetAsTaskIdKey)
	return ret, err
}

func (m *defaultAsTaskModel) FindOne(ctx context.Context, id string) (*AsTask, error) {
	assetAsTaskIdKey := fmt.Sprintf("%s%v", cacheAssetAsTaskIdPrefix, id)
	var resp AsTask
	err := m.QueryRowCtx(ctx, &resp, assetAsTaskIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asTaskRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsTaskModel) Update(ctx context.Context, data *AsTask) error {
	assetAsTaskIdKey := fmt.Sprintf("%s%v", cacheAssetAsTaskIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asTaskRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.FormModelId, data.ProcInstId, data.ExecutionId, data.Executor, data.ExecuteTime, data.FormInstSheet, data.FormInstValue, data.Status, data.NodeType, data.ApproveResult, data.Id)
	}, assetAsTaskIdKey)
	return err
}

func (m *defaultAsTaskModel) Delete(ctx context.Context, id string) error {
	assetAsTaskIdKey := fmt.Sprintf("%s%v", cacheAssetAsTaskIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsTaskIdKey)
	return err
}

func (m *defaultAsTaskModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsTaskIdPrefix, primary)
}

func (m *defaultAsTaskModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asTaskRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsTaskModel) tableName() string {
	return m.table
}
