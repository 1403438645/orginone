// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asTenantAttrFieldNames          = builder.RawFieldNames(&AsTenantAttr{})
	asTenantAttrRows                = strings.Join(asTenantAttrFieldNames, ",")
	asTenantAttrRowsExpectAutoSet   = strings.Join(stringx.Remove(asTenantAttrFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	asTenantAttrRowsWithPlaceHolder = strings.Join(stringx.Remove(asTenantAttrFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsTenantAttrIdPrefix = "cache:asset:asTenantAttr:id:"
)

type (
	asTenantAttrModel interface {
		Insert(ctx context.Context, data *AsTenantAttr) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AsTenantAttr, error)
		Update(ctx context.Context, data *AsTenantAttr) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAsTenantAttrModel struct {
		sqlc.CachedConn
		table string
	}

	AsTenantAttr struct {
		Id         int64          `db:"id"` // 主键
		ParentId   int64          `db:"parent_id"`
		AttrName   string         `db:"attr_name"`   // tenantType对应的名字，也就是租户类型的名字
		AttrRemark sql.NullString `db:"attr_remark"` // 类型备注
		IsDeleted  int64          `db:"is_deleted"`
		Status     sql.NullInt64  `db:"status"`
	}
)

func newAsTenantAttrModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsTenantAttrModel {
	return &defaultAsTenantAttrModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_tenant_attr`",
	}
}

func (m *defaultAsTenantAttrModel) Insert(ctx context.Context, data *AsTenantAttr) (sql.Result, error) {
	assetAsTenantAttrIdKey := fmt.Sprintf("%s%v", cacheAssetAsTenantAttrIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, asTenantAttrRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ParentId, data.AttrName, data.AttrRemark, data.IsDeleted, data.Status)
	}, assetAsTenantAttrIdKey)
	return ret, err
}

func (m *defaultAsTenantAttrModel) FindOne(ctx context.Context, id int64) (*AsTenantAttr, error) {
	assetAsTenantAttrIdKey := fmt.Sprintf("%s%v", cacheAssetAsTenantAttrIdPrefix, id)
	var resp AsTenantAttr
	err := m.QueryRowCtx(ctx, &resp, assetAsTenantAttrIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asTenantAttrRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsTenantAttrModel) Update(ctx context.Context, data *AsTenantAttr) error {
	assetAsTenantAttrIdKey := fmt.Sprintf("%s%v", cacheAssetAsTenantAttrIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asTenantAttrRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ParentId, data.AttrName, data.AttrRemark, data.IsDeleted, data.Status, data.Id)
	}, assetAsTenantAttrIdKey)
	return err
}

func (m *defaultAsTenantAttrModel) Delete(ctx context.Context, id int64) error {
	assetAsTenantAttrIdKey := fmt.Sprintf("%s%v", cacheAssetAsTenantAttrIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsTenantAttrIdKey)
	return err
}

func (m *defaultAsTenantAttrModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsTenantAttrIdPrefix, primary)
}

func (m *defaultAsTenantAttrModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asTenantAttrRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsTenantAttrModel) tableName() string {
	return m.table
}
