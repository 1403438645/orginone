// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asJobFieldNames          = builder.RawFieldNames(&AsJob{})
	asJobRows                = strings.Join(asJobFieldNames, ",")
	asJobRowsExpectAutoSet   = strings.Join(stringx.Remove(asJobFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	asJobRowsWithPlaceHolder = strings.Join(stringx.Remove(asJobFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsJobIdPrefix = "cache:asset:asJob:id:"
)

type (
	asJobModel interface {
		Insert(ctx context.Context, data *AsJob) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AsJob, error)
		Update(ctx context.Context, data *AsJob) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAsJobModel struct {
		sqlc.CachedConn
		table string
	}

	AsJob struct {
		Id         int64         `db:"id"`          // 主键
		JobName    string        `db:"job_name"`    // 岗位名称
		TenantCode string        `db:"tenant_code"` // 租户编码
		Tp         sql.NullInt64 `db:"tp"`          // 岗位类型：1-系统默认岗位，2-用户自定义岗位，3-应用岗位
		Sort       sql.NullInt64 `db:"sort"`        // 排序
		CreateTime time.Time     `db:"create_time"` // 创建时间
		UpdateTime time.Time     `db:"update_time"` // 更新时间
		CreateUser sql.NullInt64 `db:"create_user"` // 创建用户
		UpdateUser sql.NullInt64 `db:"update_user"` // 更新用户
		IsDeleted  int64         `db:"is_deleted"`  // 是否被删除
		Status     int64         `db:"status"`      // 状态
	}
)

func newAsJobModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsJobModel {
	return &defaultAsJobModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_job`",
	}
}

func (m *defaultAsJobModel) Insert(ctx context.Context, data *AsJob) (sql.Result, error) {
	assetAsJobIdKey := fmt.Sprintf("%s%v", cacheAssetAsJobIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, asJobRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.JobName, data.TenantCode, data.Tp, data.Sort, data.CreateUser, data.UpdateUser, data.IsDeleted, data.Status)
	}, assetAsJobIdKey)
	return ret, err
}

func (m *defaultAsJobModel) FindOne(ctx context.Context, id int64) (*AsJob, error) {
	assetAsJobIdKey := fmt.Sprintf("%s%v", cacheAssetAsJobIdPrefix, id)
	var resp AsJob
	err := m.QueryRowCtx(ctx, &resp, assetAsJobIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asJobRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsJobModel) Update(ctx context.Context, data *AsJob) error {
	assetAsJobIdKey := fmt.Sprintf("%s%v", cacheAssetAsJobIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asJobRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.JobName, data.TenantCode, data.Tp, data.Sort, data.CreateUser, data.UpdateUser, data.IsDeleted, data.Status, data.Id)
	}, assetAsJobIdKey)
	return err
}

func (m *defaultAsJobModel) Delete(ctx context.Context, id int64) error {
	assetAsJobIdKey := fmt.Sprintf("%s%v", cacheAssetAsJobIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsJobIdKey)
	return err
}

func (m *defaultAsJobModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsJobIdPrefix, primary)
}

func (m *defaultAsJobModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asJobRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsJobModel) tableName() string {
	return m.table
}
