// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asZoneTreeFieldNames          = builder.RawFieldNames(&AsZoneTree{})
	asZoneTreeRows                = strings.Join(asZoneTreeFieldNames, ",")
	asZoneTreeRowsExpectAutoSet   = strings.Join(stringx.Remove(asZoneTreeFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	asZoneTreeRowsWithPlaceHolder = strings.Join(stringx.Remove(asZoneTreeFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsZoneTreeIdPrefix = "cache:asset:asZoneTree:id:"
)

type (
	asZoneTreeModel interface {
		Insert(ctx context.Context, data *AsZoneTree) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AsZoneTree, error)
		Update(ctx context.Context, data *AsZoneTree) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAsZoneTreeModel struct {
		sqlc.CachedConn
		table string
	}

	AsZoneTree struct {
		Id            int64          `db:"id"`              // 主键
		ZoneAllName   sql.NullString `db:"zone_all_name"`   // 区划全称
		ZoneShortName sql.NullString `db:"zone_short_name"` // 区划简称
		Layer         sql.NullInt64  `db:"layer"`           // 行政区划级别：0-国；1-省；2-市；3-县；4-乡；5-村；6-组；
		OrganParentId sql.NullString `db:"organ_parent_id"` // 存的是实体树是父节点id
		ChildId       sql.NullString `db:"child_id"`        // 存的是实体树中一级子节点id
		ParentId      sql.NullInt64  `db:"parent_id"`       // 区划中的父id
		ZoneAdCode    sql.NullString `db:"zone_ad_code"`    // 区划行政代码
		ChangeType    sql.NullInt64  `db:"change_type"`     // 1-创建；2-更名；3-拆分；4-合并
		UpdateTime    sql.NullTime   `db:"update_time"`     // 更新时间
		StartTime     sql.NullTime   `db:"start_time"`      // 开始时间（从2001-01-01开始）
		CreateTime    sql.NullTime   `db:"create_time"`     // 创建时间
		UnMergeId     sql.NullString `db:"un_merge_id"`     // 合并前所有id
		SplitedId     sql.NullString `db:"splited_id"`      // 拆分后的所有id
		UnChangeId    sql.NullString `db:"un_change_id"`    // 变更前id
		ChangedId     sql.NullString `db:"changed_id"`      // 变更后id
		IsDeleted     sql.NullInt64  `db:"is_deleted"`      // 是否删除：0-可用；1-删除；
		ZoneType      sql.NullInt64  `db:"zone_type"`       // 区划类型（预留）；1- ；2- ；，，，
		Remark        sql.NullString `db:"remark"`          // 描述
		Status        int64          `db:"status"`          // 状态：1正常；0不可用
		ZoneCode      sql.NullString `db:"zone_code"`       // 区划代码
	}
)

func newAsZoneTreeModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsZoneTreeModel {
	return &defaultAsZoneTreeModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_zone_tree`",
	}
}

func (m *defaultAsZoneTreeModel) Insert(ctx context.Context, data *AsZoneTree) (sql.Result, error) {
	assetAsZoneTreeIdKey := fmt.Sprintf("%s%v", cacheAssetAsZoneTreeIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, asZoneTreeRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ZoneAllName, data.ZoneShortName, data.Layer, data.OrganParentId, data.ChildId, data.ParentId, data.ZoneAdCode, data.ChangeType, data.StartTime, data.UnMergeId, data.SplitedId, data.UnChangeId, data.ChangedId, data.IsDeleted, data.ZoneType, data.Remark, data.Status, data.ZoneCode)
	}, assetAsZoneTreeIdKey)
	return ret, err
}

func (m *defaultAsZoneTreeModel) FindOne(ctx context.Context, id int64) (*AsZoneTree, error) {
	assetAsZoneTreeIdKey := fmt.Sprintf("%s%v", cacheAssetAsZoneTreeIdPrefix, id)
	var resp AsZoneTree
	err := m.QueryRowCtx(ctx, &resp, assetAsZoneTreeIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asZoneTreeRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsZoneTreeModel) Update(ctx context.Context, data *AsZoneTree) error {
	assetAsZoneTreeIdKey := fmt.Sprintf("%s%v", cacheAssetAsZoneTreeIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asZoneTreeRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ZoneAllName, data.ZoneShortName, data.Layer, data.OrganParentId, data.ChildId, data.ParentId, data.ZoneAdCode, data.ChangeType, data.StartTime, data.UnMergeId, data.SplitedId, data.UnChangeId, data.ChangedId, data.IsDeleted, data.ZoneType, data.Remark, data.Status, data.ZoneCode, data.Id)
	}, assetAsZoneTreeIdKey)
	return err
}

func (m *defaultAsZoneTreeModel) Delete(ctx context.Context, id int64) error {
	assetAsZoneTreeIdKey := fmt.Sprintf("%s%v", cacheAssetAsZoneTreeIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsZoneTreeIdKey)
	return err
}

func (m *defaultAsZoneTreeModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsZoneTreeIdPrefix, primary)
}

func (m *defaultAsZoneTreeModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asZoneTreeRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsZoneTreeModel) tableName() string {
	return m.table
}
