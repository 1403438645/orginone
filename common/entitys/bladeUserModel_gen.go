// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bladeUserFieldNames          = builder.RawFieldNames(&BladeUser{})
	bladeUserRows                = strings.Join(bladeUserFieldNames, ",")
	bladeUserRowsExpectAutoSet   = strings.Join(stringx.Remove(bladeUserFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	bladeUserRowsWithPlaceHolder = strings.Join(stringx.Remove(bladeUserFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetBladeUserIdPrefix = "cache:asset:bladeUser:id:"
)

type (
	bladeUserModel interface {
		Insert(ctx context.Context, data *BladeUser) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BladeUser, error)
		Update(ctx context.Context, data *BladeUser) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBladeUserModel struct {
		sqlc.CachedConn
		table string
	}

	BladeUser struct {
		Id         int64          `db:"id"`          // 主键
		TenantCode string         `db:"tenant_code"` // 租户编号
		Account    sql.NullString `db:"account"`     // 账号
		Password   sql.NullString `db:"password"`    // 密码
		Name       sql.NullString `db:"name"`        // 昵称
		RealName   sql.NullString `db:"real_name"`   // 真名
		Email      sql.NullString `db:"email"`       // 邮箱
		Phone      sql.NullString `db:"phone"`       // 手机
		Birthday   sql.NullTime   `db:"birthday"`    // 生日
		Sex        sql.NullInt64  `db:"sex"`         // 性别
		RoleId     sql.NullString `db:"role_id"`     // 角色id
		DeptId     sql.NullString `db:"dept_id"`     // 部门id
		CreateUser sql.NullInt64  `db:"create_user"` // 创建人
		CreateTime sql.NullTime   `db:"create_time"` // 创建时间
		UpdateUser sql.NullInt64  `db:"update_user"` // 修改人
		UpdateTime sql.NullTime   `db:"update_time"` // 修改时间
		Status     sql.NullInt64  `db:"status"`      // 状态
		IsDeleted  int64          `db:"is_deleted"`  // 是否已删除
	}
)

func newBladeUserModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultBladeUserModel {
	return &defaultBladeUserModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`blade_user`",
	}
}

func (m *defaultBladeUserModel) Insert(ctx context.Context, data *BladeUser) (sql.Result, error) {
	assetBladeUserIdKey := fmt.Sprintf("%s%v", cacheAssetBladeUserIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, bladeUserRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.TenantCode, data.Account, data.Password, data.Name, data.RealName, data.Email, data.Phone, data.Birthday, data.Sex, data.RoleId, data.DeptId, data.CreateUser, data.UpdateUser, data.Status, data.IsDeleted)
	}, assetBladeUserIdKey)
	return ret, err
}

func (m *defaultBladeUserModel) FindOne(ctx context.Context, id int64) (*BladeUser, error) {
	assetBladeUserIdKey := fmt.Sprintf("%s%v", cacheAssetBladeUserIdPrefix, id)
	var resp BladeUser
	err := m.QueryRowCtx(ctx, &resp, assetBladeUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bladeUserRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBladeUserModel) Update(ctx context.Context, data *BladeUser) error {
	assetBladeUserIdKey := fmt.Sprintf("%s%v", cacheAssetBladeUserIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, bladeUserRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.TenantCode, data.Account, data.Password, data.Name, data.RealName, data.Email, data.Phone, data.Birthday, data.Sex, data.RoleId, data.DeptId, data.CreateUser, data.UpdateUser, data.Status, data.IsDeleted, data.Id)
	}, assetBladeUserIdKey)
	return err
}

func (m *defaultBladeUserModel) Delete(ctx context.Context, id int64) error {
	assetBladeUserIdKey := fmt.Sprintf("%s%v", cacheAssetBladeUserIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetBladeUserIdKey)
	return err
}

func (m *defaultBladeUserModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetBladeUserIdPrefix, primary)
}

func (m *defaultBladeUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bladeUserRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBladeUserModel) tableName() string {
	return m.table
}
