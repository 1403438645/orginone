// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asFormFinalFieldNames          = builder.RawFieldNames(&AsFormFinal{})
	asFormFinalRows                = strings.Join(asFormFinalFieldNames, ",")
	asFormFinalRowsExpectAutoSet   = strings.Join(stringx.Remove(asFormFinalFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	asFormFinalRowsWithPlaceHolder = strings.Join(stringx.Remove(asFormFinalFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsFormFinalIdPrefix = "cache:asset:asFormFinal:id:"
)

type (
	asFormFinalModel interface {
		Insert(ctx context.Context, data *AsFormFinal) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AsFormFinal, error)
		Update(ctx context.Context, data *AsFormFinal) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAsFormFinalModel struct {
		sqlc.CachedConn
		table string
	}

	AsFormFinal struct {
		FormModelId    string         `db:"form_model_id"`
		FinalReviewers sql.NullString `db:"final_reviewers"`
		Id             int64          `db:"id"`
	}
)

func newAsFormFinalModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsFormFinalModel {
	return &defaultAsFormFinalModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_form_final`",
	}
}

func (m *defaultAsFormFinalModel) Insert(ctx context.Context, data *AsFormFinal) (sql.Result, error) {
	assetAsFormFinalIdKey := fmt.Sprintf("%s%v", cacheAssetAsFormFinalIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, asFormFinalRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.FormModelId, data.FinalReviewers)
	}, assetAsFormFinalIdKey)
	return ret, err
}

func (m *defaultAsFormFinalModel) FindOne(ctx context.Context, id int64) (*AsFormFinal, error) {
	assetAsFormFinalIdKey := fmt.Sprintf("%s%v", cacheAssetAsFormFinalIdPrefix, id)
	var resp AsFormFinal
	err := m.QueryRowCtx(ctx, &resp, assetAsFormFinalIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asFormFinalRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsFormFinalModel) Update(ctx context.Context, data *AsFormFinal) error {
	assetAsFormFinalIdKey := fmt.Sprintf("%s%v", cacheAssetAsFormFinalIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asFormFinalRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.FormModelId, data.FinalReviewers, data.Id)
	}, assetAsFormFinalIdKey)
	return err
}

func (m *defaultAsFormFinalModel) Delete(ctx context.Context, id int64) error {
	assetAsFormFinalIdKey := fmt.Sprintf("%s%v", cacheAssetAsFormFinalIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsFormFinalIdKey)
	return err
}

func (m *defaultAsFormFinalModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsFormFinalIdPrefix, primary)
}

func (m *defaultAsFormFinalModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asFormFinalRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsFormFinalModel) tableName() string {
	return m.table
}
