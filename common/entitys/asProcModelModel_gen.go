// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asProcModelFieldNames          = builder.RawFieldNames(&AsProcModel{})
	asProcModelRows                = strings.Join(asProcModelFieldNames, ",")
	asProcModelRowsExpectAutoSet   = strings.Join(stringx.Remove(asProcModelFieldNames, "`create_time`", "`update_time`"), ",")
	asProcModelRowsWithPlaceHolder = strings.Join(stringx.Remove(asProcModelFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsProcModelIdPrefix = "cache:asset:asProcModel:id:"
)

type (
	asProcModelModel interface {
		Insert(ctx context.Context, data *AsProcModel) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*AsProcModel, error)
		Update(ctx context.Context, data *AsProcModel) error
		Delete(ctx context.Context, id string) error
	}

	defaultAsProcModelModel struct {
		sqlc.CachedConn
		table string
	}

	AsProcModel struct {
		Id           string         `db:"id"`
		NodeNum      sql.NullInt64  `db:"node_num"`
		SeqCondition sql.NullString `db:"seq_condition"` // 保存当前流程模型中sequenceFlow的条件语句
	}
)

func newAsProcModelModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsProcModelModel {
	return &defaultAsProcModelModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_proc_model`",
	}
}

func (m *defaultAsProcModelModel) Insert(ctx context.Context, data *AsProcModel) (sql.Result, error) {
	assetAsProcModelIdKey := fmt.Sprintf("%s%v", cacheAssetAsProcModelIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, asProcModelRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.NodeNum, data.SeqCondition)
	}, assetAsProcModelIdKey)
	return ret, err
}

func (m *defaultAsProcModelModel) FindOne(ctx context.Context, id string) (*AsProcModel, error) {
	assetAsProcModelIdKey := fmt.Sprintf("%s%v", cacheAssetAsProcModelIdPrefix, id)
	var resp AsProcModel
	err := m.QueryRowCtx(ctx, &resp, assetAsProcModelIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asProcModelRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsProcModelModel) Update(ctx context.Context, data *AsProcModel) error {
	assetAsProcModelIdKey := fmt.Sprintf("%s%v", cacheAssetAsProcModelIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asProcModelRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.NodeNum, data.SeqCondition, data.Id)
	}, assetAsProcModelIdKey)
	return err
}

func (m *defaultAsProcModelModel) Delete(ctx context.Context, id string) error {
	assetAsProcModelIdKey := fmt.Sprintf("%s%v", cacheAssetAsProcModelIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsProcModelIdKey)
	return err
}

func (m *defaultAsProcModelModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsProcModelIdPrefix, primary)
}

func (m *defaultAsProcModelModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asProcModelRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsProcModelModel) tableName() string {
	return m.table
}
