// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asGroupTenantRelationsFieldNames          = builder.RawFieldNames(&AsGroupTenantRelations{})
	asGroupTenantRelationsRows                = strings.Join(asGroupTenantRelationsFieldNames, ",")
	asGroupTenantRelationsRowsExpectAutoSet   = strings.Join(stringx.Remove(asGroupTenantRelationsFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	asGroupTenantRelationsRowsWithPlaceHolder = strings.Join(stringx.Remove(asGroupTenantRelationsFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsGroupTenantRelationsIdPrefix = "cache:asset:asGroupTenantRelations:id:"
)

type (
	asGroupTenantRelationsModel interface {
		Insert(ctx context.Context, data *AsGroupTenantRelations) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AsGroupTenantRelations, error)
		Update(ctx context.Context, data *AsGroupTenantRelations) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAsGroupTenantRelationsModel struct {
		sqlc.CachedConn
		table string
	}

	AsGroupTenantRelations struct {
		Id          int64          `db:"id"`           // 主键
		ParentId    sql.NullInt64  `db:"parent_id"`    // 父集团或租户id
		SonId       sql.NullInt64  `db:"son_id"`       // 子集团或租户id
		Tp          sql.NullInt64  `db:"tp"`           // 类型（1-集团，2-租户）
		CreateTime  sql.NullTime   `db:"create_time"`  // 创建时间
		UpdateTime  sql.NullTime   `db:"update_time"`  // 更新时间
		CreateUser  sql.NullInt64  `db:"create_user"`  // 创建用户
		UpdateUser  sql.NullInt64  `db:"update_user"`  // 更新用户
		IsDeleted   int64          `db:"is_deleted"`   // 是否被删除
		Sort        sql.NullInt64  `db:"sort"`         // 排序
		Serial      sql.NullInt64  `db:"serial"`       // 序列号
		Status      sql.NullInt64  `db:"status"`       // 审核状态（101-申请中，102-审核通过，103-审核失败，104-取消申请）
		GroupCode   sql.NullString `db:"group_code"`   // 集团编码
		ExpiresTime sql.NullTime   `db:"expires_time"` // 到期时间
		IsHide      int64          `db:"is_hide"`      // 是否在树形中隐藏节点
	}
)

func newAsGroupTenantRelationsModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsGroupTenantRelationsModel {
	return &defaultAsGroupTenantRelationsModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_group_tenant_relations`",
	}
}

func (m *defaultAsGroupTenantRelationsModel) Insert(ctx context.Context, data *AsGroupTenantRelations) (sql.Result, error) {
	assetAsGroupTenantRelationsIdKey := fmt.Sprintf("%s%v", cacheAssetAsGroupTenantRelationsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, asGroupTenantRelationsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ParentId, data.SonId, data.Tp, data.CreateUser, data.UpdateUser, data.IsDeleted, data.Sort, data.Serial, data.Status, data.GroupCode, data.ExpiresTime, data.IsHide)
	}, assetAsGroupTenantRelationsIdKey)
	return ret, err
}

func (m *defaultAsGroupTenantRelationsModel) FindOne(ctx context.Context, id int64) (*AsGroupTenantRelations, error) {
	assetAsGroupTenantRelationsIdKey := fmt.Sprintf("%s%v", cacheAssetAsGroupTenantRelationsIdPrefix, id)
	var resp AsGroupTenantRelations
	err := m.QueryRowCtx(ctx, &resp, assetAsGroupTenantRelationsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asGroupTenantRelationsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsGroupTenantRelationsModel) Update(ctx context.Context, data *AsGroupTenantRelations) error {
	assetAsGroupTenantRelationsIdKey := fmt.Sprintf("%s%v", cacheAssetAsGroupTenantRelationsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asGroupTenantRelationsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ParentId, data.SonId, data.Tp, data.CreateUser, data.UpdateUser, data.IsDeleted, data.Sort, data.Serial, data.Status, data.GroupCode, data.ExpiresTime, data.IsHide, data.Id)
	}, assetAsGroupTenantRelationsIdKey)
	return err
}

func (m *defaultAsGroupTenantRelationsModel) Delete(ctx context.Context, id int64) error {
	assetAsGroupTenantRelationsIdKey := fmt.Sprintf("%s%v", cacheAssetAsGroupTenantRelationsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsGroupTenantRelationsIdKey)
	return err
}

func (m *defaultAsGroupTenantRelationsModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsGroupTenantRelationsIdPrefix, primary)
}

func (m *defaultAsGroupTenantRelationsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asGroupTenantRelationsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsGroupTenantRelationsModel) tableName() string {
	return m.table
}
