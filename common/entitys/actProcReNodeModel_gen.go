// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	actProcReNodeFieldNames          = builder.RawFieldNames(&ActProcReNode{})
	actProcReNodeRows                = strings.Join(actProcReNodeFieldNames, ",")
	actProcReNodeRowsExpectAutoSet   = strings.Join(stringx.Remove(actProcReNodeFieldNames, "`create_time`", "`update_time`"), ",")
	actProcReNodeRowsWithPlaceHolder = strings.Join(stringx.Remove(actProcReNodeFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetActProcReNodeIdPrefix = "cache:asset:actProcReNode:id:"
)

type (
	actProcReNodeModel interface {
		Insert(ctx context.Context, data *ActProcReNode) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*ActProcReNode, error)
		Update(ctx context.Context, data *ActProcReNode) error
		Delete(ctx context.Context, id string) error
	}

	defaultActProcReNodeModel struct {
		sqlc.CachedConn
		table string
	}

	ActProcReNode struct {
		Id              string         `db:"id"`
		ProcDefId       sql.NullString `db:"proc_def_id"`
		ActId           sql.NullString `db:"act_id"`
		ActName         sql.NullString `db:"act_name"`
		ActType         sql.NullString `db:"act_type"`
		LogicChildId    sql.NullString `db:"logic_child_id"`
		PhysicsChildId  sql.NullString `db:"physics_child_id"`
		CreateTime      sql.NullTime   `db:"create_time"`
		IsMultiinstance sql.NullString `db:"is_multiinstance"`
	}
)

func newActProcReNodeModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultActProcReNodeModel {
	return &defaultActProcReNodeModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`act_proc_re_node`",
	}
}

func (m *defaultActProcReNodeModel) Insert(ctx context.Context, data *ActProcReNode) (sql.Result, error) {
	assetActProcReNodeIdKey := fmt.Sprintf("%s%v", cacheAssetActProcReNodeIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, actProcReNodeRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.ProcDefId, data.ActId, data.ActName, data.ActType, data.LogicChildId, data.PhysicsChildId, data.IsMultiinstance)
	}, assetActProcReNodeIdKey)
	return ret, err
}

func (m *defaultActProcReNodeModel) FindOne(ctx context.Context, id string) (*ActProcReNode, error) {
	assetActProcReNodeIdKey := fmt.Sprintf("%s%v", cacheAssetActProcReNodeIdPrefix, id)
	var resp ActProcReNode
	err := m.QueryRowCtx(ctx, &resp, assetActProcReNodeIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", actProcReNodeRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActProcReNodeModel) Update(ctx context.Context, data *ActProcReNode) error {
	assetActProcReNodeIdKey := fmt.Sprintf("%s%v", cacheAssetActProcReNodeIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, actProcReNodeRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ProcDefId, data.ActId, data.ActName, data.ActType, data.LogicChildId, data.PhysicsChildId, data.IsMultiinstance, data.Id)
	}, assetActProcReNodeIdKey)
	return err
}

func (m *defaultActProcReNodeModel) Delete(ctx context.Context, id string) error {
	assetActProcReNodeIdKey := fmt.Sprintf("%s%v", cacheAssetActProcReNodeIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetActProcReNodeIdKey)
	return err
}

func (m *defaultActProcReNodeModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetActProcReNodeIdPrefix, primary)
}

func (m *defaultActProcReNodeModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", actProcReNodeRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultActProcReNodeModel) tableName() string {
	return m.table
}
