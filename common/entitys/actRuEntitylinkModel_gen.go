// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	actRuEntitylinkFieldNames          = builder.RawFieldNames(&ActRuEntitylink{})
	actRuEntitylinkRows                = strings.Join(actRuEntitylinkFieldNames, ",")
	actRuEntitylinkRowsExpectAutoSet   = strings.Join(stringx.Remove(actRuEntitylinkFieldNames, "`create_time`", "`update_time`"), ",")
	actRuEntitylinkRowsWithPlaceHolder = strings.Join(stringx.Remove(actRuEntitylinkFieldNames, "`ID_`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetActRuEntitylinkIDPrefix = "cache:asset:actRuEntitylink:iD:"
)

type (
	actRuEntitylinkModel interface {
		Insert(ctx context.Context, data *ActRuEntitylink) (sql.Result, error)
		FindOne(ctx context.Context, iD string) (*ActRuEntitylink, error)
		Update(ctx context.Context, data *ActRuEntitylink) error
		Delete(ctx context.Context, iD string) error
	}

	defaultActRuEntitylinkModel struct {
		sqlc.CachedConn
		table string
	}

	ActRuEntitylink struct {
		ID                   string         `db:"ID_"`
		REV                  sql.NullInt64  `db:"REV_"`
		CREATETIME           sql.NullTime   `db:"CREATE_TIME_"`
		LINKTYPE             sql.NullString `db:"LINK_TYPE_"`
		SCOPEID              sql.NullString `db:"SCOPE_ID_"`
		SCOPETYPE            sql.NullString `db:"SCOPE_TYPE_"`
		SCOPEDEFINITIONID    sql.NullString `db:"SCOPE_DEFINITION_ID_"`
		REFSCOPEID           sql.NullString `db:"REF_SCOPE_ID_"`
		REFSCOPETYPE         sql.NullString `db:"REF_SCOPE_TYPE_"`
		REFSCOPEDEFINITIONID sql.NullString `db:"REF_SCOPE_DEFINITION_ID_"`
		HIERARCHYTYPE        sql.NullString `db:"HIERARCHY_TYPE_"`
		ROOTSCOPEID          sql.NullString `db:"ROOT_SCOPE_ID_"`
		ROOTSCOPETYPE        sql.NullString `db:"ROOT_SCOPE_TYPE_"`
		SUBSCOPEID           sql.NullString `db:"SUB_SCOPE_ID_"`
		PARENTELEMENTID      sql.NullString `db:"PARENT_ELEMENT_ID_"`
	}
)

func newActRuEntitylinkModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultActRuEntitylinkModel {
	return &defaultActRuEntitylinkModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`act_ru_entitylink`",
	}
}

func (m *defaultActRuEntitylinkModel) Insert(ctx context.Context, data *ActRuEntitylink) (sql.Result, error) {
	assetActRuEntitylinkIDKey := fmt.Sprintf("%s%v", cacheAssetActRuEntitylinkIDPrefix, data.ID)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, actRuEntitylinkRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ID, data.REV, data.CREATETIME, data.LINKTYPE, data.SCOPEID, data.SCOPETYPE, data.SCOPEDEFINITIONID, data.REFSCOPEID, data.REFSCOPETYPE, data.REFSCOPEDEFINITIONID, data.HIERARCHYTYPE, data.ROOTSCOPEID, data.ROOTSCOPETYPE, data.SUBSCOPEID, data.PARENTELEMENTID)
	}, assetActRuEntitylinkIDKey)
	return ret, err
}

func (m *defaultActRuEntitylinkModel) FindOne(ctx context.Context, iD string) (*ActRuEntitylink, error) {
	assetActRuEntitylinkIDKey := fmt.Sprintf("%s%v", cacheAssetActRuEntitylinkIDPrefix, iD)
	var resp ActRuEntitylink
	err := m.QueryRowCtx(ctx, &resp, assetActRuEntitylinkIDKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actRuEntitylinkRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, iD)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActRuEntitylinkModel) Update(ctx context.Context, data *ActRuEntitylink) error {
	assetActRuEntitylinkIDKey := fmt.Sprintf("%s%v", cacheAssetActRuEntitylinkIDPrefix, data.ID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `ID_` = ?", m.table, actRuEntitylinkRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.REV, data.CREATETIME, data.LINKTYPE, data.SCOPEID, data.SCOPETYPE, data.SCOPEDEFINITIONID, data.REFSCOPEID, data.REFSCOPETYPE, data.REFSCOPEDEFINITIONID, data.HIERARCHYTYPE, data.ROOTSCOPEID, data.ROOTSCOPETYPE, data.SUBSCOPEID, data.PARENTELEMENTID, data.ID)
	}, assetActRuEntitylinkIDKey)
	return err
}

func (m *defaultActRuEntitylinkModel) Delete(ctx context.Context, iD string) error {
	assetActRuEntitylinkIDKey := fmt.Sprintf("%s%v", cacheAssetActRuEntitylinkIDPrefix, iD)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `ID_` = ?", m.table)
		return conn.ExecCtx(ctx, query, iD)
	}, assetActRuEntitylinkIDKey)
	return err
}

func (m *defaultActRuEntitylinkModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetActRuEntitylinkIDPrefix, primary)
}

func (m *defaultActRuEntitylinkModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actRuEntitylinkRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultActRuEntitylinkModel) tableName() string {
	return m.table
}
