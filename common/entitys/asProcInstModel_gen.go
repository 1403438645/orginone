// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asProcInstFieldNames          = builder.RawFieldNames(&AsProcInst{})
	asProcInstRows                = strings.Join(asProcInstFieldNames, ",")
	asProcInstRowsExpectAutoSet   = strings.Join(stringx.Remove(asProcInstFieldNames, "`create_time`", "`update_time`"), ",")
	asProcInstRowsWithPlaceHolder = strings.Join(stringx.Remove(asProcInstFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsProcInstIdPrefix = "cache:asset:asProcInst:id:"
)

type (
	asProcInstModel interface {
		Insert(ctx context.Context, data *AsProcInst) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*AsProcInst, error)
		Update(ctx context.Context, data *AsProcInst) error
		Delete(ctx context.Context, id string) error
	}

	defaultAsProcInstModel struct {
		sqlc.CachedConn
		table string
	}

	AsProcInst struct {
		Id               string         `db:"id"`
		ProcModelId      sql.NullString `db:"proc_model_id"`
		ProcDefId        sql.NullString `db:"proc_def_id"`
		ProcDeployId     sql.NullString `db:"proc_deploy_id"`
		CommitTime       time.Time      `db:"commit_time"`
		Committer        string         `db:"committer"`
		FormInstAllValue sql.NullString `db:"form_inst_all_value"`
		Status           int64          `db:"status"` // 流程实例状态 0：激活 1：被挂起 2：被删除 3：已完成
		Observers        sql.NullString `db:"observers"`
		Version          sql.NullInt64  `db:"version"`
	}
)

func newAsProcInstModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsProcInstModel {
	return &defaultAsProcInstModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_proc_inst`",
	}
}

func (m *defaultAsProcInstModel) Insert(ctx context.Context, data *AsProcInst) (sql.Result, error) {
	assetAsProcInstIdKey := fmt.Sprintf("%s%v", cacheAssetAsProcInstIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, asProcInstRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.ProcModelId, data.ProcDefId, data.ProcDeployId, data.CommitTime, data.Committer, data.FormInstAllValue, data.Status, data.Observers, data.Version)
	}, assetAsProcInstIdKey)
	return ret, err
}

func (m *defaultAsProcInstModel) FindOne(ctx context.Context, id string) (*AsProcInst, error) {
	assetAsProcInstIdKey := fmt.Sprintf("%s%v", cacheAssetAsProcInstIdPrefix, id)
	var resp AsProcInst
	err := m.QueryRowCtx(ctx, &resp, assetAsProcInstIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asProcInstRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsProcInstModel) Update(ctx context.Context, data *AsProcInst) error {
	assetAsProcInstIdKey := fmt.Sprintf("%s%v", cacheAssetAsProcInstIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asProcInstRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ProcModelId, data.ProcDefId, data.ProcDeployId, data.CommitTime, data.Committer, data.FormInstAllValue, data.Status, data.Observers, data.Version, data.Id)
	}, assetAsProcInstIdKey)
	return err
}

func (m *defaultAsProcInstModel) Delete(ctx context.Context, id string) error {
	assetAsProcInstIdKey := fmt.Sprintf("%s%v", cacheAssetAsProcInstIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsProcInstIdKey)
	return err
}

func (m *defaultAsProcInstModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsProcInstIdPrefix, primary)
}

func (m *defaultAsProcInstModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asProcInstRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsProcInstModel) tableName() string {
	return m.table
}
