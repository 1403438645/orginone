// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	actIdInfoFieldNames          = builder.RawFieldNames(&ActIdInfo{})
	actIdInfoRows                = strings.Join(actIdInfoFieldNames, ",")
	actIdInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(actIdInfoFieldNames, "`create_time`", "`update_time`"), ",")
	actIdInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(actIdInfoFieldNames, "`ID_`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetActIdInfoIDPrefix = "cache:asset:actIdInfo:iD:"
)

type (
	actIdInfoModel interface {
		Insert(ctx context.Context, data *ActIdInfo) (sql.Result, error)
		FindOne(ctx context.Context, iD string) (*ActIdInfo, error)
		Update(ctx context.Context, data *ActIdInfo) error
		Delete(ctx context.Context, iD string) error
	}

	defaultActIdInfoModel struct {
		sqlc.CachedConn
		table string
	}

	ActIdInfo struct {
		ID       string         `db:"ID_"`
		REV      sql.NullInt64  `db:"REV_"`
		USERID   sql.NullString `db:"USER_ID_"`
		TYPE     sql.NullString `db:"TYPE_"`
		KEY      sql.NullString `db:"KEY_"`
		VALUE    sql.NullString `db:"VALUE_"`
		PASSWORD sql.NullString `db:"PASSWORD_"`
		PARENTID sql.NullString `db:"PARENT_ID_"`
	}
)

func newActIdInfoModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultActIdInfoModel {
	return &defaultActIdInfoModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`act_id_info`",
	}
}

func (m *defaultActIdInfoModel) Insert(ctx context.Context, data *ActIdInfo) (sql.Result, error) {
	assetActIdInfoIDKey := fmt.Sprintf("%s%v", cacheAssetActIdInfoIDPrefix, data.ID)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, actIdInfoRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ID, data.REV, data.USERID, data.TYPE, data.KEY, data.VALUE, data.PASSWORD, data.PARENTID)
	}, assetActIdInfoIDKey)
	return ret, err
}

func (m *defaultActIdInfoModel) FindOne(ctx context.Context, iD string) (*ActIdInfo, error) {
	assetActIdInfoIDKey := fmt.Sprintf("%s%v", cacheAssetActIdInfoIDPrefix, iD)
	var resp ActIdInfo
	err := m.QueryRowCtx(ctx, &resp, assetActIdInfoIDKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actIdInfoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, iD)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActIdInfoModel) Update(ctx context.Context, data *ActIdInfo) error {
	assetActIdInfoIDKey := fmt.Sprintf("%s%v", cacheAssetActIdInfoIDPrefix, data.ID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `ID_` = ?", m.table, actIdInfoRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.REV, data.USERID, data.TYPE, data.KEY, data.VALUE, data.PASSWORD, data.PARENTID, data.ID)
	}, assetActIdInfoIDKey)
	return err
}

func (m *defaultActIdInfoModel) Delete(ctx context.Context, iD string) error {
	assetActIdInfoIDKey := fmt.Sprintf("%s%v", cacheAssetActIdInfoIDPrefix, iD)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `ID_` = ?", m.table)
		return conn.ExecCtx(ctx, query, iD)
	}, assetActIdInfoIDKey)
	return err
}

func (m *defaultActIdInfoModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetActIdInfoIDPrefix, primary)
}

func (m *defaultActIdInfoModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actIdInfoRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultActIdInfoModel) tableName() string {
	return m.table
}
