// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asUnitsRelationFieldNames          = builder.RawFieldNames(&AsUnitsRelation{})
	asUnitsRelationRows                = strings.Join(asUnitsRelationFieldNames, ",")
	asUnitsRelationRowsExpectAutoSet   = strings.Join(stringx.Remove(asUnitsRelationFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	asUnitsRelationRowsWithPlaceHolder = strings.Join(stringx.Remove(asUnitsRelationFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsUnitsRelationIdPrefix = "cache:asset:asUnitsRelation:id:"
)

type (
	asUnitsRelationModel interface {
		Insert(ctx context.Context, data *AsUnitsRelation) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AsUnitsRelation, error)
		Update(ctx context.Context, data *AsUnitsRelation) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAsUnitsRelationModel struct {
		sqlc.CachedConn
		table string
	}

	AsUnitsRelation struct {
		SourceId    int64         `db:"source_id"`    // 源单位节点
		TargetId    int64         `db:"target_id"`    // 目标单位节点
		CreateTime  time.Time     `db:"create_time"`  // 生效时间
		Tp          int64         `db:"tp"`           // 边的类型（关联枚举字典）
		ExpiresTime sql.NullTime  `db:"expires_time"` // 失效时间
		GroupId     sql.NullInt64 `db:"group_id"`     // 集团id
		CreateUser  sql.NullInt64 `db:"create_user"`
		UpdateUser  sql.NullInt64 `db:"update_user"`
		UpdateTime  sql.NullTime  `db:"update_time"`
		IsDeleted   int64         `db:"is_deleted"`
		Status      int64         `db:"status"` // 0-不可用； 1-可用；101-审核中；102激活中；103-全部的
		Id          int64         `db:"id"`
	}
)

func newAsUnitsRelationModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsUnitsRelationModel {
	return &defaultAsUnitsRelationModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_units_relation`",
	}
}

func (m *defaultAsUnitsRelationModel) Insert(ctx context.Context, data *AsUnitsRelation) (sql.Result, error) {
	assetAsUnitsRelationIdKey := fmt.Sprintf("%s%v", cacheAssetAsUnitsRelationIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, asUnitsRelationRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.SourceId, data.TargetId, data.Tp, data.ExpiresTime, data.GroupId, data.CreateUser, data.UpdateUser, data.IsDeleted, data.Status)
	}, assetAsUnitsRelationIdKey)
	return ret, err
}

func (m *defaultAsUnitsRelationModel) FindOne(ctx context.Context, id int64) (*AsUnitsRelation, error) {
	assetAsUnitsRelationIdKey := fmt.Sprintf("%s%v", cacheAssetAsUnitsRelationIdPrefix, id)
	var resp AsUnitsRelation
	err := m.QueryRowCtx(ctx, &resp, assetAsUnitsRelationIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asUnitsRelationRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsUnitsRelationModel) Update(ctx context.Context, data *AsUnitsRelation) error {
	assetAsUnitsRelationIdKey := fmt.Sprintf("%s%v", cacheAssetAsUnitsRelationIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asUnitsRelationRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.SourceId, data.TargetId, data.Tp, data.ExpiresTime, data.GroupId, data.CreateUser, data.UpdateUser, data.IsDeleted, data.Status, data.Id)
	}, assetAsUnitsRelationIdKey)
	return err
}

func (m *defaultAsUnitsRelationModel) Delete(ctx context.Context, id int64) error {
	assetAsUnitsRelationIdKey := fmt.Sprintf("%s%v", cacheAssetAsUnitsRelationIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsUnitsRelationIdKey)
	return err
}

func (m *defaultAsUnitsRelationModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsUnitsRelationIdPrefix, primary)
}

func (m *defaultAsUnitsRelationModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asUnitsRelationRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsUnitsRelationModel) tableName() string {
	return m.table
}
