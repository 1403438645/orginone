// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	actCmmnDeploymentResourceFieldNames          = builder.RawFieldNames(&ActCmmnDeploymentResource{})
	actCmmnDeploymentResourceRows                = strings.Join(actCmmnDeploymentResourceFieldNames, ",")
	actCmmnDeploymentResourceRowsExpectAutoSet   = strings.Join(stringx.Remove(actCmmnDeploymentResourceFieldNames, "`create_time`", "`update_time`"), ",")
	actCmmnDeploymentResourceRowsWithPlaceHolder = strings.Join(stringx.Remove(actCmmnDeploymentResourceFieldNames, "`ID_`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetActCmmnDeploymentResourceIDPrefix = "cache:asset:actCmmnDeploymentResource:iD:"
)

type (
	actCmmnDeploymentResourceModel interface {
		Insert(ctx context.Context, data *ActCmmnDeploymentResource) (sql.Result, error)
		FindOne(ctx context.Context, iD string) (*ActCmmnDeploymentResource, error)
		Update(ctx context.Context, data *ActCmmnDeploymentResource) error
		Delete(ctx context.Context, iD string) error
	}

	defaultActCmmnDeploymentResourceModel struct {
		sqlc.CachedConn
		table string
	}

	ActCmmnDeploymentResource struct {
		ID            string         `db:"ID_"`
		NAME          sql.NullString `db:"NAME_"`
		DEPLOYMENTID  sql.NullString `db:"DEPLOYMENT_ID_"`
		RESOURCEBYTES sql.NullString `db:"RESOURCE_BYTES_"`
		GENERATED     byte           `db:"GENERATED_"`
	}
)

func newActCmmnDeploymentResourceModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultActCmmnDeploymentResourceModel {
	return &defaultActCmmnDeploymentResourceModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`act_cmmn_deployment_resource`",
	}
}

func (m *defaultActCmmnDeploymentResourceModel) Insert(ctx context.Context, data *ActCmmnDeploymentResource) (sql.Result, error) {
	assetActCmmnDeploymentResourceIDKey := fmt.Sprintf("%s%v", cacheAssetActCmmnDeploymentResourceIDPrefix, data.ID)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, actCmmnDeploymentResourceRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ID, data.NAME, data.DEPLOYMENTID, data.RESOURCEBYTES, data.GENERATED)
	}, assetActCmmnDeploymentResourceIDKey)
	return ret, err
}

func (m *defaultActCmmnDeploymentResourceModel) FindOne(ctx context.Context, iD string) (*ActCmmnDeploymentResource, error) {
	assetActCmmnDeploymentResourceIDKey := fmt.Sprintf("%s%v", cacheAssetActCmmnDeploymentResourceIDPrefix, iD)
	var resp ActCmmnDeploymentResource
	err := m.QueryRowCtx(ctx, &resp, assetActCmmnDeploymentResourceIDKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actCmmnDeploymentResourceRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, iD)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActCmmnDeploymentResourceModel) Update(ctx context.Context, data *ActCmmnDeploymentResource) error {
	assetActCmmnDeploymentResourceIDKey := fmt.Sprintf("%s%v", cacheAssetActCmmnDeploymentResourceIDPrefix, data.ID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `ID_` = ?", m.table, actCmmnDeploymentResourceRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.NAME, data.DEPLOYMENTID, data.RESOURCEBYTES, data.GENERATED, data.ID)
	}, assetActCmmnDeploymentResourceIDKey)
	return err
}

func (m *defaultActCmmnDeploymentResourceModel) Delete(ctx context.Context, iD string) error {
	assetActCmmnDeploymentResourceIDKey := fmt.Sprintf("%s%v", cacheAssetActCmmnDeploymentResourceIDPrefix, iD)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `ID_` = ?", m.table)
		return conn.ExecCtx(ctx, query, iD)
	}, assetActCmmnDeploymentResourceIDKey)
	return err
}

func (m *defaultActCmmnDeploymentResourceModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetActCmmnDeploymentResourceIDPrefix, primary)
}

func (m *defaultActCmmnDeploymentResourceModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actCmmnDeploymentResourceRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultActCmmnDeploymentResourceModel) tableName() string {
	return m.table
}
