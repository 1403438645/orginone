// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asTempletDeModelFieldNames          = builder.RawFieldNames(&AsTempletDeModel{})
	asTempletDeModelRows                = strings.Join(asTempletDeModelFieldNames, ",")
	asTempletDeModelRowsExpectAutoSet   = strings.Join(stringx.Remove(asTempletDeModelFieldNames, "`create_time`", "`update_time`"), ",")
	asTempletDeModelRowsWithPlaceHolder = strings.Join(stringx.Remove(asTempletDeModelFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsTempletDeModelIdPrefix = "cache:asset:asTempletDeModel:id:"
)

type (
	asTempletDeModelModel interface {
		Insert(ctx context.Context, data *AsTempletDeModel) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*AsTempletDeModel, error)
		Update(ctx context.Context, data *AsTempletDeModel) error
		Delete(ctx context.Context, id string) error
	}

	defaultAsTempletDeModelModel struct {
		sqlc.CachedConn
		table string
	}

	AsTempletDeModel struct {
		Id              string         `db:"id"` // 流程模型模板的Id
		Name            string         `db:"name"`
		ModelKey        string         `db:"model_key"`
		Description     sql.NullString `db:"description"`
		ModelComment    sql.NullString `db:"model_comment"`
		ModelEditorJson string         `db:"model_editor_json"`
		Thumbnail       sql.NullString `db:"thumbnail"`
		ModelType       int64          `db:"model_type"`
		TenantId        sql.NullString `db:"tenant_id"`
		NodeNum         int64          `db:"node_num"`
		SeqCondition    string         `db:"seq_condition"`
	}
)

func newAsTempletDeModelModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsTempletDeModelModel {
	return &defaultAsTempletDeModelModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_templet_de_model`",
	}
}

func (m *defaultAsTempletDeModelModel) Insert(ctx context.Context, data *AsTempletDeModel) (sql.Result, error) {
	assetAsTempletDeModelIdKey := fmt.Sprintf("%s%v", cacheAssetAsTempletDeModelIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, asTempletDeModelRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.Name, data.ModelKey, data.Description, data.ModelComment, data.ModelEditorJson, data.Thumbnail, data.ModelType, data.TenantId, data.NodeNum, data.SeqCondition)
	}, assetAsTempletDeModelIdKey)
	return ret, err
}

func (m *defaultAsTempletDeModelModel) FindOne(ctx context.Context, id string) (*AsTempletDeModel, error) {
	assetAsTempletDeModelIdKey := fmt.Sprintf("%s%v", cacheAssetAsTempletDeModelIdPrefix, id)
	var resp AsTempletDeModel
	err := m.QueryRowCtx(ctx, &resp, assetAsTempletDeModelIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asTempletDeModelRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsTempletDeModelModel) Update(ctx context.Context, data *AsTempletDeModel) error {
	assetAsTempletDeModelIdKey := fmt.Sprintf("%s%v", cacheAssetAsTempletDeModelIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asTempletDeModelRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.ModelKey, data.Description, data.ModelComment, data.ModelEditorJson, data.Thumbnail, data.ModelType, data.TenantId, data.NodeNum, data.SeqCondition, data.Id)
	}, assetAsTempletDeModelIdKey)
	return err
}

func (m *defaultAsTempletDeModelModel) Delete(ctx context.Context, id string) error {
	assetAsTempletDeModelIdKey := fmt.Sprintf("%s%v", cacheAssetAsTempletDeModelIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsTempletDeModelIdKey)
	return err
}

func (m *defaultAsTempletDeModelModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsTempletDeModelIdPrefix, primary)
}

func (m *defaultAsTempletDeModelModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asTempletDeModelRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsTempletDeModelModel) tableName() string {
	return m.table
}
