// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asUserJobFieldNames          = builder.RawFieldNames(&AsUserJob{})
	asUserJobRows                = strings.Join(asUserJobFieldNames, ",")
	asUserJobRowsExpectAutoSet   = strings.Join(stringx.Remove(asUserJobFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	asUserJobRowsWithPlaceHolder = strings.Join(stringx.Remove(asUserJobFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsUserJobIdPrefix = "cache:asset:asUserJob:id:"
)

type (
	asUserJobModel interface {
		Insert(ctx context.Context, data *AsUserJob) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AsUserJob, error)
		Update(ctx context.Context, data *AsUserJob) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAsUserJobModel struct {
		sqlc.CachedConn
		table string
	}

	AsUserJob struct {
		JobId  int64 `db:"job_id"`  // 岗位id
		UserId int64 `db:"user_id"` // 用户id
		Id     int64 `db:"id"`
	}
)

func newAsUserJobModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsUserJobModel {
	return &defaultAsUserJobModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_user_job`",
	}
}

func (m *defaultAsUserJobModel) Insert(ctx context.Context, data *AsUserJob) (sql.Result, error) {
	assetAsUserJobIdKey := fmt.Sprintf("%s%v", cacheAssetAsUserJobIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, asUserJobRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.JobId, data.UserId)
	}, assetAsUserJobIdKey)
	return ret, err
}

func (m *defaultAsUserJobModel) FindOne(ctx context.Context, id int64) (*AsUserJob, error) {
	assetAsUserJobIdKey := fmt.Sprintf("%s%v", cacheAssetAsUserJobIdPrefix, id)
	var resp AsUserJob
	err := m.QueryRowCtx(ctx, &resp, assetAsUserJobIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asUserJobRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsUserJobModel) Update(ctx context.Context, data *AsUserJob) error {
	assetAsUserJobIdKey := fmt.Sprintf("%s%v", cacheAssetAsUserJobIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asUserJobRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.JobId, data.UserId, data.Id)
	}, assetAsUserJobIdKey)
	return err
}

func (m *defaultAsUserJobModel) Delete(ctx context.Context, id int64) error {
	assetAsUserJobIdKey := fmt.Sprintf("%s%v", cacheAssetAsUserJobIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsUserJobIdKey)
	return err
}

func (m *defaultAsUserJobModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsUserJobIdPrefix, primary)
}

func (m *defaultAsUserJobModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asUserJobRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsUserJobModel) tableName() string {
	return m.table
}
