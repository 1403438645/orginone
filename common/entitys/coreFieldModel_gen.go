// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	coreFieldFieldNames          = builder.RawFieldNames(&CoreField{})
	coreFieldRows                = strings.Join(coreFieldFieldNames, ",")
	coreFieldRowsExpectAutoSet   = strings.Join(stringx.Remove(coreFieldFieldNames, "`create_time`", "`update_time`"), ",")
	coreFieldRowsWithPlaceHolder = strings.Join(stringx.Remove(coreFieldFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetCoreFieldIdPrefix = "cache:asset:coreField:id:"
)

type (
	coreFieldModel interface {
		Insert(ctx context.Context, data *CoreField) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*CoreField, error)
		Update(ctx context.Context, data *CoreField) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCoreFieldModel struct {
		sqlc.CachedConn
		table string
	}

	CoreField struct {
		Id           int64          `db:"id"`
		NAME         sql.NullString `db:"NAME"`
		TITLE        sql.NullString `db:"TITLE"`
		Datatype     sql.NullString `db:"datatype"`
		MtCode       sql.NullString `db:"mt_code"`
		Length       sql.NullInt64  `db:"length"`
		Precision    sql.NullInt64  `db:"precision_"`
		DictIdentfy  sql.NullString `db:"dict_identfy"` // 枚举字典对应
		TOrder       sql.NullString `db:"t_order"`
		PVersion     sql.NullInt64  `db:"p_version"`
		PDataversion sql.NullInt64  `db:"p_dataversion"`
		Modifytime   sql.NullTime   `db:"modifytime"`
		Modifyuser   sql.NullString `db:"modifyuser"`
		Createtime   sql.NullTime   `db:"createtime"`
		Createuser   sql.NullString `db:"createuser"`
		Mastertable  sql.NullString `db:"mastertable"`
	}
)

func newCoreFieldModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultCoreFieldModel {
	return &defaultCoreFieldModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`core_field`",
	}
}

func (m *defaultCoreFieldModel) Insert(ctx context.Context, data *CoreField) (sql.Result, error) {
	assetCoreFieldIdKey := fmt.Sprintf("%s%v", cacheAssetCoreFieldIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, coreFieldRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.NAME, data.TITLE, data.Datatype, data.MtCode, data.Length, data.Precision, data.DictIdentfy, data.TOrder, data.PVersion, data.PDataversion, data.Modifytime, data.Modifyuser, data.Createtime, data.Createuser, data.Mastertable)
	}, assetCoreFieldIdKey)
	return ret, err
}

func (m *defaultCoreFieldModel) FindOne(ctx context.Context, id int64) (*CoreField, error) {
	assetCoreFieldIdKey := fmt.Sprintf("%s%v", cacheAssetCoreFieldIdPrefix, id)
	var resp CoreField
	err := m.QueryRowCtx(ctx, &resp, assetCoreFieldIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", coreFieldRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCoreFieldModel) Update(ctx context.Context, data *CoreField) error {
	assetCoreFieldIdKey := fmt.Sprintf("%s%v", cacheAssetCoreFieldIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, coreFieldRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.NAME, data.TITLE, data.Datatype, data.MtCode, data.Length, data.Precision, data.DictIdentfy, data.TOrder, data.PVersion, data.PDataversion, data.Modifytime, data.Modifyuser, data.Createtime, data.Createuser, data.Mastertable, data.Id)
	}, assetCoreFieldIdKey)
	return err
}

func (m *defaultCoreFieldModel) Delete(ctx context.Context, id int64) error {
	assetCoreFieldIdKey := fmt.Sprintf("%s%v", cacheAssetCoreFieldIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetCoreFieldIdKey)
	return err
}

func (m *defaultCoreFieldModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetCoreFieldIdPrefix, primary)
}

func (m *defaultCoreFieldModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", coreFieldRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultCoreFieldModel) tableName() string {
	return m.table
}
