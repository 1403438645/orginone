// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asUserFormFieldNames          = builder.RawFieldNames(&AsUserForm{})
	asUserFormRows                = strings.Join(asUserFormFieldNames, ",")
	asUserFormRowsExpectAutoSet   = strings.Join(stringx.Remove(asUserFormFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	asUserFormRowsWithPlaceHolder = strings.Join(stringx.Remove(asUserFormFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsUserFormIdPrefix = "cache:asset:asUserForm:id:"
)

type (
	asUserFormModel interface {
		Insert(ctx context.Context, data *AsUserForm) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AsUserForm, error)
		Update(ctx context.Context, data *AsUserForm) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAsUserFormModel struct {
		sqlc.CachedConn
		table string
	}

	AsUserForm struct {
		FormId     string `db:"form_id"`     // 表单ID
		UserId     int64  `db:"user_id"`     // 用户ID
		TenantCode string `db:"tenant_code"` // 租户编码
		Id         int64  `db:"id"`
	}
)

func newAsUserFormModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsUserFormModel {
	return &defaultAsUserFormModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_user_form`",
	}
}

func (m *defaultAsUserFormModel) Insert(ctx context.Context, data *AsUserForm) (sql.Result, error) {
	assetAsUserFormIdKey := fmt.Sprintf("%s%v", cacheAssetAsUserFormIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, asUserFormRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.FormId, data.UserId, data.TenantCode)
	}, assetAsUserFormIdKey)
	return ret, err
}

func (m *defaultAsUserFormModel) FindOne(ctx context.Context, id int64) (*AsUserForm, error) {
	assetAsUserFormIdKey := fmt.Sprintf("%s%v", cacheAssetAsUserFormIdPrefix, id)
	var resp AsUserForm
	err := m.QueryRowCtx(ctx, &resp, assetAsUserFormIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asUserFormRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsUserFormModel) Update(ctx context.Context, data *AsUserForm) error {
	assetAsUserFormIdKey := fmt.Sprintf("%s%v", cacheAssetAsUserFormIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asUserFormRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.FormId, data.UserId, data.TenantCode, data.Id)
	}, assetAsUserFormIdKey)
	return err
}

func (m *defaultAsUserFormModel) Delete(ctx context.Context, id int64) error {
	assetAsUserFormIdKey := fmt.Sprintf("%s%v", cacheAssetAsUserFormIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsUserFormIdKey)
	return err
}

func (m *defaultAsUserFormModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsUserFormIdPrefix, primary)
}

func (m *defaultAsUserFormModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asUserFormRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsUserFormModel) tableName() string {
	return m.table
}
