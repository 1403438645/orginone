// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	corePortalcontainFieldNames          = builder.RawFieldNames(&CorePortalcontain{})
	corePortalcontainRows                = strings.Join(corePortalcontainFieldNames, ",")
	corePortalcontainRowsExpectAutoSet   = strings.Join(stringx.Remove(corePortalcontainFieldNames, "`create_time`", "`update_time`"), ",")
	corePortalcontainRowsWithPlaceHolder = strings.Join(stringx.Remove(corePortalcontainFieldNames, "`recid`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetCorePortalcontainRecidPrefix = "cache:asset:corePortalcontain:recid:"
)

type (
	corePortalcontainModel interface {
		Insert(ctx context.Context, data *CorePortalcontain) (sql.Result, error)
		FindOne(ctx context.Context, recid int64) (*CorePortalcontain, error)
		Update(ctx context.Context, data *CorePortalcontain) error
		Delete(ctx context.Context, recid int64) error
	}

	defaultCorePortalcontainModel struct {
		sqlc.CachedConn
		table string
	}

	CorePortalcontain struct {
		Recid        int64           `db:"recid"`
		PortalId     sql.NullInt64   `db:"portal_id"`
		ContainName  sql.NullString  `db:"contain_name"`
		Width        sql.NullInt64   `db:"width"`
		Height       sql.NullFloat64 `db:"height"`
		ContainLink  sql.NullString  `db:"contain_link"`
		RelateWidth  sql.NullInt64   `db:"relate_width"`
		RelateHeight sql.NullFloat64 `db:"relate_height"`
		ContainType  sql.NullInt64   `db:"contain_type"`
	}
)

func newCorePortalcontainModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultCorePortalcontainModel {
	return &defaultCorePortalcontainModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`core_portalcontain`",
	}
}

func (m *defaultCorePortalcontainModel) Insert(ctx context.Context, data *CorePortalcontain) (sql.Result, error) {
	assetCorePortalcontainRecidKey := fmt.Sprintf("%s%v", cacheAssetCorePortalcontainRecidPrefix, data.Recid)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, corePortalcontainRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Recid, data.PortalId, data.ContainName, data.Width, data.Height, data.ContainLink, data.RelateWidth, data.RelateHeight, data.ContainType)
	}, assetCorePortalcontainRecidKey)
	return ret, err
}

func (m *defaultCorePortalcontainModel) FindOne(ctx context.Context, recid int64) (*CorePortalcontain, error) {
	assetCorePortalcontainRecidKey := fmt.Sprintf("%s%v", cacheAssetCorePortalcontainRecidPrefix, recid)
	var resp CorePortalcontain
	err := m.QueryRowCtx(ctx, &resp, assetCorePortalcontainRecidKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `recid` = ? limit 1", corePortalcontainRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, recid)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCorePortalcontainModel) Update(ctx context.Context, data *CorePortalcontain) error {
	assetCorePortalcontainRecidKey := fmt.Sprintf("%s%v", cacheAssetCorePortalcontainRecidPrefix, data.Recid)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `recid` = ?", m.table, corePortalcontainRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.PortalId, data.ContainName, data.Width, data.Height, data.ContainLink, data.RelateWidth, data.RelateHeight, data.ContainType, data.Recid)
	}, assetCorePortalcontainRecidKey)
	return err
}

func (m *defaultCorePortalcontainModel) Delete(ctx context.Context, recid int64) error {
	assetCorePortalcontainRecidKey := fmt.Sprintf("%s%v", cacheAssetCorePortalcontainRecidPrefix, recid)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `recid` = ?", m.table)
		return conn.ExecCtx(ctx, query, recid)
	}, assetCorePortalcontainRecidKey)
	return err
}

func (m *defaultCorePortalcontainModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetCorePortalcontainRecidPrefix, primary)
}

func (m *defaultCorePortalcontainModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `recid` = ? limit 1", corePortalcontainRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultCorePortalcontainModel) tableName() string {
	return m.table
}
