// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asMarketAppFieldNames          = builder.RawFieldNames(&AsMarketApp{})
	asMarketAppRows                = strings.Join(asMarketAppFieldNames, ",")
	asMarketAppRowsExpectAutoSet   = strings.Join(stringx.Remove(asMarketAppFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	asMarketAppRowsWithPlaceHolder = strings.Join(stringx.Remove(asMarketAppFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsMarketAppIdPrefix = "cache:asset:asMarketApp:id:"
)

type (
	asMarketAppModel interface {
		Insert(ctx context.Context, data *AsMarketApp) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AsMarketApp, error)
		Update(ctx context.Context, data *AsMarketApp) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAsMarketAppModel struct {
		sqlc.CachedConn
		table string
	}

	AsMarketApp struct {
		Id               int64          `db:"id"`                 // 主键
		AppName          sql.NullString `db:"app_name"`           // 应用名称
		Icon             sql.NullString `db:"icon"`               // 应用图标
		Version          sql.NullString `db:"version"`            // 应用版本
		Contact          sql.NullString `db:"contact"`            // 负责人联系方式
		ContactName      sql.NullString `db:"contact_name"`       // 负责人姓名
		Description      sql.NullString `db:"description"`        // 应用描述
		File             sql.NullString `db:"file"`               // 部署文件
		SaleStatus       sql.NullInt64  `db:"sale_status"`        // 上下架状态：0-下架，1-上架
		TenantId         sql.NullString `db:"tenant_id"`          // 上传应用租户ID
		Platform         sql.NullInt64  `db:"platform"`           // 适配平台：1-pc，2-移动端，3-自适应
		TargetUser       sql.NullInt64  `db:"target_user"`        // 目标用户：1-个人，2-单位，3-集团
		Status           sql.NullInt64  `db:"status"`             // 审核状态：0-注册申请，1-注册通过，2-注册拒绝，3-部署申请，4-部署通过，5-部署拒绝，6-发布申请，7-发布通过，8-发布拒绝
		DeployStatus     sql.NullInt64  `db:"deploy_status"`      // 部署状态：0-未部署，1-部署中，2-已部署
		DeployAddress    sql.NullString `db:"deploy_address"`     // 部署地址
		DeployType       sql.NullInt64  `db:"deploy_type"`        // 部署方式：0-集成部署，1-独立部署
		PublishTime      sql.NullTime   `db:"publish_time"`       // 发布时间
		CreateUser       sql.NullInt64  `db:"create_user"`        // 创建人
		CreateTime       sql.NullTime   `db:"create_time"`        // 创建时间
		UpdateUser       sql.NullInt64  `db:"update_user"`        // 修改人
		UpdateTime       sql.NullTime   `db:"update_time"`        // 修改时间
		IsDeleted        sql.NullInt64  `db:"is_deleted"`         // 是否已删除
		AppType          sql.NullInt64  `db:"app_type"`           // 应用类型
		ApplyTime        sql.NullTime   `db:"apply_time"`         // 申请时间
		AppAddress       sql.NullString `db:"app_address"`        // 应用地址
		AppMail          sql.NullString `db:"app_mail"`           // 应用邮箱
		AppPhoto         sql.NullString `db:"app_photo"`          // 应用照片
		AppField         sql.NullInt64  `db:"app_field"`          // 应用领域：13-党政智治、145-数字政府、37-数字社会、57-数字经济、58-数字法制
		AppCategory      sql.NullInt64  `db:"app_category"`       // 应用分类：1-IaaS应用、2-PaaS应用、3-DaaS应用、5-SaaS应用
		AppProjectSource sql.NullInt64  `db:"app_project_source"` // 项目来源：1-正常立项、2-揭榜挂帅、3-自主建设
		AppStar          int64          `db:"app_star"`           // 观星台：1-是、0否
		AppFoundsSource  sql.NullInt64  `db:"app_founds_source"`  // 资金来源：1-预算内、2-预算暂存、3-财政专户、4-其他资金、5-财政暂存、6-社保资金、7-专项资金
		InnerUrl         sql.NullString `db:"inner_url"`          // 内网url
		OutUrl           sql.NullString `db:"out_url"`            // 外网url
		ReformStatus     int64          `db:"reform_status"`      // 整改状态：0-已认证，1-整改中
		OutIpUrl         sql.NullString `db:"out_ip_url"`         // 外网IPurl
	}
)

func newAsMarketAppModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsMarketAppModel {
	return &defaultAsMarketAppModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_market_app`",
	}
}

func (m *defaultAsMarketAppModel) Insert(ctx context.Context, data *AsMarketApp) (sql.Result, error) {
	assetAsMarketAppIdKey := fmt.Sprintf("%s%v", cacheAssetAsMarketAppIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, asMarketAppRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.AppName, data.Icon, data.Version, data.Contact, data.ContactName, data.Description, data.File, data.SaleStatus, data.TenantId, data.Platform, data.TargetUser, data.Status, data.DeployStatus, data.DeployAddress, data.DeployType, data.PublishTime, data.CreateUser, data.UpdateUser, data.IsDeleted, data.AppType, data.ApplyTime, data.AppAddress, data.AppMail, data.AppPhoto, data.AppField, data.AppCategory, data.AppProjectSource, data.AppStar, data.AppFoundsSource, data.InnerUrl, data.OutUrl, data.ReformStatus, data.OutIpUrl)
	}, assetAsMarketAppIdKey)
	return ret, err
}

func (m *defaultAsMarketAppModel) FindOne(ctx context.Context, id int64) (*AsMarketApp, error) {
	assetAsMarketAppIdKey := fmt.Sprintf("%s%v", cacheAssetAsMarketAppIdPrefix, id)
	var resp AsMarketApp
	err := m.QueryRowCtx(ctx, &resp, assetAsMarketAppIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asMarketAppRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsMarketAppModel) Update(ctx context.Context, data *AsMarketApp) error {
	assetAsMarketAppIdKey := fmt.Sprintf("%s%v", cacheAssetAsMarketAppIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asMarketAppRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.AppName, data.Icon, data.Version, data.Contact, data.ContactName, data.Description, data.File, data.SaleStatus, data.TenantId, data.Platform, data.TargetUser, data.Status, data.DeployStatus, data.DeployAddress, data.DeployType, data.PublishTime, data.CreateUser, data.UpdateUser, data.IsDeleted, data.AppType, data.ApplyTime, data.AppAddress, data.AppMail, data.AppPhoto, data.AppField, data.AppCategory, data.AppProjectSource, data.AppStar, data.AppFoundsSource, data.InnerUrl, data.OutUrl, data.ReformStatus, data.OutIpUrl, data.Id)
	}, assetAsMarketAppIdKey)
	return err
}

func (m *defaultAsMarketAppModel) Delete(ctx context.Context, id int64) error {
	assetAsMarketAppIdKey := fmt.Sprintf("%s%v", cacheAssetAsMarketAppIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsMarketAppIdKey)
	return err
}

func (m *defaultAsMarketAppModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsMarketAppIdPrefix, primary)
}

func (m *defaultAsMarketAppModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asMarketAppRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsMarketAppModel) tableName() string {
	return m.table
}
