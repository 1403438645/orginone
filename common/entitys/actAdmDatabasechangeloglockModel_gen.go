// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	actAdmDatabasechangeloglockFieldNames          = builder.RawFieldNames(&ActAdmDatabasechangeloglock{})
	actAdmDatabasechangeloglockRows                = strings.Join(actAdmDatabasechangeloglockFieldNames, ",")
	actAdmDatabasechangeloglockRowsExpectAutoSet   = strings.Join(stringx.Remove(actAdmDatabasechangeloglockFieldNames, "`create_time`", "`update_time`"), ",")
	actAdmDatabasechangeloglockRowsWithPlaceHolder = strings.Join(stringx.Remove(actAdmDatabasechangeloglockFieldNames, "`ID`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetActAdmDatabasechangeloglockIDPrefix = "cache:asset:actAdmDatabasechangeloglock:iD:"
)

type (
	actAdmDatabasechangeloglockModel interface {
		Insert(ctx context.Context, data *ActAdmDatabasechangeloglock) (sql.Result, error)
		FindOne(ctx context.Context, iD int64) (*ActAdmDatabasechangeloglock, error)
		Update(ctx context.Context, data *ActAdmDatabasechangeloglock) error
		Delete(ctx context.Context, iD int64) error
	}

	defaultActAdmDatabasechangeloglockModel struct {
		sqlc.CachedConn
		table string
	}

	ActAdmDatabasechangeloglock struct {
		ID          int64          `db:"ID"`
		LOCKED      byte           `db:"LOCKED"`
		LOCKGRANTED sql.NullTime   `db:"LOCKGRANTED"`
		LOCKEDBY    sql.NullString `db:"LOCKEDBY"`
	}
)

func newActAdmDatabasechangeloglockModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultActAdmDatabasechangeloglockModel {
	return &defaultActAdmDatabasechangeloglockModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`act_adm_databasechangeloglock`",
	}
}

func (m *defaultActAdmDatabasechangeloglockModel) Insert(ctx context.Context, data *ActAdmDatabasechangeloglock) (sql.Result, error) {
	assetActAdmDatabasechangeloglockIDKey := fmt.Sprintf("%s%v", cacheAssetActAdmDatabasechangeloglockIDPrefix, data.ID)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, actAdmDatabasechangeloglockRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ID, data.LOCKED, data.LOCKGRANTED, data.LOCKEDBY)
	}, assetActAdmDatabasechangeloglockIDKey)
	return ret, err
}

func (m *defaultActAdmDatabasechangeloglockModel) FindOne(ctx context.Context, iD int64) (*ActAdmDatabasechangeloglock, error) {
	assetActAdmDatabasechangeloglockIDKey := fmt.Sprintf("%s%v", cacheAssetActAdmDatabasechangeloglockIDPrefix, iD)
	var resp ActAdmDatabasechangeloglock
	err := m.QueryRowCtx(ctx, &resp, assetActAdmDatabasechangeloglockIDKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `ID` = ? limit 1", actAdmDatabasechangeloglockRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, iD)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActAdmDatabasechangeloglockModel) Update(ctx context.Context, data *ActAdmDatabasechangeloglock) error {
	assetActAdmDatabasechangeloglockIDKey := fmt.Sprintf("%s%v", cacheAssetActAdmDatabasechangeloglockIDPrefix, data.ID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `ID` = ?", m.table, actAdmDatabasechangeloglockRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.LOCKED, data.LOCKGRANTED, data.LOCKEDBY, data.ID)
	}, assetActAdmDatabasechangeloglockIDKey)
	return err
}

func (m *defaultActAdmDatabasechangeloglockModel) Delete(ctx context.Context, iD int64) error {
	assetActAdmDatabasechangeloglockIDKey := fmt.Sprintf("%s%v", cacheAssetActAdmDatabasechangeloglockIDPrefix, iD)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `ID` = ?", m.table)
		return conn.ExecCtx(ctx, query, iD)
	}, assetActAdmDatabasechangeloglockIDKey)
	return err
}

func (m *defaultActAdmDatabasechangeloglockModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetActAdmDatabasechangeloglockIDPrefix, primary)
}

func (m *defaultActAdmDatabasechangeloglockModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `ID` = ? limit 1", actAdmDatabasechangeloglockRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultActAdmDatabasechangeloglockModel) tableName() string {
	return m.table
}
