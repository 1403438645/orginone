// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	actCmmnHiPlanItemInstFieldNames          = builder.RawFieldNames(&ActCmmnHiPlanItemInst{})
	actCmmnHiPlanItemInstRows                = strings.Join(actCmmnHiPlanItemInstFieldNames, ",")
	actCmmnHiPlanItemInstRowsExpectAutoSet   = strings.Join(stringx.Remove(actCmmnHiPlanItemInstFieldNames, "`create_time`", "`update_time`"), ",")
	actCmmnHiPlanItemInstRowsWithPlaceHolder = strings.Join(stringx.Remove(actCmmnHiPlanItemInstFieldNames, "`ID_`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetActCmmnHiPlanItemInstIDPrefix = "cache:asset:actCmmnHiPlanItemInst:iD:"
)

type (
	actCmmnHiPlanItemInstModel interface {
		Insert(ctx context.Context, data *ActCmmnHiPlanItemInst) (sql.Result, error)
		FindOne(ctx context.Context, iD string) (*ActCmmnHiPlanItemInst, error)
		Update(ctx context.Context, data *ActCmmnHiPlanItemInst) error
		Delete(ctx context.Context, iD string) error
	}

	defaultActCmmnHiPlanItemInstModel struct {
		sqlc.CachedConn
		table string
	}

	ActCmmnHiPlanItemInst struct {
		ID                 string         `db:"ID_"`
		REV                int64          `db:"REV_"`
		NAME               sql.NullString `db:"NAME_"`
		STATE              sql.NullString `db:"STATE_"`
		CASEDEFID          sql.NullString `db:"CASE_DEF_ID_"`
		CASEINSTID         sql.NullString `db:"CASE_INST_ID_"`
		STAGEINSTID        sql.NullString `db:"STAGE_INST_ID_"`
		ISSTAGE            byte           `db:"IS_STAGE_"`
		ELEMENTID          sql.NullString `db:"ELEMENT_ID_"`
		ITEMDEFINITIONID   sql.NullString `db:"ITEM_DEFINITION_ID_"`
		ITEMDEFINITIONTYPE sql.NullString `db:"ITEM_DEFINITION_TYPE_"`
		CREATEDTIME        sql.NullTime   `db:"CREATED_TIME_"`
		LASTAVAILABLETIME  sql.NullTime   `db:"LAST_AVAILABLE_TIME_"`
		LASTENABLEDTIME    sql.NullTime   `db:"LAST_ENABLED_TIME_"`
		LASTDISABLEDTIME   sql.NullTime   `db:"LAST_DISABLED_TIME_"`
		LASTSTARTEDTIME    sql.NullTime   `db:"LAST_STARTED_TIME_"`
		LASTSUSPENDEDTIME  sql.NullTime   `db:"LAST_SUSPENDED_TIME_"`
		COMPLETEDTIME      sql.NullTime   `db:"COMPLETED_TIME_"`
		OCCURREDTIME       sql.NullTime   `db:"OCCURRED_TIME_"`
		TERMINATEDTIME     sql.NullTime   `db:"TERMINATED_TIME_"`
		EXITTIME           sql.NullTime   `db:"EXIT_TIME_"`
		ENDEDTIME          sql.NullTime   `db:"ENDED_TIME_"`
		LASTUPDATEDTIME    sql.NullTime   `db:"LAST_UPDATED_TIME_"`
		STARTUSERID        sql.NullString `db:"START_USER_ID_"`
		REFERENCEID        sql.NullString `db:"REFERENCE_ID_"`
		REFERENCETYPE      sql.NullString `db:"REFERENCE_TYPE_"`
		TENANTID           string         `db:"TENANT_ID_"`
	}
)

func newActCmmnHiPlanItemInstModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultActCmmnHiPlanItemInstModel {
	return &defaultActCmmnHiPlanItemInstModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`act_cmmn_hi_plan_item_inst`",
	}
}

func (m *defaultActCmmnHiPlanItemInstModel) Insert(ctx context.Context, data *ActCmmnHiPlanItemInst) (sql.Result, error) {
	assetActCmmnHiPlanItemInstIDKey := fmt.Sprintf("%s%v", cacheAssetActCmmnHiPlanItemInstIDPrefix, data.ID)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, actCmmnHiPlanItemInstRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ID, data.REV, data.NAME, data.STATE, data.CASEDEFID, data.CASEINSTID, data.STAGEINSTID, data.ISSTAGE, data.ELEMENTID, data.ITEMDEFINITIONID, data.ITEMDEFINITIONTYPE, data.CREATEDTIME, data.LASTAVAILABLETIME, data.LASTENABLEDTIME, data.LASTDISABLEDTIME, data.LASTSTARTEDTIME, data.LASTSUSPENDEDTIME, data.COMPLETEDTIME, data.OCCURREDTIME, data.TERMINATEDTIME, data.EXITTIME, data.ENDEDTIME, data.LASTUPDATEDTIME, data.STARTUSERID, data.REFERENCEID, data.REFERENCETYPE, data.TENANTID)
	}, assetActCmmnHiPlanItemInstIDKey)
	return ret, err
}

func (m *defaultActCmmnHiPlanItemInstModel) FindOne(ctx context.Context, iD string) (*ActCmmnHiPlanItemInst, error) {
	assetActCmmnHiPlanItemInstIDKey := fmt.Sprintf("%s%v", cacheAssetActCmmnHiPlanItemInstIDPrefix, iD)
	var resp ActCmmnHiPlanItemInst
	err := m.QueryRowCtx(ctx, &resp, assetActCmmnHiPlanItemInstIDKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actCmmnHiPlanItemInstRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, iD)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActCmmnHiPlanItemInstModel) Update(ctx context.Context, data *ActCmmnHiPlanItemInst) error {
	assetActCmmnHiPlanItemInstIDKey := fmt.Sprintf("%s%v", cacheAssetActCmmnHiPlanItemInstIDPrefix, data.ID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `ID_` = ?", m.table, actCmmnHiPlanItemInstRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.REV, data.NAME, data.STATE, data.CASEDEFID, data.CASEINSTID, data.STAGEINSTID, data.ISSTAGE, data.ELEMENTID, data.ITEMDEFINITIONID, data.ITEMDEFINITIONTYPE, data.CREATEDTIME, data.LASTAVAILABLETIME, data.LASTENABLEDTIME, data.LASTDISABLEDTIME, data.LASTSTARTEDTIME, data.LASTSUSPENDEDTIME, data.COMPLETEDTIME, data.OCCURREDTIME, data.TERMINATEDTIME, data.EXITTIME, data.ENDEDTIME, data.LASTUPDATEDTIME, data.STARTUSERID, data.REFERENCEID, data.REFERENCETYPE, data.TENANTID, data.ID)
	}, assetActCmmnHiPlanItemInstIDKey)
	return err
}

func (m *defaultActCmmnHiPlanItemInstModel) Delete(ctx context.Context, iD string) error {
	assetActCmmnHiPlanItemInstIDKey := fmt.Sprintf("%s%v", cacheAssetActCmmnHiPlanItemInstIDPrefix, iD)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `ID_` = ?", m.table)
		return conn.ExecCtx(ctx, query, iD)
	}, assetActCmmnHiPlanItemInstIDKey)
	return err
}

func (m *defaultActCmmnHiPlanItemInstModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetActCmmnHiPlanItemInstIDPrefix, primary)
}

func (m *defaultActCmmnHiPlanItemInstModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actCmmnHiPlanItemInstRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultActCmmnHiPlanItemInstModel) tableName() string {
	return m.table
}
