// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	actHiEntitylinkFieldNames          = builder.RawFieldNames(&ActHiEntitylink{})
	actHiEntitylinkRows                = strings.Join(actHiEntitylinkFieldNames, ",")
	actHiEntitylinkRowsExpectAutoSet   = strings.Join(stringx.Remove(actHiEntitylinkFieldNames, "`create_time`", "`update_time`"), ",")
	actHiEntitylinkRowsWithPlaceHolder = strings.Join(stringx.Remove(actHiEntitylinkFieldNames, "`ID_`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetActHiEntitylinkIDPrefix = "cache:asset:actHiEntitylink:iD:"
)

type (
	actHiEntitylinkModel interface {
		Insert(ctx context.Context, data *ActHiEntitylink) (sql.Result, error)
		FindOne(ctx context.Context, iD string) (*ActHiEntitylink, error)
		Update(ctx context.Context, data *ActHiEntitylink) error
		Delete(ctx context.Context, iD string) error
	}

	defaultActHiEntitylinkModel struct {
		sqlc.CachedConn
		table string
	}

	ActHiEntitylink struct {
		ID                   string         `db:"ID_"`
		LINKTYPE             sql.NullString `db:"LINK_TYPE_"`
		CREATETIME           sql.NullTime   `db:"CREATE_TIME_"`
		SCOPEID              sql.NullString `db:"SCOPE_ID_"`
		SCOPETYPE            sql.NullString `db:"SCOPE_TYPE_"`
		SCOPEDEFINITIONID    sql.NullString `db:"SCOPE_DEFINITION_ID_"`
		REFSCOPEID           sql.NullString `db:"REF_SCOPE_ID_"`
		REFSCOPETYPE         sql.NullString `db:"REF_SCOPE_TYPE_"`
		REFSCOPEDEFINITIONID sql.NullString `db:"REF_SCOPE_DEFINITION_ID_"`
		HIERARCHYTYPE        sql.NullString `db:"HIERARCHY_TYPE_"`
		ROOTSCOPEID          sql.NullString `db:"ROOT_SCOPE_ID_"`
		ROOTSCOPETYPE        sql.NullString `db:"ROOT_SCOPE_TYPE_"`
		SUBSCOPEID           sql.NullString `db:"SUB_SCOPE_ID_"`
		PARENTELEMENTID      sql.NullString `db:"PARENT_ELEMENT_ID_"`
	}
)

func newActHiEntitylinkModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultActHiEntitylinkModel {
	return &defaultActHiEntitylinkModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`act_hi_entitylink`",
	}
}

func (m *defaultActHiEntitylinkModel) Insert(ctx context.Context, data *ActHiEntitylink) (sql.Result, error) {
	assetActHiEntitylinkIDKey := fmt.Sprintf("%s%v", cacheAssetActHiEntitylinkIDPrefix, data.ID)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, actHiEntitylinkRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ID, data.LINKTYPE, data.CREATETIME, data.SCOPEID, data.SCOPETYPE, data.SCOPEDEFINITIONID, data.REFSCOPEID, data.REFSCOPETYPE, data.REFSCOPEDEFINITIONID, data.HIERARCHYTYPE, data.ROOTSCOPEID, data.ROOTSCOPETYPE, data.SUBSCOPEID, data.PARENTELEMENTID)
	}, assetActHiEntitylinkIDKey)
	return ret, err
}

func (m *defaultActHiEntitylinkModel) FindOne(ctx context.Context, iD string) (*ActHiEntitylink, error) {
	assetActHiEntitylinkIDKey := fmt.Sprintf("%s%v", cacheAssetActHiEntitylinkIDPrefix, iD)
	var resp ActHiEntitylink
	err := m.QueryRowCtx(ctx, &resp, assetActHiEntitylinkIDKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actHiEntitylinkRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, iD)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActHiEntitylinkModel) Update(ctx context.Context, data *ActHiEntitylink) error {
	assetActHiEntitylinkIDKey := fmt.Sprintf("%s%v", cacheAssetActHiEntitylinkIDPrefix, data.ID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `ID_` = ?", m.table, actHiEntitylinkRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.LINKTYPE, data.CREATETIME, data.SCOPEID, data.SCOPETYPE, data.SCOPEDEFINITIONID, data.REFSCOPEID, data.REFSCOPETYPE, data.REFSCOPEDEFINITIONID, data.HIERARCHYTYPE, data.ROOTSCOPEID, data.ROOTSCOPETYPE, data.SUBSCOPEID, data.PARENTELEMENTID, data.ID)
	}, assetActHiEntitylinkIDKey)
	return err
}

func (m *defaultActHiEntitylinkModel) Delete(ctx context.Context, iD string) error {
	assetActHiEntitylinkIDKey := fmt.Sprintf("%s%v", cacheAssetActHiEntitylinkIDPrefix, iD)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `ID_` = ?", m.table)
		return conn.ExecCtx(ctx, query, iD)
	}, assetActHiEntitylinkIDKey)
	return err
}

func (m *defaultActHiEntitylinkModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetActHiEntitylinkIDPrefix, primary)
}

func (m *defaultActHiEntitylinkModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actHiEntitylinkRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultActHiEntitylinkModel) tableName() string {
	return m.table
}
