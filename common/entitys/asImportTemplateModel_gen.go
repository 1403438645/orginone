// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asImportTemplateFieldNames          = builder.RawFieldNames(&AsImportTemplate{})
	asImportTemplateRows                = strings.Join(asImportTemplateFieldNames, ",")
	asImportTemplateRowsExpectAutoSet   = strings.Join(stringx.Remove(asImportTemplateFieldNames, "`create_time`", "`update_time`"), ",")
	asImportTemplateRowsWithPlaceHolder = strings.Join(stringx.Remove(asImportTemplateFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsImportTemplateIdPrefix = "cache:asset:asImportTemplate:id:"
)

type (
	asImportTemplateModel interface {
		Insert(ctx context.Context, data *AsImportTemplate) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AsImportTemplate, error)
		Update(ctx context.Context, data *AsImportTemplate) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAsImportTemplateModel struct {
		sqlc.CachedConn
		table string
	}

	AsImportTemplate struct {
		Id         int64          `db:"id"`          // 主键
		ImportName sql.NullString `db:"import_name"` // 导入文件名
		ImportType sql.NullInt64  `db:"import_type"` // 导入类型：1-人员导入2-部门导入3-岗位导入4-租户导入5-集团关系导入6-集团单位关系导入7-集团岗位导入
		CreateTime time.Time      `db:"create_time"` // 创建时间
		UpdateTime time.Time      `db:"update_time"` // 修改时间
		CreateUser sql.NullInt64  `db:"create_user"` // 创建人
		UpdateUser sql.NullInt64  `db:"update_user"` // 修改人
		IsDeleted  int64          `db:"is_deleted"`  // 是否有效 0-有效  1-删除
		Status     int64          `db:"status"`      // 状态
	}
)

func newAsImportTemplateModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsImportTemplateModel {
	return &defaultAsImportTemplateModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_import_template`",
	}
}

func (m *defaultAsImportTemplateModel) Insert(ctx context.Context, data *AsImportTemplate) (sql.Result, error) {
	assetAsImportTemplateIdKey := fmt.Sprintf("%s%v", cacheAssetAsImportTemplateIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, asImportTemplateRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.ImportName, data.ImportType, data.CreateUser, data.UpdateUser, data.IsDeleted, data.Status)
	}, assetAsImportTemplateIdKey)
	return ret, err
}

func (m *defaultAsImportTemplateModel) FindOne(ctx context.Context, id int64) (*AsImportTemplate, error) {
	assetAsImportTemplateIdKey := fmt.Sprintf("%s%v", cacheAssetAsImportTemplateIdPrefix, id)
	var resp AsImportTemplate
	err := m.QueryRowCtx(ctx, &resp, assetAsImportTemplateIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asImportTemplateRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsImportTemplateModel) Update(ctx context.Context, data *AsImportTemplate) error {
	assetAsImportTemplateIdKey := fmt.Sprintf("%s%v", cacheAssetAsImportTemplateIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asImportTemplateRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ImportName, data.ImportType, data.CreateUser, data.UpdateUser, data.IsDeleted, data.Status, data.Id)
	}, assetAsImportTemplateIdKey)
	return err
}

func (m *defaultAsImportTemplateModel) Delete(ctx context.Context, id int64) error {
	assetAsImportTemplateIdKey := fmt.Sprintf("%s%v", cacheAssetAsImportTemplateIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsImportTemplateIdKey)
	return err
}

func (m *defaultAsImportTemplateModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsImportTemplateIdPrefix, primary)
}

func (m *defaultAsImportTemplateModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asImportTemplateRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsImportTemplateModel) tableName() string {
	return m.table
}
