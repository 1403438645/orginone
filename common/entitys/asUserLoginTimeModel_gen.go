// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asUserLoginTimeFieldNames          = builder.RawFieldNames(&AsUserLoginTime{})
	asUserLoginTimeRows                = strings.Join(asUserLoginTimeFieldNames, ",")
	asUserLoginTimeRowsExpectAutoSet   = strings.Join(stringx.Remove(asUserLoginTimeFieldNames, "`create_time`", "`update_time`"), ",")
	asUserLoginTimeRowsWithPlaceHolder = strings.Join(stringx.Remove(asUserLoginTimeFieldNames, "`user_phone`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsUserLoginTimeUserPhonePrefix = "cache:asset:asUserLoginTime:userPhone:"
)

type (
	asUserLoginTimeModel interface {
		Insert(ctx context.Context, data *AsUserLoginTime) (sql.Result, error)
		FindOne(ctx context.Context, userPhone string) (*AsUserLoginTime, error)
		Update(ctx context.Context, data *AsUserLoginTime) error
		Delete(ctx context.Context, userPhone string) error
	}

	defaultAsUserLoginTimeModel struct {
		sqlc.CachedConn
		table string
	}

	AsUserLoginTime struct {
		UserPhone  string       `db:"user_phone"` // 用户账号
		CurTime    sql.NullTime `db:"cur_time"`   // 登录时间
		BeforeTime sql.NullTime `db:"before_time"`
	}
)

func newAsUserLoginTimeModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsUserLoginTimeModel {
	return &defaultAsUserLoginTimeModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_user_login_time`",
	}
}

func (m *defaultAsUserLoginTimeModel) Insert(ctx context.Context, data *AsUserLoginTime) (sql.Result, error) {
	assetAsUserLoginTimeUserPhoneKey := fmt.Sprintf("%s%v", cacheAssetAsUserLoginTimeUserPhonePrefix, data.UserPhone)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, asUserLoginTimeRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserPhone, data.CurTime, data.BeforeTime)
	}, assetAsUserLoginTimeUserPhoneKey)
	return ret, err
}

func (m *defaultAsUserLoginTimeModel) FindOne(ctx context.Context, userPhone string) (*AsUserLoginTime, error) {
	assetAsUserLoginTimeUserPhoneKey := fmt.Sprintf("%s%v", cacheAssetAsUserLoginTimeUserPhonePrefix, userPhone)
	var resp AsUserLoginTime
	err := m.QueryRowCtx(ctx, &resp, assetAsUserLoginTimeUserPhoneKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `user_phone` = ? limit 1", asUserLoginTimeRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, userPhone)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsUserLoginTimeModel) Update(ctx context.Context, data *AsUserLoginTime) error {
	assetAsUserLoginTimeUserPhoneKey := fmt.Sprintf("%s%v", cacheAssetAsUserLoginTimeUserPhonePrefix, data.UserPhone)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `user_phone` = ?", m.table, asUserLoginTimeRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.CurTime, data.BeforeTime, data.UserPhone)
	}, assetAsUserLoginTimeUserPhoneKey)
	return err
}

func (m *defaultAsUserLoginTimeModel) Delete(ctx context.Context, userPhone string) error {
	assetAsUserLoginTimeUserPhoneKey := fmt.Sprintf("%s%v", cacheAssetAsUserLoginTimeUserPhonePrefix, userPhone)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `user_phone` = ?", m.table)
		return conn.ExecCtx(ctx, query, userPhone)
	}, assetAsUserLoginTimeUserPhoneKey)
	return err
}

func (m *defaultAsUserLoginTimeModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsUserLoginTimeUserPhonePrefix, primary)
}

func (m *defaultAsUserLoginTimeModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `user_phone` = ? limit 1", asUserLoginTimeRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsUserLoginTimeModel) tableName() string {
	return m.table
}
