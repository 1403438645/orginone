// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	actRuActinstFieldNames          = builder.RawFieldNames(&ActRuActinst{})
	actRuActinstRows                = strings.Join(actRuActinstFieldNames, ",")
	actRuActinstRowsExpectAutoSet   = strings.Join(stringx.Remove(actRuActinstFieldNames, "`create_time`", "`update_time`"), ",")
	actRuActinstRowsWithPlaceHolder = strings.Join(stringx.Remove(actRuActinstFieldNames, "`ID_`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetActRuActinstIDPrefix = "cache:asset:actRuActinst:iD:"
)

type (
	actRuActinstModel interface {
		Insert(ctx context.Context, data *ActRuActinst) (sql.Result, error)
		FindOne(ctx context.Context, iD string) (*ActRuActinst, error)
		Update(ctx context.Context, data *ActRuActinst) error
		Delete(ctx context.Context, iD string) error
	}

	defaultActRuActinstModel struct {
		sqlc.CachedConn
		table string
	}

	ActRuActinst struct {
		ID               string         `db:"ID_"`
		REV              int64          `db:"REV_"`
		PROCDEFID        string         `db:"PROC_DEF_ID_"`
		PROCINSTID       string         `db:"PROC_INST_ID_"`
		EXECUTIONID      string         `db:"EXECUTION_ID_"`
		ACTID            string         `db:"ACT_ID_"`
		TASKID           sql.NullString `db:"TASK_ID_"`
		CALLPROCINSTID   sql.NullString `db:"CALL_PROC_INST_ID_"`
		ACTNAME          sql.NullString `db:"ACT_NAME_"`
		ACTTYPE          string         `db:"ACT_TYPE_"`
		ASSIGNEE         sql.NullString `db:"ASSIGNEE_"`
		STARTTIME        time.Time      `db:"START_TIME_"`
		ENDTIME          sql.NullTime   `db:"END_TIME_"`
		DURATION         sql.NullInt64  `db:"DURATION_"`
		DELETEREASON     sql.NullString `db:"DELETE_REASON_"`
		TENANTID         string         `db:"TENANT_ID_"`
		TRANSACTIONORDER sql.NullInt64  `db:"TRANSACTION_ORDER_"`
	}
)

func newActRuActinstModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultActRuActinstModel {
	return &defaultActRuActinstModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`act_ru_actinst`",
	}
}

func (m *defaultActRuActinstModel) Insert(ctx context.Context, data *ActRuActinst) (sql.Result, error) {
	assetActRuActinstIDKey := fmt.Sprintf("%s%v", cacheAssetActRuActinstIDPrefix, data.ID)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, actRuActinstRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ID, data.REV, data.PROCDEFID, data.PROCINSTID, data.EXECUTIONID, data.ACTID, data.TASKID, data.CALLPROCINSTID, data.ACTNAME, data.ACTTYPE, data.ASSIGNEE, data.STARTTIME, data.ENDTIME, data.DURATION, data.DELETEREASON, data.TENANTID, data.TRANSACTIONORDER)
	}, assetActRuActinstIDKey)
	return ret, err
}

func (m *defaultActRuActinstModel) FindOne(ctx context.Context, iD string) (*ActRuActinst, error) {
	assetActRuActinstIDKey := fmt.Sprintf("%s%v", cacheAssetActRuActinstIDPrefix, iD)
	var resp ActRuActinst
	err := m.QueryRowCtx(ctx, &resp, assetActRuActinstIDKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actRuActinstRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, iD)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActRuActinstModel) Update(ctx context.Context, data *ActRuActinst) error {
	assetActRuActinstIDKey := fmt.Sprintf("%s%v", cacheAssetActRuActinstIDPrefix, data.ID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `ID_` = ?", m.table, actRuActinstRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.REV, data.PROCDEFID, data.PROCINSTID, data.EXECUTIONID, data.ACTID, data.TASKID, data.CALLPROCINSTID, data.ACTNAME, data.ACTTYPE, data.ASSIGNEE, data.STARTTIME, data.ENDTIME, data.DURATION, data.DELETEREASON, data.TENANTID, data.TRANSACTIONORDER, data.ID)
	}, assetActRuActinstIDKey)
	return err
}

func (m *defaultActRuActinstModel) Delete(ctx context.Context, iD string) error {
	assetActRuActinstIDKey := fmt.Sprintf("%s%v", cacheAssetActRuActinstIDPrefix, iD)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `ID_` = ?", m.table)
		return conn.ExecCtx(ctx, query, iD)
	}, assetActRuActinstIDKey)
	return err
}

func (m *defaultActRuActinstModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetActRuActinstIDPrefix, primary)
}

func (m *defaultActRuActinstModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actRuActinstRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultActRuActinstModel) tableName() string {
	return m.table
}
