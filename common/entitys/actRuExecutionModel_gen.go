// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	actRuExecutionFieldNames          = builder.RawFieldNames(&ActRuExecution{})
	actRuExecutionRows                = strings.Join(actRuExecutionFieldNames, ",")
	actRuExecutionRowsExpectAutoSet   = strings.Join(stringx.Remove(actRuExecutionFieldNames, "`create_time`", "`update_time`"), ",")
	actRuExecutionRowsWithPlaceHolder = strings.Join(stringx.Remove(actRuExecutionFieldNames, "`ID_`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetActRuExecutionIDPrefix = "cache:asset:actRuExecution:iD:"
)

type (
	actRuExecutionModel interface {
		Insert(ctx context.Context, data *ActRuExecution) (sql.Result, error)
		FindOne(ctx context.Context, iD string) (*ActRuExecution, error)
		Update(ctx context.Context, data *ActRuExecution) error
		Delete(ctx context.Context, iD string) error
	}

	defaultActRuExecutionModel struct {
		sqlc.CachedConn
		table string
	}

	ActRuExecution struct {
		ID                     string         `db:"ID_"`
		REV                    sql.NullInt64  `db:"REV_"`
		PROCINSTID             sql.NullString `db:"PROC_INST_ID_"`
		BUSINESSKEY            sql.NullString `db:"BUSINESS_KEY_"`
		PARENTID               sql.NullString `db:"PARENT_ID_"`
		PROCDEFID              sql.NullString `db:"PROC_DEF_ID_"`
		SUPEREXEC              sql.NullString `db:"SUPER_EXEC_"`
		ROOTPROCINSTID         sql.NullString `db:"ROOT_PROC_INST_ID_"`
		ACTID                  sql.NullString `db:"ACT_ID_"`
		ISACTIVE               sql.NullInt64  `db:"IS_ACTIVE_"`
		ISCONCURRENT           sql.NullInt64  `db:"IS_CONCURRENT_"`
		ISSCOPE                sql.NullInt64  `db:"IS_SCOPE_"`
		ISEVENTSCOPE           sql.NullInt64  `db:"IS_EVENT_SCOPE_"`
		ISMIROOT               sql.NullInt64  `db:"IS_MI_ROOT_"`
		SUSPENSIONSTATE        sql.NullInt64  `db:"SUSPENSION_STATE_"`
		CACHEDENTSTATE         sql.NullInt64  `db:"CACHED_ENT_STATE_"`
		TENANTID               string         `db:"TENANT_ID_"`
		NAME                   sql.NullString `db:"NAME_"`
		STARTACTID             sql.NullString `db:"START_ACT_ID_"`
		STARTTIME              sql.NullTime   `db:"START_TIME_"`
		STARTUSERID            sql.NullString `db:"START_USER_ID_"`
		LOCKTIME               sql.NullTime   `db:"LOCK_TIME_"`
		ISCOUNTENABLED         sql.NullInt64  `db:"IS_COUNT_ENABLED_"`
		EVTSUBSCRCOUNT         sql.NullInt64  `db:"EVT_SUBSCR_COUNT_"`
		TASKCOUNT              sql.NullInt64  `db:"TASK_COUNT_"`
		JOBCOUNT               sql.NullInt64  `db:"JOB_COUNT_"`
		TIMERJOBCOUNT          sql.NullInt64  `db:"TIMER_JOB_COUNT_"`
		SUSPJOBCOUNT           sql.NullInt64  `db:"SUSP_JOB_COUNT_"`
		DEADLETTERJOBCOUNT     sql.NullInt64  `db:"DEADLETTER_JOB_COUNT_"`
		VARCOUNT               sql.NullInt64  `db:"VAR_COUNT_"`
		IDLINKCOUNT            sql.NullInt64  `db:"ID_LINK_COUNT_"`
		CALLBACKID             sql.NullString `db:"CALLBACK_ID_"`
		CALLBACKTYPE           sql.NullString `db:"CALLBACK_TYPE_"`
		REFERENCEID            sql.NullString `db:"REFERENCE_ID_"`
		REFERENCETYPE          sql.NullString `db:"REFERENCE_TYPE_"`
		PROPAGATEDSTAGEINSTID  sql.NullString `db:"PROPAGATED_STAGE_INST_ID_"`
		LOCKOWNER              sql.NullString `db:"LOCK_OWNER_"`
		EXTERNALWORKERJOBCOUNT sql.NullInt64  `db:"EXTERNAL_WORKER_JOB_COUNT_"`
	}
)

func newActRuExecutionModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultActRuExecutionModel {
	return &defaultActRuExecutionModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`act_ru_execution`",
	}
}

func (m *defaultActRuExecutionModel) Insert(ctx context.Context, data *ActRuExecution) (sql.Result, error) {
	assetActRuExecutionIDKey := fmt.Sprintf("%s%v", cacheAssetActRuExecutionIDPrefix, data.ID)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, actRuExecutionRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ID, data.REV, data.PROCINSTID, data.BUSINESSKEY, data.PARENTID, data.PROCDEFID, data.SUPEREXEC, data.ROOTPROCINSTID, data.ACTID, data.ISACTIVE, data.ISCONCURRENT, data.ISSCOPE, data.ISEVENTSCOPE, data.ISMIROOT, data.SUSPENSIONSTATE, data.CACHEDENTSTATE, data.TENANTID, data.NAME, data.STARTACTID, data.STARTTIME, data.STARTUSERID, data.LOCKTIME, data.ISCOUNTENABLED, data.EVTSUBSCRCOUNT, data.TASKCOUNT, data.JOBCOUNT, data.TIMERJOBCOUNT, data.SUSPJOBCOUNT, data.DEADLETTERJOBCOUNT, data.VARCOUNT, data.IDLINKCOUNT, data.CALLBACKID, data.CALLBACKTYPE, data.REFERENCEID, data.REFERENCETYPE, data.PROPAGATEDSTAGEINSTID, data.LOCKOWNER, data.EXTERNALWORKERJOBCOUNT)
	}, assetActRuExecutionIDKey)
	return ret, err
}

func (m *defaultActRuExecutionModel) FindOne(ctx context.Context, iD string) (*ActRuExecution, error) {
	assetActRuExecutionIDKey := fmt.Sprintf("%s%v", cacheAssetActRuExecutionIDPrefix, iD)
	var resp ActRuExecution
	err := m.QueryRowCtx(ctx, &resp, assetActRuExecutionIDKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actRuExecutionRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, iD)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActRuExecutionModel) Update(ctx context.Context, data *ActRuExecution) error {
	assetActRuExecutionIDKey := fmt.Sprintf("%s%v", cacheAssetActRuExecutionIDPrefix, data.ID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `ID_` = ?", m.table, actRuExecutionRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.REV, data.PROCINSTID, data.BUSINESSKEY, data.PARENTID, data.PROCDEFID, data.SUPEREXEC, data.ROOTPROCINSTID, data.ACTID, data.ISACTIVE, data.ISCONCURRENT, data.ISSCOPE, data.ISEVENTSCOPE, data.ISMIROOT, data.SUSPENSIONSTATE, data.CACHEDENTSTATE, data.TENANTID, data.NAME, data.STARTACTID, data.STARTTIME, data.STARTUSERID, data.LOCKTIME, data.ISCOUNTENABLED, data.EVTSUBSCRCOUNT, data.TASKCOUNT, data.JOBCOUNT, data.TIMERJOBCOUNT, data.SUSPJOBCOUNT, data.DEADLETTERJOBCOUNT, data.VARCOUNT, data.IDLINKCOUNT, data.CALLBACKID, data.CALLBACKTYPE, data.REFERENCEID, data.REFERENCETYPE, data.PROPAGATEDSTAGEINSTID, data.LOCKOWNER, data.EXTERNALWORKERJOBCOUNT, data.ID)
	}, assetActRuExecutionIDKey)
	return err
}

func (m *defaultActRuExecutionModel) Delete(ctx context.Context, iD string) error {
	assetActRuExecutionIDKey := fmt.Sprintf("%s%v", cacheAssetActRuExecutionIDPrefix, iD)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `ID_` = ?", m.table)
		return conn.ExecCtx(ctx, query, iD)
	}, assetActRuExecutionIDKey)
	return err
}

func (m *defaultActRuExecutionModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetActRuExecutionIDPrefix, primary)
}

func (m *defaultActRuExecutionModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actRuExecutionRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultActRuExecutionModel) tableName() string {
	return m.table
}
