// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asTempletApplicationFieldNames          = builder.RawFieldNames(&AsTempletApplication{})
	asTempletApplicationRows                = strings.Join(asTempletApplicationFieldNames, ",")
	asTempletApplicationRowsExpectAutoSet   = strings.Join(stringx.Remove(asTempletApplicationFieldNames, "`create_time`", "`update_time`"), ",")
	asTempletApplicationRowsWithPlaceHolder = strings.Join(stringx.Remove(asTempletApplicationFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsTempletApplicationIdPrefix = "cache:asset:asTempletApplication:id:"
)

type (
	asTempletApplicationModel interface {
		Insert(ctx context.Context, data *AsTempletApplication) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*AsTempletApplication, error)
		Update(ctx context.Context, data *AsTempletApplication) error
		Delete(ctx context.Context, id string) error
	}

	defaultAsTempletApplicationModel struct {
		sqlc.CachedConn
		table string
	}

	AsTempletApplication struct {
		Id              string         `db:"id"`               // 应用模板Id
		ApplicationName sql.NullString `db:"application_name"` // 应用模块名称
		IconCls         sql.NullString `db:"icon_cls"`         // 应用模块图标
	}
)

func newAsTempletApplicationModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsTempletApplicationModel {
	return &defaultAsTempletApplicationModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_templet_application`",
	}
}

func (m *defaultAsTempletApplicationModel) Insert(ctx context.Context, data *AsTempletApplication) (sql.Result, error) {
	assetAsTempletApplicationIdKey := fmt.Sprintf("%s%v", cacheAssetAsTempletApplicationIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, asTempletApplicationRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.ApplicationName, data.IconCls)
	}, assetAsTempletApplicationIdKey)
	return ret, err
}

func (m *defaultAsTempletApplicationModel) FindOne(ctx context.Context, id string) (*AsTempletApplication, error) {
	assetAsTempletApplicationIdKey := fmt.Sprintf("%s%v", cacheAssetAsTempletApplicationIdPrefix, id)
	var resp AsTempletApplication
	err := m.QueryRowCtx(ctx, &resp, assetAsTempletApplicationIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asTempletApplicationRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsTempletApplicationModel) Update(ctx context.Context, data *AsTempletApplication) error {
	assetAsTempletApplicationIdKey := fmt.Sprintf("%s%v", cacheAssetAsTempletApplicationIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asTempletApplicationRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ApplicationName, data.IconCls, data.Id)
	}, assetAsTempletApplicationIdKey)
	return err
}

func (m *defaultAsTempletApplicationModel) Delete(ctx context.Context, id string) error {
	assetAsTempletApplicationIdKey := fmt.Sprintf("%s%v", cacheAssetAsTempletApplicationIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsTempletApplicationIdKey)
	return err
}

func (m *defaultAsTempletApplicationModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsTempletApplicationIdPrefix, primary)
}

func (m *defaultAsTempletApplicationModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asTempletApplicationRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsTempletApplicationModel) tableName() string {
	return m.table
}
