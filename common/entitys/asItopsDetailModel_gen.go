// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asItopsDetailFieldNames          = builder.RawFieldNames(&AsItopsDetail{})
	asItopsDetailRows                = strings.Join(asItopsDetailFieldNames, ",")
	asItopsDetailRowsExpectAutoSet   = strings.Join(stringx.Remove(asItopsDetailFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	asItopsDetailRowsWithPlaceHolder = strings.Join(stringx.Remove(asItopsDetailFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsItopsDetailIdPrefix = "cache:asset:asItopsDetail:id:"
)

type (
	asItopsDetailModel interface {
		Insert(ctx context.Context, data *AsItopsDetail) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AsItopsDetail, error)
		Update(ctx context.Context, data *AsItopsDetail) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAsItopsDetailModel struct {
		sqlc.CachedConn
		table string
	}

	AsItopsDetail struct {
		Tp           sql.NullInt64  `db:"tp"` // 1:是以租户；2、是以用户；3、自动修复
		Id           int64          `db:"id"`
		TenantCode   sql.NullString `db:"tenant_code"`
		UserId       sql.NullInt64  `db:"user_id"`
		Content      sql.NullString `db:"content"`
		PhoneNumber  sql.NullString `db:"phone_number"`
		DetailReason sql.NullString `db:"detail_reason"`
		IfModify     sql.NullInt64  `db:"if_modify"` // 0:未修复；1：已修复
		Itopsid      int64          `db:"itopsid"`   // 对应扫描id
		Number       sql.NullInt64  `db:"number"`
		ModifyTime   sql.NullTime   `db:"modify_time"`
		Modifytype   sql.NullInt64  `db:"modifytype"`
		TenantName   sql.NullString `db:"tenant_name"`
		UserName     sql.NullString `db:"user_name"`
	}
)

func newAsItopsDetailModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsItopsDetailModel {
	return &defaultAsItopsDetailModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_itops_detail`",
	}
}

func (m *defaultAsItopsDetailModel) Insert(ctx context.Context, data *AsItopsDetail) (sql.Result, error) {
	assetAsItopsDetailIdKey := fmt.Sprintf("%s%v", cacheAssetAsItopsDetailIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, asItopsDetailRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Tp, data.TenantCode, data.UserId, data.Content, data.PhoneNumber, data.DetailReason, data.IfModify, data.Itopsid, data.Number, data.ModifyTime, data.Modifytype, data.TenantName, data.UserName)
	}, assetAsItopsDetailIdKey)
	return ret, err
}

func (m *defaultAsItopsDetailModel) FindOne(ctx context.Context, id int64) (*AsItopsDetail, error) {
	assetAsItopsDetailIdKey := fmt.Sprintf("%s%v", cacheAssetAsItopsDetailIdPrefix, id)
	var resp AsItopsDetail
	err := m.QueryRowCtx(ctx, &resp, assetAsItopsDetailIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asItopsDetailRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsItopsDetailModel) Update(ctx context.Context, data *AsItopsDetail) error {
	assetAsItopsDetailIdKey := fmt.Sprintf("%s%v", cacheAssetAsItopsDetailIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asItopsDetailRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Tp, data.TenantCode, data.UserId, data.Content, data.PhoneNumber, data.DetailReason, data.IfModify, data.Itopsid, data.Number, data.ModifyTime, data.Modifytype, data.TenantName, data.UserName, data.Id)
	}, assetAsItopsDetailIdKey)
	return err
}

func (m *defaultAsItopsDetailModel) Delete(ctx context.Context, id int64) error {
	assetAsItopsDetailIdKey := fmt.Sprintf("%s%v", cacheAssetAsItopsDetailIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsItopsDetailIdKey)
	return err
}

func (m *defaultAsItopsDetailModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsItopsDetailIdPrefix, primary)
}

func (m *defaultAsItopsDetailModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asItopsDetailRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsItopsDetailModel) tableName() string {
	return m.table
}
