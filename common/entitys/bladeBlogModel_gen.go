// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bladeBlogFieldNames          = builder.RawFieldNames(&BladeBlog{})
	bladeBlogRows                = strings.Join(bladeBlogFieldNames, ",")
	bladeBlogRowsExpectAutoSet   = strings.Join(stringx.Remove(bladeBlogFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	bladeBlogRowsWithPlaceHolder = strings.Join(stringx.Remove(bladeBlogFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetBladeBlogIdPrefix = "cache:asset:bladeBlog:id:"
)

type (
	bladeBlogModel interface {
		Insert(ctx context.Context, data *BladeBlog) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BladeBlog, error)
		Update(ctx context.Context, data *BladeBlog) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBladeBlogModel struct {
		sqlc.CachedConn
		table string
	}

	BladeBlog struct {
		Id          int64          `db:"id"`
		BlogTitle   sql.NullString `db:"blog_title"`
		BlogContent sql.NullString `db:"blog_content"`
		BlogDate    time.Time      `db:"blog_date"`
		IsDeleted   int64          `db:"is_deleted"`
	}
)

func newBladeBlogModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultBladeBlogModel {
	return &defaultBladeBlogModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`blade_blog`",
	}
}

func (m *defaultBladeBlogModel) Insert(ctx context.Context, data *BladeBlog) (sql.Result, error) {
	assetBladeBlogIdKey := fmt.Sprintf("%s%v", cacheAssetBladeBlogIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, bladeBlogRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.BlogTitle, data.BlogContent, data.BlogDate, data.IsDeleted)
	}, assetBladeBlogIdKey)
	return ret, err
}

func (m *defaultBladeBlogModel) FindOne(ctx context.Context, id int64) (*BladeBlog, error) {
	assetBladeBlogIdKey := fmt.Sprintf("%s%v", cacheAssetBladeBlogIdPrefix, id)
	var resp BladeBlog
	err := m.QueryRowCtx(ctx, &resp, assetBladeBlogIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bladeBlogRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBladeBlogModel) Update(ctx context.Context, data *BladeBlog) error {
	assetBladeBlogIdKey := fmt.Sprintf("%s%v", cacheAssetBladeBlogIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, bladeBlogRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.BlogTitle, data.BlogContent, data.BlogDate, data.IsDeleted, data.Id)
	}, assetBladeBlogIdKey)
	return err
}

func (m *defaultBladeBlogModel) Delete(ctx context.Context, id int64) error {
	assetBladeBlogIdKey := fmt.Sprintf("%s%v", cacheAssetBladeBlogIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetBladeBlogIdKey)
	return err
}

func (m *defaultBladeBlogModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetBladeBlogIdPrefix, primary)
}

func (m *defaultBladeBlogModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bladeBlogRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBladeBlogModel) tableName() string {
	return m.table
}
