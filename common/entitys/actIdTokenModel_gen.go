// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	actIdTokenFieldNames          = builder.RawFieldNames(&ActIdToken{})
	actIdTokenRows                = strings.Join(actIdTokenFieldNames, ",")
	actIdTokenRowsExpectAutoSet   = strings.Join(stringx.Remove(actIdTokenFieldNames, "`create_time`", "`update_time`"), ",")
	actIdTokenRowsWithPlaceHolder = strings.Join(stringx.Remove(actIdTokenFieldNames, "`ID_`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetActIdTokenIDPrefix = "cache:asset:actIdToken:iD:"
)

type (
	actIdTokenModel interface {
		Insert(ctx context.Context, data *ActIdToken) (sql.Result, error)
		FindOne(ctx context.Context, iD string) (*ActIdToken, error)
		Update(ctx context.Context, data *ActIdToken) error
		Delete(ctx context.Context, iD string) error
	}

	defaultActIdTokenModel struct {
		sqlc.CachedConn
		table string
	}

	ActIdToken struct {
		ID         string         `db:"ID_"`
		REV        sql.NullInt64  `db:"REV_"`
		TOKENVALUE sql.NullString `db:"TOKEN_VALUE_"`
		TOKENDATE  time.Time      `db:"TOKEN_DATE_"`
		IPADDRESS  sql.NullString `db:"IP_ADDRESS_"`
		USERAGENT  sql.NullString `db:"USER_AGENT_"`
		USERID     sql.NullString `db:"USER_ID_"`
		TOKENDATA  sql.NullString `db:"TOKEN_DATA_"`
	}
)

func newActIdTokenModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultActIdTokenModel {
	return &defaultActIdTokenModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`act_id_token`",
	}
}

func (m *defaultActIdTokenModel) Insert(ctx context.Context, data *ActIdToken) (sql.Result, error) {
	assetActIdTokenIDKey := fmt.Sprintf("%s%v", cacheAssetActIdTokenIDPrefix, data.ID)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, actIdTokenRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ID, data.REV, data.TOKENVALUE, data.TOKENDATE, data.IPADDRESS, data.USERAGENT, data.USERID, data.TOKENDATA)
	}, assetActIdTokenIDKey)
	return ret, err
}

func (m *defaultActIdTokenModel) FindOne(ctx context.Context, iD string) (*ActIdToken, error) {
	assetActIdTokenIDKey := fmt.Sprintf("%s%v", cacheAssetActIdTokenIDPrefix, iD)
	var resp ActIdToken
	err := m.QueryRowCtx(ctx, &resp, assetActIdTokenIDKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actIdTokenRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, iD)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActIdTokenModel) Update(ctx context.Context, data *ActIdToken) error {
	assetActIdTokenIDKey := fmt.Sprintf("%s%v", cacheAssetActIdTokenIDPrefix, data.ID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `ID_` = ?", m.table, actIdTokenRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.REV, data.TOKENVALUE, data.TOKENDATE, data.IPADDRESS, data.USERAGENT, data.USERID, data.TOKENDATA, data.ID)
	}, assetActIdTokenIDKey)
	return err
}

func (m *defaultActIdTokenModel) Delete(ctx context.Context, iD string) error {
	assetActIdTokenIDKey := fmt.Sprintf("%s%v", cacheAssetActIdTokenIDPrefix, iD)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `ID_` = ?", m.table)
		return conn.ExecCtx(ctx, query, iD)
	}, assetActIdTokenIDKey)
	return err
}

func (m *defaultActIdTokenModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetActIdTokenIDPrefix, primary)
}

func (m *defaultActIdTokenModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actIdTokenRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultActIdTokenModel) tableName() string {
	return m.table
}
