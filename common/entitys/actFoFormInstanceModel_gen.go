// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	actFoFormInstanceFieldNames          = builder.RawFieldNames(&ActFoFormInstance{})
	actFoFormInstanceRows                = strings.Join(actFoFormInstanceFieldNames, ",")
	actFoFormInstanceRowsExpectAutoSet   = strings.Join(stringx.Remove(actFoFormInstanceFieldNames, "`create_time`", "`update_time`"), ",")
	actFoFormInstanceRowsWithPlaceHolder = strings.Join(stringx.Remove(actFoFormInstanceFieldNames, "`ID_`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetActFoFormInstanceIDPrefix = "cache:asset:actFoFormInstance:iD:"
)

type (
	actFoFormInstanceModel interface {
		Insert(ctx context.Context, data *ActFoFormInstance) (sql.Result, error)
		FindOne(ctx context.Context, iD string) (*ActFoFormInstance, error)
		Update(ctx context.Context, data *ActFoFormInstance) error
		Delete(ctx context.Context, iD string) error
	}

	defaultActFoFormInstanceModel struct {
		sqlc.CachedConn
		table string
	}

	ActFoFormInstance struct {
		ID                string         `db:"ID_"`
		FORMDEFINITIONID  string         `db:"FORM_DEFINITION_ID_"`
		TASKID            sql.NullString `db:"TASK_ID_"`
		PROCINSTID        sql.NullString `db:"PROC_INST_ID_"`
		PROCDEFID         sql.NullString `db:"PROC_DEF_ID_"`
		SUBMITTEDDATE     sql.NullTime   `db:"SUBMITTED_DATE_"`
		SUBMITTEDBY       sql.NullString `db:"SUBMITTED_BY_"`
		FORMVALUESID      sql.NullString `db:"FORM_VALUES_ID_"`
		TENANTID          sql.NullString `db:"TENANT_ID_"`
		SCOPEID           sql.NullString `db:"SCOPE_ID_"`
		SCOPETYPE         sql.NullString `db:"SCOPE_TYPE_"`
		SCOPEDEFINITIONID sql.NullString `db:"SCOPE_DEFINITION_ID_"`
	}
)

func newActFoFormInstanceModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultActFoFormInstanceModel {
	return &defaultActFoFormInstanceModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`act_fo_form_instance`",
	}
}

func (m *defaultActFoFormInstanceModel) Insert(ctx context.Context, data *ActFoFormInstance) (sql.Result, error) {
	assetActFoFormInstanceIDKey := fmt.Sprintf("%s%v", cacheAssetActFoFormInstanceIDPrefix, data.ID)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, actFoFormInstanceRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ID, data.FORMDEFINITIONID, data.TASKID, data.PROCINSTID, data.PROCDEFID, data.SUBMITTEDDATE, data.SUBMITTEDBY, data.FORMVALUESID, data.TENANTID, data.SCOPEID, data.SCOPETYPE, data.SCOPEDEFINITIONID)
	}, assetActFoFormInstanceIDKey)
	return ret, err
}

func (m *defaultActFoFormInstanceModel) FindOne(ctx context.Context, iD string) (*ActFoFormInstance, error) {
	assetActFoFormInstanceIDKey := fmt.Sprintf("%s%v", cacheAssetActFoFormInstanceIDPrefix, iD)
	var resp ActFoFormInstance
	err := m.QueryRowCtx(ctx, &resp, assetActFoFormInstanceIDKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actFoFormInstanceRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, iD)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActFoFormInstanceModel) Update(ctx context.Context, data *ActFoFormInstance) error {
	assetActFoFormInstanceIDKey := fmt.Sprintf("%s%v", cacheAssetActFoFormInstanceIDPrefix, data.ID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `ID_` = ?", m.table, actFoFormInstanceRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.FORMDEFINITIONID, data.TASKID, data.PROCINSTID, data.PROCDEFID, data.SUBMITTEDDATE, data.SUBMITTEDBY, data.FORMVALUESID, data.TENANTID, data.SCOPEID, data.SCOPETYPE, data.SCOPEDEFINITIONID, data.ID)
	}, assetActFoFormInstanceIDKey)
	return err
}

func (m *defaultActFoFormInstanceModel) Delete(ctx context.Context, iD string) error {
	assetActFoFormInstanceIDKey := fmt.Sprintf("%s%v", cacheAssetActFoFormInstanceIDPrefix, iD)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `ID_` = ?", m.table)
		return conn.ExecCtx(ctx, query, iD)
	}, assetActFoFormInstanceIDKey)
	return err
}

func (m *defaultActFoFormInstanceModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetActFoFormInstanceIDPrefix, primary)
}

func (m *defaultActFoFormInstanceModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actFoFormInstanceRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultActFoFormInstanceModel) tableName() string {
	return m.table
}
