// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asMenuFieldNames          = builder.RawFieldNames(&AsMenu{})
	asMenuRows                = strings.Join(asMenuFieldNames, ",")
	asMenuRowsExpectAutoSet   = strings.Join(stringx.Remove(asMenuFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	asMenuRowsWithPlaceHolder = strings.Join(stringx.Remove(asMenuFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsMenuIdPrefix = "cache:asset:asMenu:id:"
)

type (
	asMenuModel interface {
		Insert(ctx context.Context, data *AsMenu) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AsMenu, error)
		Update(ctx context.Context, data *AsMenu) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAsMenuModel struct {
		sqlc.CachedConn
		table string
	}

	AsMenu struct {
		Id           int64          `db:"id"`         // 主键
		ParentId     int64          `db:"parent_id"`  // 父菜单id
		Name         sql.NullString `db:"name"`       // 菜单名称
		Alias        sql.NullString `db:"alias"`      // 菜单别名(拼音自动生成)
		Path         sql.NullString `db:"path"`       // 菜单路径
		Icon         sql.NullString `db:"icon"`       // 菜单图标
		Sort         sql.NullInt64  `db:"sort"`       // 排序值
		Category     int64          `db:"category"`   // 菜单类型
		IsOpen       sql.NullInt64  `db:"is_open"`    // 是否打开新页面
		Remark       sql.NullString `db:"remark"`     // 描述
		Status       sql.NullInt64  `db:"status"`     // 数据状态
		IsDeleted    int64          `db:"is_deleted"` // 是否被删除
		UpdateTime   sql.NullTime   `db:"update_time"`
		CreateTime   sql.NullTime   `db:"create_time"`
		UpdateUser   sql.NullInt64  `db:"update_user"`
		CreateUser   sql.NullInt64  `db:"create_user"`
		ReformStatus sql.NullInt64  `db:"reform_status"`
	}
)

func newAsMenuModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsMenuModel {
	return &defaultAsMenuModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_menu`",
	}
}

func (m *defaultAsMenuModel) Insert(ctx context.Context, data *AsMenu) (sql.Result, error) {
	assetAsMenuIdKey := fmt.Sprintf("%s%v", cacheAssetAsMenuIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, asMenuRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ParentId, data.Name, data.Alias, data.Path, data.Icon, data.Sort, data.Category, data.IsOpen, data.Remark, data.Status, data.IsDeleted, data.UpdateUser, data.CreateUser, data.ReformStatus)
	}, assetAsMenuIdKey)
	return ret, err
}

func (m *defaultAsMenuModel) FindOne(ctx context.Context, id int64) (*AsMenu, error) {
	assetAsMenuIdKey := fmt.Sprintf("%s%v", cacheAssetAsMenuIdPrefix, id)
	var resp AsMenu
	err := m.QueryRowCtx(ctx, &resp, assetAsMenuIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asMenuRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsMenuModel) Update(ctx context.Context, data *AsMenu) error {
	assetAsMenuIdKey := fmt.Sprintf("%s%v", cacheAssetAsMenuIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asMenuRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ParentId, data.Name, data.Alias, data.Path, data.Icon, data.Sort, data.Category, data.IsOpen, data.Remark, data.Status, data.IsDeleted, data.UpdateUser, data.CreateUser, data.ReformStatus, data.Id)
	}, assetAsMenuIdKey)
	return err
}

func (m *defaultAsMenuModel) Delete(ctx context.Context, id int64) error {
	assetAsMenuIdKey := fmt.Sprintf("%s%v", cacheAssetAsMenuIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsMenuIdKey)
	return err
}

func (m *defaultAsMenuModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsMenuIdPrefix, primary)
}

func (m *defaultAsMenuModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asMenuRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsMenuModel) tableName() string {
	return m.table
}
