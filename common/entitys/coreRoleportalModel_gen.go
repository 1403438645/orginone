// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	coreRoleportalFieldNames          = builder.RawFieldNames(&CoreRoleportal{})
	coreRoleportalRows                = strings.Join(coreRoleportalFieldNames, ",")
	coreRoleportalRowsExpectAutoSet   = strings.Join(stringx.Remove(coreRoleportalFieldNames, "`create_time`", "`update_time`"), ",")
	coreRoleportalRowsWithPlaceHolder = strings.Join(stringx.Remove(coreRoleportalFieldNames, "`recid`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetCoreRoleportalRecidPrefix = "cache:asset:coreRoleportal:recid:"
)

type (
	coreRoleportalModel interface {
		Insert(ctx context.Context, data *CoreRoleportal) (sql.Result, error)
		FindOne(ctx context.Context, recid int64) (*CoreRoleportal, error)
		Update(ctx context.Context, data *CoreRoleportal) error
		Delete(ctx context.Context, recid int64) error
	}

	defaultCoreRoleportalModel struct {
		sqlc.CachedConn
		table string
	}

	CoreRoleportal struct {
		Recid  int64         `db:"recid"`
		PortId sql.NullInt64 `db:"port_id"`
		Isrole sql.NullInt64 `db:"isrole"`
		RoleId sql.NullInt64 `db:"role_id"`
	}
)

func newCoreRoleportalModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultCoreRoleportalModel {
	return &defaultCoreRoleportalModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`core_roleportal`",
	}
}

func (m *defaultCoreRoleportalModel) Insert(ctx context.Context, data *CoreRoleportal) (sql.Result, error) {
	assetCoreRoleportalRecidKey := fmt.Sprintf("%s%v", cacheAssetCoreRoleportalRecidPrefix, data.Recid)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, coreRoleportalRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Recid, data.PortId, data.Isrole, data.RoleId)
	}, assetCoreRoleportalRecidKey)
	return ret, err
}

func (m *defaultCoreRoleportalModel) FindOne(ctx context.Context, recid int64) (*CoreRoleportal, error) {
	assetCoreRoleportalRecidKey := fmt.Sprintf("%s%v", cacheAssetCoreRoleportalRecidPrefix, recid)
	var resp CoreRoleportal
	err := m.QueryRowCtx(ctx, &resp, assetCoreRoleportalRecidKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `recid` = ? limit 1", coreRoleportalRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, recid)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCoreRoleportalModel) Update(ctx context.Context, data *CoreRoleportal) error {
	assetCoreRoleportalRecidKey := fmt.Sprintf("%s%v", cacheAssetCoreRoleportalRecidPrefix, data.Recid)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `recid` = ?", m.table, coreRoleportalRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.PortId, data.Isrole, data.RoleId, data.Recid)
	}, assetCoreRoleportalRecidKey)
	return err
}

func (m *defaultCoreRoleportalModel) Delete(ctx context.Context, recid int64) error {
	assetCoreRoleportalRecidKey := fmt.Sprintf("%s%v", cacheAssetCoreRoleportalRecidPrefix, recid)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `recid` = ?", m.table)
		return conn.ExecCtx(ctx, query, recid)
	}, assetCoreRoleportalRecidKey)
	return err
}

func (m *defaultCoreRoleportalModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetCoreRoleportalRecidPrefix, primary)
}

func (m *defaultCoreRoleportalModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `recid` = ? limit 1", coreRoleportalRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultCoreRoleportalModel) tableName() string {
	return m.table
}
