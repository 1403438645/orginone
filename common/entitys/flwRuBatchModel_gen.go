// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	flwRuBatchFieldNames          = builder.RawFieldNames(&FlwRuBatch{})
	flwRuBatchRows                = strings.Join(flwRuBatchFieldNames, ",")
	flwRuBatchRowsExpectAutoSet   = strings.Join(stringx.Remove(flwRuBatchFieldNames, "`create_time`", "`update_time`"), ",")
	flwRuBatchRowsWithPlaceHolder = strings.Join(stringx.Remove(flwRuBatchFieldNames, "`ID_`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetFlwRuBatchIDPrefix = "cache:asset:flwRuBatch:iD:"
)

type (
	flwRuBatchModel interface {
		Insert(ctx context.Context, data *FlwRuBatch) (sql.Result, error)
		FindOne(ctx context.Context, iD string) (*FlwRuBatch, error)
		Update(ctx context.Context, data *FlwRuBatch) error
		Delete(ctx context.Context, iD string) error
	}

	defaultFlwRuBatchModel struct {
		sqlc.CachedConn
		table string
	}

	FlwRuBatch struct {
		ID           string         `db:"ID_"`
		REV          sql.NullInt64  `db:"REV_"`
		TYPE         string         `db:"TYPE_"`
		SEARCHKEY    sql.NullString `db:"SEARCH_KEY_"`
		SEARCHKEY2   sql.NullString `db:"SEARCH_KEY2_"`
		CREATETIME   time.Time      `db:"CREATE_TIME_"`
		COMPLETETIME sql.NullTime   `db:"COMPLETE_TIME_"`
		STATUS       sql.NullString `db:"STATUS_"`
		BATCHDOCID   sql.NullString `db:"BATCH_DOC_ID_"`
		TENANTID     string         `db:"TENANT_ID_"`
	}
)

func newFlwRuBatchModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultFlwRuBatchModel {
	return &defaultFlwRuBatchModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`flw_ru_batch`",
	}
}

func (m *defaultFlwRuBatchModel) Insert(ctx context.Context, data *FlwRuBatch) (sql.Result, error) {
	assetFlwRuBatchIDKey := fmt.Sprintf("%s%v", cacheAssetFlwRuBatchIDPrefix, data.ID)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, flwRuBatchRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ID, data.REV, data.TYPE, data.SEARCHKEY, data.SEARCHKEY2, data.CREATETIME, data.COMPLETETIME, data.STATUS, data.BATCHDOCID, data.TENANTID)
	}, assetFlwRuBatchIDKey)
	return ret, err
}

func (m *defaultFlwRuBatchModel) FindOne(ctx context.Context, iD string) (*FlwRuBatch, error) {
	assetFlwRuBatchIDKey := fmt.Sprintf("%s%v", cacheAssetFlwRuBatchIDPrefix, iD)
	var resp FlwRuBatch
	err := m.QueryRowCtx(ctx, &resp, assetFlwRuBatchIDKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", flwRuBatchRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, iD)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFlwRuBatchModel) Update(ctx context.Context, data *FlwRuBatch) error {
	assetFlwRuBatchIDKey := fmt.Sprintf("%s%v", cacheAssetFlwRuBatchIDPrefix, data.ID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `ID_` = ?", m.table, flwRuBatchRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.REV, data.TYPE, data.SEARCHKEY, data.SEARCHKEY2, data.CREATETIME, data.COMPLETETIME, data.STATUS, data.BATCHDOCID, data.TENANTID, data.ID)
	}, assetFlwRuBatchIDKey)
	return err
}

func (m *defaultFlwRuBatchModel) Delete(ctx context.Context, iD string) error {
	assetFlwRuBatchIDKey := fmt.Sprintf("%s%v", cacheAssetFlwRuBatchIDPrefix, iD)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `ID_` = ?", m.table)
		return conn.ExecCtx(ctx, query, iD)
	}, assetFlwRuBatchIDKey)
	return err
}

func (m *defaultFlwRuBatchModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetFlwRuBatchIDPrefix, primary)
}

func (m *defaultFlwRuBatchModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", flwRuBatchRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultFlwRuBatchModel) tableName() string {
	return m.table
}
