// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	actCmmnHiCaseInstFieldNames          = builder.RawFieldNames(&ActCmmnHiCaseInst{})
	actCmmnHiCaseInstRows                = strings.Join(actCmmnHiCaseInstFieldNames, ",")
	actCmmnHiCaseInstRowsExpectAutoSet   = strings.Join(stringx.Remove(actCmmnHiCaseInstFieldNames, "`create_time`", "`update_time`"), ",")
	actCmmnHiCaseInstRowsWithPlaceHolder = strings.Join(stringx.Remove(actCmmnHiCaseInstFieldNames, "`ID_`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetActCmmnHiCaseInstIDPrefix = "cache:asset:actCmmnHiCaseInst:iD:"
)

type (
	actCmmnHiCaseInstModel interface {
		Insert(ctx context.Context, data *ActCmmnHiCaseInst) (sql.Result, error)
		FindOne(ctx context.Context, iD string) (*ActCmmnHiCaseInst, error)
		Update(ctx context.Context, data *ActCmmnHiCaseInst) error
		Delete(ctx context.Context, iD string) error
	}

	defaultActCmmnHiCaseInstModel struct {
		sqlc.CachedConn
		table string
	}

	ActCmmnHiCaseInst struct {
		ID           string         `db:"ID_"`
		REV          int64          `db:"REV_"`
		BUSINESSKEY  sql.NullString `db:"BUSINESS_KEY_"`
		NAME         sql.NullString `db:"NAME_"`
		PARENTID     sql.NullString `db:"PARENT_ID_"`
		CASEDEFID    sql.NullString `db:"CASE_DEF_ID_"`
		STATE        sql.NullString `db:"STATE_"`
		STARTTIME    sql.NullTime   `db:"START_TIME_"`
		ENDTIME      sql.NullTime   `db:"END_TIME_"`
		STARTUSERID  sql.NullString `db:"START_USER_ID_"`
		CALLBACKID   sql.NullString `db:"CALLBACK_ID_"`
		CALLBACKTYPE sql.NullString `db:"CALLBACK_TYPE_"`
		TENANTID     string         `db:"TENANT_ID_"`
	}
)

func newActCmmnHiCaseInstModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultActCmmnHiCaseInstModel {
	return &defaultActCmmnHiCaseInstModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`act_cmmn_hi_case_inst`",
	}
}

func (m *defaultActCmmnHiCaseInstModel) Insert(ctx context.Context, data *ActCmmnHiCaseInst) (sql.Result, error) {
	assetActCmmnHiCaseInstIDKey := fmt.Sprintf("%s%v", cacheAssetActCmmnHiCaseInstIDPrefix, data.ID)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, actCmmnHiCaseInstRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ID, data.REV, data.BUSINESSKEY, data.NAME, data.PARENTID, data.CASEDEFID, data.STATE, data.STARTTIME, data.ENDTIME, data.STARTUSERID, data.CALLBACKID, data.CALLBACKTYPE, data.TENANTID)
	}, assetActCmmnHiCaseInstIDKey)
	return ret, err
}

func (m *defaultActCmmnHiCaseInstModel) FindOne(ctx context.Context, iD string) (*ActCmmnHiCaseInst, error) {
	assetActCmmnHiCaseInstIDKey := fmt.Sprintf("%s%v", cacheAssetActCmmnHiCaseInstIDPrefix, iD)
	var resp ActCmmnHiCaseInst
	err := m.QueryRowCtx(ctx, &resp, assetActCmmnHiCaseInstIDKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actCmmnHiCaseInstRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, iD)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActCmmnHiCaseInstModel) Update(ctx context.Context, data *ActCmmnHiCaseInst) error {
	assetActCmmnHiCaseInstIDKey := fmt.Sprintf("%s%v", cacheAssetActCmmnHiCaseInstIDPrefix, data.ID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `ID_` = ?", m.table, actCmmnHiCaseInstRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.REV, data.BUSINESSKEY, data.NAME, data.PARENTID, data.CASEDEFID, data.STATE, data.STARTTIME, data.ENDTIME, data.STARTUSERID, data.CALLBACKID, data.CALLBACKTYPE, data.TENANTID, data.ID)
	}, assetActCmmnHiCaseInstIDKey)
	return err
}

func (m *defaultActCmmnHiCaseInstModel) Delete(ctx context.Context, iD string) error {
	assetActCmmnHiCaseInstIDKey := fmt.Sprintf("%s%v", cacheAssetActCmmnHiCaseInstIDPrefix, iD)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `ID_` = ?", m.table)
		return conn.ExecCtx(ctx, query, iD)
	}, assetActCmmnHiCaseInstIDKey)
	return err
}

func (m *defaultActCmmnHiCaseInstModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetActCmmnHiCaseInstIDPrefix, primary)
}

func (m *defaultActCmmnHiCaseInstModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actCmmnHiCaseInstRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultActCmmnHiCaseInstModel) tableName() string {
	return m.table
}
