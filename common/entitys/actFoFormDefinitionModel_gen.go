// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	actFoFormDefinitionFieldNames          = builder.RawFieldNames(&ActFoFormDefinition{})
	actFoFormDefinitionRows                = strings.Join(actFoFormDefinitionFieldNames, ",")
	actFoFormDefinitionRowsExpectAutoSet   = strings.Join(stringx.Remove(actFoFormDefinitionFieldNames, "`create_time`", "`update_time`"), ",")
	actFoFormDefinitionRowsWithPlaceHolder = strings.Join(stringx.Remove(actFoFormDefinitionFieldNames, "`ID_`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetActFoFormDefinitionIDPrefix = "cache:asset:actFoFormDefinition:iD:"
)

type (
	actFoFormDefinitionModel interface {
		Insert(ctx context.Context, data *ActFoFormDefinition) (sql.Result, error)
		FindOne(ctx context.Context, iD string) (*ActFoFormDefinition, error)
		Update(ctx context.Context, data *ActFoFormDefinition) error
		Delete(ctx context.Context, iD string) error
	}

	defaultActFoFormDefinitionModel struct {
		sqlc.CachedConn
		table string
	}

	ActFoFormDefinition struct {
		ID           string         `db:"ID_"`
		NAME         sql.NullString `db:"NAME_"`
		VERSION      sql.NullInt64  `db:"VERSION_"`
		KEY          sql.NullString `db:"KEY_"`
		CATEGORY     sql.NullString `db:"CATEGORY_"`
		DEPLOYMENTID sql.NullString `db:"DEPLOYMENT_ID_"`
		TENANTID     sql.NullString `db:"TENANT_ID_"`
		RESOURCENAME sql.NullString `db:"RESOURCE_NAME_"`
		DESCRIPTION  sql.NullString `db:"DESCRIPTION_"`
	}
)

func newActFoFormDefinitionModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultActFoFormDefinitionModel {
	return &defaultActFoFormDefinitionModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`act_fo_form_definition`",
	}
}

func (m *defaultActFoFormDefinitionModel) Insert(ctx context.Context, data *ActFoFormDefinition) (sql.Result, error) {
	assetActFoFormDefinitionIDKey := fmt.Sprintf("%s%v", cacheAssetActFoFormDefinitionIDPrefix, data.ID)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, actFoFormDefinitionRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ID, data.NAME, data.VERSION, data.KEY, data.CATEGORY, data.DEPLOYMENTID, data.TENANTID, data.RESOURCENAME, data.DESCRIPTION)
	}, assetActFoFormDefinitionIDKey)
	return ret, err
}

func (m *defaultActFoFormDefinitionModel) FindOne(ctx context.Context, iD string) (*ActFoFormDefinition, error) {
	assetActFoFormDefinitionIDKey := fmt.Sprintf("%s%v", cacheAssetActFoFormDefinitionIDPrefix, iD)
	var resp ActFoFormDefinition
	err := m.QueryRowCtx(ctx, &resp, assetActFoFormDefinitionIDKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actFoFormDefinitionRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, iD)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActFoFormDefinitionModel) Update(ctx context.Context, data *ActFoFormDefinition) error {
	assetActFoFormDefinitionIDKey := fmt.Sprintf("%s%v", cacheAssetActFoFormDefinitionIDPrefix, data.ID)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `ID_` = ?", m.table, actFoFormDefinitionRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.NAME, data.VERSION, data.KEY, data.CATEGORY, data.DEPLOYMENTID, data.TENANTID, data.RESOURCENAME, data.DESCRIPTION, data.ID)
	}, assetActFoFormDefinitionIDKey)
	return err
}

func (m *defaultActFoFormDefinitionModel) Delete(ctx context.Context, iD string) error {
	assetActFoFormDefinitionIDKey := fmt.Sprintf("%s%v", cacheAssetActFoFormDefinitionIDPrefix, iD)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `ID_` = ?", m.table)
		return conn.ExecCtx(ctx, query, iD)
	}, assetActFoFormDefinitionIDKey)
	return err
}

func (m *defaultActFoFormDefinitionModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetActFoFormDefinitionIDPrefix, primary)
}

func (m *defaultActFoFormDefinitionModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `ID_` = ? limit 1", actFoFormDefinitionRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultActFoFormDefinitionModel) tableName() string {
	return m.table
}
