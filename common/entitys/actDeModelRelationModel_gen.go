// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	actDeModelRelationFieldNames          = builder.RawFieldNames(&ActDeModelRelation{})
	actDeModelRelationRows                = strings.Join(actDeModelRelationFieldNames, ",")
	actDeModelRelationRowsExpectAutoSet   = strings.Join(stringx.Remove(actDeModelRelationFieldNames, "`create_time`", "`update_time`"), ",")
	actDeModelRelationRowsWithPlaceHolder = strings.Join(stringx.Remove(actDeModelRelationFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetActDeModelRelationIdPrefix = "cache:asset:actDeModelRelation:id:"
)

type (
	actDeModelRelationModel interface {
		Insert(ctx context.Context, data *ActDeModelRelation) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*ActDeModelRelation, error)
		Update(ctx context.Context, data *ActDeModelRelation) error
		Delete(ctx context.Context, id string) error
	}

	defaultActDeModelRelationModel struct {
		sqlc.CachedConn
		table string
	}

	ActDeModelRelation struct {
		Id            string         `db:"id"`
		ParentModelId sql.NullString `db:"parent_model_id"`
		ModelId       sql.NullString `db:"model_id"`
		RelationType  sql.NullString `db:"relation_type"`
	}
)

func newActDeModelRelationModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultActDeModelRelationModel {
	return &defaultActDeModelRelationModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`act_de_model_relation`",
	}
}

func (m *defaultActDeModelRelationModel) Insert(ctx context.Context, data *ActDeModelRelation) (sql.Result, error) {
	assetActDeModelRelationIdKey := fmt.Sprintf("%s%v", cacheAssetActDeModelRelationIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, actDeModelRelationRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.ParentModelId, data.ModelId, data.RelationType)
	}, assetActDeModelRelationIdKey)
	return ret, err
}

func (m *defaultActDeModelRelationModel) FindOne(ctx context.Context, id string) (*ActDeModelRelation, error) {
	assetActDeModelRelationIdKey := fmt.Sprintf("%s%v", cacheAssetActDeModelRelationIdPrefix, id)
	var resp ActDeModelRelation
	err := m.QueryRowCtx(ctx, &resp, assetActDeModelRelationIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", actDeModelRelationRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActDeModelRelationModel) Update(ctx context.Context, data *ActDeModelRelation) error {
	assetActDeModelRelationIdKey := fmt.Sprintf("%s%v", cacheAssetActDeModelRelationIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, actDeModelRelationRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ParentModelId, data.ModelId, data.RelationType, data.Id)
	}, assetActDeModelRelationIdKey)
	return err
}

func (m *defaultActDeModelRelationModel) Delete(ctx context.Context, id string) error {
	assetActDeModelRelationIdKey := fmt.Sprintf("%s%v", cacheAssetActDeModelRelationIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetActDeModelRelationIdKey)
	return err
}

func (m *defaultActDeModelRelationModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetActDeModelRelationIdPrefix, primary)
}

func (m *defaultActDeModelRelationModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", actDeModelRelationRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultActDeModelRelationModel) tableName() string {
	return m.table
}
