// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asMarketRoleDistributionFieldNames          = builder.RawFieldNames(&AsMarketRoleDistribution{})
	asMarketRoleDistributionRows                = strings.Join(asMarketRoleDistributionFieldNames, ",")
	asMarketRoleDistributionRowsExpectAutoSet   = strings.Join(stringx.Remove(asMarketRoleDistributionFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	asMarketRoleDistributionRowsWithPlaceHolder = strings.Join(stringx.Remove(asMarketRoleDistributionFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsMarketRoleDistributionIdPrefix = "cache:asset:asMarketRoleDistribution:id:"
)

type (
	asMarketRoleDistributionModel interface {
		Insert(ctx context.Context, data *AsMarketRoleDistribution) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AsMarketRoleDistribution, error)
		Update(ctx context.Context, data *AsMarketRoleDistribution) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAsMarketRoleDistributionModel struct {
		sqlc.CachedConn
		table string
	}

	AsMarketRoleDistribution struct {
		Id         int64          `db:"id"`          // 主键
		CreateUser sql.NullInt64  `db:"create_user"` // 创建人
		CreateTime sql.NullTime   `db:"create_time"` // 创建时间
		UpdateUser sql.NullInt64  `db:"update_user"` // 修改人
		UpdateTime sql.NullTime   `db:"update_time"` // 修改时间
		Status     sql.NullInt64  `db:"status"`      // 状态
		IsDeleted  sql.NullInt64  `db:"is_deleted"`  // 是否已删除
		RoleId     sql.NullInt64  `db:"role_id"`     // 角色id
		UserId     sql.NullInt64  `db:"user_id"`     // 用户id
		AgencyId   sql.NullInt64  `db:"agency_id"`   // 部门id
		JobId      sql.NullInt64  `db:"job_id"`      // 岗位id
		TenantCode sql.NullString `db:"tenant_code"`
	}
)

func newAsMarketRoleDistributionModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsMarketRoleDistributionModel {
	return &defaultAsMarketRoleDistributionModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_market_role_distribution`",
	}
}

func (m *defaultAsMarketRoleDistributionModel) Insert(ctx context.Context, data *AsMarketRoleDistribution) (sql.Result, error) {
	assetAsMarketRoleDistributionIdKey := fmt.Sprintf("%s%v", cacheAssetAsMarketRoleDistributionIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, asMarketRoleDistributionRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.CreateUser, data.UpdateUser, data.Status, data.IsDeleted, data.RoleId, data.UserId, data.AgencyId, data.JobId, data.TenantCode)
	}, assetAsMarketRoleDistributionIdKey)
	return ret, err
}

func (m *defaultAsMarketRoleDistributionModel) FindOne(ctx context.Context, id int64) (*AsMarketRoleDistribution, error) {
	assetAsMarketRoleDistributionIdKey := fmt.Sprintf("%s%v", cacheAssetAsMarketRoleDistributionIdPrefix, id)
	var resp AsMarketRoleDistribution
	err := m.QueryRowCtx(ctx, &resp, assetAsMarketRoleDistributionIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asMarketRoleDistributionRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsMarketRoleDistributionModel) Update(ctx context.Context, data *AsMarketRoleDistribution) error {
	assetAsMarketRoleDistributionIdKey := fmt.Sprintf("%s%v", cacheAssetAsMarketRoleDistributionIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asMarketRoleDistributionRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.CreateUser, data.UpdateUser, data.Status, data.IsDeleted, data.RoleId, data.UserId, data.AgencyId, data.JobId, data.TenantCode, data.Id)
	}, assetAsMarketRoleDistributionIdKey)
	return err
}

func (m *defaultAsMarketRoleDistributionModel) Delete(ctx context.Context, id int64) error {
	assetAsMarketRoleDistributionIdKey := fmt.Sprintf("%s%v", cacheAssetAsMarketRoleDistributionIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsMarketRoleDistributionIdKey)
	return err
}

func (m *defaultAsMarketRoleDistributionModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsMarketRoleDistributionIdPrefix, primary)
}

func (m *defaultAsMarketRoleDistributionModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asMarketRoleDistributionRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsMarketRoleDistributionModel) tableName() string {
	return m.table
}
