// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asInputDataFieldNames          = builder.RawFieldNames(&AsInputData{})
	asInputDataRows                = strings.Join(asInputDataFieldNames, ",")
	asInputDataRowsExpectAutoSet   = strings.Join(stringx.Remove(asInputDataFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	asInputDataRowsWithPlaceHolder = strings.Join(stringx.Remove(asInputDataFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsInputDataIdPrefix = "cache:asset:asInputData:id:"
)

type (
	asInputDataModel interface {
		Insert(ctx context.Context, data *AsInputData) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AsInputData, error)
		Update(ctx context.Context, data *AsInputData) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAsInputDataModel struct {
		sqlc.CachedConn
		table string
	}

	AsInputData struct {
		Id         int64           `db:"id"`          // 主键
		FileName   sql.NullString  `db:"file_name"`   // 导入的文件名称
		TableName  sql.NullString  `db:"table_name"`  // 表名称
		Tp         int64           `db:"tp"`          // 导入类型 0-文件 1-数据
		Status     int64           `db:"status"`      // 文件导入状态 0-导入中，1-成功； 2-失败
		TCount     int64           `db:"t_count"`     // 数据成功导入条数
		FCount     int64           `db:"f_count"`     // 数据失败导入条数
		Context    sql.NullString  `db:"context"`     // 数据失败原因
		CreateTime time.Time       `db:"create_time"` // 创建时间（即开始导入时间）
		CreateUser sql.NullInt64   `db:"create_user"` // 创建人
		UpdateTime time.Time       `db:"update_time"` // 修改时间
		UpdateUser sql.NullInt64   `db:"update_user"` // 修改人
		IsDeleted  int64           `db:"is_deleted"`  // 是否有效 0-有效  1-删除
		EndTime    sql.NullTime    `db:"end_time"`    // 结束时间
		TotalTime  sql.NullFloat64 `db:"total_time"`  // 总共耗时（单位s）
		FileId     sql.NullInt64   `db:"file_id"`     // 关联导入文件id
		ImportType sql.NullInt64   `db:"import_type"`
		TenantCode sql.NullString  `db:"tenant_code"`
	}
)

func newAsInputDataModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsInputDataModel {
	return &defaultAsInputDataModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_input_data`",
	}
}

func (m *defaultAsInputDataModel) Insert(ctx context.Context, data *AsInputData) (sql.Result, error) {
	assetAsInputDataIdKey := fmt.Sprintf("%s%v", cacheAssetAsInputDataIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, asInputDataRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.FileName, data.TableName, data.Tp, data.Status, data.TCount, data.FCount, data.Context, data.CreateUser, data.UpdateUser, data.IsDeleted, data.EndTime, data.TotalTime, data.FileId, data.ImportType, data.TenantCode)
	}, assetAsInputDataIdKey)
	return ret, err
}

func (m *defaultAsInputDataModel) FindOne(ctx context.Context, id int64) (*AsInputData, error) {
	assetAsInputDataIdKey := fmt.Sprintf("%s%v", cacheAssetAsInputDataIdPrefix, id)
	var resp AsInputData
	err := m.QueryRowCtx(ctx, &resp, assetAsInputDataIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asInputDataRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsInputDataModel) Update(ctx context.Context, data *AsInputData) error {
	assetAsInputDataIdKey := fmt.Sprintf("%s%v", cacheAssetAsInputDataIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asInputDataRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.FileName, data.TableName, data.Tp, data.Status, data.TCount, data.FCount, data.Context, data.CreateUser, data.UpdateUser, data.IsDeleted, data.EndTime, data.TotalTime, data.FileId, data.ImportType, data.TenantCode, data.Id)
	}, assetAsInputDataIdKey)
	return err
}

func (m *defaultAsInputDataModel) Delete(ctx context.Context, id int64) error {
	assetAsInputDataIdKey := fmt.Sprintf("%s%v", cacheAssetAsInputDataIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsInputDataIdKey)
	return err
}

func (m *defaultAsInputDataModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsInputDataIdPrefix, primary)
}

func (m *defaultAsInputDataModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asInputDataRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsInputDataModel) tableName() string {
	return m.table
}
