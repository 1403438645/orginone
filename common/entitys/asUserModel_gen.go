// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asUserFieldNames          = builder.RawFieldNames(&AsUser{})
	asUserRows                = strings.Join(asUserFieldNames, ",")
	asUserRowsExpectAutoSet   = strings.Join(stringx.Remove(asUserFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	asUserRowsWithPlaceHolder = strings.Join(stringx.Remove(asUserFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsUserIdPrefix = "cache:asset:asUser:id:"
)

type (
	asUserModel interface {
		Insert(ctx context.Context, data *AsUser) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AsUser, error)
		Update(ctx context.Context, data *AsUser) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAsUserModel struct {
		sqlc.CachedConn
		table string
	}

	AsUser struct {
		Id                  int64          `db:"id"`                    // 用户id
		TenantCode          sql.NullString `db:"tenant_code"`           // 租户编码
		Pwd                 string         `db:"pwd"`                   // 密码
		PhoneNumber         sql.NullString `db:"phone_number"`          // 账号
		IsAdmin             int64          `db:"is_admin"`              // 用户是否为对应租户的超级管理员
		UpdateTime          time.Time      `db:"update_time"`           // 最后一次更新时间戳
		CreateTime          time.Time      `db:"create_time"`           // 添加时间
		CreateUser          sql.NullInt64  `db:"create_user"`           // 添加者
		UpdateUser          sql.NullInt64  `db:"update_user"`           // 修改者
		IsDeleted           int64          `db:"is_deleted"`            // 状态 1：有效 0：无效
		Status              int64          `db:"status"`                // 用户状态：0-不可用 1-审核中 2-可用 3-未激活
		TenantApplyingState int64          `db:"tenant_applying_state"` // 与租户的隶属关系： 0-注册,新增来的，1-申请的并在审核中的，2-审核通过的（已加入的）3 审核拒绝的，4-全部的 5-0和2的集合
		IsMaster            sql.NullInt64  `db:"is_master"`             // 主从关系：1->主；0->从；
		IsCreated           int64          `db:"is_created"`            // 0-租户创建者，1-租户单位管理员，2-既是租户创建者又是单位管理员，3-都不是
		OpenId              sql.NullString `db:"open_id"`               // 移动端openId
		UserName            sql.NullString `db:"user_name"`             // 用户名
	}
)

func newAsUserModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsUserModel {
	return &defaultAsUserModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_user`",
	}
}

func (m *defaultAsUserModel) Insert(ctx context.Context, data *AsUser) (sql.Result, error) {
	assetAsUserIdKey := fmt.Sprintf("%s%v", cacheAssetAsUserIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, asUserRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.TenantCode, data.Pwd, data.PhoneNumber, data.IsAdmin, data.CreateUser, data.UpdateUser, data.IsDeleted, data.Status, data.TenantApplyingState, data.IsMaster, data.IsCreated, data.OpenId, data.UserName)
	}, assetAsUserIdKey)
	return ret, err
}

func (m *defaultAsUserModel) FindOne(ctx context.Context, id int64) (*AsUser, error) {
	assetAsUserIdKey := fmt.Sprintf("%s%v", cacheAssetAsUserIdPrefix, id)
	var resp AsUser
	err := m.QueryRowCtx(ctx, &resp, assetAsUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asUserRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsUserModel) Update(ctx context.Context, data *AsUser) error {
	assetAsUserIdKey := fmt.Sprintf("%s%v", cacheAssetAsUserIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asUserRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.TenantCode, data.Pwd, data.PhoneNumber, data.IsAdmin, data.CreateUser, data.UpdateUser, data.IsDeleted, data.Status, data.TenantApplyingState, data.IsMaster, data.IsCreated, data.OpenId, data.UserName, data.Id)
	}, assetAsUserIdKey)
	return err
}

func (m *defaultAsUserModel) Delete(ctx context.Context, id int64) error {
	assetAsUserIdKey := fmt.Sprintf("%s%v", cacheAssetAsUserIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsUserIdKey)
	return err
}

func (m *defaultAsUserModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsUserIdPrefix, primary)
}

func (m *defaultAsUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asUserRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsUserModel) tableName() string {
	return m.table
}
