// Code generated by goctl. DO NOT EDIT!

package entitys

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	asRoleGroupFieldNames          = builder.RawFieldNames(&AsRoleGroup{})
	asRoleGroupRows                = strings.Join(asRoleGroupFieldNames, ",")
	asRoleGroupRowsExpectAutoSet   = strings.Join(stringx.Remove(asRoleGroupFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	asRoleGroupRowsWithPlaceHolder = strings.Join(stringx.Remove(asRoleGroupFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAssetAsRoleGroupIdPrefix = "cache:asset:asRoleGroup:id:"
)

type (
	asRoleGroupModel interface {
		Insert(ctx context.Context, data *AsRoleGroup) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AsRoleGroup, error)
		Update(ctx context.Context, data *AsRoleGroup) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAsRoleGroupModel struct {
		sqlc.CachedConn
		table string
	}

	AsRoleGroup struct {
		Id            int64     `db:"id"`
		RoleGroupName string    `db:"role_group_name"`
		IsDeleted     int64     `db:"is_deleted"`
		AddTime       time.Time `db:"add_time"`
		SceneCode     string    `db:"scene_code"`
	}
)

func newAsRoleGroupModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAsRoleGroupModel {
	return &defaultAsRoleGroupModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`as_role_group`",
	}
}

func (m *defaultAsRoleGroupModel) Insert(ctx context.Context, data *AsRoleGroup) (sql.Result, error) {
	assetAsRoleGroupIdKey := fmt.Sprintf("%s%v", cacheAssetAsRoleGroupIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, asRoleGroupRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.RoleGroupName, data.IsDeleted, data.AddTime, data.SceneCode)
	}, assetAsRoleGroupIdKey)
	return ret, err
}

func (m *defaultAsRoleGroupModel) FindOne(ctx context.Context, id int64) (*AsRoleGroup, error) {
	assetAsRoleGroupIdKey := fmt.Sprintf("%s%v", cacheAssetAsRoleGroupIdPrefix, id)
	var resp AsRoleGroup
	err := m.QueryRowCtx(ctx, &resp, assetAsRoleGroupIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asRoleGroupRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAsRoleGroupModel) Update(ctx context.Context, data *AsRoleGroup) error {
	assetAsRoleGroupIdKey := fmt.Sprintf("%s%v", cacheAssetAsRoleGroupIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, asRoleGroupRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.RoleGroupName, data.IsDeleted, data.AddTime, data.SceneCode, data.Id)
	}, assetAsRoleGroupIdKey)
	return err
}

func (m *defaultAsRoleGroupModel) Delete(ctx context.Context, id int64) error {
	assetAsRoleGroupIdKey := fmt.Sprintf("%s%v", cacheAssetAsRoleGroupIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetAsRoleGroupIdKey)
	return err
}

func (m *defaultAsRoleGroupModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetAsRoleGroupIdPrefix, primary)
}

func (m *defaultAsRoleGroupModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", asRoleGroupRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAsRoleGroupModel) tableName() string {
	return m.table
}
