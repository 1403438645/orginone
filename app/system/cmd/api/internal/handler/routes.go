// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	acttodo "orginone/app/system/cmd/api/internal/handler/acttodo"
	administrative "orginone/app/system/cmd/api/internal/handler/administrative"
	allgroup "orginone/app/system/cmd/api/internal/handler/allgroup"
	api "orginone/app/system/cmd/api/internal/handler/api"
	appjob "orginone/app/system/cmd/api/internal/handler/appjob"
	async "orginone/app/system/cmd/api/internal/handler/async"
	dict "orginone/app/system/cmd/api/internal/handler/dict"
	grouptenantrelations "orginone/app/system/cmd/api/internal/handler/grouptenantrelations"
	inner "orginone/app/system/cmd/api/internal/handler/inner"
	jobs "orginone/app/system/cmd/api/internal/handler/jobs"
	menus "orginone/app/system/cmd/api/internal/handler/menus"
	message "orginone/app/system/cmd/api/internal/handler/message"
	organs "orginone/app/system/cmd/api/internal/handler/organs"
	person "orginone/app/system/cmd/api/internal/handler/person"
	properties "orginone/app/system/cmd/api/internal/handler/properties"
	propertiesdistribution "orginone/app/system/cmd/api/internal/handler/propertiesdistribution"
	roles "orginone/app/system/cmd/api/internal/handler/roles"
	scenes "orginone/app/system/cmd/api/internal/handler/scenes"
	tenant "orginone/app/system/cmd/api/internal/handler/tenant"
	tenanticon "orginone/app/system/cmd/api/internal/handler/tenanticon"
	token "orginone/app/system/cmd/api/internal/handler/token"
	image "orginone/app/system/cmd/api/internal/handler/image"
	"orginone/app/system/cmd/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/listAll", // TEST OK
				Handler: administrative.ListAllHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/removeByIds",
				Handler: administrative.RemoveByIdsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/submit",
				Handler: administrative.SubmitHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/tree", // TEST OK
				Handler: administrative.TreeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/treeV2",
				Handler: administrative.TreeV2Handler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/asset-system/administrative"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/create/group", // TEST OK
				Handler: allgroup.CreategroupHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/group/by/id", // TEST OK
				Handler: allgroup.GetgroupbyidHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/group/manager/unit",
				Handler: allgroup.GetgroupmanagerunitHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/group/manager/unitId",
				Handler: allgroup.GetgroupmanagerunitIdHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/groupIdList/by/tenantCode",
				Handler: allgroup.GetgroupIdListbytenantCodeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/manager/group/id/list",
				Handler: allgroup.GetmanagergroupidlistHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/manager/unit/id/list",
				Handler: allgroup.GetmanagerunitidlistHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/manager/unitId",
				Handler: allgroup.GetmanagerunitIdHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/user/manager/group/id/list",
				Handler: allgroup.GetusermanagergroupidlistHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getSimpleGroupById", // TEST OK
				Handler: allgroup.GetSimpleGroupByIdHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getTenantCodeControlGroup",
				Handler: allgroup.GetTenantCodeControlGroupHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list", // TEST OK
				Handler: allgroup.ListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list/by/tenantCode",
				Handler: allgroup.ListbytenantCodeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list/now/tenantCode", // TEST OK
				Handler: allgroup.ListnowtenantCodeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/listAll", // TEST OK
				Handler: allgroup.ListAllHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/listPage",
				Handler: allgroup.ListPageHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/removeByIds", // TEST OK
				Handler: allgroup.RemoveByIdsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/submit",
				Handler: allgroup.SubmitHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/asset-system/allgroup"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/tenant/list", // TEST OK
				Handler: api.TenantlistHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/asset-system/api"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/createAppJob",
				Handler: appjob.CreateAppJobHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getAllAppJobPage",
				Handler: appjob.GetAllAppJobPageHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getAppJobPage",
				Handler: appjob.GetAppJobPageHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/listPage",
				Handler: appjob.ListPageHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/remove",
				Handler: appjob.RemoveHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/submit",
				Handler: appjob.SubmitHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/asset-system/appjob"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/exportGroupUnitData", // TEST OK
				Handler: async.ExportGroupUnitDataHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/exportPersonData", // TEST OK
				Handler: async.ExportPersonDataHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getImportProgress", // TEST OK
				Handler: async.GetImportProgressHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/groupAppDistribute", // TEST OK
				Handler: async.GroupAppDistributeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/importDept", // TEST OK
				Handler: async.ImportDeptHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/importGroupRelation", // TEST OK
				Handler: async.ImportGroupRelationHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/importJob", // TEST OK
				Handler: async.ImportJobHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/importMasterUnit", // TEST OK
				Handler: async.ImportMasterUnitHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/importNoAdminUnitTenant",
				Handler: async.ImportNoAdminUnitTenantHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/importPerson", // TEST OK
				Handler: async.ImportPersonHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/importPhoneNumber",
				Handler: async.ImportPhoneNumberHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/importReplenishAdmin",
				Handler: async.ImportReplenishAdminHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/importTenant", // TEST OK
				Handler: async.ImportTenantHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/importTenantRelation", // TEST OK
				Handler: async.ImportTenantRelationHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/info", // TEST OK
				Handler: async.InfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/realGroupMerge",
				Handler: async.RealGroupMergeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/removeCache", // TEST OK
				Handler: async.RemoveCacheHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/removeInfo", // TEST OK
				Handler: async.RemoveInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/removeProgress", // TEST OK
				Handler: async.RemoveProgressHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/update/group/information",
				Handler: async.UpdategroupinformationHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/downloadImportTemplate", // TEST OK
				Handler: async.DownloadImportTemplateHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/asset-system/async"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/check/apply", // TEST OK
				Handler: grouptenantrelations.CheckapplyHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/clear",
				Handler: grouptenantrelations.ClearHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/disband/all/group",
				Handler: grouptenantrelations.DisbandallgroupHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/disband/group", // TEST OK
				Handler: grouptenantrelations.DisbandgroupHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/all/relations",
				Handler: grouptenantrelations.GetallrelationsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/below/group", // TEST OK
				Handler: grouptenantrelations.GetbelowgroupHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/below/layer", // TEST OK
				Handler: grouptenantrelations.GetbelowlayerHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/below/unit", // TEST OK
				Handler: grouptenantrelations.GetbelowunitHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/below/unit/list",
				Handler: grouptenantrelations.GetbelowunitlistHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/group/all/unit", // TEST OK
				Handler: grouptenantrelations.GetgroupallunitHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/group/all/unit/list",
				Handler: grouptenantrelations.GetgroupallunitlistHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/import/status", //TEST OK
				Handler: grouptenantrelations.GetimportstatusHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/no/properties/tenant",
				Handler: grouptenantrelations.GetnopropertiestenantHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/properties/tenant",
				Handler: grouptenantrelations.GetpropertiestenantHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/simple/group",
				Handler: grouptenantrelations.GetsimplegroupHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/tenant/apply/record", // TEST OK
				Handler: grouptenantrelations.GettenantapplyrecordHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getAdministrativeDivision",
				Handler: grouptenantrelations.GetAdministrativeDivisionHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getAllControlUnitList",
				Handler: grouptenantrelations.GetAllControlUnitListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getAllUnionIdList",
				Handler: grouptenantrelations.GetAllUnionIdListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getAssetGroupTenantTree",
				Handler: grouptenantrelations.GetAssetGroupTenantTreeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getBelowControlUnitList",
				Handler: grouptenantrelations.GetBelowControlUnitListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getDefaultGroup", // TEST OK
				Handler: grouptenantrelations.GetDefaultGroupHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getDifferentGroupManagerUnit",
				Handler: grouptenantrelations.GetDifferentGroupManagerUnitHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getGroupAllTenantCodeList",
				Handler: grouptenantrelations.GetGroupAllTenantCodeListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getGroupAllUnitSocialCreditCode",
				Handler: grouptenantrelations.GetGroupAllUnitSocialCreditCodeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getGroupBelowUnitIdList",
				Handler: grouptenantrelations.GetGroupBelowUnitIdListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getGroupPersonCount",
				Handler: grouptenantrelations.GetGroupPersonCountHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getGroupUnionIdList",
				Handler: grouptenantrelations.GetGroupUnionIdListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getManagerUnitIdList",
				Handler: grouptenantrelations.GetManagerUnitIdListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getUnitLayer",
				Handler: grouptenantrelations.GetUnitLayerHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getUpGroupId",
				Handler: grouptenantrelations.GetUpGroupIdHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getUpGroupManagerUnitId",
				Handler: grouptenantrelations.GetUpGroupManagerUnitIdHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getUserBaseInfo",
				Handler: grouptenantrelations.GetUserBaseInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/group/list", // TEST OK
				Handler: grouptenantrelations.GrouplistHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/group/tree", // TEST OK
				Handler: grouptenantrelations.GrouptreeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/groupAppDistribute",
				Handler: grouptenantrelations.GroupAppDistributeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/hideUnitInGroup", // TEST OK
				Handler: grouptenantrelations.HideUnitInGroupHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/import/group/relation",
				Handler: grouptenantrelations.ImportgrouprelationHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/import/tenant/relation",
				Handler: grouptenantrelations.ImporttenantrelationHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/joined/control/groupList", // TEST OK
				Handler: grouptenantrelations.JoinedcontrolgroupListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list/apply/tenant", // TEST OK
				Handler: grouptenantrelations.ListapplytenantHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/listPage",
				Handler: grouptenantrelations.ListPageHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/model/down/group",
				Handler: grouptenantrelations.ModeldowngroupHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/model/down/tenant",
				Handler: grouptenantrelations.ModeldowntenantHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/remove/leaf/tenants", // TEST OK
				Handler: grouptenantrelations.RemoveleaftenantsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/remove/tenants",
				Handler: grouptenantrelations.RemovetenantsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/removeByIds",
				Handler: grouptenantrelations.RemoveByIdsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/search/group/unit",
				Handler: grouptenantrelations.SearchgroupunitHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/searchGroupUnitByName",
				Handler: grouptenantrelations.SearchGroupUnitByNameHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/simple/tenant/group/tree",
				Handler: grouptenantrelations.SimpletenantgrouptreeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/sortLazyTree",
				Handler: grouptenantrelations.SortLazyTreeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/tenant/group/tree",
				Handler: grouptenantrelations.TenantgrouptreeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/tenant/join/group", // TEST OK
				Handler: grouptenantrelations.TenantjoingroupHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/tenants/join/group", // TEST OK
				Handler: grouptenantrelations.TenantsjoingroupHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/upGroup/tree", // TEST OK
				Handler: grouptenantrelations.UpGrouptreeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/layer/group",
				Handler: grouptenantrelations.GetlayergroupHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/update/father/tenant", // TEST OK
				Handler: grouptenantrelations.UpdatefathertenantHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/update/father/group",
				Handler: grouptenantrelations.UpdatefathergroupHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/update/group/information", // TEST OK
				Handler: grouptenantrelations.UpdategroupinformationHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/asset-system/grouptenantrelations"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/agency/add/dept/by/appid",
				Handler: inner.AgencyadddeptbyappidHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/agency/add/inner/user", // TEST OK
				Handler: inner.AgencyaddinneruserHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/agency/add/node",
				Handler: inner.AgencyaddnodeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/agency/add/nodes",
				Handler: inner.AgencyaddnodesHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/agency/addUsersToAgency",
				Handler: inner.AgencyaddUsersToAgencyHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/agency/delete/job/dept/users", // TEST OK
				Handler: inner.AgencydeletejobdeptusersHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/agency/delete/nodes", // TEST OK
				Handler: inner.AgencydeletenodesHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/agency/deleteUsersToAgency",
				Handler: inner.AgencydeleteUsersToAgencyHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/agency/deleted/inner/node",
				Handler: inner.AgencydeletedinnernodeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/agency/distribute/dept/persons", // TEST OK
				Handler: inner.AgencydistributedeptpersonsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/agency/export/innerAgency/v2",
				Handler: inner.AgencyexportinnerAgencyv2Handler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/agency/exportInnerAgencyData", // TEST OK
				Handler: inner.AgencyexportInnerAgencyDataHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/agency/get/all/pNode", // TEST OK
				Handler: inner.AgencygetallpNodeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/agency/get/dept/all/person", // TEST OK
				Handler: inner.AgencygetdeptallpersonHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/agency/get/job/dept",
				Handler: inner.AgencygetjobdeptHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/agency/get/jobs",
				Handler: inner.AgencygetjobsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/agency/get/jobs/page",
				Handler: inner.AgencygetjobspageHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/agency/get/node",
				Handler: inner.AgencygetnodeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/agency/getAgencyListByIds",
				Handler: inner.AgencygetAgencyListByIdsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/agency/getDeptCode", // TEST OK
				Handler: inner.AgencygetDeptCodeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/agency/getInnerAgencyByTenantCode",
				Handler: inner.AgencygetInnerAgencyByTenantCodeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/agency/getOrgDepartment",
				Handler: inner.AgencygetOrgDepartmentHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/agency/import/dept",
				Handler: inner.AgencyimportdeptHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/agency/import/innerAgency/v2",
				Handler: inner.AgencyimportinnerAgencyv2Handler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/agency/inner/tree", // TEST OK
				Handler: inner.AgencyinnertreeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/agency/innerAgency/model/v2",
				Handler: inner.AgencyinnerAgencymodelv2Handler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/agency/list/inner",
				Handler: inner.AgencylistinnerHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/agency/list/v2", // TEST OK
				Handler: inner.Agencylistv2Handler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/agency/list/v3",
				Handler: inner.Agencylistv3Handler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/agency/model/down/dept",
				Handler: inner.AgencymodeldowndeptHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/agency/searchDeptTree", // TEST OK
				Handler: inner.AgencysearchDeptTreeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/agency/select/users/by/agencyIdOrJobId",
				Handler: inner.AgencyselectusersbyagencyIdOrJobIdHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/agency/selectAgencyIdByUserId",
				Handler: inner.AgencyselectAgencyIdByUserIdHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/agency/selectUserIdsByAgencyId",
				Handler: inner.AgencyselectUserIdsByAgencyIdHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/agency/selectUsersByAgencyId",
				Handler: inner.AgencyselectUsersByAgencyIdHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/agency/update/inner/node",
				Handler: inner.AgencyupdateinnernodeHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/agency/update/inner/user", // TEST OK
				Handler: inner.AgencyupdateinneruserHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/agency/updateUsersToAgency",
				Handler: inner.AgencyupdateUsersToAgencyHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/asset-system/inner"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/v1/add/job/role",
				Handler: jobs.AddjobroleHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/v1/add/job/user", // TEST OK
				Handler: jobs.AddjobuserHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/v1/addJobsToUsers",
				Handler: jobs.AddJobsToUsersHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/v1/createGroupDefaultJob",
				Handler: jobs.CreateGroupDefaultJobHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/v1/deleteJobsToUsers",
				Handler: jobs.DeleteJobsToUsersHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/v1/export/job",
				Handler: jobs.ExportjobHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/v1/get/agencyId/jobId",
				Handler: jobs.GetagencyIdjobIdHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/v1/get/dept/job/role",
				Handler: jobs.GetdeptjobroleHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/v1/getJobListByIds",
				Handler: jobs.GetJobListByIdsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/v1/getJobListByUserId",
				Handler: jobs.GetJobListByUserIdHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/v1/import/groupjob",
				Handler: jobs.ImportgroupjobHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/v1/job/groupmodel",
				Handler: jobs.JobgroupmodelHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/v1/job/model",
				Handler: jobs.JobmodelHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/v1/list/job", // TEST OK
				Handler: jobs.ListjobHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/v1/list/v2", // TEST OK
				Handler: jobs.Listv2Handler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/v1/remove", //TEST OK
				Handler: jobs.RemoveHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/v1/searchJobList", // TEST OK
				Handler: jobs.SearchJobListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/v1/selectById",
				Handler: jobs.SelectByIdHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/v1/selectJobIdByUserId",
				Handler: jobs.SelectJobIdByUserIdHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/v1/selectJobsByUserId",
				Handler: jobs.SelectJobsByUserIdHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/v1/selectuserIdByJobId",
				Handler: jobs.SelectuserIdByJobIdHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/v1/submit",
				Handler: jobs.SubmitHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/v1/update/job/user", // TEST OK
				Handler: jobs.UpdatejobuserHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/v1/updateJobsToUsers", //TEST OK
				Handler: jobs.UpdateJobsToUsersHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/asset-system/jobs"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/allRoutes", // TEST OK
				Handler: menus.AllRoutesHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/buttons",
				Handler: menus.ButtonsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/detail",
				Handler: menus.DetailHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/menus/by/roleId",
				Handler: menus.GetmenusbyroleIdHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list", // TEST OK
				Handler: menus.ListHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/remove", // TEST OK
				Handler: menus.RemoveHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/role-tree-keys", // TEST OK
				Handler: menus.RoletreekeysHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/routes",
				Handler: menus.RoutesHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/submit", // TEST OK
				Handler: menus.SubmitHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/tenant-tree-keys",
				Handler: menus.TenanttreekeysHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/tree", // TEST OK
				Handler: menus.TreeHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/asset-system/v1/menus"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/v2/add/or/update",
				Handler: organs.V2addorupdateHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/v2/detail",
				Handler: organs.V2detailHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/v2/excel/organ",
				Handler: organs.V2excelorganHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/v2/getNowUnitInfo",
				Handler: organs.V2getNowUnitInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/v2/getUnitCodeMap",
				Handler: organs.V2getUnitCodeMapHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/v2/getUnitIdMap",
				Handler: organs.V2getUnitIdMapHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/v2/import/organ",
				Handler: organs.V2importorganHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/v2/is/identification",
				Handler: organs.V2isidentificationHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/v2/list",
				Handler: organs.V2listHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/v2/listAll",
				Handler: organs.V2listAllHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/v2/listPage", // TEST OK
				Handler: organs.V2listPageHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/v2/node",
				Handler: organs.V2nodeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/v2/nodes",
				Handler: organs.V2nodesHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/v2/organ/model",
				Handler: organs.V2organmodelHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/v2/removeByIds", // TEST OK
				Handler: organs.V2removeByIdsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/v2/submit", // TEST OK
				Handler: organs.V2submitHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/v2/update/unit",
				Handler: organs.V2updateunitHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/v2/nodes",
				Handler: organs.V2NodesHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/v2/node",
				Handler: organs.V2NodeHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/asset-system/organs"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/activate/user", // TEST OK
				Handler: person.ActivateuserHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: person.AddHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/addPerson", // TEST OK
				Handler: person.AddPersonHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/ban/user", // TEST OK
				Handler: person.BanuserHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/delete",
				Handler: person.DeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/exportExcel",
				Handler: person.ExportExcelHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/active/day/month",
				Handler: person.GetactivedaymonthHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/all/cons/person",
				Handler: person.GetallconspersonHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/get/all/cons/person/v2",
				Handler: person.Getallconspersonv2Handler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/all/person",
				Handler: person.GetallpersonHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/all/person/in/dept",
				Handler: person.GetallpersonindeptHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/all/person/in/tenant/:v", // TEST OK
				Handler: person.GetallpersonintenantHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/all/persons",
				Handler: person.GetallpersonsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/app/role/person",
				Handler: person.GetapprolepersonHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/init/person",
				Handler: person.GetinitpersonHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/person",
				Handler: person.GetpersonHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/person/by/id",
				Handler: person.GetpersonbyidHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/person/by/likeName",
				Handler: person.GetpersonbylikeNameHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/person/by/person/id",
				Handler: person.GetpersonbypersonidHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/person/tenantCode",
				Handler: person.GetpersontenantCodeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/tenant/into/persons",
				Handler: person.GettenantintopersonsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/user/data",
				Handler: person.GetuserdataHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/user/data2",
				Handler: person.Getuserdata2Handler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/user/info", // TEST OK
				Handler: person.GetuserinfoHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/user/login/time",
				Handler: person.GetuserlogintimeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getAllPersonInTenant",
				Handler: person.GetAllPersonInTenantAHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getAllPersonInTenantSimple",
				Handler: person.GetAllPersonInTenantSimpleHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getMasterUnit",
				Handler: person.GetMasterUnitHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getOrgEmployee",
				Handler: person.GetOrgEmployeeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getOrgs",
				Handler: person.GetOrgsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getPersonListByIds",
				Handler: person.GetPersonListByIdsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getUserCode", // TEST OK
				Handler: person.GetUserCodeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getUserInfoByMobile",
				Handler: person.GetUserInfoByMobileHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/import/admin",
				Handler: person.ImportadminHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/import/replenish/admin",
				Handler: person.ImportreplenishadminHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/import/replenish/phone/number",
				Handler: person.ImportreplenishphonenumberHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/import/tenant/person/user",
				Handler: person.ImporttenantpersonuserHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/import/unit/tenant",
				Handler: person.ImportunittenantHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/importExcel",
				Handler: person.ImportExcelHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/importExcel/v2",
				Handler: person.ImportExcelv2Handler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/importExcel2",
				Handler: person.ImportExcel2Handler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/listPage", // TEST OK
				Handler: person.ListPageHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/mergeUnit",
				Handler: person.MergeUnitHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/model/down",
				Handler: person.ModeldownHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/model/down/person/user",
				Handler: person.ModeldownpersonuserHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/model/down/replenish/admin",
				Handler: person.ModeldownreplenishadminHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/model/down/replenish/phoneNumber",
				Handler: person.ModeldownreplenishphoneNumberHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/model/down/unit/tenant",
				Handler: person.ModeldownunittenantHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/person/join/staff",
				Handler: person.PersonjoinstaffHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/person/leave/staff",
				Handler: person.PersonleavestaffHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/processMessageUserIds",
				Handler: person.ProcessMessageUserIdsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/remove", // TEST OK
				Handler: person.RemoveHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/remove/user",
				Handler: person.RemoveuserHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/replenish/phoneNumber", // TEST OK
				Handler: person.ReplenishphoneNumberHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/replenishUserCode",
				Handler: person.ReplenishUserCodeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/search/dept/person", // TEST OK
				Handler: person.SearchdeptpersonHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/search/user/allinfo/:v", // TEST OK
				Handler: person.SearchuserallinfoHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/search/user/info/:v", // TEST OK
				Handler: person.SearchuserinfoHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/searchPersonList",
				Handler: person.SearchPersonListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/setMasterUnit", // TEST OK
				Handler: person.SetMasterUnitHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/single/list",
				Handler: person.SinglelistHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/single/list/page",
				Handler: person.SinglelistpageHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/single/synchronize/all/person",
				Handler: person.SinglesynchronizeallpersonHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/single/synchronize/person/by/phone/number",
				Handler: person.SinglesynchronizepersonbyphonenumberHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/submit", // TEST OK
				Handler: person.SubmitHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/synchronizeTenantUserName",
				Handler: person.SynchronizeTenantUserNameHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/tenant/person",
				Handler: person.TenantpersonHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/update/user/getImg",
				Handler: person.UpdateUserGetImgHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/token/isExistPhoneNumber",
				Handler: person.TokenisExistPhoneNumberHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/update",
				Handler: person.UpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/update/user",
				Handler: person.UpdateuserHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/update/user/address",
				Handler: person.UpdateuseraddressHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/update/user/email",
				Handler: person.UpdateuseremailHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/update/user/phoneNumber",
				Handler: person.UpdateuserphoneNumberHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/update/user/photo",
				Handler: person.UpdateuserphotoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/update/user/realName", // TEST OK
				Handler: person.UpdateuserrealNameHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/update/v1",
				Handler: person.Updatev1Handler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/update/v2",
				Handler: person.Updatev2Handler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/asset-system/person"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/list", // TEST OK
				Handler: properties.ListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/listAll",
				Handler: properties.ListAllHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/submit",
				Handler: properties.SubmitHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/asset-system/properties"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add/distribute/properties", // TEST OK
				Handler: propertiesdistribution.AdddistributepropertiesHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/create/distribute/properties", // TEST OK
				Handler: propertiesdistribution.CreatedistributepropertiesHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/distribute/properties", // TEST OK
				Handler: propertiesdistribution.DistributepropertiesHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/properties/unit", // TEST OK
				Handler: propertiesdistribution.GetpropertiesunitHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/properties/unit/list", // TEST OK
				Handler: propertiesdistribution.GetpropertiesunitlistHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/remove/distributed/properties",
				Handler: propertiesdistribution.RemovedistributedpropertiesHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/removeProperties", // TEST OK
				Handler: propertiesdistribution.RemovePropertiesHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/update/distribute/properties",
				Handler: propertiesdistribution.UpdatedistributepropertiesHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/update/distributed/properties",
				Handler: propertiesdistribution.UpdatedistributedpropertiesHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/asset-system/propertiesdistribution"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/v1/addRolesToUsers",
				Handler: roles.AddRolesToUsersHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/v1/authorization", // TEST OK
				Handler: roles.AuthorizationHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/v1/deleteRolesToUsers", // TEST OK
				Handler: roles.DeleteRolesToUsersHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/v1/devRun/configMenu",
				Handler: roles.DevRunconfigMenuHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/v1/devRun/deleteConfigMenu",
				Handler: roles.DevRundeleteConfigMenuHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/v1/get/all/rolesList", // TEST OK
				Handler: roles.GetallrolesListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/v1/get/all/rolesPage",
				Handler: roles.GetallrolesPageHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/v1/getRoleIdList", // TEST OK
				Handler: roles.GetRoleIdListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/v1/list", // TEST OK
				Handler: roles.ListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/v1/list/roleIdList",
				Handler: roles.ListroleIdListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/v1/list/roleList",
				Handler: roles.ListroleListHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/v1/remove", // TEST OK
				Handler: roles.RemoveHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/v1/save", //TEST OK
				Handler: roles.SaveHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/v1/selectRoelIdByUserId",
				Handler: roles.SelectRoelIdByUserIdHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/v1/selectRoelListByUserId",
				Handler: roles.SelectRoelListByUserIdHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/v1/selectuserIdByRoleId",
				Handler: roles.SelectuserIdByRoleIdHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/v1/update", // TEST OK
				Handler: roles.UpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/v1/updateRolesToUsers", // TEST OK
				Handler: roles.UpdateRolesToUsersHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/v1/v1/list-by-attr", // TEST OK
				Handler: roles.ListbyattrHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/asset-system/roles"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add/admin/tenant",
				Handler: scenes.AddadmintenantHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/create/tenant", // TEST OK
				Handler: scenes.CreatetenantHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/delete/tenant",
				Handler: scenes.DeletetenantHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/all/tenant", // TEST OK
				Handler: scenes.GetalltenantHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/all/tenant/:v", // TEST OK
				Handler: scenes.GetalltenantHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/import/status",
				Handler: scenes.GetimportstatusHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/tenant/data",
				Handler: scenes.GettenantdataHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/tenant/uping",
				Handler: scenes.GettenantupingHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/unit/by/code",
				Handler: scenes.GetunitbycodeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getAppPurchaseGroupMap",
				Handler: scenes.GetAppPurchaseGroupMapHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getTenantByCode",
				Handler: scenes.GetTenantByCodeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getUnitPersonCount",
				Handler: scenes.GetUnitPersonCountHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/import/no/admin/unit/tenant",
				Handler: scenes.ImportnoadminunittenantHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/input/tenant",
				Handler: scenes.InputtenantHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/listPage", // TEST OK
				Handler: scenes.ListPageHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get/scene/allAttr",
				Handler: scenes.GetSceneAllAttrHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/model/down/no/admin/unit/tenant",
				Handler: scenes.ModeldownnoadminunittenantHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/query", // TEST OK
				Handler: scenes.QueryHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/query/by/name",
				Handler: scenes.QuerybynameHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/query/ten/info",
				Handler: scenes.QueryteninfoHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/query/tenant", // TEST OK
				Handler: scenes.QuerytenantHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/query/tenant/v2", // TEST OK
				Handler: scenes.QuerytenantHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/remove",
				Handler: scenes.RemoveHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/removeByIds", // TEST OK
				Handler: scenes.RemoveByIdsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/submit", // TEST OK
				Handler: scenes.SubmitHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/tenant/model/down",
				Handler: scenes.TenantmodeldownHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/transfer/authority",
				Handler: scenes.TransferauthorityHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/update",
				Handler: scenes.UpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/update/admin/tenant",
				Handler: scenes.UpdateadmintenantHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/update/unit/info", // TEST OK
				Handler: scenes.UpdateunitinfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/updateTheme",
				Handler: scenes.UpdateThemeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/v2/list",
				Handler: scenes.V2listHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/v2/user/list", // TEST OK
				Handler: scenes.V2userlistHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/v3/user/list",
				Handler: scenes.V3userlistHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/export/tenant/Excel", // TEST OK
				Handler: scenes.ExportTenantExcelHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/asset-system/scenes"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/attr/get/default/roleId",
				Handler: tenant.AttrgetdefaultroleIdHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/attr/list", // TEST OK
				Handler: tenant.AttrlistHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/attr/remove", // TEST OK
				Handler: tenant.AttrremoveHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/attr/role/alloc", // TEST OK
				Handler: tenant.AttrroleallocHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/attr/submit", // TEST OK
				Handler: tenant.AttrsubmitHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/attr/update/default/role",
				Handler: tenant.AttrupdatedefaultroleHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/asset-system/tenant"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/detail",
				Handler: tenanticon.DetailHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list", // TEST OK
				Handler: tenanticon.ListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/listPage",
				Handler: tenanticon.ListPageHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/remove", // TEST OK
				Handler: tenanticon.RemoveHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/submit",
				Handler: tenanticon.SubmitHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/submitIcons", // TEST OK
				Handler: tenanticon.SubmitIconsHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/asset-system/tenanticon"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/registration/retrieve/idCard",
				Handler: token.RegistrationretrieveidCardHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/asset-system/token"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/receiver/unread/number",
				Handler: message.ReceiverUnreadNumberHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/receiver/list",
				Handler: message.ReceiverListHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/asset-message/message"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/downloadimage",
				Handler: image.DownLoadImageHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/uploadimage",
				Handler: image.UploadImageHandler(serverCtx),
			},
		}, 
		rest.WithPrefix("/asset-system/image"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/addacthistory",
				Handler: acttodo.AddacthistoryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/addacttodo",
				Handler: acttodo.AddacttodoHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/approvelist",
				Handler: acttodo.ApprovelistHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/batchback",
				Handler: acttodo.BatchbackHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/batchpass",
				Handler: acttodo.BatchpassHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/deleteacttodo",
				Handler: acttodo.DeleteacttodoHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/deleteallacttodo",
				Handler: acttodo.DeleteallacttodoHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/finishproc",
				Handler: acttodo.FinishprocHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getUnitActTodoNumber",
				Handler: acttodo.GetUnitActTodoNumberHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getallacttodo", // TEST OK
				Handler: acttodo.GetallacttodoHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getallacttodobysearch", // TEST OK
				Handler: acttodo.GetallacttodobysearchHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getallacttodonum",
				Handler: acttodo.GetallacttodonumHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getallfinishacttodo", // TEST OK
				Handler: acttodo.GetallfinishacttodoHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getallhistoryacttodo", // TEST OK
				Handler: acttodo.GetallhistoryacttodoHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getallhistoryacttodobysearch",
				Handler: acttodo.GetallhistoryacttodobysearchHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getallmysendacttodo", // TEST OK
				Handler: acttodo.GetallmysendacttodoHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getallmysendacttodoBySearch",
				Handler: acttodo.GetallmysendacttodoBySearchHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/updateacttodo",
				Handler: acttodo.UpdateacttodoHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/asset-system/acttodo"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/actversion",
				Handler: dict.ActversionHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/addnewversion",
				Handler: dict.AddnewversionHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/deldict",
				Handler: dict.DeldictHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/delversion",
				Handler: dict.DelversionHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/detail",
				Handler: dict.DetailHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/dictionary",
				Handler: dict.DictionaryHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/filterbydict",
				Handler: dict.FilterbydictHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getDictList",
				Handler: dict.GetDictListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getDictListByCode",
				Handler: dict.GetDictListByCodeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getalldict", // TEST OK
				Handler: dict.GetalldictHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getallitembydict", // TEST OK
				Handler: dict.GetallitembydictHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getdictallversion",
				Handler: dict.GetdictallversionHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getdictmax", // TEST OK
				Handler: dict.GetdictmaxHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getitembydict", // TEST OK
				Handler: dict.GetitembydictHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getnewitembydict",
				Handler: dict.GetnewitembydictHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: dict.ListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/remove",
				Handler: dict.RemoveHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/removedict",
				Handler: dict.RemovedictHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/submit", // TEST OK
				Handler: dict.SubmitHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/token/getDictList",
				Handler: dict.TokengetDictListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/token/getDictListByCode",
				Handler: dict.TokengetDictListByCodeHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/asset-system/dict"),
	)
}
