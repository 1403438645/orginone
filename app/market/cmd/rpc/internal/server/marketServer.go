// Code generated by goctl. DO NOT EDIT!
// Source: market.proto

package server

import (
	"context"

	"orginone/app/market/cmd/rpc/internal/logic"
	"orginone/app/market/cmd/rpc/internal/svc"
	"orginone/common/rpcs/market"
)

type MarketServer struct {
	svcCtx *svc.ServiceContext
	market.UnimplementedMarketServer
}

func NewMarketServer(svcCtx *svc.ServiceContext) *MarketServer {
	return &MarketServer{
		svcCtx: svcCtx,
	}
}

// 获取单位应用
func (s *MarketServer) FintTenantPurchase(ctx context.Context, in *market.TenantPurchaseReq) (*market.CommonRpcRes, error) {
	l := logic.NewFintTenantPurchaseLogic(ctx, s.svcCtx)
	return l.FintTenantPurchase(in)
}

// 获取集团应用
func (s *MarketServer) FintGroupPurchase(ctx context.Context, in *market.GroupPurchaseReq) (*market.CommonRpcRes, error) {
	l := logic.NewFintGroupPurchaseLogic(ctx, s.svcCtx)
	return l.FintGroupPurchase(in)
}

// 获取应用市场应用分页
func (s *MarketServer) FindMarketApp(ctx context.Context, in *market.MarketAppReq) (*market.CommonRpcRes, error) {
	l := logic.NewFindMarketAppLogic(ctx, s.svcCtx)
	return l.FindMarketApp(in)
}

// 提交应用市场应用注册
func (s *MarketServer) SubmitMarketApp(ctx context.Context, in *market.CommonRpcReq) (*market.CommonRpcRes, error) {
	l := logic.NewSubmitMarketAppLogic(ctx, s.svcCtx)
	return l.SubmitMarketApp(in)
}

// 获取重新发布应用列表
func (s *MarketServer) GetRedeployAppList(ctx context.Context, in *market.GetRedeployReq) (*market.CommonRpcRes, error) {
	l := logic.NewGetRedeployAppListLogic(ctx, s.svcCtx)
	return l.GetRedeployAppList(in)
}

// 获取应用详情
func (s *MarketServer) GetMarketAppInfo(ctx context.Context, in *market.PrimaryKeyReq) (*market.CommonRpcRes, error) {
	l := logic.NewGetMarketAppInfoLogic(ctx, s.svcCtx)
	return l.GetMarketAppInfo(in)
}

// 集团租户应用购买列表
func (s *MarketServer) GetGroupDistributeAppTenantList(ctx context.Context, in *market.GroupPurchaseAppReq) (*market.CommonRpcRes, error) {
	l := logic.NewGetGroupDistributeAppTenantListLogic(ctx, s.svcCtx)
	return l.GetGroupDistributeAppTenantList(in)
}

// 获取集团分发配置
func (s *MarketServer) GetGroupDistributeConfigList(ctx context.Context, in *market.GroupAppByIdReq) (*market.CommonRpcRes, error) {
	l := logic.NewGetGroupDistributeConfigListLogic(ctx, s.svcCtx)
	return l.GetGroupDistributeConfigList(in)
}

// 单位应用退订
func (s *MarketServer) UnitAppUnsubscribe(ctx context.Context, in *market.UnitAppUnsubscribeReq) (*market.CommonRpcRes, error) {
	l := logic.NewUnitAppUnsubscribeLogic(ctx, s.svcCtx)
	return l.UnitAppUnsubscribe(in)
}

// 集团应用退订
func (s *MarketServer) GroupAppUnsubscribe(ctx context.Context, in *market.GroupAppUnsubscribeReq) (*market.CommonRpcRes, error) {
	l := logic.NewGroupAppUnsubscribeLogic(ctx, s.svcCtx)
	return l.GroupAppUnsubscribe(in)
}

// 获取应用已购租户
func (s *MarketServer) GetAppDisTenantList(ctx context.Context, in *market.AppLinkReq) (*market.CommonRpcRes, error) {
	l := logic.NewGetAppDisTenantListLogic(ctx, s.svcCtx)
	return l.GetAppDisTenantList(in)
}

// 获取应用已购集团
func (s *MarketServer) GetAppDisGroupList(ctx context.Context, in *market.AppLinkReq) (*market.CommonRpcRes, error) {
	l := logic.NewGetAppDisGroupListLogic(ctx, s.svcCtx)
	return l.GetAppDisGroupList(in)
}

// 获取通知列表
func (s *MarketServer) FindMarkAppNoticeList(ctx context.Context, in *market.FindMarkAppNoticeListReq) (*market.CommonRpcRes, error) {
	l := logic.NewFindMarkAppNoticeListLogic(ctx, s.svcCtx)
	return l.FindMarkAppNoticeList(in)
}

// 根据ID列表移除应用通知
func (s *MarketServer) RemoveMarkAppNoticeList(ctx context.Context, in *market.MarkAppNoticeIdsReq) (*market.CommonRpcRes, error) {
	l := logic.NewRemoveMarkAppNoticeListLogic(ctx, s.svcCtx)
	return l.RemoveMarkAppNoticeList(in)
}

// 根据ID列表获取应用通知
func (s *MarketServer) FindMarkAppNoticeByIds(ctx context.Context, in *market.MarkAppNoticeIdsReq) (*market.CommonRpcRes, error) {
	l := logic.NewFindMarkAppNoticeByIdsLogic(ctx, s.svcCtx)
	return l.FindMarkAppNoticeByIds(in)
}

// 单位获取应用
func (s *MarketServer) UnitAppPurchas(ctx context.Context, in *market.UnitAppPurchasReq) (*market.CommonRpcRes, error) {
	l := logic.NewUnitAppPurchasLogic(ctx, s.svcCtx)
	return l.UnitAppPurchas(in)
}

// 集团获取应用
func (s *MarketServer) GroupAppPurchas(ctx context.Context, in *market.GroupAppPurchasReq) (*market.CommonRpcRes, error) {
	l := logic.NewGroupAppPurchasLogic(ctx, s.svcCtx)
	return l.GroupAppPurchas(in)
}

// 获取应用对当前租户的分发情况
func (s *MarketServer) GetAppPurchasConfig(ctx context.Context, in *market.AppPurchasConfigReq) (*market.CommonRpcRes, error) {
	l := logic.NewGetAppPurchasConfigLogic(ctx, s.svcCtx)
	return l.GetAppPurchasConfig(in)
}

// 应用上下架
func (s *MarketServer) MarketAppOnOrOffSale(ctx context.Context, in *market.AppOnOrOffSaleReq) (*market.CommonRpcRes, error) {
	l := logic.NewMarketAppOnOrOffSaleLogic(ctx, s.svcCtx)
	return l.MarketAppOnOrOffSale(in)
}

// 应用删除
func (s *MarketServer) MarketAppDelete(ctx context.Context, in *market.DeleteAppReq) (*market.CommonRpcRes, error) {
	l := logic.NewMarketAppDeleteLogic(ctx, s.svcCtx)
	return l.MarketAppDelete(in)
}

// 应用部署
func (s *MarketServer) MarketAppDeploy(ctx context.Context, in *market.AppDeployReq) (*market.CommonRpcRes, error) {
	l := logic.NewMarketAppDeployLogic(ctx, s.svcCtx)
	return l.MarketAppDeploy(in)
}

// 应用取消部署
func (s *MarketServer) MarketAppCancelApply(ctx context.Context, in *market.AppCancelApplyReq) (*market.CommonRpcRes, error) {
	l := logic.NewMarketAppCancelApplyLogic(ctx, s.svcCtx)
	return l.MarketAppCancelApply(in)
}

// 应用发布
func (s *MarketServer) MarketAppPublish(ctx context.Context, in *market.CommonRpcReq) (*market.CommonRpcRes, error) {
	l := logic.NewMarketAppPublishLogic(ctx, s.svcCtx)
	return l.MarketAppPublish(in)
}

// 获取应用组件
func (s *MarketServer) GetAppComponmentList(ctx context.Context, in *market.AppLinkReq) (*market.CommonRpcRes, error) {
	l := logic.NewGetAppComponmentListLogic(ctx, s.svcCtx)
	return l.GetAppComponmentList(in)
}

// 应用权限分配
func (s *MarketServer) AppRoleDistribe(ctx context.Context, in *market.AppRoleDistribeRpcReq) (*market.CommonRpcRes, error) {
	l := logic.NewAppRoleDistribeLogic(ctx, s.svcCtx)
	return l.AppRoleDistribe(in)
}

// 获取应用权限分配数据
func (s *MarketServer) GetAppRoleDistribe(ctx context.Context, in *market.GetAppRoleDistribeReq) (*market.CommonRpcRes, error) {
	l := logic.NewGetAppRoleDistribeLogic(ctx, s.svcCtx)
	return l.GetAppRoleDistribe(in)
}

// 获取用户使用的应用Ids
func (s *MarketServer) GetUserAppIds(ctx context.Context, in *market.GetUserAppIdsReq) (*market.CommonRpcRes, error) {
	l := logic.NewGetUserAppIdsLogic(ctx, s.svcCtx)
	return l.GetUserAppIds(in)
}

// 获取应用组件
func (s *MarketServer) GetAppComponments(ctx context.Context, in *market.GetComponmentReq) (*market.CommonRpcRes, error) {
	l := logic.NewGetAppComponmentsLogic(ctx, s.svcCtx)
	return l.GetAppComponments(in)
}

// 获取用户应用组件
func (s *MarketServer) GetUserTemplates(ctx context.Context, in *market.GetUserTemplateReq) (*market.CommonRpcRes, error) {
	l := logic.NewGetUserTemplatesLogic(ctx, s.svcCtx)
	return l.GetUserTemplates(in)
}

// 获取用户应用组件ID
func (s *MarketServer) GetUserTemplateId(ctx context.Context, in *market.GetUserTemplateIdReq) (*market.CommonRpcRes, error) {
	l := logic.NewGetUserTemplateIdLogic(ctx, s.svcCtx)
	return l.GetUserTemplateId(in)
}

// 新增或修改通知
func (s *MarketServer) UpdateMarketAppNotice(ctx context.Context, in *market.UpdateMarketAppNoticeReq) (*market.CommonRpcRes, error) {
	l := logic.NewUpdateMarketAppNoticeLogic(ctx, s.svcCtx)
	return l.UpdateMarketAppNotice(in)
}

// 更新应用通知状态
func (s *MarketServer) UpdateMarkAppNoticesStatus(ctx context.Context, in *market.UpdateMarkAppNoticesStatusReq) (*market.CommonRpcRes, error) {
	l := logic.NewUpdateMarkAppNoticesStatusLogic(ctx, s.svcCtx)
	return l.UpdateMarkAppNoticesStatus(in)
}

// 查询Portal模板
func (s *MarketServer) GetMarketappcomponenttemplateList(ctx context.Context, in *market.MarketappcomponenttemplateListReq) (*market.CommonRpcRes, error) {
	l := logic.NewGetMarketappcomponenttemplateListLogic(ctx, s.svcCtx)
	return l.GetMarketappcomponenttemplateList(in)
}

// 集团取消分发
func (s *MarketServer) MarketAppUnitCancelDistribute(ctx context.Context, in *market.MarketAppUnitCancelDistributeReq) (*market.CommonRpcRes, error) {
	l := logic.NewMarketAppUnitCancelDistributeLogic(ctx, s.svcCtx)
	return l.MarketAppUnitCancelDistribute(in)
}

// 获取常用应用菜单
func (s *MarketServer) GetUsedAppMenu(ctx context.Context, in *market.GetUsedAppMenuReq) (*market.CommonRpcRes, error) {
	l := logic.NewGetUsedAppMenuLogic(ctx, s.svcCtx)
	return l.GetUsedAppMenu(in)
}

// 根据应用token获取应用角色信息
func (s *MarketServer) ApiRoleList(ctx context.Context, in *market.ApiRoleLitReq) (*market.CommonRpcRes, error) {
	l := logic.NewApiRoleListLogic(ctx, s.svcCtx)
	return l.ApiRoleList(in)
}

// 删除
func (s *MarketServer) RemoveByRelation(ctx context.Context, in *market.RemoveByRelationReq) (*market.CommonRpcRes, error) {
	l := logic.NewRemoveByRelationLogic(ctx, s.svcCtx)
	return l.RemoveByRelation(in)
}

// 常用应用排序
func (s *MarketServer) SortUsedApp(ctx context.Context, in *market.SortUsedAppReq) (*market.CommonRpcRes, error) {
	l := logic.NewSortUsedAppLogic(ctx, s.svcCtx)
	return l.SortUsedApp(in)
}

// 新增或修改
func (s *MarketServer) SubmitMarketUsedApp(ctx context.Context, in *market.SubmitMarketUsedAppReq) (*market.CommonRpcRes, error) {
	l := logic.NewSubmitMarketUsedAppLogic(ctx, s.svcCtx)
	return l.SubmitMarketUsedApp(in)
}

// 获取应用审核列表分页
func (s *MarketServer) FindMarketAppCheckList(ctx context.Context, in *market.FindMarketAppCheckListReq) (*market.CommonRpcRes, error) {
	l := logic.NewFindMarketAppCheckListLogic(ctx, s.svcCtx)
	return l.FindMarketAppCheckList(in)
}

// 通过或拒绝应用
func (s *MarketServer) CheckRedeploy(ctx context.Context, in *market.CheckRedeployReq) (*market.CommonRpcRes, error) {
	l := logic.NewCheckRedeployLogic(ctx, s.svcCtx)
	return l.CheckRedeploy(in)
}

// 通过或拒绝应用
func (s *MarketServer) AppCheck(ctx context.Context, in *market.AppCheckReq) (*market.CommonRpcRes, error) {
	l := logic.NewAppCheckLogic(ctx, s.svcCtx)
	return l.AppCheck(in)
}

// 查询app角色是否可以删除(发布时)
func (s *MarketServer) CheckRoleCanDelete(ctx context.Context, in *market.CheckRoleReq) (*market.CommonRpcRes, error) {
	l := logic.NewCheckRoleCanDeleteLogic(ctx, s.svcCtx)
	return l.CheckRoleCanDelete(in)
}
